[
    {
        "title": "Longest Substring Without Repeating Characters",
        "question_content": "Given a string s, find the length of the longest substring without repeating characters.\n&nbsp;\nExample 1:\n\nInput: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.\n\nExample 2:\n\nInput: s = \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1.\n\nExample 3:\n\nInput: s = \"pwwkew\"\nOutput: 3\nExplanation: The answer is \"wke\", with the length of 3.\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n\n&nbsp;\nConstraints:\n\n\t0 <= s.length <= 5 * 104\n\ts consists of English letters, digits, symbols and spaces.",
        "solutions": [
            {
                "id": 1729,
                "title": "11-line-simple-java-solution-o-n-with-explanation",
                "content": "the basic idea is, keep a hashmap which stores the characters in string as keys and their positions as values, and keep two pointers which define the max substring. move the right pointer to scan through the string , and meanwhile update the hashmap. If the character is already in the hashmap, then move the left pointer to the right of the same character last found. Note that the two pointers can only move forward. \\n\\n       public int lengthOfLongestSubstring(String s) {\\n            if (s.length()==0) return 0;\\n            HashMap<Character, Integer> map = new HashMap<Character, Integer>();\\n            int max=0;\\n            for (int i=0, j=0; i<s.length(); ++i){\\n                if (map.containsKey(s.charAt(i))){\\n                    j = Math.max(j,map.get(s.charAt(i))+1);\\n                }\\n                map.put(s.charAt(i),i);\\n                max = Math.max(max,i-j+1);\\n            }\\n            return max;\\n        }",
                "solutionTags": [],
                "code": "the basic idea is, keep a hashmap which stores the characters in string as keys and their positions as values, and keep two pointers which define the max substring. move the right pointer to scan through the string , and meanwhile update the hashmap. If the character is already in the hashmap, then move the left pointer to the right of the same character last found. Note that the two pointers can only move forward. \\n\\n       public int lengthOfLongestSubstring(String s) {\\n            if (s.length()==0) return 0;\\n            HashMap<Character, Integer> map = new HashMap<Character, Integer>();\\n            int max=0;\\n            for (int i=0, j=0; i<s.length(); ++i){\\n                if (map.containsKey(s.charAt(i))){\\n                    j = Math.max(j,map.get(s.charAt(i))+1);\\n                }\\n                map.put(s.charAt(i),i);\\n                max = Math.max(max,i-j+1);\\n            }\\n            return max;\\n        }",
                "codeTag": "Unknown"
            },
            {
                "id": 1737,
                "title": "c-code-in-9-lines",
                "content": "    int lengthOfLongestSubstring(string s) {\\n            vector<int> dict(256, -1);\\n            int maxLen = 0, start = -1;\\n            for (int i = 0; i != s.length(); i++) {\\n                if (dict[s[i]] > start)\\n                    start = dict[s[i]];\\n                dict[s[i]] = i;\\n                maxLen = max(maxLen, i - start);\\n            }\\n            return maxLen;\\n        }",
                "solutionTags": [
                    "C++"
                ],
                "code": "    int lengthOfLongestSubstring(string s) {\\n            vector<int> dict(256, -1);\\n            int maxLen = 0, start = -1;\\n            for (int i = 0; i != s.length(); i++) {\\n                if (dict[s[i]] > start)\\n                    start = dict[s[i]];\\n                dict[s[i]] = i;\\n                maxLen = max(maxLen, i - start);\\n            }\\n            return maxLen;\\n        }",
                "codeTag": "Unknown"
            },
            {
                "id": 1812,
                "title": "share-my-java-solution-using-hashset",
                "content": "The idea is use a hash set to track the longest substring without repeating characters so far, use a fast pointer j to see if character j is in the hash set or not, if not, great, add it to the hash set, move j forward and update the max length, otherwise, delete from the head by using a slow pointer i until we can put character j to the hash set.\\n\\n    public int lengthOfLongestSubstring(String s) {\\n        int i = 0, j = 0, max = 0;\\n        Set<Character> set = new HashSet<>();\\n        \\n        while (j < s.length()) {\\n            if (!set.contains(s.charAt(j))) {\\n                set.add(s.charAt(j++));\\n                max = Math.max(max, set.size());\\n            } else {\\n                set.remove(s.charAt(i++));\\n            }\\n        }\\n        \\n        return max;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "The idea is use a hash set to track the longest substring without repeating characters so far, use a fast pointer j to see if character j is in the hash set or not, if not, great, add it to the hash set, move j forward and update the max length, otherwise, delete from the head by using a slow pointer i until we can put character j to the hash set.\\n\\n    public int lengthOfLongestSubstring(String s) {\\n        int i = 0, j = 0, max = 0;\\n        Set<Character> set = new HashSet<>();\\n        \\n        while (j < s.length()) {\\n            if (!set.contains(s.charAt(j))) {\\n                set.add(s.charAt(j++));\\n                max = Math.max(max, set.size());\\n            } else {\\n                set.remove(s.charAt(i++));\\n            }\\n        }\\n        \\n        return max;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2133524,
                "title": "java-c-a-reall-detailed-explanation",
                "content": "So, the prerequisit of this problem is **Sliding Window**, if you know then it\\'s a plus point. But, if you don\\'t know don\\'t worry I\\'ll try to teach you.\\n\\nLet\\'s understand first of all what the problem is saying!!\\n```\\nGiven a string s, find the length of the longest substring without repeating characters.\\n```\\nOkay, so from the given statement we will try to find out wether it is a **Sliding Window** problem or not>>\\n\\nSo, to check that out I\\'m giving you a tempelate & it\\'ll work in almost all of the questions of **sliding window**\\n\\n```\\nTo, find out a sliding window problem :-\\n> First thing is, we have given something like an \"Array\" | OR | \"String\"\\n> Second thing is, they are talking about either \"subsequence\" | OR | \"substring\"\\n> And third most thing is, either we have given a \"window size i.e. k\" | OR | we have to \"manually find out window size\" \\n```\\n\\nNow, using above keys let\\'s understand wether this problem is of a sliding window or not.\\n```\\n> Are they talking about, \"Array\" or \"String\" --> yes they are talking about \"string\" +1 point\\n> Are they asking to find out \"subsequence\" or \"substring\" --> yes they are talking about \"substring\" +1 point\\n> Do, we have given a window size --> No, we don\\'t have\\n\\nTotal score is \"2 / 3\" so, it\\'s a 100% sliding window problem. If your score lies from 2/3 to 3/3 that\\'s a gauranteed sliding window problem \\n```\\n\\nNow, let\\'s talk about how we gonna implement sliding window in this problem, but before that I just want to tell you one more thing. There\\'s exist basically 2 types of sliding window.\\n1. Fix size sliding window **{means K is given}**\\n\\n\\n2. Variable silze sliding window **{means K is not given}**\\n\\n**Before moving to the problem I want to give you a template which you can use in any sliding window `{Variable size}` problem**\\n\\n```\\nwhile(j < size()){\\n\\n    // Calculation\\'s happen\\'s here\\n-----------------------------------------------\\n    if(condition < k){\\n        j++;\\n    }\\n-----------------------------------------------\\n\\n-----------------------------------------------\\n    else if(condition == k){\\n        // ans <-- calculation\\n        j++;\\n    }\\n----------------------------------------------\\n\\n----------------------------------------------\\n    else if(condition > k){\\n        while(condition > k){\\n            // remove calculation for i\\n            i++;\\n        }\\n        j++;\\n    }\\n----------------------------------------------\\n}\\nreturn ans;\\n```\\n\\nSo, in this problem we gonna deal with variable size sliding window. Let\\'s take one example :-\\n\\n```\\nInput: s = \"abcabcbb\"\\nOutput: 3\\n```\\n\\nSo, inorder to solve this, what I\\'m thinking is, we should have to use one more Data Structure to store the occurence of these characters, I thing HashMap will be best to use.\\n\\n* Now, what I\\'ll do is create 2 pointer\\'s i & j initally they both start from 0\\n* The j pointer will helps us to fill the array while the i pointer will helps in removing from the map {Don\\'t know what I\\'m talking about} just wait. You\\'ll understand :)\\n\\n```\\nLet\\'s understand it visually :-\\n```\\n\\n![image](https://assets.leetcode.com/users/images/664cc9c6-1440-4b88-a11f-ca27a67b5266_1654838647.047003.png)\\n\\n![image](https://assets.leetcode.com/users/images/088afd9c-bc21-46ca-b651-a46a75c02c4e_1654838698.0517573.png)\\n\\n![image](https://assets.leetcode.com/users/images/61717331-f54a-4940-9000-2bf95dc8af56_1654838746.162897.png)\\n\\n![image](https://assets.leetcode.com/users/images/3c62fa7f-e7e3-4063-b306-0a3495071004_1654838786.1087303.png)\\n\\n![image](https://assets.leetcode.com/users/images/c1aae088-b5e1-4328-aa1f-af414b0ef112_1654838837.5751796.png)\\n\\n![image](https://assets.leetcode.com/users/images/fe893a02-e560-4a8f-aaa1-f92e55dd35cd_1654838885.7713046.png)\\n\\n![image](https://assets.leetcode.com/users/images/6a268e77-c099-4f01-b0d5-136995310d3f_1654838919.9853337.png)\\n\\n![image](https://assets.leetcode.com/users/images/6811ecde-9e2a-47e6-b688-682bb3f0f5a2_1654838956.3712077.png)\\n\\n![image](https://assets.leetcode.com/users/images/a751f95a-f42b-4922-9609-c88ad5f339fb_1654838991.3203616.png)\\n\\n![image](https://assets.leetcode.com/users/images/f789c5cb-3e73-449e-80de-38f61d5404b9_1654839058.5881085.png)\\n\\n![image](https://assets.leetcode.com/users/images/65c28458-d89a-4008-afde-264598e4d127_1654839089.2232268.png)\\n\\n![image](https://assets.leetcode.com/users/images/2fb45c3b-a510-4a3b-be1d-02a53fc0ff02_1654839123.2810624.png)\\n\\n![image](https://assets.leetcode.com/users/images/5c80c220-70d8-4a9e-9689-a7cd1fb9e11d_1654839162.3931215.png)\\n\\n![image](https://assets.leetcode.com/users/images/b10fc6ab-9f8b-4035-bfbf-5b9e4cca3cb0_1654839175.0759387.png)\\n\\n\\n**Java**\\n```\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        Map<Character, Integer> map = new HashMap<>();\\n        int i = 0;\\n        int j = 0;\\n        int max = 0;\\n        while(j < s.length()){\\n            map.put(s.charAt(j), map.getOrDefault(s.charAt(j), 0) + 1);\\n            if(map.size() == j - i + 1){\\n                max = Math.max(max, j - i + 1);\\n                j++;\\n            }\\n            else if(map.size() < j - i + 1){\\n                while(map.size() < j - i + 1){\\n                    map.put(s.charAt(i), map.get(s.charAt(i)) - 1);\\n                    if(map.get(s.charAt(i)) == 0) map.remove(s.charAt(i));\\n                    i++;\\n                }\\n                j++;\\n            }\\n        }\\n        return max;\\n    }\\n}\\n```\\n**C++**\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        if(s.length()==0)return 0;   //if string of length zero comes simply return 0\\n        unordered_map<char,int> m;   //create map to store frequency,(get to know all unique characters\\n        int i=0,j=0,ans=INT_MIN; \\n        while(j<s.length())   \\n        {\\n            m[s[j]]++;  //increase the frequency of the element as you traverse the string\\n            if(m.size()==j-i+1)  // whem map size is equal to the window size means suppose window size is 3 and map size is also three that means in map all unique characters are their\\n            {\\n                ans = max(ans,j-i+1);  //compare the length of the maximum window size\\n            }\\n            else if(m.size()<j-i+1)   //if the map size is less than the window size means there is some duplicate present like window size = 3 and map size = 2 means there is a duplicates\\n            {\\n                while(m.size()<j-i+1)  //so till the duplicates are removed completely\\n                {\\n                    m[s[i]]--;   //remove the duplicates\\n                    if(m[s[i]]==0)  //if the frequency becomes zero \\n                    {\\n                        m.erase(s[i]);//delete it completely\\n                    }\\n                    i++;  //go for next element \\n                }\\n            }\\n             j++;  //go for the next element\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "Java",
                    "C"
                ],
                "code": "```\\nGiven a string s, find the length of the longest substring without repeating characters.\\n```\n```\\nTo, find out a sliding window problem :-\\n> First thing is, we have given something like an \"Array\" | OR | \"String\"\\n> Second thing is, they are talking about either \"subsequence\" | OR | \"substring\"\\n> And third most thing is, either we have given a \"window size i.e. k\" | OR | we have to \"manually find out window size\" \\n```\n```\\n> Are they talking about, \"Array\" or \"String\" --> yes they are talking about \"string\" +1 point\\n> Are they asking to find out \"subsequence\" or \"substring\" --> yes they are talking about \"substring\" +1 point\\n> Do, we have given a window size --> No, we don\\'t have\\n\\nTotal score is \"2 / 3\" so, it\\'s a 100% sliding window problem. If your score lies from 2/3 to 3/3 that\\'s a gauranteed sliding window problem \\n```\n```\\nwhile(j < size()){\\n\\n    // Calculation\\'s happen\\'s here\\n-----------------------------------------------\\n    if(condition < k){\\n        j++;\\n    }\\n-----------------------------------------------\\n\\n-----------------------------------------------\\n    else if(condition == k){\\n        // ans <-- calculation\\n        j++;\\n    }\\n----------------------------------------------\\n\\n----------------------------------------------\\n    else if(condition > k){\\n        while(condition > k){\\n            // remove calculation for i\\n            i++;\\n        }\\n        j++;\\n    }\\n----------------------------------------------\\n}\\nreturn ans;\\n```\n```\\nInput: s = \"abcabcbb\"\\nOutput: 3\\n```\n```\\nLet\\'s understand it visually :-\\n```\n```\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        Map<Character, Integer> map = new HashMap<>();\\n        int i = 0;\\n        int j = 0;\\n        int max = 0;\\n        while(j < s.length()){\\n            map.put(s.charAt(j), map.getOrDefault(s.charAt(j), 0) + 1);\\n            if(map.size() == j - i + 1){\\n                max = Math.max(max, j - i + 1);\\n                j++;\\n            }\\n            else if(map.size() < j - i + 1){\\n                while(map.size() < j - i + 1){\\n                    map.put(s.charAt(i), map.get(s.charAt(i)) - 1);\\n                    if(map.get(s.charAt(i)) == 0) map.remove(s.charAt(i));\\n                    i++;\\n                }\\n                j++;\\n            }\\n        }\\n        return max;\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        if(s.length()==0)return 0;   //if string of length zero comes simply return 0\\n        unordered_map<char,int> m;   //create map to store frequency,(get to know all unique characters\\n        int i=0,j=0,ans=INT_MIN; \\n        while(j<s.length())   \\n        {\\n            m[s[j]]++;  //increase the frequency of the element as you traverse the string\\n            if(m.size()==j-i+1)  // whem map size is equal to the window size means suppose window size is 3 and map size is also three that means in map all unique characters are their\\n            {\\n                ans = max(ans,j-i+1);  //compare the length of the maximum window size\\n            }\\n            else if(m.size()<j-i+1)   //if the map size is less than the window size means there is some duplicate present like window size = 3 and map size = 2 means there is a duplicates\\n            {\\n                while(m.size()<j-i+1)  //so till the duplicates are removed completely\\n                {\\n                    m[s[i]]--;   //remove the duplicates\\n                    if(m[s[i]]==0)  //if the frequency becomes zero \\n                    {\\n                        m.erase(s[i]);//delete it completely\\n                    }\\n                    i++;  //go for next element \\n                }\\n            }\\n             j++;  //go for the next element\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 347818,
                "title": "python3-sliding-window-o-n-with-explanation",
                "content": "**Sliding window**\\nWe use a dictionary to store the character as the key, the last appear index has been seen so far as value.\\nseen[charactor] = index\\n\\n move the pointer when you met a repeated character in your window.\\n\\n\\t  \\n```\\nindext    0    1    2    3   4   5   6   7\\nstring    a    c    b    d   b   a   c   d\\n          ^                  ^\\n          |                  |\\n\\t\\tleft               right\\n\\t\\tseen = {a : 0, c : 1, b : 2, d: 3} \\n\\t\\t# case 1: seen[b] = 2, current window  is s[0:4] , \\n\\t\\t#        b is inside current window, seen[b] = 2 > left = 0. Move left pointer to seen[b] + 1 = 3\\n\\t\\tseen = {a : 0, c : 1, b : 4, d: 3} \\nindext    0    1    2    3   4   5   6   7\\nstring    a    c    b    d   b   a   c   d\\n\\t\\t\\t\\t\\t\\t ^   ^\\n\\t\\t\\t\\t\\t     |   |\\n\\t\\t\\t\\t      left  right\\t\\t\\nindext    0    1    2    3   4   5   6   7\\nstring    a    c    b    d   b   a   c   d\\n\\t\\t\\t\\t\\t     ^       ^\\n\\t\\t\\t\\t\\t     |       |\\n\\t\\t\\t\\t       left    right\\t\\t\\n\\t\\t# case 2: seen[a] = 0,which means a not in current window s[3:5] , since seen[a] = 0 < left = 3 \\n\\t\\t# we can keep moving right pointer.\\n```\\n\\n```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        seen = {}\\n        l = 0\\n        output = 0\\n        for r in range(len(s)):\\n            \"\"\"\\n            If s[r] not in seen, we can keep increasing the window size by moving right pointer\\n            \"\"\"\\n            if s[r] not in seen:\\n                output = max(output,r-l+1)\\n            \"\"\"\\n            There are two cases if s[r] in seen:\\n            case1: s[r] is inside the current window, we need to change the window by moving left pointer to seen[s[r]] + 1.\\n            case2: s[r] is not inside the current window, we can keep increase the window\\n            \"\"\"\\n            else:\\n                if seen[s[r]] < l:\\n                    output = max(output,r-l+1)\\n                else:\\n                    l = seen[s[r]] + 1\\n            seen[s[r]] = r\\n        return output\\n```\\n* Time complexity :O(n). \\n\\tn is the length of the input string.\\n\\tIt will iterate n times to get the result.\\n\\n* Space complexity: O(m)\\n\\tm is the number of unique characters of the input. \\n\\tWe need a dictionary to store unique characters.\\n\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nindext    0    1    2    3   4   5   6   7\\nstring    a    c    b    d   b   a   c   d\\n          ^                  ^\\n          |                  |\\n\\t\\tleft               right\\n\\t\\tseen = {a : 0, c : 1, b : 2, d: 3} \\n\\t\\t# case 1: seen[b] = 2, current window  is s[0:4] , \\n\\t\\t#        b is inside current window, seen[b] = 2 > left = 0. Move left pointer to seen[b] + 1 = 3\\n\\t\\tseen = {a : 0, c : 1, b : 4, d: 3} \\nindext    0    1    2    3   4   5   6   7\\nstring    a    c    b    d   b   a   c   d\\n\\t\\t\\t\\t\\t\\t ^   ^\\n\\t\\t\\t\\t\\t     |   |\\n\\t\\t\\t\\t      left  right\\t\\t\\nindext    0    1    2    3   4   5   6   7\\nstring    a    c    b    d   b   a   c   d\\n\\t\\t\\t\\t\\t     ^       ^\\n\\t\\t\\t\\t\\t     |       |\\n\\t\\t\\t\\t       left    right\\t\\t\\n\\t\\t# case 2: seen[a] = 0,which means a not in current window s[3:5] , since seen[a] = 0 < left = 3 \\n\\t\\t# we can keep moving right pointer.\\n```\n```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        seen = {}\\n        l = 0\\n        output = 0\\n        for r in range(len(s)):\\n            \"\"\"\\n            If s[r] not in seen, we can keep increasing the window size by moving right pointer\\n            \"\"\"\\n            if s[r] not in seen:\\n                output = max(output,r-l+1)\\n            \"\"\"\\n            There are two cases if s[r] in seen:\\n            case1: s[r] is inside the current window, we need to change the window by moving left pointer to seen[s[r]] + 1.\\n            case2: s[r] is not inside the current window, we can keep increase the window\\n            \"\"\"\\n            else:\\n                if seen[s[r]] < l:\\n                    output = max(output,r-l+1)\\n                else:\\n                    l = seen[s[r]] + 1\\n            seen[s[r]] = r\\n        return output\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3157485,
                "title": "used-hashset-in-java-explained-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nif you know sliding window...then it can be intuitive. But if you don\\'t know ...no worry i will teach you...\\nRefer below approach points.....\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Use sliding window with hashset, use left and right pointers to move the window . \\n2. If the set doesn\\'t contains character then first add into the set and calculate the maxLength hand-in-hand... \\n3. if character already present in the set that means you have to move your sliding window by 1 , before that you have to remove all the characters that are infront of the character that is present already in window before.\\n4. Now you have to remove that character also and move the left pointer and also add the new character into the set.\\n5. THAT\\'S ALL........EASY APPROACH USING SIMPLE HASHSET+SLIDING WINDOW\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(k), where k is the number of distinctive characters prsent in the hashset.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        Set<Character>set=new HashSet<>();\\n        int maxLength=0;\\n        int left=0;\\n        for(int right=0;right<s.length();right++){\\n           \\n            if(!set.contains(s.charAt(right))){\\n                set.add(s.charAt(right));\\n                maxLength=Math.max(maxLength,right-left+1);\\n                \\n            }else{\\n                while(s.charAt(left)!=s.charAt(right)){\\n                    set.remove(s.charAt(left));\\n                    left++;\\n                }\\n                set.remove(s.charAt(left));left++;\\n                set.add(s.charAt(right));\\n            }\\n            \\n        }\\n        return maxLength;\\n    }\\n}\\n```\\n\\n![upvote.jpg](https://assets.leetcode.com/users/images/cb663845-f940-4fb1-b1ab-a31012fdacee_1675798037.916439.jpeg)\\n\\n\\n**PLEASE UPVOTE** .....if you find this solution useful , and if any suggestions to improve then please comment.",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Hash Table",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        Set<Character>set=new HashSet<>();\\n        int maxLength=0;\\n        int left=0;\\n        for(int right=0;right<s.length();right++){\\n           \\n            if(!set.contains(s.charAt(right))){\\n                set.add(s.charAt(right));\\n                maxLength=Math.max(maxLength,right-left+1);\\n                \\n            }else{\\n                while(s.charAt(left)!=s.charAt(right)){\\n                    set.remove(s.charAt(left));\\n                    left++;\\n                }\\n                set.remove(s.charAt(left));left++;\\n                set.add(s.charAt(right));\\n            }\\n            \\n        }\\n        return maxLength;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1731,
                "title": "a-python-solution-85ms-o-n",
                "content": "    class Solution:\\n        # @return an integer\\n        def lengthOfLongestSubstring(self, s):\\n            start = maxLength = 0\\n            usedChar = {}\\n            \\n            for i in range(len(s)):\\n                if s[i] in usedChar and start <= usedChar[s[i]]:\\n                    start = usedChar[s[i]] + 1\\n                else:\\n                    maxLength = max(maxLength, i - start + 1)\\n    \\n                usedChar[s[i]] = i\\n    \\n            return maxLength",
                "solutionTags": [
                    "Python"
                ],
                "code": "class Solution:\\n        # @return an integer\\n        def lengthOfLongestSubstring(self, s):\\n            start = maxLength = 0\\n            usedChar = {}",
                "codeTag": "Java"
            },
            {
                "id": 3649636,
                "title": "3-method-s-c-java-python-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe intuition behind the 3 solutions is to iteratively find the longest substring without repeating characters by maintaining a sliding window approach. We use two pointers (`left` and `right`) to represent the boundaries of the current substring. As we iterate through the string, we update the pointers and adjust the window to accommodate new unique characters and eliminate repeating characters.\\n\\n# Approach 1 - Set\\n<!-- Describe your approach to solving the problem. -->\\n\\n1. We use a set (`charSet`) to keep track of unique characters in the current substring.\\n2. We maintain two pointers, `left` and `right`, to represent the boundaries of the current substring.\\n3. The `maxLength` variable keeps track of the length of the longest substring encountered so far.\\n4. We iterate through the string using the `right` pointer.\\n5. If the current character is not in the set (`charSet`), it means we have a new unique character.\\n6. We insert the character into the set and update the `maxLength` if necessary.\\n7. If the character is already present in the set, it indicates a repeating character within the current substring.\\n8. In this case, we move the `left` pointer forward, removing characters from the set until the repeating character is no longer present.\\n9. We insert the current character into the set and continue the iteration.\\n10. Finally, we return the `maxLength` as the length of the longest substring without repeating characters.\\n\\n# Code\\n```C++ []\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        int n = s.length();\\n        int maxLength = 0;\\n        unordered_set<char> charSet;\\n        int left = 0;\\n        \\n        for (int right = 0; right < n; right++) {\\n            if (charSet.count(s[right]) == 0) {\\n                charSet.insert(s[right]);\\n                maxLength = max(maxLength, right - left + 1);\\n            } else {\\n                while (charSet.count(s[right])) {\\n                    charSet.erase(s[left]);\\n                    left++;\\n                }\\n                charSet.insert(s[right]);\\n            }\\n        }\\n        \\n        return maxLength;\\n    }\\n};\\n```\\n```Java []\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int n = s.length();\\n        int maxLength = 0;\\n        Set<Character> charSet = new HashSet<>();\\n        int left = 0;\\n        \\n        for (int right = 0; right < n; right++) {\\n            if (!charSet.contains(s.charAt(right))) {\\n                charSet.add(s.charAt(right));\\n                maxLength = Math.max(maxLength, right - left + 1);\\n            } else {\\n                while (charSet.contains(s.charAt(right))) {\\n                    charSet.remove(s.charAt(left));\\n                    left++;\\n                }\\n                charSet.add(s.charAt(right));\\n            }\\n        }\\n        \\n        return maxLength;\\n    }\\n}\\n\\n```\\n```Python3 []\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        n = len(s)\\n        maxLength = 0\\n        charSet = set()\\n        left = 0\\n        \\n        for right in range(n):\\n            if s[right] not in charSet:\\n                charSet.add(s[right])\\n                maxLength = max(maxLength, right - left + 1)\\n            else:\\n                while s[right] in charSet:\\n                    charSet.remove(s[left])\\n                    left += 1\\n                charSet.add(s[right])\\n        \\n        return maxLength\\n\\n```\\n\\n# Approach 2 - Unordered Map\\n1. We improve upon the first solution by using an unordered map (`charMap`) instead of a set.\\n2. The map stores characters as keys and their indices as values.\\n3. We still maintain the `left` and `right` pointers and the `maxLength` variable.\\n4. We iterate through the string using the `right` pointer.\\n5. If the current character is not in the map or its index is less than `left`, it means it is a new unique character.\\n6 We update the `charMap` with the character\\'s index and update the `maxLength` if necessary.\\n7. If the character is repeating within the current substring, we move the `left` pointer to the next position after the last occurrence of the character.\\n8. We update the index of the current character in the `charMap` and continue the iteration.\\n9. At the end, we return the `maxLength` as the length of the longest substring without repeating characters.\\n\\n# Code\\n```C++ []\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        int n = s.length();\\n        int maxLength = 0;\\n        unordered_map<char, int> charMap;\\n        int left = 0;\\n        \\n        for (int right = 0; right < n; right++) {\\n            if (charMap.count(s[right]) == 0 || charMap[s[right]] < left) {\\n                charMap[s[right]] = right;\\n                maxLength = max(maxLength, right - left + 1);\\n            } else {\\n                left = charMap[s[right]] + 1;\\n                charMap[s[right]] = right;\\n            }\\n        }\\n        \\n        return maxLength;\\n    }\\n};\\n```\\n```Java []\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int n = s.length();\\n        int maxLength = 0;\\n        Map<Character, Integer> charMap = new HashMap<>();\\n        int left = 0;\\n        \\n        for (int right = 0; right < n; right++) {\\n            if (!charMap.containsKey(s.charAt(right)) || charMap.get(s.charAt(right)) < left) {\\n                charMap.put(s.charAt(right), right);\\n                maxLength = Math.max(maxLength, right - left + 1);\\n            } else {\\n                left = charMap.get(s.charAt(right)) + 1;\\n                charMap.put(s.charAt(right), right);\\n            }\\n        }\\n        \\n        return maxLength;\\n    }\\n}\\n\\n```\\n```Python3 []\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        n = len(s)\\n        maxLength = 0\\n        charMap = {}\\n        left = 0\\n        \\n        for right in range(n):\\n            if s[right] not in charMap or charMap[s[right]] < left:\\n                charMap[s[right]] = right\\n                maxLength = max(maxLength, right - left + 1)\\n            else:\\n                left = charMap[s[right]] + 1\\n                charMap[s[right]] = right\\n        \\n        return maxLength\\n\\n```\\n\\n# Approach 3 - Integer Array\\n1. This solution uses an integer array `charIndex` to store the indices of characters.\\n2. We eliminate the need for an unordered map by utilizing the array.\\n3. The `maxLength`, `left`, and `right` pointers are still present.\\n4. We iterate through the string using the `right` pointer.\\n5. We check if the current character has occurred within the current substring by comparing its index in `charIndex` with `left`.\\n6. If the character has occurred, we move the `left` pointer to the next position after the last occurrence of the character.\\n7. We update the index of the current character in `charIndex`.\\n8. At each step, we update the `maxLength` by calculating the length of the current substring.\\n9. We continue the iteration until reaching the end of the string.\\n10. Finally, we return the `maxLength` as the length of the longest substring without repeating characters.\\n\\n# Code\\n```C++ []\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        int n = s.length();\\n        int maxLength = 0;\\n        vector<int> charIndex(128, -1);\\n        int left = 0;\\n        \\n        for (int right = 0; right < n; right++) {\\n            if (charIndex[s[right]] >= left) {\\n                left = charIndex[s[right]] + 1;\\n            }\\n            charIndex[s[right]] = right;\\n            maxLength = max(maxLength, right - left + 1);\\n        }\\n        \\n        return maxLength;\\n    }\\n};\\n```\\n```Java []\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int n = s.length();\\n        int maxLength = 0;\\n        int[] charIndex = new int[128];\\n        Arrays.fill(charIndex, -1);\\n        int left = 0;\\n        \\n        for (int right = 0; right < n; right++) {\\n            if (charIndex[s.charAt(right)] >= left) {\\n                left = charIndex[s.charAt(right)] + 1;\\n            }\\n            charIndex[s.charAt(right)] = right;\\n            maxLength = Math.max(maxLength, right - left + 1);\\n        }\\n        \\n        return maxLength;\\n    }\\n}\\n\\n```\\n```Python3 []\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        n = len(s)\\n        maxLength = 0\\n        charIndex = [-1] * 128\\n        left = 0\\n        \\n        for right in range(n):\\n            if charIndex[ord(s[right])] >= left:\\n                left = charIndex[ord(s[right])] + 1\\n            charIndex[ord(s[right])] = right\\n            maxLength = max(maxLength, right - left + 1)\\n        \\n        return maxLength\\n\\n```\\n\\n![CUTE_CAT.png](https://assets.leetcode.com/users/images/3831fd95-3bb1-44d1-bc1a-06b3b4317b56_1687028369.5286949.png)\\n**If you found my solution helpful, I would greatly appreciate your upvote, as it would motivate me to continue sharing more solutions.**\\n\\n\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3",
                    "Hash Table",
                    "String"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        int n = s.length();\\n        int maxLength = 0;\\n        unordered_set<char> charSet;\\n        int left = 0;\\n        \\n        for (int right = 0; right < n; right++) {\\n            if (charSet.count(s[right]) == 0) {\\n                charSet.insert(s[right]);\\n                maxLength = max(maxLength, right - left + 1);\\n            } else {\\n                while (charSet.count(s[right])) {\\n                    charSet.erase(s[left]);\\n                    left++;\\n                }\\n                charSet.insert(s[right]);\\n            }\\n        }\\n        \\n        return maxLength;\\n    }\\n};\\n```\n```Java []\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int n = s.length();\\n        int maxLength = 0;\\n        Set<Character> charSet = new HashSet<>();\\n        int left = 0;\\n        \\n        for (int right = 0; right < n; right++) {\\n            if (!charSet.contains(s.charAt(right))) {\\n                charSet.add(s.charAt(right));\\n                maxLength = Math.max(maxLength, right - left + 1);\\n            } else {\\n                while (charSet.contains(s.charAt(right))) {\\n                    charSet.remove(s.charAt(left));\\n                    left++;\\n                }\\n                charSet.add(s.charAt(right));\\n            }\\n        }\\n        \\n        return maxLength;\\n    }\\n}\\n\\n```\n```Python3 []\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        n = len(s)\\n        maxLength = 0\\n        charSet = set()\\n        left = 0\\n        \\n        for right in range(n):\\n            if s[right] not in charSet:\\n                charSet.add(s[right])\\n                maxLength = max(maxLength, right - left + 1)\\n            else:\\n                while s[right] in charSet:\\n                    charSet.remove(s[left])\\n                    left += 1\\n                charSet.add(s[right])\\n        \\n        return maxLength\\n\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        int n = s.length();\\n        int maxLength = 0;\\n        unordered_map<char, int> charMap;\\n        int left = 0;\\n        \\n        for (int right = 0; right < n; right++) {\\n            if (charMap.count(s[right]) == 0 || charMap[s[right]] < left) {\\n                charMap[s[right]] = right;\\n                maxLength = max(maxLength, right - left + 1);\\n            } else {\\n                left = charMap[s[right]] + 1;\\n                charMap[s[right]] = right;\\n            }\\n        }\\n        \\n        return maxLength;\\n    }\\n};\\n```\n```Java []\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int n = s.length();\\n        int maxLength = 0;\\n        Map<Character, Integer> charMap = new HashMap<>();\\n        int left = 0;\\n        \\n        for (int right = 0; right < n; right++) {\\n            if (!charMap.containsKey(s.charAt(right)) || charMap.get(s.charAt(right)) < left) {\\n                charMap.put(s.charAt(right), right);\\n                maxLength = Math.max(maxLength, right - left + 1);\\n            } else {\\n                left = charMap.get(s.charAt(right)) + 1;\\n                charMap.put(s.charAt(right), right);\\n            }\\n        }\\n        \\n        return maxLength;\\n    }\\n}\\n\\n```\n```Python3 []\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        n = len(s)\\n        maxLength = 0\\n        charMap = {}\\n        left = 0\\n        \\n        for right in range(n):\\n            if s[right] not in charMap or charMap[s[right]] < left:\\n                charMap[s[right]] = right\\n                maxLength = max(maxLength, right - left + 1)\\n            else:\\n                left = charMap[s[right]] + 1\\n                charMap[s[right]] = right\\n        \\n        return maxLength\\n\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        int n = s.length();\\n        int maxLength = 0;\\n        vector<int> charIndex(128, -1);\\n        int left = 0;\\n        \\n        for (int right = 0; right < n; right++) {\\n            if (charIndex[s[right]] >= left) {\\n                left = charIndex[s[right]] + 1;\\n            }\\n            charIndex[s[right]] = right;\\n            maxLength = max(maxLength, right - left + 1);\\n        }\\n        \\n        return maxLength;\\n    }\\n};\\n```\n```Java []\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int n = s.length();\\n        int maxLength = 0;\\n        int[] charIndex = new int[128];\\n        Arrays.fill(charIndex, -1);\\n        int left = 0;\\n        \\n        for (int right = 0; right < n; right++) {\\n            if (charIndex[s.charAt(right)] >= left) {\\n                left = charIndex[s.charAt(right)] + 1;\\n            }\\n            charIndex[s.charAt(right)] = right;\\n            maxLength = Math.max(maxLength, right - left + 1);\\n        }\\n        \\n        return maxLength;\\n    }\\n}\\n\\n```\n```Python3 []\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        n = len(s)\\n        maxLength = 0\\n        charIndex = [-1] * 128\\n        left = 0\\n        \\n        for right in range(n):\\n            if charIndex[ord(s[right])] >= left:\\n                left = charIndex[ord(s[right])] + 1\\n            charIndex[ord(s[right])] = right\\n            maxLength = max(maxLength, right - left + 1)\\n        \\n        return maxLength\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 376363,
                "title": "cpp-solution-for-beginners-o-n-time-longest-substring-without-repeating-characters",
                "content": "A solution for beginners, which is straightforward, easy to understand, without too many complications and room to optimize once you understand the basic premise of the question. Hope this helps!\\n\\nTime Complexity: O(n)\\nSpace Complexity: O(min of a,b) for the unordered set. a, is the upper bound of the space complexity.\\nWhere a: Size of the string\\nb: Size of the number of characters in the character-set\\n\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tint lengthOfLongestSubstring(string s) \\n\\t\\t{\\n\\t\\t\\tunordered_set<char> set;\\n        \\n\\t\\t\\tint i = 0, j = 0, n = s.size(), ans = 0;\\n        \\n\\t\\t\\twhile( i<n && j<n)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(set.find(s[j]) == set.end()) //If the character does not in the set\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tset.insert(s[j++]); //Insert the character in set and update the j counter\\n\\t\\t\\t\\t\\tans = max(ans, j-i); //Check if the new distance is longer than the current answer\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tset.erase(s[i++]); \\n\\t\\t\\t\\t\\t/*If character does exist in the set, ie. it is a repeated character, \\n\\t\\t\\t\\t\\twe update the left side counter i, and continue with the checking for substring. */\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n        \\n\\t\\t\\treturn ans;\\n\\t\\t}\\n\\t};",
                "solutionTags": [
                    "C++",
                    "Sliding Window"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tint lengthOfLongestSubstring(string s) \\n\\t\\t{\\n\\t\\t\\tunordered_set<char> set;\\n        \\n\\t\\t\\tint i = 0, j = 0, n = s.size(), ans = 0;\\n        \\n\\t\\t\\twhile( i<n && j<n)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(set.find(s[j]) == set.end()) //If the character does not in the set\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tset.insert(s[j++]); //Insert the character in set and update the j counter\\n\\t\\t\\t\\t\\tans = max(ans, j-i); //Check if the new distance is longer than the current answer\\n\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 742926,
                "title": "simple-explanation-concise-thinking-process-example",
                "content": "Lets start with the following example: \\n\\n**Assume you had no repeating characters** (In below example, just look at *first three* characters)\\n\\nWe take two pointers, `l` and `r`, both starting at `0`. At every iteration, we update the longest string with non-repeating characters found = `r-l+1` and just keep a note of which character we see at which index\\n\\n\\n<img src=\"https://assets.leetcode.com/users/images/3e7b9848-1d57-42ed-9629-59f14cfcce89_1595114117.3901849.png\" width=400/>\\n\\n\\n```python\\n    def lengthOfLongestSubstringSimpler(self, s):\\n        seen = {}\\n        left, right = 0, 0\\n        longest = 1\\n        while right < len(s):\\n            longest = max(longest, right - left + 1)\\n            seen[s[right]] = right\\n            right += 1\\n        return longest\\n```\\n\\nAfter 3 iterations, if you were keeping a map of when you last saw the character, you\\'d have something like this:\\n\\n<img src=\"https://assets.leetcode.com/users/images/2f60312a-d377-4786-9449-4a95210f72e2_1595114189.5949714.png\" width=300/>\\n\\nat this point, `longest = r-l+1 = 2 - 0 + 1 = 3`\\n\\nNow, lets face it - our string _does_ have repeating characters. We look at index 3, we\\'re realizing we\\'ve seen `a` before. So we now, we can\\'t just calculate the value of `longest` like we were doing before. We need to make sure our left pointer, or `l`, is at least past the index where we last saw `a` , thus - we move `l ` to ` seen[right]+1`. We also update our map with last seen of `a` to `3`\\n\\n<img src=\"https://assets.leetcode.com/users/images/b7aaad14-993b-47e9-af01-441bbc5dfe20_1595114261.38747.png\" width=300/>\\n\\nAnd this interplay goes on\\n\\n<img src=\"https://assets.leetcode.com/users/images/a22de24e-9e66-4e21-ab33-2ac06ce1d0cb_1595114354.4211376.png\" width=300/>\\n\\n\\n```python\\n    def lengthOfLongestSubstring(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int \\n        \"\"\"\\n        if len(s) == 0:\\n            return 0\\n        seen = {}\\n        left, right = 0, 0\\n        longest = 1\\n        while right < len(s):\\n            if s[right] in seen:\\n                left = seen[s[right]]+1\\n            longest = max(longest, right - left + 1)\\n            seen[s[right]] = right\\n            right += 1\\n        return longest\\n```\\n\\nLife was good, until this test case came into our lives:\\n`abba`\\n\\n<img src=\"https://assets.leetcode.com/users/images/cce6e442-6d18-4971-bcf2-d2c59ea11a51_1595115276.967406.png\" width=200/>\\n\\nAnd we realised, after 4 iterations, our left pointer was to be moved `seen[s[right]]+1 = seen[a] + 1 = 1` - wait what, left was to move back ? That doesn\\'t sound correct - that\\'d give us longest to be 3 (bba) which is NOT CORRECT\\n\\nThus, we need to ensure that `l` always goes to the right of it, or just stays at its position\\n\\nIn other words;\\n\\n```python\\nclass Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int abcabcbb\\n        \"\"\"\\n        if len(s) == 0:\\n            return 0\\n        seen = {}\\n        left, right = 0, 0\\n        longest = 1\\n        while right < len(s):\\n            if s[right] in seen:\\n                left = max(left,seen[s[right]]+1)\\n            longest = max(longest, right - left + 1)\\n            seen[s[right]] = right\\n            right += 1\\n            print(left, right, longest)\\n        return longest\\n```\\n\\nThanks, and don\\'t forget to upvote if it helped you !\\n\\n\\n\\n**BONUS** Trying to be a strong Java Developer ? Checkout this [awesome hands-on series](https://abhinandandubey.github.io/posts/tags/Advanced-Java-Series) with illustrations! \\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```python\\n    def lengthOfLongestSubstringSimpler(self, s):\\n        seen = {}\\n        left, right = 0, 0\\n        longest = 1\\n        while right < len(s):\\n            longest = max(longest, right - left + 1)\\n            seen[s[right]] = right\\n            right += 1\\n        return longest\\n```\n```python\\n    def lengthOfLongestSubstring(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int \\n        \"\"\"\\n        if len(s) == 0:\\n            return 0\\n        seen = {}\\n        left, right = 0, 0\\n        longest = 1\\n        while right < len(s):\\n            if s[right] in seen:\\n                left = seen[s[right]]+1\\n            longest = max(longest, right - left + 1)\\n            seen[s[right]] = right\\n            right += 1\\n        return longest\\n```\n```python\\nclass Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int abcabcbb\\n        \"\"\"\\n        if len(s) == 0:\\n            return 0\\n        seen = {}\\n        left, right = 0, 0\\n        longest = 1\\n        while right < len(s):\\n            if s[right] in seen:\\n                left = max(left,seen[s[right]]+1)\\n            longest = max(longest, right - left + 1)\\n            seen[s[right]] = right\\n            right += 1\\n            print(left, right, longest)\\n        return longest\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1014921,
                "title": "sliding-window-o-n-faster-than-90-and-memory-usage-less-than-100",
                "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        \\n        //SLIDING WINDOW  - TIME COMPLEXITY O(2n)\\n        //                  SPACE COMPLEXITY O(m)   //size of array\\n        \\n        int store[256]={0}; //array to store the occurences of all the characters\\n        int l=0;    //left pointer\\n        int r=0;    //right pointer\\n        int ans=0;  //initializing the required length as 0\\n        \\n        while(r<s.length())     //iterate over the string till the right pointer reaches the end of the string \\n        {\\n            store[s[r]]++;      //increment the count of the character present in the right pointer \\n            \\n            while(store[s[r]]>1)    //if the occurence become more than 1 means the char is repeated\\n            { \\n                store[s[l]]--;   //reduce the occurence of temp as it might be present ahead also in the string\\n                l++;         //contraction of the present window till the occurence of the \\'t\\' char becomes 1\\n            }\\n            \\n            ans = max(ans,r-l+1);    //As the index starts from 0 , ans will be (right pointer-left pointer + 1)\\n            r++;        // now will increment the right pointer \\n        }\\n        return ans;\\n    }\\n};\\n```\\n**If you like it, Do upvote \\nHappy Coding;**\\n\\n",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        \\n        //SLIDING WINDOW  - TIME COMPLEXITY O(2n)\\n        //                  SPACE COMPLEXITY O(m)   //size of array\\n        \\n        int store[256]={0}; //array to store the occurences of all the characters\\n        int l=0;    //left pointer\\n        int r=0;    //right pointer\\n        int ans=0;  //initializing the required length as 0\\n        \\n        while(r<s.length())     //iterate over the string till the right pointer reaches the end of the string \\n        {\\n            store[s[r]]++;      //increment the count of the character present in the right pointer \\n            \\n            while(store[s[r]]>1)    //if the occurence become more than 1 means the char is repeated\\n            { \\n                store[s[l]]--;   //reduce the occurence of temp as it might be present ahead also in the string\\n                l++;         //contraction of the present window till the occurence of the \\'t\\' char becomes 1\\n            }\\n            \\n            ans = max(ans,r-l+1);    //As the index starts from 0 , ans will be (right pointer-left pointer + 1)\\n            r++;        // now will increment the right pointer \\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3279507,
                "title": "best-c-fast-solution",
                "content": "# C++ Code\\n``` C++ []\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        if(s.length()==0)return 0;   //if string of length zero comes simply return 0\\n        unordered_map<char,int> m;   //create map to store frequency,(get to know all unique characters\\n        int i=0,j=0,ans=INT_MIN; \\n        while(j<s.length())   \\n        {\\n            m[s[j]]++;  //increase the frequency of the element as you traverse the string\\n            if(m.size()==j-i+1)  // whem map size is equal to the window size means suppose window size is 3 and map size is also three that means in map all unique characters are their\\n            {\\n                ans = max(ans,j-i+1);  //compare the length of the maximum window size\\n            }\\n            else if(m.size()<j-i+1)   //if the map size is less than the window size means there is some duplicate present like window size = 3 and map size = 2 means there is a duplicates\\n            {\\n                while(m.size()<j-i+1)  //so till the duplicates are removed completely\\n                {\\n                    m[s[i]]--;   //remove the duplicates\\n                    if(m[s[i]]==0)  //if the frequency becomes zero \\n                    {\\n                        m.erase(s[i]);//delete it completely\\n                    }\\n                    i++;  //go for next element \\n                }\\n            }\\n             j++;  //go for the next element\\n        }\\n        return ans;\\n    }\\n};\\n```\\n\\n![kitty.jpeg](https://assets.leetcode.com/users/images/fc434770-44aa-4898-b2af-64966ca6e7b1_1678438376.5987267.jpeg)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "``` C++ []\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        if(s.length()==0)return 0;   //if string of length zero comes simply return 0\\n        unordered_map<char,int> m;   //create map to store frequency,(get to know all unique characters\\n        int i=0,j=0,ans=INT_MIN; \\n        while(j<s.length())   \\n        {\\n            m[s[j]]++;  //increase the frequency of the element as you traverse the string\\n            if(m.size()==j-i+1)  // whem map size is equal to the window size means suppose window size is 3 and map size is also three that means in map all unique characters are their\\n            {\\n                ans = max(ans,j-i+1);  //compare the length of the maximum window size\\n            }\\n            else if(m.size()<j-i+1)   //if the map size is less than the window size means there is some duplicate present like window size = 3 and map size = 2 means there is a duplicates\\n            {\\n                while(m.size()<j-i+1)  //so till the duplicates are removed completely\\n                {\\n                    m[s[i]]--;   //remove the duplicates\\n                    if(m[s[i]]==0)  //if the frequency becomes zero \\n                    {\\n                        m.erase(s[i]);//delete it completely\\n                    }\\n                    i++;  //go for next element \\n                }\\n            }\\n             j++;  //go for the next element\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1730,
                "title": "shortest-o-n-dp-solution-with-explanations",
                "content": "    /**\\n     * Solution (DP, O(n)):\\n     * \\n     * Assume L[i] = s[m...i], denotes the longest substring without repeating\\n     * characters that ends up at s[i], and we keep a hashmap for every\\n     * characters between m ... i, while storing <character, index> in the\\n     * hashmap.\\n     * We know that each character will appear only once.\\n     * Then to find s[i+1]:\\n     * 1) if s[i+1] does not appear in hashmap\\n     *    we can just add s[i+1] to hash map. and L[i+1] = s[m...i+1]\\n     * 2) if s[i+1] exists in hashmap, and the hashmap value (the index) is k\\n     *    let m = max(m, k), then L[i+1] = s[m...i+1], we also need to update\\n     *    entry in hashmap to mark the latest occurency of s[i+1].\\n     * \\n     * Since we scan the string for only once, and the 'm' will also move from\\n     * beginning to end for at most once. Overall complexity is O(n).\\n     *\\n     * If characters are all in ASCII, we could use array to mimic hashmap.\\n     */\\n\\n    int lengthOfLongestSubstring(string s) {\\n        // for ASCII char sequence, use this as a hashmap\\n        vector<int> charIndex(256, -1);\\n        int longest = 0, m = 0;\\n\\n        for (int i = 0; i < s.length(); i++) {\\n            m = max(charIndex[s[i]] + 1, m);    // automatically takes care of -1 case\\n            charIndex[s[i]] = i;\\n            longest = max(longest, i - m + 1);\\n        }\\n\\n        return longest;\\n    }\\n\\n\\nHope you like it :)",
                "solutionTags": [],
                "code": "    /**\\n     * Solution (DP, O(n)):\\n     * \\n     * Assume L[i] = s[m...i], denotes the longest substring without repeating\\n     * characters that ends up at s[i], and we keep a hashmap for every\\n     * characters between m ... i, while storing <character, index> in the\\n     * hashmap.\\n     * We know that each character will appear only once.\\n     * Then to find s[i+1]:\\n     * 1) if s[i+1] does not appear in hashmap\\n     *    we can just add s[i+1] to hash map. and L[i+1] = s[m...i+1]\\n     * 2) if s[i+1] exists in hashmap, and the hashmap value (the index) is k\\n     *    let m = max(m, k), then L[i+1] = s[m...i+1], we also need to update\\n     *    entry in hashmap to mark the latest occurency of s[i+1].\\n     * \\n     * Since we scan the string for only once, and the 'm' will also move from\\n     * beginning to end for at most once. Overall complexity is O(n).\\n     *\\n     * If characters are all in ASCII, we could use array to mimic hashmap.\\n     */\\n\\n    int lengthOfLongestSubstring(string s) {\\n        // for ASCII char sequence, use this as a hashmap\\n        vector<int> charIndex(256, -1);\\n        int longest = 0, m = 0;\\n\\n        for (int i = 0; i < s.length(); i++) {\\n            m = max(charIndex[s[i]] + 1, m);    // automatically takes care of -1 case\\n            charIndex[s[i]] = i;\\n            longest = max(longest, i - m + 1);\\n        }\\n\\n        return longest;\\n    }\\n\\n\\nHope you like it :)",
                "codeTag": "Unknown"
            },
            {
                "id": 2694302,
                "title": "js-98-sliding-window-with-exlanation",
                "content": "![image](https://assets.leetcode.com/users/images/8f8012d5-d9a2-4887-8a8b-3d8670e1c32e_1665574502.5093148.png)\\n\\n**Window Sliding Technique** is a computational technique which aims to reduce the use of nested loop and replace it with a single loop, thereby reducing the time complexity.\\nThe Sliding window technique can reduce the time complexity to **O(n).**\\n\\n![image](https://assets.leetcode.com/users/images/9d3a36c0-7a7e-4d67-9034-5578ff769cc3_1665574655.3900712.png)\\n![image](https://assets.leetcode.com/users/images/2218dd45-66de-4d1c-930d-e8975588b659_1666078768.2626626.png)\\n\\n\\n\\nBelow are some basic tips for identifying this kind of problem where we could use the sliding window technique:\\n\\n* The problem will be based on an array, string, or list data structure.\\n* You need to find the subrange in this array or string that should provide the longest, shortest, or target values.\\n* A classic problem: to find the largest/smallest sum of given k (for example, three) consecutive numbers in an array.\\n\\nThe length can be **fixed**, as in the example above, or it can be **dynamic**, just like in this problem.\\n\\nSo to solve this problem, we can use the hash table and iterate over our term. Let\\'s do two checks on 0 and 1 so as not to waste extra time. Now we can start, in the picture above you can see our **window** (blue rectangle) and its movement during the scan. We gradually add our letters to the **hash table**, and if it already contains this letter, we delete the letter corresponding to the leftmost index, do this until we get to the desired one and delete the repetition. Only after that we add our new element. \\nThe maximum length is found by comparing our current length with the new one, using **Math.max**.\\n\\nIn the picture you can see all the movement of the window and the state of our hash table.\\n\\n\\n```\\nvar lengthOfLongestSubstring = function (s) {\\n    let set = new Set();\\n    let left = 0;\\n    let maxSize = 0;\\n\\n    if (s.length === 0) return 0;\\n    if (s.length === 1) return 1;\\n\\n    for (let i = 0; i < s.length; i++) {\\n\\n        while (set.has(s[i])) {\\n            set.delete(s[left])\\n            left++;\\n        }\\n        set.add(s[i]);\\n        maxSize = Math.max(maxSize, i - left + 1)\\n    }\\n    return maxSize;\\n}\\n```\\n\\nI hope I was able to explain clearly.\\n**Happy coding**! \\uD83D\\uDE43\\n",
                "solutionTags": [
                    "JavaScript",
                    "Hash Table",
                    "Sliding Window"
                ],
                "code": "```\\nvar lengthOfLongestSubstring = function (s) {\\n    let set = new Set();\\n    let left = 0;\\n    let maxSize = 0;\\n\\n    if (s.length === 0) return 0;\\n    if (s.length === 1) return 1;\\n\\n    for (let i = 0; i < s.length; i++) {\\n\\n        while (set.has(s[i])) {\\n            set.delete(s[left])\\n            left++;\\n        }\\n        set.add(s[i]);\\n        maxSize = Math.max(maxSize, i - left + 1)\\n    }\\n    return maxSize;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2291,
                "title": "9-line-javascript-solution",
                "content": "    function lengthOfLongestSubstring(s) {\\n        const map = {};\\n        var left = 0;\\n        \\n        return s.split('').reduce((max, v, i) => {\\n            left = map[v] >= left ? map[v] + 1 : left;\\n            map[v] = i;\\n            return Math.max(max, i - left + 1);\\n        }, 0);\\n    }",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "    function lengthOfLongestSubstring(s) {\\n        const map = {};\\n        var left = 0;\\n        \\n        return s.split('').reduce((max, v, i) => {\\n            left = map[v] >= left ? map[v] + 1 : left;\\n            map[v] = i;\\n            return Math.max(max, i - left + 1);\\n        }, 0);\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2132830,
                "title": "visual-explanation-sliding-window-java",
                "content": "### Logic:\\nThis difficulty in this question is finding out where to pick our next substring once we\\'ve spotted a duplicate character. Using two pointers and a sliding window, we can quite easily choose what substring we want to look at. In fact, finding the longest substring without repeating characters becomes even easier once you realise the following observation.\\n\\n**Key Observation:**\\n> Once we\\'ve landed on a character we\\'ve seen before, we want to move the left pointer of our window to the index *after* the last occurrence of that character.\\n\\nPay attention to the following example with the input string `s = \"babcadba\"` to see this in action:\\n\\n![image](https://assets.leetcode.com/users/images/394b1faa-f48c-486a-b672-8ccd6f758e2e_1666482154.3857741.png)\\n\\nAs you can see, our `nextIndex[]` array functions as both a hashset and a way to keep track of indexes. In particular, our array is storing the index AFTER the last occurrence of any character. That way, our left pointer can move directly there. \\n___\\n### How does this work in code?\\nTurns out characters can function as integers. As such, we can use the characters themselves to access values of our `nextIndex[]` array. We\\'ll need an array that has range: [0, 128) as that covers all ASCII characters that could be used in this question. \\n\\nSince we\\'re working with two pointers, we can quite conveniently find the length of our current window using `r - l + 1`. We can update this anytime it\\'s larger than our current maximum.\\n\\nAwesome. Now we\\'re ready to start coding!\\n\\n___\\n### Code\\nIf you have any questions, suggestions or improvements, feel free to let me know. Thanks for reading!\\n```java\\npublic int lengthOfLongestSubstring(String s) {\\n\\tint n = s.length(), longest = 0;\\n\\tint[] nextIndex = new int[128]; \\n\\n\\tfor (int r=0, l=0; r<n; r++) {\\n\\t\\tl = Math.max(nextIndex[s.charAt(r)], l); \\n\\t\\tlongest = Math.max(longest, r - l + 1);\\n\\t\\tnextIndex[s.charAt(r)] = r + 1;\\n\\t}\\n\\n\\treturn longest;\\n}\\n```\\n**Time Complexity:** `O(n)` where `n` is the length of the string.\\n**Space Complexity:** `O(128)` for the `nextIndex` array.",
                "solutionTags": [
                    "Java",
                    "Sliding Window"
                ],
                "code": "```java\\npublic int lengthOfLongestSubstring(String s) {\\n\\tint n = s.length(), longest = 0;\\n\\tint[] nextIndex = new int[128]; \\n\\n\\tfor (int r=0, l=0; r<n; r++) {\\n\\t\\tl = Math.max(nextIndex[s.charAt(r)], l); \\n\\t\\tlongest = Math.max(longest, r - l + 1);\\n\\t\\tnextIndex[s.charAt(r)] = r + 1;\\n\\t}\\n\\n\\treturn longest;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2804868,
                "title": "short-c-expained-solution-11-line-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe have to find the length of longest substring which does not contain any repeating characters\\n\\nThe first thing which should come in our mind is to traverse in the string and store the frequence of each character in a map type of \"map<char ,int>\" and try to maintain frequency of all the characters present in the map to 1 and storing the maximum length \\n\\n\\n# Approach\\n1:- We will first iterate over the string and store the frequencies of all the character we have visited in a map of type \"map<char ,int>\"\\n\\n2:- In each iteration we will check if the frequency of character at ith index is greater than one.....if yes it means that that character is repeated twice in our map so we will start erasing all the characters from the starting jth index untill we delete the same character which is repeated twice...... from the left\\n\\nex :- `Input: s = \"abcabcbb\"`\\n\\n`i=0 mp:{[a:1]}`\\n|| length =1 , maxlength = 1  \\n\\n`i=1 mp:{[a:1] , [b:1]}`\\n|| length =2 , maxlength = 2\\n\\n`i=2 mp:{[a:1] , [b:1] , [c:1]}`\\n|| length =3 , maxlength = 3\\n\\n`i=3 mp:{[a:2] , [b:1] , [c:1]}`\\n|| length =4 , maxlength =3\\n\\n\\'a\\' appeared 2 times , so we will start removing characters from the left untill the frequency of \\'a\\' becomes 1 again.\\nwhile(mp[a]>1) , we will decrease the frequency of all the characters from left i.e. \"mp[s[j++]]--\" ......Variable j stores the starting index of our subarray , Initially it is 0 but as we start deleting characters from left , this j will be get increment....that is why we did j++ there.\\nwhen j=0 , mp[s[j++]] will get decrease by one and the frequency of a will again be equal to 1\\n\\n`i=3 mp:{[a:1] , [b:1] , [c:1]}`\\n|| length =3 , maxlength =3\\n\\n3:- In each iteration we will take the maximum of (maxlength ,length) and store it in max length\\n\\nThis process will continue till we reach the end of the string and will return maxlength which is the length of longest substring with no repeating characters in it \\n\\n\\n\\n\\n# Code\\n```\\n    int lengthOfLongestSubstring(string s) {\\n        int length=0 , maxlength=0,j=0;\\n        map<char ,int> mp;\\n        for(int i=0 ;i<s.size(); i++){\\n            mp[s[i]]++;\\n            length++;\\n                while(mp[s[i]]>1){\\n                    mp[s[j++]]--;\\n                    length--;\\n                }\\n            maxlength = max(maxlength,length);\\n        }\\n        return maxlength;\\n    }\\n```\\n\\n# Please do upvote if you like the Explanation",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Two Pointers",
                    "String",
                    "Sliding Window"
                ],
                "code": "```\\n    int lengthOfLongestSubstring(string s) {\\n        int length=0 , maxlength=0,j=0;\\n        map<char ,int> mp;\\n        for(int i=0 ;i<s.size(); i++){\\n            mp[s[i]]++;\\n            length++;\\n                while(mp[s[i]]>1){\\n                    mp[s[j++]]--;\\n                    length--;\\n                }\\n            maxlength = max(maxlength,length);\\n        }\\n        return maxlength;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3278822,
                "title": "best-java-fast-solution",
                "content": "# JAVA Code\\n``` JAVA []\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        Set<Character>set=new HashSet<>();\\n        int maxLength=0;\\n        int left=0;\\n        for(int right=0;right<s.length();right++){\\n           \\n            if(!set.contains(s.charAt(right))){\\n                set.add(s.charAt(right));\\n                maxLength=Math.max(maxLength,right-left+1);\\n                \\n            }else{\\n                while(s.charAt(left)!=s.charAt(right)){\\n                    set.remove(s.charAt(left));\\n                    left++;\\n                }\\n                set.remove(s.charAt(left));left++;\\n                set.add(s.charAt(right));\\n            }\\n            \\n        }\\n        return maxLength;\\n    }\\n}\\n```\\n\\n### hey friend, why not upvote? \\uD83E\\uDD72\\n\\n![upvote_me.jpeg](https://assets.leetcode.com/users/images/53f427bc-92c5-4415-ac63-c3fd542fe70f_1678425517.4273114.jpeg)\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "``` JAVA []\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        Set<Character>set=new HashSet<>();\\n        int maxLength=0;\\n        int left=0;\\n        for(int right=0;right<s.length();right++){\\n           \\n            if(!set.contains(s.charAt(right))){\\n                set.add(s.charAt(right));\\n                maxLength=Math.max(maxLength,right-left+1);\\n                \\n            }else{\\n                while(s.charAt(left)!=s.charAt(right)){\\n                    set.remove(s.charAt(left));\\n                    left++;\\n                }\\n                set.remove(s.charAt(left));left++;\\n                set.add(s.charAt(right));\\n            }\\n            \\n        }\\n        return maxLength;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1781,
                "title": "python-solution-with-comments",
                "content": "\\n    def lengthOfLongestSubstring(self, s):\\n        dic, res, start, = {}, 0, 0\\n        for i, ch in enumerate(s):\\n            if ch in dic:\\n                res = max(res, i-start) # update the res\\n                start = max(start, dic[ch]+1)  # here should be careful, like \"abba\"\\n            dic[ch] = i\\n        return max(res, len(s)-start)  # return should consider the last non-repeated substring",
                "solutionTags": [
                    "Python"
                ],
                "code": "\\n    def lengthOfLongestSubstring(self, s):\\n        dic, res, start, = {}, 0, 0\\n        for i, ch in enumerate(s):\\n            if ch in dic:\\n                res = max(res, i-start) # update the res\\n                start = max(start, dic[ch]+1)  # here should be careful, like \"abba\"\\n            dic[ch] = i\\n        return max(res, len(s)-start)  # return should consider the last non-repeated substring",
                "codeTag": "Python3"
            },
            {
                "id": 577010,
                "title": "c-solution-using-set",
                "content": "```\\n    int lengthOfLongestSubstring(string s) {\\n        int n=s.length();\\n        if(n==0)\\n            return 0;\\n        set<char> st;\\n        int maxsize=0;\\n        int i=0,j=0;\\n        while(j<n)\\n        {\\n            if(st.count(s[j])==0)\\n            {\\n                st.insert(s[j]);\\n                maxsize=max(maxsize,(int)st.size());\\n                j++;\\n            }\\n            else\\n            {\\n                st.erase(s[i]);\\n                i++;\\n            }\\n        }\\n        return maxsize;\\n    }\\n\\t",
                "solutionTags": [
                    "C++",
                    "C",
                    "Ordered Set"
                ],
                "code": "```\\n    int lengthOfLongestSubstring(string s) {\\n        int n=s.length();\\n        if(n==0)\\n            return 0;\\n        set<char> st;\\n        int maxsize=0;\\n        int i=0,j=0;\\n        while(j<n)\\n        {\\n            if(st.count(s[j])==0)\\n            {\\n                st.insert(s[j]);\\n                maxsize=max(maxsize,(int)st.size());\\n                j++;\\n            }\\n            else\\n            {\\n                st.erase(s[i]);\\n                i++;\\n            }\\n        }\\n        return maxsize;\\n    }\\n\\t",
                "codeTag": "Unknown"
            },
            {
                "id": 1115635,
                "title": "c-all-approaches-brute-force-sliding-window-12ms-map-solution-for-longest-substring",
                "content": "Dear All,\\n\\nI solved this issue with different approaches and happy to share with you. Probably looking to all of them and comparing you will understand which one is better and why. All solutions containes comments for your better understanding of algorithm. Hope you will enjoy =)\\n\\nPlease find below my last and best solution with Sliding Window approach. Here we have O(n) time complexity(where n is a length of string) and O(k) space complexity(where k is unique characters from the string). You can notice that find() takes additional affort and Time Complexity won\\'t be equal to O(n). I will try to explain: In general Time Complexity of searching elements in map is O(log n) in worst case. But exactly in our case it\\'s very close to O(1) because we add only unique characters and range of possible characters is very small compared to string length. Let\\'s imagine that our string contains 1 000 000 characters. But in Hash Table will be maximum 128 characters(in real life even less because some specific characters won\\'t not used). Method find() in our case will be O(log 128) = 7 - very close to constant time. So, on each step logic will do maximum 7 additional steps. That\\'s why it\\'s very close to O(n). We can say that TC is O(n * log m), where n - length of string, m - number of unique characters from string. But since we know that m not more than 128, and log m not more than 7 - is very close to constant and we can ignore it.\\nWe can try to use unordered_map that TC of find is O(1). The reason why I use map instead - unordered_map is not stable. In worst case TC will be O(n), not O(1). It happens when hash function will generate same hash index that calls collisions. Also unordered_map required for extra space for Hash Table. map - always O(log n). Since we know that log n = 7 in worse case - make sense use map.\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) \\n    {        \\n        // Return 0 if string is empty\\n        if( s == \"\") { return 0; }\\n        \\n        // Hash table for storing characters and indexes\\n        map<char, int> characters;       \\n        \\n        // Longest sequence that will be returned in the end: for sure will be > 1 because 0 result was checked in the beginning\\n        int longest = 1;\\n        int j = 0;\\n        \\n        // Each character from string add to HashTable with his index. If we reach same character again - update index\\n        for (int i = 0; i < s.length(); ++i)\\n        {\\n            // If current character already exist in the HashTable  \\n            if ( characters.find(s[i]) != characters.end() )\\n            {\\n                // Take larger index for future calculation between old and current+1 in HashTable\\n                j = j >= characters.find(s[i])->second + 1 ? j : characters.find(s[i])->second + 1;\\n            }\\n            // Add character with current index to HashTable\\n            characters[s[i]] = i;\\n            // longest will be chosen between larger value: old longest OR current sequance between i and j indexes + 1\\n            longest = longest >= i - j + 1 ? longest : i - j + 1;\\n        }\\n        \\n        return longest;\\n    }\\n};\\n```\\n\\nNext will be my first try with brute force solution that has O(n^3) complexity. This approach will work here in LeetCode for small strings, but for big you will receive status \\'Time Limit Exceeded\\'. In your IDE it will work even for big strings but very slowly. Iterator used just for practice. New method was created in private section for checking dublicates in substring - `bool dublicatesInSubstring(string& s, const int substringBegin, const int substringEnd)`.\\n```\\nclass Solution {\\nprivate:\\n    // Method for dublicates check in substring\\n    bool dublicatesInSubstring(string& s, const int substringBegin, const int substringEnd)\\n    {\\n        std::map<char, int> charactersOfSubstr;\\n        std::map<char, int>::iterator it;\\n        \\n        // Check substring for dublicates\\n        for(int i = substringBegin; i <= substringEnd; ++i )\\n        {\\n            // Add character to HashTable\\n            it = charactersOfSubstr.find(s[i]);\\n            if ( it != charactersOfSubstr.end() )\\n            {\\n                it->second++;\\n            }\\n            else\\n            {\\n                charactersOfSubstr.insert(std::pair<char,int>(s[i], 0));\\n            }\\n            // In case HashTable has more that one such character - return true that means dublicates exist in substring\\n            if( it->second > 0 )\\n            {\\n                return true;\\n            }\\n        }\\n        \\n        return false;\\n    }\\n    \\npublic:\\n    int lengthOfLongestSubstring(string s) \\n    {\\n        // Return 0 if string is empty\\n        if( s == \"\") { return 0; }\\n        \\n        // Longest sequence that will be returned in the end\\n        int longest = 0;\\n        \\n        // For each character from string - ckech longest sequence untin end of the string\\n        for (int i = 0; i < s.length(); ++i)\\n        {\\n            for(int j = i; j < s.length(); ++j)\\n            {\\n                // In case no dublicates - function return false and longest substring should be calculated\\n                if ( !dublicatesInSubstring(s, i, j) )\\n                {\\n                    longest = longest >= j - i + 1 ? longest : j - i + 1;\\n                }\\n            }\\n        }\\n        \\n        return longest;\\n    }\\n};\\n```\\n\\nMy next try was approach with O(n^2) complexity that much faster than previous and LeetCode finished all test cases without \\'Time Limit Exceeded\\' status. Iterator also used only for practice.\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) \\n    {        \\n        // Return 0 if string is empty\\n        if( s == \"\") { return 0; }\\n        \\n        std::map<char, int> charactersOfSubstr;\\n        std::map<char, int>::iterator it;        \\n        \\n        // Longest sequence that will be returned in the end\\n        int longest = 0;\\n        \\n        // For each character from string - check longest sequence until encountered dublicate\\n        for (int i = 0; i < s.length(); ++i)\\n        {\\n            // HashTable should be cleared before starting with new substring analyzing\\n            charactersOfSubstr.clear();\\n            for(int j = i; j < s.length(); ++j)\\n            {\\n                // Try to find character in the HashTable\\n                it = charactersOfSubstr.find(s[j]);\\n                \\n                // If current character already exist in the HashTable - quit from j-loop to get next character for analyze\\n                if (it != charactersOfSubstr.end())\\n                {\\n                    break;\\n                }\\n                // If character doesn\\'t exist in HashTable - add it and recount unique sequence lenght\\n                else\\n                {\\n                    charactersOfSubstr.insert(pair<char, int>(s[j], 1));\\n                                              \\n                    // longest will be chose\\u0442 between larger value: old longest OR current sequance (j - i + 1)\\n                    longest = longest >= j - i + 1 ? longest : j - i + 1;\\n                }                \\n            }\\n        }\\n        \\n        return longest;\\n    }\\n};\\n```\\n\\nNext try was very close to O(n) but still loop inside loop used. After this approach I thought that it\\'s possible to get rid of nested loop.\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) \\n    {        \\n        // Return 0 if string is empty\\n        if( s == \"\") { return 0; }\\n        \\n        // Hash table for storing characters and count dublicates\\n        std::map<char, int> charactersOfSubstr;       \\n        \\n        // Longest sequence that will be returned in the end\\n        int longest = 0;\\n        int j = 0;\\n        \\n        // Each character from string add to HashTable: for dublicates increase value that used in result calculation\\n        for (int i = 0; i < s.length(); ++i)\\n        {\\n            // Try to find character in the HashTable\\n            // If current character already exist in the HashTable - increment value\\n            if ( charactersOfSubstr.find(s[i]) != charactersOfSubstr.end() )\\n            {\\n                charactersOfSubstr.find(s[i])->second++;\\n            }\\n            // Othervise add it to HashTable\\n            else\\n            {\\n                charactersOfSubstr.insert(pair<char, int>(s[i], 1));\\n            }\\n            \\n            // ONLY if in HashTable exist several same characters:\\n            // decrease ALL characters between j and i in HashTable AND increase j for calculation while s[i] value in Hash table > 1\\n            while ( charactersOfSubstr.find(s[i])->second > 1 )\\n            {\\n                // Descrease value of existing character\\n                charactersOfSubstr.find(s[j])->second--;\\n                // Increase j for future calculation\\n                ++j;\\n            }\\n            \\n            // longest will be chosen between larger value: old longest OR current sequance (i - j + 1)\\n            longest = longest >= i - j + 1 ? longest : i - j + 1;\\n        }\\n        \\n        return longest;\\n    }\\n};\\n```\\n\\nHope you read until the end and enjoyed =)\\nIf you know how to improve the code - please let me know I will be very grateful.\\nIf you like solution please vote - I will be pleased.\\n\\nThanks and have a good day.\\n\\nBest Regards, Yevhen.\\n",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sliding Window",
                    "Iterator"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) \\n    {        \\n        // Return 0 if string is empty\\n        if( s == \"\") { return 0; }\\n        \\n        // Hash table for storing characters and indexes\\n        map<char, int> characters;       \\n        \\n        // Longest sequence that will be returned in the end: for sure will be > 1 because 0 result was checked in the beginning\\n        int longest = 1;\\n        int j = 0;\\n        \\n        // Each character from string add to HashTable with his index. If we reach same character again - update index\\n        for (int i = 0; i < s.length(); ++i)\\n        {\\n            // If current character already exist in the HashTable  \\n            if ( characters.find(s[i]) != characters.end() )\\n            {\\n                // Take larger index for future calculation between old and current+1 in HashTable\\n                j = j >= characters.find(s[i])->second + 1 ? j : characters.find(s[i])->second + 1;\\n            }\\n            // Add character with current index to HashTable\\n            characters[s[i]] = i;\\n            // longest will be chosen between larger value: old longest OR current sequance between i and j indexes + 1\\n            longest = longest >= i - j + 1 ? longest : i - j + 1;\\n        }\\n        \\n        return longest;\\n    }\\n};\\n```\n```\\nclass Solution {\\nprivate:\\n    // Method for dublicates check in substring\\n    bool dublicatesInSubstring(string& s, const int substringBegin, const int substringEnd)\\n    {\\n        std::map<char, int> charactersOfSubstr;\\n        std::map<char, int>::iterator it;\\n        \\n        // Check substring for dublicates\\n        for(int i = substringBegin; i <= substringEnd; ++i )\\n        {\\n            // Add character to HashTable\\n            it = charactersOfSubstr.find(s[i]);\\n            if ( it != charactersOfSubstr.end() )\\n            {\\n                it->second++;\\n            }\\n            else\\n            {\\n                charactersOfSubstr.insert(std::pair<char,int>(s[i], 0));\\n            }\\n            // In case HashTable has more that one such character - return true that means dublicates exist in substring\\n            if( it->second > 0 )\\n            {\\n                return true;\\n            }\\n        }\\n        \\n        return false;\\n    }\\n    \\npublic:\\n    int lengthOfLongestSubstring(string s) \\n    {\\n        // Return 0 if string is empty\\n        if( s == \"\") { return 0; }\\n        \\n        // Longest sequence that will be returned in the end\\n        int longest = 0;\\n        \\n        // For each character from string - ckech longest sequence untin end of the string\\n        for (int i = 0; i < s.length(); ++i)\\n        {\\n            for(int j = i; j < s.length(); ++j)\\n            {\\n                // In case no dublicates - function return false and longest substring should be calculated\\n                if ( !dublicatesInSubstring(s, i, j) )\\n                {\\n                    longest = longest >= j - i + 1 ? longest : j - i + 1;\\n                }\\n            }\\n        }\\n        \\n        return longest;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) \\n    {        \\n        // Return 0 if string is empty\\n        if( s == \"\") { return 0; }\\n        \\n        std::map<char, int> charactersOfSubstr;\\n        std::map<char, int>::iterator it;        \\n        \\n        // Longest sequence that will be returned in the end\\n        int longest = 0;\\n        \\n        // For each character from string - check longest sequence until encountered dublicate\\n        for (int i = 0; i < s.length(); ++i)\\n        {\\n            // HashTable should be cleared before starting with new substring analyzing\\n            charactersOfSubstr.clear();\\n            for(int j = i; j < s.length(); ++j)\\n            {\\n                // Try to find character in the HashTable\\n                it = charactersOfSubstr.find(s[j]);\\n                \\n                // If current character already exist in the HashTable - quit from j-loop to get next character for analyze\\n                if (it != charactersOfSubstr.end())\\n                {\\n                    break;\\n                }\\n                // If character doesn\\'t exist in HashTable - add it and recount unique sequence lenght\\n                else\\n                {\\n                    charactersOfSubstr.insert(pair<char, int>(s[j], 1));\\n                                              \\n                    // longest will be chose\\u0442 between larger value: old longest OR current sequance (j - i + 1)\\n                    longest = longest >= j - i + 1 ? longest : j - i + 1;\\n                }                \\n            }\\n        }\\n        \\n        return longest;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) \\n    {        \\n        // Return 0 if string is empty\\n        if( s == \"\") { return 0; }\\n        \\n        // Hash table for storing characters and count dublicates\\n        std::map<char, int> charactersOfSubstr;       \\n        \\n        // Longest sequence that will be returned in the end\\n        int longest = 0;\\n        int j = 0;\\n        \\n        // Each character from string add to HashTable: for dublicates increase value that used in result calculation\\n        for (int i = 0; i < s.length(); ++i)\\n        {\\n            // Try to find character in the HashTable\\n            // If current character already exist in the HashTable - increment value\\n            if ( charactersOfSubstr.find(s[i]) != charactersOfSubstr.end() )\\n            {\\n                charactersOfSubstr.find(s[i])->second++;\\n            }\\n            // Othervise add it to HashTable\\n            else\\n            {\\n                charactersOfSubstr.insert(pair<char, int>(s[i], 1));\\n            }\\n            \\n            // ONLY if in HashTable exist several same characters:\\n            // decrease ALL characters between j and i in HashTable AND increase j for calculation while s[i] value in Hash table > 1\\n            while ( charactersOfSubstr.find(s[i])->second > 1 )\\n            {\\n                // Descrease value of existing character\\n                charactersOfSubstr.find(s[j])->second--;\\n                // Increase j for future calculation\\n                ++j;\\n            }\\n            \\n            // longest will be chosen between larger value: old longest OR current sequance (i - j + 1)\\n            longest = longest >= i - j + 1 ? longest : i - j + 1;\\n        }\\n        \\n        return longest;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2739188,
                "title": "python-c-java-rust-0-ms-position-difference-with-detailed-comments",
                "content": "**\\u2705 IF YOU LIKE THIS SOLUTION, PLEASE UPVOTE.**\\n****\\nThis solution employs storage of positions and calculation of their differences for repeated characters. Time complexity is linear: **O(N)**. Space complexity is constant: **O(1)**. \\n\\n| Language | [**Python**](https://leetcode.com/submissions/detail/829196177/) | [**C++**](https://leetcode.com/submissions/detail/829199746/) | [**Java**](https://leetcode.com/submissions/detail/829275351/) | [**Rust**](https://leetcode.com/submissions/detail/829192202/) | \\n|---|---|---|---|---|\\n| Runtime | **62 ms (95.17%)** | **0 ms (100.00%)** | **2 ms (100.00%)** | **0 ms (100.00%)** |\\n| Memory | **14.0 MB  (93.06%)** | **7.6 MB (87.55%)** | **42.1 MB  (98.23%)** | **7.6 MB  (87.55%)** |\\n\\n<iframe src=\"https://leetcode.com/playground/U5pR5wcg/shared\" frameBorder=\"0\" width=\"800\" height=\"600\"></iframe>",
                "solutionTags": [
                    "Java",
                    "Python",
                    "C",
                    "Rust"
                ],
                "code": "**\\u2705 IF YOU LIKE THIS SOLUTION, PLEASE UPVOTE.**\\n****\\nThis solution employs storage of positions and calculation of their differences for repeated characters. Time complexity is linear: **O(N)**. Space complexity is constant: **O(1)**. \\n\\n| Language | [**Python**](https://leetcode.com/submissions/detail/829196177/) | [**C++**](https://leetcode.com/submissions/detail/829199746/) | [**Java**](https://leetcode.com/submissions/detail/829275351/) | [**Rust**](https://leetcode.com/submissions/detail/829192202/) | \\n|---|---|---|---|---|\\n| Runtime | **62 ms (95.17%)** | **0 ms (100.00%)** | **2 ms (100.00%)** | **0 ms (100.00%)** |\\n| Memory | **14.0 MB  (93.06%)** | **7.6 MB (87.55%)** | **42.1 MB  (98.23%)** | **7.6 MB  (87.55%)** |\\n\\n<iframe src=\"https://leetcode.com/playground/U5pR5wcg/shared\" frameBorder=\"0\" width=\"800\" height=\"600\"></iframe>",
                "codeTag": "Unknown"
            },
            {
                "id": 731639,
                "title": "javascript-clean-heavily-commented-solution",
                "content": "Time Complexity = `O(N)`\\nSpace Complexity = `O(N)`\\n```javascript\\nvar lengthOfLongestSubstring = function(s) {\\n    // keeps track of the most recent index of each letter.\\n    const seen = new Map();\\n    // keeps track of the starting index of the current substring.\\n    let start = 0;\\n    // keeps track of the maximum substring length.\\n    let maxLen = 0;\\n    \\n    for(let i = 0; i < s.length; i++) {\\n        // if the current char was seen, move the start to (1 + the last index of this char)\\n        // max prevents moving backward, \\'start\\' can only move forward\\n        if(seen.has(s[i])) start = Math.max(seen.get(s[i]) + 1, start)\\n        seen.set(s[i], i);\\n        // maximum of the current substring length and maxLen\\n        maxLen = Math.max(i - start + 1, maxLen);\\n    } \\n    \\n    return maxLen;  \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```javascript\\nvar lengthOfLongestSubstring = function(s) {\\n    // keeps track of the most recent index of each letter.\\n    const seen = new Map();\\n    // keeps track of the starting index of the current substring.\\n    let start = 0;\\n    // keeps track of the maximum substring length.\\n    let maxLen = 0;\\n    \\n    for(let i = 0; i < s.length; i++) {\\n        // if the current char was seen, move the start to (1 + the last index of this char)\\n        // max prevents moving backward, \\'start\\' can only move forward\\n        if(seen.has(s[i])) start = Math.max(seen.get(s[i]) + 1, start)\\n        seen.set(s[i], i);\\n        // maximum of the current substring length and maxLen\\n        maxLen = Math.max(i - start + 1, maxLen);\\n    } \\n    \\n    return maxLen;  \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 389496,
                "title": "python-easy-solution-with-comment-90-o-n-speed-98-space",
                "content": "```\\nclass Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        seen = \\'\\'\\n        mx = 0\\n\\t\\t#1. for each character in s\\n        for c in s:\\n\\t\\t\\t#2. check if c is seen\\n            if c not in seen:\\n\\t\\t\\t#3. if not seen, add to seen list \\n                seen+=c\\n            #4 if seen, slice seen list to previous c\\n            # for example, if c is \\'a\\' and seen list is \\'abc\\'\\n            # you will be slicing previous \\'a\\'(seen.index(c)+1), thus seen list become \\'bc\\'\\n            # then add the current \\'a\\' bc + a, seenlist = \\'bca\\'\\n            else:\\n                seen = seen[seen.index(c) + 1:] + c\\n            #5 check max length between current max with new length of seen\\n            mx = max(mx, len(seen))\\n        return mx\\n```\\n\\nUpdate 09/11/21.\\nAnother way of doing it. (not super fast but just for the record)\\nusing left and right index with help of dictionary\\n\\n```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        seen = {}\\n        mx = left = 0\\n        #1. for each character in s\\n        for right, c in enumerate(s):\\n            #2. check if c is seen\\n            if c in seen:\\n                #3. if seen, advance left index\\n                left = max(left, seen[c] + 1)\\n            #4. regardless the character seen or not seen,\\n            #   it will update the index of the charater.\\n            seen[c] = right\\n            #5. check max length between current left index and right index + 1\\n            mx = max(mx, right-left+1)\\n        return mx\\n```\\n\\nw/o comments\\n```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        seen = {}\\n        mx = left = 0\\n        for right, c in enumerate(s):\\n            if c in seen:\\n                left = max(left, seen[c] + 1)\\n            seen[c] = right\\n            mx = max(mx, right-left+1)\\n        return mx\\n\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        seen = \\'\\'\\n        mx = 0\\n\\t\\t#1. for each character in s\\n        for c in s:\\n\\t\\t\\t#2. check if c is seen\\n            if c not in seen:\\n\\t\\t\\t#3. if not seen, add to seen list \\n                seen+=c\\n            #4 if seen, slice seen list to previous c\\n            # for example, if c is \\'a\\' and seen list is \\'abc\\'\\n            # you will be slicing previous \\'a\\'(seen.index(c)+1), thus seen list become \\'bc\\'\\n            # then add the current \\'a\\' bc + a, seenlist = \\'bca\\'\\n            else:\\n                seen = seen[seen.index(c) + 1:] + c\\n            #5 check max length between current max with new length of seen\\n            mx = max(mx, len(seen))\\n        return mx\\n```\n```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        seen = {}\\n        mx = left = 0\\n        #1. for each character in s\\n        for right, c in enumerate(s):\\n            #2. check if c is seen\\n            if c in seen:\\n                #3. if seen, advance left index\\n                left = max(left, seen[c] + 1)\\n            #4. regardless the character seen or not seen,\\n            #   it will update the index of the charater.\\n            seen[c] = right\\n            #5. check max length between current left index and right index + 1\\n            mx = max(mx, right-left+1)\\n        return mx\\n```\n```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        seen = {}\\n        mx = left = 0\\n        for right, c in enumerate(s):\\n            if c in seen:\\n                left = max(left, seen[c] + 1)\\n            seen[c] = right\\n            mx = max(mx, right-left+1)\\n        return mx\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1134880,
                "title": "accepted-solution-for-swift",
                "content": "<blockquote>\\n<b>Disclaimer:</b> By using any content from this post or thread, you release the author(s) from all liability and warranty of any kind. You are free to use the content freely and as you see fit. Any suggestions for improvement are welcome and greatly appreciated! Happy coding!\\n</blockquote>\\n\\n```swift\\nclass Solution {\\n    func lengthOfLongestSubstring(_ s: String) -> Int {\\n        guard !s.isEmpty else { return 0 }\\n        var len = 0, chars = [Character]()\\n        for c in s {\\n            if let idx = chars.firstIndex(of: c) {\\n                chars.removeSubrange(0...idx)\\n            }\\n            chars.append(c)\\n            len = max(len, chars.count)\\n        }\\n        return len\\n    }\\n}\\n```\\n\\n<b>Playground and test cases: https://leetcode.com/playground/RCFf98E3</b>",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```swift\\nclass Solution {\\n    func lengthOfLongestSubstring(_ s: String) -> Int {\\n        guard !s.isEmpty else { return 0 }\\n        var len = 0, chars = [Character]()\\n        for c in s {\\n            if let idx = chars.firstIndex(of: c) {\\n                chars.removeSubrange(0...idx)\\n            }\\n            chars.append(c)\\n            len = max(len, chars.count)\\n        }\\n        return len\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1500874,
                "title": "java-tc-o-n-sc-o-1-sliding-window-using-hashmap-two-pointers",
                "content": "```java\\n/**\\n * Use HashMap to keep char and its index map. When we find a repeating char\\n * update the start point.\\n *\\n * Time Complexity: O(N)\\n *\\n * Space Complexity: O(min(M,N)) = O(1) since there are 26 alphabets.\\n *\\n * N = Length of input string. M = Size of the character set\\n */\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        if (s == null) {\\n            throw new IllegalArgumentException(\"Input string is null\");\\n        }\\n\\n        int len = s.length();\\n        if (len <= 1) {\\n            return len;\\n        }\\n\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        int start = 0;\\n        int maxLen = 0;\\n\\n        for (int end = 0; end < len; end++) {\\n            char eChar = s.charAt(end);\\n            if (map.containsKey(eChar)) {\\n                start = Math.max(start, map.get(eChar) + 1);\\n            }\\n            map.put(eChar, end);\\n            maxLen = Math.max(maxLen, end - start + 1);\\n        }\\n\\n        return maxLen;\\n    }\\n}\\n```\\n\\n---\\n\\nSolutions to other Sliding Window questions on LeetCode:\\n- [76. Minimum Window Substring](https://leetcode.com/problems/minimum-window-substring/discuss/1496754/Java-or-TC:-O(S+T)-or-SC:-O(T)-or-Space-optimized-Sliding-Window-using-Two-Pointers)\\n- [340. Longest Substring with At Most K Distinct Characters](https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters/discuss/1496838/Java-or-TC:-O(N)-or-SC:-O(K)-or-One-Pass-Sliding-Window-using-LinkedHashMap)\\n- [159. Longest Substring with At Most Two Distinct Characters](https://leetcode.com/problems/longest-substring-with-at-most-two-distinct-characters/discuss/1496840/Java-or-TC:-O(N)-or-SC:-O(1)-or-One-Pass-Sliding-Window-using-LinkedHashMap)\\n- [438. Find All Anagrams in a String](https://leetcode.com/problems/find-all-anagrams-in-a-string/discuss/1500039/Java-or-TC:-O(S+P)-or-SC:-O(1)-or-Sliding-window-solution)\\n- [209. Minimum Size Subarray Sum](https://leetcode.com/problems/minimum-size-subarray-sum/discuss/1500877/Java-or-Both-O(N)-and-O(N-logN)-solutions-with-O(1)-space-or-Sliding-Window-and-Binary-Search-solutions)\\n- [219. Contains Duplicate II](https://leetcode.com/problems/contains-duplicate-ii/discuss/1500887/Java-or-TC:-O(N)-or-SC:-O(min(N-K))-or-Sliding-Window-using-HashSet)\\n- [220. Contains Duplicate III](https://leetcode.com/problems/contains-duplicate-iii/discuss/1500895/Java-or-TC:-O(N)-or-SC:-O(min(NK))-or-Sliding-Window-using-Buckets)\\n- [567. Permutation in String](https://leetcode.com/problems/permutation-in-string/discuss/1500902/Java-or-TC:-O(S2)-or-SC:-O(1)-or-Constant-space-Sliding-Window-solution)\\n- [239. Sliding Window Maximum](https://leetcode.com/problems/sliding-window-maximum/discuss/1506048/Java-or-TC:-O(N)-or-SC:-O(K)-or-Using-Deque-as-Sliding-Window)\\n- [480. Sliding Window Median](https://leetcode.com/problems/sliding-window-median/discuss/1507981/Java-or-TC:-O(N*logK)-or-SC:-(K)-or-Optimized-sliding-window-using-TreeSet)\\n- [487. Max Consecutive Ones II](https://leetcode.com/problems/max-consecutive-ones-ii/discuss/1508045/Java-or-TC:-O(N)-or-SC:-O(1)-or-Four-solutions-with-Follow-up-handled)\\n- [1004. Max Consecutive Ones III](https://leetcode.com/problems/max-consecutive-ones-iii/discuss/1508044/Java-or-TC:-O(N)-or-SC:-O(1)-or-One-Pass-Optimized-Sliding-Window)\\n",
                "solutionTags": [
                    "Java",
                    "Two Pointers",
                    "String",
                    "Sliding Window"
                ],
                "code": "```java\\n/**\\n * Use HashMap to keep char and its index map. When we find a repeating char\\n * update the start point.\\n *\\n * Time Complexity: O(N)\\n *\\n * Space Complexity: O(min(M,N)) = O(1) since there are 26 alphabets.\\n *\\n * N = Length of input string. M = Size of the character set\\n */\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        if (s == null) {\\n            throw new IllegalArgumentException(\"Input string is null\");\\n        }\\n\\n        int len = s.length();\\n        if (len <= 1) {\\n            return len;\\n        }\\n\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        int start = 0;\\n        int maxLen = 0;\\n\\n        for (int end = 0; end < len; end++) {\\n            char eChar = s.charAt(end);\\n            if (map.containsKey(eChar)) {\\n                start = Math.max(start, map.get(eChar) + 1);\\n            }\\n            map.put(eChar, end);\\n            maxLen = Math.max(maxLen, end - start + 1);\\n        }\\n\\n        return maxLen;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1738,
                "title": "4ms-c-code-in-12-lines",
                "content": "    int lengthOfLongestSubstring(char* s)\\n    {\\n    \\tint len=0;\\n        char *end=s,*temp;\\n    \\tchar* addressTable[128]={NULL};\\n    \\twhile(*end){\\n    \\t\\ttemp = addressTable[*end];\\n    \\t\\taddressTable[*end]=end;\\n    \\t\\tif(temp>=s){\\n    \\t\\tlen=end-s>len?end-s:len;\\n    \\t\\ts = temp+1;\\n    \\t\\t}end++;\\n    \\t}\\n    \\tlen=end-s>len?end-s:len;\\n    \\treturn len;\\n    }",
                "solutionTags": [],
                "code": "    int lengthOfLongestSubstring(char* s)\\n    {\\n    \\tint len=0;\\n        char *end=s,*temp;\\n    \\tchar* addressTable[128]={NULL};\\n    \\twhile(*end){\\n    \\t\\ttemp = addressTable[*end];\\n    \\t\\taddressTable[*end]=end;\\n    \\t\\tif(temp>=s){\\n    \\t\\tlen=end-s>len?end-s:len;\\n    \\t\\ts = temp+1;\\n    \\t\\t}end++;\\n    \\t}\\n    \\tlen=end-s>len?end-s:len;\\n    \\treturn len;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1855,
                "title": "fast-98-and-simple-code-in-javascript-solution",
                "content": "```javascript\\nvar lengthOfLongestSubstring = function(s) {\\n  var sLen = s.length,\\n    maxLen = 0,\\n    maxStr = '',\\n    tmpStr,\\n    posIndex,\\n    i;\\n\\n  for( i = 0 ; i < sLen; i++ ){\\n\\n    tmpStr = s[i];\\n    posIndex = maxStr.indexOf(tmpStr);\\n\\n    if(posIndex > -1){\\n      maxStr = maxStr.substring(posIndex + 1);\\n    }\\n\\n    maxStr += tmpStr;\\n    maxLen = Math.max(maxLen, maxStr.length);\\n  }\\n\\n  return maxLen;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```javascript\\nvar lengthOfLongestSubstring = function(s) {\\n  var sLen = s.length,\\n    maxLen = 0,\\n    maxStr = '',\\n    tmpStr,\\n    posIndex,\\n    i;\\n\\n  for( i = 0 ; i < sLen; i++ ){\\n\\n    tmpStr = s[i];\\n    posIndex = maxStr.indexOf(tmpStr);\\n\\n    if(posIndex > -1){\\n      maxStr = maxStr.substring(posIndex + 1);\\n    }\\n\\n    maxStr += tmpStr;\\n    maxLen = Math.max(maxLen, maxStr.length);\\n  }\\n\\n  return maxLen;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1177070,
                "title": "c-sliding-window-hash-map-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        \\n        unordered_map<char,int> index;\\n        int start=0,res=0;\\n        for(int i=0;i<s.length();i++){\\n            \\n            if (index.find(s[i]) != index.end() && index[s[i]] >= start)\\n                 start = index[s[i]] + 1;\\n            \\n            index[s[i]] = i;\\n            res=max(res,i-start+1);\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        \\n        unordered_map<char,int> index;\\n        int start=0,res=0;\\n        for(int i=0;i<s.length();i++){\\n            \\n            if (index.find(s[i]) != index.end() && index[s[i]] >= start)\\n                 start = index[s[i]] + 1;\\n            \\n            index[s[i]] = i;\\n            res=max(res,i-start+1);\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1734283,
                "title": "java-2-approaches-using-string-functions-hashset",
                "content": "```\\nPLEASE UPVOTE IF IT HELPS YOU :)\\n\\n\\nApproach 1: Using basic string functions\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        if(s.length()==0)\\n            return 0;\\n        char ch=s.charAt(0);\\n        String ans=\"\";\\n        ans=ans+ch;\\n        int max=1;\\n        for(int i=1;i<s.length();i++){\\n            ch=s.charAt(i);\\n            int index=ans.indexOf(ch);\\n            if(index == -1){\\n                ans=ans+ch;\\n                max=Math.max(max,ans.length());\\n            }\\n            else{\\n                ans=ans.substring(index+1)+ch;       //if s=\"dvdf\", and when we encounter 2nd d, we need the new ans as \"vd\" and not just \"d\"\\n            }\\n        }\\n        return max;\\n    }\\n}\\n//TC: O(n)\\n\\n\\nApproach 2: Acquire and Release(Sliding WIndow)\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int acquire=0;\\n        int release=0;\\n        int max=0;\\n        HashSet<Character> hash=new HashSet();\\n        while(acquire<s.length()){\\n            if(!hash.contains(s.charAt(acquire))){\\n                hash.add(s.charAt(acquire));\\n                acquire++;\\n                max=Math.max(hash.size(),max);\\n            }\\n            else{\\n                hash.remove(s.charAt(release));\\n                release++;\\n            }\\n        }\\n        return max;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Sliding Window"
                ],
                "code": "```\\nPLEASE UPVOTE IF IT HELPS YOU :)\\n\\n\\nApproach 1: Using basic string functions\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        if(s.length()==0)\\n            return 0;\\n        char ch=s.charAt(0);\\n        String ans=\"\";\\n        ans=ans+ch;\\n        int max=1;\\n        for(int i=1;i<s.length();i++){\\n            ch=s.charAt(i);\\n            int index=ans.indexOf(ch);\\n            if(index == -1){\\n                ans=ans+ch;\\n                max=Math.max(max,ans.length());\\n            }\\n            else{\\n                ans=ans.substring(index+1)+ch;       //if s=\"dvdf\", and when we encounter 2nd d, we need the new ans as \"vd\" and not just \"d\"\\n            }\\n        }\\n        return max;\\n    }\\n}\\n//TC: O(n)\\n\\n\\nApproach 2: Acquire and Release(Sliding WIndow)\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int acquire=0;\\n        int release=0;\\n        int max=0;\\n        HashSet<Character> hash=new HashSet();\\n        while(acquire<s.length()){\\n            if(!hash.contains(s.charAt(acquire))){\\n                hash.add(s.charAt(acquire));\\n                acquire++;\\n                max=Math.max(hash.size(),max);\\n            }\\n            else{\\n                hash.remove(s.charAt(release));\\n                release++;\\n            }\\n        }\\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 475803,
                "title": "javascript-sliding-window",
                "content": "```\\nfunction lengthOfLongestSubstring(s) {\\n  let seen = new Set();\\n  let longest = 0;\\n  let l = 0;\\n  for (let r = 0; r < s.length; r++) {\\n    while (seen.has(s[r])) {\\n      seen.delete(s[l]);\\n      l++;\\n    }\\n    seen.add(s[r]);\\n    longest = Math.max(longest, r - l + 1);\\n  }\\n  return longest;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Sliding Window"
                ],
                "code": "```\\nfunction lengthOfLongestSubstring(s) {\\n  let seen = new Set();\\n  let longest = 0;\\n  let l = 0;\\n  for (let r = 0; r < s.length; r++) {\\n    while (seen.has(s[r])) {\\n      seen.delete(s[l]);\\n      l++;\\n    }\\n    seen.add(s[r]);\\n    longest = Math.max(longest, r - l + 1);\\n  }\\n  return longest;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 927233,
                "title": "well-commented-javascript-sliding-window-solution-with-set-o-n-time-o-n-space",
                "content": "```right``` and ```left``` are pointers in the string -- for the ```maxLength = Math.max....``` line we could also do ```...Math.max(maxLength, right - left + 1)``` but ```set.size``` could make more sense for some people.\\n\\nExplanation is under the code.\\n\\n```\\nvar lengthOfLongestSubstring = function(s) {\\n  if (!s.length) return 0;\\n  \\n  let left = 0, right = 0;\\n  let maxLength = -Infinity;\\n  const set = new Set();\\n\\n  while (right < s.length) {\\n    // If s[right] has not been seen yet\\n    if (!set.has(s[right])) {\\n      // Add it to the set\\n      set.add(s[right]);\\n      // Increase size of window to right\\n      right++;\\n      // Update maxLength; set size represents length of unique substring\\n      maxLength = Math.max(maxLength, set.size);\\n    } else {\\n      // We\\'ve seen s[right] so we need to shrink the window\\n      // Delete s[left] from set\\n      set.delete(s[left]);\\n      // Shrink window from left\\n      left++;\\n    }\\n  }\\n\\n  return maxLength;\\n}\\n```\\n\\nFor example, in \"abbc\":\\n\\n1. left = 0, right = 0, ```s[right]``` = a, ```s[left]``` = a\\n\\t- set does not contain a, add to set\\n```set = [a]```\\n\\t- Update maxLength to 1\\n\\t- Increment right\\n2. left = 0, right = 1, ```s[right]``` = b, ```s[left]``` = a\\n\\t- set does not contain b, add to set\\n```set = [a, b]```\\n\\t- Update maxLength to 2\\n\\t- Increment right\\n3. left = 0, right = 2, ```s[right]``` = b, ```s[left]``` = a\\n\\t- set already contains b\\n\\t- Delete ```s[left]``` from set\\n\\t```set = [b]```\\n\\t- Increment left\\n\\n4. left = 1, right = 2, ```s[right]``` = b, ```s[left]``` = b\\n\\t- set already contains b\\n\\t- Delete ```s[left]``` from set\\n\\t```set = []```\\n\\t- Increment left\\n5. left = 2, right = 2, ```s[right]``` = b, ```s[left]``` = b\\n\\t- set does not contain b, add to set\\n\\t```set = [b]```\\n\\t- maxLength does not change, since 1 < 2\\n\\t- Increment right\\n6. left = 2, right = 3, ```s[right]``` = c,  ```s[left]``` = b\\n\\t- set does not contain c, add to set\\n\\t```set = [b, c]```\\n\\t- maxLength does not change, since 2 === 2\\n\\t- Increment right\\n\\n7. right = 4, which is out of bounds of the while loop\\n8. Exit loop and return maxLength\\n\\n",
                "solutionTags": [
                    "JavaScript",
                    "Sliding Window"
                ],
                "code": "```right```\n```left```\n```maxLength = Math.max....```\n```...Math.max(maxLength, right - left + 1)```\n```set.size```\n```\\nvar lengthOfLongestSubstring = function(s) {\\n  if (!s.length) return 0;\\n  \\n  let left = 0, right = 0;\\n  let maxLength = -Infinity;\\n  const set = new Set();\\n\\n  while (right < s.length) {\\n    // If s[right] has not been seen yet\\n    if (!set.has(s[right])) {\\n      // Add it to the set\\n      set.add(s[right]);\\n      // Increase size of window to right\\n      right++;\\n      // Update maxLength; set size represents length of unique substring\\n      maxLength = Math.max(maxLength, set.size);\\n    } else {\\n      // We\\'ve seen s[right] so we need to shrink the window\\n      // Delete s[left] from set\\n      set.delete(s[left]);\\n      // Shrink window from left\\n      left++;\\n    }\\n  }\\n\\n  return maxLength;\\n}\\n```\n```s[right]```\n```s[left]```\n```set = [a]```\n```s[right]```\n```s[left]```\n```set = [a, b]```\n```s[right]```\n```s[left]```\n```s[left]```\n```set = [b]```\n```s[right]```\n```s[left]```\n```s[left]```\n```set = []```\n```s[right]```\n```s[left]```\n```set = [b]```\n```s[right]```\n```s[left]```\n```set = [b, c]```",
                "codeTag": "Unknown"
            },
            {
                "id": 2294,
                "title": "my-o-n-solution",
                "content": "if only use DP, it's an O(n*n) solution, adding a map to get O(n).\\n    \\n    class Solution {\\n        public:\\n            int lengthOfLongestSubstring(string s) {\\n                if(s.size()<2) return s.size();\\n                int d=1, maxLen=1;\\n                unordered_map<char,int> map;\\n                map[s[0]]=0;\\n                for(int i=1;i<s.size();i++)\\n                {\\n                    if(map.count(s[i])==0 || map[s[i]]<i-d)\\n                        d++;\\n                    else\\n                        d= i- map[s[i]];\\n                    map[s[i]]=i;\\n                    if(d>maxLen)\\n                        maxLen = d;\\n                }\\n                return maxLen;\\n            }\\n        };",
                "solutionTags": [],
                "code": "class Solution {\\n        public:\\n            int lengthOfLongestSubstring(string s) {\\n                if(s.size()<2) return s.size();\\n                int d=1, maxLen=1;\\n                unordered_map<char,int> map;\\n                map[s[0]]=0;\\n                for(int i=1;i<s.size();i++)\\n                {\\n                    if(map.count(s[i])==0 || map[s[i]]<i-d)\\n                        d++;\\n                    else\\n                        d= i- map[s[i]];\\n                    map[s[i]]=i;\\n                    if(d>maxLen)\\n                        maxLen = d;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1979,
                "title": "simple-javascript-code",
                "content": "Currently, migrating my c++ code to Javascript code.\\n\\n\\n    var lengthOfLongestSubstring = function(s) {\\n      var start = 0, maxLen = 0;\\n      var map = new Map();\\n    \\n      for(var i = 0; i < s.length; i++) {\\n          var ch = s[i];\\n        \\n          if(map.get(ch) >= start) start = map.get(ch) + 1;\\n          map.set(ch, i);\\n        \\n          if(i - start + 1 > maxLen) maxLen = i - start + 1;\\n      }\\n    \\n      return maxLen;\\n    };",
                "solutionTags": [],
                "code": "Currently, migrating my c++ code to Javascript code.\\n\\n\\n    var lengthOfLongestSubstring = function(s) {\\n      var start = 0, maxLen = 0;\\n      var map = new Map();\\n    \\n      for(var i = 0; i < s.length; i++) {\\n          var ch = s[i];\\n        \\n          if(map.get(ch) >= start) start = map.get(ch) + 1;\\n          map.set(ch, i);\\n        \\n          if(i - start + 1 > maxLen) maxLen = i - start + 1;\\n      }\\n    \\n      return maxLen;\\n    };",
                "codeTag": "Unknown"
            },
            {
                "id": 1005955,
                "title": "python-o-n-sliding-window-explained",
                "content": "This is classical problem for sliding window. Let us keep window with elements `[beg: end)`, where first element is included and last one is not. For example `[0, 0)` is empty window, and `[2, 4)` is window with `2` elements: `2` and `3`.\\nLet us discuss our algorithm now:\\n1. `window` is set of symbols in our window, we use set to check in `O(1)` if new symbol inside it or not.\\n2. `beg = end = 0` in the beginning, so we start with empty window, also `ans = 0` and `n = len(s)`.\\n3. Now, we continue, until one of two of our pointers reaches the end. First, we try to extend our window to the right: check `s[end] in window` and if we can, add it to set, move `end` pointer to the right and update `ans`. If we can not add new symbol to set, it means it is already in `window` set, and we need to move left pointer and move `beg` pointer to the right.\\n\\n**Complexity**: we move both of our pointers only to the left, so time complexity is `O(n)`. Space complexity is `O(1)`.\\n\\n```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s):\\n        window = set()\\n        beg, end, ans, n = 0, 0, 0, len(s)\\n        \\n        while beg < n and end < n:\\n            if s[end] not in window:\\n                if end + 1 < n: window.add(s[end])\\n                end += 1\\n                ans = max(ans, end - beg)\\n            else:\\n                window.remove(s[beg])\\n                beg += 1\\n                \\n        return ans\\n```\\n\\nIf you have any questions, feel free to ask. If you like solution and explanations, please **Upvote!**",
                "solutionTags": [
                    "Two Pointers",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s):\\n        window = set()\\n        beg, end, ans, n = 0, 0, 0, len(s)\\n        \\n        while beg < n and end < n:\\n            if s[end] not in window:\\n                if end + 1 < n: window.add(s[end])\\n                end += 1\\n                ans = max(ans, end - beg)\\n            else:\\n                window.remove(s[beg])\\n                beg += 1\\n                \\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1448425,
                "title": "8-lines-of-python-code-tc-o-n-the-easiest-way-anyone-can-understand-with-97-tc-and-99-sc",
                "content": "```\\nresult =\"\"\\nmax_length = 0\\nfor i in s:\\n\\tif i in result:\\n\\t\\tresult = result[result.index(i)+1:]\\n\\t\\t\"\"\"if abcdas is the string, here after abcd the length would be 4 and result will be replaced as bcda\"\"\"\\n\\tresult += i\\n\\tmax_length = max(max_length, len(result))\\nreturn (max_length)\\n```\\n\\n\\nif you understand, please upvote :).\\nwill build my confidence\\nthank you :)",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nresult =\"\"\\nmax_length = 0\\nfor i in s:\\n\\tif i in result:\\n\\t\\tresult = result[result.index(i)+1:]\\n\\t\\t\"\"\"if abcdas is the string, here after abcd the length would be 4 and result will be replaced as bcda\"\"\"\\n\\tresult += i\\n\\tmax_length = max(max_length, len(result))\\nreturn (max_length)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1041795,
                "title": "java-simple",
                "content": "```\\npublic int lengthOfLongestSubstring(String s) {\\n        int start = 0;\\n        int end = 0;\\n        int max = 0;\\n        Set<Character> set = new HashSet<>();\\n        while (end < s.length()) {\\n            if (!set.contains(s.charAt(end))) {\\n                set.add(s.charAt(end));\\n                end++;\\n                max = Math.max(set.size(), max);\\n            } else {\\n                set.remove(s.charAt(start));\\n                start++;\\n            }\\n        }\\n\\n        return max;\\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int lengthOfLongestSubstring(String s) {\\n        int start = 0;\\n        int end = 0;\\n        int max = 0;\\n        Set<Character> set = new HashSet<>();\\n        while (end < s.length()) {\\n            if (!set.contains(s.charAt(end))) {\\n                set.add(s.charAt(end));\\n                end++;\\n                max = Math.max(set.size(), max);\\n            } else {\\n                set.remove(s.charAt(start));\\n                start++;\\n            }\\n        }\\n\\n        return max;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2289,
                "title": "my-easy-solution-in-java-o-n",
                "content": "    public class Solution {\\n        public int lengthOfLongestSubstring(String s) {\\n            int[] mOccur = new int[256];\\n            int maxL = 0;\\n            for(int i = 0, j = 0; i < s.length(); ++i){\\n                char ch = s.charAt(i);\\n                ++mOccur[ch];\\n                while(mOccur[ch] > 1){\\n                    --mOccur[s.charAt(j++)];\\n                }\\n                maxL = Math.max(maxL, i - j + 1);\\n            }\\n            return maxL;\\n        }\\n    }",
                "solutionTags": [
                    "Java",
                    "Hash Table"
                ],
                "code": "class Solution {\\n        public int lengthOfLongestSubstring(String s) {\\n            int[] mOccur = new int[256];\\n            int maxL = 0;\\n            for(int i = 0, j = 0; i < s.length(); ++i){\\n                char ch = s.charAt(i);\\n                ++mOccur[ch];\\n                while(mOccur[ch] > 1){\\n                    --mOccur[s.charAt(j++)];\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 2133170,
                "title": "c-short-easy-solutions",
                "content": "**`Please upvote if you like the solution & post :)`**\\n\\n**`Sliding-window + Unordered_set` Solution:**\\n```\\nclass Solution {\\npublic:\\n\\tint lengthOfLongestSubstring(string s) {\\n\\t\\tunordered_set<char> set;\\n\\t\\tint i = 0, j = 0, n = s.size(), ans = 0;\\n\\t\\twhile(j<n){\\n\\t\\t\\tif(set.find(s[j]) == set.end()){ //If the character does not in the set\\n\\t\\t\\t\\tset.insert(s[j++]); //Insert the character in set and update the j counter\\n\\t\\t\\t\\tans = max(ans, j-i); //Check if the new distance is longer than the current answer\\n\\t\\t\\t}\\n\\t\\t\\telse{\\n\\t\\t\\t\\t//If character does exist in the set, ie. it is a repeated character, \\n\\t\\t\\t\\t//we update the left side counter i, and continue with the checking for substring. \\n\\t\\t\\t\\tset.erase(s[i++]); \\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn ans;\\n\\t}\\n};\\n```\\n\\n**Time Complexity :** `O(n)`\\n**Space Complexity :** `O(min(a,b))` for the `unordered_set`, `a` is the upper bound & is the `size` of the string while `b` is the size of number of `characters` in the character set\\n\\n****\\n**`Using Frequency Array` Solution:**\\n```\\nint lengthOfLongestSubstring(string s) {\\n        int freq[256]={0};\\n        int l=0,r=0,ans=0,n=s.size();\\n        while(r<n){\\n            freq[s[r]]++;\\n            while(freq[s[r]]>1){\\n                freq[s[l]]--;\\n                l++;\\n            }\\n            ans = max(ans,r-l+1);\\n            r++;\\n        }\\n        return ans;\\n    }\\n```\\n**Time Complexity :** `O(n)`\\n**Space Complexity :** `O(n)`\\n****",
                "solutionTags": [
                    "C",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n\\tint lengthOfLongestSubstring(string s) {\\n\\t\\tunordered_set<char> set;\\n\\t\\tint i = 0, j = 0, n = s.size(), ans = 0;\\n\\t\\twhile(j<n){\\n\\t\\t\\tif(set.find(s[j]) == set.end()){ //If the character does not in the set\\n\\t\\t\\t\\tset.insert(s[j++]); //Insert the character in set and update the j counter\\n\\t\\t\\t\\tans = max(ans, j-i); //Check if the new distance is longer than the current answer\\n\\t\\t\\t}\\n\\t\\t\\telse{\\n\\t\\t\\t\\t//If character does exist in the set, ie. it is a repeated character, \\n\\t\\t\\t\\t//we update the left side counter i, and continue with the checking for substring. \\n\\t\\t\\t\\tset.erase(s[i++]); \\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn ans;\\n\\t}\\n};\\n```\n```\\nint lengthOfLongestSubstring(string s) {\\n        int freq[256]={0};\\n        int l=0,r=0,ans=0,n=s.size();\\n        while(r<n){\\n            freq[s[r]]++;\\n            while(freq[s[r]]>1){\\n                freq[s[l]]--;\\n                l++;\\n            }\\n            ans = max(ans,r-l+1);\\n            r++;\\n        }\\n        return ans;\\n    }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1864,
                "title": "o-n-time-o-1-space-solution-using-kadane-s-algo-in-java",
                "content": "Idea is that, while we traverse form left to right if we see a character at position j is a duplicate of a character at a position i < j on the left then we know that we can't start the substring from i anymore. So, we need to start a new substring from i+1 position. While doing this we also need to update the length of current substring and start of current substring. Important part of this process is to make sure that we always keep the latest position of the characters we have seen so far. Below is a simple O(n) implementation of this logic.\\n\\n\\n    public class Solution {\\n        public int lengthOfLongestSubstring(String s) {\\n            int lastIndices[] = new int[256];\\n            for(int i = 0; i<256; i++){\\n                lastIndices[i] = -1;\\n            }\\n            \\n            int maxLen = 0;\\n            int curLen = 0;\\n            int start = 0;\\n            int bestStart = 0;\\n            for(int i = 0; i<s.length(); i++){\\n                char cur = s.charAt(i);\\n                if(lastIndices[cur]  < start){\\n                    lastIndices[cur] = i;\\n                    curLen++;\\n                }\\n                else{\\n                    int lastIndex = lastIndices[cur];\\n                    start = lastIndex+1;\\n                    curLen = i-start+1;\\n                    lastIndices[cur] = i;\\n                }\\n                \\n                if(curLen > maxLen){\\n                    maxLen = curLen;\\n                    bestStart = start;\\n                }\\n            }\\n            \\n            return maxLen;\\n        }\\n    }",
                "solutionTags": [],
                "code": "class Solution {\\n        public int lengthOfLongestSubstring(String s) {\\n            int lastIndices[] = new int[256];\\n            for(int i = 0; i<256; i++){\\n                lastIndices[i] = -1;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2132954,
                "title": "python-simple-solution-w-explanation-brute-force-sliding-window",
                "content": "We are given a string `s`. We need to find the length of the **longest substring** without repeating characters.\\n___\\n___\\n\\u2705 **Solution I - Brute-Force [Accepted]**\\n\\nStarting with each index, we can check all substrings till we find a repeating character.\\n\\n```python\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        res = 0\\n        seen = set()\\n        for start_idx in range(len(s)):\\n            seen.clear()\\n            end_idx = start_idx\\n            while end_idx < len(s):\\n                if s[end_idx] in seen:\\n                    break\\n                seen.add(s[end_idx])\\n                end_idx += 1\\n            res = max(res, end_idx - start_idx)\\n        return res\\n```\\n\\n- **Time Complexity:** `O(n\\xB2)`\\n- **Space Complexity:** `O(1)`\\n___\\n\\u2705 **Solution II - Sliding Window [Accepted]**\\n\\nIn the above solution, we are doing many redundant operations. After finding a repeating character, we break the inner loop and again check for all substrings from the next index.\\nThe following example will make it clear what I mean by redundant operations:\\n\\n```text\\ns = \"redundant\"\\nLet start_idx = 0\\nWhen end_idx becomes 5, it sees that \"d\" had already come before.\\nSo, should we start again with index 1?\\nNo, because all substrings starting with \"e\" and later (till \"d\" or the character which was repeated) will have less length than that of \"redun\".\\nWe can start from \"u\"\\n```\\n\\nWe can create a sliding window: `[start_idx: end_idx]` where `end_idx` will move forward continuously and `start_idx` will change only if the character at `end_idx` is already present within this window. To know whether this character is already present, we need to store information about the index of characters.\\n\\n```python\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        prev = [-1] * 128\\n        res, start_idx = 0, 0\\n        for end_idx, char in enumerate(s):\\n            if prev[ord(char)] >= start_idx:\\n                start_idx = prev[ord(char)] + 1\\n            prev[ord(char)] = end_idx\\n            res = max(res, end_idx - start_idx + 1)\\n            \\n        return res\\n```\\n\\n- **Time Complexity:** `O(n)`\\n- **Space Complexity:** `O(1)`\\n\\n___\\n___\\nIf you like the solution, please **upvote** \\uD83D\\uDD3C\\nFor any questions, or discussions, comment below. \\uD83D\\uDC47\\uFE0F\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Two Pointers",
                    "Sliding Window"
                ],
                "code": "```python\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        res = 0\\n        seen = set()\\n        for start_idx in range(len(s)):\\n            seen.clear()\\n            end_idx = start_idx\\n            while end_idx < len(s):\\n                if s[end_idx] in seen:\\n                    break\\n                seen.add(s[end_idx])\\n                end_idx += 1\\n            res = max(res, end_idx - start_idx)\\n        return res\\n```\n```text\\ns = \"redundant\"\\nLet start_idx = 0\\nWhen end_idx becomes 5, it sees that \"d\" had already come before.\\nSo, should we start again with index 1?\\nNo, because all substrings starting with \"e\" and later (till \"d\" or the character which was repeated) will have less length than that of \"redun\".\\nWe can start from \"u\"\\n```\n```python\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        prev = [-1] * 128\\n        res, start_idx = 0, 0\\n        for end_idx, char in enumerate(s):\\n            if prev[ord(char)] >= start_idx:\\n                start_idx = prev[ord(char)] + 1\\n            prev[ord(char)] = end_idx\\n            res = max(res, end_idx - start_idx + 1)\\n            \\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3024764,
                "title": "python-sliding-window-approach-99-17-faster",
                "content": "## Please upvote if you like the solution\\n\\n\\n# Complexity\\n- Time complexity:\\n$$O(n^2)$$\\n\\n\\n- Space complexity:\\n$$O(k)$$ -> where k is the size of the result string\\n\\n\\n\\n# Code\\n```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        # Base Case\\n        if len(s) == 1: return 1\\n\\n\\n        count, s_result = 0, \\'\\'\\n\\n        for i in s:\\n            if i not in s_result:\\n                s_result += i\\n            else:\\n                s_result = s_result[s_result.index(i)+1:] + i\\n\\n            if len(s_result) > count:\\n                count = len(s_result)\\n        \\n        return count\\n\\n            \\n\\n            \\n\\n            \\n\\n        \\n\\n```",
                "solutionTags": [
                    "Python3",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        # Base Case\\n        if len(s) == 1: return 1\\n\\n\\n        count, s_result = 0, \\'\\'\\n\\n        for i in s:\\n            if i not in s_result:\\n                s_result += i\\n            else:\\n                s_result = s_result[s_result.index(i)+1:] + i\\n\\n            if len(s_result) > count:\\n                count = len(s_result)\\n        \\n        return count\\n\\n            \\n\\n            \\n\\n            \\n\\n        \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 577391,
                "title": "intuitive-javascript-solution-with-sliding-window",
                "content": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n    const set = new Set();\\n    let longest = 0;\\n    let i = 0;\\n    let j = 0;\\n    /**\\n     * The goal is to anchor i and find the longest range of [i, j].\\n     * When s[i, j] has a duplicate letter, we remove s[i] from the\\n     * set and move i to the next position so we don\\'t include \\n     * s[prev i] in the next range calculation.\\n     */\\n    while (i < s.length && j < s.length) {\\n        if (!set.has(s[j])) {\\n            set.add(s[j]);\\n            longest = Math.max(longest, j - i + 1);\\n            j += 1;\\n        } else {\\n            set.delete(s[i]);\\n            i += 1;\\n        }\\n    }\\n    return longest;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Sliding Window"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n    const set = new Set();\\n    let longest = 0;\\n    let i = 0;\\n    let j = 0;\\n    /**\\n     * The goal is to anchor i and find the longest range of [i, j].\\n     * When s[i, j] has a duplicate letter, we remove s[i] from the\\n     * set and move i to the next position so we don\\'t include \\n     * s[prev i] in the next range calculation.\\n     */\\n    while (i < s.length && j < s.length) {\\n        if (!set.has(s[j])) {\\n            set.add(s[j]);\\n            longest = Math.max(longest, j - i + 1);\\n            j += 1;\\n        } else {\\n            set.delete(s[i]);\\n            i += 1;\\n        }\\n    }\\n    return longest;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3497013,
                "title": "c-java-python-javascript-sliding-window-100-solution-explained",
                "content": "# Intuition:\\n\\nThe problem requires us to find the length of the longest substring without repeating characters in a given string. We can use a sliding window technique to keep track of the longest substring without repeating characters. \\n\\n# Approach:\\n1. Initialize ans=0, l=0, r=0.\\n2. Create a map of size 256 to store the last occurrence of each character in the string, initialized with -1.\\n3. Traverse the string from left to right, with the right end of the window (r) expanding as long as there are no repeating characters.\\n4. When a repeating character is found at index r, we update the left end of the window (l) to the next index of the repeated character. \\n5. Update the map with the current index of the repeated character.\\n6. Update ans with the maximum length of the current substring and the previous maximum.\\n7. Return ans.\\n\\n# Complexity:\\n- Time complexity: The algorithm traverses the given string only once. The time complexity is O(n), where n is the length of the string.\\n- Space complexity: The space required to store the map is O(256), which is constant. Therefore, the space complexity is O(1).\\n\\n---\\n# C++\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        int ans=0,l=0,r=0;\\n        int  n =s.size();\\n        vector<int> map(256,-1);\\n        while(r<n){\\n            if(map[s[r]]!=-1){\\n                l=max(map[s[r]]+1,l);\\n            }\\n            map[s[r]]=r;\\n            ans= max(ans,r-l+1);\\n            r++;\\n        }\\n        return ans;\\n    }\\n};\\n```\\n\\n---\\n# JAVA\\n```\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int ans = 0, l = 0, r = 0;\\n        int n = s.length();\\n        int[] map = new int[256];\\n        Arrays.fill(map, -1);\\n        while (r < n) {\\n            if (map[s.charAt(r)] != -1) {\\n                l = Math.max(map[s.charAt(r)] + 1, l);\\n            }\\n            map[s.charAt(r)] = r;\\n            ans = Math.max(ans, r - l + 1);\\n            r++;\\n        }\\n        return ans;\\n    }\\n}\\n\\n```\\n\\n---\\n\\n# Python\\n```\\nclass Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        ans, l, r = 0, 0, 0\\n        n = len(s)\\n        map = [-1] * 256\\n        while r < n:\\n            if map[ord(s[r])] != -1:\\n                l = max(map[ord(s[r])] + 1, l)\\n            map[ord(s[r])] = r\\n            ans = max(ans, r - l + 1)\\n            r += 1\\n        return ans\\n\\n```\\n---\\n\\n# JavaScript\\n```\\nvar lengthOfLongestSubstring = function(s) {\\n    let ans = 0, l = 0, r = 0;\\n    let n = s.length;\\n    let map = new Array(256).fill(-1);\\n    while (r < n) {\\n        if (map[s.charCodeAt(r)] != -1) {\\n            l = Math.max(map[s.charCodeAt(r)] + 1, l);\\n        }\\n        map[s.charCodeAt(r)] = r;\\n        ans = Math.max(ans, r - l + 1);\\n        r++;\\n    }\\n    return ans;\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "JavaScript",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        int ans=0,l=0,r=0;\\n        int  n =s.size();\\n        vector<int> map(256,-1);\\n        while(r<n){\\n            if(map[s[r]]!=-1){\\n                l=max(map[s[r]]+1,l);\\n            }\\n            map[s[r]]=r;\\n            ans= max(ans,r-l+1);\\n            r++;\\n        }\\n        return ans;\\n    }\\n};\\n```\n```\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int ans = 0, l = 0, r = 0;\\n        int n = s.length();\\n        int[] map = new int[256];\\n        Arrays.fill(map, -1);\\n        while (r < n) {\\n            if (map[s.charAt(r)] != -1) {\\n                l = Math.max(map[s.charAt(r)] + 1, l);\\n            }\\n            map[s.charAt(r)] = r;\\n            ans = Math.max(ans, r - l + 1);\\n            r++;\\n        }\\n        return ans;\\n    }\\n}\\n\\n```\n```\\nclass Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        ans, l, r = 0, 0, 0\\n        n = len(s)\\n        map = [-1] * 256\\n        while r < n:\\n            if map[ord(s[r])] != -1:\\n                l = max(map[ord(s[r])] + 1, l)\\n            map[ord(s[r])] = r\\n            ans = max(ans, r - l + 1)\\n            r += 1\\n        return ans\\n\\n```\n```\\nvar lengthOfLongestSubstring = function(s) {\\n    let ans = 0, l = 0, r = 0;\\n    let n = s.length;\\n    let map = new Array(256).fill(-1);\\n    while (r < n) {\\n        if (map[s.charCodeAt(r)] != -1) {\\n            l = Math.max(map[s.charCodeAt(r)] + 1, l);\\n        }\\n        map[s.charCodeAt(r)] = r;\\n        ans = Math.max(ans, r - l + 1);\\n        r++;\\n    }\\n    return ans;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2133696,
                "title": "c-o-n-using-frequency-map",
                "content": "* Use Sliding Window approach using frequency map.\\n* As soon as frequency of any character becomes more than one, contract window till frequency of that character reduces to 1.\\n* Window is marked by `st` and `end` index.\\n* Update `ans` at each `end` index.\\n* **TC : O(N)**\\n```\\nclass Solution {\\npublic:        \\n    int lengthOfLongestSubstring(string s) {        \\n        unordered_map<char, int> freq;        \\n        int n = s.length(), st = 0, end = 0, ans = 0;\\t\\t\\n        while(end < n){            \\n            freq[s[end]]++;            \\n            while(freq[s[end]] != 1){\\n                freq[s[st]]--;\\n                st++;\\n            }            \\n            ans = max(ans, end - st + 1);\\n            end++;                   \\n        }        \\n        return ans;        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:        \\n    int lengthOfLongestSubstring(string s) {        \\n        unordered_map<char, int> freq;        \\n        int n = s.length(), st = 0, end = 0, ans = 0;\\t\\t\\n        while(end < n){            \\n            freq[s[end]]++;            \\n            while(freq[s[end]] != 1){\\n                freq[s[st]]--;\\n                st++;\\n            }            \\n            ans = max(ans, end - st + 1);\\n            end++;                   \\n        }        \\n        return ans;        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1217675,
                "title": "2-straightforward-c-solutions-w-explanation-sliding-window",
                "content": "### **Approach 1: Sliding Window**\\n\\n**Implementation**\\n```\\npublic int LengthOfLongestSubstring(string s) {\\n\\tvar letters = new Dictionary<char, int>(); // key:letter, val: latest index\\n\\tint maxCount = 0, left = 0, right;\\n\\n\\tfor (right = 0; right < s?.Length; right++) {\\n\\t\\tchar letter = s[right];\\n\\n\\t\\tif (letters.ContainsKey(letter)) { // End the window\\n\\t\\t\\tleft = Math.Max(left, letters[letter] + 1); // Update left of window\\n\\t\\t}\\n\\n\\t\\tletters[letter] = right; //Update index of letter on map\\n\\n\\t\\tmaxCount = Math.Max(maxCount, right - left + 1); // Get the longest window length \\n\\t}\\n\\n\\treturn maxCount;\\n}\\n```\\n\\n---\\n\\n### **Approach 2: Using a list to remember the substring length**\\n*(faster than 89%, memory less than 99%) *\\n\\n**Algorithm**\\n* Use a list `letters` to remember the substrings with unique characters\\n* If a duplicate is detected,\\n\\t* Get the substring `length` and determine the `maxLength`\\n\\t* Remove the preceding characters up to the duplicate letter from the list using `RemoveRange`\\n* Continue until the end \\n\\n**Complexity**\\n* Time: `O(n)`, where `n` is the length of the string `s`\\n* Space: `O(n)` since we created the list `letters` that will contain a maximum of all the letters in the entire string `s`\\n\\n**Implementation**\\n```csharp\\npublic class Solution {\\n    public int LengthOfLongestSubstring(string s) {\\n        List<char> letters = new List<char>();\\n        int maxLength = 0;\\n        \\n        foreach (char c in s) {\\n            if (!letters.Contains(c)) {\\n                letters.Add(c);\\n            }\\n            else {\\n                maxLength = Math.Max(maxLength, letters.Count);\\n                \\n                // remove preceding characters up to the duplicate letter\\n                int idx = letters.IndexOf(c);\\n                letters.RemoveRange(0, idx+1);\\n\\n                letters.Add(c);\\n            }\\n        }\\n        \\n        return Math.Max(maxLength, letters.Count); \\n    }\\n}\\n```\\n\\n**If you like the solution, please upvote \\uD83D\\uDD3C**",
                "solutionTags": [
                    "C#",
                    "Sliding Window"
                ],
                "code": "```\\npublic int LengthOfLongestSubstring(string s) {\\n\\tvar letters = new Dictionary<char, int>(); // key:letter, val: latest index\\n\\tint maxCount = 0, left = 0, right;\\n\\n\\tfor (right = 0; right < s?.Length; right++) {\\n\\t\\tchar letter = s[right];\\n\\n\\t\\tif (letters.ContainsKey(letter)) { // End the window\\n\\t\\t\\tleft = Math.Max(left, letters[letter] + 1); // Update left of window\\n\\t\\t}\\n\\n\\t\\tletters[letter] = right; //Update index of letter on map\\n\\n\\t\\tmaxCount = Math.Max(maxCount, right - left + 1); // Get the longest window length \\n\\t}\\n\\n\\treturn maxCount;\\n}\\n```\n```csharp\\npublic class Solution {\\n    public int LengthOfLongestSubstring(string s) {\\n        List<char> letters = new List<char>();\\n        int maxLength = 0;\\n        \\n        foreach (char c in s) {\\n            if (!letters.Contains(c)) {\\n                letters.Add(c);\\n            }\\n            else {\\n                maxLength = Math.Max(maxLength, letters.Count);\\n                \\n                // remove preceding characters up to the duplicate letter\\n                int idx = letters.IndexOf(c);\\n                letters.RemoveRange(0, idx+1);\\n\\n                letters.Add(c);\\n            }\\n        }\\n        \\n        return Math.Max(maxLength, letters.Count); \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 267812,
                "title": "python-one-pass-clean-concise",
                "content": "**Python**\\n```python\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        ans = 0\\n        l = 0\\n        lastIndex = [-1] * 128\\n        for r, c in enumerate(s):\\n            l = max(l, lastIndex[ord(c)] + 1)\\n            lastIndex[ord(c)] = r\\n            ans = max(ans, r - l + 1)\\n        return ans\\n```\\n**Complexity**\\n- Time: `O(N)`, where `N <= 5 * 10^4` is length of string `s`.\\n- Space: `O(128)`",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        ans = 0\\n        l = 0\\n        lastIndex = [-1] * 128\\n        for r, c in enumerate(s):\\n            l = max(l, lastIndex[ord(c)] + 1)\\n            lastIndex[ord(c)] = r\\n            ans = max(ans, r - l + 1)\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2132791,
                "title": "python-easy-2-approaches",
                "content": "1. ## **Sliding Window - Counter**\\n\\nThis approach uses `counter` variable to track number of characters in a sliding window. Whenever we encounter a state where the window becomes invalid due to number of characters(count of any character > 1), we would update the left bound of the new valid window.\\n\\n```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        counter = defaultdict(int)        # track counts of each character\\n        l=0\\n        max_length=0\\n        for r, c in enumerate(s):\\n            counter[c]+=1            \\n            if counter[c] > 1:                \\n                while l<r and counter[c]>1: # iterate until window is valid\\n                    counter[s[l]]-=1\\n                    l+=1\\n            max_length=max(max_length, r-l+1)\\n        return max_length\\n```\\n**Time  - O(2n)** - Iterates both `l` and `r` once through the input `s`.\\n**Space - O(n)**\\n\\n---\\n\\n2. ## **Sliding Window - Last Seen**\\n\\nIf we observe the previous approach, we would notice we don\\'t need to track the counts of each character in a sliding window. We just need to track the last seen of a character. This will help us figure out whether a character exists in the current sliding window.\\n\\n```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        last_seen = {}\\n        l=0\\n        max_length=0\\n        for r in range(len(s)):\\n            if s[r] in last_seen:\\n                l=max(last_seen[s[r]], l)\\n            \\n            last_seen[s[r]]=r+1\\n            max_length=max(max_length, r-l+1)\\n        return max_length\\n                    \\n```\\n\\n**Time  - O(n)** - Iterates both `l` and `r` once through the input `s`.\\n**Space - O(n)**\\n\\n\\n---\\n\\n***Please upvote if you find it useful***",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        counter = defaultdict(int)        # track counts of each character\\n        l=0\\n        max_length=0\\n        for r, c in enumerate(s):\\n            counter[c]+=1            \\n            if counter[c] > 1:                \\n                while l<r and counter[c]>1: # iterate until window is valid\\n                    counter[s[l]]-=1\\n                    l+=1\\n            max_length=max(max_length, r-l+1)\\n        return max_length\\n```\n```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        last_seen = {}\\n        l=0\\n        max_length=0\\n        for r in range(len(s)):\\n            if s[r] in last_seen:\\n                l=max(last_seen[s[r]], l)\\n            \\n            last_seen[s[r]]=r+1\\n            max_length=max(max_length, r-l+1)\\n        return max_length\\n                    \\n```",
                "codeTag": "Java"
            },
            {
                "id": 532018,
                "title": "swift-faster-than-79-38-of-swift-submissions",
                "content": "O(n)\\n```\\nclass Solution {\\n    func lengthOfLongestSubstring(_ s: String) -> Int {\\n        var longest = 0, startIndex = 0\\n        var charMap: [Character: Int] = [:]\\n\\n        for (index, char) in s.enumerated() {\\n            if let foundIndex = charMap[char] {\\n                startIndex = max(foundIndex+1, startIndex)\\n            }\\n            longest = max(longest, index - startIndex + 1)\\n            charMap[char] = index\\n        }\\n        return longest\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func lengthOfLongestSubstring(_ s: String) -> Int {\\n        var longest = 0, startIndex = 0\\n        var charMap: [Character: Int] = [:]\\n\\n        for (index, char) in s.enumerated() {\\n            if let foundIndex = charMap[char] {\\n                startIndex = max(foundIndex+1, startIndex)\\n            }\\n            longest = max(longest, index - startIndex + 1)\\n            charMap[char] = index\\n        }\\n        return longest\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1006139,
                "title": "c-super-simple-clean-solution-0ms",
                "content": "```\\nint lengthOfLongestSubstring(char * s){\\n    /*letter_map is to keep track if we saw this character in this substring*/\\n    int letter_map[128] = {0}, res = 0;\\n    char* start = s, *end = s;\\n    \\n    while (*end) {\\n        /* If we reached a letter we saw already - check max length and start a new substring*/\\n        if (letter_map[*end]) {\\n            res = (end - start > res) ? end - start : res;\\n            while (*start != *end) {\\n                letter_map[*start] = 0;\\n                start++;\\n            }\\n            start++;\\n            end++;\\n        }\\n        else {\\n            letter_map[*end] = 1;\\n            end++;\\n        }  \\n    }\\n    return end-start > res ? end-start : res;\\n}\\n```\\n**Like it? please upvote...**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint lengthOfLongestSubstring(char * s){\\n    /*letter_map is to keep track if we saw this character in this substring*/\\n    int letter_map[128] = {0}, res = 0;\\n    char* start = s, *end = s;\\n    \\n    while (*end) {\\n        /* If we reached a letter we saw already - check max length and start a new substring*/\\n        if (letter_map[*end]) {\\n            res = (end - start > res) ? end - start : res;\\n            while (*start != *end) {\\n                letter_map[*start] = 0;\\n                start++;\\n            }\\n            start++;\\n            end++;\\n        }\\n        else {\\n            letter_map[*end] = 1;\\n            end++;\\n        }  \\n    }\\n    return end-start > res ? end-start : res;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1005991,
                "title": "python-cool-easy-solution-o-n-time-o-1-space",
                "content": "\\tclass Solution:\\n\\t\\tdef lengthOfLongestSubstring(self, s: str) -> int:\\n\\t\\t\\tcharacters = set()\\n\\t\\t\\tleft = right = ans = 0\\n\\t\\t\\tlength = len(s)\\n\\t\\t\\t\\n\\t\\t\\twhile right < length:\\n\\t\\t\\t\\tif s[right] in characters:\\n\\t\\t\\t\\t\\tcharacters.remove(s[left])\\n\\t\\t\\t\\t\\tleft += 1\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tcharacters.add(s[right])\\n\\t\\t\\t\\t\\tright += 1\\n\\t\\t\\t\\t\\tans = max(ans, right - left)\\n\\t\\t\\t\\n\\t\\t\\treturn ans",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "\\tclass Solution:\\n\\t\\tdef lengthOfLongestSubstring(self, s: str) -> int:\\n\\t\\t\\tcharacters = set()\\n\\t\\t\\tleft = right = ans = 0\\n\\t\\t\\tlength = len(s)\\n\\t\\t\\t\\n\\t\\t\\twhile right < length:\\n\\t\\t\\t\\tif s[right] in characters:\\n\\t\\t\\t\\t\\tcharacters.remove(s[left])\\n\\t\\t\\t\\t\\tleft += 1\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tcharacters.add(s[right])\\n\\t\\t\\t\\t\\tright += 1\\n\\t\\t\\t\\t\\tans = max(ans, right - left)\\n\\t\\t\\t\\n\\t\\t\\treturn ans",
                "codeTag": "Java"
            },
            {
                "id": 2130,
                "title": "short-n-sweet-python-solution-beats-99",
                "content": "    class Solution(object):\\n        def lengthOfLongestSubstring(self, s):\\n            last, res, st = {}, 0, 0\\n            for i, v in enumerate(string):\\n                if v not in last or last[v] < st:\\n                    res = max(res, i - st + 1)\\n                else:\\n                    st = last[v] + 1\\n                last[v] = i\\n            return res",
                "solutionTags": [],
                "code": "class Solution(object):\\n        def lengthOfLongestSubstring(self, s):\\n            last, res, st = {}",
                "codeTag": "Java"
            },
            {
                "id": 2799840,
                "title": "python-easy-solution",
                "content": "\\n# Code\\u2705\\n```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        output = 0\\n        count = {}\\n        pos = -1\\n        for index, letter in enumerate(s):\\n            if letter in count and count[letter] > pos:\\n                pos = count[letter]\\n            count[letter] = index \\n            output = max(output,index-pos)\\n        return output\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Hash Table",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        output = 0\\n        count = {}\\n        pos = -1\\n        for index, letter in enumerate(s):\\n            if letter in count and count[letter] > pos:\\n                pos = count[letter]\\n            count[letter] = index \\n            output = max(output,index-pos)\\n        return output\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1888687,
                "title": "100-fastest-typescript-solution",
                "content": "```\\nfunction lengthOfLongestSubstring(s: string): number {\\n  const scanner: string[] = []\\n  let longest = 0\\n\\n  for (const char of s) {\\n    const possibleIndex = scanner.indexOf(char)\\n\\n    if (possibleIndex !== -1) { scanner.splice(0, possibleIndex + 1) }\\n    scanner.push(char)\\n    longest = Math.max(longest, scanner.length)\\n  }\\n\\n  return longest\\n}\\n```\\n\\nLet me know in comments if you have any doubts. I will be happy to answer.\\n\\nPlease upvote if you found the solution useful.",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nfunction lengthOfLongestSubstring(s: string): number {\\n  const scanner: string[] = []\\n  let longest = 0\\n\\n  for (const char of s) {\\n    const possibleIndex = scanner.indexOf(char)\\n\\n    if (possibleIndex !== -1) { scanner.splice(0, possibleIndex + 1) }\\n    scanner.push(char)\\n    longest = Math.max(longest, scanner.length)\\n  }\\n\\n  return longest\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 665796,
                "title": "c",
                "content": "```\\npublic class Solution {\\n    public int LengthOfLongestSubstring(string s) {\\n            if (s == null || s == String.Empty)\\n                return 0;\\n\\n            HashSet<char> set = new HashSet<char>();\\n            int currentMax = 0,\\n                i = 0,\\n                j = 0;\\n\\n            while (j < s.Length)\\n                if (!set.Contains(s[j]))\\n                {\\n                    set.Add(s[j++]);\\n                    currentMax = Math.Max(currentMax, j - i);\\n                }\\n                else\\n                    set.Remove(s[i++]);\\n\\n            return currentMax;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int LengthOfLongestSubstring(string s) {\\n            if (s == null || s == String.Empty)\\n                return 0;\\n\\n            HashSet<char> set = new HashSet<char>();\\n            int currentMax = 0,\\n                i = 0,\\n                j = 0;\\n\\n            while (j < s.Length)\\n                if (!set.Contains(s[j]))\\n                {\\n                    set.Add(s[j++]);\\n                    currentMax = Math.Max(currentMax, j - i);\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 462705,
                "title": "python-solution-simple-and-fast-44ms-99-12-9mb-100",
                "content": "If you find it nice, please upvote!\\n\\n```\\ndef lengthOfLongestSubstring(s: str):\\n    max_len = 0\\n    sub = \\'\\'\\n    \\n    for l in s:\\n        if l in sub:\\n            sub = sub[sub.find(l)+1:]        \\n        sub += l\\n        if len(sub) > max_len:\\n            max_len = len(sub)\\n            \\n    return max_len\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef lengthOfLongestSubstring(s: str):\\n    max_len = 0\\n    sub = \\'\\'\\n    \\n    for l in s:\\n        if l in sub:\\n            sub = sub[sub.find(l)+1:]        \\n        sub += l\\n        if len(sub) > max_len:\\n            max_len = len(sub)\\n            \\n    return max_len\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2242,
                "title": "my-o-n-solution-runtime-5ms",
                "content": "    int lengthOfLongestSubstring(char *s) {\\n        int m[129] = {0};\\n        int i, j;\\n        int cnt = 0, pre = 0;\\n        int max = 0;\\n        int c;\\n    \\n        for (i = 0; c = s[i]; i++) {\\n            if (pre < m[c]) {\\n                if (max < cnt)\\n                    max = cnt;\\n    \\n                cnt = i-m[c];\\n                pre = m[c];\\n            }\\n    \\n            cnt++;\\n            m[c] = i+1;\\n        }\\n        return max > cnt ? max : cnt;\\n    }",
                "solutionTags": [],
                "code": "    int lengthOfLongestSubstring(char *s) {\\n        int m[129] = {0};\\n        int i, j;\\n        int cnt = 0, pre = 0;\\n        int max = 0;\\n        int c;\\n    \\n        for (i = 0; c = s[i]; i++) {\\n            if (pre < m[c]) {\\n                if (max < cnt)\\n                    max = cnt;\\n    \\n                cnt = i-m[c];\\n                pre = m[c];\\n            }\\n    \\n            cnt++;\\n            m[c] = i+1;\\n        }\\n        return max > cnt ? max : cnt;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3438942,
                "title": "simple-and-fast-c-solution",
                "content": "# Intuition\\nWe iterate over the input and maintain a $$[start, i]$$ interval that only contains unique characters. For every character $$s[i]$$ we first advance $$start$$ until $$[start, i-1]$$ doesn\\'t $$s[i]$$. The longest $$i-start+1$$ is the longest substring.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$ (iterate once over the input)\\n\\n- Space complexity: $$O(1)$$ (space needed doesn\\'t depend on input size)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n\\t\\t\\tif (s.empty()) return 0;  \\n\\t\\t  int result = 0;  // Length of longest substring found so far.\\n\\t\\t  int start = 0;  // Start index of current substring with unique characters.\\n\\t\\t\\t// Track if a character is in [start, i]. `char` is 8-bit (hence 256 possibilties).\\n\\t\\t\\t// More generic, but slower, would be a std::unordered_set<char>.\\n\\t\\t  std::vector<bool> chars_in_substring;\\n\\t\\t  chars_in_substring.resize(256);\\n\\t\\t  for (int i = 0; i < s.size(); ++i) {\\n\\t\\t\\t\\t// Advance `start` until [start, i] contains only unique characters.\\n\\t\\t\\t\\t// This means s[i] cannot be in [start, i-1].\\n\\t\\t\\t  while (chars_in_substring[s[i]]) {\\n\\t\\t\\t\\t  chars_in_substring[s[start++]] = false;\\n\\t\\t\\t  }\\n\\t\\t\\t  chars_in_substring[s[i]] = true;\\n\\t\\t\\t\\t// Is this our new longest substring?\\n\\t\\t\\t  result = std::max(result, i-start+1);\\t\\n\\t\\t  }\\n\\t\\t  return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n\\t\\t\\tif (s.empty()) return 0;  \\n\\t\\t  int result = 0;  // Length of longest substring found so far.\\n\\t\\t  int start = 0;  // Start index of current substring with unique characters.\\n\\t\\t\\t// Track if a character is in [start, i]. `char` is 8-bit (hence 256 possibilties).\\n\\t\\t\\t// More generic, but slower, would be a std::unordered_set<char>.\\n\\t\\t  std::vector<bool> chars_in_substring;\\n\\t\\t  chars_in_substring.resize(256);\\n\\t\\t  for (int i = 0; i < s.size(); ++i) {\\n\\t\\t\\t\\t// Advance `start` until [start, i] contains only unique characters.\\n\\t\\t\\t\\t// This means s[i] cannot be in [start, i-1].\\n\\t\\t\\t  while (chars_in_substring[s[i]]) {\\n\\t\\t\\t\\t  chars_in_substring[s[start++]] = false;\\n\\t\\t\\t  }\\n\\t\\t\\t  chars_in_substring[s[i]] = true;\\n\\t\\t\\t\\t// Is this our new longest substring?\\n\\t\\t\\t  result = std::max(result, i-start+1);\\t\\n\\t\\t  }\\n\\t\\t  return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3102775,
                "title": "lengthoflongestsubstring-in-c-using-sliding-window-approach-o-n",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThis solution uses a sliding window approach to find the longest\\nsubstring without repeating characters.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(min(n, m))$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public int LengthOfLongestSubstring(string s) {\\n        var charSet = new HashSet<char>();\\n        int left = 0, right = 0, maxLength = 0;\\n        while(right < s.Length)\\n        {\\n            if (!charSet.Contains(s[right]))\\n            {\\n                charSet.Add(s[right]);\\n                right++;\\n                maxLength = Math.Max(maxLength, charSet.Count);\\n            }\\n            else\\n            {\\n                charSet.Remove(s[left]);\\n                left++;\\n            }\\n        }\\n        return maxLength;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int LengthOfLongestSubstring(string s) {\\n        var charSet = new HashSet<char>();\\n        int left = 0, right = 0, maxLength = 0;\\n        while(right < s.Length)\\n        {\\n            if (!charSet.Contains(s[right]))\\n            {\\n                charSet.Add(s[right]);\\n                right++;\\n                maxLength = Math.Max(maxLength, charSet.Count);\\n            }\\n            else\\n            {\\n                charSet.Remove(s[left]);\\n                left++;\\n            }\\n        }\\n        return maxLength;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1526581,
                "title": "simplest-way-with-explanation-97-faster",
                "content": "```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        \\n        string = s\\n        \\n        max_length = 0      # we set max_length to 0 because string may be empty.\\n        seen_character = \\'\\' # a empty string to store the character that we have already seen.\\n        \\n        for letter in string:   # we are checking every letter/character in string...\\n            if letter not in seen_character:\\n                seen_character += letter      # if letter not in there then we add to it.\\n                \\n            else:\\n                ## now if the letter is already in seen_character then we get the index of that letter by using seen_character.index() and then we slice the string from that index+1 to last, so that the the first seen letter will be removed.\\n                # for example - \\'abcabbd\\'     # here after \\'abc\\' , again \"a\" was there so we get the index of first \"a\" and slice the string then be get string = \"bc\" .\\n                seen_character = seen_character[seen_character.index(letter) + 1:] + letter\\n                # and then we add the letter \"a\" to the last. so the string will become \"bca\"\\n                \\n            max_length = max(max_length, len(seen_character))   # here we use a function max() that everytime return the maximum value between two number. it sets max_length each time the loop runs.\\n        return max_length     # finally return the maximum length.\\n        \\n    #by - Tony Stark\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        \\n        string = s\\n        \\n        max_length = 0      # we set max_length to 0 because string may be empty.\\n        seen_character = \\'\\' # a empty string to store the character that we have already seen.\\n        \\n        for letter in string:   # we are checking every letter/character in string...\\n            if letter not in seen_character:\\n                seen_character += letter      # if letter not in there then we add to it.\\n                \\n            else:\\n                ## now if the letter is already in seen_character then we get the index of that letter by using seen_character.index() and then we slice the string from that index+1 to last, so that the the first seen letter will be removed.\\n                # for example - \\'abcabbd\\'     # here after \\'abc\\' , again \"a\" was there so we get the index of first \"a\" and slice the string then be get string = \"bc\" .\\n                seen_character = seen_character[seen_character.index(letter) + 1:] + letter\\n                # and then we add the letter \"a\" to the last. so the string will become \"bca\"\\n                \\n            max_length = max(max_length, len(seen_character))   # here we use a function max() that everytime return the maximum value between two number. it sets max_length each time the loop runs.\\n        return max_length     # finally return the maximum length.\\n        \\n    #by - Tony Stark\\n```",
                "codeTag": "Java"
            },
            {
                "id": 236649,
                "title": "python-solution",
                "content": "We initialize the result `res = 0`, and two pointers `j = 0`, and `i = 0`. We initialize a dictionary `dic` which maps every element in `s[:i+1]` to its index of rightmost occurrence in `s[:i+1]`. Then we iterate `i` over `range(len(s))`, if `s[i]` is not in `dic`, we add it to `dic`: `dic[s[i]] = i`; Otherwise, we move `j` to `max(j, dic[s[i]]+1)`, so that within the window `[j:i+1]`, the element `s[i]` only occur once. Then we update the result `res = max(res, i-j+1)`. Finally, we return `res`.\\n\\nTime complexity: `O(n)`, space complexity: `O(n)`.\\n\\n```\\nclass Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        dic = {}\\n        res = 0\\n        j = 0\\n        for i in range(len(s)):\\n            if s[i] not in dic:\\n                dic[s[i]] = i\\n            else:\\n                j = max(j, dic[s[i]]+1)\\n                dic[s[i]] = i\\n            res = max(res, i-j+1)\\n        return res\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        dic = {}\\n        res = 0\\n        j = 0\\n        for i in range(len(s)):\\n            if s[i] not in dic:\\n                dic[s[i]] = i\\n            else:\\n                j = max(j, dic[s[i]]+1)\\n                dic[s[i]] = i\\n            res = max(res, i-j+1)\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2146,
                "title": "java-concise-hashmap-solution",
                "content": "    \\n    public int lengthOfLongestSubstring(String s) {\\n        int ret = 0;\\n        Map<Character, Integer> map = new HashMap<>();\\n        for (int i = 0, start = 0; i < s.length(); i++) {\\n            char c = s.charAt(i);\\n            if (map.containsKey(c)) \\n                start = Math.max(map.get(c)+1, start);\\n            ret = Math.max(ret, i-start+1); \\n            map.put(c, i);\\n        }\\n        return ret;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "    \\n    public int lengthOfLongestSubstring(String s) {\\n        int ret = 0;\\n        Map<Character, Integer> map = new HashMap<>();\\n        for (int i = 0, start = 0; i < s.length(); i++) {\\n            char c = s.charAt(i);\\n            if (map.containsKey(c)) \\n                start = Math.max(map.get(c)+1, start);\\n            ret = Math.max(ret, i-start+1); \\n            map.put(c, i);\\n        }\\n        return ret;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 4019130,
                "title": "simple-python3-solution-using-sliding-window-beats-99",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        l=len(s)\\n        if l==0:\\n            return 0\\n        dicts={}\\n        max_len=0\\n        start=0\\n        for i in range(l):\\n            if s[i] in dicts and start<=dicts[s[i]]:\\n                start = dicts[s[i]]+1\\n            else:\\n                max_len=max(max_len,i-start+1)\\n            dicts[s[i]]=i\\n        return max_len\\n        \\n```\\n![7abc56.jpg](https://assets.leetcode.com/users/images/b0e5a9a2-a2a2-452d-9a1b-33d9fbab7296_1694192336.7716062.jpeg)\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        l=len(s)\\n        if l==0:\\n            return 0\\n        dicts={}\\n        max_len=0\\n        start=0\\n        for i in range(l):\\n            if s[i] in dicts and start<=dicts[s[i]]:\\n                start = dicts[s[i]]+1\\n            else:\\n                max_len=max(max_len,i-start+1)\\n            dicts[s[i]]=i\\n        return max_len\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2261,
                "title": "simple-java-solution",
                "content": "    public class Solution {\\n        public int lengthOfLongestSubstring(String s) {\\n            Map<Character,Integer> indices = new HashMap<Character,Integer>();\\n            int length = 0;\\n            int start = -1;\\n            int end = 0;\\n            for(end=0; end < s.length(); end++){\\n                char c = s.charAt(end);\\n                if(indices.containsKey(c)){\\n                    int newstart = indices.get(c);\\n                    start = Math.max(start,newstart);\\n                }\\n                length = Math.max(length,end-start);\\n                indices.put(c,end);\\n            }\\n            return length;\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public int lengthOfLongestSubstring(String s) {\\n            Map<Character,Integer> indices = new HashMap<Character,Integer>();\\n            int length = 0;\\n            int start = -1;\\n            int end = 0;\\n            for(end=0; end < s.length(); end++){\\n                char c = s.charAt(end);\\n                if(indices.containsKey(c)){\\n                    int newstart = indices.get(c);\\n                    start = Math.max(start,newstart);\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 2920504,
                "title": "python",
                "content": "```\\ndef lengthOfLongestSubstring(self, s: str) -> int:\\n        maxLength = 0\\n        dict = {}\\n\\n        i,j = 0,0\\n        n = len(s)\\n\\n        while(j < n):\\n            c = s[j]     \\n            \\n            dict[c] = 1 if not c in dict else dict[c] + 1\\n            \\n            \\n            if dict[c] > 1:\\n                while(dict[c] > 1):\\n                    dict[s[i]] -= 1\\n                    i += 1\\n                    \\n            maxLength = max(maxLength, j - i + 1)\\n            j += 1\\n\\n        return maxLength\\n```",
                "solutionTags": [],
                "code": "```\\ndef lengthOfLongestSubstring(self, s: str) -> int:\\n        maxLength = 0\\n        dict = {}\\n\\n        i,j = 0,0\\n        n = len(s)\\n\\n        while(j < n):\\n            c = s[j]     \\n            \\n            dict[c] = 1 if not c in dict else dict[c] + 1\\n            \\n            \\n            if dict[c] > 1:\\n                while(dict[c] > 1):\\n                    dict[s[i]] -= 1\\n                    i += 1\\n                    \\n            maxLength = max(maxLength, j - i + 1)\\n            j += 1\\n\\n        return maxLength\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1383319,
                "title": "8-lines-c-solution",
                "content": "**Description**\\n[Longest Substring Without Repeating Characters](https://leetcode.com/problems/longest-substring-without-repeating-characters/): Given a string `s`, find the length of the **longest substring** without repeating characters.\\nExample:\\n```\\nInput: s = \"pwwkew\"\\nOutput: 3\\nExplanation: The answer is \"wke\", with the length of 3.\\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n```\\n\\n**Solution**\\nThe basic idea is to use a dictionary (called `cache`) to keep track **where the character last appeared**.\\nThis is easy to see that **length = end - start**. For each character, we take its index as `end`. For `start`, we hope to use the index, all characters after it are not repeated. So, the `start` will be the maximum of `start` and `the index of the character last appeared`. Finally, we return the max length.\\nThe idea is as follows:\\n![image](https://assets.leetcode.com/users/images/a431245b-9c62-4d61-85d1-d0a64edb4386_1628094109.0595064.png)\\n\\n**Code**\\n```cpp\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        vector<int> cache(256, -1);\\n        int start = -1, maxRes = 0;\\n        for(int i = 0; i < s.length(); i++) {\\n            start = max(start, cache[s[i]]);\\n            cache[s[i]] = i;\\n            maxRes = max(maxRes, i - start);\\n        }\\n        return maxRes;\\n    }\\n};\\n```\\n\\n**Complexity**\\nTime complexity: O(n)\\nSpace complexity: only use 256 array space, so the space cost is O(1)",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nInput: s = \"pwwkew\"\\nOutput: 3\\nExplanation: The answer is \"wke\", with the length of 3.\\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n```\n```cpp\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        vector<int> cache(256, -1);\\n        int start = -1, maxRes = 0;\\n        for(int i = 0; i < s.length(); i++) {\\n            start = max(start, cache[s[i]]);\\n            cache[s[i]] = i;\\n            maxRes = max(maxRes, i - start);\\n        }\\n        return maxRes;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 287946,
                "title": "swift-time-exceeded-fix",
                "content": "The \"optimized\" solution still runs over the acceptable time limit when the solution is delivered in Swift. I did a quick profiling session and realized the problem is in Swift\\'s implementation of String and how it accesses information about the underlying characters. \\n\\n![image](https://assets.leetcode.com/users/vladinecko/image_1557211525.png)\\n\\nIf you\\'re accessing the string to get the current character inside your loop, you will be making a ton of calls to String internals, which are currently super slow. The easiest way to circumvent that without having to convert the string into an array is to use String\\'s iterator. Below is my implementation that could be optimized further but is already running faster than ~90% of submissions. \\n\\n```\\nfunc longestSubstringLengthOptimized(_ string: String) -> Int {\\n\\tguard string.count > 0 else {\\n\\t\\treturn 0\\n\\t}\\n\\n\\tvar charIndexes = [Character:Int]()\\n\\tvar i = 0\\n\\tvar j = 0\\n\\tvar maxLength = 1\\n\\n\\tfor currentChar in string {\\n\\t\\tif let index = charIndexes[currentChar] {\\n\\t\\t\\tmaxLength = max(maxLength, j - i)\\n\\t\\t\\ti = max(i, index)\\n\\t\\t}\\n\\t\\tj += 1\\n\\t\\tcharIndexes[currentChar] = j\\n\\t}\\n\\n\\treturn max(maxLength, j - i)\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nfunc longestSubstringLengthOptimized(_ string: String) -> Int {\\n\\tguard string.count > 0 else {\\n\\t\\treturn 0\\n\\t}\\n\\n\\tvar charIndexes = [Character:Int]()\\n\\tvar i = 0\\n\\tvar j = 0\\n\\tvar maxLength = 1\\n\\n\\tfor currentChar in string {\\n\\t\\tif let index = charIndexes[currentChar] {\\n\\t\\t\\tmaxLength = max(maxLength, j - i)\\n\\t\\t\\ti = max(i, index)\\n\\t\\t}\\n\\t\\tj += 1\\n\\t\\tcharIndexes[currentChar] = j\\n\\t}\\n\\n\\treturn max(maxLength, j - i)\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1530310,
                "title": "o-n-javascript-typescript-with-detailed-explanatory-comments",
                "content": "```\\n// We can solve this using a dynamic \"sliding window\" that \\n// shrinks or grows whenever certain conditions are met\\n\\nconst lengthOfLongestSubstring = function(characters: string) {\\n    // Setting to 0 takes care of the edge case where \"characters\" is \\'\\'\\n    let length = 0\\n    \\n    // Map will store each character and the last index they were looped over at\\n    let characterMap = new Map()\\n    \\n    // We declare a left index since a sliding window requires two indices\\n    // (left and right) to track the window of elements the indices surround\\n    let leftIndex = 0\\n    \\n    // Begin looping through each character in the string.\\n    // rightIndex will always be greater the leftIndex to create a \"window\" of elements\\n    for (let rightIndex = 0; rightIndex < characters.length; rightIndex++) {\\n        \\n        // Get current character for better readability\\n        const character = characters[rightIndex]\\n        \\n        // Check if character exists and if its last index is greater than the\\n        // current leftIndex. If we don\\'t check it\\'s leftIndex, we\\'re setting\\n        // it to a previous result which\\'ll provide incorrect values \\n        // when calculating the window length\\n        if (characterMap.has(character) && characterMap.get(character) >= leftIndex) {\\n            // set left index to last index where the character was found plus one\\n            leftIndex = characterMap.get(character) + 1\\n        }\\n        \\n        // Which is greater, the last iteration\\'s window length, or the current\\n        // interation\\'s window length? We decide here, then set our result length\\n        // to that number. We add 1 since we need to take into account every element\\n        // within the window (2 - 0 = 2, although there are three elements, so add 1) \\n        length = Math.max(length, rightIndex - leftIndex + 1)\\n            \\n        // Add character and its index to map, or, if it exists,\\n        // automatically overwrite its index with the current\\n        characterMap.set(character, rightIndex)\\n    }\\n    \\n    return length\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript",
                    "Sliding Window"
                ],
                "code": "```\\n// We can solve this using a dynamic \"sliding window\" that \\n// shrinks or grows whenever certain conditions are met\\n\\nconst lengthOfLongestSubstring = function(characters: string) {\\n    // Setting to 0 takes care of the edge case where \"characters\" is \\'\\'\\n    let length = 0\\n    \\n    // Map will store each character and the last index they were looped over at\\n    let characterMap = new Map()\\n    \\n    // We declare a left index since a sliding window requires two indices\\n    // (left and right) to track the window of elements the indices surround\\n    let leftIndex = 0\\n    \\n    // Begin looping through each character in the string.\\n    // rightIndex will always be greater the leftIndex to create a \"window\" of elements\\n    for (let rightIndex = 0; rightIndex < characters.length; rightIndex++) {\\n        \\n        // Get current character for better readability\\n        const character = characters[rightIndex]\\n        \\n        // Check if character exists and if its last index is greater than the\\n        // current leftIndex. If we don\\'t check it\\'s leftIndex, we\\'re setting\\n        // it to a previous result which\\'ll provide incorrect values \\n        // when calculating the window length\\n        if (characterMap.has(character) && characterMap.get(character) >= leftIndex) {\\n            // set left index to last index where the character was found plus one\\n            leftIndex = characterMap.get(character) + 1\\n        }\\n        \\n        // Which is greater, the last iteration\\'s window length, or the current\\n        // interation\\'s window length? We decide here, then set our result length\\n        // to that number. We add 1 since we need to take into account every element\\n        // within the window (2 - 0 = 2, although there are three elements, so add 1) \\n        length = Math.max(length, rightIndex - leftIndex + 1)\\n            \\n        // Add character and its index to map, or, if it exists,\\n        // automatically overwrite its index with the current\\n        characterMap.set(character, rightIndex)\\n    }\\n    \\n    return length\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1448722,
                "title": "c-sliding-window-keeping-it-s-mple",
                "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        unordered_set<char>sub;//set to store occoured character\\n        int left=0,right=0; //two pointers to navigate\\n        int max_size=0;\\n        while(left<s.size() && right<s.size())\\n        {\\n            //if the char is not in the subset\\n            //put it in the set\\n            //find the max size\\n            if(sub.find(s[right])==sub.end())\\n            {\\n                sub.insert(s[right]);\\n                int n=sub.size();\\n                max_size=max(max_size,n);\\n                right++;\\n            }\\n            //if already there \\n            //shrink the window from left \\n            //until the repeated char is not omitted from left\\n            else\\n            {\\n                sub.erase(s[left]);\\n                left++;\\n            }\\n        }\\n        return max_size;\\n    }\\n};\\n```\\nIf you find any issue in understanding the solutions then comment below, will try to help you.\\nIf you found my solution useful.\\nSo please do upvote and encourage me to document all leetcode problems\\uD83D\\uDE03\\nHappy Coding :)",
                "solutionTags": [
                    "C",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        unordered_set<char>sub;//set to store occoured character\\n        int left=0,right=0; //two pointers to navigate\\n        int max_size=0;\\n        while(left<s.size() && right<s.size())\\n        {\\n            //if the char is not in the subset\\n            //put it in the set\\n            //find the max size\\n            if(sub.find(s[right])==sub.end())\\n            {\\n                sub.insert(s[right]);\\n                int n=sub.size();\\n                max_size=max(max_size,n);\\n                right++;\\n            }\\n            //if already there \\n            //shrink the window from left \\n            //until the repeated char is not omitted from left\\n            else\\n            {\\n                sub.erase(s[left]);\\n                left++;\\n            }\\n        }\\n        return max_size;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1257052,
                "title": "10-line-o-n-easy-java-solution-covering-edge-cases-without-extra-code",
                "content": "This problem is a basic sliding window problem, so we should have a left and a right index. We will let our right index be the iterator of the string and hold the position of the current character we are at. The basic idea is to put the characters you visit in map with their index as the value. We want to find the last occurrence, not the frequency of occurence.  \\nOnce we find the character in map, we recalculate max by taking the max value of max and right - left ( length of sliding window in last occurrence, before we found a repeating character), and we recalculate left by taking max of left and the last index our character was found in.\\n\\n``` \\n    public int lengthOfLongestSubstring(String s) {\\n        int right, left = 0, max = 0;\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        for(right = 0; right < s.length(); right++) {\\n            if(map.containsKey(s.charAt(right))) {\\n               max = Math.max(max, right - left);\\n               left = Math.max(left, map.get(s.charAt(right)) + 1); \\n            }  \\n             map.put(s.charAt(right), right);\\n        }\\n        return Math.max(max, right - left);\\n    }",
                "solutionTags": [
                    "Java",
                    "Sliding Window"
                ],
                "code": "This problem is a basic sliding window problem, so we should have a left and a right index. We will let our right index be the iterator of the string and hold the position of the current character we are at. The basic idea is to put the characters you visit in map with their index as the value. We want to find the last occurrence, not the frequency of occurence.  \\nOnce we find the character in map, we recalculate max by taking the max value of max and right - left ( length of sliding window in last occurrence, before we found a repeating character), and we recalculate left by taking max of left and the last index our character was found in.\\n\\n``` \\n    public int lengthOfLongestSubstring(String s) {\\n        int right, left = 0, max = 0;\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        for(right = 0; right < s.length(); right++) {\\n            if(map.containsKey(s.charAt(right))) {\\n               max = Math.max(max, right - left);\\n               left = Math.max(left, map.get(s.charAt(right)) + 1); \\n            }  \\n             map.put(s.charAt(right), right);\\n        }\\n        return Math.max(max, right - left);\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 311550,
                "title": "share-my-javascript-solution-i-think-it-is-easy-to-understand",
                "content": "```\\nvar lengthOfLongestSubstring = function (s) {\\n    var max=0,\\n        theSub=\\'\\'\\n    for(var i=0;i<s.length;i++){\\n        const idx=theSub.indexOf(s[i])\\n        theSub+=s[i]\\n        if(idx>=0){  \\n         theSub= theSub.substring(idx+1) \\n        }\\n        if(theSub.length>max){\\n            max=theSub.length\\n        }\\n    }\\n    return max\\n}\\n\\t",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar lengthOfLongestSubstring = function (s) {\\n    var max=0,\\n        theSub=\\'\\'\\n    for(var i=0;i<s.length;i++){\\n        const idx=theSub.indexOf(s[i])\\n        theSub+=s[i]\\n        if(idx>=0){  \\n         theSub= theSub.substring(idx+1) \\n        }\\n        if(theSub.length>max){\\n            max=theSub.length\\n        }\\n    }\\n    return max\\n}\\n\\t",
                "codeTag": "Unknown"
            },
            {
                "id": 2425,
                "title": "o-n-runtime-constant-space-solution",
                "content": "\\nKeep track of the last index of each char. Scan s from left to right, if hit a previously encountered char, then reset the longest substring to start just after the last index of the seen char.\\n\\n        int lengthOfLongestSubstring(const string& s) {\\n            int idx[256]; // indices of each char.\\n            memset(idx,-1,sizeof idx);\\n            int i,j,best=0,start=0;\\n            for(i=0;i<s.size();i++){\\n                const unsigned char c=(unsigned char)s[i];\\n                j=idx[c];\\n                idx[c]=i;\\n                if(start<=j){\\n                    start=j+1;\\n                }\\n                best=max(best,i-start+1);\\n            }\\n            return best;\\n        }",
                "solutionTags": [],
                "code": "\\nKeep track of the last index of each char. Scan s from left to right, if hit a previously encountered char, then reset the longest substring to start just after the last index of the seen char.\\n\\n        int lengthOfLongestSubstring(const string& s) {\\n            int idx[256]; // indices of each char.\\n            memset(idx,-1,sizeof idx);\\n            int i,j,best=0,start=0;\\n            for(i=0;i<s.size();i++){\\n                const unsigned char c=(unsigned char)s[i];\\n                j=idx[c];\\n                idx[c]=i;\\n                if(start<=j){\\n                    start=j+1;\\n                }\\n                best=max(best,i-start+1);\\n            }\\n            return best;\\n        }",
                "codeTag": "Unknown"
            },
            {
                "id": 3165539,
                "title": "c-sliding-window-hash-map-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIdea is to use a map and check when there is a duplicate remove it and maintain the counter for max window size.\\nThis tempate ca be used for multiple questions like:\\n- https://leetcode.com/problems/maximum-erasure-value/description/\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nSo using Sliding Window These are the steps:\\n\\n- Insert one by one in map and also check a condition along with this .\\n- Condition is if mp[s[i]] is >1 i.e is a duplicate so remove it .\\n- Keep a maxi varaible for maximum window size.\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(128) --> can be taken as constant or surely less than using a map direclty\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n      int n=s.size(),j=0,ans=0,maxi=0;\\n      \\n      vector<int>mp(128,0);\\n        for(int i=0;i<n;i++){\\n            if(!mp[s[i]]++)maxi++;\\n            while(mp[s[i]]>1){\\n                mp[s[j]]--;\\n                j++;\\n            }\\n            ans=max(ans,i-j+1);\\n        }\\n        return ans;\\n    \\n    }\\n};\\n```\\n# UpVote will Be  Apprecaited \\uD83D\\uDD3C\\uD83D\\uDD3C\\uD83D\\uDD3C",
                "solutionTags": [
                    "C++",
                    "Hash Table",
                    "String",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n      int n=s.size(),j=0,ans=0,maxi=0;\\n      \\n      vector<int>mp(128,0);\\n        for(int i=0;i<n;i++){\\n            if(!mp[s[i]]++)maxi++;\\n            while(mp[s[i]]>1){\\n                mp[s[j]]--;\\n                j++;\\n            }\\n            ans=max(ans,i-j+1);\\n        }\\n        return ans;\\n    \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1597514,
                "title": "javascript-solution-using-sliding-window-in-o-n-time-w-explanation",
                "content": "## Explanation\\n\\nThe main method used for this problem is the **sliding window** technique. The sliding window is essentially 2 pointers that will help to keep track the start and end of a substring. In this solution, this window will always contain a substring with no duplicate characters.\\n\\nHere are the brief steps of my solution:\\n\\n1. We initialize the variables maxLength, which keeps track of the current longest length of any substring in the string, and left, which is the start of the substring currently being tracked. A set is also initialised to keep track of the elements in a substring. Since there are no duplicate characters in the substring (unique), a set will be a perfect tool to keep track of duplicates.\\n\\n2. We iterate through this loop using a right pointer. As this right pointer moves, we first check if the char at the right pointer is a duplicate of any previous characters in the substring by cross checking with the set.\\n\\n3. If the set already has the character, the set will continuously remove the leftmost char s[left] while also shifting the left pointer to the right. This will shrink the window size until there are no more duplicates characters.\\n\\n4. Once it is ensured that there are no duplicate characters, it will add the right most char s[right] to the set and update maxLength if this new substring is longer than a previous substring.\\n\\n## Performance\\n\\nThe time complexity of this solution is linear, **O(n)**, since we solved the problem by having to pass through the string only once.\\n\\nHere are the details of my submission:\\nRuntime: 96 ms, faster than 89.62% \\nMemory Usage: 43.3 MB, less than 74.80% \\n\\n## Code\\n\\n```\\nvar lengthOfLongestSubstring = function(s) {\\n    var maxLength = 0\\n    var left = 0\\n    var charSet = new Set()\\n    \\n    for (var right = 0; right < s.length; right++){\\n        while (charSet.has(s[right])){\\n            charSet.delete(s[left])\\n            left += 1\\n        }\\n        charSet.add(s[right])\\n        maxLength = Math.max(maxLength, right - left + 1)\\n    }\\n    \\n    return maxLength\\n};\\n```\\n\\nI hope this helps! Do let me know if there are any lapses in my explanation and/or if my solution can be improved in any way :)",
                "solutionTags": [
                    "JavaScript",
                    "Sliding Window",
                    "Ordered Set"
                ],
                "code": "```\\nvar lengthOfLongestSubstring = function(s) {\\n    var maxLength = 0\\n    var left = 0\\n    var charSet = new Set()\\n    \\n    for (var right = 0; right < s.length; right++){\\n        while (charSet.has(s[right])){\\n            charSet.delete(s[left])\\n            left += 1\\n        }\\n        charSet.add(s[right])\\n        maxLength = Math.max(maxLength, right - left + 1)\\n    }\\n    \\n    return maxLength\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 512514,
                "title": "python-sliding-window-simple-syntax",
                "content": "Python sliding window. \\n\\n```\\nclass Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        # create a window with left and right\\n        # keep a hash of elements already added\\n        left = 0\\n        right = 0\\n        seen = {} # keeps track of seen elements\\n\\n        max_count = 0\\n\\n        for i, character in enumerate(s):\\n            if character not in seen or seen[character] < left: # notice this logic\\n                seen[character] = i\\n                right = i\\n                if (right - left + 1) > max_count: # update the largest count\\n                    max_count = (right - left + 1)\\n            else:\\n                # we move start to one element after we found the character\\n                left = seen[character] + 1\\n                seen[character] = i # update index of last time we saw the character\\n\\n        return max_count\\n```",
                "solutionTags": [
                    "Python",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        # create a window with left and right\\n        # keep a hash of elements already added\\n        left = 0\\n        right = 0\\n        seen = {} # keeps track of seen elements\\n\\n        max_count = 0\\n\\n        for i, character in enumerate(s):\\n            if character not in seen or seen[character] < left: # notice this logic\\n                seen[character] = i\\n                right = i\\n                if (right - left + 1) > max_count: # update the largest count\\n                    max_count = (right - left + 1)\\n            else:\\n                # we move start to one element after we found the character\\n                left = seen[character] + 1\\n                seen[character] = i # update index of last time we saw the character\\n\\n        return max_count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2314,
                "title": "accepted-16ms-c-dp-solution-o-n-with-bitmask-to-record-the-last-position-of-each-letter-appears",
                "content": "    class Solution {\\n    public:\\n        int lengthOfLongestSubstring(std::string s) {\\n            std::vector<int> flag(256, -1);\\n            int start = 0, longest = 0;\\n            for (int i = 0; i != s.size(); ++i) {\\n                start = std::max(start, flag[s[i]] + 1);\\n                flag[s[i]] = i;\\n                longest = std::max(longest, i - start + 1);\\n            }\\n            return longest;\\n        }\\n    };\\n\\nUpdated **Jun 30**: In fact, there is no need to update `longest` evey time:\\n\\n    class Solution {\\n    public:\\n        int lengthOfLongestSubstring(std::string s) {\\n            std::vector<int> flag(256, -1);\\n            int start = 0, longest = 0, len = s.size();\\n            for (int i = 0; i != len; ++i) {\\n                if (flag[s[i]] >= start) {\\n                    longest = std::max(longest, i - start);\\n                    start = flag[s[i]] + 1;\\n                }\\n                flag[s[i]] = i;\\n            }\\n            return std::max(longest, len - start);\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        int lengthOfLongestSubstring(std::string s) {\\n            std::vector<int> flag(256, -1);\\n            int start = 0, longest = 0;\\n            for (int i = 0; i != s.size(); ++i) {\\n                start = std::max(start, flag[s[i]] + 1);\\n                flag[s[i]] = i;\\n                longest = std::max(longest, i - start + 1);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3979145,
                "title": "java-hashset-sliding-window",
                "content": "# Intuition\\nUpon encountering this problem, my initial instinct is to utilize the sliding window technique to identify the length of the longest substring without repeating characters.\\n\\n# Approach\\nMy approach to tackling this problem involves implementing the sliding window technique to ascertain the length of the longest substring that does not contain any repeated characters. To do so, I maintain a HashSet called `uniqueChars` to keep track of the characters present in the current window. Additionally, two pointers named `start` and `end` denote the beginning and end of the present substring segment. Furthermore, a variable named `maxSubstringLength` is utilized to track the length of the longest valid substring.\\n\\nThe algorithm operates as follows:\\n1. While the `end` pointer remains within the bounds of the string:\\n   - If the character at the `end` position is not present in the `uniqueChars` set:\\n     - Add the character to the set.\\n     - Update the `maxSubstringLength` by comparing it to the length of the current substring (`end - start + 1`).\\n     - Increment the `end` pointer.\\n   - If the character at the `end` position is already in the `uniqueChars` set:\\n     - Remove the character at the `start` position from the set.\\n     - Increment the `start` pointer to slide the window to the right.\\n\\nUpon completing the iteration, the algorithm returns the calculated `maxSubstringLength`.\\n\\nThis sliding window approach efficiently identifies the length of the longest substring without repeating characters, accomplishing the task in a single traversal of the string.\\n\\n# Complexity\\n- Time complexity: O(n)\\n  The algorithm traverses the provided string once, performing constant-time operations at each step.\\n\\n- Space complexity: O(k)\\n  The algorithm employs a HashSet named `uniqueChars` to store distinct characters in the current window. In the worst case, the HashSet may contain all characters from the input string, leading to a space complexity of O(k), where k is the size of the character set.\\n\\n# Code\\n```\\nclass Solution {\\n     public int lengthOfLongestSubstring(String s) {\\nHashSet<Character> uniqueChars = new HashSet<>();\\n    int start = 0;\\n    int end = 0;\\n    int maxSubstringLength = 0;\\n\\n    while (end < s.length()) {\\n        if (!uniqueChars.contains(s.charAt(end))) {\\n            uniqueChars.add(s.charAt(end));\\n            maxSubstringLength = Math.max(maxSubstringLength, end - start + 1);\\n            end++;\\n        } else {\\n            uniqueChars.remove(s.charAt(start));\\n            start++;\\n        }\\n    }\\n\\n    return maxSubstringLength;\\n    }\\n}\\n```\\n![c0504eaf-5fb8-4a1d-a769-833262d1b86e_1674433591.3836212.webp](https://assets.leetcode.com/users/images/8a3b41d1-f0ca-472f-a9f7-8346b34a824e_1693297402.2918687.webp)",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n     public int lengthOfLongestSubstring(String s) {\\nHashSet<Character> uniqueChars = new HashSet<>();\\n    int start = 0;\\n    int end = 0;\\n    int maxSubstringLength = 0;\\n\\n    while (end < s.length()) {\\n        if (!uniqueChars.contains(s.charAt(end))) {\\n            uniqueChars.add(s.charAt(end));\\n            maxSubstringLength = Math.max(maxSubstringLength, end - start + 1);\\n            end++;\\n        } else {\\n            uniqueChars.remove(s.charAt(start));\\n            start++;\\n        }\\n    }\\n\\n    return maxSubstringLength;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2595554,
                "title": "python",
                "content": "```\\ndef lengthOfLongestSubstring(self, s: str) -> int:\\n        maxLength = 0\\n        dict = {}\\n\\n        i,j = 0,0\\n        n = len(s)\\n\\n        while(j < n):\\n            c = s[j]     \\n            \\n            dict[c] = 1 if not c in dict else dict[c] + 1\\n            \\n            \\n            if dict[c] > 1:\\n                while(dict[c] > 1):\\n                    dict[s[i]] -= 1\\n                    i += 1\\n                    \\n            maxLength = max(maxLength, j - i + 1)\\n            j += 1\\n\\n        return maxLength\\n```",
                "solutionTags": [],
                "code": "```\\ndef lengthOfLongestSubstring(self, s: str) -> int:\\n        maxLength = 0\\n        dict = {}\\n\\n        i,j = 0,0\\n        n = len(s)\\n\\n        while(j < n):\\n            c = s[j]     \\n            \\n            dict[c] = 1 if not c in dict else dict[c] + 1\\n            \\n            \\n            if dict[c] > 1:\\n                while(dict[c] > 1):\\n                    dict[s[i]] -= 1\\n                    i += 1\\n                    \\n            maxLength = max(maxLength, j - i + 1)\\n            j += 1\\n\\n        return maxLength\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2133061,
                "title": "o-n-solution-in-c-sliding-window-hashmaps",
                "content": "The idea here is pretty simple... we use a map to keep track of already visited characters...\\nWe initialize another pointer (j) which gives us the starting index of current window and we traverse through the string using pointer i, which indicated current index of our window...\\n* If the character at ith index is not present in our map, we simply add it to our map and continue the iteration...\\n* If the character at ith index is already present, but its index does not lie in our window, it implie that current character is not part of our current string and hence we update its index value in our map and continue with the iteration...\\n* If the character at ith index is already present and the index at which it is present lies in our current window, then we update the starting index of current window as i value and our window is now a new window with size 1...\\n\\nWe keep track of our longest length using res variable in each iteration...\\n\\n*Here amortized TC is O(n), considering map searching is O(1), to get actual O(1) searching TC, we can use vector of  size 128 to store our characters...*\\n\\n**Pls upvote this thread if you found the solution helpful**\\n\\n\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        if(s.size()<=1) return s.size();\\n        \\n        map<char, int> mp;\\n        int curr=0, res=0;\\n        for(int i=0;i<s.size();i++) {\\n\\t\\t\\t//i-curr, gives us the count of characters in our current window (curr is starting of our window)\\n            res=max(res, i-curr);\\n\\t\\t\\t\\n\\t\\t\\t//If the character is present and its index is present in current window, we update our current window...\\n            if(mp.find(s[i])!=mp.end() && mp[s[i]]>=curr) {\\n                curr = mp[s[i]]+1;\\n            }\\n            mp[s[i]] = i;\\n        }\\n\\t\\t\\n\\t\\t//This is to handle the case when the longest substring is at the end our string, in this case we wont enter the if condition and hence curr variable won\\'t be updated...\\n        if(res<s.size()-curr) return s.size()-curr;\\n\\t\\t\\n        return res;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        if(s.size()<=1) return s.size();\\n        \\n        map<char, int> mp;\\n        int curr=0, res=0;\\n        for(int i=0;i<s.size();i++) {\\n\\t\\t\\t//i-curr, gives us the count of characters in our current window (curr is starting of our window)\\n            res=max(res, i-curr);\\n\\t\\t\\t\\n\\t\\t\\t//If the character is present and its index is present in current window, we update our current window...\\n            if(mp.find(s[i])!=mp.end() && mp[s[i]]>=curr) {\\n                curr = mp[s[i]]+1;\\n            }\\n            mp[s[i]] = i;\\n        }\\n\\t\\t\\n\\t\\t//This is to handle the case when the longest substring is at the end our string, in this case we wont enter the if condition and hence curr variable won\\'t be updated...\\n        if(res<s.size()-curr) return s.size()-curr;\\n\\t\\t\\n        return res;\\n    }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1629847,
                "title": "java-simple-sliding-window-technique-with-comments",
                "content": "```\\n\\n    public int lengthOfLongestSubstring(String s) {\\n        int left = 0; // start of window\\n        int right = 0; // end of window (initially the same as start so we can grab the first char)\\n        int result = 0; // var to store the length of the longest substring we have found so far\\n        HashSet<Character> chars = new HashSet(); // hashset to track the chars in the current substring\\n\\t\\t// the right hand side of the window must not go over the bounds of the string\\n        while(right < s.length()) {\\n            // use the right hand side of the window to get the char, it is initialised to 0 so will pick the first character first\\n            if(!chars.contains(s.charAt(right))) {\\n                chars.add(s.charAt(right));\\n\\t\\t\\t\\t// if the current set of unique chars is greater in size than the result, that\\'s our longest substring\\n                result = Math.max(result, chars.size());\\n\\t\\t\\t\\t// increment right to increase the window size and grab a new char\\n                right++;\\n            } else {\\n\\t\\t\\t// once we encounter a char which is already in the hashset we need create a new window starting from left + 1, and reset right to equal left to initialise a new window\\n                left ++;\\n                right = left;\\n\\t\\t\\t\\t// reset our tracker\\n                chars.clear();\\n            }\\n        }\\n        return result;\\n    }\\n\\t```",
                "solutionTags": [
                    "Java",
                    "Sliding Window"
                ],
                "code": "```\\n\\n    public int lengthOfLongestSubstring(String s) {\\n        int left = 0; // start of window\\n        int right = 0; // end of window (initially the same as start so we can grab the first char)\\n        int result = 0; // var to store the length of the longest substring we have found so far\\n        HashSet<Character> chars = new HashSet(); // hashset to track the chars in the current substring\\n\\t\\t// the right hand side of the window must not go over the bounds of the string\\n        while(right < s.length()) {\\n            // use the right hand side of the window to get the char, it is initialised to 0 so will pick the first character first\\n            if(!chars.contains(s.charAt(right))) {\\n                chars.add(s.charAt(right));\\n\\t\\t\\t\\t// if the current set of unique chars is greater in size than the result, that\\'s our longest substring\\n                result = Math.max(result, chars.size());\\n\\t\\t\\t\\t// increment right to increase the window size and grab a new char\\n                right++;\\n            } else {\\n\\t\\t\\t// once we encounter a char which is already in the hashset we need create a new window starting from left + 1, and reset right to equal left to initialise a new window\\n                left ++;\\n                right = left;\\n\\t\\t\\t\\t// reset our tracker\\n                chars.clear();\\n            }\\n        }\\n        return result;\\n    }\\n\\t```",
                "codeTag": "Unknown"
            },
            {
                "id": 1010396,
                "title": "go-solution",
                "content": "```\\nfunc lengthOfLongestSubstring(s string) int {\\n    start := 0\\n    longest := 0\\n    used := map[byte]int{}\\n    \\n    for i := 0; i < len(s); i++ {\\n        c := s[i]\\n        \\n        if _, ok := used[c]; ok && used[c] >= start {\\n            start = used[c] + 1\\n        }\\n        \\n        longest = max(longest, i - start + 1)\\n        used[c] = i\\n    }\\n    \\n    return longest\\n}\\n\\nfunc max(a, b int) int {\\n    if a > b {\\n        return a\\n    }\\n    \\n    return b\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc lengthOfLongestSubstring(s string) int {\\n    start := 0\\n    longest := 0\\n    used := map[byte]int{}\\n    \\n    for i := 0; i < len(s); i++ {\\n        c := s[i]\\n        \\n        if _, ok := used[c]; ok && used[c] >= start {\\n            start = used[c] + 1\\n        }\\n        \\n        longest = max(longest, i - start + 1)\\n        used[c] = i\\n    }\\n    \\n    return longest\\n}\\n\\nfunc max(a, b int) int {\\n    if a > b {\\n        return a\\n    }\\n    \\n    return b\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 441906,
                "title": "golang-explanation-100-speed-memory",
                "content": "1. `dict` is our dictionary of previously encountered characters\\n2. Increment `i` and use character `s[i]` as index in `dict` to set value to `true`: `dict[s[i]] = true`\\n3. With each step we increment `length` and compare it to `max` value and set `max = length` if length now bigger.\\n4. When we face character we already marked in `dict` (`dict[s[i]] == true`), we increment secord iterator j, unmark characters in dictionary `dict[s[j]] = false` and decrement `length` until `dict[s[i]] == false`.\\n5. We repeat steps `(2)-(4)` while `i < len(s)`.\\n\\n```go\\nfunc lengthOfLongestSubstring(s string) int {\\n    dict := [128]bool{}\\n    length, max := 0, 0\\n    for i, j := 0, 0; i < len(s); i++ {\\n        index := s[i]\\n        if dict[index] {\\n            for ;dict[index]; j++ {\\n                length--\\n                dict[s[j]] = false\\n            }\\n        }\\n        \\n        dict[index] = true\\n        length++\\n        if length > max {\\n            max = length\\n        }\\n    }\\n    return max\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```go\\nfunc lengthOfLongestSubstring(s string) int {\\n    dict := [128]bool{}\\n    length, max := 0, 0\\n    for i, j := 0, 0; i < len(s); i++ {\\n        index := s[i]\\n        if dict[index] {\\n            for ;dict[index]; j++ {\\n                length--\\n                dict[s[j]] = false\\n            }\\n        }\\n        \\n        dict[index] = true\\n        length++\\n        if length > max {\\n            max = length\\n        }\\n    }\\n    return max\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1783,
                "title": "my-simple-c-solution",
                "content": "    class Solution {\\n    public:\\n    int lengthOfLongestSubstring(string s) {\\n        vector<int> table(256, 0);\\n        int maxstr=0, track=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            while(table[s[i]])table[s[track++]]=0;\\n            table[s[i]]=1;\\n            maxstr=max(maxstr, i-track+1);\\n            \\n        }\\n        return maxstr;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n    int lengthOfLongestSubstring(string s) {\\n        vector<int> table(256, 0);\\n        int maxstr=0, track=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            while(table[s[i]])table[s[track++]]=0;\\n            table[s[i]]=1;\\n            maxstr=max(maxstr, i-track+1);\\n            \\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2259,
                "title": "java-solution-without-hashmap",
                "content": "The idea is pretty simple. We iterate thru the list once and we keep a pointer of where the current longest possible substring starts. During the iteration, we check if this last character is contained in the current substring. If so, move the ptr to the first index of the char at the string +1. Everytime we will compare and keep the max value up to date.\\n\\nI am calling the indexOf() method for strings which can theoretically be O(N). I am guessing this is cheaper than creating a hashmap for this set of test cases? Anyway, I just want to share my alternative solution:\\n\\n    public class Solution {\\n        public int lengthOfLongestSubstring(String s) {\\n            if (s.length() <= 1) return s.length();\\n            \\n            int max = 1;\\n            int ptr = 0;\\n            for (int i = 1; i< s.length(); i++) {\\n                // find the first occurence of the char after index ptr\\n                int index = s.indexOf(s.charAt(i), ptr); \\n                if (index < i) { // it means that it is contained in s.substring(ptr, i)\\n                    ptr = index + 1;\\n                }\\n                max = Math.max(max, i - ptr + 1);\\n            }\\n            \\n            return max;\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public int lengthOfLongestSubstring(String s) {\\n            if (s.length() <= 1) return s.length();\\n            \\n            int max = 1;\\n            int ptr = 0;\\n            for (int i = 1; i< s.length(); i++) {\\n                // find the first occurence of the char after index ptr\\n                int index = s.indexOf(s.charAt(i), ptr); \\n                if (index < i) { // it means that it is contained in s.substring(ptr, i)\\n                    ptr = index + 1;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 2159016,
                "title": "java-hashset-easy",
                "content": "I find this problem is very interesting, and easy to understand the problem description. In my interview w/ a tech company last month, I was asked to return longest substring instead of max length. But it\\'s the same idea anyways. \\n\\n**Intuition**\\n\\nWe only move **left** pointer forward once we found the duplicates.\\nWe only move **right** pointer forward if and only if there\\'s no duplicates.\\n\\nFor example, the case \"abba\". \\nHashSet contains either \"ab\" or \"ba\" **at most**.\\n\\nBelow is my Java solution:\\n\\n```\\nclass Solution\\n{\\n    public int lengthOfLongestSubstring(String s)\\n    {\\n        // O(n) time | O(n) space\\n        HashSet<Character> mySet = new HashSet<>();\\n        \\n        int left = 0, right = 0;\\n        int max = 0;\\n        \\n        while(right < s.length())\\n        {\\n            char ch = s.charAt(right);\\n            \\n            if(!mySet.contains(ch))\\n            {\\n                mySet.add(ch);\\n                right++;\\n                max = Math.max(max, mySet.size());\\n            }\\n            else\\n            {\\n                mySet.remove(s.charAt(left));\\n                left++;\\n            }\\n        }\\n        return max;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution\\n{\\n    public int lengthOfLongestSubstring(String s)\\n    {\\n        // O(n) time | O(n) space\\n        HashSet<Character> mySet = new HashSet<>();\\n        \\n        int left = 0, right = 0;\\n        int max = 0;\\n        \\n        while(right < s.length())\\n        {\\n            char ch = s.charAt(right);\\n            \\n            if(!mySet.contains(ch))\\n            {\\n                mySet.add(ch);\\n                right++;\\n                max = Math.max(max, mySet.size());\\n            }\\n            else\\n            {\\n                mySet.remove(s.charAt(left));\\n                left++;\\n            }\\n        }\\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1379214,
                "title": "very-easy-c-solution-with-complete-explanation",
                "content": "Here, we use 2 pointers let say i and j. We will be storing the characters inside the window between indices i and j. According to the question when we encounter the new character which is not in the window we just expand window by doing j++ if the current character is present in window we have to shrink the window from left hand side until we find the current character we do i++ and remove the occurence of all these characters as we are shrinking our window from left. In this way we can find out the maximum size of substring (window) having all unique characters.\\nWe can use map, set, frequecy array to storing occurence of element.\\n\\nCode - \\n```\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        // set to store characters in current slidding window\\n        unordered_set<char> count;\\n        // To store maximum size of substring\\n        int ans=0;\\n        // Starting index of current window\\n        int i=0;\\n        // Ending index of current window\\n        int j=0;\\n        \\n        while(j<s.length())\\n        {\\n            // if current element is present in window\\n            if(count.find(s[j])!=count.end())\\n            {\\n                // Shrinking the window until we delete occurence of current character\\n                while(s[i]!=s[j])\\n                {\\n                    count.erase(s[i]);\\n                    i++;   \\n                }\\n                count.erase(s[i]);\\n                i++;\\n            }\\n            // Updating the ans if length of current window is greater than ans\\n            if((j-i+1)>ans)\\n            {\\n                ans=j-i+1;\\n            }\\n            //inserting current character to window\\n            count.insert(s[j]);\\n            j++;\\n            \\n\\n            }\\n        \\n        return ans;\\n        \\n        \\n    }\\n};\\n```\\n\\nIt would be great if you upvote.",
                "solutionTags": [
                    "Two Pointers",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        // set to store characters in current slidding window\\n        unordered_set<char> count;\\n        // To store maximum size of substring\\n        int ans=0;\\n        // Starting index of current window\\n        int i=0;\\n        // Ending index of current window\\n        int j=0;\\n        \\n        while(j<s.length())\\n        {\\n            // if current element is present in window\\n            if(count.find(s[j])!=count.end())\\n            {\\n                // Shrinking the window until we delete occurence of current character\\n                while(s[i]!=s[j])\\n                {\\n                    count.erase(s[i]);\\n                    i++;   \\n                }\\n                count.erase(s[i]);\\n                i++;\\n            }\\n            // Updating the ans if length of current window is greater than ans\\n            if((j-i+1)>ans)\\n            {\\n                ans=j-i+1;\\n            }\\n            //inserting current character to window\\n            count.insert(s[j]);\\n            j++;\\n            \\n\\n            }\\n        \\n        return ans;\\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 320771,
                "title": "swift",
                "content": "```\\nclass Solution {\\n    func lengthOfLongestSubstring(_ s: String) -> Int {\\n        \\n        if s.count == 0{\\n            return 0\\n        }else if s.count == 1{\\n          return 1\\n        }\\n        \\n        var maxLength = 0\\n        var temp = [Character]()\\n        let charArray = Array(s)\\n        temp.append(charArray[0])\\n        \\n        for i in 1...charArray.count-1{\\n            \\n            if let index = temp.firstIndex(of: charArray[i]){\\n                temp.removeFirst(index+1)\\n            }\\n            temp.append(charArray[i])\\n            maxLength = max(maxLength, temp.count)\\n            \\n        }\\n        return maxLength\\n    }\\n}\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    func lengthOfLongestSubstring(_ s: String) -> Int {\\n        \\n        if s.count == 0{\\n            return 0\\n        }else if s.count == 1{\\n          return 1\\n        }\\n        \\n        var maxLength = 0\\n        var temp = [Character]()\\n        let charArray = Array(s)\\n        temp.append(charArray[0])\\n        \\n        for i in 1...charArray.count-1{\\n            \\n            if let index = temp.firstIndex(of: charArray[i]){\\n                temp.removeFirst(index+1)\\n            }\\n            temp.append(charArray[i])\\n            maxLength = max(maxLength, temp.count)\\n            \\n        }\\n        return maxLength\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 167487,
                "title": "two-pointers-thinking-process",
                "content": "Intuitively, we enumerate all substrings, and aggregate the longest one amont those without repeating characters. Assuming we leverage Set data structure to check whether a substring has repeating characters or not, the whole approach takes O(n^2) time, for n is the length of s.\\n\\nCan we achieve O(n) time? When we aim to improve the approach (agaist arrays) from O(n^2) to O(n), **Two Pointers** should be considered.\\n\\nAssuming two pointers `l=0,  r=0`, `r` should move forward when `s[r + 1]` is non-repeating in the substring `s[l, r+1]`, otherwise, keep moving `l` forward until `s[l, r+1]` has no repeating characters.\\n\\nThe Two Pointers approach makes sense since it promises to go through longest substrings without repeating characters ending at all possible `r`. That approach takes O(n) time, for n is the length of s.\\n```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        if not s:\\n            return 0\\n        l, r, max_len = 0, 0, 1\\n        met = set([s[0]])\\n        while r + 1 < len(s):\\n            if s[r + 1] in met: \\n                # Locate the duplicate\\n                while s[l] != s[r + 1]:\\n                    met.remove(s[l])\\n                    l += 1\\n                # Remove the duplicate s[l]\\n                met.remove(s[l])\\n                l += 1\\n\\n            r += 1\\n            met.add(s[r])\\n            max_len = max(max_len, r - l + 1)\\n        return max_len\\n```",
                "solutionTags": [
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        if not s:\\n            return 0\\n        l, r, max_len = 0, 0, 1\\n        met = set([s[0]])\\n        while r + 1 < len(s):\\n            if s[r + 1] in met: \\n                # Locate the duplicate\\n                while s[l] != s[r + 1]:\\n                    met.remove(s[l])\\n                    l += 1\\n                # Remove the duplicate s[l]\\n                met.remove(s[l])\\n                l += 1\\n\\n            r += 1\\n            met.add(s[r])\\n            max_len = max(max_len, r - l + 1)\\n        return max_len\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2303,
                "title": "share-my-o-n-cpp-solution-with-explanation",
                "content": "store the last last place we see each char, the dp transition equation is  if the last place see s[i] is within dp[i-1] then dp[i] =  i-lastOccur[s[i]], otherwise, dp[i] = dp[i-1]+1, dp[i] is the length of longest non-repeating substring end at i.\\n\\n    \\n       int lengthOfLongestSubstring(string s) {\\n            vector<int> lastOccur(128,-1);\\n            int ans = 0, lastLongest = 0;\\n            for (int i = 0;i < s.size();++i) {\\n                if (i-lastOccur[s[i]] <= lastLongest)\\n                    lastLongest = i-lastOccur[s[i]];\\n                else\\n                    ++lastLongest;\\n                lastOccur[s[i]] = i;\\n                ans = max(ans,lastLongest);\\n            }\\n            return ans;\\n        }",
                "solutionTags": [
                    "Dynamic Programming"
                ],
                "code": "store the last last place we see each char, the dp transition equation is  if the last place see s[i] is within dp[i-1] then dp[i] =  i-lastOccur[s[i]], otherwise, dp[i] = dp[i-1]+1, dp[i] is the length of longest non-repeating substring end at i.\\n\\n    \\n       int lengthOfLongestSubstring(string s) {\\n            vector<int> lastOccur(128,-1);\\n            int ans = 0, lastLongest = 0;\\n            for (int i = 0;i < s.size();++i) {\\n                if (i-lastOccur[s[i]] <= lastLongest)\\n                    lastLongest = i-lastOccur[s[i]];\\n                else\\n                    ++lastLongest;\\n                lastOccur[s[i]] = i;\\n                ans = max(ans,lastLongest);\\n            }\\n            return ans;\\n        }",
                "codeTag": "Unknown"
            },
            {
                "id": 3615217,
                "title": "easy-well-explained-python-solution-faster-than-98-o-n-time-complexity",
                "content": "# Intuition\\nwe use a **starting point** while iterating over the given string and every time we find a repeated character we calculate the length of the substring between the starting point and the current point - 1.\\nevery time we find a repetition we set the starting point to the character next to the last occurrence.\\n\\n**Ex :** consider the string **`abcdae`**\\n\\nthe starting point will be $$0$$ initially, we keep iterating until we find the second **`a`**. we calculate then the length of the substring **`abcd`** and then set the starting point to the character next to the first **`a`**, which is **`b`**.\\nthen, we will keep iterating until the end since there are no more repetitions and the answer will be $$5$$ (the length of **`bcdae`**).\\n\\n# Approach\\nwe will need $$2$$ variables: \\n1. $$`longest`$$ to **save the length of the longest substring found**\\n2. $$`offset`$$ for **the starting point**.\\n\\nwe will also need to save the encountered characters to check repetition, a dictionary will be ideal for this case as it doesn\\'t allow repetition. for that we will use an extra variable \\n- $$`indexes`$$: to save characters and their indexes, **characters** will be **keys** and **indexes** will be **values**.\\n\\nwe start then: for every character: \\n1. we get its index from indexes dictionary.\\n2. if the index wasn\\'t null `(meaning that it was encountered before)`, we check if its index is **greater or equal to the offset** `(meaning that its in the current substring)`.\\nif so :\\n    - we calculate the length of the substring : $$i\\\\,(current\\\\: position) - offset$$\\n    - we set the offset to the next character of the last occurrence : $$index\\\\,(last\\\\:occurrence) + 1$$\\n    - if the length of this substring is greater than the length of the current longest substring, we update it\\n3. we update the index of the last occurrence of the current character (or add it if this is its first occurrence).\\n\\nFinally, we return the **maximum** between $$`longest`$$ and **the length of the last substring** `(which is equal to the difference between the length of the string and offset)`as it contains **no repeated characters** and its length is **never compared** to $$`longest`$$ because **we get out of the loop**.\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n# Code\\n```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        longest = 0\\n        indexes = {}\\n        offset = 0\\n        for i in range(len(s)):\\n            char = s[i]\\n            index = indexes.get(char)\\n            if index is not None and index >= offset:\\n                length = i - offset\\n                offset = index + 1\\n                if length > longest:\\n                    longest = length\\n            indexes[char] = i\\n        return max(longest, (len(s) - offset))\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        longest = 0\\n        indexes = {}\\n        offset = 0\\n        for i in range(len(s)):\\n            char = s[i]\\n            index = indexes.get(char)\\n            if index is not None and index >= offset:\\n                length = i - offset\\n                offset = index + 1\\n                if length > longest:\\n                    longest = length\\n            indexes[char] = i\\n        return max(longest, (len(s) - offset))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2583818,
                "title": "rust-0-ms-no-hashmap-simply-use-position-differences-with-detailed-comments",
                "content": "This [solution](https://leetcode.com/submissions/detail/801296870/) employs simple calculation of position differences for repeated characters. It demonstrated **0 ms runtime (100.00%)** and used **2.1 MB memory (97.34%)**. Detailed comments are provided.\\n\\n**IF YOU LIKE THIS SOLUTION, PLEASE UPVOTE.**\\n```\\nimpl Solution \\n{\\n    pub fn length_of_longest_substring(s: String) -> i32 \\n    {\\n        let mut max_len: usize = 0;\\n        \\n        // [1] longest substring is the one with the largest\\n        //     difference of positions of repeated characters;\\n        //     thus, we should create a storage for such positions\\n        let mut pos: [usize;128] = [0;128];\\n        \\n        // [2] while iterating through the string (i.e., moving\\n        //     the end of the sliding window), we should also\\n        //     update the start of the window\\n        let mut start: usize = 0;\\n        \\n        for (end, ch) in s.chars().enumerate()\\n        {\\n            // [3] get the position for the start of sliding window\\n            //     with no other occurences of \\'ch\\' in it\\n            start = start.max(pos[ch as usize]);\\n            \\n            // [4] update maximum length \\n            max_len = max_len.max(end-start+1);\\n            \\n            // [5] set the position to be used in [3] on next iterations\\n            pos[ch as usize] = end + 1;\\n        }\\n                \\n        return max_len as i32;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution \\n{\\n    pub fn length_of_longest_substring(s: String) -> i32 \\n    {\\n        let mut max_len: usize = 0;\\n        \\n        // [1] longest substring is the one with the largest\\n        //     difference of positions of repeated characters;\\n        //     thus, we should create a storage for such positions\\n        let mut pos: [usize;128] = [0;128];\\n        \\n        // [2] while iterating through the string (i.e., moving\\n        //     the end of the sliding window), we should also\\n        //     update the start of the window\\n        let mut start: usize = 0;\\n        \\n        for (end, ch) in s.chars().enumerate()\\n        {\\n            // [3] get the position for the start of sliding window\\n            //     with no other occurences of \\'ch\\' in it\\n            start = start.max(pos[ch as usize]);\\n            \\n            // [4] update maximum length \\n            max_len = max_len.max(end-start+1);\\n            \\n            // [5] set the position to be used in [3] on next iterations\\n            pos[ch as usize] = end + 1;\\n        }\\n                \\n        return max_len as i32;\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2312295,
                "title": "c-truly-o-n-complexity-100-time-84-space-best-solution-challenge",
                "content": "# **If you like the implementation then Please help me by increasing my reputation. By clicking the up arrow on the left of my image.**\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        vector<int> ldss(256,0); // ascii code of a-z,  space, A-Z, digits fall under the number range of 0 - 255\\n        int i = 0, n = s.size(), j = 0;\\n        int ans = 0;\\n        while(i < n)\\n        {\\n            if(ldss[s[i]] == 1)\\n            {\\n                ldss[s[j]]--;\\n                j++;\\n            }\\n            else\\n            {\\n                ldss[s[i]]++;\\n                ans = max(ans, i-j+1);\\n                i++;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        vector<int> ldss(256,0); // ascii code of a-z,  space, A-Z, digits fall under the number range of 0 - 255\\n        int i = 0, n = s.size(), j = 0;\\n        int ans = 0;\\n        while(i < n)\\n        {\\n            if(ldss[s[i]] == 1)\\n            {\\n                ldss[s[j]]--;\\n                j++;\\n            }\\n            else\\n            {\\n                ldss[s[i]]++;\\n                ans = max(ans, i-j+1);\\n                i++;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1168866,
                "title": "java-simple-solution",
                "content": "```\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n      int i=0;//pointer in the beginning\\n\\t\\tint j=0;//pointer that will be moving\\n\\t\\tint max=0;//max substring length\\n\\t\\tHashSet<Character> set=new HashSet<Character>();\\n\\t\\twhile(j<s.length())\\n\\t\\t{\\n\\t\\t  if(!set.contains(s.charAt(j)))\\n\\t\\t  {\\n\\t\\t\\t  set.add(s.charAt(j));//if its unique character add it\\n\\t\\t\\t  j++;\\n\\t\\t\\t  max=Math.max(set.size(), max);//to keep track of length\\n\\t\\t  }\\n\\t\\t  else\\n\\t\\t  {\\n\\t\\t\\t  set.remove(s.charAt(i));\\n\\t\\t\\t  i++;\\n\\t\\t  }\\n\\t\\t}\\n        return max;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n      int i=0;//pointer in the beginning\\n\\t\\tint j=0;//pointer that will be moving\\n\\t\\tint max=0;//max substring length\\n\\t\\tHashSet<Character> set=new HashSet<Character>();\\n\\t\\twhile(j<s.length())\\n\\t\\t{\\n\\t\\t  if(!set.contains(s.charAt(j)))\\n\\t\\t  {\\n\\t\\t\\t  set.add(s.charAt(j));//if its unique character add it\\n\\t\\t\\t  j++;\\n\\t\\t\\t  max=Math.max(set.size(), max);//to keep track of length\\n\\t\\t  }\\n\\t\\t  else\\n\\t\\t  {\\n\\t\\t\\t  set.remove(s.charAt(i));\\n\\t\\t\\t  i++;\\n\\t\\t  }\\n\\t\\t}\\n        return max;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 465989,
                "title": "javascript",
                "content": "\\nRuntime: 76 ms, faster than 96.34% of JavaScript online submissions for Longest Substring Without Repeating Characters.\\nMemory Usage: 36.4 MB, less than 100.00% of JavaScript online submissions for Longest Substring Without Repeating Characters.\\n\\n\\u501F\\u9274wangqiim@163.com\\u7684c++\\u601D\\u8DEF\\uFF1A\\n\\u904D\\u5386\\u7684\\u8FC7\\u7A0B\\u4E2D\\uFF0C\\u5B57\\u7B26\\u4E32\\u7684\\u6700\\u957F\\u5B50\\u4E32\\uFF08\\u5982\\u679C\\u5B58\\u5728\\u7684\\u8BDD\\uFF09\\u603B\\u662F\\u4ECE\\u4E0E\\u5B50\\u4E32\\u672B\\u4F4D\\u76F8\\u540C\\u7684\\u6700\\u8FD1\\u4E00\\u4E2A\\u5B57\\u7B26\\u4E32\\u4F4D\\u7F6E + 1\\u5F00\\u59CB\\u3002\\n\\n```\\nvar k = 0;\\n    var maxLength = 0;\\n    for(i = 0; i < s.length; i++) {\\n        for (j = k; j < i; j++) {\\n            if (s[i] === s[j]) {\\n                k = j + 1;\\n                break;\\n            }\\n        }\\n        if (i - k + 1 > maxLength) {\\n            maxLength = i - k + 1;\\n        }\\n    }\\n    return maxLength;\\n```",
                "solutionTags": [],
                "code": "```\\nvar k = 0;\\n    var maxLength = 0;\\n    for(i = 0; i < s.length; i++) {\\n        for (j = k; j < i; j++) {\\n            if (s[i] === s[j]) {\\n                k = j + 1;\\n                break;\\n            }\\n        }\\n        if (i - k + 1 > maxLength) {\\n            maxLength = i - k + 1;\\n        }\\n    }\\n    return maxLength;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 348137,
                "title": "simple-python-two-pointer-solution-52ms-beat-97-94",
                "content": "Please see and vote for my solutions for these similar problems.\\n[1208. Get Equal Substrings Within Budget](https://leetcode.com/problems/get-equal-substrings-within-budget/discuss/392901/Simple-Python-moving-window)\\n[3. Longest Substring Without Repeating Characters](https://leetcode.com/problems/longest-substring-without-repeating-characters/discuss/348137/Simple-Python-two-pointer-solution-(52ms-beat-97.94))\\n[159. Longest Substring with At Most Two Distinct Characters](https://leetcode.com/problems/longest-substring-with-at-most-two-distinct-characters/discuss/348157/Simple-Python-two-pointer-solution)\\n[340. Longest Substring with At Most K Distinct Characters](https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters/discuss/348216/Simple-Python-two-pointer-solution-(72-ms-beat-94.93))\\n[992. Subarrays with K Different Integers](https://leetcode.com/problems/subarrays-with-k-different-integers/discuss/348984/Different-Python-two-pointer-solutions)\\n[424. Longest Repeating Character Replacement](https://leetcode.com/problems/longest-repeating-character-replacement/discuss/363071/Simple-Python-two-pointer-solution)\\n[209. Minimum Size Subarray Sum](https://leetcode.com/problems/minimum-size-subarray-sum/discuss/344476/Simple-Python-two-pointer-solution)\\n[713. Subarray Product Less Than K](https://leetcode.com/problems/subarray-product-less-than-k/discuss/344245/Simple-Python-solution-(beat-94.59))\\n[76. Minimum Window Substring](https://leetcode.com/problems/minimum-window-substring/discuss/344533/Simple-Python-two-pointer-solution)\\n\\n```\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        counter = dict()\\n        res = 0\\n        left = 0\\n        for right in range(len(s)):\\n            if s[right] not in counter:\\n                counter[s[right]] = 1\\n                res = max(res, right - left + 1)\\n            else:\\n                while s[left] != s[right]:\\n                    counter.pop(s[left])\\n                    left += 1\\n                left += 1\\n        return res\\n```",
                "solutionTags": [],
                "code": "```\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        counter = dict()\\n        res = 0\\n        left = 0\\n        for right in range(len(s)):\\n            if s[right] not in counter:\\n                counter[s[right]] = 1\\n                res = max(res, right - left + 1)\\n            else:\\n                while s[left] != s[right]:\\n                    counter.pop(s[left])\\n                    left += 1\\n                left += 1\\n        return res\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 339051,
                "title": "java-sliding-window-template",
                "content": "Algo:\\n1. Use a hashMap to keep track of the latest index of each letter\\n2. Keeping the left pointer at rest, move the right pointer by 1 letter at a time.\\n3. When a repeating character is encountered, update the maxLength and move the left pointer to max{left pointer, old last occurence of this character as available in the map}. We do a max because we don\\'t want to take the left pointer backwards at any time (e.g. in \"abba\"), it will only move forward or stay still.\\n4. return max {right-left, maxLength}. Doing this outside the loop is essential as it handles strings with all unique chars.\\n\\n**T/S:** O(n)/O(a), where n = s.length, a = size of character set\\n```\\npublic int lengthOfLongestSubstring(String s) {\\n\\tvar left = 0;\\n\\tvar right = 0;\\n\\tvar maxLength = 0;\\n\\n\\tfor (var map = new HashMap<Character, Integer>(); right < s.length();) {\\n\\t\\tvar ch = s.charAt(right);\\n\\t\\t\\n\\t\\tif (map.containsKey(ch)) {\\n\\t\\t\\tmaxLength = Math.max(maxLength, right - left);\\n\\t\\t\\tleft = Math.max(left, map.get(ch) + 1);\\n\\t\\t}\\n\\t\\t\\n\\t\\tmap.put(ch, right++);\\n\\t}\\n\\treturn Math.max(maxLength, right - left);\\n}\\n```\\n\\nA slight variation using the template for Sliding Window questions that can be used in:\\n* https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters (P)\\n* https://leetcode.com/problems/find-k-length-substrings-with-no-repeated-characters (P)\\n* https://leetcode.com/problems/longest-substring-with-at-most-two-distinct-characters\\n* https://leetcode.com/problems/fruit-into-baskets\\n* https://leetcode.com/problems/minimum-size-subarray-sum\\n* https://leetcode.com/problems/substrings-of-size-three-with-distinct-characters\\n* https://leetcode.com/problems/number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold\\n* https://leetcode.com/problems/distinct-numbers-in-each-subarray\\n* https://leetcode.com/problems/diet-plan-performance\\n* [1695. Maximum Erasure Value](https://leetcode.com/problems/maximum-erasure-value/discuss/2141049/Java-or-Sliding-Window-or-Reuse-LC-3)\\n\\nand various others\\n\\n\\n```\\npublic int lengthOfLongestSubstring(String s) {\\n\\tvar longest = Integer.MIN_VALUE;\\n\\tvar map = new HashMap<Character, Integer>();\\n\\n\\tfor (int right = 0, left = 0, distinctChars = 0; right < s.length(); right++) {\\n\\t\\tvar rightChar = s.charAt(right);\\n\\t\\tmap.compute(rightChar, (k, v) -> v == null ? 1 : v + 1);\\n\\n\\t\\tif (map.get(rightChar) == 1) {\\n\\t\\t\\t// if this char is the first one in the window, update records \\n\\t\\t\\tlongest = Math.max(longest, right - left + 1);\\n\\t\\t\\tdistinctChars++;\\n\\t\\t} else {\\n\\t\\t    // shrink window until window size becomes equal to number of distinct characters in it, i.e. all chars in the window are distinct\\n\\t\\t\\twhile (distinctChars != right - left + 1) {\\n\\t\\t\\t\\tvar leftChar = s.charAt(left++);\\n\\t\\t\\t\\tmap.put(leftChar, map.get(leftChar) - 1);\\n\\t\\t\\t\\tif (map.get(leftChar) == 0)\\n\\t\\t\\t\\t\\tdistinctChars--;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn longest == Integer.MIN_VALUE ? 0 : longest;\\n}\\n```\\n***Please upvote if this helps***",
                "solutionTags": [
                    "Java",
                    "Two Pointers",
                    "Sliding Window"
                ],
                "code": "```\\npublic int lengthOfLongestSubstring(String s) {\\n\\tvar left = 0;\\n\\tvar right = 0;\\n\\tvar maxLength = 0;\\n\\n\\tfor (var map = new HashMap<Character, Integer>(); right < s.length();) {\\n\\t\\tvar ch = s.charAt(right);\\n\\t\\t\\n\\t\\tif (map.containsKey(ch)) {\\n\\t\\t\\tmaxLength = Math.max(maxLength, right - left);\\n\\t\\t\\tleft = Math.max(left, map.get(ch) + 1);\\n\\t\\t}\\n\\t\\t\\n\\t\\tmap.put(ch, right++);\\n\\t}\\n\\treturn Math.max(maxLength, right - left);\\n}\\n```\n```\\npublic int lengthOfLongestSubstring(String s) {\\n\\tvar longest = Integer.MIN_VALUE;\\n\\tvar map = new HashMap<Character, Integer>();\\n\\n\\tfor (int right = 0, left = 0, distinctChars = 0; right < s.length(); right++) {\\n\\t\\tvar rightChar = s.charAt(right);\\n\\t\\tmap.compute(rightChar, (k, v) -> v == null ? 1 : v + 1);\\n\\n\\t\\tif (map.get(rightChar) == 1) {\\n\\t\\t\\t// if this char is the first one in the window, update records \\n\\t\\t\\tlongest = Math.max(longest, right - left + 1);\\n\\t\\t\\tdistinctChars++;\\n\\t\\t} else {\\n\\t\\t    // shrink window until window size becomes equal to number of distinct characters in it, i.e. all chars in the window are distinct\\n\\t\\t\\twhile (distinctChars != right - left + 1) {\\n\\t\\t\\t\\tvar leftChar = s.charAt(left++);\\n\\t\\t\\t\\tmap.put(leftChar, map.get(leftChar) - 1);\\n\\t\\t\\t\\tif (map.get(leftChar) == 0)\\n\\t\\t\\t\\t\\tdistinctChars--;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn longest == Integer.MIN_VALUE ? 0 : longest;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 325574,
                "title": "rust-0ms-using-return-value-of-hashmap-insert",
                "content": "Runtime: 0 ms, faster than 100.00% of Rust online submissions for Longest Substring Without Repeating Characters.\\nMemory Usage: 2.5 MB, less than 92.65% of Rust online submissions for Longest Substring Without Repeating Characters.\\n\\n```\\nuse std::cmp::max;\\nuse std::collections::HashMap;\\nimpl Solution {\\n    pub fn length_of_longest_substring(s: String) -> i32 {\\n        let mut m = HashMap::new();\\n        let mut ans = 0;\\n        let mut before = -1;\\n        let mut current = 0;\\n        for c in s.chars() {\\n            if let Some(last) = m.insert(c, current) {\\n                before = max(before, last);\\n            }\\n            ans = max(ans, current - before);\\n            current += 1;\\n        }\\n        ans\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nuse std::cmp::max;\\nuse std::collections::HashMap;\\nimpl Solution {\\n    pub fn length_of_longest_substring(s: String) -> i32 {\\n        let mut m = HashMap::new();\\n        let mut ans = 0;\\n        let mut before = -1;\\n        let mut current = 0;\\n        for c in s.chars() {\\n            if let Some(last) = m.insert(c, current) {\\n                before = max(before, last);\\n            }\\n            ans = max(ans, current - before);\\n            current += 1;\\n        }\\n        ans\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 273372,
                "title": "runtime-40-ms-faster-than-99-98",
                "content": "for example string is \"repeating\",Traverse this word\\ntemp Initial value = s[0]\\nif the next letter in the temp:\\n        find the index\\n\\t\\ttemp = Letters after index\\nif the next letter not in the temp:\\n     temp = temp+letter\\nfinally find the longst(temp)\\n```\\nclass Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        if len(s) == 0:\\n            return 0\\n        temp = s[0]\\n        max_len = 1\\n        for letter in s[1:]:\\n            if letter in temp:\\n                i = temp.find(letter)\\n                temp = temp [i+1:]\\n            temp += letter\\n            if len(temp) > max_len:\\n                max_len = len(temp)\\n        return max_len\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        if len(s) == 0:\\n            return 0\\n        temp = s[0]\\n        max_len = 1\\n        for letter in s[1:]:\\n            if letter in temp:\\n                i = temp.find(letter)\\n                temp = temp [i+1:]\\n            temp += letter\\n            if len(temp) > max_len:\\n                max_len = len(temp)\\n        return max_len\\n```",
                "codeTag": "Java"
            },
            {
                "id": 245014,
                "title": "o-n-c-solution-with-simple-code-explanation",
                "content": "The idea is store index of each char in dictionary, if repeating char is encountered  - start calculating from stored index, since there cannot be string greater than string from character starting from any index before index of repeating char as in future there will be repeating char of stored index. This helps in avoiding range of chars to check again. Put in other way, we are remembering that this is max length till repeating char is encountered, if it happens we can start from that index.\\n\\nAlso, dictionary addition and contains is O(1).\\n\\n```  Csharp\\npublic static int LengthOfLongestSubstring(string s)\\n{\\n    Dictionary<char, int> letters = new Dictionary<char, int>();\\n    int length = 0;\\n    for (int i = 0; i < s.Length; i++)\\n    {\\n        if (letters.TryGetValue(s[i], out int index))\\n        {\\n            length = Math.Max(length, letters.Count);\\n            i = index;\\n            letters.Clear();\\n        }\\n        else\\n        {\\n            letters.Add(s[i], i);\\n        }\\n    }\\n    length = Math.Max(length, letters.Count);\\n    return length;\\n}\\n```",
                "solutionTags": [],
                "code": "```  Csharp\\npublic static int LengthOfLongestSubstring(string s)\\n{\\n    Dictionary<char, int> letters = new Dictionary<char, int>();\\n    int length = 0;\\n    for (int i = 0; i < s.Length; i++)\\n    {\\n        if (letters.TryGetValue(s[i], out int index))\\n        {\\n            length = Math.Max(length, letters.Count);\\n            i = index;\\n            letters.Clear();\\n        }\\n        else\\n        {\\n            letters.Add(s[i], i);\\n        }\\n    }\\n    length = Math.Max(length, letters.Count);\\n    return length;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 199006,
                "title": "javascript-solution-96-10",
                "content": "Javascript Solution, faster than 96.10% of other solutions.\\n\\n```\\nconst lengthOfLongestSubstring = function(s) {\\n  let longestStr = \\'\\';\\n  let currentStr = \\'\\';\\n\\n  for(let i = 0; i < s.length; i++) {\\n    let letter = s[i];\\n    let index = currentStr.indexOf(letter);\\n\\n    if(index > -1) {\\n      if(currentStr.length > longestStr.length) longestStr = currentStr;\\n      currentStr = currentStr.slice(index + 1) + letter;\\n    }\\n    else {\\n      currentStr += letter;\\n    }\\n  }\\n  if(currentStr.length > longestStr.length) longestStr = currentStr;\\n  return longestStr.length;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nconst lengthOfLongestSubstring = function(s) {\\n  let longestStr = \\'\\';\\n  let currentStr = \\'\\';\\n\\n  for(let i = 0; i < s.length; i++) {\\n    let letter = s[i];\\n    let index = currentStr.indexOf(letter);\\n\\n    if(index > -1) {\\n      if(currentStr.length > longestStr.length) longestStr = currentStr;\\n      currentStr = currentStr.slice(index + 1) + letter;\\n    }\\n    else {\\n      currentStr += letter;\\n    }\\n  }\\n  if(currentStr.length > longestStr.length) longestStr = currentStr;\\n  return longestStr.length;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4074994,
                "title": "video-visualization-and-intuitive-proof-of-o-n-sliding-window-solution",
                "content": "https://youtu.be/pY2dYa1m2VM\\n\\nA brute force solution would first require finding every possible substring, which would run in O(n<sup>2</sup>) time.  We\\'re not done yet though, because we now have to check every substring for duplicate characters by iterating through every substring.  Each check for duplicate characters runs in O(n) time, and we need to do that for every substring generated (which ran in O(n<sup>2</sup>) time), so the brute force approach ends up running in O(n<sup>3</sup>) time.\\n\\nInstead, we can reduce this to O(n) time by using a sliding window approach and eliminating unnecessary computations.  We use two pointers, `l` and `r`, to denote where the substring starts and ends, and a dictionary called `seen` to keep track of the index of each character encountered.  Then, we move the right pointer one character at a time to the right to expand our substring.\\n\\nAt each iteration, we check for two things.\\n1. Have we seen the newly added character (at index `r`) before?  If we haven\\'t, then this is a brand new character and we can just add it to the substring and extend the length\\n2. If we have seen it before, is its last known position greater than or equal to the left index?  If it is, then that means it\\'s repeated somewhere in the substring.  If not, then that means it\\'s <i>outside</i> of the substring, so we can just add it to the substring and extend the length\\n\\nSo if both conditions are true, the new character is repeated and we have a problem.  We can get rid of the repeated character by moving up the left pointer to be one index past the last recorded index in `seen`. Then, we just keep moving up the right pointer until it reaches the end of the string.  Since we only have to loop through the string once, and since hash table lookups run in constant time, this algorithm ends up running in O(n) time.\\n\\nFor an intuitive proof of why this works and why we don\\'t need to check all the other substrings while moving up the left pointer, please see the video - it\\'s a bit difficult to explain without a visualization and a concrete example.  But basically, all the other substrings will either still contain a repeated character or will be shorter than the last valid substring encountered, so they can be safely ignored.\\n\\n\\n# Code\\n```\\nclass Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        seen = {}\\n        l = 0\\n        length = 0\\n        for r in range(len(s)):\\n            char = s[r]\\n            if char in seen and seen[char] >= l:\\n                l = seen[char] + 1\\n            else:\\n                length = max(length, r - l + 1)\\n            seen[char] = r\\n\\n        return length\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Hash Table",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        seen = {}\\n        l = 0\\n        length = 0\\n        for r in range(len(s)):\\n            char = s[r]\\n            if char in seen and seen[char] >= l:\\n                l = seen[char] + 1\\n            else:\\n                length = max(length, r - l + 1)\\n            seen[char] = r\\n\\n        return length\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4069792,
                "title": "short-c-java-python-js-explained-solution-beginner-friendly",
                "content": "read full article https://www.nileshblog.tech/longest-substring-without-repeating-characters/\\n\\nIntuition\\nApproach\\n1 window\\n2 hashmap\\n3 Two Pointer\\n\\nComplexity\\nO(n) and the space complexity is O(min(n, m))\\n\\nCode\\nhttps://bit.ly/3iIALEY\\n\\n![image](https://assets.leetcode.com/users/images/1d886ffb-9f1f-4697-95a5-75c334157dcc_1695235159.1025457.png)\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "read full article https://www.nileshblog.tech/longest-substring-without-repeating-characters/\\n\\nIntuition\\nApproach\\n1 window\\n2 hashmap\\n3 Two Pointer\\n\\nComplexity\\nO(n) and the space complexity is O(min(n, m))\\n\\nCode\\nhttps://bit.ly/3iIALEY\\n\\n![image](https://assets.leetcode.com/users/images/1d886ffb-9f1f-4697-95a5-75c334157dcc_1695235159.1025457.png)\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2940314,
                "title": "javascript-true-o-n-sliding-window-with-explanation",
                "content": "# Complexity\\n- Time complexity: O(n)\\n- Space complexity: O(n)\\n\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nfunction lengthOfLongestSubstring(inputString) {\\n    if (inputString.length == 0) return 0;\\n\\n    let n = inputString.length;\\n    \\n    // starting index of current window substring\\n    let stCurr = 0,\\n        // length of the longest substring\\n        longest = 0,\\n        // length of the current substring (size of window)\\n        currLen = 0,\\n        // starting index of longest substring\\n        start = 0;\\n\\n\\t// hashmap to store the element as key and index last seen as value\\n    let lastSeenAt = {};\\n\\n    // Traverse inputString to find the longest substring\\n    // without repeating characters.\\n    for (index = 0; index < n; index++) {\\n        let val = inputString[index];\\n\\n        // If the current element is not present in the hash map,\\n        // then store it in the hash map with the value as the current index.\\n        if (!(val in lastSeenAt)) lastSeenAt[val] = index;\\n        else {\\n            // If the current element is present in the hash map,\\n            // it means that this element may have appeared before.\\n            // Check if the current element occurs before or after `stCurr`.\\n            if (lastSeenAt[val] >= stCurr) {\\n                currLen = index - stCurr;\\n                if (longest < currLen) {\\n                    longest = currLen;\\n                    start = stCurr;\\n                }\\n                // The next substring will start after the last\\n                // occurence of the current element.\\n                stCurr = lastSeenAt[val] + 1;\\n            }\\n\\n            // Update the last occurence of\\n            // the element in the hash map\\n            lastSeenAt[val] = index;\\n        }\\n    }\\n\\n    // Update the longest substring\\'s\\n    // length and starting index.\\n    if (longest < index - stCurr) {\\n        start = stCurr;\\n        longest = index - stCurr;\\n    }\\n\\n    return longest;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nfunction lengthOfLongestSubstring(inputString) {\\n    if (inputString.length == 0) return 0;\\n\\n    let n = inputString.length;\\n    \\n    // starting index of current window substring\\n    let stCurr = 0,\\n        // length of the longest substring\\n        longest = 0,\\n        // length of the current substring (size of window)\\n        currLen = 0,\\n        // starting index of longest substring\\n        start = 0;\\n\\n\\t// hashmap to store the element as key and index last seen as value\\n    let lastSeenAt = {};\\n\\n    // Traverse inputString to find the longest substring\\n    // without repeating characters.\\n    for (index = 0; index < n; index++) {\\n        let val = inputString[index];\\n\\n        // If the current element is not present in the hash map,\\n        // then store it in the hash map with the value as the current index.\\n        if (!(val in lastSeenAt)) lastSeenAt[val] = index;\\n        else {\\n            // If the current element is present in the hash map,\\n            // it means that this element may have appeared before.\\n            // Check if the current element occurs before or after `stCurr`.\\n            if (lastSeenAt[val] >= stCurr) {\\n                currLen = index - stCurr;\\n                if (longest < currLen) {\\n                    longest = currLen;\\n                    start = stCurr;\\n                }\\n                // The next substring will start after the last\\n                // occurence of the current element.\\n                stCurr = lastSeenAt[val] + 1;\\n            }\\n\\n            // Update the last occurence of\\n            // the element in the hash map\\n            lastSeenAt[val] = index;\\n        }\\n    }\\n\\n    // Update the longest substring\\'s\\n    // length and starting index.\\n    if (longest < index - stCurr) {\\n        start = stCurr;\\n        longest = index - stCurr;\\n    }\\n\\n    return longest;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2425639,
                "title": "java-o-n-easiest-hashmap-two-pointers",
                "content": "If you found it is useful to you, I would be appreciated if you could vote my solution, that would be the greatest encouragement for me, thank you all! :)\\n\\n```\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n    int left = 0, right = 0, maxWindowSize = -1;\\n    if(s.length() == 0 || s.length() == 1){ return s.length(); }\\n    HashMap<Character, Integer> map = new HashMap<Character, Integer>();\\n    while(left < s.length() && right < s.length()){\\n        if(!map.containsKey(s.charAt(right))){\\n            map.put(s.charAt(right), 1);\\n            right++;\\n            maxWindowSize = Math.max(maxWindowSize, right - left);\\n        }\\n        else{\\n            map.remove(s.charAt(left));\\n            left++;\\n        }\\n    }\\n    return maxWindowSize;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n    int left = 0, right = 0, maxWindowSize = -1;\\n    if(s.length() == 0 || s.length() == 1){ return s.length(); }\\n    HashMap<Character, Integer> map = new HashMap<Character, Integer>();\\n    while(left < s.length() && right < s.length()){\\n        if(!map.containsKey(s.charAt(right))){\\n            map.put(s.charAt(right), 1);\\n            right++;\\n            maxWindowSize = Math.max(maxWindowSize, right - left);\\n        }\\n        else{\\n            map.remove(s.charAt(left));\\n            left++;\\n        }\\n    }\\n    return maxWindowSize;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2338675,
                "title": "c-java-python3-javascript-solutions-easy",
                "content": "See Code and Explanation :  **\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-3-longest-substring-without-repeating-characters-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-3-longest-substring-without-repeating-characters-solution-and-explanation-en/)\\u2B50**\\n\\n**Examples : C#**\\n```\\npublic class Solution {\\n    public int LengthOfLongestSubstring(string s) {\\n        \\n        if(string.IsNullOrEmpty(s))\\n        {\\n            return 0;\\n        }\\n\\n        HashSet<char> hSet = new HashSet<char>();\\n        int max = 0;\\n        int i = 0;\\n        int j = 0;\\n        \\n        while(i<s.Length)\\n        {\\n            if(!hSet.Contains(s[i]))\\n            {\\n                hSet.Add(s[i]);\\n                i++;\\n                \\n            }\\n            else\\n            {\\n                max = Math.Max(max,hSet.Count);\\n                hSet.Remove(s[j]);\\n                j++;\\n            }\\n        }\\n        max = Math.Max(max,hSet.Count);\\n        return max;\\n        \\n    }\\n}\\n```\\n\\nIf you got any problem about the explanation or you need other programming language solution, please feel free to leave your comment.\\n\\n\\uD83E\\uDDE1See more problems solutions - **[Zyrastory - LeetCode Solution](https://zyrastory.com/en/category/coding-en/leetcode-en/)**\\n\\nThanks!",
                "solutionTags": [
                    "Java",
                    "Python3",
                    "JavaScript"
                ],
                "code": "```\\npublic class Solution {\\n    public int LengthOfLongestSubstring(string s) {\\n        \\n        if(string.IsNullOrEmpty(s))\\n        {\\n            return 0;\\n        }\\n\\n        HashSet<char> hSet = new HashSet<char>();\\n        int max = 0;\\n        int i = 0;\\n        int j = 0;\\n        \\n        while(i<s.Length)\\n        {\\n            if(!hSet.Contains(s[i]))\\n            {\\n                hSet.Add(s[i]);\\n                i++;\\n                \\n            }\\n            else\\n            {\\n                max = Math.Max(max,hSet.Count);\\n                hSet.Remove(s[j]);\\n                j++;\\n            }\\n        }\\n        max = Math.Max(max,hSet.Count);\\n        return max;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2264184,
                "title": "java-9-lines-of-simple-code-using-hashset",
                "content": "```\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n      int i = 0, j = 0, max = 0;\\n    Set<Character> set = new HashSet<>();\\n    \\n    while (j < s.length()) {\\n        if (! set.contains(s.charAt(j))) {\\n            set.add(s.charAt(j ++));\\n            max = Math.max(max, set.size());\\n        }\\n      else {\\n            set.remove(s.charAt(i++));\\n        }\\n    }\\n    \\n    return max;   \\n    }\\n}\\n```\\n\\n\\n# PLEASE UPVOTE IF IT WAS HELPFULL",
                "solutionTags": [
                    "Java",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n      int i = 0, j = 0, max = 0;\\n    Set<Character> set = new HashSet<>();\\n    \\n    while (j < s.length()) {\\n        if (! set.contains(s.charAt(j))) {\\n            set.add(s.charAt(j ++));\\n            max = Math.max(max, set.size());\\n        }\\n      else {\\n            set.remove(s.charAt(i++));\\n        }\\n    }\\n    \\n    return max;   \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1407621,
                "title": "o-n-simple-java-solution-no-hashmap",
                "content": "```\\npublic int lengthOfLongestSubstring(String s) {\\n        int left = 0, length = 0;\\n        Set<Character> seen = new HashSet();\\n        char currentChar;\\n        for(int right = 0; right < s.length(); right++) {\\n            currentChar = s.charAt(right);\\n\\t\\t\\t\\n\\t\\t\\t// shrink the window as long as you have a repeated character\\n            while(seen.contains(currentChar)) seen.remove(s.charAt(left++));\\n\\t\\t\\t\\n            seen.add(currentChar);\\n            length = Math.max(length, right - left + 1);\\n        }\\n        \\n        return length;\\n    }\\n```",
                "solutionTags": [
                    "Java",
                    "Sliding Window"
                ],
                "code": "```\\npublic int lengthOfLongestSubstring(String s) {\\n        int left = 0, length = 0;\\n        Set<Character> seen = new HashSet();\\n        char currentChar;\\n        for(int right = 0; right < s.length(); right++) {\\n            currentChar = s.charAt(right);\\n\\t\\t\\t\\n\\t\\t\\t// shrink the window as long as you have a repeated character\\n            while(seen.contains(currentChar)) seen.remove(s.charAt(left++));\\n\\t\\t\\t\\n            seen.add(currentChar);\\n            length = Math.max(length, right - left + 1);\\n        }\\n        \\n        return length;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1074783,
                "title": "python-interview-thought-process-o-2-n-o-n",
                "content": "* First, I thought we could try every substring via recursion \\n\\t* Check if each substring is \"valid\"\\n\\t* If valid, update our \"best\" result\\n\\t* This is `O(2^n)`, definitely not good enough\\n\\n\\n* Second, why not \"expand\" a window from each character?\\n\\t* We loop over each character and call a function to \"expand\" a window\\n\\t* We try to increment the window by one to the right, if we ecounter a duplicate value, we stop\\n\\t* This is better, but still `O(n^2)`\\n\\n\\n* Lastly, similar to previous idea, we can have a sliding window using a queue and a set\\n\\t* We just pop from the queue if we encounter a duplicate value\\n\\t\\t* (we keep popping until queue is empty or we see the duplicate value)\\n\\t* Finally, we have `O(n)`\\n\\n---\\n\\n```python\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n                        \\n        queue = collections.deque([])        \\n        window = set()\\n        result = 0\\n        \\n        for c in s:            \\n            if c in window:\\n                while queue:\\n                    prev = queue.popleft()\\n                    window.remove(prev)\\n                    if prev == c:\\n                        break\\n                            \\n            queue.append(c)\\n            window.add(c)\\n            result = max(result, len(window))\\n            \\n        return result\\n```\\n---",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Sliding Window"
                ],
                "code": "```python\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n                        \\n        queue = collections.deque([])        \\n        window = set()\\n        result = 0\\n        \\n        for c in s:            \\n            if c in window:\\n                while queue:\\n                    prev = queue.popleft()\\n                    window.remove(prev)\\n                    if prev == c:\\n                        break\\n                            \\n            queue.append(c)\\n            window.add(c)\\n            result = max(result, len(window))\\n            \\n        return result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2158,
                "title": "golang-solution",
                "content": "    func lengthOfLongestSubstring(str string) int {\\n    \\tm, max, left := make(map[rune]int), 0, 0\\n    \\tfor idx, c := range str {\\n    \\t\\tif _, okay := m[c]; okay == true && m[c] >= left {\\n    \\t\\t\\tif idx-left > max {\\n    \\t\\t\\t\\tmax = idx - left\\n    \\t\\t\\t}\\n    \\t\\t\\tleft = m[c] + 1\\n    \\t\\t}\\n    \\t\\tm[c] = idx\\n    \\t}\\n    \\tif len(str)-left > max {\\n    \\t\\tmax = len(str) - left\\n    \\t}\\n    \\treturn max\\n    }",
                "solutionTags": [
                    "Go"
                ],
                "code": "    func lengthOfLongestSubstring(str string) int {\\n    \\tm, max, left := make(map[rune]int), 0, 0\\n    \\tfor idx, c := range str {\\n    \\t\\tif _, okay := m[c]; okay == true && m[c] >= left {\\n    \\t\\t\\tif idx-left > max {\\n    \\t\\t\\t\\tmax = idx - left\\n    \\t\\t\\t}\\n    \\t\\t\\tleft = m[c] + 1\\n    \\t\\t}\\n    \\t\\tm[c] = idx\\n    \\t}\\n    \\tif len(str)-left > max {\\n    \\t\\tmax = len(str) - left\\n    \\t}\\n    \\treturn max\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2269,
                "title": "simple-js-solution",
                "content": "    var lengthOfLongestSubstring = function(s) {\\n        var temp = [];\\n        var maxLength = 0;\\n        \\n        for(var i = 0; i < s.length; i++){\\n            if(temp.indexOf(s[i]) === -1){\\n                temp.push(s[i]);\\n                if(temp.length > maxLength)\\n                    maxLength = temp.length;\\n            }else{\\n                temp = temp.slice(temp.indexOf(s[i]) + 1,temp.length);\\n                temp.push(s[i]);\\n            }\\n        }\\n        \\n        return maxLength;\\n    };",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "    var lengthOfLongestSubstring = function(s) {\\n        var temp = [];\\n        var maxLength = 0;\\n        \\n        for(var i = 0; i < s.length; i++){\\n            if(temp.indexOf(s[i]) === -1){\\n                temp.push(s[i]);\\n                if(temp.length > maxLength)\\n                    maxLength = temp.length;\\n            }else{\\n                temp = temp.slice(temp.indexOf(s[i]) + 1,temp.length);\\n                temp.push(s[i]);\\n            }\\n        }\\n        \\n        return maxLength;\\n    };",
                "codeTag": "Unknown"
            },
            {
                "id": 2357,
                "title": "my-10-lines-o-n-precise-and-easy-c-code",
                "content": "      class Solution {\\n    public:\\n        int lengthOfLongestSubstring(string s) {\\n            vector<int> mymap(256,-1);\\n            int i,last=0,ans=0;\\n            for(i=0;i<s.length();i++) {\\n                if(mymap[s[i]]==-1 || mymap[s[i]]<last)\\n                    ans = max(ans,i-last+1);\\n                else\\n                    last = mymap[s[i]]+1;\\n                mymap[s[i]]=i;\\n            }\\n            return ans;\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        int lengthOfLongestSubstring(string s) {\\n            vector<int> mymap(256,-1);\\n            int i,last=0,ans=0;\\n            for(i=0;i<s.length();i++) {\\n                if(mymap[s[i]]==-1 || mymap[s[i]]<last)\\n                    ans = max(ans,i-last+1);\\n                else\\n                    last = mymap[s[i]]+1;\\n                mymap[s[i]]=i;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3137610,
                "title": "easy-to-understand-c-code",
                "content": "# Intuition\\nTo find the length of the longest substring without repeating characters in a given string \"s\", you can use the \"Sliding Window\" technique. Here\\'s the general idea:\\n\\nCreate two pointers, \"start\" and \"end\", initially set to 0.\\nUse a hash set to store the characters in the current substring.\\nWhile \"end\" is less than the length of the string:\\na. If the character at \"end\" is not in the hash set, add it and move the \"end\" pointer to the right.\\nb. If the character at \"end\" is already in the hash set, remove the character at \"start\" from the hash set and move the \"start\" pointer to the right.\\nThe length of the longest substring is the maximum distance between the \"start\" and \"end\" pointers.\\n# Approach\\nWhile \"end\" is less than the length of the string:\\na. If the character at \"end\" is not in the hash set, add it to the hash set and move the \"end\" pointer to the right.\\nb. If the character at \"end\" is already in the hash set, remove the character at \"start\" from the hash set and move the \"start\" pointer to the right.\\nThis way, the \"start\" and \"end\" pointers are moved towards each other until a repeating character is found, at which point the \"start\" pointer is moved to the right to exclude the repeating character. The process continues until the \"end\" pointer reaches the end of the string.\\n\\nThe length of the longest substring without repeating characters is equal to the maximum distance between the \"start\" and \"end\" pointers. The time complexity of this approach is O(n), where n is the length of the string.\\n\\n# Complexity\\n- Time complexity:\\no(n)\\n\\n- Space complexity:\\n O(k), where k is the number of unique characters in the string.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n\\n\\n\\n    int lengthOfLongestSubstring(string s) {\\n        int start = 0, end = 0, max_len = 0;\\n    unordered_set<char> char_set;\\n\\n    while (end < s.length()) {\\n        if (char_set.find(s[end]) == char_set.end()) {\\n            char_set.insert(s[end]);\\n            end++;\\n            max_len = max(max_len, end - start);\\n        } else {\\n            char_set.erase(s[start]);\\n            start++;\\n        }\\n    }\\n\\n    return max_len;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n\\n\\n\\n    int lengthOfLongestSubstring(string s) {\\n        int start = 0, end = 0, max_len = 0;\\n    unordered_set<char> char_set;\\n\\n    while (end < s.length()) {\\n        if (char_set.find(s[end]) == char_set.end()) {\\n            char_set.insert(s[end]);\\n            end++;\\n            max_len = max(max_len, end - start);\\n        } else {\\n            char_set.erase(s[start]);\\n            start++;\\n        }\\n    }\\n\\n    return max_len;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2744505,
                "title": "c-solution",
                "content": "```\\nint lengthOfLongestSubstring(string s) {\\n        vector<int> dict(256, -1);\\n        int maxLen = 0, start = -1;\\n        for (int i = 0; i != s.length(); i++) {\\n            if (dict[s[i]] > start)\\n                start = dict[s[i]];\\n            dict[s[i]] = i;\\n            maxLen = max(maxLen, i - start);\\n        }\\n        return maxLen;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nint lengthOfLongestSubstring(string s) {\\n        vector<int> dict(256, -1);\\n        int maxLen = 0, start = -1;\\n        for (int i = 0; i != s.length(); i++) {\\n            if (dict[s[i]] > start)\\n                start = dict[s[i]];\\n            dict[s[i]] = i;\\n            maxLen = max(maxLen, i - start);\\n        }\\n        return maxLen;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2383487,
                "title": "fastest-solution-explained-0ms-100-o-n-time-complexity-o-n-space-complexity",
                "content": "\\n(Note: This is part of a series of Leetcode solution explanations. If you like this solution or find it useful, ***please upvote*** this post.)\\n***Take care brother, peace, love!***\\n\\n```\\n```\\n\\nThe best result for the code below is ***0ms / 3.27MB*** (beats 99.04% / 90.42%).\\n* *** Java ***\\n\\n```\\n\\npublic int lengthOfLongestSubstring(String s) {\\n    int i = 0, j = 0, max = 0;\\n    Set<Character> set = new HashSet<>();\\n    \\n    while (j < s.length()) {\\n        if (!set.contains(s.charAt(j))) {\\n            set.add(s.charAt(j++));\\n            max = Math.max(max, set.size());\\n        } else {\\n            set.remove(s.charAt(i++));\\n        }\\n    }\\n    \\n    return max;\\n}\\n\\n```\\nThe idea is use a hash set to track the longest substring without repeating characters so far, use a fast pointer j to see if character j is in the hash set or not, if not, great, add it to the hash set, move j forward and update the max length, otherwise, delete from the head by using a slow pointer i until we can put character j to the hash set.\\n```\\n```\\n\\n```\\n```\\n\\nThe best result for the code below is ***0ms / 10MB*** (beats 100.00% / 95.49%).\\n* *** Python ***\\n\\n```\\nSliding window\\nWe use a dictionary to store the character as the key, the last appear index has been seen so far as value.\\nseen[charactor] = index\\n\\nmove the pointer when you met a repeated character in your window.\\n```\\n\\n```\\n\\nindext    0    1    2    3   4   5   6   7\\nstring    a    c    b    d   b   a   c   d\\n          ^                  ^\\n          |                  |\\n\\t\\tleft               right\\n\\t\\tseen = {a : 0, c : 1, b : 2, d: 3} \\n\\t\\t# case 1: seen[b] = 2, current window  is s[0:4] , \\n\\t\\t#        b is inside current window, seen[b] = 2 > left = 0. Move left pointer to seen[b] + 1 = 3\\n\\t\\tseen = {a : 0, c : 1, b : 4, d: 3} \\nindext    0    1    2    3   4   5   6   7\\nstring    a    c    b    d   b   a   c   d\\n\\t\\t\\t\\t\\t\\t ^   ^\\n\\t\\t\\t\\t\\t     |   |\\n\\t\\t\\t\\t      left  right\\t\\t\\nindext    0    1    2    3   4   5   6   7\\nstring    a    c    b    d   b   a   c   d\\n\\t\\t\\t\\t\\t     ^       ^\\n\\t\\t\\t\\t\\t     |       |\\n\\t\\t\\t\\t       left    right\\t\\t\\n\\t\\t# case 2: seen[a] = 0,which means a not in current window s[3:5] , since seen[a] = 0 < left = 3 \\n\\t\\t# we can keep moving right pointer.\\n\\n```\\n\\n```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        seen = {}\\n        l = 0\\n        output = 0\\n        for r in range(len(s)):\\n            \"\"\"\\n            If s[r] not in seen, we can keep increasing the window size by moving right pointer\\n            \"\"\"\\n            if s[r] not in seen:\\n                output = max(output,r-l+1)\\n            \"\"\"\\n            There are two cases if s[r] in seen:\\n            case1: s[r] is inside the current window, we need to change the window by moving left pointer to seen[s[r]] + 1.\\n            case2: s[r] is not inside the current window, we can keep increase the window\\n            \"\"\"\\n            else:\\n                if seen[s[r]] < l:\\n                    output = max(output,r-l+1)\\n                else:\\n                    l = seen[s[r]] + 1\\n            seen[s[r]] = r\\n        return output\\n```\\n* Time complexity :O(n).\\nn is the length of the input string.\\nIt will iterate n times to get the result.\\n\\n* Space complexity: O(m)\\nm is the number of unique characters of the input.\\nWe need a dictionary to store unique characters.\\n\\n```\\n```\\n\\n```\\n```\\n\\nThe best result for the code below is ***0ms / 23.7MB*** (beats 59.24% / 60.42%).\\n* *** C++ ***\\n\\n\\n```\\n\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        \\n        //SLIDING WINDOW  - TIME COMPLEXITY O(2n)\\n        //                  SPACE COMPLEXITY O(m)   //size of array\\n        \\n        int store[256]={0}; //array to store the occurences of all the characters\\n        int l=0;    //left pointer\\n        int r=0;    //right pointer\\n        int ans=0;  //initializing the required length as 0\\n        \\n        while(r<s.length())     //iterate over the string till the right pointer reaches the end of the string \\n        {\\n            store[s[r]]++;      //increment the count of the character present in the right pointer \\n            \\n            while(store[s[r]]>1)    //if the occurence become more than 1 means the char is repeated\\n            { \\n                store[s[l]]--;   //reduce the occurence of temp as it might be present ahead also in the string\\n                l++;         //contraction of the present window till the occurence of the \\'t\\' char becomes 1\\n            }\\n            \\n            ans = max(ans,r-l+1);    //As the index starts from 0 , ans will be (right pointer-left pointer + 1)\\n            r++;        // now will increment the right pointer \\n        }\\n        return ans;\\n    }\\n};\\n\\n```\\n\\n```\\n```\\n\\n```\\n```\\n\\nThe best result for the code below is ***0ms / 78MB*** (beats 100.00% / 100.00%).\\n* *** JavaScript ***\\n\\n\\n```\\n\\nfunction lengthOfLongestSubstring(s) {\\n    const map = {};\\n    var left = 0;\\n    \\n    return s.split(\\'\\').reduce((max, v, i) => {\\n        left = map[v] >= left ? map[v] + 1 : left;\\n        map[v] = i;\\n        return Math.max(max, i - left + 1);\\n    }, 0);\\n}\\n\\n```\\n\\n```\\nTime Complexity = O(N)\\nSpace Complexity = O(N)\\n```\\n\\n```\\nvar lengthOfLongestSubstring = function(s) {\\n    // keeps track of the most recent index of each letter.\\n    const seen = new Map();\\n    // keeps track of the starting index of the current substring.\\n    let start = 0;\\n    // keeps track of the maximum substring length.\\n    let maxLen = 0;\\n    \\n    for(let i = 0; i < s.length; i++) {\\n        // if the current char was seen, move the start to (1 + the last index of this char)\\n        // max prevents moving backward, \\'start\\' can only move forward\\n        if(seen.has(s[i])) start = Math.max(seen.get(s[i]) + 1, start)\\n        seen.set(s[i], i);\\n        // maximum of the current substring length and maxLen\\n        maxLen = Math.max(i - start + 1, maxLen);\\n    } \\n    \\n    return maxLen;  \\n};\\n```\\n\\n\\n```\\n```\\n\\n```\\n```\\n\\nThe best result for the code below is ***0ms / 33.33MB*** (beats 99.00% / 60.12%).\\n* *** Kotlin ***\\n\\n\\n```\\n\\nfun lengthOfLongestSubstring(s: String): Int {\\n    var maxLength = 0\\n    val queue = LinkedList<Char>()\\n    for (i in s.indices) {\\n        if (queue.isNotEmpty()) {\\n            when {\\n                queue.first == s[i] -> queue.poll()\\n                queue.last == s[i] -> queue.clear()\\n                queue.contains(s[i]) -> {\\n                    while (queue.isNotEmpty()) {\\n                        if (queue.poll() == s[i]) break\\n                    }\\n                }\\n            }\\n        }\\n\\n        maxLength = max(maxLength, queue.size+1)\\n        queue.offer(s[i])\\n    }\\n\\n    return maxLength\\n}\\n```\\n\\n```\\nimport kotlin.math.*\\n\\nclass Solution {\\n    private val hashMap = mutableMapOf<Char, Int>()\\n    private var longest = Pair<Int, Int>(0, 1)\\n    \\n    fun lengthOfLongestSubstring(s: String): Int {\\n        if (s.length == 0) {\\n            return 0\\n        }\\n        \\n        var start = 0\\n        \\n        for (i in 0 until s.length) {\\n            val letter = s[i]\\n            if (hashMap.containsKey(letter)) {\\n                // start = max(start, hashMap[letter]!! + 1)\\n                // why use max() ? \"abba\": if we take not max, then when visiting second \\'a\\' ->\\n                // we\\'ll take b, but don\\'t need it as it\\'ll include duplicate\\n                start = hashMap[letter]!! + 1\\n                // +1 as we don\\'t need current that has duplication, but next letter after it\\n            }\\n            val (firstIdx: Int, secondIdx: Int) = longest\\n            \\n            if (secondIdx - firstIdx < i - start + 1) {\\n                longest = Pair<Int, Int>(start, i+1)\\n                // +1 is to include current last letter as otherwise it will be excluding\\n            }\\n            hashMap.put(letter, i)\\n        }\\n        val (firstIdx: Int, secondIdx: Int) = longest\\n        \\n        return secondIdx - firstIdx\\n    }\\n}\\n```\\n\\n```\\n```\\n\\n```\\n```\\n\\nThe best result for the code below is ***0ms / 13.17MB*** (beats 79.34% / 99.92%).\\n* *** Swift ***\\n\\n\\n```\\n\\nclass Solution {\\n    func lengthOfLongestSubstring(_ s: String) -> Int {\\n        guard !s.isEmpty else { return 0 }\\n        var len = 0, chars = [Character]()\\n        for c in s {\\n            if let idx = chars.firstIndex(of: c) {\\n                chars.removeSubrange(0...idx)\\n            }\\n            chars.append(c)\\n            len = max(len, chars.count)\\n        }\\n        return len\\n    }\\n}\\n\\n```\\n* O(N)\\n```\\nclass Solution {\\n    func lengthOfLongestSubstring(_ s: String) -> Int {\\n        var longest = 0, startIndex = 0\\n        var charMap: [Character: Int] = [:]\\n\\n        for (index, char) in s.enumerated() {\\n            if let foundIndex = charMap[char] {\\n                startIndex = max(foundIndex+1, startIndex)\\n            }\\n            longest = max(longest, index - startIndex + 1)\\n            charMap[char] = index\\n        }\\n        return longest\\n    }\\n}\\n```\\n\\n```\\n```\\n\\n```\\n```\\n\\nThe best result for the code below is ***0ms / 62.07MB*** (beats 99.99% / 99.99%).\\n* *** PHP ***\\n\\n\\n```\\n\\nclass Solution {\\n\\n/**\\n * @param String $s\\n * @return Integer\\n */\\nfunction lengthOfLongestSubstring($s) {\\n\\t$start = 0;    //current starting position of search\\n    $length = 0; //current max length of substring\\n    for($i = 0; $i < strlen($s); $i++){\\n        $char = $s[$i];\\n        if(isset($arr[$char]) && $arr[$char] >= $start){\\n            $start = $arr[$char] + 1;\\n        } elseif($i - $start === $length) {\\n            $length++;\\n        }\\n        $arr[$char] = $i;\\n    }\\n    return $length;\\n}\\n}\\n\\n```\\n\\n```\\nclass Solution {\\n\\n    /**\\n     * @param String $s\\n     * @return Integer\\n     */\\n    function lengthOfLongestSubstring($s) \\n    {\\n        if (strlen($s) === 0) return 0;\\n        if (strlen($s) === 1) return 1;\\n        \\n        $chars = str_split($s);\\n        \\n        $i = $j = $max = 0;\\n        $seen = [];\\n        \\n        while ($i < count($chars))\\n        {\\n            $c = $chars[$i];\\n           \\n            while (array_key_exists($c, $seen))\\n            {\\n                unset($seen[$chars[$j]]);\\n        \\t\\t$j++;\\n            }\\n            \\n            $seen[$chars[$i]] = true;\\n            \\n            $max = max($i - $j + 1, $max);\\n            $i++;\\n        }\\n        return $max;\\n    }\\n}\\n```\\n\\n```\\n```\\n\\n```\\n```\\n\\nThe best result for the code below is ***0ms / 1.17MB*** (beats 99.64% / 99.92%).\\n* *** C ***\\n\\n\\n```\\n\\nint lengthOfLongestSubstring(char * s){\\n    /*letter_map is to keep track if we saw this character in this substring*/\\n    int letter_map[128] = {0}, res = 0;\\n    char* start = s, *end = s;\\n    \\n    while (*end) {\\n        /* If we reached a letter we saw already - check max length and start a new substring*/\\n        if (letter_map[*end]) {\\n            res = (end - start > res) ? end - start : res;\\n            while (*start != *end) {\\n                letter_map[*start] = 0;\\n                start++;\\n            }\\n            start++;\\n            end++;\\n        }\\n        else {\\n            letter_map[*end] = 1;\\n            end++;\\n        }  \\n    }\\n    return end-start > res ? end-start : res;\\n}\\n\\n```\\n\\n```\\n```\\n\\n```\\n```\\n\\n***\"Open your eyes. Expect us.\" - \\uD835\\uDCD0\\uD835\\uDCF7\\uD835\\uDCF8\\uD835\\uDCF7\\uD835\\uDD02\\uD835\\uDCF6\\uD835\\uDCF8\\uD835\\uDCFE\\uD835\\uDCFC***\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Python3",
                    "C",
                    "JavaScript",
                    "Swift",
                    "Kotlin",
                    "PHP"
                ],
                "code": "```\\n```\n```\\n\\npublic int lengthOfLongestSubstring(String s) {\\n    int i = 0, j = 0, max = 0;\\n    Set<Character> set = new HashSet<>();\\n    \\n    while (j < s.length()) {\\n        if (!set.contains(s.charAt(j))) {\\n            set.add(s.charAt(j++));\\n            max = Math.max(max, set.size());\\n        } else {\\n            set.remove(s.charAt(i++));\\n        }\\n    }\\n    \\n    return max;\\n}\\n\\n```\n```\\n```\n```\\n```\n```\\nSliding window\\nWe use a dictionary to store the character as the key, the last appear index has been seen so far as value.\\nseen[charactor] = index\\n\\nmove the pointer when you met a repeated character in your window.\\n```\n```\\n\\nindext    0    1    2    3   4   5   6   7\\nstring    a    c    b    d   b   a   c   d\\n          ^                  ^\\n          |                  |\\n\\t\\tleft               right\\n\\t\\tseen = {a : 0, c : 1, b : 2, d: 3} \\n\\t\\t# case 1: seen[b] = 2, current window  is s[0:4] , \\n\\t\\t#        b is inside current window, seen[b] = 2 > left = 0. Move left pointer to seen[b] + 1 = 3\\n\\t\\tseen = {a : 0, c : 1, b : 4, d: 3} \\nindext    0    1    2    3   4   5   6   7\\nstring    a    c    b    d   b   a   c   d\\n\\t\\t\\t\\t\\t\\t ^   ^\\n\\t\\t\\t\\t\\t     |   |\\n\\t\\t\\t\\t      left  right\\t\\t\\nindext    0    1    2    3   4   5   6   7\\nstring    a    c    b    d   b   a   c   d\\n\\t\\t\\t\\t\\t     ^       ^\\n\\t\\t\\t\\t\\t     |       |\\n\\t\\t\\t\\t       left    right\\t\\t\\n\\t\\t# case 2: seen[a] = 0,which means a not in current window s[3:5] , since seen[a] = 0 < left = 3 \\n\\t\\t# we can keep moving right pointer.\\n\\n```\n```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        seen = {}\\n        l = 0\\n        output = 0\\n        for r in range(len(s)):\\n            \"\"\"\\n            If s[r] not in seen, we can keep increasing the window size by moving right pointer\\n            \"\"\"\\n            if s[r] not in seen:\\n                output = max(output,r-l+1)\\n            \"\"\"\\n            There are two cases if s[r] in seen:\\n            case1: s[r] is inside the current window, we need to change the window by moving left pointer to seen[s[r]] + 1.\\n            case2: s[r] is not inside the current window, we can keep increase the window\\n            \"\"\"\\n            else:\\n                if seen[s[r]] < l:\\n                    output = max(output,r-l+1)\\n                else:\\n                    l = seen[s[r]] + 1\\n            seen[s[r]] = r\\n        return output\\n```\n```\\n```\n```\\n```\n```\\n\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        \\n        //SLIDING WINDOW  - TIME COMPLEXITY O(2n)\\n        //                  SPACE COMPLEXITY O(m)   //size of array\\n        \\n        int store[256]={0}; //array to store the occurences of all the characters\\n        int l=0;    //left pointer\\n        int r=0;    //right pointer\\n        int ans=0;  //initializing the required length as 0\\n        \\n        while(r<s.length())     //iterate over the string till the right pointer reaches the end of the string \\n        {\\n            store[s[r]]++;      //increment the count of the character present in the right pointer \\n            \\n            while(store[s[r]]>1)    //if the occurence become more than 1 means the char is repeated\\n            { \\n                store[s[l]]--;   //reduce the occurence of temp as it might be present ahead also in the string\\n                l++;         //contraction of the present window till the occurence of the \\'t\\' char becomes 1\\n            }\\n            \\n            ans = max(ans,r-l+1);    //As the index starts from 0 , ans will be (right pointer-left pointer + 1)\\n            r++;        // now will increment the right pointer \\n        }\\n        return ans;\\n    }\\n};\\n\\n```\n```\\n```\n```\\n```\n```\\n\\nfunction lengthOfLongestSubstring(s) {\\n    const map = {};\\n    var left = 0;\\n    \\n    return s.split(\\'\\').reduce((max, v, i) => {\\n        left = map[v] >= left ? map[v] + 1 : left;\\n        map[v] = i;\\n        return Math.max(max, i - left + 1);\\n    }, 0);\\n}\\n\\n```\n```\\nTime Complexity = O(N)\\nSpace Complexity = O(N)\\n```\n```\\nvar lengthOfLongestSubstring = function(s) {\\n    // keeps track of the most recent index of each letter.\\n    const seen = new Map();\\n    // keeps track of the starting index of the current substring.\\n    let start = 0;\\n    // keeps track of the maximum substring length.\\n    let maxLen = 0;\\n    \\n    for(let i = 0; i < s.length; i++) {\\n        // if the current char was seen, move the start to (1 + the last index of this char)\\n        // max prevents moving backward, \\'start\\' can only move forward\\n        if(seen.has(s[i])) start = Math.max(seen.get(s[i]) + 1, start)\\n        seen.set(s[i], i);\\n        // maximum of the current substring length and maxLen\\n        maxLen = Math.max(i - start + 1, maxLen);\\n    } \\n    \\n    return maxLen;  \\n};\\n```\n```\\n```\n```\\n```\n```\\n\\nfun lengthOfLongestSubstring(s: String): Int {\\n    var maxLength = 0\\n    val queue = LinkedList<Char>()\\n    for (i in s.indices) {\\n        if (queue.isNotEmpty()) {\\n            when {\\n                queue.first == s[i] -> queue.poll()\\n                queue.last == s[i] -> queue.clear()\\n                queue.contains(s[i]) -> {\\n                    while (queue.isNotEmpty()) {\\n                        if (queue.poll() == s[i]) break\\n                    }\\n                }\\n            }\\n        }\\n\\n        maxLength = max(maxLength, queue.size+1)\\n        queue.offer(s[i])\\n    }\\n\\n    return maxLength\\n}\\n```\n```\\nimport kotlin.math.*\\n\\nclass Solution {\\n    private val hashMap = mutableMapOf<Char, Int>()\\n    private var longest = Pair<Int, Int>(0, 1)\\n    \\n    fun lengthOfLongestSubstring(s: String): Int {\\n        if (s.length == 0) {\\n            return 0\\n        }\\n        \\n        var start = 0\\n        \\n        for (i in 0 until s.length) {\\n            val letter = s[i]\\n            if (hashMap.containsKey(letter)) {\\n                // start = max(start, hashMap[letter]!! + 1)\\n                // why use max() ? \"abba\": if we take not max, then when visiting second \\'a\\' ->\\n                // we\\'ll take b, but don\\'t need it as it\\'ll include duplicate\\n                start = hashMap[letter]!! + 1\\n                // +1 as we don\\'t need current that has duplication, but next letter after it\\n            }\\n            val (firstIdx: Int, secondIdx: Int) = longest\\n            \\n            if (secondIdx - firstIdx < i - start + 1) {\\n                longest = Pair<Int, Int>(start, i+1)\\n                // +1 is to include current last letter as otherwise it will be excluding\\n            }\\n            hashMap.put(letter, i)\\n        }\\n        val (firstIdx: Int, secondIdx: Int) = longest\\n        \\n        return secondIdx - firstIdx\\n    }\\n}\\n```\n```\\n```\n```\\n```\n```\\n\\nclass Solution {\\n    func lengthOfLongestSubstring(_ s: String) -> Int {\\n        guard !s.isEmpty else { return 0 }\\n        var len = 0, chars = [Character]()\\n        for c in s {\\n            if let idx = chars.firstIndex(of: c) {\\n                chars.removeSubrange(0...idx)\\n            }\\n            chars.append(c)\\n            len = max(len, chars.count)\\n        }\\n        return len\\n    }\\n}\\n\\n```\n```\\nclass Solution {\\n    func lengthOfLongestSubstring(_ s: String) -> Int {\\n        var longest = 0, startIndex = 0\\n        var charMap: [Character: Int] = [:]\\n\\n        for (index, char) in s.enumerated() {\\n            if let foundIndex = charMap[char] {\\n                startIndex = max(foundIndex+1, startIndex)\\n            }\\n            longest = max(longest, index - startIndex + 1)\\n            charMap[char] = index\\n        }\\n        return longest\\n    }\\n}\\n```\n```\\n```\n```\\n```\n```\\n\\nclass Solution {\\n\\n/**\\n * @param String $s\\n * @return Integer\\n */\\nfunction lengthOfLongestSubstring($s) {\\n\\t$start = 0;    //current starting position of search\\n    $length = 0; //current max length of substring\\n    for($i = 0; $i < strlen($s); $i++){\\n        $char = $s[$i];\\n        if(isset($arr[$char]) && $arr[$char] >= $start){\\n            $start = $arr[$char] + 1;\\n        } elseif($i - $start === $length) {\\n            $length++;\\n        }\\n        $arr[$char] = $i;\\n    }\\n    return $length;\\n}\\n}\\n\\n```\n```\\nclass Solution {\\n\\n    /**\\n     * @param String $s\\n     * @return Integer\\n     */\\n    function lengthOfLongestSubstring($s) \\n    {\\n        if (strlen($s) === 0) return 0;\\n        if (strlen($s) === 1) return 1;\\n        \\n        $chars = str_split($s);\\n        \\n        $i = $j = $max = 0;\\n        $seen = [];\\n        \\n        while ($i < count($chars))\\n        {\\n            $c = $chars[$i];\\n           \\n            while (array_key_exists($c, $seen))\\n            {\\n                unset($seen[$chars[$j]]);\\n        \\t\\t$j++;\\n            }\\n            \\n            $seen[$chars[$i]] = true;\\n            \\n            $max = max($i - $j + 1, $max);\\n            $i++;\\n        }\\n        return $max;\\n    }\\n}\\n```\n```\\n```\n```\\n```\n```\\n\\nint lengthOfLongestSubstring(char * s){\\n    /*letter_map is to keep track if we saw this character in this substring*/\\n    int letter_map[128] = {0}, res = 0;\\n    char* start = s, *end = s;\\n    \\n    while (*end) {\\n        /* If we reached a letter we saw already - check max length and start a new substring*/\\n        if (letter_map[*end]) {\\n            res = (end - start > res) ? end - start : res;\\n            while (*start != *end) {\\n                letter_map[*start] = 0;\\n                start++;\\n            }\\n            start++;\\n            end++;\\n        }\\n        else {\\n            letter_map[*end] = 1;\\n            end++;\\n        }  \\n    }\\n    return end-start > res ? end-start : res;\\n}\\n\\n```\n```\\n```\n```\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1999842,
                "title": "100-fastest-solution-explained",
                "content": "Easy to understand and detailed step by step explanation with code for both brute force and optimal solution using sliding window technique, O(n) solution.\\n\\nhttps://www.code-recipe.com/post/longest-substring-without-repeating-characters\\n\\nLet me know in comments section if you have any doubts. I will be happy to answer.\\n\\n**Kindly upvote if this helps you.**",
                "solutionTags": [
                    "Go",
                    "Sliding Window"
                ],
                "code": "Easy to understand and detailed step by step explanation with code for both brute force and optimal solution using sliding window technique, O(n) solution.\\n\\nhttps://www.code-recipe.com/post/longest-substring-without-repeating-characters\\n\\nLet me know in comments section if you have any doubts. I will be happy to answer.\\n\\n**Kindly upvote if this helps you.**",
                "codeTag": "Unknown"
            },
            {
                "id": 1631240,
                "title": "simple-c-code-with-step-by-step-explanation-100-faster",
                "content": "#### Time complexity: O(N)\\n#### Space complexity: O(N)\\n```\\n    int lengthOfLongestSubstring(string s) {\\n        // Create a hash-map slide window.\\n        unordered_map<char,int> window;\\n        // Initialize the slide window. \\n        int left = 0, right = 0;\\n        // Record the result.\\n        int res = 0;\\n        while (right < s.size()) {\\n            char c = s[right];\\n            // Include c in the window.\\n            window[c]++;\\n            //check if c is already in the window\\n            while (window[c] > 1) {\\n                // Shrink the window from left side, to the point that there is no more repeating characters. \\n                char d = s[left];\\n                left ++;\\n                window[d] --;\\n            }\\n            // Expand the window from right side. \\n            right ++;\\n            // Make sure current res is the longest result. \\n            res = max(res, right - left);\\n        }\\n        return res;\\n    }\\n```\\n#### Please upvote if my post helped thx :D",
                "solutionTags": [
                    "C",
                    "Sliding Window"
                ],
                "code": "```\\n    int lengthOfLongestSubstring(string s) {\\n        // Create a hash-map slide window.\\n        unordered_map<char,int> window;\\n        // Initialize the slide window. \\n        int left = 0, right = 0;\\n        // Record the result.\\n        int res = 0;\\n        while (right < s.size()) {\\n            char c = s[right];\\n            // Include c in the window.\\n            window[c]++;\\n            //check if c is already in the window\\n            while (window[c] > 1) {\\n                // Shrink the window from left side, to the point that there is no more repeating characters. \\n                char d = s[left];\\n                left ++;\\n                window[d] --;\\n            }\\n            // Expand the window from right side. \\n            right ++;\\n            // Make sure current res is the longest result. \\n            res = max(res, right - left);\\n        }\\n        return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1324090,
                "title": "3-types-of-solution-in-c-1-bruteforce-2-twopointer-3-slidingwindow",
                "content": "//-------------------------------------BruteForce Approach O(n^2)-----------------------------------------------// \\n        \\n\\t\\tint res=0,len=0;\\n        for(int i=0;i<s.size();i++){\\n            len=0;vector<int> v(128,0);\\n            for(int j=i;j<s.size();j++){\\n                if(v[s[j]]==0){\\n                    len++;\\n                    v[s[j]]=1;   \\n                }\\n                else break;        \\n            }\\n             if(res<len) res=len;\\n        }\\n        return res;\\n\\n//-----------------------------------------Two Pointer Solution O(nlogn) Using map in cpp------------------------------//\\n  \\n        std::map<char,int> mp;\\n        int l=0,r=0,res=0,len=0;\\n        while(r>=l && r<s.size()){\\n            if( mp.find(s[r])==mp.end()){\\n                mp[s[r]]++;\\n                r++;\\n            }\\n            else if( mp.find(s[r])!=mp.end()){\\n                mp.erase(s[l]);\\n                l++;\\n            }\\n            len=r-l;\\n            if(res<len)\\n               res=len;\\n        }\\n    return res;\\n//-----------------------------------------Sliding Window Solution O(n) in cpp  --------------------------------------//\\n\\n        int freq[128] = {0}; \\n        int i=0, ans=0; \\n        for(int j=0;j<s.length();++j){\\n            ++freq[s[j]];\\n            while(freq[s[j]]>1) \\n                --freq[s[i++]];\\n            ans = max(ans,j-i+1);\\n        }\\n        return ans;\\n        \\n // Give a like If you found It helpfull........................................... Thanks.",
                "solutionTags": [],
                "code": "//-------------------------------------BruteForce Approach O(n^2)-----------------------------------------------// \\n        \\n\\t\\tint res=0,len=0;\\n        for(int i=0;i<s.size();i++){\\n            len=0;vector<int> v(128,0);\\n            for(int j=i;j<s.size();j++){\\n                if(v[s[j]]==0){\\n                    len++;\\n                    v[s[j]]=1;   \\n                }\\n                else break;        \\n            }\\n             if(res<len) res=len;\\n        }\\n        return res;\\n\\n//-----------------------------------------Two Pointer Solution O(nlogn) Using map in cpp------------------------------//\\n  \\n        std::map<char,int> mp;\\n        int l=0,r=0,res=0,len=0;\\n        while(r>=l && r<s.size()){\\n            if( mp.find(s[r])==mp.end()){\\n                mp[s[r]]++;\\n                r++;\\n            }\\n            else if( mp.find(s[r])!=mp.end()){\\n                mp.erase(s[l]);\\n                l++;\\n            }\\n            len=r-l;\\n            if(res<len)\\n               res=len;\\n        }\\n    return res;\\n//-----------------------------------------Sliding Window Solution O(n) in cpp  --------------------------------------//\\n\\n        int freq[128] = {0}; \\n        int i=0, ans=0; \\n        for(int j=0;j<s.length();++j){\\n            ++freq[s[j]];\\n            while(freq[s[j]]>1) \\n                --freq[s[i++]];\\n            ans = max(ans,j-i+1);\\n        }\\n        return ans;\\n        \\n // Give a like If you found It helpfull........................................... Thanks.",
                "codeTag": "Unknown"
            },
            {
                "id": 1124151,
                "title": "java-hashset-solution-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        \\n        int maxLen = 0;\\n        char str[] = s.toCharArray();\\n        \\n         for(int i=0;i<str.length;i++){\\n             Set<Character> set = new HashSet<>();\\n            for(int j=i;j<str.length;j++){\\n\\t\\t\\t\\n\\t\\t\\t// Set Property - It does not contain duplicates.\\n\\t\\t\\t//  If in set character added successfully it returns true\\n\\t\\t\\t// else it return false\\n\\t\\t\\t\\n\\t\\t\\t// if specific character is not present in set then it adds and return true\\n\\t\\t\\t// and character already present in set and we again try to add it return false\\n\\t\\t\\t\\n                if(set.add(str[j])){\\n                    maxLen = Math.max(maxLen,j-i+1);\\n                }else break;\\n            }\\n         }     \\n        \\n        return maxLen;\\n    }\\n    \\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        \\n        int maxLen = 0;\\n        char str[] = s.toCharArray();\\n        \\n         for(int i=0;i<str.length;i++){\\n             Set<Character> set = new HashSet<>();\\n            for(int j=i;j<str.length;j++){\\n\\t\\t\\t\\n\\t\\t\\t// Set Property - It does not contain duplicates.\\n\\t\\t\\t//  If in set character added successfully it returns true\\n\\t\\t\\t// else it return false\\n\\t\\t\\t\\n\\t\\t\\t// if specific character is not present in set then it adds and return true\\n\\t\\t\\t// and character already present in set and we again try to add it return false\\n\\t\\t\\t\\n                if(set.add(str[j])){\\n                    maxLen = Math.max(maxLen,j-i+1);\\n                }else break;\\n            }\\n         }     \\n        \\n        return maxLen;\\n    }\\n    \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 811812,
                "title": "python-3-sliding-window-technique",
                "content": "**Suggestions to make it better are always welcomed.**\\n\\nExplanation:\\n1. We keep increasing the end of window until we find unique elements in the string. Also, we\\'ll calculate the max_length of the window.\\n2. As soon as we encounter a repeated character, our start of the window should be after the first occurance of this character.\\n3. Example: pwwkew.\\n    Initially window_start = 0. At window_end = 2, we find that \"w\" is repeated.\\n    We need to skip the elements \"p\" & \"w\" and get a new window_start = mapping[s[window_end]] + 1.\\n\\tIf we encounter \"p\" later, our max condition in if block will know that i=0 needs to be ignored.\\n\\n```\\ndef lengthOfLongestSubstring(self, s: str) -> int:\\n\\tmax_length = 0\\n\\twindow_start = 0\\n\\tmapping = {}\\n\\t\\n\\tfor window_end in range(len(s)):\\n\\t\\tif s[window_end] in mapping:            \\n\\t\\t\\twindow_start = max(window_start, mapping[s[window_end]]+1)\\n\\t\\tmapping[s[window_end]] = window_end\\n\\t\\tmax_length = max(max_length, window_end - window_start + 1)                 \\n\\treturn max_length\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Sliding Window"
                ],
                "code": "```\\ndef lengthOfLongestSubstring(self, s: str) -> int:\\n\\tmax_length = 0\\n\\twindow_start = 0\\n\\tmapping = {}\\n\\t\\n\\tfor window_end in range(len(s)):\\n\\t\\tif s[window_end] in mapping:            \\n\\t\\t\\twindow_start = max(window_start, mapping[s[window_end]]+1)\\n\\t\\tmapping[s[window_end]] = window_end\\n\\t\\tmax_length = max(max_length, window_end - window_start + 1)                 \\n\\treturn max_length\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 791809,
                "title": "scanleft-scala-concise-solution-with-explanation",
                "content": "We would use scanLeft starting with initial value empty string(\"\")\\nNow we for Binary Operator op: (B, A) => B, we would provide substring function that would substring till it would find current character in previously calculated String, and we postfix the current character to current substring to start looking for further character.\\n```\\ndef lengthOfLongestSubstring(s: String): Int = {\\n\\ts.scanLeft(\"\")((currStr: String, currChar: Char) => \\n\\tcurrStr.substring(1 + currStr.indexOf(currChar)) + currChar)\\n\\t// Up to this point we would get vector like this\\n\\t// Vector(, a, ab, abc, bca, cab, abc, cb, b)\\n\\t// now if we take max of length would get the answer\\n\\t.map(_.length)\\n\\t.reduce(Math.max)\\n}\\n```",
                "solutionTags": [
                    "Scala"
                ],
                "code": "```\\ndef lengthOfLongestSubstring(s: String): Int = {\\n\\ts.scanLeft(\"\")((currStr: String, currChar: Char) => \\n\\tcurrStr.substring(1 + currStr.indexOf(currChar)) + currChar)\\n\\t// Up to this point we would get vector like this\\n\\t// Vector(, a, ab, abc, bca, cab, abc, cb, b)\\n\\t// now if we take max of length would get the answer\\n\\t.map(_.length)\\n\\t.reduce(Math.max)\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2166,
                "title": "dp-java-solution-o-n-time-complexity",
                "content": "    public int lengthOfLongestSubstring(String s) {\\n      if (s.length()==0) return 0;\\n         //keep a hashmap which stores the characters in string as keys and their positions as values\\n         HashMap<Character, Integer> map = new HashMap<Character, Integer>();\\n         int max=0;\\n         for (int i=0, j=0; i<s.length(); ++i){\\n               if (map.containsKey(s.charAt(i))){\\n     //if found in hashmap that value,then update j i.e pointer to the right of the same character last found.\\n                j = Math.max(j,map.get(s.charAt(i))+1);  \\n               }\\n    //else put in map and get max pointer update with the current longest string\\n              map.put(s.charAt(i),i);\\n              max = Math.max(max,i-j+1);\\n          }\\n    return max;\\n    }",
                "solutionTags": [],
                "code": "    public int lengthOfLongestSubstring(String s) {\\n      if (s.length()==0) return 0;\\n         //keep a hashmap which stores the characters in string as keys and their positions as values\\n         HashMap<Character, Integer> map = new HashMap<Character, Integer>();\\n         int max=0;\\n         for (int i=0, j=0; i<s.length(); ++i){\\n               if (map.containsKey(s.charAt(i))){\\n     //if found in hashmap that value,then update j i.e pointer to the right of the same character last found.\\n                j = Math.max(j,map.get(s.charAt(i))+1);  \\n               }\\n    //else put in map and get max pointer update with the current longest string\\n              map.put(s.charAt(i),i);\\n              max = Math.max(max,i-j+1);\\n          }\\n    return max;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3770711,
                "title": "best-solution-in-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) \\n    {\\n         int maxLength = 0;\\n        String currentSubstring = \"\";\\n\\n        for (int i = 0; i < s.length(); i++)\\n        {\\n            char c = s.charAt(i);\\n                if (currentSubstring.contains(String.valueOf(c)))\\n                {\\n                    maxLength = Math.max(maxLength , currentSubstring.length());\\n                    int index = currentSubstring.indexOf(c);\\n                    currentSubstring = currentSubstring.substring(index+1);\\n                }\\n\\n                currentSubstring += c;\\n\\n        }\\n\\n            maxLength = Math.max(maxLength , currentSubstring.length());\\n\\n\\n        return maxLength;\\n\\n\\n    }\\n}\\n```\\n\\n![e78315ef-8a9d-492b-9908-e3917f23eb31_1674946036.087042.jpeg](https://assets.leetcode.com/users/images/afd51eb8-b413-4687-b3b7-3097d11a6c1f_1689458385.4656458.jpeg)\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) \\n    {\\n         int maxLength = 0;\\n        String currentSubstring = \"\";\\n\\n        for (int i = 0; i < s.length(); i++)\\n        {\\n            char c = s.charAt(i);\\n                if (currentSubstring.contains(String.valueOf(c)))\\n                {\\n                    maxLength = Math.max(maxLength , currentSubstring.length());\\n                    int index = currentSubstring.indexOf(c);\\n                    currentSubstring = currentSubstring.substring(index+1);\\n                }\\n\\n                currentSubstring += c;\\n\\n        }\\n\\n            maxLength = Math.max(maxLength , currentSubstring.length());\\n\\n\\n        return maxLength;\\n\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3752766,
                "title": "python3-easy-sliding-window-technique",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        start=0\\n        count=0\\n        for end in range(1,len(s)+1):\\n            if len(set(s[start:end]))==len(s[start:end]):\\n                if (end-start+1)>count:\\n                    count=len(s[start:end])\\n            else:\\n                start+=1\\n        return(count)\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        start=0\\n        count=0\\n        for end in range(1,len(s)+1):\\n            if len(set(s[start:end]))==len(s[start:end]):\\n                if (end-start+1)>count:\\n                    count=len(s[start:end])\\n            else:\\n                start+=1\\n        return(count)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3276859,
                "title": "simple-c-algorithm",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nint lengthOfLongestSubstring(char * s){\\n    int n = strlen(s);\\n    int char_set[128];\\n    memset(char_set, 0, sizeof(char_set));\\n    int max_len = 0;\\n    char *start = s, *end = s;\\n    while (end < s + n) {\\n        if (char_set[*end] == 0) {\\n            char_set[*end] = 1;\\n            end++;\\n            if (end - start > max_len)\\n                max_len = end - start;\\n        } else {\\n            char_set[*start] = 0;\\n            start++;\\n        }\\n    }\\n    return max_len;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint lengthOfLongestSubstring(char * s){\\n    int n = strlen(s);\\n    int char_set[128];\\n    memset(char_set, 0, sizeof(char_set));\\n    int max_len = 0;\\n    char *start = s, *end = s;\\n    while (end < s + n) {\\n        if (char_set[*end] == 0) {\\n            char_set[*end] = 1;\\n            end++;\\n            if (end - start > max_len)\\n                max_len = end - start;\\n        } else {\\n            char_set[*start] = 0;\\n            start++;\\n        }\\n    }\\n    return max_len;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3244653,
                "title": "c-simple-code-using-constant-space-o-1-space-o-n-tc",
                "content": "# First Approach\\n- Using set stl.\\n- Time complexity: O(2*n)~O(n)\\n- Space complexity: O(n) \\n# Code\\n```\\nlass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        unordered_set<char> t;\\n        int m=0;\\n        int l=0,r=0;\\n        while(r<s.size())\\n        {\\n            //To eliminate the below loop for finding the index of \\n            //repeated character use the below approach by storing the\\n            //indicies using a vector or hasmap.\\n            while(t.find(s[r])!=t.end())\\n            {\\n                t.erase(s[l]);\\n                l++;\\n            }\\n            t.insert(s[r]);\\n            m=max(m,r-l+1);\\n            r++;\\n    \\n        }\\n        return m;\\n        \\n    }\\n};\\n```\\n\\n# Approach for optimization\\n- Using index array\\n\\n# Complexity\\n- Time complexity:  O(n) \\n- Space complexity: O(1) \\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        vector<int> m(256,-1);  //index array  \\n        int len=0;\\n\\n        int r=0,l=0;\\n        while(r<s.size())\\n        {\\n             if(m[s[r]]!=-1 and l<m[s[r]]+1)\\n            {\\n                l=m[s[r]]+1;         \\n            }\\n            m[s[r]]=r;\\n            len=max(len,r-l+1);\\n            r++;\\n        }\\n        return len;\\n        \\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "C",
                    "Array"
                ],
                "code": "```\\nlass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        unordered_set<char> t;\\n        int m=0;\\n        int l=0,r=0;\\n        while(r<s.size())\\n        {\\n            //To eliminate the below loop for finding the index of \\n            //repeated character use the below approach by storing the\\n            //indicies using a vector or hasmap.\\n            while(t.find(s[r])!=t.end())\\n            {\\n                t.erase(s[l]);\\n                l++;\\n            }\\n            t.insert(s[r]);\\n            m=max(m,r-l+1);\\n            r++;\\n    \\n        }\\n        return m;\\n        \\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        vector<int> m(256,-1);  //index array  \\n        int len=0;\\n\\n        int r=0,l=0;\\n        while(r<s.size())\\n        {\\n             if(m[s[r]]!=-1 and l<m[s[r]]+1)\\n            {\\n                l=m[s[r]]+1;         \\n            }\\n            m[s[r]]=r;\\n            len=max(len,r-l+1);\\n            r++;\\n        }\\n        return len;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3109154,
                "title": "super-easy-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        int start =0;\\n        int end =0;\\n        int Max =0;\\n        set<char> Set;\\n        while(start<s.length()){\\n            auto it=Set.find(s[start]);\\n            if(it==Set.end()){\\n                int l=start-end+1;\\n                Max=max(Max,l );\\n                 Set.insert(s[start]);\\n                \\n                start++;\\n               \\n            }else{\\n                Set.erase(s[end]);\\n                end++;\\n            }\\n        }\\n       \\n        return Max;\\n    }\\n    \\n};\\n```\\nPlease upvote to motivate me to write more solutions",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        int start =0;\\n        int end =0;\\n        int Max =0;\\n        set<char> Set;\\n        while(start<s.length()){\\n            auto it=Set.find(s[start]);\\n            if(it==Set.end()){\\n                int l=start-end+1;\\n                Max=max(Max,l );\\n                 Set.insert(s[start]);\\n                \\n                start++;\\n               \\n            }else{\\n                Set.erase(s[end]);\\n                end++;\\n            }\\n        }\\n       \\n        return Max;\\n    }\\n    \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2722515,
                "title": "c-4-ways-to-solve",
                "content": "**Approach 1:** Using unordered map - TC: O(N)  SC: O(N)  \\n\\n    //logic: \\n    1. Element not present in the window: Update max length\\n       (i)Element not +nt in map. \\n       (ii)Element +nt but not in our window.\\n       in both case, we\\'ll update the length.\\n       \\n    2. Element present in window : increment l to (previous index of element + 1) . // no need to update max length, as we\\'re decreasing window size.\\n\\n   ```\\n    int lengthOfLongestSubstring(string s) {\\n        unordered_map<char, int> m; //character map to index\\n        int maxi = 0, l = 0, r = 0;\\n        \\n        while (r < size(s)) {\\n            if (m.find(s[r]) == m.end() || m[s[r]] < l) //element not in window!\\n                maxi = max(maxi, r-l+1);\\n            else  l = m[s[r]] + 1;//element in window\\n            m[s[r++]] = r; //update element in map, and increment r;\\n        }\\n        return maxi;\\n    }\\n```\\n\\n**Approach 2:** using unordered set TC O(N) SC O(N)\\n\\n    int lengthOfLongestSubstring(string s) {\\n        unordered_set<char> st; //character map to index\\n        int maxi = 0, l = 0, r = 0;\\n        \\n        while (r < size(s))\\n        {\\n             \\n            if (st.find(s[r]) == st.end())//element not in window!\\n            {\\n                st.insert(s[r]);\\n                maxi = max(maxi, r-l+1);\\n                r++;\\n            }\\n            else \\n            {\\n                st.erase(s[l]);\\n                l++; //element in window\\n            }\\n        }\\n        return maxi;\\n    }\\n....\\n\\n[**Approach 3:** using frequency array TC O(N) SC O(128) @lightmark](https://leetcode.com/problems/longest-substring-without-repeating-characters/discuss/1737/C%2B%2B-code-in-9-lines)\\nneat solution but not that intuitive dry run!\\n\\n    int lengthOfLongestSubstring(string s) {\\n        vector<int> v(128, -1); //total char excluding extended ascii-128, including extended is 256 \\n        int maxi = 0, start = -1;\\n        \\n        for (int i = 0; i < s.size(); i++)\\n        {\\n            if(v[s[i]] > start)\\n                start = v[s[i]];\\n            v[s[i]] = i;\\n            maxi = max(maxi, i - start);\\n        }\\n        return maxi;\\n    }\\n**Approach 4:** More Intuitive Sliding Window! TC : O(N) SC: O(1) \\n    \\n    int lengthOfLongestSubstring(string s) {\\n        vector<int> a(128,-1);\\n        int maxi = 0, l = 0, r = 0;\\n        while (r < size(s))\\n        {\\n            if (a[s[r]] == -1 || a[s[r]] < l) //element not present in window \\n                maxi = max(maxi, r-l+1);\\n            else\\n                l = a[s[r]] + 1; //element present in window \\n            a[s[r++]] = r; //update char index \\n        }\\n        return maxi;\\n    }\\n\\t\\n\\t",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array",
                    "Sliding Window",
                    "Ordered Set"
                ],
                "code": "```\\n    int lengthOfLongestSubstring(string s) {\\n        unordered_map<char, int> m; //character map to index\\n        int maxi = 0, l = 0, r = 0;\\n        \\n        while (r < size(s)) {\\n            if (m.find(s[r]) == m.end() || m[s[r]] < l) //element not in window!\\n                maxi = max(maxi, r-l+1);\\n            else  l = m[s[r]] + 1;//element in window\\n            m[s[r++]] = r; //update element in map, and increment r;\\n        }\\n        return maxi;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2166571,
                "title": "python-sliding-window-thought-process",
                "content": "## Thought Process ##\\n**Questions**\\n- Should we account for empty input strings?\\n- What happens if we reset the start of our window to an index before our current start?\\n\\n**Insights**\\n- Using a sliding window, we can check if we\\'ve seen a character before in our current \"substring\". \\n\\t- If we haven\\'t, we should track it and continue to expand our window.\\n\\t- If we have, we need to reset the start of our window.\\n- We can use a hashmap to track our seen characters, and use this to determine when we adjust our sliding window.\\n- We can use a global length to track our longest substring. In other words, we only need to return a *length*, not the substring itself.\\n\\n**Approach**\\n- Define a global length, start/end pointers, and a dictionary to track our `character -> index` mappings.\\n- Use sliding window, and at each step:\\n\\t- Reset our start, if we\\'ve already seen this (end) character.\\n\\t- Update our maximum length.\\n\\t- Reset our mapping for end character to index.\\n\\t- Expand our window.\\n- Return our longest substring\\n\\n**Complexity**\\n```\\nTime: O(n), where n = # of chars in input string\\nSpace: O(n), where n = # of chars in input string\\n```\\n\\n## Solution ##\\n```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, str: str) -> int:\\n        # Handle empty input\\n        if not str:\\n            return 0\\n        \\n        # Define result, start/end pointers, hashmap for seen characters\\n        length = 1\\n        start = 0\\n        end = 0\\n        seen = {}\\n        \\n        # Iterate through string using sliding window technique\\n        while end < len(str):\\n            \\n            # You don\\'t have to do this, but slightly cleaner\\n            startChar = str[start]\\n            endChar = str[end]\\n            \\n            # If our end character has already been seen...\\n            if endChar in seen:\\n                # We should reset our start to the new end (+1), or the new start (if our last seen \"end\" char is before our current start)\\n                start = max(start, seen[endChar] + 1)\\n                \\n            # We set the length of our longest known substring w/out repeating characters\\n            length = max(length, end - start + 1)\\n                \\n            # We reset the index we\\'ve last seen end char at (or add it, if never seen before)\\n            seen[endChar] = end\\n                \\n            # Expand our window\\n            end += 1\\n        \\n        # Return our longest substring w/ no repeating characters\\n        return length\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Sliding Window"
                ],
                "code": "```\\nTime: O(n), where n = # of chars in input string\\nSpace: O(n), where n = # of chars in input string\\n```\n```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, str: str) -> int:\\n        # Handle empty input\\n        if not str:\\n            return 0\\n        \\n        # Define result, start/end pointers, hashmap for seen characters\\n        length = 1\\n        start = 0\\n        end = 0\\n        seen = {}\\n        \\n        # Iterate through string using sliding window technique\\n        while end < len(str):\\n            \\n            # You don\\'t have to do this, but slightly cleaner\\n            startChar = str[start]\\n            endChar = str[end]\\n            \\n            # If our end character has already been seen...\\n            if endChar in seen:\\n                # We should reset our start to the new end (+1), or the new start (if our last seen \"end\" char is before our current start)\\n                start = max(start, seen[endChar] + 1)\\n                \\n            # We set the length of our longest known substring w/out repeating characters\\n            length = max(length, end - start + 1)\\n                \\n            # We reset the index we\\'ve last seen end char at (or add it, if never seen before)\\n            seen[endChar] = end\\n                \\n            # Expand our window\\n            end += 1\\n        \\n        # Return our longest substring w/ no repeating characters\\n        return length\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2133005,
                "title": "rust-two-pointers-with-hashmap",
                "content": "I like the HashMap.insert function returning the old value :)\\n```rust\\nuse std::collections::HashMap;\\n\\nimpl Solution {\\n    pub fn length_of_longest_substring(s: String) -> i32 {\\n        let mut hash: HashMap<char, i32> = HashMap::new();\\n        let mut ans = 0;\\n        let mut lo = -1;\\n        for (hi, ch) in s.chars().enumerate() {\\n            if let Some(i) = hash.insert(ch, hi as i32) {\\n                lo = lo.max(i);\\n            }\\n            ans = ans.max(hi as i32 - lo);\\n        }\\n        ans\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust",
                    "Two Pointers"
                ],
                "code": "```rust\\nuse std::collections::HashMap;\\n\\nimpl Solution {\\n    pub fn length_of_longest_substring(s: String) -> i32 {\\n        let mut hash: HashMap<char, i32> = HashMap::new();\\n        let mut ans = 0;\\n        let mut lo = -1;\\n        for (hi, ch) in s.chars().enumerate() {\\n            if let Some(i) = hash.insert(ch, hi as i32) {\\n                lo = lo.max(i);\\n            }\\n            ans = ans.max(hi as i32 - lo);\\n        }\\n        ans\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2092917,
                "title": "c-easiest-approch-set-2-ptr-fully-explained-tc-o-n",
                "content": "1.If we find any element in a set and if it is not present in that then it indicates the last idx. \\nexample - [2, 3] now if we find(4) in this set then it gives me set.end() i.e 2 idx;\\n\\n2. Here, we take unordered_set to maintain current substring \\n\\n3. Now simply checking if element is not present in set we are just adding the element in set, and claculating the maximum length\\nex- \"abcabcbb\" now we add one by one \"a b c\" and claculate max length till now i.e 3;\\n\\n4.If element already exists in sub string we just deleting that element;\\nex \"abcabcbb\" now \"a b c\" already stored now if \\'a\\' arises  set becomes \"b c a\" and again calculate length..\\n\\n5. In the end just returning max length.\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        unordered_set <char> sub_strng;\\n        \\n        int i = 0, j = 0, n = s.size(), ans = 0;\\n        while(j < n)\\n        {\\n            if(sub_strng.find(s[j]) == sub_strng.end())\\n            {\\n                sub_strng.insert(s[j]);\\n                j++;\\n                ans = max(ans, j - i);\\n            }\\n            else\\n            {\\n                sub_strng.erase(s[i]);\\n                i++;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\nPlease UP VOTE if you like :)",
                "solutionTags": [
                    "C",
                    "Two Pointers",
                    "Ordered Set"
                ],
                "code": "class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        unordered_set <char> sub_strng;\\n        \\n        int i = 0, j = 0, n = s.size(), ans = 0;\\n        while(j < n)\\n        {\\n            if(sub_strng.find(s[j]) == sub_strng.end())\\n            {\\n                sub_strng.insert(s[j]);\\n                j++;\\n                ans = max(ans, j - i);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1953837,
                "title": "python-easiest-solution-with-explanation-92-68-faster-beg-to-adv-sliding-window",
                "content": "\\n```python\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        \\n        left = 0\\n        res = 0\\n        charSet = set() # taking set to have unique values.\\n        \\n        for right in range(len(s)):\\n            while s[right] in charSet: # if we are getting duplication character then we have to update our set.\\n                charSet.remove(s[left])\\n                left+=1\\n            charSet.add(s[right]) # once duplicate value is removed we are going to add right most element to the set\\n            res = max(res,right-left+1) # at this stage we are sure that we dont have any duplicate , so lets update the res variable now. \\n        return res  \\n```\\n\\n***Found helpful, Do upvote !!***",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Sliding Window"
                ],
                "code": "```python\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        \\n        left = 0\\n        res = 0\\n        charSet = set() # taking set to have unique values.\\n        \\n        for right in range(len(s)):\\n            while s[right] in charSet: # if we are getting duplication character then we have to update our set.\\n                charSet.remove(s[left])\\n                left+=1\\n            charSet.add(s[right]) # once duplicate value is removed we are going to add right most element to the set\\n            res = max(res,right-left+1) # at this stage we are sure that we dont have any duplicate , so lets update the res variable now. \\n        return res  \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1749616,
                "title": "solution-using-hashmap-in-c-with-full-explanation",
                "content": "\\n\\n> **If you\\u2019re interested in coding you can join my Discord Server, link in the comment section. Also if you find any mistake please let me know. Thank you!\\u2764\\uFE0F**\\n> \\n---\\n\\n## Explanation:\\n\\n### Solution 01\\n\\n- Solution using ***HashMap.***\\n- First, we took a map *mp* and initialize all characters with -1.`for(auto x:s) mp[x] = -1;`\\n- Then we took start to keep track the last position of a character, initialize with -1.\\n- if a character in map has a value greater than start that means it is already present in some previous index, so update start with the previous index value.\\n`if(mp[s[i]] > start) start = mp[s[i]];`\\n- We\\u2019ll update the character value in the map with the present index & calculate the maximum length by taking the maximum of ans and i-start, which indicates the last index to the current index where no character is repeating. `ans = max(ans, i-start)`\\n- **Time complexity:** O(n).\\n\\n---\\n\\n## Code:\\n\\n```cpp\\n//Solution 01:\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        int n = s.size();\\n        unordered_map<char, int> mp;\\n        for(auto x:s)\\n            mp[x] = -1;\\n        \\n        int i=0, start=-1, ans=0;\\n        while(i<n){\\n            if(mp[s[i]] > start)\\n                start = mp[s[i]];\\n            mp[s[i]] = i;\\n            ans = max(ans, i-start);\\n            i++;\\n        }\\n        return ans;\\n    }\\n};\\n```\\n\\n---\\n\\n> **Please upvote this solution**\\n>",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```cpp\\n//Solution 01:\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        int n = s.size();\\n        unordered_map<char, int> mp;\\n        for(auto x:s)\\n            mp[x] = -1;\\n        \\n        int i=0, start=-1, ans=0;\\n        while(i<n){\\n            if(mp[s[i]] > start)\\n                start = mp[s[i]];\\n            mp[s[i]] = i;\\n            ans = max(ans, i-start);\\n            i++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1678590,
                "title": "100-fastest-simple-solution-explained",
                "content": "Easy to understand and detailed step by step explanation with code for both brute force and optimal solution using sliding window technique, O(n) solution.\\n\\nhttps://www.code-recipe.com/post/longest-substring-without-repeating-characters\\n\\nLet me know in comments section if you have any doubts. I will be more than happy to answer.\\n\\nPlease do upvote if you found the solution useful. Thank You",
                "solutionTags": [
                    "Go",
                    "Sliding Window"
                ],
                "code": "Easy to understand and detailed step by step explanation with code for both brute force and optimal solution using sliding window technique, O(n) solution.\\n\\nhttps://www.code-recipe.com/post/longest-substring-without-repeating-characters\\n\\nLet me know in comments section if you have any doubts. I will be more than happy to answer.\\n\\nPlease do upvote if you found the solution useful. Thank You",
                "codeTag": "Unknown"
            },
            {
                "id": 1499836,
                "title": "c-sliding-window-cheat-sheet",
                "content": "See my latest update in repo [LeetCode](https://github.com/lzl124631x/LeetCode)\\n## Solution 1. Hash Map\\n\\n```cpp\\n// OJ: https://leetcode.com/problems/longest-substring-without-repeating-characters/\\n// Author: github.com/lzl124631x\\n// Time: O(N)\\n// Space: O(C) where C is the range of character set\\n// Ref: https://discuss.leetcode.com/topic/24739/c-code-in-9-lines\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        int ans = 0, start = -1;\\n        vector<int> m(128, -1);\\n        for (int i = 0; i < s.size(); ++i) {\\n            start = max(start, m[s[i]]);\\n            m[s[i]] = i;\\n            ans = max(ans, i - start);\\n        }\\n        return ans;\\n    }\\n};\\n```\\n\\n## Solution 2. Sliding Window\\n\\nCheck out \"[C++ Maximum Sliding Window Cheatsheet Template!](https://leetcode.com/problems/frequency-of-the-most-frequent-element/discuss/1175088/C%2B%2B-Maximum-Sliding-Window-Cheatsheet-Template!)\".\\n\\nShrinkable Sliding Window:\\n\\n```cpp\\n// OJ: https://leetcode.com/problems/longest-substring-without-repeating-characters/\\n// Author: github.com/lzl124631x\\n// Time: O(N)\\n// Space: O(C)\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        int i = 0, j = 0, N = s.size(), cnt[128] = {}, dup = 0, ans = 0;\\n        while (j < N) {\\n            dup += ++cnt[s[j++]] == 2;\\n            while (dup) dup -= --cnt[s[i++]] == 1;\\n            ans = max(ans, j - i);\\n        }\\n        return ans;\\n    }\\n};\\n```\\n\\nNon-shrinable Sliding Window:\\n\\n\\n```cpp\\n// OJ: https://leetcode.com/problems/longest-substring-without-repeating-characters/\\n// Author: github.com/lzl124631x\\n// Time: O(N)\\n// Space: O(C)\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        int i = 0, j = 0, N = s.size(), cnt[128] = {}, dup = 0;\\n        while (j < N) {\\n            dup += ++cnt[s[j++]] == 2;\\n            if (dup) dup -= --cnt[s[i++]] == 1;\\n        }\\n        return j - i;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```cpp\\n// OJ: https://leetcode.com/problems/longest-substring-without-repeating-characters/\\n// Author: github.com/lzl124631x\\n// Time: O(N)\\n// Space: O(C) where C is the range of character set\\n// Ref: https://discuss.leetcode.com/topic/24739/c-code-in-9-lines\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        int ans = 0, start = -1;\\n        vector<int> m(128, -1);\\n        for (int i = 0; i < s.size(); ++i) {\\n            start = max(start, m[s[i]]);\\n            m[s[i]] = i;\\n            ans = max(ans, i - start);\\n        }\\n        return ans;\\n    }\\n};\\n```\n```cpp\\n// OJ: https://leetcode.com/problems/longest-substring-without-repeating-characters/\\n// Author: github.com/lzl124631x\\n// Time: O(N)\\n// Space: O(C)\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        int i = 0, j = 0, N = s.size(), cnt[128] = {}, dup = 0, ans = 0;\\n        while (j < N) {\\n            dup += ++cnt[s[j++]] == 2;\\n            while (dup) dup -= --cnt[s[i++]] == 1;\\n            ans = max(ans, j - i);\\n        }\\n        return ans;\\n    }\\n};\\n```\n```cpp\\n// OJ: https://leetcode.com/problems/longest-substring-without-repeating-characters/\\n// Author: github.com/lzl124631x\\n// Time: O(N)\\n// Space: O(C)\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        int i = 0, j = 0, N = s.size(), cnt[128] = {}, dup = 0;\\n        while (j < N) {\\n            dup += ++cnt[s[j++]] == 2;\\n            if (dup) dup -= --cnt[s[i++]] == 1;\\n        }\\n        return j - i;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1460891,
                "title": "simple-javascript-solution-97-52",
                "content": "Runtime: 88 ms, faster than 97.52% of JavaScript online submissions for Longest Substring Without Repeating Characters.\\n\\nMemory Usage: 44.3 MB, less than 61.34% of JavaScript online submissions for Longest Substring Without Repeating Characters.\\n\\n```\\nvar lengthOfLongestSubstring = function(s) {\\n  let best = \\'\\';\\n  let curr = \\'\\';\\n  \\n  for(let i = 0; i < s.length; i++){\\n    let char = s[i];\\n    let index = curr.indexOf(char);\\n    \\n    if(index !== -1){\\n      if(curr.length > best.length) best = curr;\\n      curr = curr.substr(index+1) + char;\\n    }else{\\n      curr += char;\\n    }\\n  }\\n  \\n  if(curr.length > best.length) best = curr;\\n  return best.length;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar lengthOfLongestSubstring = function(s) {\\n  let best = \\'\\';\\n  let curr = \\'\\';\\n  \\n  for(let i = 0; i < s.length; i++){\\n    let char = s[i];\\n    let index = curr.indexOf(char);\\n    \\n    if(index !== -1){\\n      if(curr.length > best.length) best = curr;\\n      curr = curr.substr(index+1) + char;\\n    }else{\\n      curr += char;\\n    }\\n  }\\n  \\n  if(curr.length > best.length) best = curr;\\n  return best.length;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1431722,
                "title": "python-easy-solution-using-hashmap",
                "content": "```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        if s is None:\\n            return 0\\n\\n        if len(s) <= 1:\\n            return len(s)\\n\\n        charMap = dict()\\n        start = 0\\n        longest = 0\\n        \\n        for i,c in enumerate(s):\\n            if c in charMap:\\n                start = max(start, charMap[c]+1)\\n            longest = max(longest, i-start+1)\\n            charMap[c] = i\\n        \\n        return longest\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        if s is None:\\n            return 0\\n\\n        if len(s) <= 1:\\n            return len(s)\\n\\n        charMap = dict()\\n        start = 0\\n        longest = 0\\n        \\n        for i,c in enumerate(s):\\n            if c in charMap:\\n                start = max(start, charMap[c]+1)\\n            longest = max(longest, i-start+1)\\n            charMap[c] = i\\n        \\n        return longest\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1325444,
                "title": "easiest-solution-python-3-fastest",
                "content": "```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        \\n\\t\\tstart = 0\\n\\t\\tend = 0\\n\\t\\tmax_len = 0\\n\\t\\td={}\\n\\t\\twhile end<len(s):\\n\\t\\t\\tif s[end]  in d and d[s[end]] >= start:\\n\\t\\t\\t\\tstart = d[s[end]]+1\\n\\t\\t\\tmax_len = max(max_len , end-start+1)\\n\\t\\t\\td[s[end]] = end\\n\\t\\t\\tend+=1\\n\\treturn(max_len)    \\n           \\n                 \\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        \\n\\t\\tstart = 0\\n\\t\\tend = 0\\n\\t\\tmax_len = 0\\n\\t\\td={}\\n\\t\\twhile end<len(s):\\n\\t\\t\\tif s[end]  in d and d[s[end]] >= start:\\n\\t\\t\\t\\tstart = d[s[end]]+1\\n\\t\\t\\tmax_len = max(max_len , end-start+1)\\n\\t\\t\\td[s[end]] = end\\n\\t\\t\\tend+=1\\n\\treturn(max_len)    \\n           \\n                 \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1006795,
                "title": "c-bitwise-with-without-sliding-window-compared-and-explained-100-time-90-space",
                "content": "A classic problem that I wanted to tackle with a fancier approach than usual, so I went for a bitwise approach, which would have been ideal with a more contained set of characters and ended up being a bit more painful than necessary having to support more than `64` (ie: 8 bytes worth) characters.\\n\\nTo proceed, we will declare a few variables:\\n* `res` will store our ongoing result, with the longest sequence found so far, initially set to `0`;\\n* `tmp` will store thee length of the currently parsed longest subsequence withut repetitions, preset to `0` as well;\\n* `mask1` and `mask2` are our bitmasks to keep track of the already seen characters - again assigned an initial value of `0`;\\n* `bit` and `base` will help us work on the bitmasks, updating them, with `base` being initialised to `1` and never changing its value from there.\\n\\nNotice that I declared all of them as `long long`, including `base` (to avoid having to convert `1` all the time), so that all in all we can use `64 + 64 == 128` bits worth of mask, more than enough for our current needs.\\n\\nWe will then iterate through `i` up to the end of the string, using also the temporary variable `c`. We will:\\n* to store the value of the current character in `c`;\\n* compute `bit` left-shifting `base` by a value always in the `0 - 63` range;\\n* check with our bitmasks if we already found that character and, in case, since it means we just finished a viable subsequence:\\n\\t* update `res` as the maximum between its current value and `tmp`;\\n\\t* reset `tmp`, `mask1` and `mask2` all to `0`;\\n\\t* backtrack. and reset `i` to be on the first previous occurrence of `c`;\\n* if instead it is the first time we are encountering it, we will:\\n\\t* increase `tmp` by `1`;\\n\\t* update either `mask1` or `mask2` with `bit`.\\n\\nOnce we are done, we will again compute the maximum between `res` and `tmp`, so to capture also sequences that included the very last character, and return it :)\\n\\nThe code:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        int res = 0, tmp = 0;\\n        long long mask1 = 0, mask2 = 0, bit, base = 1 ;\\n        for (int i = 0, lmt = s.size(), c; i < lmt; i++) {\\n            // updating c and bit\\n            c = s[i];\\n            bit = base << (c < 64 ? c : c - 64);\\n            // character already used\\n            if ((c < 64 ? mask1 : mask2) & bit) {\\n                res = max(res, tmp);\\n                tmp = mask1 = mask2 = 0;\\n                // backtracking i\\n                while (s[--i] != c);\\n            }\\n            // character not used before\\n            else {\\n                tmp++;\\n                (c < 64 ? mask1 : mask2) |= bit;\\n            }\\n        }\\n        return max(res, tmp);\\n    }\\n};\\n```\\n\\nNow, you might notice that with that backtracking logic we are going to potentially recompute a lot of the already parsed string and it is here that a 2 pointers approach shines.\\n\\nMost of the code is the same, but we will never completely reset `mask1` and `mask2`, instead we will just use 2 pointers `i` and `j` to delimit our substring, normally advancing with `j` until we find an already seen character, in which case we advance `i` right after the previous occurrence of the same character, erasing the matching bits in our bitmasks, but without redoing the same work twice: it is about 7-8 time faster, with basically the same memory consumption:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        int res = 0, tmp = 0;\\n        long long mask1 = 0, mask2 = 0, bit, base = 1 ;\\n        for (int i = 0, j = 0, lmt = s.size(), c; j < lmt; j++) {\\n            // updating c and bit\\n            c = s[j];\\n            bit = base << (c < 64 ? c : c - 64);\\n            // character already used\\n            if ((c < 64 ? mask1 : mask2) & bit) {\\n                res = max(res, tmp);\\n                // advancing i\\n                while (s[i] != c) {\\n                    (c < 64 ? mask1 : mask2) ^= base << (s[i] < 64 ? s[i] : s[i] - 64);\\n                    i++;\\n                };\\n                i++;\\n                tmp = j - i + 1;\\n            }\\n            // character not used before\\n            else {\\n                tmp++;\\n                (c < 64 ? mask1 : mask2) |= bit;\\n            }\\n        }\\n        return max(res, tmp);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Bit Manipulation",
                    "Bitmask"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        int res = 0, tmp = 0;\\n        long long mask1 = 0, mask2 = 0, bit, base = 1 ;\\n        for (int i = 0, lmt = s.size(), c; i < lmt; i++) {\\n            // updating c and bit\\n            c = s[i];\\n            bit = base << (c < 64 ? c : c - 64);\\n            // character already used\\n            if ((c < 64 ? mask1 : mask2) & bit) {\\n                res = max(res, tmp);\\n                tmp = mask1 = mask2 = 0;\\n                // backtracking i\\n                while (s[--i] != c);\\n            }\\n            // character not used before\\n            else {\\n                tmp++;\\n                (c < 64 ? mask1 : mask2) |= bit;\\n            }\\n        }\\n        return max(res, tmp);\\n    }\\n};\\n```\n```cpp\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        int res = 0, tmp = 0;\\n        long long mask1 = 0, mask2 = 0, bit, base = 1 ;\\n        for (int i = 0, j = 0, lmt = s.size(), c; j < lmt; j++) {\\n            // updating c and bit\\n            c = s[j];\\n            bit = base << (c < 64 ? c : c - 64);\\n            // character already used\\n            if ((c < 64 ? mask1 : mask2) & bit) {\\n                res = max(res, tmp);\\n                // advancing i\\n                while (s[i] != c) {\\n                    (c < 64 ? mask1 : mask2) ^= base << (s[i] < 64 ? s[i] : s[i] - 64);\\n                    i++;\\n                };\\n                i++;\\n                tmp = j - i + 1;\\n            }\\n            // character not used before\\n            else {\\n                tmp++;\\n                (c < 64 ? mask1 : mask2) |= bit;\\n            }\\n        }\\n        return max(res, tmp);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1006182,
                "title": "java-easy-to-understand-set-solution-o-n",
                "content": "if you like it pls upvote\\n\\nJAVA\\n```\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int r = 0;\\n        int l = 0;\\n        int res = 0;\\n        Set<Character> set = new HashSet<>();\\n        while(r < s.length()){\\n            if(set.contains(s.charAt(r))){\\n                set.remove(s.charAt(l++));\\n            }\\n            else{\\n                set.add(s.charAt(r++));\\n                res = Math.max(res,set.size());\\n            }\\n        }\\n        \\n        return res;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int r = 0;\\n        int l = 0;\\n        int res = 0;\\n        Set<Character> set = new HashSet<>();\\n        while(r < s.length()){\\n            if(set.contains(s.charAt(r))){\\n                set.remove(s.charAt(l++));\\n            }\\n            else{\\n                set.add(s.charAt(r++));\\n                res = Math.max(res,set.size());\\n            }\\n        }\\n        \\n        return res;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 268682,
                "title": "shortest-ruby-solution-6-lines",
                "content": "```ruby\\ndef length_of_longest_substring(s)\\n    return s.size if s.size < 2\\n    \\n    queue, hash = [], {}\\n    s.each_char.reduce(-Float::INFINITY) do |max, c|\\n        hash.delete(char = queue.shift) until queue.empty? || char.eql?(c) if hash.key?(c)\\n\\n        [max, (queue << hash[c] = c).size].max\\n    end\\nend\\n```\\n\\nRuntime: 72 ms, faster than 95.39% of Ruby online submissions for Longest Substring Without Repeating Characters.\\nMemory Usage: 9.6 MB, less than 89.47% of Ruby online submissions for Longest Substring Without Repeating Characters.\\n\\nRuby <3",
                "solutionTags": [
                    "Ruby",
                    "Hash Table"
                ],
                "code": "```ruby\\ndef length_of_longest_substring(s)\\n    return s.size if s.size < 2\\n    \\n    queue, hash = [], {}\\n    s.each_char.reduce(-Float::INFINITY) do |max, c|\\n        hash.delete(char = queue.shift) until queue.empty? || char.eql?(c) if hash.key?(c)\\n\\n        [max, (queue << hash[c] = c).size].max\\n    end\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 172957,
                "title": "javascript-solution-o-n-with-explanation",
                "content": "This is the version without using reduce:\\n```\\nvar lengthOfLongestSubstring = function(s) {\\n\\n   //create a hash table \\'map\\' to keep track of all the letters in the string and their most recent index\\n   //create currStart to keep track of the starting index of the current non-repeating substring\\n   //create a variable \\'max\\' to keep track of the max number of letters in the non-repeating substring\\n\\n    var map = {};\\n    var currStart = 0;\\n    var max = 0;\\n    \\n    for (var i = 0; i < s.length; i++) {\\n      //if the current letter s[i] is in the map already AND its value is bigger than currStart\\n      //that means this letter is already in the current substring\\n      //update the substring by moving its starting point currStart to one index after the current index map[s[i]]\\n        \\n\\tcurrStart = map[s[i]] >= currStart ? map[s[i]] + 1 : currStart;\\n\\t\\n      //need to update map[s[i]] to the new index value i\\n\\t\\t\\t\\n        map[s[i]] = i;\\n\\t\\t\\t\\t\\n      //recalculate the max number of non-repeating substring and update it if needed\\n\\t\\t\\t\\t\\n        max = i - currStart + 1 > max ? i - currStart + 1 : max;\\n    }\\n    \\n    return max;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nvar lengthOfLongestSubstring = function(s) {\\n\\n   //create a hash table \\'map\\' to keep track of all the letters in the string and their most recent index\\n   //create currStart to keep track of the starting index of the current non-repeating substring\\n   //create a variable \\'max\\' to keep track of the max number of letters in the non-repeating substring\\n\\n    var map = {};\\n    var currStart = 0;\\n    var max = 0;\\n    \\n    for (var i = 0; i < s.length; i++) {\\n      //if the current letter s[i] is in the map already AND its value is bigger than currStart\\n      //that means this letter is already in the current substring\\n      //update the substring by moving its starting point currStart to one index after the current index map[s[i]]\\n        \\n\\tcurrStart = map[s[i]] >= currStart ? map[s[i]] + 1 : currStart;\\n\\t\\n      //need to update map[s[i]] to the new index value i\\n\\t\\t\\t\\n        map[s[i]] = i;\\n\\t\\t\\t\\t\\n      //recalculate the max number of non-repeating substring and update it if needed\\n\\t\\t\\t\\t\\n        max = i - currStart + 1 > max ? i - currStart + 1 : max;\\n    }\\n    \\n    return max;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1807,
                "title": "8-lines-c-o-n",
                "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        unordered_map<char, int>m;\\n        int maxlen = 0;\\n        for(int i = 0, j = 0; j < s.size(); j++){\\n            m[s[j]]++;\\n            while(m[s[j]] > 1) m[s[i++]]--;\\n            maxlen = max(maxlen, j - i + 1);\\n        }\\n        return maxlen;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        unordered_map<char, int>m;\\n        int maxlen = 0;\\n        for(int i = 0, j = 0; j < s.size(); j++){\\n            m[s[j]]++;\\n            while(m[s[j]] > 1) m[s[i++]]--;\\n            maxlen = max(maxlen, j - i + 1);\\n        }\\n        return maxlen;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2171,
                "title": "two-c-solution-using-set-and-hashmap-different-perspective-with-detailed-explanation",
                "content": "**Solution 1**(Original): using a set to maintain a window (bounded by *l* and *r*) only contains distinct chars. When there is a new character, adds to set, and move *r* forward; when it's a character that already exists, move *l* forward right next to the previous inserted character as *s[r]*. This is my original solution, but may have some overheads when erasing elements from set. Just a different perspective.\\n\\n \\n\\n  \\n\\n    class Solution {\\n        public:\\n            int lengthOfLongestSubstring(string s) {\\n                if(s.size()<1) return s.size();\\n                int l=0, r=0, len=1;\\n                unordered_set<char> window;\\n                while(r<s.size()){\\n                    if(window.find(s[r])==window.end()){\\n                        window.insert(s[r++]);\\n                        len=max(len, r-l);\\n                    }else{\\n                        while(s[l]!=s[r]) window.erase(s[l++]);\\n                        l++;\\n                        r++;\\n                    }\\n                }\\n                return len;\\n            }\\n        };\\n\\n\\n**Solution 2**: thanks to this [post][1] by cbmbbz which is the most voted. The basic idea is, keep a hashmap which stores the characters in string as keys and their positions as values, and keep two pointers which define the potential max substring(*window* using my word). move the right pointer to scan through the string , and meanwhile update the hashmap. If the character is already in the hashmap, then move the left pointer to the right of the same character last found. Note that the two pointers can only move forward.\\n\\nTo understand *l=max(l,window[s[r]]+1)* is the key here:\\n\\nIf position of last found char same as s[*r*] is beyond *l*, which means the window will have two same chars s[*r*] now, so we need to move forward *l* to shrink the window. Otherwise, l stays the same. That's all what\\t says. Your feedback or any thought is welcome. I really learnt a lot from all you genius.\\n\\n***Example 1***  \"tmmzuxt\"\\n\\ns[*l*] is the 2nd \"m\", s[*r*] is the last \"t\", and the last found t is not in the current window, no need to update *l*.\\n\\n***Example 2*** \"mmzuxtabt\"\\n\\ns[*l*] is the 2nd m, s[*r*] is the last \"t\", and the last found \"t\" is in the current window, so move *l* forward to \"a\".\\n\\n\\n    class Solution {\\n    public:\\n        int lengthOfLongestSubstring(string s) {\\n            int l=0, r=0, len=0;\\n            unordered_map<char, int> window;\\n            while(r<s.size()){\\n                if(window.find(s[r])!=window.end())\\n                    l=max(l,window[s[r]]+1);      //see explain      \\n                window[s[r]]=r;\\n                len=max(len,r-l+1);\\n                r++;\\n            }\\n            return len;\\n        }\\n    };\\n\\n  [1]: https://leetcode.com/discuss/23883/11-line-simple-java-solution-o-n-with-explanation",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n        public:\\n            int lengthOfLongestSubstring(string s) {\\n                if(s.size()<1) return s.size();\\n                int l=0, r=0, len=1;\\n                unordered_set<char> window;\\n                while(r<s.size()){\\n                    if(window.find(s[r])==window.end()){\\n                        window.insert(s[r++]);\\n                        len=max(len, r-l);\\n                    }",
                "codeTag": "Java"
            },
            {
                "id": 2311,
                "title": "my-14-lines-python-o-n-solution",
                "content": "Please feel free to comment if you have any suggestion/question on my code. Thanks.\\n\\n    class Solution:\\n        # @param {string} s\\n        # @return {integer}\\n        def lengthOfLongestSubstring(self, s):\\n            start_pos = 0\\n            current_pos = -1    # consider blank string case\\n            max_length = 0\\n            char_pos = {}\\n            for current_pos in range(len(s)):\\n                if s[current_pos] in char_pos and char_pos[s[current_pos]] >= start_pos :\\n                    max_length = max(max_length, current_pos - start_pos)\\n                    start_pos = char_pos[s[current_pos]] + 1\\n                char_pos[s[current_pos]] = current_pos\\n            return max(max_length, current_pos - start_pos + 1)   # consider the no-repeat-char case and last-segment-is-the-longest case",
                "solutionTags": [
                    "Python"
                ],
                "code": "class Solution:\\n        # @param {string}",
                "codeTag": "Java"
            },
            {
                "id": 2427,
                "title": "my-accepted-o-n-java-solution",
                "content": "As soon as we see a duplicated character, calculate the length of the substring and start the search one character away from the previous start.\\n\\n    class Solution {\\n        public int lengthOfLongestSubstring(String s) {\\n            int n = s.length();\\n            if (n == 0) return 0;\\n            \\n            int start = 0;\\n            int max = 0;\\n            Map<Character, Integer> lastSeens = new HashMap<Character, Integer>();\\n            for (int i = 0; i < n; i++) {\\n                Integer lastSeen = lastSeens.get(s.charAt(i));\\n                \\n                if (lastSeen != null)  {\\n                    if (lastSeen >= start) {\\n                        max = Math.max(max, i - start);\\n                        start = lastSeen + 1;\\n                    }\\n                }\\n                lastSeens.put(s.charAt(i), i);\\n            }\\n            max = Math.max(max, n - start);\\n            \\n            return max;\\n        }\\n    }",
                "solutionTags": [],
                "code": "class Solution {\\n        public int lengthOfLongestSubstring(String s) {\\n            int n = s.length();\\n            if (n == 0) return 0;\\n            \\n            int start = 0;\\n            int max = 0;\\n            Map<Character, Integer> lastSeens = new HashMap<Character, Integer>();\\n            for (int i = 0; i < n; i++) {\\n                Integer lastSeen = lastSeens.get(s.charAt(i));\\n                \\n                if (lastSeen != null)  {\\n                    if (lastSeen >= start) {\\n                        max = Math.max(max, i - start);\\n                        start = lastSeen + 1;\\n                    }",
                "codeTag": "Java"
            },
            {
                "id": 3519066,
                "title": "simple-java-solution-using-stringbuilder-hashset",
                "content": "# Intuition\\n  Simply using HashSet & StringBuilder..\\n\\n# Approach\\nSimply iterating given string and if the character is unique means so there is no repitition so append in StringBuilder and also add the current character in HashSet..\\n\\nLets take one example-- String s = \"pwwekf\"\\n----------------------------------------------------------------------\\nSTEP-1: i=0 , s.charAt(0) = p \\nBoth StringBuilder and HashSet is empty simply append in StringBuilder\\nand in HashSet.\\n\\nSuppose name of StringBuilder is ans  HashSet is hset.\\n     \\n     ans   = \"p\"\\n     hset  = [p]\\n_____________________________________________________________________\\n\\nSTEP-2: i=1 , s.charAt(1) = w\\n w is also not present in HashSet so w is unique\\n Simply append in StringBuilder and HashSet..\\n\\n    \\n     ans   = \"pw\"\\n     hset  = [p,w]\\n______________________________________________________________________\\nSTEP-3: i=2 , s.charAt(2) = w\\nNow w repeats and w is also present in HashSet \\nfirst simply store the current length of StringBuilder\\n          max =Math.max(max,ans.length())\\n\\nNow then find index of w in StringBuilder  becouse we already append w  in step 2 in StringBuilder..\\nUse indexOf function and it returns the index then store in variable \\nsuppose  k = ans.indexOf(Character.toString(s.charAt(i))) = 1\\n         k = 1\\n\\nSince k!=0 ans k!=-1\\n      simply run a loop and delete character of StringBuilder and     from HashSet ..\\nAfter deletion simply append current character In HashSet and in StringBuilder.\\n\\n          ans = \"w\"\\n          hset = [w]      \\n--------------------------------------------------------------\\nStep-4: i=3 , s.charAt(3) = e\\ne is also not present in HashSet so so e is unique..\\nSimply append in StringBuilder and HashSet..\\n\\n     ans = \"we\"\\n     hset   = [w,e]\\n_____________________________________________________________________\\n\\nStep-4: i=4 , s.charAt(4) = k\\nk is also not present in HashSet so k is unique..\\nSimply append in StringBuilder and HashSet..\\n\\n     ans    = \"wek\"\\n     hset   = [w,e,k]\\n____________________________________________________________________\\n\\nStep-4: i=5 , s.charAt(5) = f\\nf is also not present in HashSet so f is unique\\nSimply append in StringBuilder and HashSet..\\n\\n     \\n     ans    = \"wekf\"\\n     hset   = [w,e,k,f]\\n______________________________________________________________________\\n \\nNow the String is over and in last find maxlength of StringBuilder\\nbecouse in last there is possibility of increase in length of StringBuilder.. \\nAlso this happens in this given string in max stored length is 2 and now StringBuilder length  is 4.\\nSo update max with new StringBuilder length.\\n\\nSimply return max.\\n\\n\\nIf you like the explanation please upvote.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:  O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n   \\n    public int lengthOfLongestSubstring(String s) {\\n        int max=0;\\n      //Declaring StringBuilder\\n        StringBuilder ans = new StringBuilder();\\n      //Declaring HashSet\\n        HashSet<Character> r = new HashSet<>();\\n      \\n\\n        for(int i=0;i<s.length();i++){\\n            if(r.contains(s.charAt(i))){\\n              max =Math.max(max,ans.length());\\n              int k = ans.indexOf(Character.toString(s.charAt(i)));\\n              if(ans.length()!=0 && k!=-1){\\n                   while(k>=0) {\\n                       r.remove(ans.charAt(k));\\n                       ans.deleteCharAt(k);\\n                       k--;\\n                    }\\n              }\\n                else{\\n                    ans.deleteCharAt(0);\\n                }\\n\\n            r.add(s.charAt(i));\\n            ans.append(s.charAt(i));\\n            }\\n            else{\\n                ans.append(s.charAt(i));\\n                r.add(s.charAt(i));\\n           \\n            }            \\n         }\\n       \\n        max = Math.max(max,ans.length());\\n        return max;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n   \\n    public int lengthOfLongestSubstring(String s) {\\n        int max=0;\\n      //Declaring StringBuilder\\n        StringBuilder ans = new StringBuilder();\\n      //Declaring HashSet\\n        HashSet<Character> r = new HashSet<>();\\n      \\n\\n        for(int i=0;i<s.length();i++){\\n            if(r.contains(s.charAt(i))){\\n              max =Math.max(max,ans.length());\\n              int k = ans.indexOf(Character.toString(s.charAt(i)));\\n              if(ans.length()!=0 && k!=-1){\\n                   while(k>=0) {\\n                       r.remove(ans.charAt(k));\\n                       ans.deleteCharAt(k);\\n                       k--;\\n                    }\\n              }\\n                else{\\n                    ans.deleteCharAt(0);\\n                }\\n\\n            r.add(s.charAt(i));\\n            ans.append(s.charAt(i));\\n            }\\n            else{\\n                ans.append(s.charAt(i));\\n                r.add(s.charAt(i));\\n           \\n            }            \\n         }\\n       \\n        max = Math.max(max,ans.length());\\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3485105,
                "title": "c-easy-soluton-best-easy-to-understand",
                "content": "class Solution {\\npublic:\\n\\n    int lengthOfLongestSubstring(string s) {\\n        \\n        set<char>m;\\n        int max = 0 ;\\n        int start = 0 ; \\n        int end = 0 ; \\n        while(start != s.size()){\\n            \\n            auto it = m.find(s[start]);\\n            if(it == m.end()){\\n                if(start-end+1 > max)\\n                     max = start-end+1;\\n                m.insert(s[start]);\\n                start++;\\n            }\\n            else {\\n               m.erase(s[end]);\\n                end++;\\n            }\\n        }\\n        return max;\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Ordered Set"
                ],
                "code": "class Solution {\\npublic:\\n\\n    int lengthOfLongestSubstring(string s) {\\n        \\n        set<char>m;\\n        int max = 0 ;\\n        int start = 0 ; \\n        int end = 0 ; \\n        while(start != s.size()){\\n            \\n            auto it = m.find(s[start]);\\n            if(it == m.end()){\\n                if(start-end+1 > max)\\n                     max = start-end+1;\\n                m.insert(s[start]);\\n                start++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3059556,
                "title": "optimal-solution-java-solution-6ms-easy-explanation",
                "content": "# Approach\\nUsing Hashmap and concept of Sliding Window.\\nSimply count the length until you find repeated element\\n- if the length between the repeated element is smaller or equal to count, than update your count to length between the repeated ones.\\ncount = i - arr.get(c) here i is current index of repeated element and arr.get(c) (Hashmap method) is index of repeated element before i.\\n*Note -- Always update the index of repeated element.*\\n-  or if it is larger, than simply do count++.\\n\\n# Time complexity:\\n- O(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int n = s.length();\\n        int count = 0;\\n        int ans = 0;\\n        HashMap<Character,Integer> arr = new HashMap<Character,Integer>();\\n        for(int i = 0; i < n; i++)\\n        {\\n            char c = s.charAt(i);\\n            if(arr.containsKey(c)){\\n                ans = (int)Math.max(count,ans);\\n                if(count >= i - arr.get(c))\\n                    count = i - arr.get(c) - 1; // -1 is applied beacuse by default count++ is happening in every iteration.                \\n            }\\n            arr.put(c,i);\\n            count++;\\n        }\\n        ans = (int)Math.max(count,ans);\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table",
                    "String",
                    "Sliding Window",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int n = s.length();\\n        int count = 0;\\n        int ans = 0;\\n        HashMap<Character,Integer> arr = new HashMap<Character,Integer>();\\n        for(int i = 0; i < n; i++)\\n        {\\n            char c = s.charAt(i);\\n            if(arr.containsKey(c)){\\n                ans = (int)Math.max(count,ans);\\n                if(count >= i - arr.get(c))\\n                    count = i - arr.get(c) - 1; // -1 is applied beacuse by default count++ is happening in every iteration.                \\n            }\\n            arr.put(c,i);\\n            count++;\\n        }\\n        ans = (int)Math.max(count,ans);\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2989526,
                "title": "c-java-python3-javascript-solutions-easy",
                "content": "See Code and Explanation :  **\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-3-longest-substring-without-repeating-characters-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-3-longest-substring-without-repeating-characters-solution-and-explanation-en/)\\u2B50**\\n\\n**Examples : C# - HashSet**\\n```\\npublic class Solution {\\n    public int LengthOfLongestSubstring(string s) {\\n        \\n        if(string.IsNullOrEmpty(s))\\n        {\\n            return 0;\\n        }\\n\\n        HashSet<char> hSet = new HashSet<char>();\\n        int max = 0;\\n        int i = 0;\\n        int j = 0;\\n        \\n        while(i<s.Length)\\n        {\\n            if(!hSet.Contains(s[i]))\\n            {\\n                hSet.Add(s[i]);\\n                i++;\\n                \\n            }\\n            else\\n            {\\n                max = Math.Max(max,hSet.Count);\\n                hSet.Remove(s[j]);\\n                j++;\\n            }\\n        }\\n        max = Math.Max(max,hSet.Count);\\n        return max;\\n        \\n    }\\n}\\n```\\n\\n**Examples : C# - Dictionary**\\n```\\npublic class Solution {\\n    public int LengthOfLongestSubstring(string s) {\\n        Dictionary<char,int> dict =   new Dictionary<char,int>();\\n        int max = 0;\\n        \\n        for (int i = 0;i < s.Length;i++)\\n        {\\n            char c = s[i];\\n            if (!dict.ContainsKey(c))\\n            {\\n                dict.Add(c, i);\\n                max = Math.Max(dict.Count, max);\\n            }\\n            else\\n            {\\n                i = dict[c] ;\\n                dict.Clear();\\n            }\\n        }\\n        return max;   \\n    }\\n}\\n```\\n\\n\\nIf you got any problem about the explanation or you need other programming language solution, please feel free to leave your comment.\\n\\n\\uD83E\\uDDE1See more problems solutions - **[Zyrastory - LeetCode Solution](https://zyrastory.com/en/category/coding-en/leetcode-en/)**\\n\\nThanks!",
                "solutionTags": [
                    "Java",
                    "Python3",
                    "C#",
                    "JavaScript"
                ],
                "code": "```\\npublic class Solution {\\n    public int LengthOfLongestSubstring(string s) {\\n        \\n        if(string.IsNullOrEmpty(s))\\n        {\\n            return 0;\\n        }\\n\\n        HashSet<char> hSet = new HashSet<char>();\\n        int max = 0;\\n        int i = 0;\\n        int j = 0;\\n        \\n        while(i<s.Length)\\n        {\\n            if(!hSet.Contains(s[i]))\\n            {\\n                hSet.Add(s[i]);\\n                i++;\\n                \\n            }\\n            else\\n            {\\n                max = Math.Max(max,hSet.Count);\\n                hSet.Remove(s[j]);\\n                j++;\\n            }\\n        }\\n        max = Math.Max(max,hSet.Count);\\n        return max;\\n        \\n    }\\n}\\n```\n```\\npublic class Solution {\\n    public int LengthOfLongestSubstring(string s) {\\n        Dictionary<char,int> dict =   new Dictionary<char,int>();\\n        int max = 0;\\n        \\n        for (int i = 0;i < s.Length;i++)\\n        {\\n            char c = s[i];\\n            if (!dict.ContainsKey(c))\\n            {\\n                dict.Add(c, i);\\n                max = Math.Max(dict.Count, max);\\n            }\\n            else\\n            {\\n                i = dict[c] ;\\n                dict.Clear();\\n            }\\n        }\\n        return max;   \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2519225,
                "title": "easy-understanding-c-code-for-beginners-sliding-window",
                "content": "This is a pretty typical sliding window question, and it can be easily tackled by using hashmap/vector. Basically the idea is to use a map or vector to **hold the count of the character**. The count can only be **exactly 1** as we cannot have repeated character in the longest substring.\\nIf the character count is 0, we expand our window by incrementing \\'right\\' index.\\nIf the character has appeared before (count>0), we narrow the window by incrementing \\'left\\' index.\\nThe variable \\'maxLen\\' is to hold the longest substring length, we compare it to the current substring length (right-left) then we will get the longest substring length in the end.\\n\\n\\n**Vector (faster):**\\n```\\nint lengthOfLongestSubstring(string s) {\\n\\t// initiate max length, left right pointer at 0\\n    int maxLen = 0, left = 0, right = 0;\\n\\t// initiate all character count at 0\\n    vector<int> count(256,0);\\n\\n\\t// continue looping until right pointer reached end\\n    while(right<s.size()){\\n\\t\\t// if the character hasn\\'t appeared in the substring before\\n        if(count[s[right]]==0){\\n            count[s[right]]++;  // increment to mark that it\\'s appeared\\n\\t\\t\\tright++;   // expand window\\n        } else {\\n            count[s[left]]=0;  // set the character at left as unvisited as it will be removed from the current substring\\n\\t\\t\\tleft++; // narrow the window\\n        }\\n\\t\\t// get the maximum length\\n        maxLen = max(maxLen, right-left);\\n    }\\n\\n    return maxLen;\\n}\\n```\\n**Hashmap:**\\n```\\nint lengthOfLongestSubstring(string s) {\\n\\tint maxLen = 0, left = 0, right = 0;\\n\\tunordered_map<char,int> map;\\n\\n\\twhile(right < s.size()){\\n\\t\\tif(map[s[right]] == 0){\\n\\t\\t\\tmap[s[right]]++;\\n\\t\\t\\tright++;\\n\\t\\t} else {\\n\\t\\t\\tmap[s[left]]=0;\\n\\t\\t\\tleft++;\\n\\t\\t}\\n\\t\\tmaxLen = max(maxLen, right-left);\\n\\t}\\n\\n\\treturn maxLen;\\n}\\n```\\n\\t\\nI know it\\'s a simple question and it probably doesn\\'t need to have such a verbose explanation. But I am still a beginner, so by writing out I make myself learnt again, and hope my explanation can help other beginners as well. Thank you.\\n\\n**Note: \"left\" and \"right\" variables can be better named as \"start\" and \"end\" (of the window), but I think you guys get the idea.**",
                "solutionTags": [
                    "C",
                    "Array",
                    "Sliding Window"
                ],
                "code": "```\\nint lengthOfLongestSubstring(string s) {\\n\\t// initiate max length, left right pointer at 0\\n    int maxLen = 0, left = 0, right = 0;\\n\\t// initiate all character count at 0\\n    vector<int> count(256,0);\\n\\n\\t// continue looping until right pointer reached end\\n    while(right<s.size()){\\n\\t\\t// if the character hasn\\'t appeared in the substring before\\n        if(count[s[right]]==0){\\n            count[s[right]]++;  // increment to mark that it\\'s appeared\\n\\t\\t\\tright++;   // expand window\\n        } else {\\n            count[s[left]]=0;  // set the character at left as unvisited as it will be removed from the current substring\\n\\t\\t\\tleft++; // narrow the window\\n        }\\n\\t\\t// get the maximum length\\n        maxLen = max(maxLen, right-left);\\n    }\\n\\n    return maxLen;\\n}\\n```\n```\\nint lengthOfLongestSubstring(string s) {\\n\\tint maxLen = 0, left = 0, right = 0;\\n\\tunordered_map<char,int> map;\\n\\n\\twhile(right < s.size()){\\n\\t\\tif(map[s[right]] == 0){\\n\\t\\t\\tmap[s[right]]++;\\n\\t\\t\\tright++;\\n\\t\\t} else {\\n\\t\\t\\tmap[s[left]]=0;\\n\\t\\t\\tleft++;\\n\\t\\t}\\n\\t\\tmaxLen = max(maxLen, right-left);\\n\\t}\\n\\n\\treturn maxLen;\\n}\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1869651,
                "content": [
                    {
                        "username": "ktranada1403",
                        "content": "Bruh who tf sat down and wrote 987 testcases. This is sacrilegious. Go touch grass. See the world out there gang. This is not it. "
                    },
                    {
                        "username": "malinkov",
                        "content": "[@Mohamed-Kallel](/Mohamed-Kallel)  same XD"
                    },
                    {
                        "username": "malinkov",
                        "content": "LOL XD hahahhah yap, see the world fam XD hahahah"
                    },
                    {
                        "username": "Mohamed-Kallel",
                        "content": "the real pain  is when you see that 986/987 testcases passed "
                    },
                    {
                        "username": "jnatc1",
                        "content": "On god bro."
                    },
                    {
                        "username": "ktranada1403",
                        "content": "[@Eddiea6987](/Eddiea6987) im clearly joking "
                    },
                    {
                        "username": "user0915S",
                        "content": "bro, had all the time in the world\\n"
                    },
                    {
                        "username": "Himanshu_kmr24",
                        "content": "[@Eddiea6987](/Eddiea6987) So the important thing is touching grass :p"
                    },
                    {
                        "username": "aidenscoding",
                        "content": "Indeed. This should be flagged as hard. What\\'s wrong with people"
                    },
                    {
                        "username": "overbound",
                        "content": "I needed this."
                    },
                    {
                        "username": "sprodaturu",
                        "content": "[@Eddiea6987](/Eddiea6987) XD"
                    },
                    {
                        "username": "Eddiea6987",
                        "content": "so you being a programmer you cant think of an automated way to write all the test cases? what makes you think someone typed each  one? The dude probably spent 5 min to write a script and then went outside and touched grass. "
                    },
                    {
                        "username": "jlbroughton",
                        "content": "\\uD83D\\uDE02"
                    },
                    {
                        "username": "candypop8724",
                        "content": "bro fr man, i thought i got them all but fucking 987? what even"
                    },
                    {
                        "username": "user3327Ub",
                        "content": "You should stop using these overused jokes..."
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@rucola](/rucola) I think it is reffering to compiler time, not exercises time!"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "fr this is insane"
                    },
                    {
                        "username": "rucola",
                        "content": "Do you know the time limit? I have tried different approaches with c#, but they all run into \"Time Limit Exceeded\" for testcase 987 "
                    },
                    {
                        "username": "michaelg02",
                        "content": "The wording of the question was unclear for me. Example 3 does cover this where \"wke\" was the longest not \"wkew\", but the wording of the question suggests that the substring can have multiple of the same character as long as it is not repeating.\\n\\n\"wkew\" would pass because the substring does not have two w\\'s in a row.\\n\\n*Instead of:\\nGiven a string, find the length of the longest substring without repeating characters.*\\n\\n*I think this is a better wording:\\nGiven a string, find the length of the longest substring without **duplicate** characters.*\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Belyua",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) congratulations, you solved the problem. On leetcode there is a special section for solved problems"
                    },
                    {
                        "username": "ricko34",
                        "content": "[@mayank-01](/mayank-01) i think \\'kew\\' can\\'t be part of substring \\n "
                    },
                    {
                        "username": "ricko34",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) u have a good shortened solution, but this is not the right place \\n"
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "final=[]\\ndef chack(word):\\n    w=\"\"\\n    \\n    for i in word:\\n        if i in w:\\n           return\\n        else:\\n            w+=i\\n    final.append(w)\\n    \\n            \\n\\narry=\"pwwkew\"\\nfor i in range(len(arry)):\\n    for j in range(i,len(arry)):\\n        v=arry[i:j+1]\\n        chack(v)\\nlength=[]\\nfor i in final:\\n    length.append(len(i))\\nbig=max(length)\\nfor i in final:\\n    if big==len(i):\\n        print(i)\\n        break\\n    "
                    },
                    {
                        "username": "sandeep-p",
                        "content": "May be the companies that asked this question expected the candidate to be unclear and discuss, before jumping over the code?"
                    },
                    {
                        "username": "Med__think",
                        "content": "[@mayank-01](/mayank-01)  it i just one of the examples the motive is to find the length of longest substring without repeating characters"
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "what does repeating means? Something that happens more than once. I dont think it is unprecise, im not english native and yet was able to understand. And Examples are there to extend the wording. "
                    },
                    {
                        "username": "mayank-01",
                        "content": "Yes, I agree with you, I am also confused in example 3 there are 2 substrings \\'wke\\' and \\'kew\\' of same length, so this should be mentioned like it can be multiple substrings with same length....."
                    },
                    {
                        "username": "technologyaddicted",
                        "content": "Given \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\nI do not understand that in the Example # 3, it mentions 'wke' as the longest substring. Why not \"kew\" selected as the longest one? Help here is much appreciated."
                    },
                    {
                        "username": "VladoBradi",
                        "content": "Both answers are correct \"wke\" and \"kew\" but probably they choose just one (the first one because of characters line) for correct answer. "
                    },
                    {
                        "username": "lipingm",
                        "content": "1, [], max=0;\n2,[p], max =1;\n3,[p,w], max =2;\n4,[w], max=2;\n5,[w,k], max=2;\n6,[w,k,e], max=3;\n7,[k,e], max=3\n8,end\nSo max=3"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "[@somavik99](/somavik99) pke is subsequence not substring"
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@somavik99](/somavik99) Because it has to be the first instance of a substring, you kind have to read in between the line in mean here, otherwise it could be argued why not kew too!"
                    },
                    {
                        "username": "mohittyagi",
                        "content": "[@somavik99](/somavik99) \"the longest substring without repeating characters\""
                    },
                    {
                        "username": "somavik99",
                        "content": "[@ignorant_ppp](/ignorant_ppp)  My question is why not \"pke\" its total unique value."
                    },
                    {
                        "username": "ignorant_ppp",
                        "content": "you are suppose to return the length not the string\\n"
                    },
                    {
                        "username": "kauntey1O1",
                        "content": "because we would get \"wke\" first and \"kew\" is as the same length as \"wke\""
                    },
                    {
                        "username": "gerryhd",
                        "content": "I don't think that's relevant to the end result as both would return the length of 3."
                    },
                    {
                        "username": "momoxsalameh",
                        "content": "Take it as the longest sequence of non-identical character in the string"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Salheen Bakhet](/technologyaddicted) \\nMost people will scan from left to right and the result \"wke\" will appear first, but if you are used to scanning from right to left (like the habit of writing arabic, japan, etc.) then \"kwe\" this time appeared first."
                    },
                    {
                        "username": "manmitta",
                        "content": "We always starts with left side of string and when you checked \"pwwkew\" .. \"wke\" comes first ."
                    },
                    {
                        "username": "pstrait",
                        "content": "It doesn\\'t matter which substring, you need to return an integer not a substring."
                    },
                    {
                        "username": "amirhassan032",
                        "content": "it can be kew but wke comes first thats why it is assumed as answer"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "kew is also longest substring for sure but we would have considered it if it was scanned earlier"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "when we are iterating from the beginning of the string the we found the max substring before then why would we update the previous value with upcoming value if it still has the same length substring"
                    },
                    {
                        "username": "nancychauhan99",
                        "content": "focus is on the max length achieved rather than the substring itself"
                    },
                    {
                        "username": "ooPo",
                        "content": "Do not try to use brute force to pass the problem."
                    },
                    {
                        "username": "close27",
                        "content": "my brute force got accepted. https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3747943/brute-force-easy-to-understand/"
                    },
                    {
                        "username": "Kromydas",
                        "content": "the problem is that you are not limited from a - z, and can have A-Z as well as 0-9 and other chracters. this is a good approach if you are only limited to a-z. It will solve all the test cases except 985 - 987.\n\nhere is my code which implements your approach:\n```\nclass Solution {\npublic:\n    bool isCharacterInString(const string& str, char ch) {\n        for (char c : str) {\n            if (c == ch) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    int lengthOfLongestSubstring(string s) {\n        int n = s.size();\n        int maxi = 0;\n        for (int i = 0; i < n; i++) {\n            int var = min(26, n - i);\n            for (int j = 0; j < var; j++) {\n                string str = s.substr(i, j + 1);\n                string temp = \"\";\n                bool good = true;\n                for (int k = 0; k < str.size(); k++) {\n                    if (isCharacterInString(temp, str[k])) {\n                        good = false;\n                        break;\n                    } else {\n                        temp += str[k];\n                    }\n                }\n                if (good) {\n                    maxi = max(maxi, (int)str.size());\n                } else {\n                    break;\n                }\n            }\n        }\n        return maxi;\n    }\n};\n```\nagain, note that this does not work for this problem. nice thinking though!\n\nthe way i did it is by using hash sets, which gives you 2 for loops with at worst O(n^2) time (which won't happen). It involves using ```for (int i = 0; i < n; i++) {for int j = i; j < n; j++}```. "
                    },
                    {
                        "username": "ranbir7",
                        "content": "[@cartesPerforees](/cartesPerforees) I used deque"
                    },
                    {
                        "username": "ranbir7",
                        "content": "I used deque"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Or please, do use brute force. Brute force works just fine if you take adavantage of the fact that you're working with a finite alphabet. You can scan through all substrings of all sizes up to  $\\alpha$ where $\\alpha$ is the size of your alphabet (cause no substring could be larger than the full alphabet without repeats). Even the brutest of brute force in $O(\\alpha^2n)$ is comfortably accepted.\nWhen you don't listen to random people telling you how to think or not to think, you sometimes find solutions they didn't anticipate ;)"
                    },
                    {
                        "username": "media_overdosed",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) because it\\'s slow af (especially python)"
                    },
                    {
                        "username": "Anson_W",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) In fact, it can be passed by using unordered_map. Less than 1s."
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t)  the length of test case is 5 * 10^4 , brute force is N^2 . TLE"
                    },
                    {
                        "username": "whyevenquestion1t",
                        "content": "why not?\\n"
                    },
                    {
                        "username": "anthonyhuang",
                        "content": "I have some problem understanding the problem, this test case \"dvdf \"says the output should be 3, while I suppose it should be 2.\\n\\n\"dv\" or \"df\" is what I think. It should be substring not subsequence like the question mentioned. Should it confined to \"Consistent String\"?\\n\\n"
                    },
                    {
                        "username": "tsashokstar27",
                        "content": "[@ricko34](/ricko34) Because of longest sub string length if we use the dv it will be 2. But we have vdf with length 3."
                    },
                    {
                        "username": "omaute260902",
                        "content": "the testcase is correct. the substring for this test case would be \\'vdf\\' and the answer therefore would be 3\\n"
                    },
                    {
                        "username": "ricko34",
                        "content": "absolutely,  i  don\\'t understand why \\'d\\' is ignored "
                    },
                    {
                        "username": "Shazamct",
                        "content": "output should be \\'vdf\\' i.e. 3\\n"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "swagiuli",
                        "content": "[@nrjsuthar](/nrjsuthar) yes"
                    },
                    {
                        "username": "nrjsuthar",
                        "content": "vdf is the longest subsequence right?\\n"
                    },
                    {
                        "username": "EloiVega",
                        "content": "the answer is \\'vdf\\' which is of length 3"
                    },
                    {
                        "username": "manavjoshi1107",
                        "content": "vdf have length 3\\n"
                    },
                    {
                        "username": "mkraghava007",
                        "content": "d v & f are different characters together, hence ig it\\'s considering them together"
                    },
                    {
                        "username": "damajsam93",
                        "content": "vfd ==>3 "
                    },
                    {
                        "username": "abhiram__devisetti",
                        "content": "vdf is answer"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "cause \"vdf\" is the longest substring in the given string"
                    },
                    {
                        "username": "9819497296",
                        "content": "dvdf is a string and and the longest substring should be vdf thats why the longest length of a substring should be 3 i hope you understand"
                    },
                    {
                        "username": "dmoriasi",
                        "content": "The longest string is \"vdf\" You basically start from index 1. to the end. "
                    },
                    {
                        "username": "codebadger",
                        "content": "\"vdf\" is a valid substring"
                    },
                    {
                        "username": "uakrongrad",
                        "content": "I think the task could be better explained by asking the tester to find the length of the longest non repeating set of continous characters in the string."
                    },
                    {
                        "username": "firezdog",
                        "content": "\"continuous characters in a string\" -- that is, a substring (as opposed to a subsequence)"
                    },
                    {
                        "username": "juansymontano",
                        "content": "True. I was wondering what they meant too. After realizing it\\u2019s just longest unique it was quite easy to code. "
                    },
                    {
                        "username": "sanyuktakate",
                        "content": "Did anyone get an error as - *\" is not a valid value of type string* for an input which was a string with space (\" \")?"
                    },
                    {
                        "username": "janis__",
                        "content": "If you\\'re encountering an error on LeetCode that says \" \" is not a valid value of type string, it\\'s likely not an issue with the code you provided. Instead, ensure that when you\\'re testing your function on LeetCode, you\\'re inputting the string with spaces correctly. In the test input box, instead of just entering a space, you should enter the string with double quotes, like \" \". This ensures LeetCode recognizes it as a valid string input."
                    },
                    {
                        "username": "chirag2239",
                        "content": "what to do for \" \"?\\nI am just copying all the characters to hash array. Space character index, 32, should be updated with the count."
                    },
                    {
                        "username": "piyushpandey6970",
                        "content": "[@Soham_Panchal](/Soham_Panchal) what to do for space\\n"
                    },
                    {
                        "username": "Qusai_issa",
                        "content": "\\' \\'"
                    },
                    {
                        "username": "M-Narendra",
                        "content": "no\\n"
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "Yes.\\n"
                    },
                    {
                        "username": "YASH_PARSANA",
                        "content": "**Please upvote if solution is useful**\\n\\nfull explanation of queation step by step solution brute force to optimal approach\\nExplained by googler\\n\\nhttps://youtu.be/qtVh-XEpsJo"
                    },
                    {
                        "username": "asfdg32",
                        "content": "It comes out to be wrong  when I submit my alg and tells me that it failed to process the input \"aa\" while I successfully get it right with the input \"aa\" in my local computer and the \"run code\" function in the website. Is it the website's bug? Or some differences between the \"run code\" and \"submit\" function exists. Or something is wrong with my code."
                    },
                    {
                        "username": "darrendsa06",
                        "content": "Im facing the same problem.\\n"
                    },
                    {
                        "username": "harshnayak580",
                        "content": "h\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for June, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/longest-substring-without-repeating-characters/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 3 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Sliding Window\n\n  \n**Approach 3:** Sliding Window Optimized\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1569707,
                "content": [
                    {
                        "username": "ktranada1403",
                        "content": "Bruh who tf sat down and wrote 987 testcases. This is sacrilegious. Go touch grass. See the world out there gang. This is not it. "
                    },
                    {
                        "username": "malinkov",
                        "content": "[@Mohamed-Kallel](/Mohamed-Kallel)  same XD"
                    },
                    {
                        "username": "malinkov",
                        "content": "LOL XD hahahhah yap, see the world fam XD hahahah"
                    },
                    {
                        "username": "Mohamed-Kallel",
                        "content": "the real pain  is when you see that 986/987 testcases passed "
                    },
                    {
                        "username": "jnatc1",
                        "content": "On god bro."
                    },
                    {
                        "username": "ktranada1403",
                        "content": "[@Eddiea6987](/Eddiea6987) im clearly joking "
                    },
                    {
                        "username": "user0915S",
                        "content": "bro, had all the time in the world\\n"
                    },
                    {
                        "username": "Himanshu_kmr24",
                        "content": "[@Eddiea6987](/Eddiea6987) So the important thing is touching grass :p"
                    },
                    {
                        "username": "aidenscoding",
                        "content": "Indeed. This should be flagged as hard. What\\'s wrong with people"
                    },
                    {
                        "username": "overbound",
                        "content": "I needed this."
                    },
                    {
                        "username": "sprodaturu",
                        "content": "[@Eddiea6987](/Eddiea6987) XD"
                    },
                    {
                        "username": "Eddiea6987",
                        "content": "so you being a programmer you cant think of an automated way to write all the test cases? what makes you think someone typed each  one? The dude probably spent 5 min to write a script and then went outside and touched grass. "
                    },
                    {
                        "username": "jlbroughton",
                        "content": "\\uD83D\\uDE02"
                    },
                    {
                        "username": "candypop8724",
                        "content": "bro fr man, i thought i got them all but fucking 987? what even"
                    },
                    {
                        "username": "user3327Ub",
                        "content": "You should stop using these overused jokes..."
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@rucola](/rucola) I think it is reffering to compiler time, not exercises time!"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "fr this is insane"
                    },
                    {
                        "username": "rucola",
                        "content": "Do you know the time limit? I have tried different approaches with c#, but they all run into \"Time Limit Exceeded\" for testcase 987 "
                    },
                    {
                        "username": "michaelg02",
                        "content": "The wording of the question was unclear for me. Example 3 does cover this where \"wke\" was the longest not \"wkew\", but the wording of the question suggests that the substring can have multiple of the same character as long as it is not repeating.\\n\\n\"wkew\" would pass because the substring does not have two w\\'s in a row.\\n\\n*Instead of:\\nGiven a string, find the length of the longest substring without repeating characters.*\\n\\n*I think this is a better wording:\\nGiven a string, find the length of the longest substring without **duplicate** characters.*\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Belyua",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) congratulations, you solved the problem. On leetcode there is a special section for solved problems"
                    },
                    {
                        "username": "ricko34",
                        "content": "[@mayank-01](/mayank-01) i think \\'kew\\' can\\'t be part of substring \\n "
                    },
                    {
                        "username": "ricko34",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) u have a good shortened solution, but this is not the right place \\n"
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "final=[]\\ndef chack(word):\\n    w=\"\"\\n    \\n    for i in word:\\n        if i in w:\\n           return\\n        else:\\n            w+=i\\n    final.append(w)\\n    \\n            \\n\\narry=\"pwwkew\"\\nfor i in range(len(arry)):\\n    for j in range(i,len(arry)):\\n        v=arry[i:j+1]\\n        chack(v)\\nlength=[]\\nfor i in final:\\n    length.append(len(i))\\nbig=max(length)\\nfor i in final:\\n    if big==len(i):\\n        print(i)\\n        break\\n    "
                    },
                    {
                        "username": "sandeep-p",
                        "content": "May be the companies that asked this question expected the candidate to be unclear and discuss, before jumping over the code?"
                    },
                    {
                        "username": "Med__think",
                        "content": "[@mayank-01](/mayank-01)  it i just one of the examples the motive is to find the length of longest substring without repeating characters"
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "what does repeating means? Something that happens more than once. I dont think it is unprecise, im not english native and yet was able to understand. And Examples are there to extend the wording. "
                    },
                    {
                        "username": "mayank-01",
                        "content": "Yes, I agree with you, I am also confused in example 3 there are 2 substrings \\'wke\\' and \\'kew\\' of same length, so this should be mentioned like it can be multiple substrings with same length....."
                    },
                    {
                        "username": "technologyaddicted",
                        "content": "Given \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\nI do not understand that in the Example # 3, it mentions 'wke' as the longest substring. Why not \"kew\" selected as the longest one? Help here is much appreciated."
                    },
                    {
                        "username": "VladoBradi",
                        "content": "Both answers are correct \"wke\" and \"kew\" but probably they choose just one (the first one because of characters line) for correct answer. "
                    },
                    {
                        "username": "lipingm",
                        "content": "1, [], max=0;\n2,[p], max =1;\n3,[p,w], max =2;\n4,[w], max=2;\n5,[w,k], max=2;\n6,[w,k,e], max=3;\n7,[k,e], max=3\n8,end\nSo max=3"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "[@somavik99](/somavik99) pke is subsequence not substring"
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@somavik99](/somavik99) Because it has to be the first instance of a substring, you kind have to read in between the line in mean here, otherwise it could be argued why not kew too!"
                    },
                    {
                        "username": "mohittyagi",
                        "content": "[@somavik99](/somavik99) \"the longest substring without repeating characters\""
                    },
                    {
                        "username": "somavik99",
                        "content": "[@ignorant_ppp](/ignorant_ppp)  My question is why not \"pke\" its total unique value."
                    },
                    {
                        "username": "ignorant_ppp",
                        "content": "you are suppose to return the length not the string\\n"
                    },
                    {
                        "username": "kauntey1O1",
                        "content": "because we would get \"wke\" first and \"kew\" is as the same length as \"wke\""
                    },
                    {
                        "username": "gerryhd",
                        "content": "I don't think that's relevant to the end result as both would return the length of 3."
                    },
                    {
                        "username": "momoxsalameh",
                        "content": "Take it as the longest sequence of non-identical character in the string"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Salheen Bakhet](/technologyaddicted) \\nMost people will scan from left to right and the result \"wke\" will appear first, but if you are used to scanning from right to left (like the habit of writing arabic, japan, etc.) then \"kwe\" this time appeared first."
                    },
                    {
                        "username": "manmitta",
                        "content": "We always starts with left side of string and when you checked \"pwwkew\" .. \"wke\" comes first ."
                    },
                    {
                        "username": "pstrait",
                        "content": "It doesn\\'t matter which substring, you need to return an integer not a substring."
                    },
                    {
                        "username": "amirhassan032",
                        "content": "it can be kew but wke comes first thats why it is assumed as answer"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "kew is also longest substring for sure but we would have considered it if it was scanned earlier"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "when we are iterating from the beginning of the string the we found the max substring before then why would we update the previous value with upcoming value if it still has the same length substring"
                    },
                    {
                        "username": "nancychauhan99",
                        "content": "focus is on the max length achieved rather than the substring itself"
                    },
                    {
                        "username": "ooPo",
                        "content": "Do not try to use brute force to pass the problem."
                    },
                    {
                        "username": "close27",
                        "content": "my brute force got accepted. https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3747943/brute-force-easy-to-understand/"
                    },
                    {
                        "username": "Kromydas",
                        "content": "the problem is that you are not limited from a - z, and can have A-Z as well as 0-9 and other chracters. this is a good approach if you are only limited to a-z. It will solve all the test cases except 985 - 987.\n\nhere is my code which implements your approach:\n```\nclass Solution {\npublic:\n    bool isCharacterInString(const string& str, char ch) {\n        for (char c : str) {\n            if (c == ch) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    int lengthOfLongestSubstring(string s) {\n        int n = s.size();\n        int maxi = 0;\n        for (int i = 0; i < n; i++) {\n            int var = min(26, n - i);\n            for (int j = 0; j < var; j++) {\n                string str = s.substr(i, j + 1);\n                string temp = \"\";\n                bool good = true;\n                for (int k = 0; k < str.size(); k++) {\n                    if (isCharacterInString(temp, str[k])) {\n                        good = false;\n                        break;\n                    } else {\n                        temp += str[k];\n                    }\n                }\n                if (good) {\n                    maxi = max(maxi, (int)str.size());\n                } else {\n                    break;\n                }\n            }\n        }\n        return maxi;\n    }\n};\n```\nagain, note that this does not work for this problem. nice thinking though!\n\nthe way i did it is by using hash sets, which gives you 2 for loops with at worst O(n^2) time (which won't happen). It involves using ```for (int i = 0; i < n; i++) {for int j = i; j < n; j++}```. "
                    },
                    {
                        "username": "ranbir7",
                        "content": "[@cartesPerforees](/cartesPerforees) I used deque"
                    },
                    {
                        "username": "ranbir7",
                        "content": "I used deque"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Or please, do use brute force. Brute force works just fine if you take adavantage of the fact that you're working with a finite alphabet. You can scan through all substrings of all sizes up to  $\\alpha$ where $\\alpha$ is the size of your alphabet (cause no substring could be larger than the full alphabet without repeats). Even the brutest of brute force in $O(\\alpha^2n)$ is comfortably accepted.\nWhen you don't listen to random people telling you how to think or not to think, you sometimes find solutions they didn't anticipate ;)"
                    },
                    {
                        "username": "media_overdosed",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) because it\\'s slow af (especially python)"
                    },
                    {
                        "username": "Anson_W",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) In fact, it can be passed by using unordered_map. Less than 1s."
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t)  the length of test case is 5 * 10^4 , brute force is N^2 . TLE"
                    },
                    {
                        "username": "whyevenquestion1t",
                        "content": "why not?\\n"
                    },
                    {
                        "username": "anthonyhuang",
                        "content": "I have some problem understanding the problem, this test case \"dvdf \"says the output should be 3, while I suppose it should be 2.\\n\\n\"dv\" or \"df\" is what I think. It should be substring not subsequence like the question mentioned. Should it confined to \"Consistent String\"?\\n\\n"
                    },
                    {
                        "username": "tsashokstar27",
                        "content": "[@ricko34](/ricko34) Because of longest sub string length if we use the dv it will be 2. But we have vdf with length 3."
                    },
                    {
                        "username": "omaute260902",
                        "content": "the testcase is correct. the substring for this test case would be \\'vdf\\' and the answer therefore would be 3\\n"
                    },
                    {
                        "username": "ricko34",
                        "content": "absolutely,  i  don\\'t understand why \\'d\\' is ignored "
                    },
                    {
                        "username": "Shazamct",
                        "content": "output should be \\'vdf\\' i.e. 3\\n"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "swagiuli",
                        "content": "[@nrjsuthar](/nrjsuthar) yes"
                    },
                    {
                        "username": "nrjsuthar",
                        "content": "vdf is the longest subsequence right?\\n"
                    },
                    {
                        "username": "EloiVega",
                        "content": "the answer is \\'vdf\\' which is of length 3"
                    },
                    {
                        "username": "manavjoshi1107",
                        "content": "vdf have length 3\\n"
                    },
                    {
                        "username": "mkraghava007",
                        "content": "d v & f are different characters together, hence ig it\\'s considering them together"
                    },
                    {
                        "username": "damajsam93",
                        "content": "vfd ==>3 "
                    },
                    {
                        "username": "abhiram__devisetti",
                        "content": "vdf is answer"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "cause \"vdf\" is the longest substring in the given string"
                    },
                    {
                        "username": "9819497296",
                        "content": "dvdf is a string and and the longest substring should be vdf thats why the longest length of a substring should be 3 i hope you understand"
                    },
                    {
                        "username": "dmoriasi",
                        "content": "The longest string is \"vdf\" You basically start from index 1. to the end. "
                    },
                    {
                        "username": "codebadger",
                        "content": "\"vdf\" is a valid substring"
                    },
                    {
                        "username": "uakrongrad",
                        "content": "I think the task could be better explained by asking the tester to find the length of the longest non repeating set of continous characters in the string."
                    },
                    {
                        "username": "firezdog",
                        "content": "\"continuous characters in a string\" -- that is, a substring (as opposed to a subsequence)"
                    },
                    {
                        "username": "juansymontano",
                        "content": "True. I was wondering what they meant too. After realizing it\\u2019s just longest unique it was quite easy to code. "
                    },
                    {
                        "username": "sanyuktakate",
                        "content": "Did anyone get an error as - *\" is not a valid value of type string* for an input which was a string with space (\" \")?"
                    },
                    {
                        "username": "janis__",
                        "content": "If you\\'re encountering an error on LeetCode that says \" \" is not a valid value of type string, it\\'s likely not an issue with the code you provided. Instead, ensure that when you\\'re testing your function on LeetCode, you\\'re inputting the string with spaces correctly. In the test input box, instead of just entering a space, you should enter the string with double quotes, like \" \". This ensures LeetCode recognizes it as a valid string input."
                    },
                    {
                        "username": "chirag2239",
                        "content": "what to do for \" \"?\\nI am just copying all the characters to hash array. Space character index, 32, should be updated with the count."
                    },
                    {
                        "username": "piyushpandey6970",
                        "content": "[@Soham_Panchal](/Soham_Panchal) what to do for space\\n"
                    },
                    {
                        "username": "Qusai_issa",
                        "content": "\\' \\'"
                    },
                    {
                        "username": "M-Narendra",
                        "content": "no\\n"
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "Yes.\\n"
                    },
                    {
                        "username": "YASH_PARSANA",
                        "content": "**Please upvote if solution is useful**\\n\\nfull explanation of queation step by step solution brute force to optimal approach\\nExplained by googler\\n\\nhttps://youtu.be/qtVh-XEpsJo"
                    },
                    {
                        "username": "asfdg32",
                        "content": "It comes out to be wrong  when I submit my alg and tells me that it failed to process the input \"aa\" while I successfully get it right with the input \"aa\" in my local computer and the \"run code\" function in the website. Is it the website's bug? Or some differences between the \"run code\" and \"submit\" function exists. Or something is wrong with my code."
                    },
                    {
                        "username": "darrendsa06",
                        "content": "Im facing the same problem.\\n"
                    },
                    {
                        "username": "harshnayak580",
                        "content": "h\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for June, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/longest-substring-without-repeating-characters/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 3 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Sliding Window\n\n  \n**Approach 3:** Sliding Window Optimized\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1565590,
                "content": [
                    {
                        "username": "ktranada1403",
                        "content": "Bruh who tf sat down and wrote 987 testcases. This is sacrilegious. Go touch grass. See the world out there gang. This is not it. "
                    },
                    {
                        "username": "malinkov",
                        "content": "[@Mohamed-Kallel](/Mohamed-Kallel)  same XD"
                    },
                    {
                        "username": "malinkov",
                        "content": "LOL XD hahahhah yap, see the world fam XD hahahah"
                    },
                    {
                        "username": "Mohamed-Kallel",
                        "content": "the real pain  is when you see that 986/987 testcases passed "
                    },
                    {
                        "username": "jnatc1",
                        "content": "On god bro."
                    },
                    {
                        "username": "ktranada1403",
                        "content": "[@Eddiea6987](/Eddiea6987) im clearly joking "
                    },
                    {
                        "username": "user0915S",
                        "content": "bro, had all the time in the world\\n"
                    },
                    {
                        "username": "Himanshu_kmr24",
                        "content": "[@Eddiea6987](/Eddiea6987) So the important thing is touching grass :p"
                    },
                    {
                        "username": "aidenscoding",
                        "content": "Indeed. This should be flagged as hard. What\\'s wrong with people"
                    },
                    {
                        "username": "overbound",
                        "content": "I needed this."
                    },
                    {
                        "username": "sprodaturu",
                        "content": "[@Eddiea6987](/Eddiea6987) XD"
                    },
                    {
                        "username": "Eddiea6987",
                        "content": "so you being a programmer you cant think of an automated way to write all the test cases? what makes you think someone typed each  one? The dude probably spent 5 min to write a script and then went outside and touched grass. "
                    },
                    {
                        "username": "jlbroughton",
                        "content": "\\uD83D\\uDE02"
                    },
                    {
                        "username": "candypop8724",
                        "content": "bro fr man, i thought i got them all but fucking 987? what even"
                    },
                    {
                        "username": "user3327Ub",
                        "content": "You should stop using these overused jokes..."
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@rucola](/rucola) I think it is reffering to compiler time, not exercises time!"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "fr this is insane"
                    },
                    {
                        "username": "rucola",
                        "content": "Do you know the time limit? I have tried different approaches with c#, but they all run into \"Time Limit Exceeded\" for testcase 987 "
                    },
                    {
                        "username": "michaelg02",
                        "content": "The wording of the question was unclear for me. Example 3 does cover this where \"wke\" was the longest not \"wkew\", but the wording of the question suggests that the substring can have multiple of the same character as long as it is not repeating.\\n\\n\"wkew\" would pass because the substring does not have two w\\'s in a row.\\n\\n*Instead of:\\nGiven a string, find the length of the longest substring without repeating characters.*\\n\\n*I think this is a better wording:\\nGiven a string, find the length of the longest substring without **duplicate** characters.*\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Belyua",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) congratulations, you solved the problem. On leetcode there is a special section for solved problems"
                    },
                    {
                        "username": "ricko34",
                        "content": "[@mayank-01](/mayank-01) i think \\'kew\\' can\\'t be part of substring \\n "
                    },
                    {
                        "username": "ricko34",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) u have a good shortened solution, but this is not the right place \\n"
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "final=[]\\ndef chack(word):\\n    w=\"\"\\n    \\n    for i in word:\\n        if i in w:\\n           return\\n        else:\\n            w+=i\\n    final.append(w)\\n    \\n            \\n\\narry=\"pwwkew\"\\nfor i in range(len(arry)):\\n    for j in range(i,len(arry)):\\n        v=arry[i:j+1]\\n        chack(v)\\nlength=[]\\nfor i in final:\\n    length.append(len(i))\\nbig=max(length)\\nfor i in final:\\n    if big==len(i):\\n        print(i)\\n        break\\n    "
                    },
                    {
                        "username": "sandeep-p",
                        "content": "May be the companies that asked this question expected the candidate to be unclear and discuss, before jumping over the code?"
                    },
                    {
                        "username": "Med__think",
                        "content": "[@mayank-01](/mayank-01)  it i just one of the examples the motive is to find the length of longest substring without repeating characters"
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "what does repeating means? Something that happens more than once. I dont think it is unprecise, im not english native and yet was able to understand. And Examples are there to extend the wording. "
                    },
                    {
                        "username": "mayank-01",
                        "content": "Yes, I agree with you, I am also confused in example 3 there are 2 substrings \\'wke\\' and \\'kew\\' of same length, so this should be mentioned like it can be multiple substrings with same length....."
                    },
                    {
                        "username": "technologyaddicted",
                        "content": "Given \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\nI do not understand that in the Example # 3, it mentions 'wke' as the longest substring. Why not \"kew\" selected as the longest one? Help here is much appreciated."
                    },
                    {
                        "username": "VladoBradi",
                        "content": "Both answers are correct \"wke\" and \"kew\" but probably they choose just one (the first one because of characters line) for correct answer. "
                    },
                    {
                        "username": "lipingm",
                        "content": "1, [], max=0;\n2,[p], max =1;\n3,[p,w], max =2;\n4,[w], max=2;\n5,[w,k], max=2;\n6,[w,k,e], max=3;\n7,[k,e], max=3\n8,end\nSo max=3"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "[@somavik99](/somavik99) pke is subsequence not substring"
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@somavik99](/somavik99) Because it has to be the first instance of a substring, you kind have to read in between the line in mean here, otherwise it could be argued why not kew too!"
                    },
                    {
                        "username": "mohittyagi",
                        "content": "[@somavik99](/somavik99) \"the longest substring without repeating characters\""
                    },
                    {
                        "username": "somavik99",
                        "content": "[@ignorant_ppp](/ignorant_ppp)  My question is why not \"pke\" its total unique value."
                    },
                    {
                        "username": "ignorant_ppp",
                        "content": "you are suppose to return the length not the string\\n"
                    },
                    {
                        "username": "kauntey1O1",
                        "content": "because we would get \"wke\" first and \"kew\" is as the same length as \"wke\""
                    },
                    {
                        "username": "gerryhd",
                        "content": "I don't think that's relevant to the end result as both would return the length of 3."
                    },
                    {
                        "username": "momoxsalameh",
                        "content": "Take it as the longest sequence of non-identical character in the string"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Salheen Bakhet](/technologyaddicted) \\nMost people will scan from left to right and the result \"wke\" will appear first, but if you are used to scanning from right to left (like the habit of writing arabic, japan, etc.) then \"kwe\" this time appeared first."
                    },
                    {
                        "username": "manmitta",
                        "content": "We always starts with left side of string and when you checked \"pwwkew\" .. \"wke\" comes first ."
                    },
                    {
                        "username": "pstrait",
                        "content": "It doesn\\'t matter which substring, you need to return an integer not a substring."
                    },
                    {
                        "username": "amirhassan032",
                        "content": "it can be kew but wke comes first thats why it is assumed as answer"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "kew is also longest substring for sure but we would have considered it if it was scanned earlier"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "when we are iterating from the beginning of the string the we found the max substring before then why would we update the previous value with upcoming value if it still has the same length substring"
                    },
                    {
                        "username": "nancychauhan99",
                        "content": "focus is on the max length achieved rather than the substring itself"
                    },
                    {
                        "username": "ooPo",
                        "content": "Do not try to use brute force to pass the problem."
                    },
                    {
                        "username": "close27",
                        "content": "my brute force got accepted. https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3747943/brute-force-easy-to-understand/"
                    },
                    {
                        "username": "Kromydas",
                        "content": "the problem is that you are not limited from a - z, and can have A-Z as well as 0-9 and other chracters. this is a good approach if you are only limited to a-z. It will solve all the test cases except 985 - 987.\n\nhere is my code which implements your approach:\n```\nclass Solution {\npublic:\n    bool isCharacterInString(const string& str, char ch) {\n        for (char c : str) {\n            if (c == ch) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    int lengthOfLongestSubstring(string s) {\n        int n = s.size();\n        int maxi = 0;\n        for (int i = 0; i < n; i++) {\n            int var = min(26, n - i);\n            for (int j = 0; j < var; j++) {\n                string str = s.substr(i, j + 1);\n                string temp = \"\";\n                bool good = true;\n                for (int k = 0; k < str.size(); k++) {\n                    if (isCharacterInString(temp, str[k])) {\n                        good = false;\n                        break;\n                    } else {\n                        temp += str[k];\n                    }\n                }\n                if (good) {\n                    maxi = max(maxi, (int)str.size());\n                } else {\n                    break;\n                }\n            }\n        }\n        return maxi;\n    }\n};\n```\nagain, note that this does not work for this problem. nice thinking though!\n\nthe way i did it is by using hash sets, which gives you 2 for loops with at worst O(n^2) time (which won't happen). It involves using ```for (int i = 0; i < n; i++) {for int j = i; j < n; j++}```. "
                    },
                    {
                        "username": "ranbir7",
                        "content": "[@cartesPerforees](/cartesPerforees) I used deque"
                    },
                    {
                        "username": "ranbir7",
                        "content": "I used deque"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Or please, do use brute force. Brute force works just fine if you take adavantage of the fact that you're working with a finite alphabet. You can scan through all substrings of all sizes up to  $\\alpha$ where $\\alpha$ is the size of your alphabet (cause no substring could be larger than the full alphabet without repeats). Even the brutest of brute force in $O(\\alpha^2n)$ is comfortably accepted.\nWhen you don't listen to random people telling you how to think or not to think, you sometimes find solutions they didn't anticipate ;)"
                    },
                    {
                        "username": "media_overdosed",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) because it\\'s slow af (especially python)"
                    },
                    {
                        "username": "Anson_W",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) In fact, it can be passed by using unordered_map. Less than 1s."
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t)  the length of test case is 5 * 10^4 , brute force is N^2 . TLE"
                    },
                    {
                        "username": "whyevenquestion1t",
                        "content": "why not?\\n"
                    },
                    {
                        "username": "anthonyhuang",
                        "content": "I have some problem understanding the problem, this test case \"dvdf \"says the output should be 3, while I suppose it should be 2.\\n\\n\"dv\" or \"df\" is what I think. It should be substring not subsequence like the question mentioned. Should it confined to \"Consistent String\"?\\n\\n"
                    },
                    {
                        "username": "tsashokstar27",
                        "content": "[@ricko34](/ricko34) Because of longest sub string length if we use the dv it will be 2. But we have vdf with length 3."
                    },
                    {
                        "username": "omaute260902",
                        "content": "the testcase is correct. the substring for this test case would be \\'vdf\\' and the answer therefore would be 3\\n"
                    },
                    {
                        "username": "ricko34",
                        "content": "absolutely,  i  don\\'t understand why \\'d\\' is ignored "
                    },
                    {
                        "username": "Shazamct",
                        "content": "output should be \\'vdf\\' i.e. 3\\n"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "swagiuli",
                        "content": "[@nrjsuthar](/nrjsuthar) yes"
                    },
                    {
                        "username": "nrjsuthar",
                        "content": "vdf is the longest subsequence right?\\n"
                    },
                    {
                        "username": "EloiVega",
                        "content": "the answer is \\'vdf\\' which is of length 3"
                    },
                    {
                        "username": "manavjoshi1107",
                        "content": "vdf have length 3\\n"
                    },
                    {
                        "username": "mkraghava007",
                        "content": "d v & f are different characters together, hence ig it\\'s considering them together"
                    },
                    {
                        "username": "damajsam93",
                        "content": "vfd ==>3 "
                    },
                    {
                        "username": "abhiram__devisetti",
                        "content": "vdf is answer"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "cause \"vdf\" is the longest substring in the given string"
                    },
                    {
                        "username": "9819497296",
                        "content": "dvdf is a string and and the longest substring should be vdf thats why the longest length of a substring should be 3 i hope you understand"
                    },
                    {
                        "username": "dmoriasi",
                        "content": "The longest string is \"vdf\" You basically start from index 1. to the end. "
                    },
                    {
                        "username": "codebadger",
                        "content": "\"vdf\" is a valid substring"
                    },
                    {
                        "username": "uakrongrad",
                        "content": "I think the task could be better explained by asking the tester to find the length of the longest non repeating set of continous characters in the string."
                    },
                    {
                        "username": "firezdog",
                        "content": "\"continuous characters in a string\" -- that is, a substring (as opposed to a subsequence)"
                    },
                    {
                        "username": "juansymontano",
                        "content": "True. I was wondering what they meant too. After realizing it\\u2019s just longest unique it was quite easy to code. "
                    },
                    {
                        "username": "sanyuktakate",
                        "content": "Did anyone get an error as - *\" is not a valid value of type string* for an input which was a string with space (\" \")?"
                    },
                    {
                        "username": "janis__",
                        "content": "If you\\'re encountering an error on LeetCode that says \" \" is not a valid value of type string, it\\'s likely not an issue with the code you provided. Instead, ensure that when you\\'re testing your function on LeetCode, you\\'re inputting the string with spaces correctly. In the test input box, instead of just entering a space, you should enter the string with double quotes, like \" \". This ensures LeetCode recognizes it as a valid string input."
                    },
                    {
                        "username": "chirag2239",
                        "content": "what to do for \" \"?\\nI am just copying all the characters to hash array. Space character index, 32, should be updated with the count."
                    },
                    {
                        "username": "piyushpandey6970",
                        "content": "[@Soham_Panchal](/Soham_Panchal) what to do for space\\n"
                    },
                    {
                        "username": "Qusai_issa",
                        "content": "\\' \\'"
                    },
                    {
                        "username": "M-Narendra",
                        "content": "no\\n"
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "Yes.\\n"
                    },
                    {
                        "username": "YASH_PARSANA",
                        "content": "**Please upvote if solution is useful**\\n\\nfull explanation of queation step by step solution brute force to optimal approach\\nExplained by googler\\n\\nhttps://youtu.be/qtVh-XEpsJo"
                    },
                    {
                        "username": "asfdg32",
                        "content": "It comes out to be wrong  when I submit my alg and tells me that it failed to process the input \"aa\" while I successfully get it right with the input \"aa\" in my local computer and the \"run code\" function in the website. Is it the website's bug? Or some differences between the \"run code\" and \"submit\" function exists. Or something is wrong with my code."
                    },
                    {
                        "username": "darrendsa06",
                        "content": "Im facing the same problem.\\n"
                    },
                    {
                        "username": "harshnayak580",
                        "content": "h\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for June, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/longest-substring-without-repeating-characters/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 3 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Sliding Window\n\n  \n**Approach 3:** Sliding Window Optimized\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1569517,
                "content": [
                    {
                        "username": "ktranada1403",
                        "content": "Bruh who tf sat down and wrote 987 testcases. This is sacrilegious. Go touch grass. See the world out there gang. This is not it. "
                    },
                    {
                        "username": "malinkov",
                        "content": "[@Mohamed-Kallel](/Mohamed-Kallel)  same XD"
                    },
                    {
                        "username": "malinkov",
                        "content": "LOL XD hahahhah yap, see the world fam XD hahahah"
                    },
                    {
                        "username": "Mohamed-Kallel",
                        "content": "the real pain  is when you see that 986/987 testcases passed "
                    },
                    {
                        "username": "jnatc1",
                        "content": "On god bro."
                    },
                    {
                        "username": "ktranada1403",
                        "content": "[@Eddiea6987](/Eddiea6987) im clearly joking "
                    },
                    {
                        "username": "user0915S",
                        "content": "bro, had all the time in the world\\n"
                    },
                    {
                        "username": "Himanshu_kmr24",
                        "content": "[@Eddiea6987](/Eddiea6987) So the important thing is touching grass :p"
                    },
                    {
                        "username": "aidenscoding",
                        "content": "Indeed. This should be flagged as hard. What\\'s wrong with people"
                    },
                    {
                        "username": "overbound",
                        "content": "I needed this."
                    },
                    {
                        "username": "sprodaturu",
                        "content": "[@Eddiea6987](/Eddiea6987) XD"
                    },
                    {
                        "username": "Eddiea6987",
                        "content": "so you being a programmer you cant think of an automated way to write all the test cases? what makes you think someone typed each  one? The dude probably spent 5 min to write a script and then went outside and touched grass. "
                    },
                    {
                        "username": "jlbroughton",
                        "content": "\\uD83D\\uDE02"
                    },
                    {
                        "username": "candypop8724",
                        "content": "bro fr man, i thought i got them all but fucking 987? what even"
                    },
                    {
                        "username": "user3327Ub",
                        "content": "You should stop using these overused jokes..."
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@rucola](/rucola) I think it is reffering to compiler time, not exercises time!"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "fr this is insane"
                    },
                    {
                        "username": "rucola",
                        "content": "Do you know the time limit? I have tried different approaches with c#, but they all run into \"Time Limit Exceeded\" for testcase 987 "
                    },
                    {
                        "username": "michaelg02",
                        "content": "The wording of the question was unclear for me. Example 3 does cover this where \"wke\" was the longest not \"wkew\", but the wording of the question suggests that the substring can have multiple of the same character as long as it is not repeating.\\n\\n\"wkew\" would pass because the substring does not have two w\\'s in a row.\\n\\n*Instead of:\\nGiven a string, find the length of the longest substring without repeating characters.*\\n\\n*I think this is a better wording:\\nGiven a string, find the length of the longest substring without **duplicate** characters.*\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Belyua",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) congratulations, you solved the problem. On leetcode there is a special section for solved problems"
                    },
                    {
                        "username": "ricko34",
                        "content": "[@mayank-01](/mayank-01) i think \\'kew\\' can\\'t be part of substring \\n "
                    },
                    {
                        "username": "ricko34",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) u have a good shortened solution, but this is not the right place \\n"
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "final=[]\\ndef chack(word):\\n    w=\"\"\\n    \\n    for i in word:\\n        if i in w:\\n           return\\n        else:\\n            w+=i\\n    final.append(w)\\n    \\n            \\n\\narry=\"pwwkew\"\\nfor i in range(len(arry)):\\n    for j in range(i,len(arry)):\\n        v=arry[i:j+1]\\n        chack(v)\\nlength=[]\\nfor i in final:\\n    length.append(len(i))\\nbig=max(length)\\nfor i in final:\\n    if big==len(i):\\n        print(i)\\n        break\\n    "
                    },
                    {
                        "username": "sandeep-p",
                        "content": "May be the companies that asked this question expected the candidate to be unclear and discuss, before jumping over the code?"
                    },
                    {
                        "username": "Med__think",
                        "content": "[@mayank-01](/mayank-01)  it i just one of the examples the motive is to find the length of longest substring without repeating characters"
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "what does repeating means? Something that happens more than once. I dont think it is unprecise, im not english native and yet was able to understand. And Examples are there to extend the wording. "
                    },
                    {
                        "username": "mayank-01",
                        "content": "Yes, I agree with you, I am also confused in example 3 there are 2 substrings \\'wke\\' and \\'kew\\' of same length, so this should be mentioned like it can be multiple substrings with same length....."
                    },
                    {
                        "username": "technologyaddicted",
                        "content": "Given \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\nI do not understand that in the Example # 3, it mentions 'wke' as the longest substring. Why not \"kew\" selected as the longest one? Help here is much appreciated."
                    },
                    {
                        "username": "VladoBradi",
                        "content": "Both answers are correct \"wke\" and \"kew\" but probably they choose just one (the first one because of characters line) for correct answer. "
                    },
                    {
                        "username": "lipingm",
                        "content": "1, [], max=0;\n2,[p], max =1;\n3,[p,w], max =2;\n4,[w], max=2;\n5,[w,k], max=2;\n6,[w,k,e], max=3;\n7,[k,e], max=3\n8,end\nSo max=3"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "[@somavik99](/somavik99) pke is subsequence not substring"
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@somavik99](/somavik99) Because it has to be the first instance of a substring, you kind have to read in between the line in mean here, otherwise it could be argued why not kew too!"
                    },
                    {
                        "username": "mohittyagi",
                        "content": "[@somavik99](/somavik99) \"the longest substring without repeating characters\""
                    },
                    {
                        "username": "somavik99",
                        "content": "[@ignorant_ppp](/ignorant_ppp)  My question is why not \"pke\" its total unique value."
                    },
                    {
                        "username": "ignorant_ppp",
                        "content": "you are suppose to return the length not the string\\n"
                    },
                    {
                        "username": "kauntey1O1",
                        "content": "because we would get \"wke\" first and \"kew\" is as the same length as \"wke\""
                    },
                    {
                        "username": "gerryhd",
                        "content": "I don't think that's relevant to the end result as both would return the length of 3."
                    },
                    {
                        "username": "momoxsalameh",
                        "content": "Take it as the longest sequence of non-identical character in the string"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Salheen Bakhet](/technologyaddicted) \\nMost people will scan from left to right and the result \"wke\" will appear first, but if you are used to scanning from right to left (like the habit of writing arabic, japan, etc.) then \"kwe\" this time appeared first."
                    },
                    {
                        "username": "manmitta",
                        "content": "We always starts with left side of string and when you checked \"pwwkew\" .. \"wke\" comes first ."
                    },
                    {
                        "username": "pstrait",
                        "content": "It doesn\\'t matter which substring, you need to return an integer not a substring."
                    },
                    {
                        "username": "amirhassan032",
                        "content": "it can be kew but wke comes first thats why it is assumed as answer"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "kew is also longest substring for sure but we would have considered it if it was scanned earlier"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "when we are iterating from the beginning of the string the we found the max substring before then why would we update the previous value with upcoming value if it still has the same length substring"
                    },
                    {
                        "username": "nancychauhan99",
                        "content": "focus is on the max length achieved rather than the substring itself"
                    },
                    {
                        "username": "ooPo",
                        "content": "Do not try to use brute force to pass the problem."
                    },
                    {
                        "username": "close27",
                        "content": "my brute force got accepted. https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3747943/brute-force-easy-to-understand/"
                    },
                    {
                        "username": "Kromydas",
                        "content": "the problem is that you are not limited from a - z, and can have A-Z as well as 0-9 and other chracters. this is a good approach if you are only limited to a-z. It will solve all the test cases except 985 - 987.\n\nhere is my code which implements your approach:\n```\nclass Solution {\npublic:\n    bool isCharacterInString(const string& str, char ch) {\n        for (char c : str) {\n            if (c == ch) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    int lengthOfLongestSubstring(string s) {\n        int n = s.size();\n        int maxi = 0;\n        for (int i = 0; i < n; i++) {\n            int var = min(26, n - i);\n            for (int j = 0; j < var; j++) {\n                string str = s.substr(i, j + 1);\n                string temp = \"\";\n                bool good = true;\n                for (int k = 0; k < str.size(); k++) {\n                    if (isCharacterInString(temp, str[k])) {\n                        good = false;\n                        break;\n                    } else {\n                        temp += str[k];\n                    }\n                }\n                if (good) {\n                    maxi = max(maxi, (int)str.size());\n                } else {\n                    break;\n                }\n            }\n        }\n        return maxi;\n    }\n};\n```\nagain, note that this does not work for this problem. nice thinking though!\n\nthe way i did it is by using hash sets, which gives you 2 for loops with at worst O(n^2) time (which won't happen). It involves using ```for (int i = 0; i < n; i++) {for int j = i; j < n; j++}```. "
                    },
                    {
                        "username": "ranbir7",
                        "content": "[@cartesPerforees](/cartesPerforees) I used deque"
                    },
                    {
                        "username": "ranbir7",
                        "content": "I used deque"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Or please, do use brute force. Brute force works just fine if you take adavantage of the fact that you're working with a finite alphabet. You can scan through all substrings of all sizes up to  $\\alpha$ where $\\alpha$ is the size of your alphabet (cause no substring could be larger than the full alphabet without repeats). Even the brutest of brute force in $O(\\alpha^2n)$ is comfortably accepted.\nWhen you don't listen to random people telling you how to think or not to think, you sometimes find solutions they didn't anticipate ;)"
                    },
                    {
                        "username": "media_overdosed",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) because it\\'s slow af (especially python)"
                    },
                    {
                        "username": "Anson_W",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) In fact, it can be passed by using unordered_map. Less than 1s."
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t)  the length of test case is 5 * 10^4 , brute force is N^2 . TLE"
                    },
                    {
                        "username": "whyevenquestion1t",
                        "content": "why not?\\n"
                    },
                    {
                        "username": "anthonyhuang",
                        "content": "I have some problem understanding the problem, this test case \"dvdf \"says the output should be 3, while I suppose it should be 2.\\n\\n\"dv\" or \"df\" is what I think. It should be substring not subsequence like the question mentioned. Should it confined to \"Consistent String\"?\\n\\n"
                    },
                    {
                        "username": "tsashokstar27",
                        "content": "[@ricko34](/ricko34) Because of longest sub string length if we use the dv it will be 2. But we have vdf with length 3."
                    },
                    {
                        "username": "omaute260902",
                        "content": "the testcase is correct. the substring for this test case would be \\'vdf\\' and the answer therefore would be 3\\n"
                    },
                    {
                        "username": "ricko34",
                        "content": "absolutely,  i  don\\'t understand why \\'d\\' is ignored "
                    },
                    {
                        "username": "Shazamct",
                        "content": "output should be \\'vdf\\' i.e. 3\\n"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "swagiuli",
                        "content": "[@nrjsuthar](/nrjsuthar) yes"
                    },
                    {
                        "username": "nrjsuthar",
                        "content": "vdf is the longest subsequence right?\\n"
                    },
                    {
                        "username": "EloiVega",
                        "content": "the answer is \\'vdf\\' which is of length 3"
                    },
                    {
                        "username": "manavjoshi1107",
                        "content": "vdf have length 3\\n"
                    },
                    {
                        "username": "mkraghava007",
                        "content": "d v & f are different characters together, hence ig it\\'s considering them together"
                    },
                    {
                        "username": "damajsam93",
                        "content": "vfd ==>3 "
                    },
                    {
                        "username": "abhiram__devisetti",
                        "content": "vdf is answer"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "cause \"vdf\" is the longest substring in the given string"
                    },
                    {
                        "username": "9819497296",
                        "content": "dvdf is a string and and the longest substring should be vdf thats why the longest length of a substring should be 3 i hope you understand"
                    },
                    {
                        "username": "dmoriasi",
                        "content": "The longest string is \"vdf\" You basically start from index 1. to the end. "
                    },
                    {
                        "username": "codebadger",
                        "content": "\"vdf\" is a valid substring"
                    },
                    {
                        "username": "uakrongrad",
                        "content": "I think the task could be better explained by asking the tester to find the length of the longest non repeating set of continous characters in the string."
                    },
                    {
                        "username": "firezdog",
                        "content": "\"continuous characters in a string\" -- that is, a substring (as opposed to a subsequence)"
                    },
                    {
                        "username": "juansymontano",
                        "content": "True. I was wondering what they meant too. After realizing it\\u2019s just longest unique it was quite easy to code. "
                    },
                    {
                        "username": "sanyuktakate",
                        "content": "Did anyone get an error as - *\" is not a valid value of type string* for an input which was a string with space (\" \")?"
                    },
                    {
                        "username": "janis__",
                        "content": "If you\\'re encountering an error on LeetCode that says \" \" is not a valid value of type string, it\\'s likely not an issue with the code you provided. Instead, ensure that when you\\'re testing your function on LeetCode, you\\'re inputting the string with spaces correctly. In the test input box, instead of just entering a space, you should enter the string with double quotes, like \" \". This ensures LeetCode recognizes it as a valid string input."
                    },
                    {
                        "username": "chirag2239",
                        "content": "what to do for \" \"?\\nI am just copying all the characters to hash array. Space character index, 32, should be updated with the count."
                    },
                    {
                        "username": "piyushpandey6970",
                        "content": "[@Soham_Panchal](/Soham_Panchal) what to do for space\\n"
                    },
                    {
                        "username": "Qusai_issa",
                        "content": "\\' \\'"
                    },
                    {
                        "username": "M-Narendra",
                        "content": "no\\n"
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "Yes.\\n"
                    },
                    {
                        "username": "YASH_PARSANA",
                        "content": "**Please upvote if solution is useful**\\n\\nfull explanation of queation step by step solution brute force to optimal approach\\nExplained by googler\\n\\nhttps://youtu.be/qtVh-XEpsJo"
                    },
                    {
                        "username": "asfdg32",
                        "content": "It comes out to be wrong  when I submit my alg and tells me that it failed to process the input \"aa\" while I successfully get it right with the input \"aa\" in my local computer and the \"run code\" function in the website. Is it the website's bug? Or some differences between the \"run code\" and \"submit\" function exists. Or something is wrong with my code."
                    },
                    {
                        "username": "darrendsa06",
                        "content": "Im facing the same problem.\\n"
                    },
                    {
                        "username": "harshnayak580",
                        "content": "h\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for June, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/longest-substring-without-repeating-characters/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 3 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Sliding Window\n\n  \n**Approach 3:** Sliding Window Optimized\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1567302,
                "content": [
                    {
                        "username": "ktranada1403",
                        "content": "Bruh who tf sat down and wrote 987 testcases. This is sacrilegious. Go touch grass. See the world out there gang. This is not it. "
                    },
                    {
                        "username": "malinkov",
                        "content": "[@Mohamed-Kallel](/Mohamed-Kallel)  same XD"
                    },
                    {
                        "username": "malinkov",
                        "content": "LOL XD hahahhah yap, see the world fam XD hahahah"
                    },
                    {
                        "username": "Mohamed-Kallel",
                        "content": "the real pain  is when you see that 986/987 testcases passed "
                    },
                    {
                        "username": "jnatc1",
                        "content": "On god bro."
                    },
                    {
                        "username": "ktranada1403",
                        "content": "[@Eddiea6987](/Eddiea6987) im clearly joking "
                    },
                    {
                        "username": "user0915S",
                        "content": "bro, had all the time in the world\\n"
                    },
                    {
                        "username": "Himanshu_kmr24",
                        "content": "[@Eddiea6987](/Eddiea6987) So the important thing is touching grass :p"
                    },
                    {
                        "username": "aidenscoding",
                        "content": "Indeed. This should be flagged as hard. What\\'s wrong with people"
                    },
                    {
                        "username": "overbound",
                        "content": "I needed this."
                    },
                    {
                        "username": "sprodaturu",
                        "content": "[@Eddiea6987](/Eddiea6987) XD"
                    },
                    {
                        "username": "Eddiea6987",
                        "content": "so you being a programmer you cant think of an automated way to write all the test cases? what makes you think someone typed each  one? The dude probably spent 5 min to write a script and then went outside and touched grass. "
                    },
                    {
                        "username": "jlbroughton",
                        "content": "\\uD83D\\uDE02"
                    },
                    {
                        "username": "candypop8724",
                        "content": "bro fr man, i thought i got them all but fucking 987? what even"
                    },
                    {
                        "username": "user3327Ub",
                        "content": "You should stop using these overused jokes..."
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@rucola](/rucola) I think it is reffering to compiler time, not exercises time!"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "fr this is insane"
                    },
                    {
                        "username": "rucola",
                        "content": "Do you know the time limit? I have tried different approaches with c#, but they all run into \"Time Limit Exceeded\" for testcase 987 "
                    },
                    {
                        "username": "michaelg02",
                        "content": "The wording of the question was unclear for me. Example 3 does cover this where \"wke\" was the longest not \"wkew\", but the wording of the question suggests that the substring can have multiple of the same character as long as it is not repeating.\\n\\n\"wkew\" would pass because the substring does not have two w\\'s in a row.\\n\\n*Instead of:\\nGiven a string, find the length of the longest substring without repeating characters.*\\n\\n*I think this is a better wording:\\nGiven a string, find the length of the longest substring without **duplicate** characters.*\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Belyua",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) congratulations, you solved the problem. On leetcode there is a special section for solved problems"
                    },
                    {
                        "username": "ricko34",
                        "content": "[@mayank-01](/mayank-01) i think \\'kew\\' can\\'t be part of substring \\n "
                    },
                    {
                        "username": "ricko34",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) u have a good shortened solution, but this is not the right place \\n"
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "final=[]\\ndef chack(word):\\n    w=\"\"\\n    \\n    for i in word:\\n        if i in w:\\n           return\\n        else:\\n            w+=i\\n    final.append(w)\\n    \\n            \\n\\narry=\"pwwkew\"\\nfor i in range(len(arry)):\\n    for j in range(i,len(arry)):\\n        v=arry[i:j+1]\\n        chack(v)\\nlength=[]\\nfor i in final:\\n    length.append(len(i))\\nbig=max(length)\\nfor i in final:\\n    if big==len(i):\\n        print(i)\\n        break\\n    "
                    },
                    {
                        "username": "sandeep-p",
                        "content": "May be the companies that asked this question expected the candidate to be unclear and discuss, before jumping over the code?"
                    },
                    {
                        "username": "Med__think",
                        "content": "[@mayank-01](/mayank-01)  it i just one of the examples the motive is to find the length of longest substring without repeating characters"
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "what does repeating means? Something that happens more than once. I dont think it is unprecise, im not english native and yet was able to understand. And Examples are there to extend the wording. "
                    },
                    {
                        "username": "mayank-01",
                        "content": "Yes, I agree with you, I am also confused in example 3 there are 2 substrings \\'wke\\' and \\'kew\\' of same length, so this should be mentioned like it can be multiple substrings with same length....."
                    },
                    {
                        "username": "technologyaddicted",
                        "content": "Given \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\nI do not understand that in the Example # 3, it mentions 'wke' as the longest substring. Why not \"kew\" selected as the longest one? Help here is much appreciated."
                    },
                    {
                        "username": "VladoBradi",
                        "content": "Both answers are correct \"wke\" and \"kew\" but probably they choose just one (the first one because of characters line) for correct answer. "
                    },
                    {
                        "username": "lipingm",
                        "content": "1, [], max=0;\n2,[p], max =1;\n3,[p,w], max =2;\n4,[w], max=2;\n5,[w,k], max=2;\n6,[w,k,e], max=3;\n7,[k,e], max=3\n8,end\nSo max=3"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "[@somavik99](/somavik99) pke is subsequence not substring"
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@somavik99](/somavik99) Because it has to be the first instance of a substring, you kind have to read in between the line in mean here, otherwise it could be argued why not kew too!"
                    },
                    {
                        "username": "mohittyagi",
                        "content": "[@somavik99](/somavik99) \"the longest substring without repeating characters\""
                    },
                    {
                        "username": "somavik99",
                        "content": "[@ignorant_ppp](/ignorant_ppp)  My question is why not \"pke\" its total unique value."
                    },
                    {
                        "username": "ignorant_ppp",
                        "content": "you are suppose to return the length not the string\\n"
                    },
                    {
                        "username": "kauntey1O1",
                        "content": "because we would get \"wke\" first and \"kew\" is as the same length as \"wke\""
                    },
                    {
                        "username": "gerryhd",
                        "content": "I don't think that's relevant to the end result as both would return the length of 3."
                    },
                    {
                        "username": "momoxsalameh",
                        "content": "Take it as the longest sequence of non-identical character in the string"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Salheen Bakhet](/technologyaddicted) \\nMost people will scan from left to right and the result \"wke\" will appear first, but if you are used to scanning from right to left (like the habit of writing arabic, japan, etc.) then \"kwe\" this time appeared first."
                    },
                    {
                        "username": "manmitta",
                        "content": "We always starts with left side of string and when you checked \"pwwkew\" .. \"wke\" comes first ."
                    },
                    {
                        "username": "pstrait",
                        "content": "It doesn\\'t matter which substring, you need to return an integer not a substring."
                    },
                    {
                        "username": "amirhassan032",
                        "content": "it can be kew but wke comes first thats why it is assumed as answer"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "kew is also longest substring for sure but we would have considered it if it was scanned earlier"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "when we are iterating from the beginning of the string the we found the max substring before then why would we update the previous value with upcoming value if it still has the same length substring"
                    },
                    {
                        "username": "nancychauhan99",
                        "content": "focus is on the max length achieved rather than the substring itself"
                    },
                    {
                        "username": "ooPo",
                        "content": "Do not try to use brute force to pass the problem."
                    },
                    {
                        "username": "close27",
                        "content": "my brute force got accepted. https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3747943/brute-force-easy-to-understand/"
                    },
                    {
                        "username": "Kromydas",
                        "content": "the problem is that you are not limited from a - z, and can have A-Z as well as 0-9 and other chracters. this is a good approach if you are only limited to a-z. It will solve all the test cases except 985 - 987.\n\nhere is my code which implements your approach:\n```\nclass Solution {\npublic:\n    bool isCharacterInString(const string& str, char ch) {\n        for (char c : str) {\n            if (c == ch) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    int lengthOfLongestSubstring(string s) {\n        int n = s.size();\n        int maxi = 0;\n        for (int i = 0; i < n; i++) {\n            int var = min(26, n - i);\n            for (int j = 0; j < var; j++) {\n                string str = s.substr(i, j + 1);\n                string temp = \"\";\n                bool good = true;\n                for (int k = 0; k < str.size(); k++) {\n                    if (isCharacterInString(temp, str[k])) {\n                        good = false;\n                        break;\n                    } else {\n                        temp += str[k];\n                    }\n                }\n                if (good) {\n                    maxi = max(maxi, (int)str.size());\n                } else {\n                    break;\n                }\n            }\n        }\n        return maxi;\n    }\n};\n```\nagain, note that this does not work for this problem. nice thinking though!\n\nthe way i did it is by using hash sets, which gives you 2 for loops with at worst O(n^2) time (which won't happen). It involves using ```for (int i = 0; i < n; i++) {for int j = i; j < n; j++}```. "
                    },
                    {
                        "username": "ranbir7",
                        "content": "[@cartesPerforees](/cartesPerforees) I used deque"
                    },
                    {
                        "username": "ranbir7",
                        "content": "I used deque"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Or please, do use brute force. Brute force works just fine if you take adavantage of the fact that you're working with a finite alphabet. You can scan through all substrings of all sizes up to  $\\alpha$ where $\\alpha$ is the size of your alphabet (cause no substring could be larger than the full alphabet without repeats). Even the brutest of brute force in $O(\\alpha^2n)$ is comfortably accepted.\nWhen you don't listen to random people telling you how to think or not to think, you sometimes find solutions they didn't anticipate ;)"
                    },
                    {
                        "username": "media_overdosed",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) because it\\'s slow af (especially python)"
                    },
                    {
                        "username": "Anson_W",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) In fact, it can be passed by using unordered_map. Less than 1s."
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t)  the length of test case is 5 * 10^4 , brute force is N^2 . TLE"
                    },
                    {
                        "username": "whyevenquestion1t",
                        "content": "why not?\\n"
                    },
                    {
                        "username": "anthonyhuang",
                        "content": "I have some problem understanding the problem, this test case \"dvdf \"says the output should be 3, while I suppose it should be 2.\\n\\n\"dv\" or \"df\" is what I think. It should be substring not subsequence like the question mentioned. Should it confined to \"Consistent String\"?\\n\\n"
                    },
                    {
                        "username": "tsashokstar27",
                        "content": "[@ricko34](/ricko34) Because of longest sub string length if we use the dv it will be 2. But we have vdf with length 3."
                    },
                    {
                        "username": "omaute260902",
                        "content": "the testcase is correct. the substring for this test case would be \\'vdf\\' and the answer therefore would be 3\\n"
                    },
                    {
                        "username": "ricko34",
                        "content": "absolutely,  i  don\\'t understand why \\'d\\' is ignored "
                    },
                    {
                        "username": "Shazamct",
                        "content": "output should be \\'vdf\\' i.e. 3\\n"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "swagiuli",
                        "content": "[@nrjsuthar](/nrjsuthar) yes"
                    },
                    {
                        "username": "nrjsuthar",
                        "content": "vdf is the longest subsequence right?\\n"
                    },
                    {
                        "username": "EloiVega",
                        "content": "the answer is \\'vdf\\' which is of length 3"
                    },
                    {
                        "username": "manavjoshi1107",
                        "content": "vdf have length 3\\n"
                    },
                    {
                        "username": "mkraghava007",
                        "content": "d v & f are different characters together, hence ig it\\'s considering them together"
                    },
                    {
                        "username": "damajsam93",
                        "content": "vfd ==>3 "
                    },
                    {
                        "username": "abhiram__devisetti",
                        "content": "vdf is answer"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "cause \"vdf\" is the longest substring in the given string"
                    },
                    {
                        "username": "9819497296",
                        "content": "dvdf is a string and and the longest substring should be vdf thats why the longest length of a substring should be 3 i hope you understand"
                    },
                    {
                        "username": "dmoriasi",
                        "content": "The longest string is \"vdf\" You basically start from index 1. to the end. "
                    },
                    {
                        "username": "codebadger",
                        "content": "\"vdf\" is a valid substring"
                    },
                    {
                        "username": "uakrongrad",
                        "content": "I think the task could be better explained by asking the tester to find the length of the longest non repeating set of continous characters in the string."
                    },
                    {
                        "username": "firezdog",
                        "content": "\"continuous characters in a string\" -- that is, a substring (as opposed to a subsequence)"
                    },
                    {
                        "username": "juansymontano",
                        "content": "True. I was wondering what they meant too. After realizing it\\u2019s just longest unique it was quite easy to code. "
                    },
                    {
                        "username": "sanyuktakate",
                        "content": "Did anyone get an error as - *\" is not a valid value of type string* for an input which was a string with space (\" \")?"
                    },
                    {
                        "username": "janis__",
                        "content": "If you\\'re encountering an error on LeetCode that says \" \" is not a valid value of type string, it\\'s likely not an issue with the code you provided. Instead, ensure that when you\\'re testing your function on LeetCode, you\\'re inputting the string with spaces correctly. In the test input box, instead of just entering a space, you should enter the string with double quotes, like \" \". This ensures LeetCode recognizes it as a valid string input."
                    },
                    {
                        "username": "chirag2239",
                        "content": "what to do for \" \"?\\nI am just copying all the characters to hash array. Space character index, 32, should be updated with the count."
                    },
                    {
                        "username": "piyushpandey6970",
                        "content": "[@Soham_Panchal](/Soham_Panchal) what to do for space\\n"
                    },
                    {
                        "username": "Qusai_issa",
                        "content": "\\' \\'"
                    },
                    {
                        "username": "M-Narendra",
                        "content": "no\\n"
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "Yes.\\n"
                    },
                    {
                        "username": "YASH_PARSANA",
                        "content": "**Please upvote if solution is useful**\\n\\nfull explanation of queation step by step solution brute force to optimal approach\\nExplained by googler\\n\\nhttps://youtu.be/qtVh-XEpsJo"
                    },
                    {
                        "username": "asfdg32",
                        "content": "It comes out to be wrong  when I submit my alg and tells me that it failed to process the input \"aa\" while I successfully get it right with the input \"aa\" in my local computer and the \"run code\" function in the website. Is it the website's bug? Or some differences between the \"run code\" and \"submit\" function exists. Or something is wrong with my code."
                    },
                    {
                        "username": "darrendsa06",
                        "content": "Im facing the same problem.\\n"
                    },
                    {
                        "username": "harshnayak580",
                        "content": "h\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for June, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/longest-substring-without-repeating-characters/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 3 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Sliding Window\n\n  \n**Approach 3:** Sliding Window Optimized\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1570611,
                "content": [
                    {
                        "username": "ktranada1403",
                        "content": "Bruh who tf sat down and wrote 987 testcases. This is sacrilegious. Go touch grass. See the world out there gang. This is not it. "
                    },
                    {
                        "username": "malinkov",
                        "content": "[@Mohamed-Kallel](/Mohamed-Kallel)  same XD"
                    },
                    {
                        "username": "malinkov",
                        "content": "LOL XD hahahhah yap, see the world fam XD hahahah"
                    },
                    {
                        "username": "Mohamed-Kallel",
                        "content": "the real pain  is when you see that 986/987 testcases passed "
                    },
                    {
                        "username": "jnatc1",
                        "content": "On god bro."
                    },
                    {
                        "username": "ktranada1403",
                        "content": "[@Eddiea6987](/Eddiea6987) im clearly joking "
                    },
                    {
                        "username": "user0915S",
                        "content": "bro, had all the time in the world\\n"
                    },
                    {
                        "username": "Himanshu_kmr24",
                        "content": "[@Eddiea6987](/Eddiea6987) So the important thing is touching grass :p"
                    },
                    {
                        "username": "aidenscoding",
                        "content": "Indeed. This should be flagged as hard. What\\'s wrong with people"
                    },
                    {
                        "username": "overbound",
                        "content": "I needed this."
                    },
                    {
                        "username": "sprodaturu",
                        "content": "[@Eddiea6987](/Eddiea6987) XD"
                    },
                    {
                        "username": "Eddiea6987",
                        "content": "so you being a programmer you cant think of an automated way to write all the test cases? what makes you think someone typed each  one? The dude probably spent 5 min to write a script and then went outside and touched grass. "
                    },
                    {
                        "username": "jlbroughton",
                        "content": "\\uD83D\\uDE02"
                    },
                    {
                        "username": "candypop8724",
                        "content": "bro fr man, i thought i got them all but fucking 987? what even"
                    },
                    {
                        "username": "user3327Ub",
                        "content": "You should stop using these overused jokes..."
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@rucola](/rucola) I think it is reffering to compiler time, not exercises time!"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "fr this is insane"
                    },
                    {
                        "username": "rucola",
                        "content": "Do you know the time limit? I have tried different approaches with c#, but they all run into \"Time Limit Exceeded\" for testcase 987 "
                    },
                    {
                        "username": "michaelg02",
                        "content": "The wording of the question was unclear for me. Example 3 does cover this where \"wke\" was the longest not \"wkew\", but the wording of the question suggests that the substring can have multiple of the same character as long as it is not repeating.\\n\\n\"wkew\" would pass because the substring does not have two w\\'s in a row.\\n\\n*Instead of:\\nGiven a string, find the length of the longest substring without repeating characters.*\\n\\n*I think this is a better wording:\\nGiven a string, find the length of the longest substring without **duplicate** characters.*\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Belyua",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) congratulations, you solved the problem. On leetcode there is a special section for solved problems"
                    },
                    {
                        "username": "ricko34",
                        "content": "[@mayank-01](/mayank-01) i think \\'kew\\' can\\'t be part of substring \\n "
                    },
                    {
                        "username": "ricko34",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) u have a good shortened solution, but this is not the right place \\n"
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "final=[]\\ndef chack(word):\\n    w=\"\"\\n    \\n    for i in word:\\n        if i in w:\\n           return\\n        else:\\n            w+=i\\n    final.append(w)\\n    \\n            \\n\\narry=\"pwwkew\"\\nfor i in range(len(arry)):\\n    for j in range(i,len(arry)):\\n        v=arry[i:j+1]\\n        chack(v)\\nlength=[]\\nfor i in final:\\n    length.append(len(i))\\nbig=max(length)\\nfor i in final:\\n    if big==len(i):\\n        print(i)\\n        break\\n    "
                    },
                    {
                        "username": "sandeep-p",
                        "content": "May be the companies that asked this question expected the candidate to be unclear and discuss, before jumping over the code?"
                    },
                    {
                        "username": "Med__think",
                        "content": "[@mayank-01](/mayank-01)  it i just one of the examples the motive is to find the length of longest substring without repeating characters"
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "what does repeating means? Something that happens more than once. I dont think it is unprecise, im not english native and yet was able to understand. And Examples are there to extend the wording. "
                    },
                    {
                        "username": "mayank-01",
                        "content": "Yes, I agree with you, I am also confused in example 3 there are 2 substrings \\'wke\\' and \\'kew\\' of same length, so this should be mentioned like it can be multiple substrings with same length....."
                    },
                    {
                        "username": "technologyaddicted",
                        "content": "Given \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\nI do not understand that in the Example # 3, it mentions 'wke' as the longest substring. Why not \"kew\" selected as the longest one? Help here is much appreciated."
                    },
                    {
                        "username": "VladoBradi",
                        "content": "Both answers are correct \"wke\" and \"kew\" but probably they choose just one (the first one because of characters line) for correct answer. "
                    },
                    {
                        "username": "lipingm",
                        "content": "1, [], max=0;\n2,[p], max =1;\n3,[p,w], max =2;\n4,[w], max=2;\n5,[w,k], max=2;\n6,[w,k,e], max=3;\n7,[k,e], max=3\n8,end\nSo max=3"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "[@somavik99](/somavik99) pke is subsequence not substring"
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@somavik99](/somavik99) Because it has to be the first instance of a substring, you kind have to read in between the line in mean here, otherwise it could be argued why not kew too!"
                    },
                    {
                        "username": "mohittyagi",
                        "content": "[@somavik99](/somavik99) \"the longest substring without repeating characters\""
                    },
                    {
                        "username": "somavik99",
                        "content": "[@ignorant_ppp](/ignorant_ppp)  My question is why not \"pke\" its total unique value."
                    },
                    {
                        "username": "ignorant_ppp",
                        "content": "you are suppose to return the length not the string\\n"
                    },
                    {
                        "username": "kauntey1O1",
                        "content": "because we would get \"wke\" first and \"kew\" is as the same length as \"wke\""
                    },
                    {
                        "username": "gerryhd",
                        "content": "I don't think that's relevant to the end result as both would return the length of 3."
                    },
                    {
                        "username": "momoxsalameh",
                        "content": "Take it as the longest sequence of non-identical character in the string"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Salheen Bakhet](/technologyaddicted) \\nMost people will scan from left to right and the result \"wke\" will appear first, but if you are used to scanning from right to left (like the habit of writing arabic, japan, etc.) then \"kwe\" this time appeared first."
                    },
                    {
                        "username": "manmitta",
                        "content": "We always starts with left side of string and when you checked \"pwwkew\" .. \"wke\" comes first ."
                    },
                    {
                        "username": "pstrait",
                        "content": "It doesn\\'t matter which substring, you need to return an integer not a substring."
                    },
                    {
                        "username": "amirhassan032",
                        "content": "it can be kew but wke comes first thats why it is assumed as answer"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "kew is also longest substring for sure but we would have considered it if it was scanned earlier"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "when we are iterating from the beginning of the string the we found the max substring before then why would we update the previous value with upcoming value if it still has the same length substring"
                    },
                    {
                        "username": "nancychauhan99",
                        "content": "focus is on the max length achieved rather than the substring itself"
                    },
                    {
                        "username": "ooPo",
                        "content": "Do not try to use brute force to pass the problem."
                    },
                    {
                        "username": "close27",
                        "content": "my brute force got accepted. https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3747943/brute-force-easy-to-understand/"
                    },
                    {
                        "username": "Kromydas",
                        "content": "the problem is that you are not limited from a - z, and can have A-Z as well as 0-9 and other chracters. this is a good approach if you are only limited to a-z. It will solve all the test cases except 985 - 987.\n\nhere is my code which implements your approach:\n```\nclass Solution {\npublic:\n    bool isCharacterInString(const string& str, char ch) {\n        for (char c : str) {\n            if (c == ch) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    int lengthOfLongestSubstring(string s) {\n        int n = s.size();\n        int maxi = 0;\n        for (int i = 0; i < n; i++) {\n            int var = min(26, n - i);\n            for (int j = 0; j < var; j++) {\n                string str = s.substr(i, j + 1);\n                string temp = \"\";\n                bool good = true;\n                for (int k = 0; k < str.size(); k++) {\n                    if (isCharacterInString(temp, str[k])) {\n                        good = false;\n                        break;\n                    } else {\n                        temp += str[k];\n                    }\n                }\n                if (good) {\n                    maxi = max(maxi, (int)str.size());\n                } else {\n                    break;\n                }\n            }\n        }\n        return maxi;\n    }\n};\n```\nagain, note that this does not work for this problem. nice thinking though!\n\nthe way i did it is by using hash sets, which gives you 2 for loops with at worst O(n^2) time (which won't happen). It involves using ```for (int i = 0; i < n; i++) {for int j = i; j < n; j++}```. "
                    },
                    {
                        "username": "ranbir7",
                        "content": "[@cartesPerforees](/cartesPerforees) I used deque"
                    },
                    {
                        "username": "ranbir7",
                        "content": "I used deque"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Or please, do use brute force. Brute force works just fine if you take adavantage of the fact that you're working with a finite alphabet. You can scan through all substrings of all sizes up to  $\\alpha$ where $\\alpha$ is the size of your alphabet (cause no substring could be larger than the full alphabet without repeats). Even the brutest of brute force in $O(\\alpha^2n)$ is comfortably accepted.\nWhen you don't listen to random people telling you how to think or not to think, you sometimes find solutions they didn't anticipate ;)"
                    },
                    {
                        "username": "media_overdosed",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) because it\\'s slow af (especially python)"
                    },
                    {
                        "username": "Anson_W",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) In fact, it can be passed by using unordered_map. Less than 1s."
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t)  the length of test case is 5 * 10^4 , brute force is N^2 . TLE"
                    },
                    {
                        "username": "whyevenquestion1t",
                        "content": "why not?\\n"
                    },
                    {
                        "username": "anthonyhuang",
                        "content": "I have some problem understanding the problem, this test case \"dvdf \"says the output should be 3, while I suppose it should be 2.\\n\\n\"dv\" or \"df\" is what I think. It should be substring not subsequence like the question mentioned. Should it confined to \"Consistent String\"?\\n\\n"
                    },
                    {
                        "username": "tsashokstar27",
                        "content": "[@ricko34](/ricko34) Because of longest sub string length if we use the dv it will be 2. But we have vdf with length 3."
                    },
                    {
                        "username": "omaute260902",
                        "content": "the testcase is correct. the substring for this test case would be \\'vdf\\' and the answer therefore would be 3\\n"
                    },
                    {
                        "username": "ricko34",
                        "content": "absolutely,  i  don\\'t understand why \\'d\\' is ignored "
                    },
                    {
                        "username": "Shazamct",
                        "content": "output should be \\'vdf\\' i.e. 3\\n"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "swagiuli",
                        "content": "[@nrjsuthar](/nrjsuthar) yes"
                    },
                    {
                        "username": "nrjsuthar",
                        "content": "vdf is the longest subsequence right?\\n"
                    },
                    {
                        "username": "EloiVega",
                        "content": "the answer is \\'vdf\\' which is of length 3"
                    },
                    {
                        "username": "manavjoshi1107",
                        "content": "vdf have length 3\\n"
                    },
                    {
                        "username": "mkraghava007",
                        "content": "d v & f are different characters together, hence ig it\\'s considering them together"
                    },
                    {
                        "username": "damajsam93",
                        "content": "vfd ==>3 "
                    },
                    {
                        "username": "abhiram__devisetti",
                        "content": "vdf is answer"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "cause \"vdf\" is the longest substring in the given string"
                    },
                    {
                        "username": "9819497296",
                        "content": "dvdf is a string and and the longest substring should be vdf thats why the longest length of a substring should be 3 i hope you understand"
                    },
                    {
                        "username": "dmoriasi",
                        "content": "The longest string is \"vdf\" You basically start from index 1. to the end. "
                    },
                    {
                        "username": "codebadger",
                        "content": "\"vdf\" is a valid substring"
                    },
                    {
                        "username": "uakrongrad",
                        "content": "I think the task could be better explained by asking the tester to find the length of the longest non repeating set of continous characters in the string."
                    },
                    {
                        "username": "firezdog",
                        "content": "\"continuous characters in a string\" -- that is, a substring (as opposed to a subsequence)"
                    },
                    {
                        "username": "juansymontano",
                        "content": "True. I was wondering what they meant too. After realizing it\\u2019s just longest unique it was quite easy to code. "
                    },
                    {
                        "username": "sanyuktakate",
                        "content": "Did anyone get an error as - *\" is not a valid value of type string* for an input which was a string with space (\" \")?"
                    },
                    {
                        "username": "janis__",
                        "content": "If you\\'re encountering an error on LeetCode that says \" \" is not a valid value of type string, it\\'s likely not an issue with the code you provided. Instead, ensure that when you\\'re testing your function on LeetCode, you\\'re inputting the string with spaces correctly. In the test input box, instead of just entering a space, you should enter the string with double quotes, like \" \". This ensures LeetCode recognizes it as a valid string input."
                    },
                    {
                        "username": "chirag2239",
                        "content": "what to do for \" \"?\\nI am just copying all the characters to hash array. Space character index, 32, should be updated with the count."
                    },
                    {
                        "username": "piyushpandey6970",
                        "content": "[@Soham_Panchal](/Soham_Panchal) what to do for space\\n"
                    },
                    {
                        "username": "Qusai_issa",
                        "content": "\\' \\'"
                    },
                    {
                        "username": "M-Narendra",
                        "content": "no\\n"
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "Yes.\\n"
                    },
                    {
                        "username": "YASH_PARSANA",
                        "content": "**Please upvote if solution is useful**\\n\\nfull explanation of queation step by step solution brute force to optimal approach\\nExplained by googler\\n\\nhttps://youtu.be/qtVh-XEpsJo"
                    },
                    {
                        "username": "asfdg32",
                        "content": "It comes out to be wrong  when I submit my alg and tells me that it failed to process the input \"aa\" while I successfully get it right with the input \"aa\" in my local computer and the \"run code\" function in the website. Is it the website's bug? Or some differences between the \"run code\" and \"submit\" function exists. Or something is wrong with my code."
                    },
                    {
                        "username": "darrendsa06",
                        "content": "Im facing the same problem.\\n"
                    },
                    {
                        "username": "harshnayak580",
                        "content": "h\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for June, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/longest-substring-without-repeating-characters/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 3 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Sliding Window\n\n  \n**Approach 3:** Sliding Window Optimized\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1573301,
                "content": [
                    {
                        "username": "ktranada1403",
                        "content": "Bruh who tf sat down and wrote 987 testcases. This is sacrilegious. Go touch grass. See the world out there gang. This is not it. "
                    },
                    {
                        "username": "malinkov",
                        "content": "[@Mohamed-Kallel](/Mohamed-Kallel)  same XD"
                    },
                    {
                        "username": "malinkov",
                        "content": "LOL XD hahahhah yap, see the world fam XD hahahah"
                    },
                    {
                        "username": "Mohamed-Kallel",
                        "content": "the real pain  is when you see that 986/987 testcases passed "
                    },
                    {
                        "username": "jnatc1",
                        "content": "On god bro."
                    },
                    {
                        "username": "ktranada1403",
                        "content": "[@Eddiea6987](/Eddiea6987) im clearly joking "
                    },
                    {
                        "username": "user0915S",
                        "content": "bro, had all the time in the world\\n"
                    },
                    {
                        "username": "Himanshu_kmr24",
                        "content": "[@Eddiea6987](/Eddiea6987) So the important thing is touching grass :p"
                    },
                    {
                        "username": "aidenscoding",
                        "content": "Indeed. This should be flagged as hard. What\\'s wrong with people"
                    },
                    {
                        "username": "overbound",
                        "content": "I needed this."
                    },
                    {
                        "username": "sprodaturu",
                        "content": "[@Eddiea6987](/Eddiea6987) XD"
                    },
                    {
                        "username": "Eddiea6987",
                        "content": "so you being a programmer you cant think of an automated way to write all the test cases? what makes you think someone typed each  one? The dude probably spent 5 min to write a script and then went outside and touched grass. "
                    },
                    {
                        "username": "jlbroughton",
                        "content": "\\uD83D\\uDE02"
                    },
                    {
                        "username": "candypop8724",
                        "content": "bro fr man, i thought i got them all but fucking 987? what even"
                    },
                    {
                        "username": "user3327Ub",
                        "content": "You should stop using these overused jokes..."
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@rucola](/rucola) I think it is reffering to compiler time, not exercises time!"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "fr this is insane"
                    },
                    {
                        "username": "rucola",
                        "content": "Do you know the time limit? I have tried different approaches with c#, but they all run into \"Time Limit Exceeded\" for testcase 987 "
                    },
                    {
                        "username": "michaelg02",
                        "content": "The wording of the question was unclear for me. Example 3 does cover this where \"wke\" was the longest not \"wkew\", but the wording of the question suggests that the substring can have multiple of the same character as long as it is not repeating.\\n\\n\"wkew\" would pass because the substring does not have two w\\'s in a row.\\n\\n*Instead of:\\nGiven a string, find the length of the longest substring without repeating characters.*\\n\\n*I think this is a better wording:\\nGiven a string, find the length of the longest substring without **duplicate** characters.*\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Belyua",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) congratulations, you solved the problem. On leetcode there is a special section for solved problems"
                    },
                    {
                        "username": "ricko34",
                        "content": "[@mayank-01](/mayank-01) i think \\'kew\\' can\\'t be part of substring \\n "
                    },
                    {
                        "username": "ricko34",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) u have a good shortened solution, but this is not the right place \\n"
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "final=[]\\ndef chack(word):\\n    w=\"\"\\n    \\n    for i in word:\\n        if i in w:\\n           return\\n        else:\\n            w+=i\\n    final.append(w)\\n    \\n            \\n\\narry=\"pwwkew\"\\nfor i in range(len(arry)):\\n    for j in range(i,len(arry)):\\n        v=arry[i:j+1]\\n        chack(v)\\nlength=[]\\nfor i in final:\\n    length.append(len(i))\\nbig=max(length)\\nfor i in final:\\n    if big==len(i):\\n        print(i)\\n        break\\n    "
                    },
                    {
                        "username": "sandeep-p",
                        "content": "May be the companies that asked this question expected the candidate to be unclear and discuss, before jumping over the code?"
                    },
                    {
                        "username": "Med__think",
                        "content": "[@mayank-01](/mayank-01)  it i just one of the examples the motive is to find the length of longest substring without repeating characters"
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "what does repeating means? Something that happens more than once. I dont think it is unprecise, im not english native and yet was able to understand. And Examples are there to extend the wording. "
                    },
                    {
                        "username": "mayank-01",
                        "content": "Yes, I agree with you, I am also confused in example 3 there are 2 substrings \\'wke\\' and \\'kew\\' of same length, so this should be mentioned like it can be multiple substrings with same length....."
                    },
                    {
                        "username": "technologyaddicted",
                        "content": "Given \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\nI do not understand that in the Example # 3, it mentions 'wke' as the longest substring. Why not \"kew\" selected as the longest one? Help here is much appreciated."
                    },
                    {
                        "username": "VladoBradi",
                        "content": "Both answers are correct \"wke\" and \"kew\" but probably they choose just one (the first one because of characters line) for correct answer. "
                    },
                    {
                        "username": "lipingm",
                        "content": "1, [], max=0;\n2,[p], max =1;\n3,[p,w], max =2;\n4,[w], max=2;\n5,[w,k], max=2;\n6,[w,k,e], max=3;\n7,[k,e], max=3\n8,end\nSo max=3"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "[@somavik99](/somavik99) pke is subsequence not substring"
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@somavik99](/somavik99) Because it has to be the first instance of a substring, you kind have to read in between the line in mean here, otherwise it could be argued why not kew too!"
                    },
                    {
                        "username": "mohittyagi",
                        "content": "[@somavik99](/somavik99) \"the longest substring without repeating characters\""
                    },
                    {
                        "username": "somavik99",
                        "content": "[@ignorant_ppp](/ignorant_ppp)  My question is why not \"pke\" its total unique value."
                    },
                    {
                        "username": "ignorant_ppp",
                        "content": "you are suppose to return the length not the string\\n"
                    },
                    {
                        "username": "kauntey1O1",
                        "content": "because we would get \"wke\" first and \"kew\" is as the same length as \"wke\""
                    },
                    {
                        "username": "gerryhd",
                        "content": "I don't think that's relevant to the end result as both would return the length of 3."
                    },
                    {
                        "username": "momoxsalameh",
                        "content": "Take it as the longest sequence of non-identical character in the string"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Salheen Bakhet](/technologyaddicted) \\nMost people will scan from left to right and the result \"wke\" will appear first, but if you are used to scanning from right to left (like the habit of writing arabic, japan, etc.) then \"kwe\" this time appeared first."
                    },
                    {
                        "username": "manmitta",
                        "content": "We always starts with left side of string and when you checked \"pwwkew\" .. \"wke\" comes first ."
                    },
                    {
                        "username": "pstrait",
                        "content": "It doesn\\'t matter which substring, you need to return an integer not a substring."
                    },
                    {
                        "username": "amirhassan032",
                        "content": "it can be kew but wke comes first thats why it is assumed as answer"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "kew is also longest substring for sure but we would have considered it if it was scanned earlier"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "when we are iterating from the beginning of the string the we found the max substring before then why would we update the previous value with upcoming value if it still has the same length substring"
                    },
                    {
                        "username": "nancychauhan99",
                        "content": "focus is on the max length achieved rather than the substring itself"
                    },
                    {
                        "username": "ooPo",
                        "content": "Do not try to use brute force to pass the problem."
                    },
                    {
                        "username": "close27",
                        "content": "my brute force got accepted. https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3747943/brute-force-easy-to-understand/"
                    },
                    {
                        "username": "Kromydas",
                        "content": "the problem is that you are not limited from a - z, and can have A-Z as well as 0-9 and other chracters. this is a good approach if you are only limited to a-z. It will solve all the test cases except 985 - 987.\n\nhere is my code which implements your approach:\n```\nclass Solution {\npublic:\n    bool isCharacterInString(const string& str, char ch) {\n        for (char c : str) {\n            if (c == ch) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    int lengthOfLongestSubstring(string s) {\n        int n = s.size();\n        int maxi = 0;\n        for (int i = 0; i < n; i++) {\n            int var = min(26, n - i);\n            for (int j = 0; j < var; j++) {\n                string str = s.substr(i, j + 1);\n                string temp = \"\";\n                bool good = true;\n                for (int k = 0; k < str.size(); k++) {\n                    if (isCharacterInString(temp, str[k])) {\n                        good = false;\n                        break;\n                    } else {\n                        temp += str[k];\n                    }\n                }\n                if (good) {\n                    maxi = max(maxi, (int)str.size());\n                } else {\n                    break;\n                }\n            }\n        }\n        return maxi;\n    }\n};\n```\nagain, note that this does not work for this problem. nice thinking though!\n\nthe way i did it is by using hash sets, which gives you 2 for loops with at worst O(n^2) time (which won't happen). It involves using ```for (int i = 0; i < n; i++) {for int j = i; j < n; j++}```. "
                    },
                    {
                        "username": "ranbir7",
                        "content": "[@cartesPerforees](/cartesPerforees) I used deque"
                    },
                    {
                        "username": "ranbir7",
                        "content": "I used deque"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Or please, do use brute force. Brute force works just fine if you take adavantage of the fact that you're working with a finite alphabet. You can scan through all substrings of all sizes up to  $\\alpha$ where $\\alpha$ is the size of your alphabet (cause no substring could be larger than the full alphabet without repeats). Even the brutest of brute force in $O(\\alpha^2n)$ is comfortably accepted.\nWhen you don't listen to random people telling you how to think or not to think, you sometimes find solutions they didn't anticipate ;)"
                    },
                    {
                        "username": "media_overdosed",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) because it\\'s slow af (especially python)"
                    },
                    {
                        "username": "Anson_W",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) In fact, it can be passed by using unordered_map. Less than 1s."
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t)  the length of test case is 5 * 10^4 , brute force is N^2 . TLE"
                    },
                    {
                        "username": "whyevenquestion1t",
                        "content": "why not?\\n"
                    },
                    {
                        "username": "anthonyhuang",
                        "content": "I have some problem understanding the problem, this test case \"dvdf \"says the output should be 3, while I suppose it should be 2.\\n\\n\"dv\" or \"df\" is what I think. It should be substring not subsequence like the question mentioned. Should it confined to \"Consistent String\"?\\n\\n"
                    },
                    {
                        "username": "tsashokstar27",
                        "content": "[@ricko34](/ricko34) Because of longest sub string length if we use the dv it will be 2. But we have vdf with length 3."
                    },
                    {
                        "username": "omaute260902",
                        "content": "the testcase is correct. the substring for this test case would be \\'vdf\\' and the answer therefore would be 3\\n"
                    },
                    {
                        "username": "ricko34",
                        "content": "absolutely,  i  don\\'t understand why \\'d\\' is ignored "
                    },
                    {
                        "username": "Shazamct",
                        "content": "output should be \\'vdf\\' i.e. 3\\n"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "swagiuli",
                        "content": "[@nrjsuthar](/nrjsuthar) yes"
                    },
                    {
                        "username": "nrjsuthar",
                        "content": "vdf is the longest subsequence right?\\n"
                    },
                    {
                        "username": "EloiVega",
                        "content": "the answer is \\'vdf\\' which is of length 3"
                    },
                    {
                        "username": "manavjoshi1107",
                        "content": "vdf have length 3\\n"
                    },
                    {
                        "username": "mkraghava007",
                        "content": "d v & f are different characters together, hence ig it\\'s considering them together"
                    },
                    {
                        "username": "damajsam93",
                        "content": "vfd ==>3 "
                    },
                    {
                        "username": "abhiram__devisetti",
                        "content": "vdf is answer"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "cause \"vdf\" is the longest substring in the given string"
                    },
                    {
                        "username": "9819497296",
                        "content": "dvdf is a string and and the longest substring should be vdf thats why the longest length of a substring should be 3 i hope you understand"
                    },
                    {
                        "username": "dmoriasi",
                        "content": "The longest string is \"vdf\" You basically start from index 1. to the end. "
                    },
                    {
                        "username": "codebadger",
                        "content": "\"vdf\" is a valid substring"
                    },
                    {
                        "username": "uakrongrad",
                        "content": "I think the task could be better explained by asking the tester to find the length of the longest non repeating set of continous characters in the string."
                    },
                    {
                        "username": "firezdog",
                        "content": "\"continuous characters in a string\" -- that is, a substring (as opposed to a subsequence)"
                    },
                    {
                        "username": "juansymontano",
                        "content": "True. I was wondering what they meant too. After realizing it\\u2019s just longest unique it was quite easy to code. "
                    },
                    {
                        "username": "sanyuktakate",
                        "content": "Did anyone get an error as - *\" is not a valid value of type string* for an input which was a string with space (\" \")?"
                    },
                    {
                        "username": "janis__",
                        "content": "If you\\'re encountering an error on LeetCode that says \" \" is not a valid value of type string, it\\'s likely not an issue with the code you provided. Instead, ensure that when you\\'re testing your function on LeetCode, you\\'re inputting the string with spaces correctly. In the test input box, instead of just entering a space, you should enter the string with double quotes, like \" \". This ensures LeetCode recognizes it as a valid string input."
                    },
                    {
                        "username": "chirag2239",
                        "content": "what to do for \" \"?\\nI am just copying all the characters to hash array. Space character index, 32, should be updated with the count."
                    },
                    {
                        "username": "piyushpandey6970",
                        "content": "[@Soham_Panchal](/Soham_Panchal) what to do for space\\n"
                    },
                    {
                        "username": "Qusai_issa",
                        "content": "\\' \\'"
                    },
                    {
                        "username": "M-Narendra",
                        "content": "no\\n"
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "Yes.\\n"
                    },
                    {
                        "username": "YASH_PARSANA",
                        "content": "**Please upvote if solution is useful**\\n\\nfull explanation of queation step by step solution brute force to optimal approach\\nExplained by googler\\n\\nhttps://youtu.be/qtVh-XEpsJo"
                    },
                    {
                        "username": "asfdg32",
                        "content": "It comes out to be wrong  when I submit my alg and tells me that it failed to process the input \"aa\" while I successfully get it right with the input \"aa\" in my local computer and the \"run code\" function in the website. Is it the website's bug? Or some differences between the \"run code\" and \"submit\" function exists. Or something is wrong with my code."
                    },
                    {
                        "username": "darrendsa06",
                        "content": "Im facing the same problem.\\n"
                    },
                    {
                        "username": "harshnayak580",
                        "content": "h\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for June, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/longest-substring-without-repeating-characters/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 3 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Sliding Window\n\n  \n**Approach 3:** Sliding Window Optimized\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1567766,
                "content": [
                    {
                        "username": "ktranada1403",
                        "content": "Bruh who tf sat down and wrote 987 testcases. This is sacrilegious. Go touch grass. See the world out there gang. This is not it. "
                    },
                    {
                        "username": "malinkov",
                        "content": "[@Mohamed-Kallel](/Mohamed-Kallel)  same XD"
                    },
                    {
                        "username": "malinkov",
                        "content": "LOL XD hahahhah yap, see the world fam XD hahahah"
                    },
                    {
                        "username": "Mohamed-Kallel",
                        "content": "the real pain  is when you see that 986/987 testcases passed "
                    },
                    {
                        "username": "jnatc1",
                        "content": "On god bro."
                    },
                    {
                        "username": "ktranada1403",
                        "content": "[@Eddiea6987](/Eddiea6987) im clearly joking "
                    },
                    {
                        "username": "user0915S",
                        "content": "bro, had all the time in the world\\n"
                    },
                    {
                        "username": "Himanshu_kmr24",
                        "content": "[@Eddiea6987](/Eddiea6987) So the important thing is touching grass :p"
                    },
                    {
                        "username": "aidenscoding",
                        "content": "Indeed. This should be flagged as hard. What\\'s wrong with people"
                    },
                    {
                        "username": "overbound",
                        "content": "I needed this."
                    },
                    {
                        "username": "sprodaturu",
                        "content": "[@Eddiea6987](/Eddiea6987) XD"
                    },
                    {
                        "username": "Eddiea6987",
                        "content": "so you being a programmer you cant think of an automated way to write all the test cases? what makes you think someone typed each  one? The dude probably spent 5 min to write a script and then went outside and touched grass. "
                    },
                    {
                        "username": "jlbroughton",
                        "content": "\\uD83D\\uDE02"
                    },
                    {
                        "username": "candypop8724",
                        "content": "bro fr man, i thought i got them all but fucking 987? what even"
                    },
                    {
                        "username": "user3327Ub",
                        "content": "You should stop using these overused jokes..."
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@rucola](/rucola) I think it is reffering to compiler time, not exercises time!"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "fr this is insane"
                    },
                    {
                        "username": "rucola",
                        "content": "Do you know the time limit? I have tried different approaches with c#, but they all run into \"Time Limit Exceeded\" for testcase 987 "
                    },
                    {
                        "username": "michaelg02",
                        "content": "The wording of the question was unclear for me. Example 3 does cover this where \"wke\" was the longest not \"wkew\", but the wording of the question suggests that the substring can have multiple of the same character as long as it is not repeating.\\n\\n\"wkew\" would pass because the substring does not have two w\\'s in a row.\\n\\n*Instead of:\\nGiven a string, find the length of the longest substring without repeating characters.*\\n\\n*I think this is a better wording:\\nGiven a string, find the length of the longest substring without **duplicate** characters.*\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Belyua",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) congratulations, you solved the problem. On leetcode there is a special section for solved problems"
                    },
                    {
                        "username": "ricko34",
                        "content": "[@mayank-01](/mayank-01) i think \\'kew\\' can\\'t be part of substring \\n "
                    },
                    {
                        "username": "ricko34",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) u have a good shortened solution, but this is not the right place \\n"
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "final=[]\\ndef chack(word):\\n    w=\"\"\\n    \\n    for i in word:\\n        if i in w:\\n           return\\n        else:\\n            w+=i\\n    final.append(w)\\n    \\n            \\n\\narry=\"pwwkew\"\\nfor i in range(len(arry)):\\n    for j in range(i,len(arry)):\\n        v=arry[i:j+1]\\n        chack(v)\\nlength=[]\\nfor i in final:\\n    length.append(len(i))\\nbig=max(length)\\nfor i in final:\\n    if big==len(i):\\n        print(i)\\n        break\\n    "
                    },
                    {
                        "username": "sandeep-p",
                        "content": "May be the companies that asked this question expected the candidate to be unclear and discuss, before jumping over the code?"
                    },
                    {
                        "username": "Med__think",
                        "content": "[@mayank-01](/mayank-01)  it i just one of the examples the motive is to find the length of longest substring without repeating characters"
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "what does repeating means? Something that happens more than once. I dont think it is unprecise, im not english native and yet was able to understand. And Examples are there to extend the wording. "
                    },
                    {
                        "username": "mayank-01",
                        "content": "Yes, I agree with you, I am also confused in example 3 there are 2 substrings \\'wke\\' and \\'kew\\' of same length, so this should be mentioned like it can be multiple substrings with same length....."
                    },
                    {
                        "username": "technologyaddicted",
                        "content": "Given \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\nI do not understand that in the Example # 3, it mentions 'wke' as the longest substring. Why not \"kew\" selected as the longest one? Help here is much appreciated."
                    },
                    {
                        "username": "VladoBradi",
                        "content": "Both answers are correct \"wke\" and \"kew\" but probably they choose just one (the first one because of characters line) for correct answer. "
                    },
                    {
                        "username": "lipingm",
                        "content": "1, [], max=0;\n2,[p], max =1;\n3,[p,w], max =2;\n4,[w], max=2;\n5,[w,k], max=2;\n6,[w,k,e], max=3;\n7,[k,e], max=3\n8,end\nSo max=3"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "[@somavik99](/somavik99) pke is subsequence not substring"
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@somavik99](/somavik99) Because it has to be the first instance of a substring, you kind have to read in between the line in mean here, otherwise it could be argued why not kew too!"
                    },
                    {
                        "username": "mohittyagi",
                        "content": "[@somavik99](/somavik99) \"the longest substring without repeating characters\""
                    },
                    {
                        "username": "somavik99",
                        "content": "[@ignorant_ppp](/ignorant_ppp)  My question is why not \"pke\" its total unique value."
                    },
                    {
                        "username": "ignorant_ppp",
                        "content": "you are suppose to return the length not the string\\n"
                    },
                    {
                        "username": "kauntey1O1",
                        "content": "because we would get \"wke\" first and \"kew\" is as the same length as \"wke\""
                    },
                    {
                        "username": "gerryhd",
                        "content": "I don't think that's relevant to the end result as both would return the length of 3."
                    },
                    {
                        "username": "momoxsalameh",
                        "content": "Take it as the longest sequence of non-identical character in the string"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Salheen Bakhet](/technologyaddicted) \\nMost people will scan from left to right and the result \"wke\" will appear first, but if you are used to scanning from right to left (like the habit of writing arabic, japan, etc.) then \"kwe\" this time appeared first."
                    },
                    {
                        "username": "manmitta",
                        "content": "We always starts with left side of string and when you checked \"pwwkew\" .. \"wke\" comes first ."
                    },
                    {
                        "username": "pstrait",
                        "content": "It doesn\\'t matter which substring, you need to return an integer not a substring."
                    },
                    {
                        "username": "amirhassan032",
                        "content": "it can be kew but wke comes first thats why it is assumed as answer"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "kew is also longest substring for sure but we would have considered it if it was scanned earlier"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "when we are iterating from the beginning of the string the we found the max substring before then why would we update the previous value with upcoming value if it still has the same length substring"
                    },
                    {
                        "username": "nancychauhan99",
                        "content": "focus is on the max length achieved rather than the substring itself"
                    },
                    {
                        "username": "ooPo",
                        "content": "Do not try to use brute force to pass the problem."
                    },
                    {
                        "username": "close27",
                        "content": "my brute force got accepted. https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3747943/brute-force-easy-to-understand/"
                    },
                    {
                        "username": "Kromydas",
                        "content": "the problem is that you are not limited from a - z, and can have A-Z as well as 0-9 and other chracters. this is a good approach if you are only limited to a-z. It will solve all the test cases except 985 - 987.\n\nhere is my code which implements your approach:\n```\nclass Solution {\npublic:\n    bool isCharacterInString(const string& str, char ch) {\n        for (char c : str) {\n            if (c == ch) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    int lengthOfLongestSubstring(string s) {\n        int n = s.size();\n        int maxi = 0;\n        for (int i = 0; i < n; i++) {\n            int var = min(26, n - i);\n            for (int j = 0; j < var; j++) {\n                string str = s.substr(i, j + 1);\n                string temp = \"\";\n                bool good = true;\n                for (int k = 0; k < str.size(); k++) {\n                    if (isCharacterInString(temp, str[k])) {\n                        good = false;\n                        break;\n                    } else {\n                        temp += str[k];\n                    }\n                }\n                if (good) {\n                    maxi = max(maxi, (int)str.size());\n                } else {\n                    break;\n                }\n            }\n        }\n        return maxi;\n    }\n};\n```\nagain, note that this does not work for this problem. nice thinking though!\n\nthe way i did it is by using hash sets, which gives you 2 for loops with at worst O(n^2) time (which won't happen). It involves using ```for (int i = 0; i < n; i++) {for int j = i; j < n; j++}```. "
                    },
                    {
                        "username": "ranbir7",
                        "content": "[@cartesPerforees](/cartesPerforees) I used deque"
                    },
                    {
                        "username": "ranbir7",
                        "content": "I used deque"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Or please, do use brute force. Brute force works just fine if you take adavantage of the fact that you're working with a finite alphabet. You can scan through all substrings of all sizes up to  $\\alpha$ where $\\alpha$ is the size of your alphabet (cause no substring could be larger than the full alphabet without repeats). Even the brutest of brute force in $O(\\alpha^2n)$ is comfortably accepted.\nWhen you don't listen to random people telling you how to think or not to think, you sometimes find solutions they didn't anticipate ;)"
                    },
                    {
                        "username": "media_overdosed",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) because it\\'s slow af (especially python)"
                    },
                    {
                        "username": "Anson_W",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) In fact, it can be passed by using unordered_map. Less than 1s."
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t)  the length of test case is 5 * 10^4 , brute force is N^2 . TLE"
                    },
                    {
                        "username": "whyevenquestion1t",
                        "content": "why not?\\n"
                    },
                    {
                        "username": "anthonyhuang",
                        "content": "I have some problem understanding the problem, this test case \"dvdf \"says the output should be 3, while I suppose it should be 2.\\n\\n\"dv\" or \"df\" is what I think. It should be substring not subsequence like the question mentioned. Should it confined to \"Consistent String\"?\\n\\n"
                    },
                    {
                        "username": "tsashokstar27",
                        "content": "[@ricko34](/ricko34) Because of longest sub string length if we use the dv it will be 2. But we have vdf with length 3."
                    },
                    {
                        "username": "omaute260902",
                        "content": "the testcase is correct. the substring for this test case would be \\'vdf\\' and the answer therefore would be 3\\n"
                    },
                    {
                        "username": "ricko34",
                        "content": "absolutely,  i  don\\'t understand why \\'d\\' is ignored "
                    },
                    {
                        "username": "Shazamct",
                        "content": "output should be \\'vdf\\' i.e. 3\\n"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "swagiuli",
                        "content": "[@nrjsuthar](/nrjsuthar) yes"
                    },
                    {
                        "username": "nrjsuthar",
                        "content": "vdf is the longest subsequence right?\\n"
                    },
                    {
                        "username": "EloiVega",
                        "content": "the answer is \\'vdf\\' which is of length 3"
                    },
                    {
                        "username": "manavjoshi1107",
                        "content": "vdf have length 3\\n"
                    },
                    {
                        "username": "mkraghava007",
                        "content": "d v & f are different characters together, hence ig it\\'s considering them together"
                    },
                    {
                        "username": "damajsam93",
                        "content": "vfd ==>3 "
                    },
                    {
                        "username": "abhiram__devisetti",
                        "content": "vdf is answer"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "cause \"vdf\" is the longest substring in the given string"
                    },
                    {
                        "username": "9819497296",
                        "content": "dvdf is a string and and the longest substring should be vdf thats why the longest length of a substring should be 3 i hope you understand"
                    },
                    {
                        "username": "dmoriasi",
                        "content": "The longest string is \"vdf\" You basically start from index 1. to the end. "
                    },
                    {
                        "username": "codebadger",
                        "content": "\"vdf\" is a valid substring"
                    },
                    {
                        "username": "uakrongrad",
                        "content": "I think the task could be better explained by asking the tester to find the length of the longest non repeating set of continous characters in the string."
                    },
                    {
                        "username": "firezdog",
                        "content": "\"continuous characters in a string\" -- that is, a substring (as opposed to a subsequence)"
                    },
                    {
                        "username": "juansymontano",
                        "content": "True. I was wondering what they meant too. After realizing it\\u2019s just longest unique it was quite easy to code. "
                    },
                    {
                        "username": "sanyuktakate",
                        "content": "Did anyone get an error as - *\" is not a valid value of type string* for an input which was a string with space (\" \")?"
                    },
                    {
                        "username": "janis__",
                        "content": "If you\\'re encountering an error on LeetCode that says \" \" is not a valid value of type string, it\\'s likely not an issue with the code you provided. Instead, ensure that when you\\'re testing your function on LeetCode, you\\'re inputting the string with spaces correctly. In the test input box, instead of just entering a space, you should enter the string with double quotes, like \" \". This ensures LeetCode recognizes it as a valid string input."
                    },
                    {
                        "username": "chirag2239",
                        "content": "what to do for \" \"?\\nI am just copying all the characters to hash array. Space character index, 32, should be updated with the count."
                    },
                    {
                        "username": "piyushpandey6970",
                        "content": "[@Soham_Panchal](/Soham_Panchal) what to do for space\\n"
                    },
                    {
                        "username": "Qusai_issa",
                        "content": "\\' \\'"
                    },
                    {
                        "username": "M-Narendra",
                        "content": "no\\n"
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "Yes.\\n"
                    },
                    {
                        "username": "YASH_PARSANA",
                        "content": "**Please upvote if solution is useful**\\n\\nfull explanation of queation step by step solution brute force to optimal approach\\nExplained by googler\\n\\nhttps://youtu.be/qtVh-XEpsJo"
                    },
                    {
                        "username": "asfdg32",
                        "content": "It comes out to be wrong  when I submit my alg and tells me that it failed to process the input \"aa\" while I successfully get it right with the input \"aa\" in my local computer and the \"run code\" function in the website. Is it the website's bug? Or some differences between the \"run code\" and \"submit\" function exists. Or something is wrong with my code."
                    },
                    {
                        "username": "darrendsa06",
                        "content": "Im facing the same problem.\\n"
                    },
                    {
                        "username": "harshnayak580",
                        "content": "h\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for June, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/longest-substring-without-repeating-characters/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 3 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Sliding Window\n\n  \n**Approach 3:** Sliding Window Optimized\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1568797,
                "content": [
                    {
                        "username": "ktranada1403",
                        "content": "Bruh who tf sat down and wrote 987 testcases. This is sacrilegious. Go touch grass. See the world out there gang. This is not it. "
                    },
                    {
                        "username": "malinkov",
                        "content": "[@Mohamed-Kallel](/Mohamed-Kallel)  same XD"
                    },
                    {
                        "username": "malinkov",
                        "content": "LOL XD hahahhah yap, see the world fam XD hahahah"
                    },
                    {
                        "username": "Mohamed-Kallel",
                        "content": "the real pain  is when you see that 986/987 testcases passed "
                    },
                    {
                        "username": "jnatc1",
                        "content": "On god bro."
                    },
                    {
                        "username": "ktranada1403",
                        "content": "[@Eddiea6987](/Eddiea6987) im clearly joking "
                    },
                    {
                        "username": "user0915S",
                        "content": "bro, had all the time in the world\\n"
                    },
                    {
                        "username": "Himanshu_kmr24",
                        "content": "[@Eddiea6987](/Eddiea6987) So the important thing is touching grass :p"
                    },
                    {
                        "username": "aidenscoding",
                        "content": "Indeed. This should be flagged as hard. What\\'s wrong with people"
                    },
                    {
                        "username": "overbound",
                        "content": "I needed this."
                    },
                    {
                        "username": "sprodaturu",
                        "content": "[@Eddiea6987](/Eddiea6987) XD"
                    },
                    {
                        "username": "Eddiea6987",
                        "content": "so you being a programmer you cant think of an automated way to write all the test cases? what makes you think someone typed each  one? The dude probably spent 5 min to write a script and then went outside and touched grass. "
                    },
                    {
                        "username": "jlbroughton",
                        "content": "\\uD83D\\uDE02"
                    },
                    {
                        "username": "candypop8724",
                        "content": "bro fr man, i thought i got them all but fucking 987? what even"
                    },
                    {
                        "username": "user3327Ub",
                        "content": "You should stop using these overused jokes..."
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@rucola](/rucola) I think it is reffering to compiler time, not exercises time!"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "fr this is insane"
                    },
                    {
                        "username": "rucola",
                        "content": "Do you know the time limit? I have tried different approaches with c#, but they all run into \"Time Limit Exceeded\" for testcase 987 "
                    },
                    {
                        "username": "michaelg02",
                        "content": "The wording of the question was unclear for me. Example 3 does cover this where \"wke\" was the longest not \"wkew\", but the wording of the question suggests that the substring can have multiple of the same character as long as it is not repeating.\\n\\n\"wkew\" would pass because the substring does not have two w\\'s in a row.\\n\\n*Instead of:\\nGiven a string, find the length of the longest substring without repeating characters.*\\n\\n*I think this is a better wording:\\nGiven a string, find the length of the longest substring without **duplicate** characters.*\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Belyua",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) congratulations, you solved the problem. On leetcode there is a special section for solved problems"
                    },
                    {
                        "username": "ricko34",
                        "content": "[@mayank-01](/mayank-01) i think \\'kew\\' can\\'t be part of substring \\n "
                    },
                    {
                        "username": "ricko34",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) u have a good shortened solution, but this is not the right place \\n"
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "final=[]\\ndef chack(word):\\n    w=\"\"\\n    \\n    for i in word:\\n        if i in w:\\n           return\\n        else:\\n            w+=i\\n    final.append(w)\\n    \\n            \\n\\narry=\"pwwkew\"\\nfor i in range(len(arry)):\\n    for j in range(i,len(arry)):\\n        v=arry[i:j+1]\\n        chack(v)\\nlength=[]\\nfor i in final:\\n    length.append(len(i))\\nbig=max(length)\\nfor i in final:\\n    if big==len(i):\\n        print(i)\\n        break\\n    "
                    },
                    {
                        "username": "sandeep-p",
                        "content": "May be the companies that asked this question expected the candidate to be unclear and discuss, before jumping over the code?"
                    },
                    {
                        "username": "Med__think",
                        "content": "[@mayank-01](/mayank-01)  it i just one of the examples the motive is to find the length of longest substring without repeating characters"
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "what does repeating means? Something that happens more than once. I dont think it is unprecise, im not english native and yet was able to understand. And Examples are there to extend the wording. "
                    },
                    {
                        "username": "mayank-01",
                        "content": "Yes, I agree with you, I am also confused in example 3 there are 2 substrings \\'wke\\' and \\'kew\\' of same length, so this should be mentioned like it can be multiple substrings with same length....."
                    },
                    {
                        "username": "technologyaddicted",
                        "content": "Given \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\nI do not understand that in the Example # 3, it mentions 'wke' as the longest substring. Why not \"kew\" selected as the longest one? Help here is much appreciated."
                    },
                    {
                        "username": "VladoBradi",
                        "content": "Both answers are correct \"wke\" and \"kew\" but probably they choose just one (the first one because of characters line) for correct answer. "
                    },
                    {
                        "username": "lipingm",
                        "content": "1, [], max=0;\n2,[p], max =1;\n3,[p,w], max =2;\n4,[w], max=2;\n5,[w,k], max=2;\n6,[w,k,e], max=3;\n7,[k,e], max=3\n8,end\nSo max=3"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "[@somavik99](/somavik99) pke is subsequence not substring"
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@somavik99](/somavik99) Because it has to be the first instance of a substring, you kind have to read in between the line in mean here, otherwise it could be argued why not kew too!"
                    },
                    {
                        "username": "mohittyagi",
                        "content": "[@somavik99](/somavik99) \"the longest substring without repeating characters\""
                    },
                    {
                        "username": "somavik99",
                        "content": "[@ignorant_ppp](/ignorant_ppp)  My question is why not \"pke\" its total unique value."
                    },
                    {
                        "username": "ignorant_ppp",
                        "content": "you are suppose to return the length not the string\\n"
                    },
                    {
                        "username": "kauntey1O1",
                        "content": "because we would get \"wke\" first and \"kew\" is as the same length as \"wke\""
                    },
                    {
                        "username": "gerryhd",
                        "content": "I don't think that's relevant to the end result as both would return the length of 3."
                    },
                    {
                        "username": "momoxsalameh",
                        "content": "Take it as the longest sequence of non-identical character in the string"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Salheen Bakhet](/technologyaddicted) \\nMost people will scan from left to right and the result \"wke\" will appear first, but if you are used to scanning from right to left (like the habit of writing arabic, japan, etc.) then \"kwe\" this time appeared first."
                    },
                    {
                        "username": "manmitta",
                        "content": "We always starts with left side of string and when you checked \"pwwkew\" .. \"wke\" comes first ."
                    },
                    {
                        "username": "pstrait",
                        "content": "It doesn\\'t matter which substring, you need to return an integer not a substring."
                    },
                    {
                        "username": "amirhassan032",
                        "content": "it can be kew but wke comes first thats why it is assumed as answer"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "kew is also longest substring for sure but we would have considered it if it was scanned earlier"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "when we are iterating from the beginning of the string the we found the max substring before then why would we update the previous value with upcoming value if it still has the same length substring"
                    },
                    {
                        "username": "nancychauhan99",
                        "content": "focus is on the max length achieved rather than the substring itself"
                    },
                    {
                        "username": "ooPo",
                        "content": "Do not try to use brute force to pass the problem."
                    },
                    {
                        "username": "close27",
                        "content": "my brute force got accepted. https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3747943/brute-force-easy-to-understand/"
                    },
                    {
                        "username": "Kromydas",
                        "content": "the problem is that you are not limited from a - z, and can have A-Z as well as 0-9 and other chracters. this is a good approach if you are only limited to a-z. It will solve all the test cases except 985 - 987.\n\nhere is my code which implements your approach:\n```\nclass Solution {\npublic:\n    bool isCharacterInString(const string& str, char ch) {\n        for (char c : str) {\n            if (c == ch) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    int lengthOfLongestSubstring(string s) {\n        int n = s.size();\n        int maxi = 0;\n        for (int i = 0; i < n; i++) {\n            int var = min(26, n - i);\n            for (int j = 0; j < var; j++) {\n                string str = s.substr(i, j + 1);\n                string temp = \"\";\n                bool good = true;\n                for (int k = 0; k < str.size(); k++) {\n                    if (isCharacterInString(temp, str[k])) {\n                        good = false;\n                        break;\n                    } else {\n                        temp += str[k];\n                    }\n                }\n                if (good) {\n                    maxi = max(maxi, (int)str.size());\n                } else {\n                    break;\n                }\n            }\n        }\n        return maxi;\n    }\n};\n```\nagain, note that this does not work for this problem. nice thinking though!\n\nthe way i did it is by using hash sets, which gives you 2 for loops with at worst O(n^2) time (which won't happen). It involves using ```for (int i = 0; i < n; i++) {for int j = i; j < n; j++}```. "
                    },
                    {
                        "username": "ranbir7",
                        "content": "[@cartesPerforees](/cartesPerforees) I used deque"
                    },
                    {
                        "username": "ranbir7",
                        "content": "I used deque"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Or please, do use brute force. Brute force works just fine if you take adavantage of the fact that you're working with a finite alphabet. You can scan through all substrings of all sizes up to  $\\alpha$ where $\\alpha$ is the size of your alphabet (cause no substring could be larger than the full alphabet without repeats). Even the brutest of brute force in $O(\\alpha^2n)$ is comfortably accepted.\nWhen you don't listen to random people telling you how to think or not to think, you sometimes find solutions they didn't anticipate ;)"
                    },
                    {
                        "username": "media_overdosed",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) because it\\'s slow af (especially python)"
                    },
                    {
                        "username": "Anson_W",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) In fact, it can be passed by using unordered_map. Less than 1s."
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t)  the length of test case is 5 * 10^4 , brute force is N^2 . TLE"
                    },
                    {
                        "username": "whyevenquestion1t",
                        "content": "why not?\\n"
                    },
                    {
                        "username": "anthonyhuang",
                        "content": "I have some problem understanding the problem, this test case \"dvdf \"says the output should be 3, while I suppose it should be 2.\\n\\n\"dv\" or \"df\" is what I think. It should be substring not subsequence like the question mentioned. Should it confined to \"Consistent String\"?\\n\\n"
                    },
                    {
                        "username": "tsashokstar27",
                        "content": "[@ricko34](/ricko34) Because of longest sub string length if we use the dv it will be 2. But we have vdf with length 3."
                    },
                    {
                        "username": "omaute260902",
                        "content": "the testcase is correct. the substring for this test case would be \\'vdf\\' and the answer therefore would be 3\\n"
                    },
                    {
                        "username": "ricko34",
                        "content": "absolutely,  i  don\\'t understand why \\'d\\' is ignored "
                    },
                    {
                        "username": "Shazamct",
                        "content": "output should be \\'vdf\\' i.e. 3\\n"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "swagiuli",
                        "content": "[@nrjsuthar](/nrjsuthar) yes"
                    },
                    {
                        "username": "nrjsuthar",
                        "content": "vdf is the longest subsequence right?\\n"
                    },
                    {
                        "username": "EloiVega",
                        "content": "the answer is \\'vdf\\' which is of length 3"
                    },
                    {
                        "username": "manavjoshi1107",
                        "content": "vdf have length 3\\n"
                    },
                    {
                        "username": "mkraghava007",
                        "content": "d v & f are different characters together, hence ig it\\'s considering them together"
                    },
                    {
                        "username": "damajsam93",
                        "content": "vfd ==>3 "
                    },
                    {
                        "username": "abhiram__devisetti",
                        "content": "vdf is answer"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "cause \"vdf\" is the longest substring in the given string"
                    },
                    {
                        "username": "9819497296",
                        "content": "dvdf is a string and and the longest substring should be vdf thats why the longest length of a substring should be 3 i hope you understand"
                    },
                    {
                        "username": "dmoriasi",
                        "content": "The longest string is \"vdf\" You basically start from index 1. to the end. "
                    },
                    {
                        "username": "codebadger",
                        "content": "\"vdf\" is a valid substring"
                    },
                    {
                        "username": "uakrongrad",
                        "content": "I think the task could be better explained by asking the tester to find the length of the longest non repeating set of continous characters in the string."
                    },
                    {
                        "username": "firezdog",
                        "content": "\"continuous characters in a string\" -- that is, a substring (as opposed to a subsequence)"
                    },
                    {
                        "username": "juansymontano",
                        "content": "True. I was wondering what they meant too. After realizing it\\u2019s just longest unique it was quite easy to code. "
                    },
                    {
                        "username": "sanyuktakate",
                        "content": "Did anyone get an error as - *\" is not a valid value of type string* for an input which was a string with space (\" \")?"
                    },
                    {
                        "username": "janis__",
                        "content": "If you\\'re encountering an error on LeetCode that says \" \" is not a valid value of type string, it\\'s likely not an issue with the code you provided. Instead, ensure that when you\\'re testing your function on LeetCode, you\\'re inputting the string with spaces correctly. In the test input box, instead of just entering a space, you should enter the string with double quotes, like \" \". This ensures LeetCode recognizes it as a valid string input."
                    },
                    {
                        "username": "chirag2239",
                        "content": "what to do for \" \"?\\nI am just copying all the characters to hash array. Space character index, 32, should be updated with the count."
                    },
                    {
                        "username": "piyushpandey6970",
                        "content": "[@Soham_Panchal](/Soham_Panchal) what to do for space\\n"
                    },
                    {
                        "username": "Qusai_issa",
                        "content": "\\' \\'"
                    },
                    {
                        "username": "M-Narendra",
                        "content": "no\\n"
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "Yes.\\n"
                    },
                    {
                        "username": "YASH_PARSANA",
                        "content": "**Please upvote if solution is useful**\\n\\nfull explanation of queation step by step solution brute force to optimal approach\\nExplained by googler\\n\\nhttps://youtu.be/qtVh-XEpsJo"
                    },
                    {
                        "username": "asfdg32",
                        "content": "It comes out to be wrong  when I submit my alg and tells me that it failed to process the input \"aa\" while I successfully get it right with the input \"aa\" in my local computer and the \"run code\" function in the website. Is it the website's bug? Or some differences between the \"run code\" and \"submit\" function exists. Or something is wrong with my code."
                    },
                    {
                        "username": "darrendsa06",
                        "content": "Im facing the same problem.\\n"
                    },
                    {
                        "username": "harshnayak580",
                        "content": "h\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for June, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/longest-substring-without-repeating-characters/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 3 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Sliding Window\n\n  \n**Approach 3:** Sliding Window Optimized\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1566226,
                "content": [
                    {
                        "username": "ktranada1403",
                        "content": "Bruh who tf sat down and wrote 987 testcases. This is sacrilegious. Go touch grass. See the world out there gang. This is not it. "
                    },
                    {
                        "username": "malinkov",
                        "content": "[@Mohamed-Kallel](/Mohamed-Kallel)  same XD"
                    },
                    {
                        "username": "malinkov",
                        "content": "LOL XD hahahhah yap, see the world fam XD hahahah"
                    },
                    {
                        "username": "Mohamed-Kallel",
                        "content": "the real pain  is when you see that 986/987 testcases passed "
                    },
                    {
                        "username": "jnatc1",
                        "content": "On god bro."
                    },
                    {
                        "username": "ktranada1403",
                        "content": "[@Eddiea6987](/Eddiea6987) im clearly joking "
                    },
                    {
                        "username": "user0915S",
                        "content": "bro, had all the time in the world\\n"
                    },
                    {
                        "username": "Himanshu_kmr24",
                        "content": "[@Eddiea6987](/Eddiea6987) So the important thing is touching grass :p"
                    },
                    {
                        "username": "aidenscoding",
                        "content": "Indeed. This should be flagged as hard. What\\'s wrong with people"
                    },
                    {
                        "username": "overbound",
                        "content": "I needed this."
                    },
                    {
                        "username": "sprodaturu",
                        "content": "[@Eddiea6987](/Eddiea6987) XD"
                    },
                    {
                        "username": "Eddiea6987",
                        "content": "so you being a programmer you cant think of an automated way to write all the test cases? what makes you think someone typed each  one? The dude probably spent 5 min to write a script and then went outside and touched grass. "
                    },
                    {
                        "username": "jlbroughton",
                        "content": "\\uD83D\\uDE02"
                    },
                    {
                        "username": "candypop8724",
                        "content": "bro fr man, i thought i got them all but fucking 987? what even"
                    },
                    {
                        "username": "user3327Ub",
                        "content": "You should stop using these overused jokes..."
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@rucola](/rucola) I think it is reffering to compiler time, not exercises time!"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "fr this is insane"
                    },
                    {
                        "username": "rucola",
                        "content": "Do you know the time limit? I have tried different approaches with c#, but they all run into \"Time Limit Exceeded\" for testcase 987 "
                    },
                    {
                        "username": "michaelg02",
                        "content": "The wording of the question was unclear for me. Example 3 does cover this where \"wke\" was the longest not \"wkew\", but the wording of the question suggests that the substring can have multiple of the same character as long as it is not repeating.\\n\\n\"wkew\" would pass because the substring does not have two w\\'s in a row.\\n\\n*Instead of:\\nGiven a string, find the length of the longest substring without repeating characters.*\\n\\n*I think this is a better wording:\\nGiven a string, find the length of the longest substring without **duplicate** characters.*\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Belyua",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) congratulations, you solved the problem. On leetcode there is a special section for solved problems"
                    },
                    {
                        "username": "ricko34",
                        "content": "[@mayank-01](/mayank-01) i think \\'kew\\' can\\'t be part of substring \\n "
                    },
                    {
                        "username": "ricko34",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) u have a good shortened solution, but this is not the right place \\n"
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "final=[]\\ndef chack(word):\\n    w=\"\"\\n    \\n    for i in word:\\n        if i in w:\\n           return\\n        else:\\n            w+=i\\n    final.append(w)\\n    \\n            \\n\\narry=\"pwwkew\"\\nfor i in range(len(arry)):\\n    for j in range(i,len(arry)):\\n        v=arry[i:j+1]\\n        chack(v)\\nlength=[]\\nfor i in final:\\n    length.append(len(i))\\nbig=max(length)\\nfor i in final:\\n    if big==len(i):\\n        print(i)\\n        break\\n    "
                    },
                    {
                        "username": "sandeep-p",
                        "content": "May be the companies that asked this question expected the candidate to be unclear and discuss, before jumping over the code?"
                    },
                    {
                        "username": "Med__think",
                        "content": "[@mayank-01](/mayank-01)  it i just one of the examples the motive is to find the length of longest substring without repeating characters"
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "what does repeating means? Something that happens more than once. I dont think it is unprecise, im not english native and yet was able to understand. And Examples are there to extend the wording. "
                    },
                    {
                        "username": "mayank-01",
                        "content": "Yes, I agree with you, I am also confused in example 3 there are 2 substrings \\'wke\\' and \\'kew\\' of same length, so this should be mentioned like it can be multiple substrings with same length....."
                    },
                    {
                        "username": "technologyaddicted",
                        "content": "Given \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\nI do not understand that in the Example # 3, it mentions 'wke' as the longest substring. Why not \"kew\" selected as the longest one? Help here is much appreciated."
                    },
                    {
                        "username": "VladoBradi",
                        "content": "Both answers are correct \"wke\" and \"kew\" but probably they choose just one (the first one because of characters line) for correct answer. "
                    },
                    {
                        "username": "lipingm",
                        "content": "1, [], max=0;\n2,[p], max =1;\n3,[p,w], max =2;\n4,[w], max=2;\n5,[w,k], max=2;\n6,[w,k,e], max=3;\n7,[k,e], max=3\n8,end\nSo max=3"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "[@somavik99](/somavik99) pke is subsequence not substring"
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@somavik99](/somavik99) Because it has to be the first instance of a substring, you kind have to read in between the line in mean here, otherwise it could be argued why not kew too!"
                    },
                    {
                        "username": "mohittyagi",
                        "content": "[@somavik99](/somavik99) \"the longest substring without repeating characters\""
                    },
                    {
                        "username": "somavik99",
                        "content": "[@ignorant_ppp](/ignorant_ppp)  My question is why not \"pke\" its total unique value."
                    },
                    {
                        "username": "ignorant_ppp",
                        "content": "you are suppose to return the length not the string\\n"
                    },
                    {
                        "username": "kauntey1O1",
                        "content": "because we would get \"wke\" first and \"kew\" is as the same length as \"wke\""
                    },
                    {
                        "username": "gerryhd",
                        "content": "I don't think that's relevant to the end result as both would return the length of 3."
                    },
                    {
                        "username": "momoxsalameh",
                        "content": "Take it as the longest sequence of non-identical character in the string"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Salheen Bakhet](/technologyaddicted) \\nMost people will scan from left to right and the result \"wke\" will appear first, but if you are used to scanning from right to left (like the habit of writing arabic, japan, etc.) then \"kwe\" this time appeared first."
                    },
                    {
                        "username": "manmitta",
                        "content": "We always starts with left side of string and when you checked \"pwwkew\" .. \"wke\" comes first ."
                    },
                    {
                        "username": "pstrait",
                        "content": "It doesn\\'t matter which substring, you need to return an integer not a substring."
                    },
                    {
                        "username": "amirhassan032",
                        "content": "it can be kew but wke comes first thats why it is assumed as answer"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "kew is also longest substring for sure but we would have considered it if it was scanned earlier"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "when we are iterating from the beginning of the string the we found the max substring before then why would we update the previous value with upcoming value if it still has the same length substring"
                    },
                    {
                        "username": "nancychauhan99",
                        "content": "focus is on the max length achieved rather than the substring itself"
                    },
                    {
                        "username": "ooPo",
                        "content": "Do not try to use brute force to pass the problem."
                    },
                    {
                        "username": "close27",
                        "content": "my brute force got accepted. https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3747943/brute-force-easy-to-understand/"
                    },
                    {
                        "username": "Kromydas",
                        "content": "the problem is that you are not limited from a - z, and can have A-Z as well as 0-9 and other chracters. this is a good approach if you are only limited to a-z. It will solve all the test cases except 985 - 987.\n\nhere is my code which implements your approach:\n```\nclass Solution {\npublic:\n    bool isCharacterInString(const string& str, char ch) {\n        for (char c : str) {\n            if (c == ch) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    int lengthOfLongestSubstring(string s) {\n        int n = s.size();\n        int maxi = 0;\n        for (int i = 0; i < n; i++) {\n            int var = min(26, n - i);\n            for (int j = 0; j < var; j++) {\n                string str = s.substr(i, j + 1);\n                string temp = \"\";\n                bool good = true;\n                for (int k = 0; k < str.size(); k++) {\n                    if (isCharacterInString(temp, str[k])) {\n                        good = false;\n                        break;\n                    } else {\n                        temp += str[k];\n                    }\n                }\n                if (good) {\n                    maxi = max(maxi, (int)str.size());\n                } else {\n                    break;\n                }\n            }\n        }\n        return maxi;\n    }\n};\n```\nagain, note that this does not work for this problem. nice thinking though!\n\nthe way i did it is by using hash sets, which gives you 2 for loops with at worst O(n^2) time (which won't happen). It involves using ```for (int i = 0; i < n; i++) {for int j = i; j < n; j++}```. "
                    },
                    {
                        "username": "ranbir7",
                        "content": "[@cartesPerforees](/cartesPerforees) I used deque"
                    },
                    {
                        "username": "ranbir7",
                        "content": "I used deque"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Or please, do use brute force. Brute force works just fine if you take adavantage of the fact that you're working with a finite alphabet. You can scan through all substrings of all sizes up to  $\\alpha$ where $\\alpha$ is the size of your alphabet (cause no substring could be larger than the full alphabet without repeats). Even the brutest of brute force in $O(\\alpha^2n)$ is comfortably accepted.\nWhen you don't listen to random people telling you how to think or not to think, you sometimes find solutions they didn't anticipate ;)"
                    },
                    {
                        "username": "media_overdosed",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) because it\\'s slow af (especially python)"
                    },
                    {
                        "username": "Anson_W",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) In fact, it can be passed by using unordered_map. Less than 1s."
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t)  the length of test case is 5 * 10^4 , brute force is N^2 . TLE"
                    },
                    {
                        "username": "whyevenquestion1t",
                        "content": "why not?\\n"
                    },
                    {
                        "username": "anthonyhuang",
                        "content": "I have some problem understanding the problem, this test case \"dvdf \"says the output should be 3, while I suppose it should be 2.\\n\\n\"dv\" or \"df\" is what I think. It should be substring not subsequence like the question mentioned. Should it confined to \"Consistent String\"?\\n\\n"
                    },
                    {
                        "username": "tsashokstar27",
                        "content": "[@ricko34](/ricko34) Because of longest sub string length if we use the dv it will be 2. But we have vdf with length 3."
                    },
                    {
                        "username": "omaute260902",
                        "content": "the testcase is correct. the substring for this test case would be \\'vdf\\' and the answer therefore would be 3\\n"
                    },
                    {
                        "username": "ricko34",
                        "content": "absolutely,  i  don\\'t understand why \\'d\\' is ignored "
                    },
                    {
                        "username": "Shazamct",
                        "content": "output should be \\'vdf\\' i.e. 3\\n"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "swagiuli",
                        "content": "[@nrjsuthar](/nrjsuthar) yes"
                    },
                    {
                        "username": "nrjsuthar",
                        "content": "vdf is the longest subsequence right?\\n"
                    },
                    {
                        "username": "EloiVega",
                        "content": "the answer is \\'vdf\\' which is of length 3"
                    },
                    {
                        "username": "manavjoshi1107",
                        "content": "vdf have length 3\\n"
                    },
                    {
                        "username": "mkraghava007",
                        "content": "d v & f are different characters together, hence ig it\\'s considering them together"
                    },
                    {
                        "username": "damajsam93",
                        "content": "vfd ==>3 "
                    },
                    {
                        "username": "abhiram__devisetti",
                        "content": "vdf is answer"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "cause \"vdf\" is the longest substring in the given string"
                    },
                    {
                        "username": "9819497296",
                        "content": "dvdf is a string and and the longest substring should be vdf thats why the longest length of a substring should be 3 i hope you understand"
                    },
                    {
                        "username": "dmoriasi",
                        "content": "The longest string is \"vdf\" You basically start from index 1. to the end. "
                    },
                    {
                        "username": "codebadger",
                        "content": "\"vdf\" is a valid substring"
                    },
                    {
                        "username": "uakrongrad",
                        "content": "I think the task could be better explained by asking the tester to find the length of the longest non repeating set of continous characters in the string."
                    },
                    {
                        "username": "firezdog",
                        "content": "\"continuous characters in a string\" -- that is, a substring (as opposed to a subsequence)"
                    },
                    {
                        "username": "juansymontano",
                        "content": "True. I was wondering what they meant too. After realizing it\\u2019s just longest unique it was quite easy to code. "
                    },
                    {
                        "username": "sanyuktakate",
                        "content": "Did anyone get an error as - *\" is not a valid value of type string* for an input which was a string with space (\" \")?"
                    },
                    {
                        "username": "janis__",
                        "content": "If you\\'re encountering an error on LeetCode that says \" \" is not a valid value of type string, it\\'s likely not an issue with the code you provided. Instead, ensure that when you\\'re testing your function on LeetCode, you\\'re inputting the string with spaces correctly. In the test input box, instead of just entering a space, you should enter the string with double quotes, like \" \". This ensures LeetCode recognizes it as a valid string input."
                    },
                    {
                        "username": "chirag2239",
                        "content": "what to do for \" \"?\\nI am just copying all the characters to hash array. Space character index, 32, should be updated with the count."
                    },
                    {
                        "username": "piyushpandey6970",
                        "content": "[@Soham_Panchal](/Soham_Panchal) what to do for space\\n"
                    },
                    {
                        "username": "Qusai_issa",
                        "content": "\\' \\'"
                    },
                    {
                        "username": "M-Narendra",
                        "content": "no\\n"
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "Yes.\\n"
                    },
                    {
                        "username": "YASH_PARSANA",
                        "content": "**Please upvote if solution is useful**\\n\\nfull explanation of queation step by step solution brute force to optimal approach\\nExplained by googler\\n\\nhttps://youtu.be/qtVh-XEpsJo"
                    },
                    {
                        "username": "asfdg32",
                        "content": "It comes out to be wrong  when I submit my alg and tells me that it failed to process the input \"aa\" while I successfully get it right with the input \"aa\" in my local computer and the \"run code\" function in the website. Is it the website's bug? Or some differences between the \"run code\" and \"submit\" function exists. Or something is wrong with my code."
                    },
                    {
                        "username": "darrendsa06",
                        "content": "Im facing the same problem.\\n"
                    },
                    {
                        "username": "harshnayak580",
                        "content": "h\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for June, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/longest-substring-without-repeating-characters/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 3 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Sliding Window\n\n  \n**Approach 3:** Sliding Window Optimized\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1869651,
                "content": [
                    {
                        "username": "ktranada1403",
                        "content": "Bruh who tf sat down and wrote 987 testcases. This is sacrilegious. Go touch grass. See the world out there gang. This is not it. "
                    },
                    {
                        "username": "malinkov",
                        "content": "[@Mohamed-Kallel](/Mohamed-Kallel)  same XD"
                    },
                    {
                        "username": "malinkov",
                        "content": "LOL XD hahahhah yap, see the world fam XD hahahah"
                    },
                    {
                        "username": "Mohamed-Kallel",
                        "content": "the real pain  is when you see that 986/987 testcases passed "
                    },
                    {
                        "username": "jnatc1",
                        "content": "On god bro."
                    },
                    {
                        "username": "ktranada1403",
                        "content": "[@Eddiea6987](/Eddiea6987) im clearly joking "
                    },
                    {
                        "username": "user0915S",
                        "content": "bro, had all the time in the world\\n"
                    },
                    {
                        "username": "Himanshu_kmr24",
                        "content": "[@Eddiea6987](/Eddiea6987) So the important thing is touching grass :p"
                    },
                    {
                        "username": "aidenscoding",
                        "content": "Indeed. This should be flagged as hard. What\\'s wrong with people"
                    },
                    {
                        "username": "overbound",
                        "content": "I needed this."
                    },
                    {
                        "username": "sprodaturu",
                        "content": "[@Eddiea6987](/Eddiea6987) XD"
                    },
                    {
                        "username": "Eddiea6987",
                        "content": "so you being a programmer you cant think of an automated way to write all the test cases? what makes you think someone typed each  one? The dude probably spent 5 min to write a script and then went outside and touched grass. "
                    },
                    {
                        "username": "jlbroughton",
                        "content": "\\uD83D\\uDE02"
                    },
                    {
                        "username": "candypop8724",
                        "content": "bro fr man, i thought i got them all but fucking 987? what even"
                    },
                    {
                        "username": "user3327Ub",
                        "content": "You should stop using these overused jokes..."
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@rucola](/rucola) I think it is reffering to compiler time, not exercises time!"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "fr this is insane"
                    },
                    {
                        "username": "rucola",
                        "content": "Do you know the time limit? I have tried different approaches with c#, but they all run into \"Time Limit Exceeded\" for testcase 987 "
                    },
                    {
                        "username": "michaelg02",
                        "content": "The wording of the question was unclear for me. Example 3 does cover this where \"wke\" was the longest not \"wkew\", but the wording of the question suggests that the substring can have multiple of the same character as long as it is not repeating.\\n\\n\"wkew\" would pass because the substring does not have two w\\'s in a row.\\n\\n*Instead of:\\nGiven a string, find the length of the longest substring without repeating characters.*\\n\\n*I think this is a better wording:\\nGiven a string, find the length of the longest substring without **duplicate** characters.*\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Belyua",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) congratulations, you solved the problem. On leetcode there is a special section for solved problems"
                    },
                    {
                        "username": "ricko34",
                        "content": "[@mayank-01](/mayank-01) i think \\'kew\\' can\\'t be part of substring \\n "
                    },
                    {
                        "username": "ricko34",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) u have a good shortened solution, but this is not the right place \\n"
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "final=[]\\ndef chack(word):\\n    w=\"\"\\n    \\n    for i in word:\\n        if i in w:\\n           return\\n        else:\\n            w+=i\\n    final.append(w)\\n    \\n            \\n\\narry=\"pwwkew\"\\nfor i in range(len(arry)):\\n    for j in range(i,len(arry)):\\n        v=arry[i:j+1]\\n        chack(v)\\nlength=[]\\nfor i in final:\\n    length.append(len(i))\\nbig=max(length)\\nfor i in final:\\n    if big==len(i):\\n        print(i)\\n        break\\n    "
                    },
                    {
                        "username": "sandeep-p",
                        "content": "May be the companies that asked this question expected the candidate to be unclear and discuss, before jumping over the code?"
                    },
                    {
                        "username": "Med__think",
                        "content": "[@mayank-01](/mayank-01)  it i just one of the examples the motive is to find the length of longest substring without repeating characters"
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "what does repeating means? Something that happens more than once. I dont think it is unprecise, im not english native and yet was able to understand. And Examples are there to extend the wording. "
                    },
                    {
                        "username": "mayank-01",
                        "content": "Yes, I agree with you, I am also confused in example 3 there are 2 substrings \\'wke\\' and \\'kew\\' of same length, so this should be mentioned like it can be multiple substrings with same length....."
                    },
                    {
                        "username": "technologyaddicted",
                        "content": "Given \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\nI do not understand that in the Example # 3, it mentions 'wke' as the longest substring. Why not \"kew\" selected as the longest one? Help here is much appreciated."
                    },
                    {
                        "username": "VladoBradi",
                        "content": "Both answers are correct \"wke\" and \"kew\" but probably they choose just one (the first one because of characters line) for correct answer. "
                    },
                    {
                        "username": "lipingm",
                        "content": "1, [], max=0;\n2,[p], max =1;\n3,[p,w], max =2;\n4,[w], max=2;\n5,[w,k], max=2;\n6,[w,k,e], max=3;\n7,[k,e], max=3\n8,end\nSo max=3"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "[@somavik99](/somavik99) pke is subsequence not substring"
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@somavik99](/somavik99) Because it has to be the first instance of a substring, you kind have to read in between the line in mean here, otherwise it could be argued why not kew too!"
                    },
                    {
                        "username": "mohittyagi",
                        "content": "[@somavik99](/somavik99) \"the longest substring without repeating characters\""
                    },
                    {
                        "username": "somavik99",
                        "content": "[@ignorant_ppp](/ignorant_ppp)  My question is why not \"pke\" its total unique value."
                    },
                    {
                        "username": "ignorant_ppp",
                        "content": "you are suppose to return the length not the string\\n"
                    },
                    {
                        "username": "kauntey1O1",
                        "content": "because we would get \"wke\" first and \"kew\" is as the same length as \"wke\""
                    },
                    {
                        "username": "gerryhd",
                        "content": "I don't think that's relevant to the end result as both would return the length of 3."
                    },
                    {
                        "username": "momoxsalameh",
                        "content": "Take it as the longest sequence of non-identical character in the string"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Salheen Bakhet](/technologyaddicted) \\nMost people will scan from left to right and the result \"wke\" will appear first, but if you are used to scanning from right to left (like the habit of writing arabic, japan, etc.) then \"kwe\" this time appeared first."
                    },
                    {
                        "username": "manmitta",
                        "content": "We always starts with left side of string and when you checked \"pwwkew\" .. \"wke\" comes first ."
                    },
                    {
                        "username": "pstrait",
                        "content": "It doesn\\'t matter which substring, you need to return an integer not a substring."
                    },
                    {
                        "username": "amirhassan032",
                        "content": "it can be kew but wke comes first thats why it is assumed as answer"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "kew is also longest substring for sure but we would have considered it if it was scanned earlier"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "when we are iterating from the beginning of the string the we found the max substring before then why would we update the previous value with upcoming value if it still has the same length substring"
                    },
                    {
                        "username": "nancychauhan99",
                        "content": "focus is on the max length achieved rather than the substring itself"
                    },
                    {
                        "username": "ooPo",
                        "content": "Do not try to use brute force to pass the problem."
                    },
                    {
                        "username": "close27",
                        "content": "my brute force got accepted. https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3747943/brute-force-easy-to-understand/"
                    },
                    {
                        "username": "Kromydas",
                        "content": "the problem is that you are not limited from a - z, and can have A-Z as well as 0-9 and other chracters. this is a good approach if you are only limited to a-z. It will solve all the test cases except 985 - 987.\n\nhere is my code which implements your approach:\n```\nclass Solution {\npublic:\n    bool isCharacterInString(const string& str, char ch) {\n        for (char c : str) {\n            if (c == ch) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    int lengthOfLongestSubstring(string s) {\n        int n = s.size();\n        int maxi = 0;\n        for (int i = 0; i < n; i++) {\n            int var = min(26, n - i);\n            for (int j = 0; j < var; j++) {\n                string str = s.substr(i, j + 1);\n                string temp = \"\";\n                bool good = true;\n                for (int k = 0; k < str.size(); k++) {\n                    if (isCharacterInString(temp, str[k])) {\n                        good = false;\n                        break;\n                    } else {\n                        temp += str[k];\n                    }\n                }\n                if (good) {\n                    maxi = max(maxi, (int)str.size());\n                } else {\n                    break;\n                }\n            }\n        }\n        return maxi;\n    }\n};\n```\nagain, note that this does not work for this problem. nice thinking though!\n\nthe way i did it is by using hash sets, which gives you 2 for loops with at worst O(n^2) time (which won't happen). It involves using ```for (int i = 0; i < n; i++) {for int j = i; j < n; j++}```. "
                    },
                    {
                        "username": "ranbir7",
                        "content": "[@cartesPerforees](/cartesPerforees) I used deque"
                    },
                    {
                        "username": "ranbir7",
                        "content": "I used deque"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Or please, do use brute force. Brute force works just fine if you take adavantage of the fact that you're working with a finite alphabet. You can scan through all substrings of all sizes up to  $\\alpha$ where $\\alpha$ is the size of your alphabet (cause no substring could be larger than the full alphabet without repeats). Even the brutest of brute force in $O(\\alpha^2n)$ is comfortably accepted.\nWhen you don't listen to random people telling you how to think or not to think, you sometimes find solutions they didn't anticipate ;)"
                    },
                    {
                        "username": "media_overdosed",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) because it\\'s slow af (especially python)"
                    },
                    {
                        "username": "Anson_W",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) In fact, it can be passed by using unordered_map. Less than 1s."
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t)  the length of test case is 5 * 10^4 , brute force is N^2 . TLE"
                    },
                    {
                        "username": "whyevenquestion1t",
                        "content": "why not?\\n"
                    },
                    {
                        "username": "anthonyhuang",
                        "content": "I have some problem understanding the problem, this test case \"dvdf \"says the output should be 3, while I suppose it should be 2.\\n\\n\"dv\" or \"df\" is what I think. It should be substring not subsequence like the question mentioned. Should it confined to \"Consistent String\"?\\n\\n"
                    },
                    {
                        "username": "tsashokstar27",
                        "content": "[@ricko34](/ricko34) Because of longest sub string length if we use the dv it will be 2. But we have vdf with length 3."
                    },
                    {
                        "username": "omaute260902",
                        "content": "the testcase is correct. the substring for this test case would be \\'vdf\\' and the answer therefore would be 3\\n"
                    },
                    {
                        "username": "ricko34",
                        "content": "absolutely,  i  don\\'t understand why \\'d\\' is ignored "
                    },
                    {
                        "username": "Shazamct",
                        "content": "output should be \\'vdf\\' i.e. 3\\n"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "swagiuli",
                        "content": "[@nrjsuthar](/nrjsuthar) yes"
                    },
                    {
                        "username": "nrjsuthar",
                        "content": "vdf is the longest subsequence right?\\n"
                    },
                    {
                        "username": "EloiVega",
                        "content": "the answer is \\'vdf\\' which is of length 3"
                    },
                    {
                        "username": "manavjoshi1107",
                        "content": "vdf have length 3\\n"
                    },
                    {
                        "username": "mkraghava007",
                        "content": "d v & f are different characters together, hence ig it\\'s considering them together"
                    },
                    {
                        "username": "damajsam93",
                        "content": "vfd ==>3 "
                    },
                    {
                        "username": "abhiram__devisetti",
                        "content": "vdf is answer"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "cause \"vdf\" is the longest substring in the given string"
                    },
                    {
                        "username": "9819497296",
                        "content": "dvdf is a string and and the longest substring should be vdf thats why the longest length of a substring should be 3 i hope you understand"
                    },
                    {
                        "username": "dmoriasi",
                        "content": "The longest string is \"vdf\" You basically start from index 1. to the end. "
                    },
                    {
                        "username": "codebadger",
                        "content": "\"vdf\" is a valid substring"
                    },
                    {
                        "username": "uakrongrad",
                        "content": "I think the task could be better explained by asking the tester to find the length of the longest non repeating set of continous characters in the string."
                    },
                    {
                        "username": "firezdog",
                        "content": "\"continuous characters in a string\" -- that is, a substring (as opposed to a subsequence)"
                    },
                    {
                        "username": "juansymontano",
                        "content": "True. I was wondering what they meant too. After realizing it\\u2019s just longest unique it was quite easy to code. "
                    },
                    {
                        "username": "sanyuktakate",
                        "content": "Did anyone get an error as - *\" is not a valid value of type string* for an input which was a string with space (\" \")?"
                    },
                    {
                        "username": "janis__",
                        "content": "If you\\'re encountering an error on LeetCode that says \" \" is not a valid value of type string, it\\'s likely not an issue with the code you provided. Instead, ensure that when you\\'re testing your function on LeetCode, you\\'re inputting the string with spaces correctly. In the test input box, instead of just entering a space, you should enter the string with double quotes, like \" \". This ensures LeetCode recognizes it as a valid string input."
                    },
                    {
                        "username": "chirag2239",
                        "content": "what to do for \" \"?\\nI am just copying all the characters to hash array. Space character index, 32, should be updated with the count."
                    },
                    {
                        "username": "piyushpandey6970",
                        "content": "[@Soham_Panchal](/Soham_Panchal) what to do for space\\n"
                    },
                    {
                        "username": "Qusai_issa",
                        "content": "\\' \\'"
                    },
                    {
                        "username": "M-Narendra",
                        "content": "no\\n"
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "Yes.\\n"
                    },
                    {
                        "username": "YASH_PARSANA",
                        "content": "**Please upvote if solution is useful**\\n\\nfull explanation of queation step by step solution brute force to optimal approach\\nExplained by googler\\n\\nhttps://youtu.be/qtVh-XEpsJo"
                    },
                    {
                        "username": "asfdg32",
                        "content": "It comes out to be wrong  when I submit my alg and tells me that it failed to process the input \"aa\" while I successfully get it right with the input \"aa\" in my local computer and the \"run code\" function in the website. Is it the website's bug? Or some differences between the \"run code\" and \"submit\" function exists. Or something is wrong with my code."
                    },
                    {
                        "username": "darrendsa06",
                        "content": "Im facing the same problem.\\n"
                    },
                    {
                        "username": "harshnayak580",
                        "content": "h\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for June, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/longest-substring-without-repeating-characters/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 3 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Sliding Window\n\n  \n**Approach 3:** Sliding Window Optimized\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1569707,
                "content": [
                    {
                        "username": "ktranada1403",
                        "content": "Bruh who tf sat down and wrote 987 testcases. This is sacrilegious. Go touch grass. See the world out there gang. This is not it. "
                    },
                    {
                        "username": "malinkov",
                        "content": "[@Mohamed-Kallel](/Mohamed-Kallel)  same XD"
                    },
                    {
                        "username": "malinkov",
                        "content": "LOL XD hahahhah yap, see the world fam XD hahahah"
                    },
                    {
                        "username": "Mohamed-Kallel",
                        "content": "the real pain  is when you see that 986/987 testcases passed "
                    },
                    {
                        "username": "jnatc1",
                        "content": "On god bro."
                    },
                    {
                        "username": "ktranada1403",
                        "content": "[@Eddiea6987](/Eddiea6987) im clearly joking "
                    },
                    {
                        "username": "user0915S",
                        "content": "bro, had all the time in the world\\n"
                    },
                    {
                        "username": "Himanshu_kmr24",
                        "content": "[@Eddiea6987](/Eddiea6987) So the important thing is touching grass :p"
                    },
                    {
                        "username": "aidenscoding",
                        "content": "Indeed. This should be flagged as hard. What\\'s wrong with people"
                    },
                    {
                        "username": "overbound",
                        "content": "I needed this."
                    },
                    {
                        "username": "sprodaturu",
                        "content": "[@Eddiea6987](/Eddiea6987) XD"
                    },
                    {
                        "username": "Eddiea6987",
                        "content": "so you being a programmer you cant think of an automated way to write all the test cases? what makes you think someone typed each  one? The dude probably spent 5 min to write a script and then went outside and touched grass. "
                    },
                    {
                        "username": "jlbroughton",
                        "content": "\\uD83D\\uDE02"
                    },
                    {
                        "username": "candypop8724",
                        "content": "bro fr man, i thought i got them all but fucking 987? what even"
                    },
                    {
                        "username": "user3327Ub",
                        "content": "You should stop using these overused jokes..."
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@rucola](/rucola) I think it is reffering to compiler time, not exercises time!"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "fr this is insane"
                    },
                    {
                        "username": "rucola",
                        "content": "Do you know the time limit? I have tried different approaches with c#, but they all run into \"Time Limit Exceeded\" for testcase 987 "
                    },
                    {
                        "username": "michaelg02",
                        "content": "The wording of the question was unclear for me. Example 3 does cover this where \"wke\" was the longest not \"wkew\", but the wording of the question suggests that the substring can have multiple of the same character as long as it is not repeating.\\n\\n\"wkew\" would pass because the substring does not have two w\\'s in a row.\\n\\n*Instead of:\\nGiven a string, find the length of the longest substring without repeating characters.*\\n\\n*I think this is a better wording:\\nGiven a string, find the length of the longest substring without **duplicate** characters.*\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Belyua",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) congratulations, you solved the problem. On leetcode there is a special section for solved problems"
                    },
                    {
                        "username": "ricko34",
                        "content": "[@mayank-01](/mayank-01) i think \\'kew\\' can\\'t be part of substring \\n "
                    },
                    {
                        "username": "ricko34",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) u have a good shortened solution, but this is not the right place \\n"
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "final=[]\\ndef chack(word):\\n    w=\"\"\\n    \\n    for i in word:\\n        if i in w:\\n           return\\n        else:\\n            w+=i\\n    final.append(w)\\n    \\n            \\n\\narry=\"pwwkew\"\\nfor i in range(len(arry)):\\n    for j in range(i,len(arry)):\\n        v=arry[i:j+1]\\n        chack(v)\\nlength=[]\\nfor i in final:\\n    length.append(len(i))\\nbig=max(length)\\nfor i in final:\\n    if big==len(i):\\n        print(i)\\n        break\\n    "
                    },
                    {
                        "username": "sandeep-p",
                        "content": "May be the companies that asked this question expected the candidate to be unclear and discuss, before jumping over the code?"
                    },
                    {
                        "username": "Med__think",
                        "content": "[@mayank-01](/mayank-01)  it i just one of the examples the motive is to find the length of longest substring without repeating characters"
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "what does repeating means? Something that happens more than once. I dont think it is unprecise, im not english native and yet was able to understand. And Examples are there to extend the wording. "
                    },
                    {
                        "username": "mayank-01",
                        "content": "Yes, I agree with you, I am also confused in example 3 there are 2 substrings \\'wke\\' and \\'kew\\' of same length, so this should be mentioned like it can be multiple substrings with same length....."
                    },
                    {
                        "username": "technologyaddicted",
                        "content": "Given \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\nI do not understand that in the Example # 3, it mentions 'wke' as the longest substring. Why not \"kew\" selected as the longest one? Help here is much appreciated."
                    },
                    {
                        "username": "VladoBradi",
                        "content": "Both answers are correct \"wke\" and \"kew\" but probably they choose just one (the first one because of characters line) for correct answer. "
                    },
                    {
                        "username": "lipingm",
                        "content": "1, [], max=0;\n2,[p], max =1;\n3,[p,w], max =2;\n4,[w], max=2;\n5,[w,k], max=2;\n6,[w,k,e], max=3;\n7,[k,e], max=3\n8,end\nSo max=3"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "[@somavik99](/somavik99) pke is subsequence not substring"
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@somavik99](/somavik99) Because it has to be the first instance of a substring, you kind have to read in between the line in mean here, otherwise it could be argued why not kew too!"
                    },
                    {
                        "username": "mohittyagi",
                        "content": "[@somavik99](/somavik99) \"the longest substring without repeating characters\""
                    },
                    {
                        "username": "somavik99",
                        "content": "[@ignorant_ppp](/ignorant_ppp)  My question is why not \"pke\" its total unique value."
                    },
                    {
                        "username": "ignorant_ppp",
                        "content": "you are suppose to return the length not the string\\n"
                    },
                    {
                        "username": "kauntey1O1",
                        "content": "because we would get \"wke\" first and \"kew\" is as the same length as \"wke\""
                    },
                    {
                        "username": "gerryhd",
                        "content": "I don't think that's relevant to the end result as both would return the length of 3."
                    },
                    {
                        "username": "momoxsalameh",
                        "content": "Take it as the longest sequence of non-identical character in the string"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Salheen Bakhet](/technologyaddicted) \\nMost people will scan from left to right and the result \"wke\" will appear first, but if you are used to scanning from right to left (like the habit of writing arabic, japan, etc.) then \"kwe\" this time appeared first."
                    },
                    {
                        "username": "manmitta",
                        "content": "We always starts with left side of string and when you checked \"pwwkew\" .. \"wke\" comes first ."
                    },
                    {
                        "username": "pstrait",
                        "content": "It doesn\\'t matter which substring, you need to return an integer not a substring."
                    },
                    {
                        "username": "amirhassan032",
                        "content": "it can be kew but wke comes first thats why it is assumed as answer"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "kew is also longest substring for sure but we would have considered it if it was scanned earlier"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "when we are iterating from the beginning of the string the we found the max substring before then why would we update the previous value with upcoming value if it still has the same length substring"
                    },
                    {
                        "username": "nancychauhan99",
                        "content": "focus is on the max length achieved rather than the substring itself"
                    },
                    {
                        "username": "ooPo",
                        "content": "Do not try to use brute force to pass the problem."
                    },
                    {
                        "username": "close27",
                        "content": "my brute force got accepted. https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3747943/brute-force-easy-to-understand/"
                    },
                    {
                        "username": "Kromydas",
                        "content": "the problem is that you are not limited from a - z, and can have A-Z as well as 0-9 and other chracters. this is a good approach if you are only limited to a-z. It will solve all the test cases except 985 - 987.\n\nhere is my code which implements your approach:\n```\nclass Solution {\npublic:\n    bool isCharacterInString(const string& str, char ch) {\n        for (char c : str) {\n            if (c == ch) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    int lengthOfLongestSubstring(string s) {\n        int n = s.size();\n        int maxi = 0;\n        for (int i = 0; i < n; i++) {\n            int var = min(26, n - i);\n            for (int j = 0; j < var; j++) {\n                string str = s.substr(i, j + 1);\n                string temp = \"\";\n                bool good = true;\n                for (int k = 0; k < str.size(); k++) {\n                    if (isCharacterInString(temp, str[k])) {\n                        good = false;\n                        break;\n                    } else {\n                        temp += str[k];\n                    }\n                }\n                if (good) {\n                    maxi = max(maxi, (int)str.size());\n                } else {\n                    break;\n                }\n            }\n        }\n        return maxi;\n    }\n};\n```\nagain, note that this does not work for this problem. nice thinking though!\n\nthe way i did it is by using hash sets, which gives you 2 for loops with at worst O(n^2) time (which won't happen). It involves using ```for (int i = 0; i < n; i++) {for int j = i; j < n; j++}```. "
                    },
                    {
                        "username": "ranbir7",
                        "content": "[@cartesPerforees](/cartesPerforees) I used deque"
                    },
                    {
                        "username": "ranbir7",
                        "content": "I used deque"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Or please, do use brute force. Brute force works just fine if you take adavantage of the fact that you're working with a finite alphabet. You can scan through all substrings of all sizes up to  $\\alpha$ where $\\alpha$ is the size of your alphabet (cause no substring could be larger than the full alphabet without repeats). Even the brutest of brute force in $O(\\alpha^2n)$ is comfortably accepted.\nWhen you don't listen to random people telling you how to think or not to think, you sometimes find solutions they didn't anticipate ;)"
                    },
                    {
                        "username": "media_overdosed",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) because it\\'s slow af (especially python)"
                    },
                    {
                        "username": "Anson_W",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) In fact, it can be passed by using unordered_map. Less than 1s."
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t)  the length of test case is 5 * 10^4 , brute force is N^2 . TLE"
                    },
                    {
                        "username": "whyevenquestion1t",
                        "content": "why not?\\n"
                    },
                    {
                        "username": "anthonyhuang",
                        "content": "I have some problem understanding the problem, this test case \"dvdf \"says the output should be 3, while I suppose it should be 2.\\n\\n\"dv\" or \"df\" is what I think. It should be substring not subsequence like the question mentioned. Should it confined to \"Consistent String\"?\\n\\n"
                    },
                    {
                        "username": "tsashokstar27",
                        "content": "[@ricko34](/ricko34) Because of longest sub string length if we use the dv it will be 2. But we have vdf with length 3."
                    },
                    {
                        "username": "omaute260902",
                        "content": "the testcase is correct. the substring for this test case would be \\'vdf\\' and the answer therefore would be 3\\n"
                    },
                    {
                        "username": "ricko34",
                        "content": "absolutely,  i  don\\'t understand why \\'d\\' is ignored "
                    },
                    {
                        "username": "Shazamct",
                        "content": "output should be \\'vdf\\' i.e. 3\\n"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "swagiuli",
                        "content": "[@nrjsuthar](/nrjsuthar) yes"
                    },
                    {
                        "username": "nrjsuthar",
                        "content": "vdf is the longest subsequence right?\\n"
                    },
                    {
                        "username": "EloiVega",
                        "content": "the answer is \\'vdf\\' which is of length 3"
                    },
                    {
                        "username": "manavjoshi1107",
                        "content": "vdf have length 3\\n"
                    },
                    {
                        "username": "mkraghava007",
                        "content": "d v & f are different characters together, hence ig it\\'s considering them together"
                    },
                    {
                        "username": "damajsam93",
                        "content": "vfd ==>3 "
                    },
                    {
                        "username": "abhiram__devisetti",
                        "content": "vdf is answer"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "cause \"vdf\" is the longest substring in the given string"
                    },
                    {
                        "username": "9819497296",
                        "content": "dvdf is a string and and the longest substring should be vdf thats why the longest length of a substring should be 3 i hope you understand"
                    },
                    {
                        "username": "dmoriasi",
                        "content": "The longest string is \"vdf\" You basically start from index 1. to the end. "
                    },
                    {
                        "username": "codebadger",
                        "content": "\"vdf\" is a valid substring"
                    },
                    {
                        "username": "uakrongrad",
                        "content": "I think the task could be better explained by asking the tester to find the length of the longest non repeating set of continous characters in the string."
                    },
                    {
                        "username": "firezdog",
                        "content": "\"continuous characters in a string\" -- that is, a substring (as opposed to a subsequence)"
                    },
                    {
                        "username": "juansymontano",
                        "content": "True. I was wondering what they meant too. After realizing it\\u2019s just longest unique it was quite easy to code. "
                    },
                    {
                        "username": "sanyuktakate",
                        "content": "Did anyone get an error as - *\" is not a valid value of type string* for an input which was a string with space (\" \")?"
                    },
                    {
                        "username": "janis__",
                        "content": "If you\\'re encountering an error on LeetCode that says \" \" is not a valid value of type string, it\\'s likely not an issue with the code you provided. Instead, ensure that when you\\'re testing your function on LeetCode, you\\'re inputting the string with spaces correctly. In the test input box, instead of just entering a space, you should enter the string with double quotes, like \" \". This ensures LeetCode recognizes it as a valid string input."
                    },
                    {
                        "username": "chirag2239",
                        "content": "what to do for \" \"?\\nI am just copying all the characters to hash array. Space character index, 32, should be updated with the count."
                    },
                    {
                        "username": "piyushpandey6970",
                        "content": "[@Soham_Panchal](/Soham_Panchal) what to do for space\\n"
                    },
                    {
                        "username": "Qusai_issa",
                        "content": "\\' \\'"
                    },
                    {
                        "username": "M-Narendra",
                        "content": "no\\n"
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "Yes.\\n"
                    },
                    {
                        "username": "YASH_PARSANA",
                        "content": "**Please upvote if solution is useful**\\n\\nfull explanation of queation step by step solution brute force to optimal approach\\nExplained by googler\\n\\nhttps://youtu.be/qtVh-XEpsJo"
                    },
                    {
                        "username": "asfdg32",
                        "content": "It comes out to be wrong  when I submit my alg and tells me that it failed to process the input \"aa\" while I successfully get it right with the input \"aa\" in my local computer and the \"run code\" function in the website. Is it the website's bug? Or some differences between the \"run code\" and \"submit\" function exists. Or something is wrong with my code."
                    },
                    {
                        "username": "darrendsa06",
                        "content": "Im facing the same problem.\\n"
                    },
                    {
                        "username": "harshnayak580",
                        "content": "h\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for June, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/longest-substring-without-repeating-characters/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 3 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Sliding Window\n\n  \n**Approach 3:** Sliding Window Optimized\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1565590,
                "content": [
                    {
                        "username": "ktranada1403",
                        "content": "Bruh who tf sat down and wrote 987 testcases. This is sacrilegious. Go touch grass. See the world out there gang. This is not it. "
                    },
                    {
                        "username": "malinkov",
                        "content": "[@Mohamed-Kallel](/Mohamed-Kallel)  same XD"
                    },
                    {
                        "username": "malinkov",
                        "content": "LOL XD hahahhah yap, see the world fam XD hahahah"
                    },
                    {
                        "username": "Mohamed-Kallel",
                        "content": "the real pain  is when you see that 986/987 testcases passed "
                    },
                    {
                        "username": "jnatc1",
                        "content": "On god bro."
                    },
                    {
                        "username": "ktranada1403",
                        "content": "[@Eddiea6987](/Eddiea6987) im clearly joking "
                    },
                    {
                        "username": "user0915S",
                        "content": "bro, had all the time in the world\\n"
                    },
                    {
                        "username": "Himanshu_kmr24",
                        "content": "[@Eddiea6987](/Eddiea6987) So the important thing is touching grass :p"
                    },
                    {
                        "username": "aidenscoding",
                        "content": "Indeed. This should be flagged as hard. What\\'s wrong with people"
                    },
                    {
                        "username": "overbound",
                        "content": "I needed this."
                    },
                    {
                        "username": "sprodaturu",
                        "content": "[@Eddiea6987](/Eddiea6987) XD"
                    },
                    {
                        "username": "Eddiea6987",
                        "content": "so you being a programmer you cant think of an automated way to write all the test cases? what makes you think someone typed each  one? The dude probably spent 5 min to write a script and then went outside and touched grass. "
                    },
                    {
                        "username": "jlbroughton",
                        "content": "\\uD83D\\uDE02"
                    },
                    {
                        "username": "candypop8724",
                        "content": "bro fr man, i thought i got them all but fucking 987? what even"
                    },
                    {
                        "username": "user3327Ub",
                        "content": "You should stop using these overused jokes..."
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@rucola](/rucola) I think it is reffering to compiler time, not exercises time!"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "fr this is insane"
                    },
                    {
                        "username": "rucola",
                        "content": "Do you know the time limit? I have tried different approaches with c#, but they all run into \"Time Limit Exceeded\" for testcase 987 "
                    },
                    {
                        "username": "michaelg02",
                        "content": "The wording of the question was unclear for me. Example 3 does cover this where \"wke\" was the longest not \"wkew\", but the wording of the question suggests that the substring can have multiple of the same character as long as it is not repeating.\\n\\n\"wkew\" would pass because the substring does not have two w\\'s in a row.\\n\\n*Instead of:\\nGiven a string, find the length of the longest substring without repeating characters.*\\n\\n*I think this is a better wording:\\nGiven a string, find the length of the longest substring without **duplicate** characters.*\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Belyua",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) congratulations, you solved the problem. On leetcode there is a special section for solved problems"
                    },
                    {
                        "username": "ricko34",
                        "content": "[@mayank-01](/mayank-01) i think \\'kew\\' can\\'t be part of substring \\n "
                    },
                    {
                        "username": "ricko34",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) u have a good shortened solution, but this is not the right place \\n"
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "final=[]\\ndef chack(word):\\n    w=\"\"\\n    \\n    for i in word:\\n        if i in w:\\n           return\\n        else:\\n            w+=i\\n    final.append(w)\\n    \\n            \\n\\narry=\"pwwkew\"\\nfor i in range(len(arry)):\\n    for j in range(i,len(arry)):\\n        v=arry[i:j+1]\\n        chack(v)\\nlength=[]\\nfor i in final:\\n    length.append(len(i))\\nbig=max(length)\\nfor i in final:\\n    if big==len(i):\\n        print(i)\\n        break\\n    "
                    },
                    {
                        "username": "sandeep-p",
                        "content": "May be the companies that asked this question expected the candidate to be unclear and discuss, before jumping over the code?"
                    },
                    {
                        "username": "Med__think",
                        "content": "[@mayank-01](/mayank-01)  it i just one of the examples the motive is to find the length of longest substring without repeating characters"
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "what does repeating means? Something that happens more than once. I dont think it is unprecise, im not english native and yet was able to understand. And Examples are there to extend the wording. "
                    },
                    {
                        "username": "mayank-01",
                        "content": "Yes, I agree with you, I am also confused in example 3 there are 2 substrings \\'wke\\' and \\'kew\\' of same length, so this should be mentioned like it can be multiple substrings with same length....."
                    },
                    {
                        "username": "technologyaddicted",
                        "content": "Given \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\nI do not understand that in the Example # 3, it mentions 'wke' as the longest substring. Why not \"kew\" selected as the longest one? Help here is much appreciated."
                    },
                    {
                        "username": "VladoBradi",
                        "content": "Both answers are correct \"wke\" and \"kew\" but probably they choose just one (the first one because of characters line) for correct answer. "
                    },
                    {
                        "username": "lipingm",
                        "content": "1, [], max=0;\n2,[p], max =1;\n3,[p,w], max =2;\n4,[w], max=2;\n5,[w,k], max=2;\n6,[w,k,e], max=3;\n7,[k,e], max=3\n8,end\nSo max=3"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "[@somavik99](/somavik99) pke is subsequence not substring"
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@somavik99](/somavik99) Because it has to be the first instance of a substring, you kind have to read in between the line in mean here, otherwise it could be argued why not kew too!"
                    },
                    {
                        "username": "mohittyagi",
                        "content": "[@somavik99](/somavik99) \"the longest substring without repeating characters\""
                    },
                    {
                        "username": "somavik99",
                        "content": "[@ignorant_ppp](/ignorant_ppp)  My question is why not \"pke\" its total unique value."
                    },
                    {
                        "username": "ignorant_ppp",
                        "content": "you are suppose to return the length not the string\\n"
                    },
                    {
                        "username": "kauntey1O1",
                        "content": "because we would get \"wke\" first and \"kew\" is as the same length as \"wke\""
                    },
                    {
                        "username": "gerryhd",
                        "content": "I don't think that's relevant to the end result as both would return the length of 3."
                    },
                    {
                        "username": "momoxsalameh",
                        "content": "Take it as the longest sequence of non-identical character in the string"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Salheen Bakhet](/technologyaddicted) \\nMost people will scan from left to right and the result \"wke\" will appear first, but if you are used to scanning from right to left (like the habit of writing arabic, japan, etc.) then \"kwe\" this time appeared first."
                    },
                    {
                        "username": "manmitta",
                        "content": "We always starts with left side of string and when you checked \"pwwkew\" .. \"wke\" comes first ."
                    },
                    {
                        "username": "pstrait",
                        "content": "It doesn\\'t matter which substring, you need to return an integer not a substring."
                    },
                    {
                        "username": "amirhassan032",
                        "content": "it can be kew but wke comes first thats why it is assumed as answer"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "kew is also longest substring for sure but we would have considered it if it was scanned earlier"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "when we are iterating from the beginning of the string the we found the max substring before then why would we update the previous value with upcoming value if it still has the same length substring"
                    },
                    {
                        "username": "nancychauhan99",
                        "content": "focus is on the max length achieved rather than the substring itself"
                    },
                    {
                        "username": "ooPo",
                        "content": "Do not try to use brute force to pass the problem."
                    },
                    {
                        "username": "close27",
                        "content": "my brute force got accepted. https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3747943/brute-force-easy-to-understand/"
                    },
                    {
                        "username": "Kromydas",
                        "content": "the problem is that you are not limited from a - z, and can have A-Z as well as 0-9 and other chracters. this is a good approach if you are only limited to a-z. It will solve all the test cases except 985 - 987.\n\nhere is my code which implements your approach:\n```\nclass Solution {\npublic:\n    bool isCharacterInString(const string& str, char ch) {\n        for (char c : str) {\n            if (c == ch) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    int lengthOfLongestSubstring(string s) {\n        int n = s.size();\n        int maxi = 0;\n        for (int i = 0; i < n; i++) {\n            int var = min(26, n - i);\n            for (int j = 0; j < var; j++) {\n                string str = s.substr(i, j + 1);\n                string temp = \"\";\n                bool good = true;\n                for (int k = 0; k < str.size(); k++) {\n                    if (isCharacterInString(temp, str[k])) {\n                        good = false;\n                        break;\n                    } else {\n                        temp += str[k];\n                    }\n                }\n                if (good) {\n                    maxi = max(maxi, (int)str.size());\n                } else {\n                    break;\n                }\n            }\n        }\n        return maxi;\n    }\n};\n```\nagain, note that this does not work for this problem. nice thinking though!\n\nthe way i did it is by using hash sets, which gives you 2 for loops with at worst O(n^2) time (which won't happen). It involves using ```for (int i = 0; i < n; i++) {for int j = i; j < n; j++}```. "
                    },
                    {
                        "username": "ranbir7",
                        "content": "[@cartesPerforees](/cartesPerforees) I used deque"
                    },
                    {
                        "username": "ranbir7",
                        "content": "I used deque"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Or please, do use brute force. Brute force works just fine if you take adavantage of the fact that you're working with a finite alphabet. You can scan through all substrings of all sizes up to  $\\alpha$ where $\\alpha$ is the size of your alphabet (cause no substring could be larger than the full alphabet without repeats). Even the brutest of brute force in $O(\\alpha^2n)$ is comfortably accepted.\nWhen you don't listen to random people telling you how to think or not to think, you sometimes find solutions they didn't anticipate ;)"
                    },
                    {
                        "username": "media_overdosed",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) because it\\'s slow af (especially python)"
                    },
                    {
                        "username": "Anson_W",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) In fact, it can be passed by using unordered_map. Less than 1s."
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t)  the length of test case is 5 * 10^4 , brute force is N^2 . TLE"
                    },
                    {
                        "username": "whyevenquestion1t",
                        "content": "why not?\\n"
                    },
                    {
                        "username": "anthonyhuang",
                        "content": "I have some problem understanding the problem, this test case \"dvdf \"says the output should be 3, while I suppose it should be 2.\\n\\n\"dv\" or \"df\" is what I think. It should be substring not subsequence like the question mentioned. Should it confined to \"Consistent String\"?\\n\\n"
                    },
                    {
                        "username": "tsashokstar27",
                        "content": "[@ricko34](/ricko34) Because of longest sub string length if we use the dv it will be 2. But we have vdf with length 3."
                    },
                    {
                        "username": "omaute260902",
                        "content": "the testcase is correct. the substring for this test case would be \\'vdf\\' and the answer therefore would be 3\\n"
                    },
                    {
                        "username": "ricko34",
                        "content": "absolutely,  i  don\\'t understand why \\'d\\' is ignored "
                    },
                    {
                        "username": "Shazamct",
                        "content": "output should be \\'vdf\\' i.e. 3\\n"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "swagiuli",
                        "content": "[@nrjsuthar](/nrjsuthar) yes"
                    },
                    {
                        "username": "nrjsuthar",
                        "content": "vdf is the longest subsequence right?\\n"
                    },
                    {
                        "username": "EloiVega",
                        "content": "the answer is \\'vdf\\' which is of length 3"
                    },
                    {
                        "username": "manavjoshi1107",
                        "content": "vdf have length 3\\n"
                    },
                    {
                        "username": "mkraghava007",
                        "content": "d v & f are different characters together, hence ig it\\'s considering them together"
                    },
                    {
                        "username": "damajsam93",
                        "content": "vfd ==>3 "
                    },
                    {
                        "username": "abhiram__devisetti",
                        "content": "vdf is answer"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "cause \"vdf\" is the longest substring in the given string"
                    },
                    {
                        "username": "9819497296",
                        "content": "dvdf is a string and and the longest substring should be vdf thats why the longest length of a substring should be 3 i hope you understand"
                    },
                    {
                        "username": "dmoriasi",
                        "content": "The longest string is \"vdf\" You basically start from index 1. to the end. "
                    },
                    {
                        "username": "codebadger",
                        "content": "\"vdf\" is a valid substring"
                    },
                    {
                        "username": "uakrongrad",
                        "content": "I think the task could be better explained by asking the tester to find the length of the longest non repeating set of continous characters in the string."
                    },
                    {
                        "username": "firezdog",
                        "content": "\"continuous characters in a string\" -- that is, a substring (as opposed to a subsequence)"
                    },
                    {
                        "username": "juansymontano",
                        "content": "True. I was wondering what they meant too. After realizing it\\u2019s just longest unique it was quite easy to code. "
                    },
                    {
                        "username": "sanyuktakate",
                        "content": "Did anyone get an error as - *\" is not a valid value of type string* for an input which was a string with space (\" \")?"
                    },
                    {
                        "username": "janis__",
                        "content": "If you\\'re encountering an error on LeetCode that says \" \" is not a valid value of type string, it\\'s likely not an issue with the code you provided. Instead, ensure that when you\\'re testing your function on LeetCode, you\\'re inputting the string with spaces correctly. In the test input box, instead of just entering a space, you should enter the string with double quotes, like \" \". This ensures LeetCode recognizes it as a valid string input."
                    },
                    {
                        "username": "chirag2239",
                        "content": "what to do for \" \"?\\nI am just copying all the characters to hash array. Space character index, 32, should be updated with the count."
                    },
                    {
                        "username": "piyushpandey6970",
                        "content": "[@Soham_Panchal](/Soham_Panchal) what to do for space\\n"
                    },
                    {
                        "username": "Qusai_issa",
                        "content": "\\' \\'"
                    },
                    {
                        "username": "M-Narendra",
                        "content": "no\\n"
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "Yes.\\n"
                    },
                    {
                        "username": "YASH_PARSANA",
                        "content": "**Please upvote if solution is useful**\\n\\nfull explanation of queation step by step solution brute force to optimal approach\\nExplained by googler\\n\\nhttps://youtu.be/qtVh-XEpsJo"
                    },
                    {
                        "username": "asfdg32",
                        "content": "It comes out to be wrong  when I submit my alg and tells me that it failed to process the input \"aa\" while I successfully get it right with the input \"aa\" in my local computer and the \"run code\" function in the website. Is it the website's bug? Or some differences between the \"run code\" and \"submit\" function exists. Or something is wrong with my code."
                    },
                    {
                        "username": "darrendsa06",
                        "content": "Im facing the same problem.\\n"
                    },
                    {
                        "username": "harshnayak580",
                        "content": "h\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for June, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/longest-substring-without-repeating-characters/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 3 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Sliding Window\n\n  \n**Approach 3:** Sliding Window Optimized\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1569517,
                "content": [
                    {
                        "username": "ktranada1403",
                        "content": "Bruh who tf sat down and wrote 987 testcases. This is sacrilegious. Go touch grass. See the world out there gang. This is not it. "
                    },
                    {
                        "username": "malinkov",
                        "content": "[@Mohamed-Kallel](/Mohamed-Kallel)  same XD"
                    },
                    {
                        "username": "malinkov",
                        "content": "LOL XD hahahhah yap, see the world fam XD hahahah"
                    },
                    {
                        "username": "Mohamed-Kallel",
                        "content": "the real pain  is when you see that 986/987 testcases passed "
                    },
                    {
                        "username": "jnatc1",
                        "content": "On god bro."
                    },
                    {
                        "username": "ktranada1403",
                        "content": "[@Eddiea6987](/Eddiea6987) im clearly joking "
                    },
                    {
                        "username": "user0915S",
                        "content": "bro, had all the time in the world\\n"
                    },
                    {
                        "username": "Himanshu_kmr24",
                        "content": "[@Eddiea6987](/Eddiea6987) So the important thing is touching grass :p"
                    },
                    {
                        "username": "aidenscoding",
                        "content": "Indeed. This should be flagged as hard. What\\'s wrong with people"
                    },
                    {
                        "username": "overbound",
                        "content": "I needed this."
                    },
                    {
                        "username": "sprodaturu",
                        "content": "[@Eddiea6987](/Eddiea6987) XD"
                    },
                    {
                        "username": "Eddiea6987",
                        "content": "so you being a programmer you cant think of an automated way to write all the test cases? what makes you think someone typed each  one? The dude probably spent 5 min to write a script and then went outside and touched grass. "
                    },
                    {
                        "username": "jlbroughton",
                        "content": "\\uD83D\\uDE02"
                    },
                    {
                        "username": "candypop8724",
                        "content": "bro fr man, i thought i got them all but fucking 987? what even"
                    },
                    {
                        "username": "user3327Ub",
                        "content": "You should stop using these overused jokes..."
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@rucola](/rucola) I think it is reffering to compiler time, not exercises time!"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "fr this is insane"
                    },
                    {
                        "username": "rucola",
                        "content": "Do you know the time limit? I have tried different approaches with c#, but they all run into \"Time Limit Exceeded\" for testcase 987 "
                    },
                    {
                        "username": "michaelg02",
                        "content": "The wording of the question was unclear for me. Example 3 does cover this where \"wke\" was the longest not \"wkew\", but the wording of the question suggests that the substring can have multiple of the same character as long as it is not repeating.\\n\\n\"wkew\" would pass because the substring does not have two w\\'s in a row.\\n\\n*Instead of:\\nGiven a string, find the length of the longest substring without repeating characters.*\\n\\n*I think this is a better wording:\\nGiven a string, find the length of the longest substring without **duplicate** characters.*\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Belyua",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) congratulations, you solved the problem. On leetcode there is a special section for solved problems"
                    },
                    {
                        "username": "ricko34",
                        "content": "[@mayank-01](/mayank-01) i think \\'kew\\' can\\'t be part of substring \\n "
                    },
                    {
                        "username": "ricko34",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) u have a good shortened solution, but this is not the right place \\n"
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "final=[]\\ndef chack(word):\\n    w=\"\"\\n    \\n    for i in word:\\n        if i in w:\\n           return\\n        else:\\n            w+=i\\n    final.append(w)\\n    \\n            \\n\\narry=\"pwwkew\"\\nfor i in range(len(arry)):\\n    for j in range(i,len(arry)):\\n        v=arry[i:j+1]\\n        chack(v)\\nlength=[]\\nfor i in final:\\n    length.append(len(i))\\nbig=max(length)\\nfor i in final:\\n    if big==len(i):\\n        print(i)\\n        break\\n    "
                    },
                    {
                        "username": "sandeep-p",
                        "content": "May be the companies that asked this question expected the candidate to be unclear and discuss, before jumping over the code?"
                    },
                    {
                        "username": "Med__think",
                        "content": "[@mayank-01](/mayank-01)  it i just one of the examples the motive is to find the length of longest substring without repeating characters"
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "what does repeating means? Something that happens more than once. I dont think it is unprecise, im not english native and yet was able to understand. And Examples are there to extend the wording. "
                    },
                    {
                        "username": "mayank-01",
                        "content": "Yes, I agree with you, I am also confused in example 3 there are 2 substrings \\'wke\\' and \\'kew\\' of same length, so this should be mentioned like it can be multiple substrings with same length....."
                    },
                    {
                        "username": "technologyaddicted",
                        "content": "Given \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\nI do not understand that in the Example # 3, it mentions 'wke' as the longest substring. Why not \"kew\" selected as the longest one? Help here is much appreciated."
                    },
                    {
                        "username": "VladoBradi",
                        "content": "Both answers are correct \"wke\" and \"kew\" but probably they choose just one (the first one because of characters line) for correct answer. "
                    },
                    {
                        "username": "lipingm",
                        "content": "1, [], max=0;\n2,[p], max =1;\n3,[p,w], max =2;\n4,[w], max=2;\n5,[w,k], max=2;\n6,[w,k,e], max=3;\n7,[k,e], max=3\n8,end\nSo max=3"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "[@somavik99](/somavik99) pke is subsequence not substring"
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@somavik99](/somavik99) Because it has to be the first instance of a substring, you kind have to read in between the line in mean here, otherwise it could be argued why not kew too!"
                    },
                    {
                        "username": "mohittyagi",
                        "content": "[@somavik99](/somavik99) \"the longest substring without repeating characters\""
                    },
                    {
                        "username": "somavik99",
                        "content": "[@ignorant_ppp](/ignorant_ppp)  My question is why not \"pke\" its total unique value."
                    },
                    {
                        "username": "ignorant_ppp",
                        "content": "you are suppose to return the length not the string\\n"
                    },
                    {
                        "username": "kauntey1O1",
                        "content": "because we would get \"wke\" first and \"kew\" is as the same length as \"wke\""
                    },
                    {
                        "username": "gerryhd",
                        "content": "I don't think that's relevant to the end result as both would return the length of 3."
                    },
                    {
                        "username": "momoxsalameh",
                        "content": "Take it as the longest sequence of non-identical character in the string"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Salheen Bakhet](/technologyaddicted) \\nMost people will scan from left to right and the result \"wke\" will appear first, but if you are used to scanning from right to left (like the habit of writing arabic, japan, etc.) then \"kwe\" this time appeared first."
                    },
                    {
                        "username": "manmitta",
                        "content": "We always starts with left side of string and when you checked \"pwwkew\" .. \"wke\" comes first ."
                    },
                    {
                        "username": "pstrait",
                        "content": "It doesn\\'t matter which substring, you need to return an integer not a substring."
                    },
                    {
                        "username": "amirhassan032",
                        "content": "it can be kew but wke comes first thats why it is assumed as answer"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "kew is also longest substring for sure but we would have considered it if it was scanned earlier"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "when we are iterating from the beginning of the string the we found the max substring before then why would we update the previous value with upcoming value if it still has the same length substring"
                    },
                    {
                        "username": "nancychauhan99",
                        "content": "focus is on the max length achieved rather than the substring itself"
                    },
                    {
                        "username": "ooPo",
                        "content": "Do not try to use brute force to pass the problem."
                    },
                    {
                        "username": "close27",
                        "content": "my brute force got accepted. https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3747943/brute-force-easy-to-understand/"
                    },
                    {
                        "username": "Kromydas",
                        "content": "the problem is that you are not limited from a - z, and can have A-Z as well as 0-9 and other chracters. this is a good approach if you are only limited to a-z. It will solve all the test cases except 985 - 987.\n\nhere is my code which implements your approach:\n```\nclass Solution {\npublic:\n    bool isCharacterInString(const string& str, char ch) {\n        for (char c : str) {\n            if (c == ch) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    int lengthOfLongestSubstring(string s) {\n        int n = s.size();\n        int maxi = 0;\n        for (int i = 0; i < n; i++) {\n            int var = min(26, n - i);\n            for (int j = 0; j < var; j++) {\n                string str = s.substr(i, j + 1);\n                string temp = \"\";\n                bool good = true;\n                for (int k = 0; k < str.size(); k++) {\n                    if (isCharacterInString(temp, str[k])) {\n                        good = false;\n                        break;\n                    } else {\n                        temp += str[k];\n                    }\n                }\n                if (good) {\n                    maxi = max(maxi, (int)str.size());\n                } else {\n                    break;\n                }\n            }\n        }\n        return maxi;\n    }\n};\n```\nagain, note that this does not work for this problem. nice thinking though!\n\nthe way i did it is by using hash sets, which gives you 2 for loops with at worst O(n^2) time (which won't happen). It involves using ```for (int i = 0; i < n; i++) {for int j = i; j < n; j++}```. "
                    },
                    {
                        "username": "ranbir7",
                        "content": "[@cartesPerforees](/cartesPerforees) I used deque"
                    },
                    {
                        "username": "ranbir7",
                        "content": "I used deque"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Or please, do use brute force. Brute force works just fine if you take adavantage of the fact that you're working with a finite alphabet. You can scan through all substrings of all sizes up to  $\\alpha$ where $\\alpha$ is the size of your alphabet (cause no substring could be larger than the full alphabet without repeats). Even the brutest of brute force in $O(\\alpha^2n)$ is comfortably accepted.\nWhen you don't listen to random people telling you how to think or not to think, you sometimes find solutions they didn't anticipate ;)"
                    },
                    {
                        "username": "media_overdosed",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) because it\\'s slow af (especially python)"
                    },
                    {
                        "username": "Anson_W",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) In fact, it can be passed by using unordered_map. Less than 1s."
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t)  the length of test case is 5 * 10^4 , brute force is N^2 . TLE"
                    },
                    {
                        "username": "whyevenquestion1t",
                        "content": "why not?\\n"
                    },
                    {
                        "username": "anthonyhuang",
                        "content": "I have some problem understanding the problem, this test case \"dvdf \"says the output should be 3, while I suppose it should be 2.\\n\\n\"dv\" or \"df\" is what I think. It should be substring not subsequence like the question mentioned. Should it confined to \"Consistent String\"?\\n\\n"
                    },
                    {
                        "username": "tsashokstar27",
                        "content": "[@ricko34](/ricko34) Because of longest sub string length if we use the dv it will be 2. But we have vdf with length 3."
                    },
                    {
                        "username": "omaute260902",
                        "content": "the testcase is correct. the substring for this test case would be \\'vdf\\' and the answer therefore would be 3\\n"
                    },
                    {
                        "username": "ricko34",
                        "content": "absolutely,  i  don\\'t understand why \\'d\\' is ignored "
                    },
                    {
                        "username": "Shazamct",
                        "content": "output should be \\'vdf\\' i.e. 3\\n"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "swagiuli",
                        "content": "[@nrjsuthar](/nrjsuthar) yes"
                    },
                    {
                        "username": "nrjsuthar",
                        "content": "vdf is the longest subsequence right?\\n"
                    },
                    {
                        "username": "EloiVega",
                        "content": "the answer is \\'vdf\\' which is of length 3"
                    },
                    {
                        "username": "manavjoshi1107",
                        "content": "vdf have length 3\\n"
                    },
                    {
                        "username": "mkraghava007",
                        "content": "d v & f are different characters together, hence ig it\\'s considering them together"
                    },
                    {
                        "username": "damajsam93",
                        "content": "vfd ==>3 "
                    },
                    {
                        "username": "abhiram__devisetti",
                        "content": "vdf is answer"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "cause \"vdf\" is the longest substring in the given string"
                    },
                    {
                        "username": "9819497296",
                        "content": "dvdf is a string and and the longest substring should be vdf thats why the longest length of a substring should be 3 i hope you understand"
                    },
                    {
                        "username": "dmoriasi",
                        "content": "The longest string is \"vdf\" You basically start from index 1. to the end. "
                    },
                    {
                        "username": "codebadger",
                        "content": "\"vdf\" is a valid substring"
                    },
                    {
                        "username": "uakrongrad",
                        "content": "I think the task could be better explained by asking the tester to find the length of the longest non repeating set of continous characters in the string."
                    },
                    {
                        "username": "firezdog",
                        "content": "\"continuous characters in a string\" -- that is, a substring (as opposed to a subsequence)"
                    },
                    {
                        "username": "juansymontano",
                        "content": "True. I was wondering what they meant too. After realizing it\\u2019s just longest unique it was quite easy to code. "
                    },
                    {
                        "username": "sanyuktakate",
                        "content": "Did anyone get an error as - *\" is not a valid value of type string* for an input which was a string with space (\" \")?"
                    },
                    {
                        "username": "janis__",
                        "content": "If you\\'re encountering an error on LeetCode that says \" \" is not a valid value of type string, it\\'s likely not an issue with the code you provided. Instead, ensure that when you\\'re testing your function on LeetCode, you\\'re inputting the string with spaces correctly. In the test input box, instead of just entering a space, you should enter the string with double quotes, like \" \". This ensures LeetCode recognizes it as a valid string input."
                    },
                    {
                        "username": "chirag2239",
                        "content": "what to do for \" \"?\\nI am just copying all the characters to hash array. Space character index, 32, should be updated with the count."
                    },
                    {
                        "username": "piyushpandey6970",
                        "content": "[@Soham_Panchal](/Soham_Panchal) what to do for space\\n"
                    },
                    {
                        "username": "Qusai_issa",
                        "content": "\\' \\'"
                    },
                    {
                        "username": "M-Narendra",
                        "content": "no\\n"
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "Yes.\\n"
                    },
                    {
                        "username": "YASH_PARSANA",
                        "content": "**Please upvote if solution is useful**\\n\\nfull explanation of queation step by step solution brute force to optimal approach\\nExplained by googler\\n\\nhttps://youtu.be/qtVh-XEpsJo"
                    },
                    {
                        "username": "asfdg32",
                        "content": "It comes out to be wrong  when I submit my alg and tells me that it failed to process the input \"aa\" while I successfully get it right with the input \"aa\" in my local computer and the \"run code\" function in the website. Is it the website's bug? Or some differences between the \"run code\" and \"submit\" function exists. Or something is wrong with my code."
                    },
                    {
                        "username": "darrendsa06",
                        "content": "Im facing the same problem.\\n"
                    },
                    {
                        "username": "harshnayak580",
                        "content": "h\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for June, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/longest-substring-without-repeating-characters/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 3 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Sliding Window\n\n  \n**Approach 3:** Sliding Window Optimized\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1567302,
                "content": [
                    {
                        "username": "ktranada1403",
                        "content": "Bruh who tf sat down and wrote 987 testcases. This is sacrilegious. Go touch grass. See the world out there gang. This is not it. "
                    },
                    {
                        "username": "malinkov",
                        "content": "[@Mohamed-Kallel](/Mohamed-Kallel)  same XD"
                    },
                    {
                        "username": "malinkov",
                        "content": "LOL XD hahahhah yap, see the world fam XD hahahah"
                    },
                    {
                        "username": "Mohamed-Kallel",
                        "content": "the real pain  is when you see that 986/987 testcases passed "
                    },
                    {
                        "username": "jnatc1",
                        "content": "On god bro."
                    },
                    {
                        "username": "ktranada1403",
                        "content": "[@Eddiea6987](/Eddiea6987) im clearly joking "
                    },
                    {
                        "username": "user0915S",
                        "content": "bro, had all the time in the world\\n"
                    },
                    {
                        "username": "Himanshu_kmr24",
                        "content": "[@Eddiea6987](/Eddiea6987) So the important thing is touching grass :p"
                    },
                    {
                        "username": "aidenscoding",
                        "content": "Indeed. This should be flagged as hard. What\\'s wrong with people"
                    },
                    {
                        "username": "overbound",
                        "content": "I needed this."
                    },
                    {
                        "username": "sprodaturu",
                        "content": "[@Eddiea6987](/Eddiea6987) XD"
                    },
                    {
                        "username": "Eddiea6987",
                        "content": "so you being a programmer you cant think of an automated way to write all the test cases? what makes you think someone typed each  one? The dude probably spent 5 min to write a script and then went outside and touched grass. "
                    },
                    {
                        "username": "jlbroughton",
                        "content": "\\uD83D\\uDE02"
                    },
                    {
                        "username": "candypop8724",
                        "content": "bro fr man, i thought i got them all but fucking 987? what even"
                    },
                    {
                        "username": "user3327Ub",
                        "content": "You should stop using these overused jokes..."
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@rucola](/rucola) I think it is reffering to compiler time, not exercises time!"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "fr this is insane"
                    },
                    {
                        "username": "rucola",
                        "content": "Do you know the time limit? I have tried different approaches with c#, but they all run into \"Time Limit Exceeded\" for testcase 987 "
                    },
                    {
                        "username": "michaelg02",
                        "content": "The wording of the question was unclear for me. Example 3 does cover this where \"wke\" was the longest not \"wkew\", but the wording of the question suggests that the substring can have multiple of the same character as long as it is not repeating.\\n\\n\"wkew\" would pass because the substring does not have two w\\'s in a row.\\n\\n*Instead of:\\nGiven a string, find the length of the longest substring without repeating characters.*\\n\\n*I think this is a better wording:\\nGiven a string, find the length of the longest substring without **duplicate** characters.*\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Belyua",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) congratulations, you solved the problem. On leetcode there is a special section for solved problems"
                    },
                    {
                        "username": "ricko34",
                        "content": "[@mayank-01](/mayank-01) i think \\'kew\\' can\\'t be part of substring \\n "
                    },
                    {
                        "username": "ricko34",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) u have a good shortened solution, but this is not the right place \\n"
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "final=[]\\ndef chack(word):\\n    w=\"\"\\n    \\n    for i in word:\\n        if i in w:\\n           return\\n        else:\\n            w+=i\\n    final.append(w)\\n    \\n            \\n\\narry=\"pwwkew\"\\nfor i in range(len(arry)):\\n    for j in range(i,len(arry)):\\n        v=arry[i:j+1]\\n        chack(v)\\nlength=[]\\nfor i in final:\\n    length.append(len(i))\\nbig=max(length)\\nfor i in final:\\n    if big==len(i):\\n        print(i)\\n        break\\n    "
                    },
                    {
                        "username": "sandeep-p",
                        "content": "May be the companies that asked this question expected the candidate to be unclear and discuss, before jumping over the code?"
                    },
                    {
                        "username": "Med__think",
                        "content": "[@mayank-01](/mayank-01)  it i just one of the examples the motive is to find the length of longest substring without repeating characters"
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "what does repeating means? Something that happens more than once. I dont think it is unprecise, im not english native and yet was able to understand. And Examples are there to extend the wording. "
                    },
                    {
                        "username": "mayank-01",
                        "content": "Yes, I agree with you, I am also confused in example 3 there are 2 substrings \\'wke\\' and \\'kew\\' of same length, so this should be mentioned like it can be multiple substrings with same length....."
                    },
                    {
                        "username": "technologyaddicted",
                        "content": "Given \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\nI do not understand that in the Example # 3, it mentions 'wke' as the longest substring. Why not \"kew\" selected as the longest one? Help here is much appreciated."
                    },
                    {
                        "username": "VladoBradi",
                        "content": "Both answers are correct \"wke\" and \"kew\" but probably they choose just one (the first one because of characters line) for correct answer. "
                    },
                    {
                        "username": "lipingm",
                        "content": "1, [], max=0;\n2,[p], max =1;\n3,[p,w], max =2;\n4,[w], max=2;\n5,[w,k], max=2;\n6,[w,k,e], max=3;\n7,[k,e], max=3\n8,end\nSo max=3"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "[@somavik99](/somavik99) pke is subsequence not substring"
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@somavik99](/somavik99) Because it has to be the first instance of a substring, you kind have to read in between the line in mean here, otherwise it could be argued why not kew too!"
                    },
                    {
                        "username": "mohittyagi",
                        "content": "[@somavik99](/somavik99) \"the longest substring without repeating characters\""
                    },
                    {
                        "username": "somavik99",
                        "content": "[@ignorant_ppp](/ignorant_ppp)  My question is why not \"pke\" its total unique value."
                    },
                    {
                        "username": "ignorant_ppp",
                        "content": "you are suppose to return the length not the string\\n"
                    },
                    {
                        "username": "kauntey1O1",
                        "content": "because we would get \"wke\" first and \"kew\" is as the same length as \"wke\""
                    },
                    {
                        "username": "gerryhd",
                        "content": "I don't think that's relevant to the end result as both would return the length of 3."
                    },
                    {
                        "username": "momoxsalameh",
                        "content": "Take it as the longest sequence of non-identical character in the string"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Salheen Bakhet](/technologyaddicted) \\nMost people will scan from left to right and the result \"wke\" will appear first, but if you are used to scanning from right to left (like the habit of writing arabic, japan, etc.) then \"kwe\" this time appeared first."
                    },
                    {
                        "username": "manmitta",
                        "content": "We always starts with left side of string and when you checked \"pwwkew\" .. \"wke\" comes first ."
                    },
                    {
                        "username": "pstrait",
                        "content": "It doesn\\'t matter which substring, you need to return an integer not a substring."
                    },
                    {
                        "username": "amirhassan032",
                        "content": "it can be kew but wke comes first thats why it is assumed as answer"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "kew is also longest substring for sure but we would have considered it if it was scanned earlier"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "when we are iterating from the beginning of the string the we found the max substring before then why would we update the previous value with upcoming value if it still has the same length substring"
                    },
                    {
                        "username": "nancychauhan99",
                        "content": "focus is on the max length achieved rather than the substring itself"
                    },
                    {
                        "username": "ooPo",
                        "content": "Do not try to use brute force to pass the problem."
                    },
                    {
                        "username": "close27",
                        "content": "my brute force got accepted. https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3747943/brute-force-easy-to-understand/"
                    },
                    {
                        "username": "Kromydas",
                        "content": "the problem is that you are not limited from a - z, and can have A-Z as well as 0-9 and other chracters. this is a good approach if you are only limited to a-z. It will solve all the test cases except 985 - 987.\n\nhere is my code which implements your approach:\n```\nclass Solution {\npublic:\n    bool isCharacterInString(const string& str, char ch) {\n        for (char c : str) {\n            if (c == ch) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    int lengthOfLongestSubstring(string s) {\n        int n = s.size();\n        int maxi = 0;\n        for (int i = 0; i < n; i++) {\n            int var = min(26, n - i);\n            for (int j = 0; j < var; j++) {\n                string str = s.substr(i, j + 1);\n                string temp = \"\";\n                bool good = true;\n                for (int k = 0; k < str.size(); k++) {\n                    if (isCharacterInString(temp, str[k])) {\n                        good = false;\n                        break;\n                    } else {\n                        temp += str[k];\n                    }\n                }\n                if (good) {\n                    maxi = max(maxi, (int)str.size());\n                } else {\n                    break;\n                }\n            }\n        }\n        return maxi;\n    }\n};\n```\nagain, note that this does not work for this problem. nice thinking though!\n\nthe way i did it is by using hash sets, which gives you 2 for loops with at worst O(n^2) time (which won't happen). It involves using ```for (int i = 0; i < n; i++) {for int j = i; j < n; j++}```. "
                    },
                    {
                        "username": "ranbir7",
                        "content": "[@cartesPerforees](/cartesPerforees) I used deque"
                    },
                    {
                        "username": "ranbir7",
                        "content": "I used deque"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Or please, do use brute force. Brute force works just fine if you take adavantage of the fact that you're working with a finite alphabet. You can scan through all substrings of all sizes up to  $\\alpha$ where $\\alpha$ is the size of your alphabet (cause no substring could be larger than the full alphabet without repeats). Even the brutest of brute force in $O(\\alpha^2n)$ is comfortably accepted.\nWhen you don't listen to random people telling you how to think or not to think, you sometimes find solutions they didn't anticipate ;)"
                    },
                    {
                        "username": "media_overdosed",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) because it\\'s slow af (especially python)"
                    },
                    {
                        "username": "Anson_W",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) In fact, it can be passed by using unordered_map. Less than 1s."
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t)  the length of test case is 5 * 10^4 , brute force is N^2 . TLE"
                    },
                    {
                        "username": "whyevenquestion1t",
                        "content": "why not?\\n"
                    },
                    {
                        "username": "anthonyhuang",
                        "content": "I have some problem understanding the problem, this test case \"dvdf \"says the output should be 3, while I suppose it should be 2.\\n\\n\"dv\" or \"df\" is what I think. It should be substring not subsequence like the question mentioned. Should it confined to \"Consistent String\"?\\n\\n"
                    },
                    {
                        "username": "tsashokstar27",
                        "content": "[@ricko34](/ricko34) Because of longest sub string length if we use the dv it will be 2. But we have vdf with length 3."
                    },
                    {
                        "username": "omaute260902",
                        "content": "the testcase is correct. the substring for this test case would be \\'vdf\\' and the answer therefore would be 3\\n"
                    },
                    {
                        "username": "ricko34",
                        "content": "absolutely,  i  don\\'t understand why \\'d\\' is ignored "
                    },
                    {
                        "username": "Shazamct",
                        "content": "output should be \\'vdf\\' i.e. 3\\n"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "swagiuli",
                        "content": "[@nrjsuthar](/nrjsuthar) yes"
                    },
                    {
                        "username": "nrjsuthar",
                        "content": "vdf is the longest subsequence right?\\n"
                    },
                    {
                        "username": "EloiVega",
                        "content": "the answer is \\'vdf\\' which is of length 3"
                    },
                    {
                        "username": "manavjoshi1107",
                        "content": "vdf have length 3\\n"
                    },
                    {
                        "username": "mkraghava007",
                        "content": "d v & f are different characters together, hence ig it\\'s considering them together"
                    },
                    {
                        "username": "damajsam93",
                        "content": "vfd ==>3 "
                    },
                    {
                        "username": "abhiram__devisetti",
                        "content": "vdf is answer"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "cause \"vdf\" is the longest substring in the given string"
                    },
                    {
                        "username": "9819497296",
                        "content": "dvdf is a string and and the longest substring should be vdf thats why the longest length of a substring should be 3 i hope you understand"
                    },
                    {
                        "username": "dmoriasi",
                        "content": "The longest string is \"vdf\" You basically start from index 1. to the end. "
                    },
                    {
                        "username": "codebadger",
                        "content": "\"vdf\" is a valid substring"
                    },
                    {
                        "username": "uakrongrad",
                        "content": "I think the task could be better explained by asking the tester to find the length of the longest non repeating set of continous characters in the string."
                    },
                    {
                        "username": "firezdog",
                        "content": "\"continuous characters in a string\" -- that is, a substring (as opposed to a subsequence)"
                    },
                    {
                        "username": "juansymontano",
                        "content": "True. I was wondering what they meant too. After realizing it\\u2019s just longest unique it was quite easy to code. "
                    },
                    {
                        "username": "sanyuktakate",
                        "content": "Did anyone get an error as - *\" is not a valid value of type string* for an input which was a string with space (\" \")?"
                    },
                    {
                        "username": "janis__",
                        "content": "If you\\'re encountering an error on LeetCode that says \" \" is not a valid value of type string, it\\'s likely not an issue with the code you provided. Instead, ensure that when you\\'re testing your function on LeetCode, you\\'re inputting the string with spaces correctly. In the test input box, instead of just entering a space, you should enter the string with double quotes, like \" \". This ensures LeetCode recognizes it as a valid string input."
                    },
                    {
                        "username": "chirag2239",
                        "content": "what to do for \" \"?\\nI am just copying all the characters to hash array. Space character index, 32, should be updated with the count."
                    },
                    {
                        "username": "piyushpandey6970",
                        "content": "[@Soham_Panchal](/Soham_Panchal) what to do for space\\n"
                    },
                    {
                        "username": "Qusai_issa",
                        "content": "\\' \\'"
                    },
                    {
                        "username": "M-Narendra",
                        "content": "no\\n"
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "Yes.\\n"
                    },
                    {
                        "username": "YASH_PARSANA",
                        "content": "**Please upvote if solution is useful**\\n\\nfull explanation of queation step by step solution brute force to optimal approach\\nExplained by googler\\n\\nhttps://youtu.be/qtVh-XEpsJo"
                    },
                    {
                        "username": "asfdg32",
                        "content": "It comes out to be wrong  when I submit my alg and tells me that it failed to process the input \"aa\" while I successfully get it right with the input \"aa\" in my local computer and the \"run code\" function in the website. Is it the website's bug? Or some differences between the \"run code\" and \"submit\" function exists. Or something is wrong with my code."
                    },
                    {
                        "username": "darrendsa06",
                        "content": "Im facing the same problem.\\n"
                    },
                    {
                        "username": "harshnayak580",
                        "content": "h\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for June, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/longest-substring-without-repeating-characters/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 3 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Sliding Window\n\n  \n**Approach 3:** Sliding Window Optimized\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1570611,
                "content": [
                    {
                        "username": "ktranada1403",
                        "content": "Bruh who tf sat down and wrote 987 testcases. This is sacrilegious. Go touch grass. See the world out there gang. This is not it. "
                    },
                    {
                        "username": "malinkov",
                        "content": "[@Mohamed-Kallel](/Mohamed-Kallel)  same XD"
                    },
                    {
                        "username": "malinkov",
                        "content": "LOL XD hahahhah yap, see the world fam XD hahahah"
                    },
                    {
                        "username": "Mohamed-Kallel",
                        "content": "the real pain  is when you see that 986/987 testcases passed "
                    },
                    {
                        "username": "jnatc1",
                        "content": "On god bro."
                    },
                    {
                        "username": "ktranada1403",
                        "content": "[@Eddiea6987](/Eddiea6987) im clearly joking "
                    },
                    {
                        "username": "user0915S",
                        "content": "bro, had all the time in the world\\n"
                    },
                    {
                        "username": "Himanshu_kmr24",
                        "content": "[@Eddiea6987](/Eddiea6987) So the important thing is touching grass :p"
                    },
                    {
                        "username": "aidenscoding",
                        "content": "Indeed. This should be flagged as hard. What\\'s wrong with people"
                    },
                    {
                        "username": "overbound",
                        "content": "I needed this."
                    },
                    {
                        "username": "sprodaturu",
                        "content": "[@Eddiea6987](/Eddiea6987) XD"
                    },
                    {
                        "username": "Eddiea6987",
                        "content": "so you being a programmer you cant think of an automated way to write all the test cases? what makes you think someone typed each  one? The dude probably spent 5 min to write a script and then went outside and touched grass. "
                    },
                    {
                        "username": "jlbroughton",
                        "content": "\\uD83D\\uDE02"
                    },
                    {
                        "username": "candypop8724",
                        "content": "bro fr man, i thought i got them all but fucking 987? what even"
                    },
                    {
                        "username": "user3327Ub",
                        "content": "You should stop using these overused jokes..."
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@rucola](/rucola) I think it is reffering to compiler time, not exercises time!"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "fr this is insane"
                    },
                    {
                        "username": "rucola",
                        "content": "Do you know the time limit? I have tried different approaches with c#, but they all run into \"Time Limit Exceeded\" for testcase 987 "
                    },
                    {
                        "username": "michaelg02",
                        "content": "The wording of the question was unclear for me. Example 3 does cover this where \"wke\" was the longest not \"wkew\", but the wording of the question suggests that the substring can have multiple of the same character as long as it is not repeating.\\n\\n\"wkew\" would pass because the substring does not have two w\\'s in a row.\\n\\n*Instead of:\\nGiven a string, find the length of the longest substring without repeating characters.*\\n\\n*I think this is a better wording:\\nGiven a string, find the length of the longest substring without **duplicate** characters.*\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Belyua",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) congratulations, you solved the problem. On leetcode there is a special section for solved problems"
                    },
                    {
                        "username": "ricko34",
                        "content": "[@mayank-01](/mayank-01) i think \\'kew\\' can\\'t be part of substring \\n "
                    },
                    {
                        "username": "ricko34",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) u have a good shortened solution, but this is not the right place \\n"
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "final=[]\\ndef chack(word):\\n    w=\"\"\\n    \\n    for i in word:\\n        if i in w:\\n           return\\n        else:\\n            w+=i\\n    final.append(w)\\n    \\n            \\n\\narry=\"pwwkew\"\\nfor i in range(len(arry)):\\n    for j in range(i,len(arry)):\\n        v=arry[i:j+1]\\n        chack(v)\\nlength=[]\\nfor i in final:\\n    length.append(len(i))\\nbig=max(length)\\nfor i in final:\\n    if big==len(i):\\n        print(i)\\n        break\\n    "
                    },
                    {
                        "username": "sandeep-p",
                        "content": "May be the companies that asked this question expected the candidate to be unclear and discuss, before jumping over the code?"
                    },
                    {
                        "username": "Med__think",
                        "content": "[@mayank-01](/mayank-01)  it i just one of the examples the motive is to find the length of longest substring without repeating characters"
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "what does repeating means? Something that happens more than once. I dont think it is unprecise, im not english native and yet was able to understand. And Examples are there to extend the wording. "
                    },
                    {
                        "username": "mayank-01",
                        "content": "Yes, I agree with you, I am also confused in example 3 there are 2 substrings \\'wke\\' and \\'kew\\' of same length, so this should be mentioned like it can be multiple substrings with same length....."
                    },
                    {
                        "username": "technologyaddicted",
                        "content": "Given \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\nI do not understand that in the Example # 3, it mentions 'wke' as the longest substring. Why not \"kew\" selected as the longest one? Help here is much appreciated."
                    },
                    {
                        "username": "VladoBradi",
                        "content": "Both answers are correct \"wke\" and \"kew\" but probably they choose just one (the first one because of characters line) for correct answer. "
                    },
                    {
                        "username": "lipingm",
                        "content": "1, [], max=0;\n2,[p], max =1;\n3,[p,w], max =2;\n4,[w], max=2;\n5,[w,k], max=2;\n6,[w,k,e], max=3;\n7,[k,e], max=3\n8,end\nSo max=3"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "[@somavik99](/somavik99) pke is subsequence not substring"
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@somavik99](/somavik99) Because it has to be the first instance of a substring, you kind have to read in between the line in mean here, otherwise it could be argued why not kew too!"
                    },
                    {
                        "username": "mohittyagi",
                        "content": "[@somavik99](/somavik99) \"the longest substring without repeating characters\""
                    },
                    {
                        "username": "somavik99",
                        "content": "[@ignorant_ppp](/ignorant_ppp)  My question is why not \"pke\" its total unique value."
                    },
                    {
                        "username": "ignorant_ppp",
                        "content": "you are suppose to return the length not the string\\n"
                    },
                    {
                        "username": "kauntey1O1",
                        "content": "because we would get \"wke\" first and \"kew\" is as the same length as \"wke\""
                    },
                    {
                        "username": "gerryhd",
                        "content": "I don't think that's relevant to the end result as both would return the length of 3."
                    },
                    {
                        "username": "momoxsalameh",
                        "content": "Take it as the longest sequence of non-identical character in the string"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Salheen Bakhet](/technologyaddicted) \\nMost people will scan from left to right and the result \"wke\" will appear first, but if you are used to scanning from right to left (like the habit of writing arabic, japan, etc.) then \"kwe\" this time appeared first."
                    },
                    {
                        "username": "manmitta",
                        "content": "We always starts with left side of string and when you checked \"pwwkew\" .. \"wke\" comes first ."
                    },
                    {
                        "username": "pstrait",
                        "content": "It doesn\\'t matter which substring, you need to return an integer not a substring."
                    },
                    {
                        "username": "amirhassan032",
                        "content": "it can be kew but wke comes first thats why it is assumed as answer"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "kew is also longest substring for sure but we would have considered it if it was scanned earlier"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "when we are iterating from the beginning of the string the we found the max substring before then why would we update the previous value with upcoming value if it still has the same length substring"
                    },
                    {
                        "username": "nancychauhan99",
                        "content": "focus is on the max length achieved rather than the substring itself"
                    },
                    {
                        "username": "ooPo",
                        "content": "Do not try to use brute force to pass the problem."
                    },
                    {
                        "username": "close27",
                        "content": "my brute force got accepted. https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3747943/brute-force-easy-to-understand/"
                    },
                    {
                        "username": "Kromydas",
                        "content": "the problem is that you are not limited from a - z, and can have A-Z as well as 0-9 and other chracters. this is a good approach if you are only limited to a-z. It will solve all the test cases except 985 - 987.\n\nhere is my code which implements your approach:\n```\nclass Solution {\npublic:\n    bool isCharacterInString(const string& str, char ch) {\n        for (char c : str) {\n            if (c == ch) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    int lengthOfLongestSubstring(string s) {\n        int n = s.size();\n        int maxi = 0;\n        for (int i = 0; i < n; i++) {\n            int var = min(26, n - i);\n            for (int j = 0; j < var; j++) {\n                string str = s.substr(i, j + 1);\n                string temp = \"\";\n                bool good = true;\n                for (int k = 0; k < str.size(); k++) {\n                    if (isCharacterInString(temp, str[k])) {\n                        good = false;\n                        break;\n                    } else {\n                        temp += str[k];\n                    }\n                }\n                if (good) {\n                    maxi = max(maxi, (int)str.size());\n                } else {\n                    break;\n                }\n            }\n        }\n        return maxi;\n    }\n};\n```\nagain, note that this does not work for this problem. nice thinking though!\n\nthe way i did it is by using hash sets, which gives you 2 for loops with at worst O(n^2) time (which won't happen). It involves using ```for (int i = 0; i < n; i++) {for int j = i; j < n; j++}```. "
                    },
                    {
                        "username": "ranbir7",
                        "content": "[@cartesPerforees](/cartesPerforees) I used deque"
                    },
                    {
                        "username": "ranbir7",
                        "content": "I used deque"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Or please, do use brute force. Brute force works just fine if you take adavantage of the fact that you're working with a finite alphabet. You can scan through all substrings of all sizes up to  $\\alpha$ where $\\alpha$ is the size of your alphabet (cause no substring could be larger than the full alphabet without repeats). Even the brutest of brute force in $O(\\alpha^2n)$ is comfortably accepted.\nWhen you don't listen to random people telling you how to think or not to think, you sometimes find solutions they didn't anticipate ;)"
                    },
                    {
                        "username": "media_overdosed",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) because it\\'s slow af (especially python)"
                    },
                    {
                        "username": "Anson_W",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) In fact, it can be passed by using unordered_map. Less than 1s."
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t)  the length of test case is 5 * 10^4 , brute force is N^2 . TLE"
                    },
                    {
                        "username": "whyevenquestion1t",
                        "content": "why not?\\n"
                    },
                    {
                        "username": "anthonyhuang",
                        "content": "I have some problem understanding the problem, this test case \"dvdf \"says the output should be 3, while I suppose it should be 2.\\n\\n\"dv\" or \"df\" is what I think. It should be substring not subsequence like the question mentioned. Should it confined to \"Consistent String\"?\\n\\n"
                    },
                    {
                        "username": "tsashokstar27",
                        "content": "[@ricko34](/ricko34) Because of longest sub string length if we use the dv it will be 2. But we have vdf with length 3."
                    },
                    {
                        "username": "omaute260902",
                        "content": "the testcase is correct. the substring for this test case would be \\'vdf\\' and the answer therefore would be 3\\n"
                    },
                    {
                        "username": "ricko34",
                        "content": "absolutely,  i  don\\'t understand why \\'d\\' is ignored "
                    },
                    {
                        "username": "Shazamct",
                        "content": "output should be \\'vdf\\' i.e. 3\\n"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "swagiuli",
                        "content": "[@nrjsuthar](/nrjsuthar) yes"
                    },
                    {
                        "username": "nrjsuthar",
                        "content": "vdf is the longest subsequence right?\\n"
                    },
                    {
                        "username": "EloiVega",
                        "content": "the answer is \\'vdf\\' which is of length 3"
                    },
                    {
                        "username": "manavjoshi1107",
                        "content": "vdf have length 3\\n"
                    },
                    {
                        "username": "mkraghava007",
                        "content": "d v & f are different characters together, hence ig it\\'s considering them together"
                    },
                    {
                        "username": "damajsam93",
                        "content": "vfd ==>3 "
                    },
                    {
                        "username": "abhiram__devisetti",
                        "content": "vdf is answer"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "cause \"vdf\" is the longest substring in the given string"
                    },
                    {
                        "username": "9819497296",
                        "content": "dvdf is a string and and the longest substring should be vdf thats why the longest length of a substring should be 3 i hope you understand"
                    },
                    {
                        "username": "dmoriasi",
                        "content": "The longest string is \"vdf\" You basically start from index 1. to the end. "
                    },
                    {
                        "username": "codebadger",
                        "content": "\"vdf\" is a valid substring"
                    },
                    {
                        "username": "uakrongrad",
                        "content": "I think the task could be better explained by asking the tester to find the length of the longest non repeating set of continous characters in the string."
                    },
                    {
                        "username": "firezdog",
                        "content": "\"continuous characters in a string\" -- that is, a substring (as opposed to a subsequence)"
                    },
                    {
                        "username": "juansymontano",
                        "content": "True. I was wondering what they meant too. After realizing it\\u2019s just longest unique it was quite easy to code. "
                    },
                    {
                        "username": "sanyuktakate",
                        "content": "Did anyone get an error as - *\" is not a valid value of type string* for an input which was a string with space (\" \")?"
                    },
                    {
                        "username": "janis__",
                        "content": "If you\\'re encountering an error on LeetCode that says \" \" is not a valid value of type string, it\\'s likely not an issue with the code you provided. Instead, ensure that when you\\'re testing your function on LeetCode, you\\'re inputting the string with spaces correctly. In the test input box, instead of just entering a space, you should enter the string with double quotes, like \" \". This ensures LeetCode recognizes it as a valid string input."
                    },
                    {
                        "username": "chirag2239",
                        "content": "what to do for \" \"?\\nI am just copying all the characters to hash array. Space character index, 32, should be updated with the count."
                    },
                    {
                        "username": "piyushpandey6970",
                        "content": "[@Soham_Panchal](/Soham_Panchal) what to do for space\\n"
                    },
                    {
                        "username": "Qusai_issa",
                        "content": "\\' \\'"
                    },
                    {
                        "username": "M-Narendra",
                        "content": "no\\n"
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "Yes.\\n"
                    },
                    {
                        "username": "YASH_PARSANA",
                        "content": "**Please upvote if solution is useful**\\n\\nfull explanation of queation step by step solution brute force to optimal approach\\nExplained by googler\\n\\nhttps://youtu.be/qtVh-XEpsJo"
                    },
                    {
                        "username": "asfdg32",
                        "content": "It comes out to be wrong  when I submit my alg and tells me that it failed to process the input \"aa\" while I successfully get it right with the input \"aa\" in my local computer and the \"run code\" function in the website. Is it the website's bug? Or some differences between the \"run code\" and \"submit\" function exists. Or something is wrong with my code."
                    },
                    {
                        "username": "darrendsa06",
                        "content": "Im facing the same problem.\\n"
                    },
                    {
                        "username": "harshnayak580",
                        "content": "h\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for June, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/longest-substring-without-repeating-characters/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 3 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Sliding Window\n\n  \n**Approach 3:** Sliding Window Optimized\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1573301,
                "content": [
                    {
                        "username": "ktranada1403",
                        "content": "Bruh who tf sat down and wrote 987 testcases. This is sacrilegious. Go touch grass. See the world out there gang. This is not it. "
                    },
                    {
                        "username": "malinkov",
                        "content": "[@Mohamed-Kallel](/Mohamed-Kallel)  same XD"
                    },
                    {
                        "username": "malinkov",
                        "content": "LOL XD hahahhah yap, see the world fam XD hahahah"
                    },
                    {
                        "username": "Mohamed-Kallel",
                        "content": "the real pain  is when you see that 986/987 testcases passed "
                    },
                    {
                        "username": "jnatc1",
                        "content": "On god bro."
                    },
                    {
                        "username": "ktranada1403",
                        "content": "[@Eddiea6987](/Eddiea6987) im clearly joking "
                    },
                    {
                        "username": "user0915S",
                        "content": "bro, had all the time in the world\\n"
                    },
                    {
                        "username": "Himanshu_kmr24",
                        "content": "[@Eddiea6987](/Eddiea6987) So the important thing is touching grass :p"
                    },
                    {
                        "username": "aidenscoding",
                        "content": "Indeed. This should be flagged as hard. What\\'s wrong with people"
                    },
                    {
                        "username": "overbound",
                        "content": "I needed this."
                    },
                    {
                        "username": "sprodaturu",
                        "content": "[@Eddiea6987](/Eddiea6987) XD"
                    },
                    {
                        "username": "Eddiea6987",
                        "content": "so you being a programmer you cant think of an automated way to write all the test cases? what makes you think someone typed each  one? The dude probably spent 5 min to write a script and then went outside and touched grass. "
                    },
                    {
                        "username": "jlbroughton",
                        "content": "\\uD83D\\uDE02"
                    },
                    {
                        "username": "candypop8724",
                        "content": "bro fr man, i thought i got them all but fucking 987? what even"
                    },
                    {
                        "username": "user3327Ub",
                        "content": "You should stop using these overused jokes..."
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@rucola](/rucola) I think it is reffering to compiler time, not exercises time!"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "fr this is insane"
                    },
                    {
                        "username": "rucola",
                        "content": "Do you know the time limit? I have tried different approaches with c#, but they all run into \"Time Limit Exceeded\" for testcase 987 "
                    },
                    {
                        "username": "michaelg02",
                        "content": "The wording of the question was unclear for me. Example 3 does cover this where \"wke\" was the longest not \"wkew\", but the wording of the question suggests that the substring can have multiple of the same character as long as it is not repeating.\\n\\n\"wkew\" would pass because the substring does not have two w\\'s in a row.\\n\\n*Instead of:\\nGiven a string, find the length of the longest substring without repeating characters.*\\n\\n*I think this is a better wording:\\nGiven a string, find the length of the longest substring without **duplicate** characters.*\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Belyua",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) congratulations, you solved the problem. On leetcode there is a special section for solved problems"
                    },
                    {
                        "username": "ricko34",
                        "content": "[@mayank-01](/mayank-01) i think \\'kew\\' can\\'t be part of substring \\n "
                    },
                    {
                        "username": "ricko34",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) u have a good shortened solution, but this is not the right place \\n"
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "final=[]\\ndef chack(word):\\n    w=\"\"\\n    \\n    for i in word:\\n        if i in w:\\n           return\\n        else:\\n            w+=i\\n    final.append(w)\\n    \\n            \\n\\narry=\"pwwkew\"\\nfor i in range(len(arry)):\\n    for j in range(i,len(arry)):\\n        v=arry[i:j+1]\\n        chack(v)\\nlength=[]\\nfor i in final:\\n    length.append(len(i))\\nbig=max(length)\\nfor i in final:\\n    if big==len(i):\\n        print(i)\\n        break\\n    "
                    },
                    {
                        "username": "sandeep-p",
                        "content": "May be the companies that asked this question expected the candidate to be unclear and discuss, before jumping over the code?"
                    },
                    {
                        "username": "Med__think",
                        "content": "[@mayank-01](/mayank-01)  it i just one of the examples the motive is to find the length of longest substring without repeating characters"
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "what does repeating means? Something that happens more than once. I dont think it is unprecise, im not english native and yet was able to understand. And Examples are there to extend the wording. "
                    },
                    {
                        "username": "mayank-01",
                        "content": "Yes, I agree with you, I am also confused in example 3 there are 2 substrings \\'wke\\' and \\'kew\\' of same length, so this should be mentioned like it can be multiple substrings with same length....."
                    },
                    {
                        "username": "technologyaddicted",
                        "content": "Given \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\nI do not understand that in the Example # 3, it mentions 'wke' as the longest substring. Why not \"kew\" selected as the longest one? Help here is much appreciated."
                    },
                    {
                        "username": "VladoBradi",
                        "content": "Both answers are correct \"wke\" and \"kew\" but probably they choose just one (the first one because of characters line) for correct answer. "
                    },
                    {
                        "username": "lipingm",
                        "content": "1, [], max=0;\n2,[p], max =1;\n3,[p,w], max =2;\n4,[w], max=2;\n5,[w,k], max=2;\n6,[w,k,e], max=3;\n7,[k,e], max=3\n8,end\nSo max=3"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "[@somavik99](/somavik99) pke is subsequence not substring"
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@somavik99](/somavik99) Because it has to be the first instance of a substring, you kind have to read in between the line in mean here, otherwise it could be argued why not kew too!"
                    },
                    {
                        "username": "mohittyagi",
                        "content": "[@somavik99](/somavik99) \"the longest substring without repeating characters\""
                    },
                    {
                        "username": "somavik99",
                        "content": "[@ignorant_ppp](/ignorant_ppp)  My question is why not \"pke\" its total unique value."
                    },
                    {
                        "username": "ignorant_ppp",
                        "content": "you are suppose to return the length not the string\\n"
                    },
                    {
                        "username": "kauntey1O1",
                        "content": "because we would get \"wke\" first and \"kew\" is as the same length as \"wke\""
                    },
                    {
                        "username": "gerryhd",
                        "content": "I don't think that's relevant to the end result as both would return the length of 3."
                    },
                    {
                        "username": "momoxsalameh",
                        "content": "Take it as the longest sequence of non-identical character in the string"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Salheen Bakhet](/technologyaddicted) \\nMost people will scan from left to right and the result \"wke\" will appear first, but if you are used to scanning from right to left (like the habit of writing arabic, japan, etc.) then \"kwe\" this time appeared first."
                    },
                    {
                        "username": "manmitta",
                        "content": "We always starts with left side of string and when you checked \"pwwkew\" .. \"wke\" comes first ."
                    },
                    {
                        "username": "pstrait",
                        "content": "It doesn\\'t matter which substring, you need to return an integer not a substring."
                    },
                    {
                        "username": "amirhassan032",
                        "content": "it can be kew but wke comes first thats why it is assumed as answer"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "kew is also longest substring for sure but we would have considered it if it was scanned earlier"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "when we are iterating from the beginning of the string the we found the max substring before then why would we update the previous value with upcoming value if it still has the same length substring"
                    },
                    {
                        "username": "nancychauhan99",
                        "content": "focus is on the max length achieved rather than the substring itself"
                    },
                    {
                        "username": "ooPo",
                        "content": "Do not try to use brute force to pass the problem."
                    },
                    {
                        "username": "close27",
                        "content": "my brute force got accepted. https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3747943/brute-force-easy-to-understand/"
                    },
                    {
                        "username": "Kromydas",
                        "content": "the problem is that you are not limited from a - z, and can have A-Z as well as 0-9 and other chracters. this is a good approach if you are only limited to a-z. It will solve all the test cases except 985 - 987.\n\nhere is my code which implements your approach:\n```\nclass Solution {\npublic:\n    bool isCharacterInString(const string& str, char ch) {\n        for (char c : str) {\n            if (c == ch) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    int lengthOfLongestSubstring(string s) {\n        int n = s.size();\n        int maxi = 0;\n        for (int i = 0; i < n; i++) {\n            int var = min(26, n - i);\n            for (int j = 0; j < var; j++) {\n                string str = s.substr(i, j + 1);\n                string temp = \"\";\n                bool good = true;\n                for (int k = 0; k < str.size(); k++) {\n                    if (isCharacterInString(temp, str[k])) {\n                        good = false;\n                        break;\n                    } else {\n                        temp += str[k];\n                    }\n                }\n                if (good) {\n                    maxi = max(maxi, (int)str.size());\n                } else {\n                    break;\n                }\n            }\n        }\n        return maxi;\n    }\n};\n```\nagain, note that this does not work for this problem. nice thinking though!\n\nthe way i did it is by using hash sets, which gives you 2 for loops with at worst O(n^2) time (which won't happen). It involves using ```for (int i = 0; i < n; i++) {for int j = i; j < n; j++}```. "
                    },
                    {
                        "username": "ranbir7",
                        "content": "[@cartesPerforees](/cartesPerforees) I used deque"
                    },
                    {
                        "username": "ranbir7",
                        "content": "I used deque"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Or please, do use brute force. Brute force works just fine if you take adavantage of the fact that you're working with a finite alphabet. You can scan through all substrings of all sizes up to  $\\alpha$ where $\\alpha$ is the size of your alphabet (cause no substring could be larger than the full alphabet without repeats). Even the brutest of brute force in $O(\\alpha^2n)$ is comfortably accepted.\nWhen you don't listen to random people telling you how to think or not to think, you sometimes find solutions they didn't anticipate ;)"
                    },
                    {
                        "username": "media_overdosed",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) because it\\'s slow af (especially python)"
                    },
                    {
                        "username": "Anson_W",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) In fact, it can be passed by using unordered_map. Less than 1s."
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t)  the length of test case is 5 * 10^4 , brute force is N^2 . TLE"
                    },
                    {
                        "username": "whyevenquestion1t",
                        "content": "why not?\\n"
                    },
                    {
                        "username": "anthonyhuang",
                        "content": "I have some problem understanding the problem, this test case \"dvdf \"says the output should be 3, while I suppose it should be 2.\\n\\n\"dv\" or \"df\" is what I think. It should be substring not subsequence like the question mentioned. Should it confined to \"Consistent String\"?\\n\\n"
                    },
                    {
                        "username": "tsashokstar27",
                        "content": "[@ricko34](/ricko34) Because of longest sub string length if we use the dv it will be 2. But we have vdf with length 3."
                    },
                    {
                        "username": "omaute260902",
                        "content": "the testcase is correct. the substring for this test case would be \\'vdf\\' and the answer therefore would be 3\\n"
                    },
                    {
                        "username": "ricko34",
                        "content": "absolutely,  i  don\\'t understand why \\'d\\' is ignored "
                    },
                    {
                        "username": "Shazamct",
                        "content": "output should be \\'vdf\\' i.e. 3\\n"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "swagiuli",
                        "content": "[@nrjsuthar](/nrjsuthar) yes"
                    },
                    {
                        "username": "nrjsuthar",
                        "content": "vdf is the longest subsequence right?\\n"
                    },
                    {
                        "username": "EloiVega",
                        "content": "the answer is \\'vdf\\' which is of length 3"
                    },
                    {
                        "username": "manavjoshi1107",
                        "content": "vdf have length 3\\n"
                    },
                    {
                        "username": "mkraghava007",
                        "content": "d v & f are different characters together, hence ig it\\'s considering them together"
                    },
                    {
                        "username": "damajsam93",
                        "content": "vfd ==>3 "
                    },
                    {
                        "username": "abhiram__devisetti",
                        "content": "vdf is answer"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "cause \"vdf\" is the longest substring in the given string"
                    },
                    {
                        "username": "9819497296",
                        "content": "dvdf is a string and and the longest substring should be vdf thats why the longest length of a substring should be 3 i hope you understand"
                    },
                    {
                        "username": "dmoriasi",
                        "content": "The longest string is \"vdf\" You basically start from index 1. to the end. "
                    },
                    {
                        "username": "codebadger",
                        "content": "\"vdf\" is a valid substring"
                    },
                    {
                        "username": "uakrongrad",
                        "content": "I think the task could be better explained by asking the tester to find the length of the longest non repeating set of continous characters in the string."
                    },
                    {
                        "username": "firezdog",
                        "content": "\"continuous characters in a string\" -- that is, a substring (as opposed to a subsequence)"
                    },
                    {
                        "username": "juansymontano",
                        "content": "True. I was wondering what they meant too. After realizing it\\u2019s just longest unique it was quite easy to code. "
                    },
                    {
                        "username": "sanyuktakate",
                        "content": "Did anyone get an error as - *\" is not a valid value of type string* for an input which was a string with space (\" \")?"
                    },
                    {
                        "username": "janis__",
                        "content": "If you\\'re encountering an error on LeetCode that says \" \" is not a valid value of type string, it\\'s likely not an issue with the code you provided. Instead, ensure that when you\\'re testing your function on LeetCode, you\\'re inputting the string with spaces correctly. In the test input box, instead of just entering a space, you should enter the string with double quotes, like \" \". This ensures LeetCode recognizes it as a valid string input."
                    },
                    {
                        "username": "chirag2239",
                        "content": "what to do for \" \"?\\nI am just copying all the characters to hash array. Space character index, 32, should be updated with the count."
                    },
                    {
                        "username": "piyushpandey6970",
                        "content": "[@Soham_Panchal](/Soham_Panchal) what to do for space\\n"
                    },
                    {
                        "username": "Qusai_issa",
                        "content": "\\' \\'"
                    },
                    {
                        "username": "M-Narendra",
                        "content": "no\\n"
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "Yes.\\n"
                    },
                    {
                        "username": "YASH_PARSANA",
                        "content": "**Please upvote if solution is useful**\\n\\nfull explanation of queation step by step solution brute force to optimal approach\\nExplained by googler\\n\\nhttps://youtu.be/qtVh-XEpsJo"
                    },
                    {
                        "username": "asfdg32",
                        "content": "It comes out to be wrong  when I submit my alg and tells me that it failed to process the input \"aa\" while I successfully get it right with the input \"aa\" in my local computer and the \"run code\" function in the website. Is it the website's bug? Or some differences between the \"run code\" and \"submit\" function exists. Or something is wrong with my code."
                    },
                    {
                        "username": "darrendsa06",
                        "content": "Im facing the same problem.\\n"
                    },
                    {
                        "username": "harshnayak580",
                        "content": "h\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for June, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/longest-substring-without-repeating-characters/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 3 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Sliding Window\n\n  \n**Approach 3:** Sliding Window Optimized\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1567766,
                "content": [
                    {
                        "username": "ktranada1403",
                        "content": "Bruh who tf sat down and wrote 987 testcases. This is sacrilegious. Go touch grass. See the world out there gang. This is not it. "
                    },
                    {
                        "username": "malinkov",
                        "content": "[@Mohamed-Kallel](/Mohamed-Kallel)  same XD"
                    },
                    {
                        "username": "malinkov",
                        "content": "LOL XD hahahhah yap, see the world fam XD hahahah"
                    },
                    {
                        "username": "Mohamed-Kallel",
                        "content": "the real pain  is when you see that 986/987 testcases passed "
                    },
                    {
                        "username": "jnatc1",
                        "content": "On god bro."
                    },
                    {
                        "username": "ktranada1403",
                        "content": "[@Eddiea6987](/Eddiea6987) im clearly joking "
                    },
                    {
                        "username": "user0915S",
                        "content": "bro, had all the time in the world\\n"
                    },
                    {
                        "username": "Himanshu_kmr24",
                        "content": "[@Eddiea6987](/Eddiea6987) So the important thing is touching grass :p"
                    },
                    {
                        "username": "aidenscoding",
                        "content": "Indeed. This should be flagged as hard. What\\'s wrong with people"
                    },
                    {
                        "username": "overbound",
                        "content": "I needed this."
                    },
                    {
                        "username": "sprodaturu",
                        "content": "[@Eddiea6987](/Eddiea6987) XD"
                    },
                    {
                        "username": "Eddiea6987",
                        "content": "so you being a programmer you cant think of an automated way to write all the test cases? what makes you think someone typed each  one? The dude probably spent 5 min to write a script and then went outside and touched grass. "
                    },
                    {
                        "username": "jlbroughton",
                        "content": "\\uD83D\\uDE02"
                    },
                    {
                        "username": "candypop8724",
                        "content": "bro fr man, i thought i got them all but fucking 987? what even"
                    },
                    {
                        "username": "user3327Ub",
                        "content": "You should stop using these overused jokes..."
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@rucola](/rucola) I think it is reffering to compiler time, not exercises time!"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "fr this is insane"
                    },
                    {
                        "username": "rucola",
                        "content": "Do you know the time limit? I have tried different approaches with c#, but they all run into \"Time Limit Exceeded\" for testcase 987 "
                    },
                    {
                        "username": "michaelg02",
                        "content": "The wording of the question was unclear for me. Example 3 does cover this where \"wke\" was the longest not \"wkew\", but the wording of the question suggests that the substring can have multiple of the same character as long as it is not repeating.\\n\\n\"wkew\" would pass because the substring does not have two w\\'s in a row.\\n\\n*Instead of:\\nGiven a string, find the length of the longest substring without repeating characters.*\\n\\n*I think this is a better wording:\\nGiven a string, find the length of the longest substring without **duplicate** characters.*\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Belyua",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) congratulations, you solved the problem. On leetcode there is a special section for solved problems"
                    },
                    {
                        "username": "ricko34",
                        "content": "[@mayank-01](/mayank-01) i think \\'kew\\' can\\'t be part of substring \\n "
                    },
                    {
                        "username": "ricko34",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) u have a good shortened solution, but this is not the right place \\n"
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "final=[]\\ndef chack(word):\\n    w=\"\"\\n    \\n    for i in word:\\n        if i in w:\\n           return\\n        else:\\n            w+=i\\n    final.append(w)\\n    \\n            \\n\\narry=\"pwwkew\"\\nfor i in range(len(arry)):\\n    for j in range(i,len(arry)):\\n        v=arry[i:j+1]\\n        chack(v)\\nlength=[]\\nfor i in final:\\n    length.append(len(i))\\nbig=max(length)\\nfor i in final:\\n    if big==len(i):\\n        print(i)\\n        break\\n    "
                    },
                    {
                        "username": "sandeep-p",
                        "content": "May be the companies that asked this question expected the candidate to be unclear and discuss, before jumping over the code?"
                    },
                    {
                        "username": "Med__think",
                        "content": "[@mayank-01](/mayank-01)  it i just one of the examples the motive is to find the length of longest substring without repeating characters"
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "what does repeating means? Something that happens more than once. I dont think it is unprecise, im not english native and yet was able to understand. And Examples are there to extend the wording. "
                    },
                    {
                        "username": "mayank-01",
                        "content": "Yes, I agree with you, I am also confused in example 3 there are 2 substrings \\'wke\\' and \\'kew\\' of same length, so this should be mentioned like it can be multiple substrings with same length....."
                    },
                    {
                        "username": "technologyaddicted",
                        "content": "Given \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\nI do not understand that in the Example # 3, it mentions 'wke' as the longest substring. Why not \"kew\" selected as the longest one? Help here is much appreciated."
                    },
                    {
                        "username": "VladoBradi",
                        "content": "Both answers are correct \"wke\" and \"kew\" but probably they choose just one (the first one because of characters line) for correct answer. "
                    },
                    {
                        "username": "lipingm",
                        "content": "1, [], max=0;\n2,[p], max =1;\n3,[p,w], max =2;\n4,[w], max=2;\n5,[w,k], max=2;\n6,[w,k,e], max=3;\n7,[k,e], max=3\n8,end\nSo max=3"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "[@somavik99](/somavik99) pke is subsequence not substring"
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@somavik99](/somavik99) Because it has to be the first instance of a substring, you kind have to read in between the line in mean here, otherwise it could be argued why not kew too!"
                    },
                    {
                        "username": "mohittyagi",
                        "content": "[@somavik99](/somavik99) \"the longest substring without repeating characters\""
                    },
                    {
                        "username": "somavik99",
                        "content": "[@ignorant_ppp](/ignorant_ppp)  My question is why not \"pke\" its total unique value."
                    },
                    {
                        "username": "ignorant_ppp",
                        "content": "you are suppose to return the length not the string\\n"
                    },
                    {
                        "username": "kauntey1O1",
                        "content": "because we would get \"wke\" first and \"kew\" is as the same length as \"wke\""
                    },
                    {
                        "username": "gerryhd",
                        "content": "I don't think that's relevant to the end result as both would return the length of 3."
                    },
                    {
                        "username": "momoxsalameh",
                        "content": "Take it as the longest sequence of non-identical character in the string"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Salheen Bakhet](/technologyaddicted) \\nMost people will scan from left to right and the result \"wke\" will appear first, but if you are used to scanning from right to left (like the habit of writing arabic, japan, etc.) then \"kwe\" this time appeared first."
                    },
                    {
                        "username": "manmitta",
                        "content": "We always starts with left side of string and when you checked \"pwwkew\" .. \"wke\" comes first ."
                    },
                    {
                        "username": "pstrait",
                        "content": "It doesn\\'t matter which substring, you need to return an integer not a substring."
                    },
                    {
                        "username": "amirhassan032",
                        "content": "it can be kew but wke comes first thats why it is assumed as answer"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "kew is also longest substring for sure but we would have considered it if it was scanned earlier"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "when we are iterating from the beginning of the string the we found the max substring before then why would we update the previous value with upcoming value if it still has the same length substring"
                    },
                    {
                        "username": "nancychauhan99",
                        "content": "focus is on the max length achieved rather than the substring itself"
                    },
                    {
                        "username": "ooPo",
                        "content": "Do not try to use brute force to pass the problem."
                    },
                    {
                        "username": "close27",
                        "content": "my brute force got accepted. https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3747943/brute-force-easy-to-understand/"
                    },
                    {
                        "username": "Kromydas",
                        "content": "the problem is that you are not limited from a - z, and can have A-Z as well as 0-9 and other chracters. this is a good approach if you are only limited to a-z. It will solve all the test cases except 985 - 987.\n\nhere is my code which implements your approach:\n```\nclass Solution {\npublic:\n    bool isCharacterInString(const string& str, char ch) {\n        for (char c : str) {\n            if (c == ch) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    int lengthOfLongestSubstring(string s) {\n        int n = s.size();\n        int maxi = 0;\n        for (int i = 0; i < n; i++) {\n            int var = min(26, n - i);\n            for (int j = 0; j < var; j++) {\n                string str = s.substr(i, j + 1);\n                string temp = \"\";\n                bool good = true;\n                for (int k = 0; k < str.size(); k++) {\n                    if (isCharacterInString(temp, str[k])) {\n                        good = false;\n                        break;\n                    } else {\n                        temp += str[k];\n                    }\n                }\n                if (good) {\n                    maxi = max(maxi, (int)str.size());\n                } else {\n                    break;\n                }\n            }\n        }\n        return maxi;\n    }\n};\n```\nagain, note that this does not work for this problem. nice thinking though!\n\nthe way i did it is by using hash sets, which gives you 2 for loops with at worst O(n^2) time (which won't happen). It involves using ```for (int i = 0; i < n; i++) {for int j = i; j < n; j++}```. "
                    },
                    {
                        "username": "ranbir7",
                        "content": "[@cartesPerforees](/cartesPerforees) I used deque"
                    },
                    {
                        "username": "ranbir7",
                        "content": "I used deque"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Or please, do use brute force. Brute force works just fine if you take adavantage of the fact that you're working with a finite alphabet. You can scan through all substrings of all sizes up to  $\\alpha$ where $\\alpha$ is the size of your alphabet (cause no substring could be larger than the full alphabet without repeats). Even the brutest of brute force in $O(\\alpha^2n)$ is comfortably accepted.\nWhen you don't listen to random people telling you how to think or not to think, you sometimes find solutions they didn't anticipate ;)"
                    },
                    {
                        "username": "media_overdosed",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) because it\\'s slow af (especially python)"
                    },
                    {
                        "username": "Anson_W",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) In fact, it can be passed by using unordered_map. Less than 1s."
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t)  the length of test case is 5 * 10^4 , brute force is N^2 . TLE"
                    },
                    {
                        "username": "whyevenquestion1t",
                        "content": "why not?\\n"
                    },
                    {
                        "username": "anthonyhuang",
                        "content": "I have some problem understanding the problem, this test case \"dvdf \"says the output should be 3, while I suppose it should be 2.\\n\\n\"dv\" or \"df\" is what I think. It should be substring not subsequence like the question mentioned. Should it confined to \"Consistent String\"?\\n\\n"
                    },
                    {
                        "username": "tsashokstar27",
                        "content": "[@ricko34](/ricko34) Because of longest sub string length if we use the dv it will be 2. But we have vdf with length 3."
                    },
                    {
                        "username": "omaute260902",
                        "content": "the testcase is correct. the substring for this test case would be \\'vdf\\' and the answer therefore would be 3\\n"
                    },
                    {
                        "username": "ricko34",
                        "content": "absolutely,  i  don\\'t understand why \\'d\\' is ignored "
                    },
                    {
                        "username": "Shazamct",
                        "content": "output should be \\'vdf\\' i.e. 3\\n"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "swagiuli",
                        "content": "[@nrjsuthar](/nrjsuthar) yes"
                    },
                    {
                        "username": "nrjsuthar",
                        "content": "vdf is the longest subsequence right?\\n"
                    },
                    {
                        "username": "EloiVega",
                        "content": "the answer is \\'vdf\\' which is of length 3"
                    },
                    {
                        "username": "manavjoshi1107",
                        "content": "vdf have length 3\\n"
                    },
                    {
                        "username": "mkraghava007",
                        "content": "d v & f are different characters together, hence ig it\\'s considering them together"
                    },
                    {
                        "username": "damajsam93",
                        "content": "vfd ==>3 "
                    },
                    {
                        "username": "abhiram__devisetti",
                        "content": "vdf is answer"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "cause \"vdf\" is the longest substring in the given string"
                    },
                    {
                        "username": "9819497296",
                        "content": "dvdf is a string and and the longest substring should be vdf thats why the longest length of a substring should be 3 i hope you understand"
                    },
                    {
                        "username": "dmoriasi",
                        "content": "The longest string is \"vdf\" You basically start from index 1. to the end. "
                    },
                    {
                        "username": "codebadger",
                        "content": "\"vdf\" is a valid substring"
                    },
                    {
                        "username": "uakrongrad",
                        "content": "I think the task could be better explained by asking the tester to find the length of the longest non repeating set of continous characters in the string."
                    },
                    {
                        "username": "firezdog",
                        "content": "\"continuous characters in a string\" -- that is, a substring (as opposed to a subsequence)"
                    },
                    {
                        "username": "juansymontano",
                        "content": "True. I was wondering what they meant too. After realizing it\\u2019s just longest unique it was quite easy to code. "
                    },
                    {
                        "username": "sanyuktakate",
                        "content": "Did anyone get an error as - *\" is not a valid value of type string* for an input which was a string with space (\" \")?"
                    },
                    {
                        "username": "janis__",
                        "content": "If you\\'re encountering an error on LeetCode that says \" \" is not a valid value of type string, it\\'s likely not an issue with the code you provided. Instead, ensure that when you\\'re testing your function on LeetCode, you\\'re inputting the string with spaces correctly. In the test input box, instead of just entering a space, you should enter the string with double quotes, like \" \". This ensures LeetCode recognizes it as a valid string input."
                    },
                    {
                        "username": "chirag2239",
                        "content": "what to do for \" \"?\\nI am just copying all the characters to hash array. Space character index, 32, should be updated with the count."
                    },
                    {
                        "username": "piyushpandey6970",
                        "content": "[@Soham_Panchal](/Soham_Panchal) what to do for space\\n"
                    },
                    {
                        "username": "Qusai_issa",
                        "content": "\\' \\'"
                    },
                    {
                        "username": "M-Narendra",
                        "content": "no\\n"
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "Yes.\\n"
                    },
                    {
                        "username": "YASH_PARSANA",
                        "content": "**Please upvote if solution is useful**\\n\\nfull explanation of queation step by step solution brute force to optimal approach\\nExplained by googler\\n\\nhttps://youtu.be/qtVh-XEpsJo"
                    },
                    {
                        "username": "asfdg32",
                        "content": "It comes out to be wrong  when I submit my alg and tells me that it failed to process the input \"aa\" while I successfully get it right with the input \"aa\" in my local computer and the \"run code\" function in the website. Is it the website's bug? Or some differences between the \"run code\" and \"submit\" function exists. Or something is wrong with my code."
                    },
                    {
                        "username": "darrendsa06",
                        "content": "Im facing the same problem.\\n"
                    },
                    {
                        "username": "harshnayak580",
                        "content": "h\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for June, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/longest-substring-without-repeating-characters/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 3 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Sliding Window\n\n  \n**Approach 3:** Sliding Window Optimized\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1568797,
                "content": [
                    {
                        "username": "ktranada1403",
                        "content": "Bruh who tf sat down and wrote 987 testcases. This is sacrilegious. Go touch grass. See the world out there gang. This is not it. "
                    },
                    {
                        "username": "malinkov",
                        "content": "[@Mohamed-Kallel](/Mohamed-Kallel)  same XD"
                    },
                    {
                        "username": "malinkov",
                        "content": "LOL XD hahahhah yap, see the world fam XD hahahah"
                    },
                    {
                        "username": "Mohamed-Kallel",
                        "content": "the real pain  is when you see that 986/987 testcases passed "
                    },
                    {
                        "username": "jnatc1",
                        "content": "On god bro."
                    },
                    {
                        "username": "ktranada1403",
                        "content": "[@Eddiea6987](/Eddiea6987) im clearly joking "
                    },
                    {
                        "username": "user0915S",
                        "content": "bro, had all the time in the world\\n"
                    },
                    {
                        "username": "Himanshu_kmr24",
                        "content": "[@Eddiea6987](/Eddiea6987) So the important thing is touching grass :p"
                    },
                    {
                        "username": "aidenscoding",
                        "content": "Indeed. This should be flagged as hard. What\\'s wrong with people"
                    },
                    {
                        "username": "overbound",
                        "content": "I needed this."
                    },
                    {
                        "username": "sprodaturu",
                        "content": "[@Eddiea6987](/Eddiea6987) XD"
                    },
                    {
                        "username": "Eddiea6987",
                        "content": "so you being a programmer you cant think of an automated way to write all the test cases? what makes you think someone typed each  one? The dude probably spent 5 min to write a script and then went outside and touched grass. "
                    },
                    {
                        "username": "jlbroughton",
                        "content": "\\uD83D\\uDE02"
                    },
                    {
                        "username": "candypop8724",
                        "content": "bro fr man, i thought i got them all but fucking 987? what even"
                    },
                    {
                        "username": "user3327Ub",
                        "content": "You should stop using these overused jokes..."
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@rucola](/rucola) I think it is reffering to compiler time, not exercises time!"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "fr this is insane"
                    },
                    {
                        "username": "rucola",
                        "content": "Do you know the time limit? I have tried different approaches with c#, but they all run into \"Time Limit Exceeded\" for testcase 987 "
                    },
                    {
                        "username": "michaelg02",
                        "content": "The wording of the question was unclear for me. Example 3 does cover this where \"wke\" was the longest not \"wkew\", but the wording of the question suggests that the substring can have multiple of the same character as long as it is not repeating.\\n\\n\"wkew\" would pass because the substring does not have two w\\'s in a row.\\n\\n*Instead of:\\nGiven a string, find the length of the longest substring without repeating characters.*\\n\\n*I think this is a better wording:\\nGiven a string, find the length of the longest substring without **duplicate** characters.*\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Belyua",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) congratulations, you solved the problem. On leetcode there is a special section for solved problems"
                    },
                    {
                        "username": "ricko34",
                        "content": "[@mayank-01](/mayank-01) i think \\'kew\\' can\\'t be part of substring \\n "
                    },
                    {
                        "username": "ricko34",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) u have a good shortened solution, but this is not the right place \\n"
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "final=[]\\ndef chack(word):\\n    w=\"\"\\n    \\n    for i in word:\\n        if i in w:\\n           return\\n        else:\\n            w+=i\\n    final.append(w)\\n    \\n            \\n\\narry=\"pwwkew\"\\nfor i in range(len(arry)):\\n    for j in range(i,len(arry)):\\n        v=arry[i:j+1]\\n        chack(v)\\nlength=[]\\nfor i in final:\\n    length.append(len(i))\\nbig=max(length)\\nfor i in final:\\n    if big==len(i):\\n        print(i)\\n        break\\n    "
                    },
                    {
                        "username": "sandeep-p",
                        "content": "May be the companies that asked this question expected the candidate to be unclear and discuss, before jumping over the code?"
                    },
                    {
                        "username": "Med__think",
                        "content": "[@mayank-01](/mayank-01)  it i just one of the examples the motive is to find the length of longest substring without repeating characters"
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "what does repeating means? Something that happens more than once. I dont think it is unprecise, im not english native and yet was able to understand. And Examples are there to extend the wording. "
                    },
                    {
                        "username": "mayank-01",
                        "content": "Yes, I agree with you, I am also confused in example 3 there are 2 substrings \\'wke\\' and \\'kew\\' of same length, so this should be mentioned like it can be multiple substrings with same length....."
                    },
                    {
                        "username": "technologyaddicted",
                        "content": "Given \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\nI do not understand that in the Example # 3, it mentions 'wke' as the longest substring. Why not \"kew\" selected as the longest one? Help here is much appreciated."
                    },
                    {
                        "username": "VladoBradi",
                        "content": "Both answers are correct \"wke\" and \"kew\" but probably they choose just one (the first one because of characters line) for correct answer. "
                    },
                    {
                        "username": "lipingm",
                        "content": "1, [], max=0;\n2,[p], max =1;\n3,[p,w], max =2;\n4,[w], max=2;\n5,[w,k], max=2;\n6,[w,k,e], max=3;\n7,[k,e], max=3\n8,end\nSo max=3"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "[@somavik99](/somavik99) pke is subsequence not substring"
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@somavik99](/somavik99) Because it has to be the first instance of a substring, you kind have to read in between the line in mean here, otherwise it could be argued why not kew too!"
                    },
                    {
                        "username": "mohittyagi",
                        "content": "[@somavik99](/somavik99) \"the longest substring without repeating characters\""
                    },
                    {
                        "username": "somavik99",
                        "content": "[@ignorant_ppp](/ignorant_ppp)  My question is why not \"pke\" its total unique value."
                    },
                    {
                        "username": "ignorant_ppp",
                        "content": "you are suppose to return the length not the string\\n"
                    },
                    {
                        "username": "kauntey1O1",
                        "content": "because we would get \"wke\" first and \"kew\" is as the same length as \"wke\""
                    },
                    {
                        "username": "gerryhd",
                        "content": "I don't think that's relevant to the end result as both would return the length of 3."
                    },
                    {
                        "username": "momoxsalameh",
                        "content": "Take it as the longest sequence of non-identical character in the string"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Salheen Bakhet](/technologyaddicted) \\nMost people will scan from left to right and the result \"wke\" will appear first, but if you are used to scanning from right to left (like the habit of writing arabic, japan, etc.) then \"kwe\" this time appeared first."
                    },
                    {
                        "username": "manmitta",
                        "content": "We always starts with left side of string and when you checked \"pwwkew\" .. \"wke\" comes first ."
                    },
                    {
                        "username": "pstrait",
                        "content": "It doesn\\'t matter which substring, you need to return an integer not a substring."
                    },
                    {
                        "username": "amirhassan032",
                        "content": "it can be kew but wke comes first thats why it is assumed as answer"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "kew is also longest substring for sure but we would have considered it if it was scanned earlier"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "when we are iterating from the beginning of the string the we found the max substring before then why would we update the previous value with upcoming value if it still has the same length substring"
                    },
                    {
                        "username": "nancychauhan99",
                        "content": "focus is on the max length achieved rather than the substring itself"
                    },
                    {
                        "username": "ooPo",
                        "content": "Do not try to use brute force to pass the problem."
                    },
                    {
                        "username": "close27",
                        "content": "my brute force got accepted. https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3747943/brute-force-easy-to-understand/"
                    },
                    {
                        "username": "Kromydas",
                        "content": "the problem is that you are not limited from a - z, and can have A-Z as well as 0-9 and other chracters. this is a good approach if you are only limited to a-z. It will solve all the test cases except 985 - 987.\n\nhere is my code which implements your approach:\n```\nclass Solution {\npublic:\n    bool isCharacterInString(const string& str, char ch) {\n        for (char c : str) {\n            if (c == ch) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    int lengthOfLongestSubstring(string s) {\n        int n = s.size();\n        int maxi = 0;\n        for (int i = 0; i < n; i++) {\n            int var = min(26, n - i);\n            for (int j = 0; j < var; j++) {\n                string str = s.substr(i, j + 1);\n                string temp = \"\";\n                bool good = true;\n                for (int k = 0; k < str.size(); k++) {\n                    if (isCharacterInString(temp, str[k])) {\n                        good = false;\n                        break;\n                    } else {\n                        temp += str[k];\n                    }\n                }\n                if (good) {\n                    maxi = max(maxi, (int)str.size());\n                } else {\n                    break;\n                }\n            }\n        }\n        return maxi;\n    }\n};\n```\nagain, note that this does not work for this problem. nice thinking though!\n\nthe way i did it is by using hash sets, which gives you 2 for loops with at worst O(n^2) time (which won't happen). It involves using ```for (int i = 0; i < n; i++) {for int j = i; j < n; j++}```. "
                    },
                    {
                        "username": "ranbir7",
                        "content": "[@cartesPerforees](/cartesPerforees) I used deque"
                    },
                    {
                        "username": "ranbir7",
                        "content": "I used deque"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Or please, do use brute force. Brute force works just fine if you take adavantage of the fact that you're working with a finite alphabet. You can scan through all substrings of all sizes up to  $\\alpha$ where $\\alpha$ is the size of your alphabet (cause no substring could be larger than the full alphabet without repeats). Even the brutest of brute force in $O(\\alpha^2n)$ is comfortably accepted.\nWhen you don't listen to random people telling you how to think or not to think, you sometimes find solutions they didn't anticipate ;)"
                    },
                    {
                        "username": "media_overdosed",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) because it\\'s slow af (especially python)"
                    },
                    {
                        "username": "Anson_W",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) In fact, it can be passed by using unordered_map. Less than 1s."
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t)  the length of test case is 5 * 10^4 , brute force is N^2 . TLE"
                    },
                    {
                        "username": "whyevenquestion1t",
                        "content": "why not?\\n"
                    },
                    {
                        "username": "anthonyhuang",
                        "content": "I have some problem understanding the problem, this test case \"dvdf \"says the output should be 3, while I suppose it should be 2.\\n\\n\"dv\" or \"df\" is what I think. It should be substring not subsequence like the question mentioned. Should it confined to \"Consistent String\"?\\n\\n"
                    },
                    {
                        "username": "tsashokstar27",
                        "content": "[@ricko34](/ricko34) Because of longest sub string length if we use the dv it will be 2. But we have vdf with length 3."
                    },
                    {
                        "username": "omaute260902",
                        "content": "the testcase is correct. the substring for this test case would be \\'vdf\\' and the answer therefore would be 3\\n"
                    },
                    {
                        "username": "ricko34",
                        "content": "absolutely,  i  don\\'t understand why \\'d\\' is ignored "
                    },
                    {
                        "username": "Shazamct",
                        "content": "output should be \\'vdf\\' i.e. 3\\n"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "swagiuli",
                        "content": "[@nrjsuthar](/nrjsuthar) yes"
                    },
                    {
                        "username": "nrjsuthar",
                        "content": "vdf is the longest subsequence right?\\n"
                    },
                    {
                        "username": "EloiVega",
                        "content": "the answer is \\'vdf\\' which is of length 3"
                    },
                    {
                        "username": "manavjoshi1107",
                        "content": "vdf have length 3\\n"
                    },
                    {
                        "username": "mkraghava007",
                        "content": "d v & f are different characters together, hence ig it\\'s considering them together"
                    },
                    {
                        "username": "damajsam93",
                        "content": "vfd ==>3 "
                    },
                    {
                        "username": "abhiram__devisetti",
                        "content": "vdf is answer"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "cause \"vdf\" is the longest substring in the given string"
                    },
                    {
                        "username": "9819497296",
                        "content": "dvdf is a string and and the longest substring should be vdf thats why the longest length of a substring should be 3 i hope you understand"
                    },
                    {
                        "username": "dmoriasi",
                        "content": "The longest string is \"vdf\" You basically start from index 1. to the end. "
                    },
                    {
                        "username": "codebadger",
                        "content": "\"vdf\" is a valid substring"
                    },
                    {
                        "username": "uakrongrad",
                        "content": "I think the task could be better explained by asking the tester to find the length of the longest non repeating set of continous characters in the string."
                    },
                    {
                        "username": "firezdog",
                        "content": "\"continuous characters in a string\" -- that is, a substring (as opposed to a subsequence)"
                    },
                    {
                        "username": "juansymontano",
                        "content": "True. I was wondering what they meant too. After realizing it\\u2019s just longest unique it was quite easy to code. "
                    },
                    {
                        "username": "sanyuktakate",
                        "content": "Did anyone get an error as - *\" is not a valid value of type string* for an input which was a string with space (\" \")?"
                    },
                    {
                        "username": "janis__",
                        "content": "If you\\'re encountering an error on LeetCode that says \" \" is not a valid value of type string, it\\'s likely not an issue with the code you provided. Instead, ensure that when you\\'re testing your function on LeetCode, you\\'re inputting the string with spaces correctly. In the test input box, instead of just entering a space, you should enter the string with double quotes, like \" \". This ensures LeetCode recognizes it as a valid string input."
                    },
                    {
                        "username": "chirag2239",
                        "content": "what to do for \" \"?\\nI am just copying all the characters to hash array. Space character index, 32, should be updated with the count."
                    },
                    {
                        "username": "piyushpandey6970",
                        "content": "[@Soham_Panchal](/Soham_Panchal) what to do for space\\n"
                    },
                    {
                        "username": "Qusai_issa",
                        "content": "\\' \\'"
                    },
                    {
                        "username": "M-Narendra",
                        "content": "no\\n"
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "Yes.\\n"
                    },
                    {
                        "username": "YASH_PARSANA",
                        "content": "**Please upvote if solution is useful**\\n\\nfull explanation of queation step by step solution brute force to optimal approach\\nExplained by googler\\n\\nhttps://youtu.be/qtVh-XEpsJo"
                    },
                    {
                        "username": "asfdg32",
                        "content": "It comes out to be wrong  when I submit my alg and tells me that it failed to process the input \"aa\" while I successfully get it right with the input \"aa\" in my local computer and the \"run code\" function in the website. Is it the website's bug? Or some differences between the \"run code\" and \"submit\" function exists. Or something is wrong with my code."
                    },
                    {
                        "username": "darrendsa06",
                        "content": "Im facing the same problem.\\n"
                    },
                    {
                        "username": "harshnayak580",
                        "content": "h\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for June, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/longest-substring-without-repeating-characters/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 3 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Sliding Window\n\n  \n**Approach 3:** Sliding Window Optimized\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1566226,
                "content": [
                    {
                        "username": "ktranada1403",
                        "content": "Bruh who tf sat down and wrote 987 testcases. This is sacrilegious. Go touch grass. See the world out there gang. This is not it. "
                    },
                    {
                        "username": "malinkov",
                        "content": "[@Mohamed-Kallel](/Mohamed-Kallel)  same XD"
                    },
                    {
                        "username": "malinkov",
                        "content": "LOL XD hahahhah yap, see the world fam XD hahahah"
                    },
                    {
                        "username": "Mohamed-Kallel",
                        "content": "the real pain  is when you see that 986/987 testcases passed "
                    },
                    {
                        "username": "jnatc1",
                        "content": "On god bro."
                    },
                    {
                        "username": "ktranada1403",
                        "content": "[@Eddiea6987](/Eddiea6987) im clearly joking "
                    },
                    {
                        "username": "user0915S",
                        "content": "bro, had all the time in the world\\n"
                    },
                    {
                        "username": "Himanshu_kmr24",
                        "content": "[@Eddiea6987](/Eddiea6987) So the important thing is touching grass :p"
                    },
                    {
                        "username": "aidenscoding",
                        "content": "Indeed. This should be flagged as hard. What\\'s wrong with people"
                    },
                    {
                        "username": "overbound",
                        "content": "I needed this."
                    },
                    {
                        "username": "sprodaturu",
                        "content": "[@Eddiea6987](/Eddiea6987) XD"
                    },
                    {
                        "username": "Eddiea6987",
                        "content": "so you being a programmer you cant think of an automated way to write all the test cases? what makes you think someone typed each  one? The dude probably spent 5 min to write a script and then went outside and touched grass. "
                    },
                    {
                        "username": "jlbroughton",
                        "content": "\\uD83D\\uDE02"
                    },
                    {
                        "username": "candypop8724",
                        "content": "bro fr man, i thought i got them all but fucking 987? what even"
                    },
                    {
                        "username": "user3327Ub",
                        "content": "You should stop using these overused jokes..."
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@rucola](/rucola) I think it is reffering to compiler time, not exercises time!"
                    },
                    {
                        "username": "jaggcipher",
                        "content": "fr this is insane"
                    },
                    {
                        "username": "rucola",
                        "content": "Do you know the time limit? I have tried different approaches with c#, but they all run into \"Time Limit Exceeded\" for testcase 987 "
                    },
                    {
                        "username": "michaelg02",
                        "content": "The wording of the question was unclear for me. Example 3 does cover this where \"wke\" was the longest not \"wkew\", but the wording of the question suggests that the substring can have multiple of the same character as long as it is not repeating.\\n\\n\"wkew\" would pass because the substring does not have two w\\'s in a row.\\n\\n*Instead of:\\nGiven a string, find the length of the longest substring without repeating characters.*\\n\\n*I think this is a better wording:\\nGiven a string, find the length of the longest substring without **duplicate** characters.*\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Belyua",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) congratulations, you solved the problem. On leetcode there is a special section for solved problems"
                    },
                    {
                        "username": "ricko34",
                        "content": "[@mayank-01](/mayank-01) i think \\'kew\\' can\\'t be part of substring \\n "
                    },
                    {
                        "username": "ricko34",
                        "content": "[@manneganeshveerraju](/manneganeshveerraju) u have a good shortened solution, but this is not the right place \\n"
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "final=[]\\ndef chack(word):\\n    w=\"\"\\n    \\n    for i in word:\\n        if i in w:\\n           return\\n        else:\\n            w+=i\\n    final.append(w)\\n    \\n            \\n\\narry=\"pwwkew\"\\nfor i in range(len(arry)):\\n    for j in range(i,len(arry)):\\n        v=arry[i:j+1]\\n        chack(v)\\nlength=[]\\nfor i in final:\\n    length.append(len(i))\\nbig=max(length)\\nfor i in final:\\n    if big==len(i):\\n        print(i)\\n        break\\n    "
                    },
                    {
                        "username": "sandeep-p",
                        "content": "May be the companies that asked this question expected the candidate to be unclear and discuss, before jumping over the code?"
                    },
                    {
                        "username": "Med__think",
                        "content": "[@mayank-01](/mayank-01)  it i just one of the examples the motive is to find the length of longest substring without repeating characters"
                    },
                    {
                        "username": "ArthurSPrado",
                        "content": "what does repeating means? Something that happens more than once. I dont think it is unprecise, im not english native and yet was able to understand. And Examples are there to extend the wording. "
                    },
                    {
                        "username": "mayank-01",
                        "content": "Yes, I agree with you, I am also confused in example 3 there are 2 substrings \\'wke\\' and \\'kew\\' of same length, so this should be mentioned like it can be multiple substrings with same length....."
                    },
                    {
                        "username": "technologyaddicted",
                        "content": "Given \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\nI do not understand that in the Example # 3, it mentions 'wke' as the longest substring. Why not \"kew\" selected as the longest one? Help here is much appreciated."
                    },
                    {
                        "username": "VladoBradi",
                        "content": "Both answers are correct \"wke\" and \"kew\" but probably they choose just one (the first one because of characters line) for correct answer. "
                    },
                    {
                        "username": "lipingm",
                        "content": "1, [], max=0;\n2,[p], max =1;\n3,[p,w], max =2;\n4,[w], max=2;\n5,[w,k], max=2;\n6,[w,k,e], max=3;\n7,[k,e], max=3\n8,end\nSo max=3"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "[@somavik99](/somavik99) pke is subsequence not substring"
                    },
                    {
                        "username": "agharaza94",
                        "content": "[@somavik99](/somavik99) Because it has to be the first instance of a substring, you kind have to read in between the line in mean here, otherwise it could be argued why not kew too!"
                    },
                    {
                        "username": "mohittyagi",
                        "content": "[@somavik99](/somavik99) \"the longest substring without repeating characters\""
                    },
                    {
                        "username": "somavik99",
                        "content": "[@ignorant_ppp](/ignorant_ppp)  My question is why not \"pke\" its total unique value."
                    },
                    {
                        "username": "ignorant_ppp",
                        "content": "you are suppose to return the length not the string\\n"
                    },
                    {
                        "username": "kauntey1O1",
                        "content": "because we would get \"wke\" first and \"kew\" is as the same length as \"wke\""
                    },
                    {
                        "username": "gerryhd",
                        "content": "I don't think that's relevant to the end result as both would return the length of 3."
                    },
                    {
                        "username": "momoxsalameh",
                        "content": "Take it as the longest sequence of non-identical character in the string"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Salheen Bakhet](/technologyaddicted) \\nMost people will scan from left to right and the result \"wke\" will appear first, but if you are used to scanning from right to left (like the habit of writing arabic, japan, etc.) then \"kwe\" this time appeared first."
                    },
                    {
                        "username": "manmitta",
                        "content": "We always starts with left side of string and when you checked \"pwwkew\" .. \"wke\" comes first ."
                    },
                    {
                        "username": "pstrait",
                        "content": "It doesn\\'t matter which substring, you need to return an integer not a substring."
                    },
                    {
                        "username": "amirhassan032",
                        "content": "it can be kew but wke comes first thats why it is assumed as answer"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "kew is also longest substring for sure but we would have considered it if it was scanned earlier"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "when we are iterating from the beginning of the string the we found the max substring before then why would we update the previous value with upcoming value if it still has the same length substring"
                    },
                    {
                        "username": "nancychauhan99",
                        "content": "focus is on the max length achieved rather than the substring itself"
                    },
                    {
                        "username": "ooPo",
                        "content": "Do not try to use brute force to pass the problem."
                    },
                    {
                        "username": "close27",
                        "content": "my brute force got accepted. https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3747943/brute-force-easy-to-understand/"
                    },
                    {
                        "username": "Kromydas",
                        "content": "the problem is that you are not limited from a - z, and can have A-Z as well as 0-9 and other chracters. this is a good approach if you are only limited to a-z. It will solve all the test cases except 985 - 987.\n\nhere is my code which implements your approach:\n```\nclass Solution {\npublic:\n    bool isCharacterInString(const string& str, char ch) {\n        for (char c : str) {\n            if (c == ch) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    int lengthOfLongestSubstring(string s) {\n        int n = s.size();\n        int maxi = 0;\n        for (int i = 0; i < n; i++) {\n            int var = min(26, n - i);\n            for (int j = 0; j < var; j++) {\n                string str = s.substr(i, j + 1);\n                string temp = \"\";\n                bool good = true;\n                for (int k = 0; k < str.size(); k++) {\n                    if (isCharacterInString(temp, str[k])) {\n                        good = false;\n                        break;\n                    } else {\n                        temp += str[k];\n                    }\n                }\n                if (good) {\n                    maxi = max(maxi, (int)str.size());\n                } else {\n                    break;\n                }\n            }\n        }\n        return maxi;\n    }\n};\n```\nagain, note that this does not work for this problem. nice thinking though!\n\nthe way i did it is by using hash sets, which gives you 2 for loops with at worst O(n^2) time (which won't happen). It involves using ```for (int i = 0; i < n; i++) {for int j = i; j < n; j++}```. "
                    },
                    {
                        "username": "ranbir7",
                        "content": "[@cartesPerforees](/cartesPerforees) I used deque"
                    },
                    {
                        "username": "ranbir7",
                        "content": "I used deque"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Or please, do use brute force. Brute force works just fine if you take adavantage of the fact that you're working with a finite alphabet. You can scan through all substrings of all sizes up to  $\\alpha$ where $\\alpha$ is the size of your alphabet (cause no substring could be larger than the full alphabet without repeats). Even the brutest of brute force in $O(\\alpha^2n)$ is comfortably accepted.\nWhen you don't listen to random people telling you how to think or not to think, you sometimes find solutions they didn't anticipate ;)"
                    },
                    {
                        "username": "media_overdosed",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) because it\\'s slow af (especially python)"
                    },
                    {
                        "username": "Anson_W",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t) In fact, it can be passed by using unordered_map. Less than 1s."
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "[@whyevenquestion1t](/whyevenquestion1t)  the length of test case is 5 * 10^4 , brute force is N^2 . TLE"
                    },
                    {
                        "username": "whyevenquestion1t",
                        "content": "why not?\\n"
                    },
                    {
                        "username": "anthonyhuang",
                        "content": "I have some problem understanding the problem, this test case \"dvdf \"says the output should be 3, while I suppose it should be 2.\\n\\n\"dv\" or \"df\" is what I think. It should be substring not subsequence like the question mentioned. Should it confined to \"Consistent String\"?\\n\\n"
                    },
                    {
                        "username": "tsashokstar27",
                        "content": "[@ricko34](/ricko34) Because of longest sub string length if we use the dv it will be 2. But we have vdf with length 3."
                    },
                    {
                        "username": "omaute260902",
                        "content": "the testcase is correct. the substring for this test case would be \\'vdf\\' and the answer therefore would be 3\\n"
                    },
                    {
                        "username": "ricko34",
                        "content": "absolutely,  i  don\\'t understand why \\'d\\' is ignored "
                    },
                    {
                        "username": "Shazamct",
                        "content": "output should be \\'vdf\\' i.e. 3\\n"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "swagiuli",
                        "content": "[@nrjsuthar](/nrjsuthar) yes"
                    },
                    {
                        "username": "nrjsuthar",
                        "content": "vdf is the longest subsequence right?\\n"
                    },
                    {
                        "username": "EloiVega",
                        "content": "the answer is \\'vdf\\' which is of length 3"
                    },
                    {
                        "username": "manavjoshi1107",
                        "content": "vdf have length 3\\n"
                    },
                    {
                        "username": "mkraghava007",
                        "content": "d v & f are different characters together, hence ig it\\'s considering them together"
                    },
                    {
                        "username": "damajsam93",
                        "content": "vfd ==>3 "
                    },
                    {
                        "username": "abhiram__devisetti",
                        "content": "vdf is answer"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "cause \"vdf\" is the longest substring in the given string"
                    },
                    {
                        "username": "9819497296",
                        "content": "dvdf is a string and and the longest substring should be vdf thats why the longest length of a substring should be 3 i hope you understand"
                    },
                    {
                        "username": "dmoriasi",
                        "content": "The longest string is \"vdf\" You basically start from index 1. to the end. "
                    },
                    {
                        "username": "codebadger",
                        "content": "\"vdf\" is a valid substring"
                    },
                    {
                        "username": "uakrongrad",
                        "content": "I think the task could be better explained by asking the tester to find the length of the longest non repeating set of continous characters in the string."
                    },
                    {
                        "username": "firezdog",
                        "content": "\"continuous characters in a string\" -- that is, a substring (as opposed to a subsequence)"
                    },
                    {
                        "username": "juansymontano",
                        "content": "True. I was wondering what they meant too. After realizing it\\u2019s just longest unique it was quite easy to code. "
                    },
                    {
                        "username": "sanyuktakate",
                        "content": "Did anyone get an error as - *\" is not a valid value of type string* for an input which was a string with space (\" \")?"
                    },
                    {
                        "username": "janis__",
                        "content": "If you\\'re encountering an error on LeetCode that says \" \" is not a valid value of type string, it\\'s likely not an issue with the code you provided. Instead, ensure that when you\\'re testing your function on LeetCode, you\\'re inputting the string with spaces correctly. In the test input box, instead of just entering a space, you should enter the string with double quotes, like \" \". This ensures LeetCode recognizes it as a valid string input."
                    },
                    {
                        "username": "chirag2239",
                        "content": "what to do for \" \"?\\nI am just copying all the characters to hash array. Space character index, 32, should be updated with the count."
                    },
                    {
                        "username": "piyushpandey6970",
                        "content": "[@Soham_Panchal](/Soham_Panchal) what to do for space\\n"
                    },
                    {
                        "username": "Qusai_issa",
                        "content": "\\' \\'"
                    },
                    {
                        "username": "M-Narendra",
                        "content": "no\\n"
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "Yes.\\n"
                    },
                    {
                        "username": "YASH_PARSANA",
                        "content": "**Please upvote if solution is useful**\\n\\nfull explanation of queation step by step solution brute force to optimal approach\\nExplained by googler\\n\\nhttps://youtu.be/qtVh-XEpsJo"
                    },
                    {
                        "username": "asfdg32",
                        "content": "It comes out to be wrong  when I submit my alg and tells me that it failed to process the input \"aa\" while I successfully get it right with the input \"aa\" in my local computer and the \"run code\" function in the website. Is it the website's bug? Or some differences between the \"run code\" and \"submit\" function exists. Or something is wrong with my code."
                    },
                    {
                        "username": "darrendsa06",
                        "content": "Im facing the same problem.\\n"
                    },
                    {
                        "username": "harshnayak580",
                        "content": "h\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for June, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/longest-substring-without-repeating-characters/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 3 approaches in the official solution</summary>\n\n  \n**Approach 1:** Brute Force\n\n  \n**Approach 2:** Sliding Window\n\n  \n**Approach 3:** Sliding Window Optimized\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1729197,
                "content": [
                    {
                        "username": "priyanshsingh279",
                        "content": "Some test cases:\\n\\n\" \"\\n\"dvdf\"\\n\"ckilbkd\"\\n\"tmmzuxt\""
                    },
                    {
                        "username": "lovishbansal441",
                        "content": "[@lynxr_johny](/lynxr_johny) i cant get only last testcase and thts this\\n\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCD\"\\n\\ncan i imagine?????\\n"
                    },
                    {
                        "username": "Krag619",
                        "content": "ynyo"
                    },
                    {
                        "username": "lynxr_johny",
                        "content": "yeah, same fails on this cases :)"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Visualization of O(n) sliding window solution with an intuitive proof:\n\nhttps://www.youtube.com/watch?v=pY2dYa1m2VM"
                    },
                    {
                        "username": "mridul5",
                        "content": "what is the meaning of distribution in distribution-runtime graph"
                    },
                    {
                        "username": "jadelhendry",
                        "content": "Getting an error on testcase 3. \\n\\nIt tells me the output should be 4, when even in the discussion it states that the output should be 3. Please fix this LeetCode."
                    },
                    {
                        "username": "yash_1_5_3",
                        "content": "If input is \" \" what is expected output ?"
                    },
                    {
                        "username": "amarsai700",
                        "content": "expected output is 1\\nspace is counted as a character"
                    },
                    {
                        "username": "mitra_arpita",
                        "content": "That feeling  :)  and I have used Brute Force Approach.\\n `Time Limit Exceeded\\n986 / 987 testcases passed\\nLast Executed Input\\nUse Testcase\\ns =\\n\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWX...`"
                    },
                    {
                        "username": "lovishbansal441",
                        "content": "[@dranger07](/dranger07) uss."
                    },
                    {
                        "username": "dranger07",
                        "content": "With brute force I am also stuck at the same place "
                    },
                    {
                        "username": "riyan372828",
                        "content": "**Watch this video 🢃 for the better explanation of the question and it's solution.**\n[watch the solution](https://www.youtube.com/watch?v=Iyhe_r8s2cE)\n### click on the link, thubnail not working\n\nhttps://www.youtube.com/watch?v=Iyhe_r8s2cE\n"
                    },
                    {
                        "username": "jatayuwu",
                        "content": "The question says that we have to find the longest subsequence not the longest substring. What is the difference between the two"
                    },
                    {
                        "username": "narasimhan_ramesh5",
                        "content": "If the sequence is \"abcAd\", do i consider uppercase \"A\" to be a repetition of lowercase \"a\"?"
                    },
                    {
                        "username": "swingle8",
                        "content": "https://github.com/swingle8/Hashing/blob/master/LongestSubStringWithoutRepeatCharacter.java"
                    }
                ]
            },
            {
                "id": 1897369,
                "content": [
                    {
                        "username": "priyanshsingh279",
                        "content": "Some test cases:\\n\\n\" \"\\n\"dvdf\"\\n\"ckilbkd\"\\n\"tmmzuxt\""
                    },
                    {
                        "username": "lovishbansal441",
                        "content": "[@lynxr_johny](/lynxr_johny) i cant get only last testcase and thts this\\n\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCD\"\\n\\ncan i imagine?????\\n"
                    },
                    {
                        "username": "Krag619",
                        "content": "ynyo"
                    },
                    {
                        "username": "lynxr_johny",
                        "content": "yeah, same fails on this cases :)"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Visualization of O(n) sliding window solution with an intuitive proof:\n\nhttps://www.youtube.com/watch?v=pY2dYa1m2VM"
                    },
                    {
                        "username": "mridul5",
                        "content": "what is the meaning of distribution in distribution-runtime graph"
                    },
                    {
                        "username": "jadelhendry",
                        "content": "Getting an error on testcase 3. \\n\\nIt tells me the output should be 4, when even in the discussion it states that the output should be 3. Please fix this LeetCode."
                    },
                    {
                        "username": "yash_1_5_3",
                        "content": "If input is \" \" what is expected output ?"
                    },
                    {
                        "username": "amarsai700",
                        "content": "expected output is 1\\nspace is counted as a character"
                    },
                    {
                        "username": "mitra_arpita",
                        "content": "That feeling  :)  and I have used Brute Force Approach.\\n `Time Limit Exceeded\\n986 / 987 testcases passed\\nLast Executed Input\\nUse Testcase\\ns =\\n\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWX...`"
                    },
                    {
                        "username": "lovishbansal441",
                        "content": "[@dranger07](/dranger07) uss."
                    },
                    {
                        "username": "dranger07",
                        "content": "With brute force I am also stuck at the same place "
                    },
                    {
                        "username": "riyan372828",
                        "content": "**Watch this video 🢃 for the better explanation of the question and it's solution.**\n[watch the solution](https://www.youtube.com/watch?v=Iyhe_r8s2cE)\n### click on the link, thubnail not working\n\nhttps://www.youtube.com/watch?v=Iyhe_r8s2cE\n"
                    },
                    {
                        "username": "jatayuwu",
                        "content": "The question says that we have to find the longest subsequence not the longest substring. What is the difference between the two"
                    },
                    {
                        "username": "narasimhan_ramesh5",
                        "content": "If the sequence is \"abcAd\", do i consider uppercase \"A\" to be a repetition of lowercase \"a\"?"
                    },
                    {
                        "username": "swingle8",
                        "content": "https://github.com/swingle8/Hashing/blob/master/LongestSubStringWithoutRepeatCharacter.java"
                    }
                ]
            },
            {
                "id": 1567154,
                "content": [
                    {
                        "username": "priyanshsingh279",
                        "content": "Some test cases:\\n\\n\" \"\\n\"dvdf\"\\n\"ckilbkd\"\\n\"tmmzuxt\""
                    },
                    {
                        "username": "lovishbansal441",
                        "content": "[@lynxr_johny](/lynxr_johny) i cant get only last testcase and thts this\\n\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCD\"\\n\\ncan i imagine?????\\n"
                    },
                    {
                        "username": "Krag619",
                        "content": "ynyo"
                    },
                    {
                        "username": "lynxr_johny",
                        "content": "yeah, same fails on this cases :)"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Visualization of O(n) sliding window solution with an intuitive proof:\n\nhttps://www.youtube.com/watch?v=pY2dYa1m2VM"
                    },
                    {
                        "username": "mridul5",
                        "content": "what is the meaning of distribution in distribution-runtime graph"
                    },
                    {
                        "username": "jadelhendry",
                        "content": "Getting an error on testcase 3. \\n\\nIt tells me the output should be 4, when even in the discussion it states that the output should be 3. Please fix this LeetCode."
                    },
                    {
                        "username": "yash_1_5_3",
                        "content": "If input is \" \" what is expected output ?"
                    },
                    {
                        "username": "amarsai700",
                        "content": "expected output is 1\\nspace is counted as a character"
                    },
                    {
                        "username": "mitra_arpita",
                        "content": "That feeling  :)  and I have used Brute Force Approach.\\n `Time Limit Exceeded\\n986 / 987 testcases passed\\nLast Executed Input\\nUse Testcase\\ns =\\n\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWX...`"
                    },
                    {
                        "username": "lovishbansal441",
                        "content": "[@dranger07](/dranger07) uss."
                    },
                    {
                        "username": "dranger07",
                        "content": "With brute force I am also stuck at the same place "
                    },
                    {
                        "username": "riyan372828",
                        "content": "**Watch this video 🢃 for the better explanation of the question and it's solution.**\n[watch the solution](https://www.youtube.com/watch?v=Iyhe_r8s2cE)\n### click on the link, thubnail not working\n\nhttps://www.youtube.com/watch?v=Iyhe_r8s2cE\n"
                    },
                    {
                        "username": "jatayuwu",
                        "content": "The question says that we have to find the longest subsequence not the longest substring. What is the difference between the two"
                    },
                    {
                        "username": "narasimhan_ramesh5",
                        "content": "If the sequence is \"abcAd\", do i consider uppercase \"A\" to be a repetition of lowercase \"a\"?"
                    },
                    {
                        "username": "swingle8",
                        "content": "https://github.com/swingle8/Hashing/blob/master/LongestSubStringWithoutRepeatCharacter.java"
                    }
                ]
            },
            {
                "id": 1760498,
                "content": [
                    {
                        "username": "priyanshsingh279",
                        "content": "Some test cases:\\n\\n\" \"\\n\"dvdf\"\\n\"ckilbkd\"\\n\"tmmzuxt\""
                    },
                    {
                        "username": "lovishbansal441",
                        "content": "[@lynxr_johny](/lynxr_johny) i cant get only last testcase and thts this\\n\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCD\"\\n\\ncan i imagine?????\\n"
                    },
                    {
                        "username": "Krag619",
                        "content": "ynyo"
                    },
                    {
                        "username": "lynxr_johny",
                        "content": "yeah, same fails on this cases :)"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Visualization of O(n) sliding window solution with an intuitive proof:\n\nhttps://www.youtube.com/watch?v=pY2dYa1m2VM"
                    },
                    {
                        "username": "mridul5",
                        "content": "what is the meaning of distribution in distribution-runtime graph"
                    },
                    {
                        "username": "jadelhendry",
                        "content": "Getting an error on testcase 3. \\n\\nIt tells me the output should be 4, when even in the discussion it states that the output should be 3. Please fix this LeetCode."
                    },
                    {
                        "username": "yash_1_5_3",
                        "content": "If input is \" \" what is expected output ?"
                    },
                    {
                        "username": "amarsai700",
                        "content": "expected output is 1\\nspace is counted as a character"
                    },
                    {
                        "username": "mitra_arpita",
                        "content": "That feeling  :)  and I have used Brute Force Approach.\\n `Time Limit Exceeded\\n986 / 987 testcases passed\\nLast Executed Input\\nUse Testcase\\ns =\\n\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWX...`"
                    },
                    {
                        "username": "lovishbansal441",
                        "content": "[@dranger07](/dranger07) uss."
                    },
                    {
                        "username": "dranger07",
                        "content": "With brute force I am also stuck at the same place "
                    },
                    {
                        "username": "riyan372828",
                        "content": "**Watch this video 🢃 for the better explanation of the question and it's solution.**\n[watch the solution](https://www.youtube.com/watch?v=Iyhe_r8s2cE)\n### click on the link, thubnail not working\n\nhttps://www.youtube.com/watch?v=Iyhe_r8s2cE\n"
                    },
                    {
                        "username": "jatayuwu",
                        "content": "The question says that we have to find the longest subsequence not the longest substring. What is the difference between the two"
                    },
                    {
                        "username": "narasimhan_ramesh5",
                        "content": "If the sequence is \"abcAd\", do i consider uppercase \"A\" to be a repetition of lowercase \"a\"?"
                    },
                    {
                        "username": "swingle8",
                        "content": "https://github.com/swingle8/Hashing/blob/master/LongestSubStringWithoutRepeatCharacter.java"
                    }
                ]
            },
            {
                "id": 1710572,
                "content": [
                    {
                        "username": "priyanshsingh279",
                        "content": "Some test cases:\\n\\n\" \"\\n\"dvdf\"\\n\"ckilbkd\"\\n\"tmmzuxt\""
                    },
                    {
                        "username": "lovishbansal441",
                        "content": "[@lynxr_johny](/lynxr_johny) i cant get only last testcase and thts this\\n\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCD\"\\n\\ncan i imagine?????\\n"
                    },
                    {
                        "username": "Krag619",
                        "content": "ynyo"
                    },
                    {
                        "username": "lynxr_johny",
                        "content": "yeah, same fails on this cases :)"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Visualization of O(n) sliding window solution with an intuitive proof:\n\nhttps://www.youtube.com/watch?v=pY2dYa1m2VM"
                    },
                    {
                        "username": "mridul5",
                        "content": "what is the meaning of distribution in distribution-runtime graph"
                    },
                    {
                        "username": "jadelhendry",
                        "content": "Getting an error on testcase 3. \\n\\nIt tells me the output should be 4, when even in the discussion it states that the output should be 3. Please fix this LeetCode."
                    },
                    {
                        "username": "yash_1_5_3",
                        "content": "If input is \" \" what is expected output ?"
                    },
                    {
                        "username": "amarsai700",
                        "content": "expected output is 1\\nspace is counted as a character"
                    },
                    {
                        "username": "mitra_arpita",
                        "content": "That feeling  :)  and I have used Brute Force Approach.\\n `Time Limit Exceeded\\n986 / 987 testcases passed\\nLast Executed Input\\nUse Testcase\\ns =\\n\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWX...`"
                    },
                    {
                        "username": "lovishbansal441",
                        "content": "[@dranger07](/dranger07) uss."
                    },
                    {
                        "username": "dranger07",
                        "content": "With brute force I am also stuck at the same place "
                    },
                    {
                        "username": "riyan372828",
                        "content": "**Watch this video 🢃 for the better explanation of the question and it's solution.**\n[watch the solution](https://www.youtube.com/watch?v=Iyhe_r8s2cE)\n### click on the link, thubnail not working\n\nhttps://www.youtube.com/watch?v=Iyhe_r8s2cE\n"
                    },
                    {
                        "username": "jatayuwu",
                        "content": "The question says that we have to find the longest subsequence not the longest substring. What is the difference between the two"
                    },
                    {
                        "username": "narasimhan_ramesh5",
                        "content": "If the sequence is \"abcAd\", do i consider uppercase \"A\" to be a repetition of lowercase \"a\"?"
                    },
                    {
                        "username": "swingle8",
                        "content": "https://github.com/swingle8/Hashing/blob/master/LongestSubStringWithoutRepeatCharacter.java"
                    }
                ]
            },
            {
                "id": 1936286,
                "content": [
                    {
                        "username": "priyanshsingh279",
                        "content": "Some test cases:\\n\\n\" \"\\n\"dvdf\"\\n\"ckilbkd\"\\n\"tmmzuxt\""
                    },
                    {
                        "username": "lovishbansal441",
                        "content": "[@lynxr_johny](/lynxr_johny) i cant get only last testcase and thts this\\n\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCD\"\\n\\ncan i imagine?????\\n"
                    },
                    {
                        "username": "Krag619",
                        "content": "ynyo"
                    },
                    {
                        "username": "lynxr_johny",
                        "content": "yeah, same fails on this cases :)"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Visualization of O(n) sliding window solution with an intuitive proof:\n\nhttps://www.youtube.com/watch?v=pY2dYa1m2VM"
                    },
                    {
                        "username": "mridul5",
                        "content": "what is the meaning of distribution in distribution-runtime graph"
                    },
                    {
                        "username": "jadelhendry",
                        "content": "Getting an error on testcase 3. \\n\\nIt tells me the output should be 4, when even in the discussion it states that the output should be 3. Please fix this LeetCode."
                    },
                    {
                        "username": "yash_1_5_3",
                        "content": "If input is \" \" what is expected output ?"
                    },
                    {
                        "username": "amarsai700",
                        "content": "expected output is 1\\nspace is counted as a character"
                    },
                    {
                        "username": "mitra_arpita",
                        "content": "That feeling  :)  and I have used Brute Force Approach.\\n `Time Limit Exceeded\\n986 / 987 testcases passed\\nLast Executed Input\\nUse Testcase\\ns =\\n\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWX...`"
                    },
                    {
                        "username": "lovishbansal441",
                        "content": "[@dranger07](/dranger07) uss."
                    },
                    {
                        "username": "dranger07",
                        "content": "With brute force I am also stuck at the same place "
                    },
                    {
                        "username": "riyan372828",
                        "content": "**Watch this video 🢃 for the better explanation of the question and it's solution.**\n[watch the solution](https://www.youtube.com/watch?v=Iyhe_r8s2cE)\n### click on the link, thubnail not working\n\nhttps://www.youtube.com/watch?v=Iyhe_r8s2cE\n"
                    },
                    {
                        "username": "jatayuwu",
                        "content": "The question says that we have to find the longest subsequence not the longest substring. What is the difference between the two"
                    },
                    {
                        "username": "narasimhan_ramesh5",
                        "content": "If the sequence is \"abcAd\", do i consider uppercase \"A\" to be a repetition of lowercase \"a\"?"
                    },
                    {
                        "username": "swingle8",
                        "content": "https://github.com/swingle8/Hashing/blob/master/LongestSubStringWithoutRepeatCharacter.java"
                    }
                ]
            },
            {
                "id": 1630631,
                "content": [
                    {
                        "username": "priyanshsingh279",
                        "content": "Some test cases:\\n\\n\" \"\\n\"dvdf\"\\n\"ckilbkd\"\\n\"tmmzuxt\""
                    },
                    {
                        "username": "lovishbansal441",
                        "content": "[@lynxr_johny](/lynxr_johny) i cant get only last testcase and thts this\\n\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCD\"\\n\\ncan i imagine?????\\n"
                    },
                    {
                        "username": "Krag619",
                        "content": "ynyo"
                    },
                    {
                        "username": "lynxr_johny",
                        "content": "yeah, same fails on this cases :)"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Visualization of O(n) sliding window solution with an intuitive proof:\n\nhttps://www.youtube.com/watch?v=pY2dYa1m2VM"
                    },
                    {
                        "username": "mridul5",
                        "content": "what is the meaning of distribution in distribution-runtime graph"
                    },
                    {
                        "username": "jadelhendry",
                        "content": "Getting an error on testcase 3. \\n\\nIt tells me the output should be 4, when even in the discussion it states that the output should be 3. Please fix this LeetCode."
                    },
                    {
                        "username": "yash_1_5_3",
                        "content": "If input is \" \" what is expected output ?"
                    },
                    {
                        "username": "amarsai700",
                        "content": "expected output is 1\\nspace is counted as a character"
                    },
                    {
                        "username": "mitra_arpita",
                        "content": "That feeling  :)  and I have used Brute Force Approach.\\n `Time Limit Exceeded\\n986 / 987 testcases passed\\nLast Executed Input\\nUse Testcase\\ns =\\n\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWX...`"
                    },
                    {
                        "username": "lovishbansal441",
                        "content": "[@dranger07](/dranger07) uss."
                    },
                    {
                        "username": "dranger07",
                        "content": "With brute force I am also stuck at the same place "
                    },
                    {
                        "username": "riyan372828",
                        "content": "**Watch this video 🢃 for the better explanation of the question and it's solution.**\n[watch the solution](https://www.youtube.com/watch?v=Iyhe_r8s2cE)\n### click on the link, thubnail not working\n\nhttps://www.youtube.com/watch?v=Iyhe_r8s2cE\n"
                    },
                    {
                        "username": "jatayuwu",
                        "content": "The question says that we have to find the longest subsequence not the longest substring. What is the difference between the two"
                    },
                    {
                        "username": "narasimhan_ramesh5",
                        "content": "If the sequence is \"abcAd\", do i consider uppercase \"A\" to be a repetition of lowercase \"a\"?"
                    },
                    {
                        "username": "swingle8",
                        "content": "https://github.com/swingle8/Hashing/blob/master/LongestSubStringWithoutRepeatCharacter.java"
                    }
                ]
            },
            {
                "id": 1576088,
                "content": [
                    {
                        "username": "priyanshsingh279",
                        "content": "Some test cases:\\n\\n\" \"\\n\"dvdf\"\\n\"ckilbkd\"\\n\"tmmzuxt\""
                    },
                    {
                        "username": "lovishbansal441",
                        "content": "[@lynxr_johny](/lynxr_johny) i cant get only last testcase and thts this\\n\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCD\"\\n\\ncan i imagine?????\\n"
                    },
                    {
                        "username": "Krag619",
                        "content": "ynyo"
                    },
                    {
                        "username": "lynxr_johny",
                        "content": "yeah, same fails on this cases :)"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Visualization of O(n) sliding window solution with an intuitive proof:\n\nhttps://www.youtube.com/watch?v=pY2dYa1m2VM"
                    },
                    {
                        "username": "mridul5",
                        "content": "what is the meaning of distribution in distribution-runtime graph"
                    },
                    {
                        "username": "jadelhendry",
                        "content": "Getting an error on testcase 3. \\n\\nIt tells me the output should be 4, when even in the discussion it states that the output should be 3. Please fix this LeetCode."
                    },
                    {
                        "username": "yash_1_5_3",
                        "content": "If input is \" \" what is expected output ?"
                    },
                    {
                        "username": "amarsai700",
                        "content": "expected output is 1\\nspace is counted as a character"
                    },
                    {
                        "username": "mitra_arpita",
                        "content": "That feeling  :)  and I have used Brute Force Approach.\\n `Time Limit Exceeded\\n986 / 987 testcases passed\\nLast Executed Input\\nUse Testcase\\ns =\\n\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWX...`"
                    },
                    {
                        "username": "lovishbansal441",
                        "content": "[@dranger07](/dranger07) uss."
                    },
                    {
                        "username": "dranger07",
                        "content": "With brute force I am also stuck at the same place "
                    },
                    {
                        "username": "riyan372828",
                        "content": "**Watch this video 🢃 for the better explanation of the question and it's solution.**\n[watch the solution](https://www.youtube.com/watch?v=Iyhe_r8s2cE)\n### click on the link, thubnail not working\n\nhttps://www.youtube.com/watch?v=Iyhe_r8s2cE\n"
                    },
                    {
                        "username": "jatayuwu",
                        "content": "The question says that we have to find the longest subsequence not the longest substring. What is the difference between the two"
                    },
                    {
                        "username": "narasimhan_ramesh5",
                        "content": "If the sequence is \"abcAd\", do i consider uppercase \"A\" to be a repetition of lowercase \"a\"?"
                    },
                    {
                        "username": "swingle8",
                        "content": "https://github.com/swingle8/Hashing/blob/master/LongestSubStringWithoutRepeatCharacter.java"
                    }
                ]
            },
            {
                "id": 1571979,
                "content": [
                    {
                        "username": "priyanshsingh279",
                        "content": "Some test cases:\\n\\n\" \"\\n\"dvdf\"\\n\"ckilbkd\"\\n\"tmmzuxt\""
                    },
                    {
                        "username": "lovishbansal441",
                        "content": "[@lynxr_johny](/lynxr_johny) i cant get only last testcase and thts this\\n\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCD\"\\n\\ncan i imagine?????\\n"
                    },
                    {
                        "username": "Krag619",
                        "content": "ynyo"
                    },
                    {
                        "username": "lynxr_johny",
                        "content": "yeah, same fails on this cases :)"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Visualization of O(n) sliding window solution with an intuitive proof:\n\nhttps://www.youtube.com/watch?v=pY2dYa1m2VM"
                    },
                    {
                        "username": "mridul5",
                        "content": "what is the meaning of distribution in distribution-runtime graph"
                    },
                    {
                        "username": "jadelhendry",
                        "content": "Getting an error on testcase 3. \\n\\nIt tells me the output should be 4, when even in the discussion it states that the output should be 3. Please fix this LeetCode."
                    },
                    {
                        "username": "yash_1_5_3",
                        "content": "If input is \" \" what is expected output ?"
                    },
                    {
                        "username": "amarsai700",
                        "content": "expected output is 1\\nspace is counted as a character"
                    },
                    {
                        "username": "mitra_arpita",
                        "content": "That feeling  :)  and I have used Brute Force Approach.\\n `Time Limit Exceeded\\n986 / 987 testcases passed\\nLast Executed Input\\nUse Testcase\\ns =\\n\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWX...`"
                    },
                    {
                        "username": "lovishbansal441",
                        "content": "[@dranger07](/dranger07) uss."
                    },
                    {
                        "username": "dranger07",
                        "content": "With brute force I am also stuck at the same place "
                    },
                    {
                        "username": "riyan372828",
                        "content": "**Watch this video 🢃 for the better explanation of the question and it's solution.**\n[watch the solution](https://www.youtube.com/watch?v=Iyhe_r8s2cE)\n### click on the link, thubnail not working\n\nhttps://www.youtube.com/watch?v=Iyhe_r8s2cE\n"
                    },
                    {
                        "username": "jatayuwu",
                        "content": "The question says that we have to find the longest subsequence not the longest substring. What is the difference between the two"
                    },
                    {
                        "username": "narasimhan_ramesh5",
                        "content": "If the sequence is \"abcAd\", do i consider uppercase \"A\" to be a repetition of lowercase \"a\"?"
                    },
                    {
                        "username": "swingle8",
                        "content": "https://github.com/swingle8/Hashing/blob/master/LongestSubStringWithoutRepeatCharacter.java"
                    }
                ]
            },
            {
                "id": 1570073,
                "content": [
                    {
                        "username": "priyanshsingh279",
                        "content": "Some test cases:\\n\\n\" \"\\n\"dvdf\"\\n\"ckilbkd\"\\n\"tmmzuxt\""
                    },
                    {
                        "username": "lovishbansal441",
                        "content": "[@lynxr_johny](/lynxr_johny) i cant get only last testcase and thts this\\n\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCD\"\\n\\ncan i imagine?????\\n"
                    },
                    {
                        "username": "Krag619",
                        "content": "ynyo"
                    },
                    {
                        "username": "lynxr_johny",
                        "content": "yeah, same fails on this cases :)"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Visualization of O(n) sliding window solution with an intuitive proof:\n\nhttps://www.youtube.com/watch?v=pY2dYa1m2VM"
                    },
                    {
                        "username": "mridul5",
                        "content": "what is the meaning of distribution in distribution-runtime graph"
                    },
                    {
                        "username": "jadelhendry",
                        "content": "Getting an error on testcase 3. \\n\\nIt tells me the output should be 4, when even in the discussion it states that the output should be 3. Please fix this LeetCode."
                    },
                    {
                        "username": "yash_1_5_3",
                        "content": "If input is \" \" what is expected output ?"
                    },
                    {
                        "username": "amarsai700",
                        "content": "expected output is 1\\nspace is counted as a character"
                    },
                    {
                        "username": "mitra_arpita",
                        "content": "That feeling  :)  and I have used Brute Force Approach.\\n `Time Limit Exceeded\\n986 / 987 testcases passed\\nLast Executed Input\\nUse Testcase\\ns =\\n\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWX...`"
                    },
                    {
                        "username": "lovishbansal441",
                        "content": "[@dranger07](/dranger07) uss."
                    },
                    {
                        "username": "dranger07",
                        "content": "With brute force I am also stuck at the same place "
                    },
                    {
                        "username": "riyan372828",
                        "content": "**Watch this video 🢃 for the better explanation of the question and it's solution.**\n[watch the solution](https://www.youtube.com/watch?v=Iyhe_r8s2cE)\n### click on the link, thubnail not working\n\nhttps://www.youtube.com/watch?v=Iyhe_r8s2cE\n"
                    },
                    {
                        "username": "jatayuwu",
                        "content": "The question says that we have to find the longest subsequence not the longest substring. What is the difference between the two"
                    },
                    {
                        "username": "narasimhan_ramesh5",
                        "content": "If the sequence is \"abcAd\", do i consider uppercase \"A\" to be a repetition of lowercase \"a\"?"
                    },
                    {
                        "username": "swingle8",
                        "content": "https://github.com/swingle8/Hashing/blob/master/LongestSubStringWithoutRepeatCharacter.java"
                    }
                ]
            },
            {
                "id": 1572673,
                "content": [
                    {
                        "username": "user5558p",
                        "content": "The solution given expects an output of 1 for an **empty input string**.\\nThe longest substring without repeating characters for an empty string should be 0, and not 1."
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "As question has stated, it will be considering spaces as  a character so it does consider the empty input as well unless it has some character in it\\n"
                    },
                    {
                        "username": "rishi101",
                        "content": "Hi, \\n\\nI\\'m a bit confused on how they got Theta(n^3) for the brute force solution. I don\\'t completely follow their proof with the summation notation. The way I thought about the runtime was by counting the number of iterations of the innermost 3rd loop (which is in the \"allunique\" function). The number of iterations can be counted as: \\n\\n(2+3+4+...+n) +  (2+3+4+...+n-1)  +  (2+3+4+..+n-2)  + ..... +  (2+3+4)  + (2+3)  + (2)\\n\\nI believe this is the same sum that was written in the official solution using summation notation. However, I didn\\'t really follow the proof that followed, which continued to use summation notation. Could anyone provide an alternate proof that doesn\\'t use summation notation (it just uses the expanded sum that I wrote above)? \\n\\nThanks so much!"
                    },
                    {
                        "username": "janis__",
                        "content": "The sum you\\'ve written represents the number of iterations for each starting point of a substring. If you group the terms, you\\'ll notice that the number \"2\" appears n times, the number \"3\" appears n-1 times, \"4\" appears n-2 times, and so on. Therefore, the total number of iterations is n(2) + (n-1)(3) + (n-2)(4) + ... + 3(n-2) + 2(n-1) + n, which simplifies to a sum that is on the order of \\u0398(n3)\\u0398(n3) when considering the largest terms."
                    },
                    {
                        "username": "AndreiMotinga",
                        "content": "> Given \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\nin case of `pwwkew`, possible reponses might be `wke`, as well as `kew`. I think it\\'s important to mention, cause it affects how the problem is solved. "
                    },
                    {
                        "username": "ftorres12345",
                        "content": "This problem disgust me. Its simple to understand with sliding window but no where in the problem does it mention that IF* there is duplicate characters then that they would come up in the same sequence. EX) s= abca is a possible test case bacause \"a\" is the first char in the string and the first duplicate. BUT the sliding window would fail if the string was s= abcb because if u increment the initial pointer u would be taking out \"a\" and not \"b\". THATS MY GRIPE it doesnt mention this in the question description at all. "
                    },
                    {
                        "username": "janis__",
                        "content": "I understand your frustration. The sliding window technique works for both \"abca\" and \"abcb\". In the case of \"abcb\", when you encounter the second \\'b\\', you move the left pointer of the window to the position after the first \\'b\\', effectively removing the first \\'b\\' from consideration. This way, the window always maintains unique characters, and you can continue sliding it to find the longest substring without repeating characters."
                    },
                    {
                        "username": "charlie_1212",
                        "content": "Yeah. Some of the problems on here, I don\\'t realize what they\\'re _really_ asking until I\\'ve written my solution and it fails on test 172/175, then I scratch my head and code for that, then realize it won\\'t pass tests 1-171, then it all clicks together. "
                    },
                    {
                        "username": "Jia_Bao",
                        "content": "Given a string s, find the length of the longest substring without repeating characters.\\n\\nExample 1:\\ns = \"abcabcbb\"\\n\\nNon repeating char substring = \"a\" \"ab\" \"abc\"  \"bc\" \"cab\" \"cb\" \\n\\nExample 2:\\ns = \"bbbbb\"\\n\\nNon repeating char substring = \"b\"\\n\\nExample 3:\\ns = \"pwwkew\"\\n\\nNon repeating char substring = \"pw\" \"wk\" \"wke\" \"ke\" \"kew\"\\n\\n\\n\\n\\n "
                    },
                    {
                        "username": "user1633nb",
                        "content": "Non repeating char substring = \"a\" \"ab\" \"abc\" \"bc\" \"cab\" \"abc\" \"bc\" \"cb\" \"b\""
                    },
                    {
                        "username": "Asthebel",
                        "content": "help , i tried to run the code it gave the right answer then when i submitted it ,it gave me a wrong messsage for the same test case.![image](https://assets.leetcode.com/users/images/af8a943c-b4ee-4fc2-89da-0b4d303d2bd3_1617445778.0467362.png)\\n"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "maybe it got the wrong results with wider range of test cases, does your code generalize for all possible cases? you have to try with different cases as well "
                    },
                    {
                        "username": "msn_user",
                        "content": "See below two related problems on finding longest substring with sliding window:\\n\\nhttps://www.techiedelight.com/find-longest-substring-given-string-containing-distinct-characters/\\nhttps://www.techiedelight.com/find-longest-substring-containing-k-distinct-characters/"
                    },
                    {
                        "username": "calderra",
                        "content": "I think this problem is very hard to parse. I would have failed an interview just because it would take me the whole time to figure out what the question meant.\\n\\nCurrent problem:\\n\"Given a string, find the length of the longest substring without repeating characters.\"\\n\\nExample 1. If the input is:\\n\"abcabcbb\"\\nThe problem EXPECTS:\\n\"abc\", for 3 characters\\n\\nIssues with Example 1:\\n* The longest substring without \"repeating characters\" could be read to be \"abcabcb\", for 7 characters. Imagine a sticky key on a keyboard, where \"bbbbbbbb\" is a repeating character. In the word \"basketball\", only the \"ll\" charactes are repeated. It\\'s not immediately obvious from anything in the question why this reading is invalid.\\n* Substring \"abc\" is itself repeated in the input, so why wouldn\\'t characters \"a\", \"b\", and \"c\" all count as repeated characters? The answer would be 0, all characters in this example are repeated somewhere in the string.\\n* If we take \"bb\" to be a repeated character, why would the solution contain any \"b\" character at all?\\n\\nExample 3. For the input:\\n\"pwwkew\"\\nThey say the longest substring should be:\\n\"wke\"\\n\\nIssues with Example 3:\\n* All of the same issues per Example 1.\\n* In particular, Example 3 baffles because one of the \"w\" characters repeated as \"ww\" is in the substring. It doesn\\'t make sense why a repeated character would be in the answer.\\n* Problem seems to assume we\\'re parsing left-ro-right, and only keeping the first answer, making one unique solution. Why? If my solution arrives at the longest substring being \"kew\" is this in any way an incorrect solution?\\n\\nSUGGESTED VERBIAGE:\\n\\nProblem. What is the longest substring which can be formed from the input, where all characters in the substring are unique? There may be multiple substrings of the same length.\\n\\nInput. \"abcabcbb\"\\nOutput. 3\\nExplanation. The longest substring is of length 3. Longest substrings include \"abc\", \"bca\", and \"cab\".\\n\\nInput. \"pwwkew\"\\nOutput. 3\\nExplanation. The longest substring is of length 3. Longest substrings include \"wke\" and \"kew\"."
                    },
                    {
                        "username": "sivaswaroopsarma121",
                        "content": "the question is what is length of substring which does not have any repeated char \\nyou can start at any point in the string and at any point in the string but the string formed by the starting index and ending index should not have any repeated char \\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        \\n\\n        List<Integer> length=new ArrayList<>();\\n        for(int i=0;i<s.length();i++){\\n            for(int j=i+1;j<s.length();j++){\\n                String z=s.substring(i,j);\\n                if(norep(z)){\\n                    length.add(z.length());\\n                }\\n            }\\n        }\\n        Collections.sort(length);\\n        return length.get(length.size()-1);\\n    }\\n    public boolean norep(String z){\\n        Set<Character> set=new HashSet<>();\\n        for(int i=0;i<z.length();i++){\\n            if(set.contains(z.charAt(i))){\\n                return false;\\n            }\\n            else{\\n                set.add(z.charAt(i));\\n            }\\n        }\\n        return true;\\n    } \\n}\\nthis one will clear your doubts"
                    },
                    {
                        "username": "connectaman",
                        "content": "I was solving the problem statement called longest substring without repeating character\\nand when i submit my code,\\ni get wrong answer at 90th test case \\nand the input is \"pwwkew\" where this output expected is 3 and i got output 5 which is correct.\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "The correct answer for the input \"pwwkew\" is indeed 3, corresponding to the substring \"wke\". Your output of 5 suggests that your code might be incorrectly considering a longer substring with repeating characters. Ensure your code correctly identifies and excludes repeated characters within a substring."
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "\"wke\" is the longest one so \\n"
                    },
                    {
                        "username": "johnathanrs",
                        "content": "Example: \\'dvdf\\'\\nHow do you determine what the substring here is? "
                    },
                    {
                        "username": "janis__",
                        "content": "[@bhupendrabc71](/bhupendrabc71) For the string \\'dvdf\\', the longest substring without repeating characters is \\'vdf\\'. Starting from the first character, \\'dv\\' is valid, but the next \\'d\\' repeats. Moving one character over, \\'vdf\\' is the longest valid substring without any repetition."
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "\"vdf\" would be the longest one \\n"
                    }
                ]
            },
            {
                "id": 1569436,
                "content": [
                    {
                        "username": "user5558p",
                        "content": "The solution given expects an output of 1 for an **empty input string**.\\nThe longest substring without repeating characters for an empty string should be 0, and not 1."
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "As question has stated, it will be considering spaces as  a character so it does consider the empty input as well unless it has some character in it\\n"
                    },
                    {
                        "username": "rishi101",
                        "content": "Hi, \\n\\nI\\'m a bit confused on how they got Theta(n^3) for the brute force solution. I don\\'t completely follow their proof with the summation notation. The way I thought about the runtime was by counting the number of iterations of the innermost 3rd loop (which is in the \"allunique\" function). The number of iterations can be counted as: \\n\\n(2+3+4+...+n) +  (2+3+4+...+n-1)  +  (2+3+4+..+n-2)  + ..... +  (2+3+4)  + (2+3)  + (2)\\n\\nI believe this is the same sum that was written in the official solution using summation notation. However, I didn\\'t really follow the proof that followed, which continued to use summation notation. Could anyone provide an alternate proof that doesn\\'t use summation notation (it just uses the expanded sum that I wrote above)? \\n\\nThanks so much!"
                    },
                    {
                        "username": "janis__",
                        "content": "The sum you\\'ve written represents the number of iterations for each starting point of a substring. If you group the terms, you\\'ll notice that the number \"2\" appears n times, the number \"3\" appears n-1 times, \"4\" appears n-2 times, and so on. Therefore, the total number of iterations is n(2) + (n-1)(3) + (n-2)(4) + ... + 3(n-2) + 2(n-1) + n, which simplifies to a sum that is on the order of \\u0398(n3)\\u0398(n3) when considering the largest terms."
                    },
                    {
                        "username": "AndreiMotinga",
                        "content": "> Given \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\nin case of `pwwkew`, possible reponses might be `wke`, as well as `kew`. I think it\\'s important to mention, cause it affects how the problem is solved. "
                    },
                    {
                        "username": "ftorres12345",
                        "content": "This problem disgust me. Its simple to understand with sliding window but no where in the problem does it mention that IF* there is duplicate characters then that they would come up in the same sequence. EX) s= abca is a possible test case bacause \"a\" is the first char in the string and the first duplicate. BUT the sliding window would fail if the string was s= abcb because if u increment the initial pointer u would be taking out \"a\" and not \"b\". THATS MY GRIPE it doesnt mention this in the question description at all. "
                    },
                    {
                        "username": "janis__",
                        "content": "I understand your frustration. The sliding window technique works for both \"abca\" and \"abcb\". In the case of \"abcb\", when you encounter the second \\'b\\', you move the left pointer of the window to the position after the first \\'b\\', effectively removing the first \\'b\\' from consideration. This way, the window always maintains unique characters, and you can continue sliding it to find the longest substring without repeating characters."
                    },
                    {
                        "username": "charlie_1212",
                        "content": "Yeah. Some of the problems on here, I don\\'t realize what they\\'re _really_ asking until I\\'ve written my solution and it fails on test 172/175, then I scratch my head and code for that, then realize it won\\'t pass tests 1-171, then it all clicks together. "
                    },
                    {
                        "username": "Jia_Bao",
                        "content": "Given a string s, find the length of the longest substring without repeating characters.\\n\\nExample 1:\\ns = \"abcabcbb\"\\n\\nNon repeating char substring = \"a\" \"ab\" \"abc\"  \"bc\" \"cab\" \"cb\" \\n\\nExample 2:\\ns = \"bbbbb\"\\n\\nNon repeating char substring = \"b\"\\n\\nExample 3:\\ns = \"pwwkew\"\\n\\nNon repeating char substring = \"pw\" \"wk\" \"wke\" \"ke\" \"kew\"\\n\\n\\n\\n\\n "
                    },
                    {
                        "username": "user1633nb",
                        "content": "Non repeating char substring = \"a\" \"ab\" \"abc\" \"bc\" \"cab\" \"abc\" \"bc\" \"cb\" \"b\""
                    },
                    {
                        "username": "Asthebel",
                        "content": "help , i tried to run the code it gave the right answer then when i submitted it ,it gave me a wrong messsage for the same test case.![image](https://assets.leetcode.com/users/images/af8a943c-b4ee-4fc2-89da-0b4d303d2bd3_1617445778.0467362.png)\\n"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "maybe it got the wrong results with wider range of test cases, does your code generalize for all possible cases? you have to try with different cases as well "
                    },
                    {
                        "username": "msn_user",
                        "content": "See below two related problems on finding longest substring with sliding window:\\n\\nhttps://www.techiedelight.com/find-longest-substring-given-string-containing-distinct-characters/\\nhttps://www.techiedelight.com/find-longest-substring-containing-k-distinct-characters/"
                    },
                    {
                        "username": "calderra",
                        "content": "I think this problem is very hard to parse. I would have failed an interview just because it would take me the whole time to figure out what the question meant.\\n\\nCurrent problem:\\n\"Given a string, find the length of the longest substring without repeating characters.\"\\n\\nExample 1. If the input is:\\n\"abcabcbb\"\\nThe problem EXPECTS:\\n\"abc\", for 3 characters\\n\\nIssues with Example 1:\\n* The longest substring without \"repeating characters\" could be read to be \"abcabcb\", for 7 characters. Imagine a sticky key on a keyboard, where \"bbbbbbbb\" is a repeating character. In the word \"basketball\", only the \"ll\" charactes are repeated. It\\'s not immediately obvious from anything in the question why this reading is invalid.\\n* Substring \"abc\" is itself repeated in the input, so why wouldn\\'t characters \"a\", \"b\", and \"c\" all count as repeated characters? The answer would be 0, all characters in this example are repeated somewhere in the string.\\n* If we take \"bb\" to be a repeated character, why would the solution contain any \"b\" character at all?\\n\\nExample 3. For the input:\\n\"pwwkew\"\\nThey say the longest substring should be:\\n\"wke\"\\n\\nIssues with Example 3:\\n* All of the same issues per Example 1.\\n* In particular, Example 3 baffles because one of the \"w\" characters repeated as \"ww\" is in the substring. It doesn\\'t make sense why a repeated character would be in the answer.\\n* Problem seems to assume we\\'re parsing left-ro-right, and only keeping the first answer, making one unique solution. Why? If my solution arrives at the longest substring being \"kew\" is this in any way an incorrect solution?\\n\\nSUGGESTED VERBIAGE:\\n\\nProblem. What is the longest substring which can be formed from the input, where all characters in the substring are unique? There may be multiple substrings of the same length.\\n\\nInput. \"abcabcbb\"\\nOutput. 3\\nExplanation. The longest substring is of length 3. Longest substrings include \"abc\", \"bca\", and \"cab\".\\n\\nInput. \"pwwkew\"\\nOutput. 3\\nExplanation. The longest substring is of length 3. Longest substrings include \"wke\" and \"kew\"."
                    },
                    {
                        "username": "sivaswaroopsarma121",
                        "content": "the question is what is length of substring which does not have any repeated char \\nyou can start at any point in the string and at any point in the string but the string formed by the starting index and ending index should not have any repeated char \\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        \\n\\n        List<Integer> length=new ArrayList<>();\\n        for(int i=0;i<s.length();i++){\\n            for(int j=i+1;j<s.length();j++){\\n                String z=s.substring(i,j);\\n                if(norep(z)){\\n                    length.add(z.length());\\n                }\\n            }\\n        }\\n        Collections.sort(length);\\n        return length.get(length.size()-1);\\n    }\\n    public boolean norep(String z){\\n        Set<Character> set=new HashSet<>();\\n        for(int i=0;i<z.length();i++){\\n            if(set.contains(z.charAt(i))){\\n                return false;\\n            }\\n            else{\\n                set.add(z.charAt(i));\\n            }\\n        }\\n        return true;\\n    } \\n}\\nthis one will clear your doubts"
                    },
                    {
                        "username": "connectaman",
                        "content": "I was solving the problem statement called longest substring without repeating character\\nand when i submit my code,\\ni get wrong answer at 90th test case \\nand the input is \"pwwkew\" where this output expected is 3 and i got output 5 which is correct.\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "The correct answer for the input \"pwwkew\" is indeed 3, corresponding to the substring \"wke\". Your output of 5 suggests that your code might be incorrectly considering a longer substring with repeating characters. Ensure your code correctly identifies and excludes repeated characters within a substring."
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "\"wke\" is the longest one so \\n"
                    },
                    {
                        "username": "johnathanrs",
                        "content": "Example: \\'dvdf\\'\\nHow do you determine what the substring here is? "
                    },
                    {
                        "username": "janis__",
                        "content": "[@bhupendrabc71](/bhupendrabc71) For the string \\'dvdf\\', the longest substring without repeating characters is \\'vdf\\'. Starting from the first character, \\'dv\\' is valid, but the next \\'d\\' repeats. Moving one character over, \\'vdf\\' is the longest valid substring without any repetition."
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "\"vdf\" would be the longest one \\n"
                    }
                ]
            },
            {
                "id": 1571952,
                "content": [
                    {
                        "username": "user5558p",
                        "content": "The solution given expects an output of 1 for an **empty input string**.\\nThe longest substring without repeating characters for an empty string should be 0, and not 1."
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "As question has stated, it will be considering spaces as  a character so it does consider the empty input as well unless it has some character in it\\n"
                    },
                    {
                        "username": "rishi101",
                        "content": "Hi, \\n\\nI\\'m a bit confused on how they got Theta(n^3) for the brute force solution. I don\\'t completely follow their proof with the summation notation. The way I thought about the runtime was by counting the number of iterations of the innermost 3rd loop (which is in the \"allunique\" function). The number of iterations can be counted as: \\n\\n(2+3+4+...+n) +  (2+3+4+...+n-1)  +  (2+3+4+..+n-2)  + ..... +  (2+3+4)  + (2+3)  + (2)\\n\\nI believe this is the same sum that was written in the official solution using summation notation. However, I didn\\'t really follow the proof that followed, which continued to use summation notation. Could anyone provide an alternate proof that doesn\\'t use summation notation (it just uses the expanded sum that I wrote above)? \\n\\nThanks so much!"
                    },
                    {
                        "username": "janis__",
                        "content": "The sum you\\'ve written represents the number of iterations for each starting point of a substring. If you group the terms, you\\'ll notice that the number \"2\" appears n times, the number \"3\" appears n-1 times, \"4\" appears n-2 times, and so on. Therefore, the total number of iterations is n(2) + (n-1)(3) + (n-2)(4) + ... + 3(n-2) + 2(n-1) + n, which simplifies to a sum that is on the order of \\u0398(n3)\\u0398(n3) when considering the largest terms."
                    },
                    {
                        "username": "AndreiMotinga",
                        "content": "> Given \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\nin case of `pwwkew`, possible reponses might be `wke`, as well as `kew`. I think it\\'s important to mention, cause it affects how the problem is solved. "
                    },
                    {
                        "username": "ftorres12345",
                        "content": "This problem disgust me. Its simple to understand with sliding window but no where in the problem does it mention that IF* there is duplicate characters then that they would come up in the same sequence. EX) s= abca is a possible test case bacause \"a\" is the first char in the string and the first duplicate. BUT the sliding window would fail if the string was s= abcb because if u increment the initial pointer u would be taking out \"a\" and not \"b\". THATS MY GRIPE it doesnt mention this in the question description at all. "
                    },
                    {
                        "username": "janis__",
                        "content": "I understand your frustration. The sliding window technique works for both \"abca\" and \"abcb\". In the case of \"abcb\", when you encounter the second \\'b\\', you move the left pointer of the window to the position after the first \\'b\\', effectively removing the first \\'b\\' from consideration. This way, the window always maintains unique characters, and you can continue sliding it to find the longest substring without repeating characters."
                    },
                    {
                        "username": "charlie_1212",
                        "content": "Yeah. Some of the problems on here, I don\\'t realize what they\\'re _really_ asking until I\\'ve written my solution and it fails on test 172/175, then I scratch my head and code for that, then realize it won\\'t pass tests 1-171, then it all clicks together. "
                    },
                    {
                        "username": "Jia_Bao",
                        "content": "Given a string s, find the length of the longest substring without repeating characters.\\n\\nExample 1:\\ns = \"abcabcbb\"\\n\\nNon repeating char substring = \"a\" \"ab\" \"abc\"  \"bc\" \"cab\" \"cb\" \\n\\nExample 2:\\ns = \"bbbbb\"\\n\\nNon repeating char substring = \"b\"\\n\\nExample 3:\\ns = \"pwwkew\"\\n\\nNon repeating char substring = \"pw\" \"wk\" \"wke\" \"ke\" \"kew\"\\n\\n\\n\\n\\n "
                    },
                    {
                        "username": "user1633nb",
                        "content": "Non repeating char substring = \"a\" \"ab\" \"abc\" \"bc\" \"cab\" \"abc\" \"bc\" \"cb\" \"b\""
                    },
                    {
                        "username": "Asthebel",
                        "content": "help , i tried to run the code it gave the right answer then when i submitted it ,it gave me a wrong messsage for the same test case.![image](https://assets.leetcode.com/users/images/af8a943c-b4ee-4fc2-89da-0b4d303d2bd3_1617445778.0467362.png)\\n"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "maybe it got the wrong results with wider range of test cases, does your code generalize for all possible cases? you have to try with different cases as well "
                    },
                    {
                        "username": "msn_user",
                        "content": "See below two related problems on finding longest substring with sliding window:\\n\\nhttps://www.techiedelight.com/find-longest-substring-given-string-containing-distinct-characters/\\nhttps://www.techiedelight.com/find-longest-substring-containing-k-distinct-characters/"
                    },
                    {
                        "username": "calderra",
                        "content": "I think this problem is very hard to parse. I would have failed an interview just because it would take me the whole time to figure out what the question meant.\\n\\nCurrent problem:\\n\"Given a string, find the length of the longest substring without repeating characters.\"\\n\\nExample 1. If the input is:\\n\"abcabcbb\"\\nThe problem EXPECTS:\\n\"abc\", for 3 characters\\n\\nIssues with Example 1:\\n* The longest substring without \"repeating characters\" could be read to be \"abcabcb\", for 7 characters. Imagine a sticky key on a keyboard, where \"bbbbbbbb\" is a repeating character. In the word \"basketball\", only the \"ll\" charactes are repeated. It\\'s not immediately obvious from anything in the question why this reading is invalid.\\n* Substring \"abc\" is itself repeated in the input, so why wouldn\\'t characters \"a\", \"b\", and \"c\" all count as repeated characters? The answer would be 0, all characters in this example are repeated somewhere in the string.\\n* If we take \"bb\" to be a repeated character, why would the solution contain any \"b\" character at all?\\n\\nExample 3. For the input:\\n\"pwwkew\"\\nThey say the longest substring should be:\\n\"wke\"\\n\\nIssues with Example 3:\\n* All of the same issues per Example 1.\\n* In particular, Example 3 baffles because one of the \"w\" characters repeated as \"ww\" is in the substring. It doesn\\'t make sense why a repeated character would be in the answer.\\n* Problem seems to assume we\\'re parsing left-ro-right, and only keeping the first answer, making one unique solution. Why? If my solution arrives at the longest substring being \"kew\" is this in any way an incorrect solution?\\n\\nSUGGESTED VERBIAGE:\\n\\nProblem. What is the longest substring which can be formed from the input, where all characters in the substring are unique? There may be multiple substrings of the same length.\\n\\nInput. \"abcabcbb\"\\nOutput. 3\\nExplanation. The longest substring is of length 3. Longest substrings include \"abc\", \"bca\", and \"cab\".\\n\\nInput. \"pwwkew\"\\nOutput. 3\\nExplanation. The longest substring is of length 3. Longest substrings include \"wke\" and \"kew\"."
                    },
                    {
                        "username": "sivaswaroopsarma121",
                        "content": "the question is what is length of substring which does not have any repeated char \\nyou can start at any point in the string and at any point in the string but the string formed by the starting index and ending index should not have any repeated char \\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        \\n\\n        List<Integer> length=new ArrayList<>();\\n        for(int i=0;i<s.length();i++){\\n            for(int j=i+1;j<s.length();j++){\\n                String z=s.substring(i,j);\\n                if(norep(z)){\\n                    length.add(z.length());\\n                }\\n            }\\n        }\\n        Collections.sort(length);\\n        return length.get(length.size()-1);\\n    }\\n    public boolean norep(String z){\\n        Set<Character> set=new HashSet<>();\\n        for(int i=0;i<z.length();i++){\\n            if(set.contains(z.charAt(i))){\\n                return false;\\n            }\\n            else{\\n                set.add(z.charAt(i));\\n            }\\n        }\\n        return true;\\n    } \\n}\\nthis one will clear your doubts"
                    },
                    {
                        "username": "connectaman",
                        "content": "I was solving the problem statement called longest substring without repeating character\\nand when i submit my code,\\ni get wrong answer at 90th test case \\nand the input is \"pwwkew\" where this output expected is 3 and i got output 5 which is correct.\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "The correct answer for the input \"pwwkew\" is indeed 3, corresponding to the substring \"wke\". Your output of 5 suggests that your code might be incorrectly considering a longer substring with repeating characters. Ensure your code correctly identifies and excludes repeated characters within a substring."
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "\"wke\" is the longest one so \\n"
                    },
                    {
                        "username": "johnathanrs",
                        "content": "Example: \\'dvdf\\'\\nHow do you determine what the substring here is? "
                    },
                    {
                        "username": "janis__",
                        "content": "[@bhupendrabc71](/bhupendrabc71) For the string \\'dvdf\\', the longest substring without repeating characters is \\'vdf\\'. Starting from the first character, \\'dv\\' is valid, but the next \\'d\\' repeats. Moving one character over, \\'vdf\\' is the longest valid substring without any repetition."
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "\"vdf\" would be the longest one \\n"
                    }
                ]
            },
            {
                "id": 1920465,
                "content": [
                    {
                        "username": "user5558p",
                        "content": "The solution given expects an output of 1 for an **empty input string**.\\nThe longest substring without repeating characters for an empty string should be 0, and not 1."
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "As question has stated, it will be considering spaces as  a character so it does consider the empty input as well unless it has some character in it\\n"
                    },
                    {
                        "username": "rishi101",
                        "content": "Hi, \\n\\nI\\'m a bit confused on how they got Theta(n^3) for the brute force solution. I don\\'t completely follow their proof with the summation notation. The way I thought about the runtime was by counting the number of iterations of the innermost 3rd loop (which is in the \"allunique\" function). The number of iterations can be counted as: \\n\\n(2+3+4+...+n) +  (2+3+4+...+n-1)  +  (2+3+4+..+n-2)  + ..... +  (2+3+4)  + (2+3)  + (2)\\n\\nI believe this is the same sum that was written in the official solution using summation notation. However, I didn\\'t really follow the proof that followed, which continued to use summation notation. Could anyone provide an alternate proof that doesn\\'t use summation notation (it just uses the expanded sum that I wrote above)? \\n\\nThanks so much!"
                    },
                    {
                        "username": "janis__",
                        "content": "The sum you\\'ve written represents the number of iterations for each starting point of a substring. If you group the terms, you\\'ll notice that the number \"2\" appears n times, the number \"3\" appears n-1 times, \"4\" appears n-2 times, and so on. Therefore, the total number of iterations is n(2) + (n-1)(3) + (n-2)(4) + ... + 3(n-2) + 2(n-1) + n, which simplifies to a sum that is on the order of \\u0398(n3)\\u0398(n3) when considering the largest terms."
                    },
                    {
                        "username": "AndreiMotinga",
                        "content": "> Given \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\nin case of `pwwkew`, possible reponses might be `wke`, as well as `kew`. I think it\\'s important to mention, cause it affects how the problem is solved. "
                    },
                    {
                        "username": "ftorres12345",
                        "content": "This problem disgust me. Its simple to understand with sliding window but no where in the problem does it mention that IF* there is duplicate characters then that they would come up in the same sequence. EX) s= abca is a possible test case bacause \"a\" is the first char in the string and the first duplicate. BUT the sliding window would fail if the string was s= abcb because if u increment the initial pointer u would be taking out \"a\" and not \"b\". THATS MY GRIPE it doesnt mention this in the question description at all. "
                    },
                    {
                        "username": "janis__",
                        "content": "I understand your frustration. The sliding window technique works for both \"abca\" and \"abcb\". In the case of \"abcb\", when you encounter the second \\'b\\', you move the left pointer of the window to the position after the first \\'b\\', effectively removing the first \\'b\\' from consideration. This way, the window always maintains unique characters, and you can continue sliding it to find the longest substring without repeating characters."
                    },
                    {
                        "username": "charlie_1212",
                        "content": "Yeah. Some of the problems on here, I don\\'t realize what they\\'re _really_ asking until I\\'ve written my solution and it fails on test 172/175, then I scratch my head and code for that, then realize it won\\'t pass tests 1-171, then it all clicks together. "
                    },
                    {
                        "username": "Jia_Bao",
                        "content": "Given a string s, find the length of the longest substring without repeating characters.\\n\\nExample 1:\\ns = \"abcabcbb\"\\n\\nNon repeating char substring = \"a\" \"ab\" \"abc\"  \"bc\" \"cab\" \"cb\" \\n\\nExample 2:\\ns = \"bbbbb\"\\n\\nNon repeating char substring = \"b\"\\n\\nExample 3:\\ns = \"pwwkew\"\\n\\nNon repeating char substring = \"pw\" \"wk\" \"wke\" \"ke\" \"kew\"\\n\\n\\n\\n\\n "
                    },
                    {
                        "username": "user1633nb",
                        "content": "Non repeating char substring = \"a\" \"ab\" \"abc\" \"bc\" \"cab\" \"abc\" \"bc\" \"cb\" \"b\""
                    },
                    {
                        "username": "Asthebel",
                        "content": "help , i tried to run the code it gave the right answer then when i submitted it ,it gave me a wrong messsage for the same test case.![image](https://assets.leetcode.com/users/images/af8a943c-b4ee-4fc2-89da-0b4d303d2bd3_1617445778.0467362.png)\\n"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "maybe it got the wrong results with wider range of test cases, does your code generalize for all possible cases? you have to try with different cases as well "
                    },
                    {
                        "username": "msn_user",
                        "content": "See below two related problems on finding longest substring with sliding window:\\n\\nhttps://www.techiedelight.com/find-longest-substring-given-string-containing-distinct-characters/\\nhttps://www.techiedelight.com/find-longest-substring-containing-k-distinct-characters/"
                    },
                    {
                        "username": "calderra",
                        "content": "I think this problem is very hard to parse. I would have failed an interview just because it would take me the whole time to figure out what the question meant.\\n\\nCurrent problem:\\n\"Given a string, find the length of the longest substring without repeating characters.\"\\n\\nExample 1. If the input is:\\n\"abcabcbb\"\\nThe problem EXPECTS:\\n\"abc\", for 3 characters\\n\\nIssues with Example 1:\\n* The longest substring without \"repeating characters\" could be read to be \"abcabcb\", for 7 characters. Imagine a sticky key on a keyboard, where \"bbbbbbbb\" is a repeating character. In the word \"basketball\", only the \"ll\" charactes are repeated. It\\'s not immediately obvious from anything in the question why this reading is invalid.\\n* Substring \"abc\" is itself repeated in the input, so why wouldn\\'t characters \"a\", \"b\", and \"c\" all count as repeated characters? The answer would be 0, all characters in this example are repeated somewhere in the string.\\n* If we take \"bb\" to be a repeated character, why would the solution contain any \"b\" character at all?\\n\\nExample 3. For the input:\\n\"pwwkew\"\\nThey say the longest substring should be:\\n\"wke\"\\n\\nIssues with Example 3:\\n* All of the same issues per Example 1.\\n* In particular, Example 3 baffles because one of the \"w\" characters repeated as \"ww\" is in the substring. It doesn\\'t make sense why a repeated character would be in the answer.\\n* Problem seems to assume we\\'re parsing left-ro-right, and only keeping the first answer, making one unique solution. Why? If my solution arrives at the longest substring being \"kew\" is this in any way an incorrect solution?\\n\\nSUGGESTED VERBIAGE:\\n\\nProblem. What is the longest substring which can be formed from the input, where all characters in the substring are unique? There may be multiple substrings of the same length.\\n\\nInput. \"abcabcbb\"\\nOutput. 3\\nExplanation. The longest substring is of length 3. Longest substrings include \"abc\", \"bca\", and \"cab\".\\n\\nInput. \"pwwkew\"\\nOutput. 3\\nExplanation. The longest substring is of length 3. Longest substrings include \"wke\" and \"kew\"."
                    },
                    {
                        "username": "sivaswaroopsarma121",
                        "content": "the question is what is length of substring which does not have any repeated char \\nyou can start at any point in the string and at any point in the string but the string formed by the starting index and ending index should not have any repeated char \\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        \\n\\n        List<Integer> length=new ArrayList<>();\\n        for(int i=0;i<s.length();i++){\\n            for(int j=i+1;j<s.length();j++){\\n                String z=s.substring(i,j);\\n                if(norep(z)){\\n                    length.add(z.length());\\n                }\\n            }\\n        }\\n        Collections.sort(length);\\n        return length.get(length.size()-1);\\n    }\\n    public boolean norep(String z){\\n        Set<Character> set=new HashSet<>();\\n        for(int i=0;i<z.length();i++){\\n            if(set.contains(z.charAt(i))){\\n                return false;\\n            }\\n            else{\\n                set.add(z.charAt(i));\\n            }\\n        }\\n        return true;\\n    } \\n}\\nthis one will clear your doubts"
                    },
                    {
                        "username": "connectaman",
                        "content": "I was solving the problem statement called longest substring without repeating character\\nand when i submit my code,\\ni get wrong answer at 90th test case \\nand the input is \"pwwkew\" where this output expected is 3 and i got output 5 which is correct.\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "The correct answer for the input \"pwwkew\" is indeed 3, corresponding to the substring \"wke\". Your output of 5 suggests that your code might be incorrectly considering a longer substring with repeating characters. Ensure your code correctly identifies and excludes repeated characters within a substring."
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "\"wke\" is the longest one so \\n"
                    },
                    {
                        "username": "johnathanrs",
                        "content": "Example: \\'dvdf\\'\\nHow do you determine what the substring here is? "
                    },
                    {
                        "username": "janis__",
                        "content": "[@bhupendrabc71](/bhupendrabc71) For the string \\'dvdf\\', the longest substring without repeating characters is \\'vdf\\'. Starting from the first character, \\'dv\\' is valid, but the next \\'d\\' repeats. Moving one character over, \\'vdf\\' is the longest valid substring without any repetition."
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "\"vdf\" would be the longest one \\n"
                    }
                ]
            },
            {
                "id": 1729908,
                "content": [
                    {
                        "username": "user5558p",
                        "content": "The solution given expects an output of 1 for an **empty input string**.\\nThe longest substring without repeating characters for an empty string should be 0, and not 1."
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "As question has stated, it will be considering spaces as  a character so it does consider the empty input as well unless it has some character in it\\n"
                    },
                    {
                        "username": "rishi101",
                        "content": "Hi, \\n\\nI\\'m a bit confused on how they got Theta(n^3) for the brute force solution. I don\\'t completely follow their proof with the summation notation. The way I thought about the runtime was by counting the number of iterations of the innermost 3rd loop (which is in the \"allunique\" function). The number of iterations can be counted as: \\n\\n(2+3+4+...+n) +  (2+3+4+...+n-1)  +  (2+3+4+..+n-2)  + ..... +  (2+3+4)  + (2+3)  + (2)\\n\\nI believe this is the same sum that was written in the official solution using summation notation. However, I didn\\'t really follow the proof that followed, which continued to use summation notation. Could anyone provide an alternate proof that doesn\\'t use summation notation (it just uses the expanded sum that I wrote above)? \\n\\nThanks so much!"
                    },
                    {
                        "username": "janis__",
                        "content": "The sum you\\'ve written represents the number of iterations for each starting point of a substring. If you group the terms, you\\'ll notice that the number \"2\" appears n times, the number \"3\" appears n-1 times, \"4\" appears n-2 times, and so on. Therefore, the total number of iterations is n(2) + (n-1)(3) + (n-2)(4) + ... + 3(n-2) + 2(n-1) + n, which simplifies to a sum that is on the order of \\u0398(n3)\\u0398(n3) when considering the largest terms."
                    },
                    {
                        "username": "AndreiMotinga",
                        "content": "> Given \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\nin case of `pwwkew`, possible reponses might be `wke`, as well as `kew`. I think it\\'s important to mention, cause it affects how the problem is solved. "
                    },
                    {
                        "username": "ftorres12345",
                        "content": "This problem disgust me. Its simple to understand with sliding window but no where in the problem does it mention that IF* there is duplicate characters then that they would come up in the same sequence. EX) s= abca is a possible test case bacause \"a\" is the first char in the string and the first duplicate. BUT the sliding window would fail if the string was s= abcb because if u increment the initial pointer u would be taking out \"a\" and not \"b\". THATS MY GRIPE it doesnt mention this in the question description at all. "
                    },
                    {
                        "username": "janis__",
                        "content": "I understand your frustration. The sliding window technique works for both \"abca\" and \"abcb\". In the case of \"abcb\", when you encounter the second \\'b\\', you move the left pointer of the window to the position after the first \\'b\\', effectively removing the first \\'b\\' from consideration. This way, the window always maintains unique characters, and you can continue sliding it to find the longest substring without repeating characters."
                    },
                    {
                        "username": "charlie_1212",
                        "content": "Yeah. Some of the problems on here, I don\\'t realize what they\\'re _really_ asking until I\\'ve written my solution and it fails on test 172/175, then I scratch my head and code for that, then realize it won\\'t pass tests 1-171, then it all clicks together. "
                    },
                    {
                        "username": "Jia_Bao",
                        "content": "Given a string s, find the length of the longest substring without repeating characters.\\n\\nExample 1:\\ns = \"abcabcbb\"\\n\\nNon repeating char substring = \"a\" \"ab\" \"abc\"  \"bc\" \"cab\" \"cb\" \\n\\nExample 2:\\ns = \"bbbbb\"\\n\\nNon repeating char substring = \"b\"\\n\\nExample 3:\\ns = \"pwwkew\"\\n\\nNon repeating char substring = \"pw\" \"wk\" \"wke\" \"ke\" \"kew\"\\n\\n\\n\\n\\n "
                    },
                    {
                        "username": "user1633nb",
                        "content": "Non repeating char substring = \"a\" \"ab\" \"abc\" \"bc\" \"cab\" \"abc\" \"bc\" \"cb\" \"b\""
                    },
                    {
                        "username": "Asthebel",
                        "content": "help , i tried to run the code it gave the right answer then when i submitted it ,it gave me a wrong messsage for the same test case.![image](https://assets.leetcode.com/users/images/af8a943c-b4ee-4fc2-89da-0b4d303d2bd3_1617445778.0467362.png)\\n"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "maybe it got the wrong results with wider range of test cases, does your code generalize for all possible cases? you have to try with different cases as well "
                    },
                    {
                        "username": "msn_user",
                        "content": "See below two related problems on finding longest substring with sliding window:\\n\\nhttps://www.techiedelight.com/find-longest-substring-given-string-containing-distinct-characters/\\nhttps://www.techiedelight.com/find-longest-substring-containing-k-distinct-characters/"
                    },
                    {
                        "username": "calderra",
                        "content": "I think this problem is very hard to parse. I would have failed an interview just because it would take me the whole time to figure out what the question meant.\\n\\nCurrent problem:\\n\"Given a string, find the length of the longest substring without repeating characters.\"\\n\\nExample 1. If the input is:\\n\"abcabcbb\"\\nThe problem EXPECTS:\\n\"abc\", for 3 characters\\n\\nIssues with Example 1:\\n* The longest substring without \"repeating characters\" could be read to be \"abcabcb\", for 7 characters. Imagine a sticky key on a keyboard, where \"bbbbbbbb\" is a repeating character. In the word \"basketball\", only the \"ll\" charactes are repeated. It\\'s not immediately obvious from anything in the question why this reading is invalid.\\n* Substring \"abc\" is itself repeated in the input, so why wouldn\\'t characters \"a\", \"b\", and \"c\" all count as repeated characters? The answer would be 0, all characters in this example are repeated somewhere in the string.\\n* If we take \"bb\" to be a repeated character, why would the solution contain any \"b\" character at all?\\n\\nExample 3. For the input:\\n\"pwwkew\"\\nThey say the longest substring should be:\\n\"wke\"\\n\\nIssues with Example 3:\\n* All of the same issues per Example 1.\\n* In particular, Example 3 baffles because one of the \"w\" characters repeated as \"ww\" is in the substring. It doesn\\'t make sense why a repeated character would be in the answer.\\n* Problem seems to assume we\\'re parsing left-ro-right, and only keeping the first answer, making one unique solution. Why? If my solution arrives at the longest substring being \"kew\" is this in any way an incorrect solution?\\n\\nSUGGESTED VERBIAGE:\\n\\nProblem. What is the longest substring which can be formed from the input, where all characters in the substring are unique? There may be multiple substrings of the same length.\\n\\nInput. \"abcabcbb\"\\nOutput. 3\\nExplanation. The longest substring is of length 3. Longest substrings include \"abc\", \"bca\", and \"cab\".\\n\\nInput. \"pwwkew\"\\nOutput. 3\\nExplanation. The longest substring is of length 3. Longest substrings include \"wke\" and \"kew\"."
                    },
                    {
                        "username": "sivaswaroopsarma121",
                        "content": "the question is what is length of substring which does not have any repeated char \\nyou can start at any point in the string and at any point in the string but the string formed by the starting index and ending index should not have any repeated char \\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        \\n\\n        List<Integer> length=new ArrayList<>();\\n        for(int i=0;i<s.length();i++){\\n            for(int j=i+1;j<s.length();j++){\\n                String z=s.substring(i,j);\\n                if(norep(z)){\\n                    length.add(z.length());\\n                }\\n            }\\n        }\\n        Collections.sort(length);\\n        return length.get(length.size()-1);\\n    }\\n    public boolean norep(String z){\\n        Set<Character> set=new HashSet<>();\\n        for(int i=0;i<z.length();i++){\\n            if(set.contains(z.charAt(i))){\\n                return false;\\n            }\\n            else{\\n                set.add(z.charAt(i));\\n            }\\n        }\\n        return true;\\n    } \\n}\\nthis one will clear your doubts"
                    },
                    {
                        "username": "connectaman",
                        "content": "I was solving the problem statement called longest substring without repeating character\\nand when i submit my code,\\ni get wrong answer at 90th test case \\nand the input is \"pwwkew\" where this output expected is 3 and i got output 5 which is correct.\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "The correct answer for the input \"pwwkew\" is indeed 3, corresponding to the substring \"wke\". Your output of 5 suggests that your code might be incorrectly considering a longer substring with repeating characters. Ensure your code correctly identifies and excludes repeated characters within a substring."
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "\"wke\" is the longest one so \\n"
                    },
                    {
                        "username": "johnathanrs",
                        "content": "Example: \\'dvdf\\'\\nHow do you determine what the substring here is? "
                    },
                    {
                        "username": "janis__",
                        "content": "[@bhupendrabc71](/bhupendrabc71) For the string \\'dvdf\\', the longest substring without repeating characters is \\'vdf\\'. Starting from the first character, \\'dv\\' is valid, but the next \\'d\\' repeats. Moving one character over, \\'vdf\\' is the longest valid substring without any repetition."
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "\"vdf\" would be the longest one \\n"
                    }
                ]
            },
            {
                "id": 1575088,
                "content": [
                    {
                        "username": "user5558p",
                        "content": "The solution given expects an output of 1 for an **empty input string**.\\nThe longest substring without repeating characters for an empty string should be 0, and not 1."
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "As question has stated, it will be considering spaces as  a character so it does consider the empty input as well unless it has some character in it\\n"
                    },
                    {
                        "username": "rishi101",
                        "content": "Hi, \\n\\nI\\'m a bit confused on how they got Theta(n^3) for the brute force solution. I don\\'t completely follow their proof with the summation notation. The way I thought about the runtime was by counting the number of iterations of the innermost 3rd loop (which is in the \"allunique\" function). The number of iterations can be counted as: \\n\\n(2+3+4+...+n) +  (2+3+4+...+n-1)  +  (2+3+4+..+n-2)  + ..... +  (2+3+4)  + (2+3)  + (2)\\n\\nI believe this is the same sum that was written in the official solution using summation notation. However, I didn\\'t really follow the proof that followed, which continued to use summation notation. Could anyone provide an alternate proof that doesn\\'t use summation notation (it just uses the expanded sum that I wrote above)? \\n\\nThanks so much!"
                    },
                    {
                        "username": "janis__",
                        "content": "The sum you\\'ve written represents the number of iterations for each starting point of a substring. If you group the terms, you\\'ll notice that the number \"2\" appears n times, the number \"3\" appears n-1 times, \"4\" appears n-2 times, and so on. Therefore, the total number of iterations is n(2) + (n-1)(3) + (n-2)(4) + ... + 3(n-2) + 2(n-1) + n, which simplifies to a sum that is on the order of \\u0398(n3)\\u0398(n3) when considering the largest terms."
                    },
                    {
                        "username": "AndreiMotinga",
                        "content": "> Given \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\nin case of `pwwkew`, possible reponses might be `wke`, as well as `kew`. I think it\\'s important to mention, cause it affects how the problem is solved. "
                    },
                    {
                        "username": "ftorres12345",
                        "content": "This problem disgust me. Its simple to understand with sliding window but no where in the problem does it mention that IF* there is duplicate characters then that they would come up in the same sequence. EX) s= abca is a possible test case bacause \"a\" is the first char in the string and the first duplicate. BUT the sliding window would fail if the string was s= abcb because if u increment the initial pointer u would be taking out \"a\" and not \"b\". THATS MY GRIPE it doesnt mention this in the question description at all. "
                    },
                    {
                        "username": "janis__",
                        "content": "I understand your frustration. The sliding window technique works for both \"abca\" and \"abcb\". In the case of \"abcb\", when you encounter the second \\'b\\', you move the left pointer of the window to the position after the first \\'b\\', effectively removing the first \\'b\\' from consideration. This way, the window always maintains unique characters, and you can continue sliding it to find the longest substring without repeating characters."
                    },
                    {
                        "username": "charlie_1212",
                        "content": "Yeah. Some of the problems on here, I don\\'t realize what they\\'re _really_ asking until I\\'ve written my solution and it fails on test 172/175, then I scratch my head and code for that, then realize it won\\'t pass tests 1-171, then it all clicks together. "
                    },
                    {
                        "username": "Jia_Bao",
                        "content": "Given a string s, find the length of the longest substring without repeating characters.\\n\\nExample 1:\\ns = \"abcabcbb\"\\n\\nNon repeating char substring = \"a\" \"ab\" \"abc\"  \"bc\" \"cab\" \"cb\" \\n\\nExample 2:\\ns = \"bbbbb\"\\n\\nNon repeating char substring = \"b\"\\n\\nExample 3:\\ns = \"pwwkew\"\\n\\nNon repeating char substring = \"pw\" \"wk\" \"wke\" \"ke\" \"kew\"\\n\\n\\n\\n\\n "
                    },
                    {
                        "username": "user1633nb",
                        "content": "Non repeating char substring = \"a\" \"ab\" \"abc\" \"bc\" \"cab\" \"abc\" \"bc\" \"cb\" \"b\""
                    },
                    {
                        "username": "Asthebel",
                        "content": "help , i tried to run the code it gave the right answer then when i submitted it ,it gave me a wrong messsage for the same test case.![image](https://assets.leetcode.com/users/images/af8a943c-b4ee-4fc2-89da-0b4d303d2bd3_1617445778.0467362.png)\\n"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "maybe it got the wrong results with wider range of test cases, does your code generalize for all possible cases? you have to try with different cases as well "
                    },
                    {
                        "username": "msn_user",
                        "content": "See below two related problems on finding longest substring with sliding window:\\n\\nhttps://www.techiedelight.com/find-longest-substring-given-string-containing-distinct-characters/\\nhttps://www.techiedelight.com/find-longest-substring-containing-k-distinct-characters/"
                    },
                    {
                        "username": "calderra",
                        "content": "I think this problem is very hard to parse. I would have failed an interview just because it would take me the whole time to figure out what the question meant.\\n\\nCurrent problem:\\n\"Given a string, find the length of the longest substring without repeating characters.\"\\n\\nExample 1. If the input is:\\n\"abcabcbb\"\\nThe problem EXPECTS:\\n\"abc\", for 3 characters\\n\\nIssues with Example 1:\\n* The longest substring without \"repeating characters\" could be read to be \"abcabcb\", for 7 characters. Imagine a sticky key on a keyboard, where \"bbbbbbbb\" is a repeating character. In the word \"basketball\", only the \"ll\" charactes are repeated. It\\'s not immediately obvious from anything in the question why this reading is invalid.\\n* Substring \"abc\" is itself repeated in the input, so why wouldn\\'t characters \"a\", \"b\", and \"c\" all count as repeated characters? The answer would be 0, all characters in this example are repeated somewhere in the string.\\n* If we take \"bb\" to be a repeated character, why would the solution contain any \"b\" character at all?\\n\\nExample 3. For the input:\\n\"pwwkew\"\\nThey say the longest substring should be:\\n\"wke\"\\n\\nIssues with Example 3:\\n* All of the same issues per Example 1.\\n* In particular, Example 3 baffles because one of the \"w\" characters repeated as \"ww\" is in the substring. It doesn\\'t make sense why a repeated character would be in the answer.\\n* Problem seems to assume we\\'re parsing left-ro-right, and only keeping the first answer, making one unique solution. Why? If my solution arrives at the longest substring being \"kew\" is this in any way an incorrect solution?\\n\\nSUGGESTED VERBIAGE:\\n\\nProblem. What is the longest substring which can be formed from the input, where all characters in the substring are unique? There may be multiple substrings of the same length.\\n\\nInput. \"abcabcbb\"\\nOutput. 3\\nExplanation. The longest substring is of length 3. Longest substrings include \"abc\", \"bca\", and \"cab\".\\n\\nInput. \"pwwkew\"\\nOutput. 3\\nExplanation. The longest substring is of length 3. Longest substrings include \"wke\" and \"kew\"."
                    },
                    {
                        "username": "sivaswaroopsarma121",
                        "content": "the question is what is length of substring which does not have any repeated char \\nyou can start at any point in the string and at any point in the string but the string formed by the starting index and ending index should not have any repeated char \\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        \\n\\n        List<Integer> length=new ArrayList<>();\\n        for(int i=0;i<s.length();i++){\\n            for(int j=i+1;j<s.length();j++){\\n                String z=s.substring(i,j);\\n                if(norep(z)){\\n                    length.add(z.length());\\n                }\\n            }\\n        }\\n        Collections.sort(length);\\n        return length.get(length.size()-1);\\n    }\\n    public boolean norep(String z){\\n        Set<Character> set=new HashSet<>();\\n        for(int i=0;i<z.length();i++){\\n            if(set.contains(z.charAt(i))){\\n                return false;\\n            }\\n            else{\\n                set.add(z.charAt(i));\\n            }\\n        }\\n        return true;\\n    } \\n}\\nthis one will clear your doubts"
                    },
                    {
                        "username": "connectaman",
                        "content": "I was solving the problem statement called longest substring without repeating character\\nand when i submit my code,\\ni get wrong answer at 90th test case \\nand the input is \"pwwkew\" where this output expected is 3 and i got output 5 which is correct.\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "The correct answer for the input \"pwwkew\" is indeed 3, corresponding to the substring \"wke\". Your output of 5 suggests that your code might be incorrectly considering a longer substring with repeating characters. Ensure your code correctly identifies and excludes repeated characters within a substring."
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "\"wke\" is the longest one so \\n"
                    },
                    {
                        "username": "johnathanrs",
                        "content": "Example: \\'dvdf\\'\\nHow do you determine what the substring here is? "
                    },
                    {
                        "username": "janis__",
                        "content": "[@bhupendrabc71](/bhupendrabc71) For the string \\'dvdf\\', the longest substring without repeating characters is \\'vdf\\'. Starting from the first character, \\'dv\\' is valid, but the next \\'d\\' repeats. Moving one character over, \\'vdf\\' is the longest valid substring without any repetition."
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "\"vdf\" would be the longest one \\n"
                    }
                ]
            },
            {
                "id": 1574032,
                "content": [
                    {
                        "username": "user5558p",
                        "content": "The solution given expects an output of 1 for an **empty input string**.\\nThe longest substring without repeating characters for an empty string should be 0, and not 1."
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "As question has stated, it will be considering spaces as  a character so it does consider the empty input as well unless it has some character in it\\n"
                    },
                    {
                        "username": "rishi101",
                        "content": "Hi, \\n\\nI\\'m a bit confused on how they got Theta(n^3) for the brute force solution. I don\\'t completely follow their proof with the summation notation. The way I thought about the runtime was by counting the number of iterations of the innermost 3rd loop (which is in the \"allunique\" function). The number of iterations can be counted as: \\n\\n(2+3+4+...+n) +  (2+3+4+...+n-1)  +  (2+3+4+..+n-2)  + ..... +  (2+3+4)  + (2+3)  + (2)\\n\\nI believe this is the same sum that was written in the official solution using summation notation. However, I didn\\'t really follow the proof that followed, which continued to use summation notation. Could anyone provide an alternate proof that doesn\\'t use summation notation (it just uses the expanded sum that I wrote above)? \\n\\nThanks so much!"
                    },
                    {
                        "username": "janis__",
                        "content": "The sum you\\'ve written represents the number of iterations for each starting point of a substring. If you group the terms, you\\'ll notice that the number \"2\" appears n times, the number \"3\" appears n-1 times, \"4\" appears n-2 times, and so on. Therefore, the total number of iterations is n(2) + (n-1)(3) + (n-2)(4) + ... + 3(n-2) + 2(n-1) + n, which simplifies to a sum that is on the order of \\u0398(n3)\\u0398(n3) when considering the largest terms."
                    },
                    {
                        "username": "AndreiMotinga",
                        "content": "> Given \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\nin case of `pwwkew`, possible reponses might be `wke`, as well as `kew`. I think it\\'s important to mention, cause it affects how the problem is solved. "
                    },
                    {
                        "username": "ftorres12345",
                        "content": "This problem disgust me. Its simple to understand with sliding window but no where in the problem does it mention that IF* there is duplicate characters then that they would come up in the same sequence. EX) s= abca is a possible test case bacause \"a\" is the first char in the string and the first duplicate. BUT the sliding window would fail if the string was s= abcb because if u increment the initial pointer u would be taking out \"a\" and not \"b\". THATS MY GRIPE it doesnt mention this in the question description at all. "
                    },
                    {
                        "username": "janis__",
                        "content": "I understand your frustration. The sliding window technique works for both \"abca\" and \"abcb\". In the case of \"abcb\", when you encounter the second \\'b\\', you move the left pointer of the window to the position after the first \\'b\\', effectively removing the first \\'b\\' from consideration. This way, the window always maintains unique characters, and you can continue sliding it to find the longest substring without repeating characters."
                    },
                    {
                        "username": "charlie_1212",
                        "content": "Yeah. Some of the problems on here, I don\\'t realize what they\\'re _really_ asking until I\\'ve written my solution and it fails on test 172/175, then I scratch my head and code for that, then realize it won\\'t pass tests 1-171, then it all clicks together. "
                    },
                    {
                        "username": "Jia_Bao",
                        "content": "Given a string s, find the length of the longest substring without repeating characters.\\n\\nExample 1:\\ns = \"abcabcbb\"\\n\\nNon repeating char substring = \"a\" \"ab\" \"abc\"  \"bc\" \"cab\" \"cb\" \\n\\nExample 2:\\ns = \"bbbbb\"\\n\\nNon repeating char substring = \"b\"\\n\\nExample 3:\\ns = \"pwwkew\"\\n\\nNon repeating char substring = \"pw\" \"wk\" \"wke\" \"ke\" \"kew\"\\n\\n\\n\\n\\n "
                    },
                    {
                        "username": "user1633nb",
                        "content": "Non repeating char substring = \"a\" \"ab\" \"abc\" \"bc\" \"cab\" \"abc\" \"bc\" \"cb\" \"b\""
                    },
                    {
                        "username": "Asthebel",
                        "content": "help , i tried to run the code it gave the right answer then when i submitted it ,it gave me a wrong messsage for the same test case.![image](https://assets.leetcode.com/users/images/af8a943c-b4ee-4fc2-89da-0b4d303d2bd3_1617445778.0467362.png)\\n"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "maybe it got the wrong results with wider range of test cases, does your code generalize for all possible cases? you have to try with different cases as well "
                    },
                    {
                        "username": "msn_user",
                        "content": "See below two related problems on finding longest substring with sliding window:\\n\\nhttps://www.techiedelight.com/find-longest-substring-given-string-containing-distinct-characters/\\nhttps://www.techiedelight.com/find-longest-substring-containing-k-distinct-characters/"
                    },
                    {
                        "username": "calderra",
                        "content": "I think this problem is very hard to parse. I would have failed an interview just because it would take me the whole time to figure out what the question meant.\\n\\nCurrent problem:\\n\"Given a string, find the length of the longest substring without repeating characters.\"\\n\\nExample 1. If the input is:\\n\"abcabcbb\"\\nThe problem EXPECTS:\\n\"abc\", for 3 characters\\n\\nIssues with Example 1:\\n* The longest substring without \"repeating characters\" could be read to be \"abcabcb\", for 7 characters. Imagine a sticky key on a keyboard, where \"bbbbbbbb\" is a repeating character. In the word \"basketball\", only the \"ll\" charactes are repeated. It\\'s not immediately obvious from anything in the question why this reading is invalid.\\n* Substring \"abc\" is itself repeated in the input, so why wouldn\\'t characters \"a\", \"b\", and \"c\" all count as repeated characters? The answer would be 0, all characters in this example are repeated somewhere in the string.\\n* If we take \"bb\" to be a repeated character, why would the solution contain any \"b\" character at all?\\n\\nExample 3. For the input:\\n\"pwwkew\"\\nThey say the longest substring should be:\\n\"wke\"\\n\\nIssues with Example 3:\\n* All of the same issues per Example 1.\\n* In particular, Example 3 baffles because one of the \"w\" characters repeated as \"ww\" is in the substring. It doesn\\'t make sense why a repeated character would be in the answer.\\n* Problem seems to assume we\\'re parsing left-ro-right, and only keeping the first answer, making one unique solution. Why? If my solution arrives at the longest substring being \"kew\" is this in any way an incorrect solution?\\n\\nSUGGESTED VERBIAGE:\\n\\nProblem. What is the longest substring which can be formed from the input, where all characters in the substring are unique? There may be multiple substrings of the same length.\\n\\nInput. \"abcabcbb\"\\nOutput. 3\\nExplanation. The longest substring is of length 3. Longest substrings include \"abc\", \"bca\", and \"cab\".\\n\\nInput. \"pwwkew\"\\nOutput. 3\\nExplanation. The longest substring is of length 3. Longest substrings include \"wke\" and \"kew\"."
                    },
                    {
                        "username": "sivaswaroopsarma121",
                        "content": "the question is what is length of substring which does not have any repeated char \\nyou can start at any point in the string and at any point in the string but the string formed by the starting index and ending index should not have any repeated char \\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        \\n\\n        List<Integer> length=new ArrayList<>();\\n        for(int i=0;i<s.length();i++){\\n            for(int j=i+1;j<s.length();j++){\\n                String z=s.substring(i,j);\\n                if(norep(z)){\\n                    length.add(z.length());\\n                }\\n            }\\n        }\\n        Collections.sort(length);\\n        return length.get(length.size()-1);\\n    }\\n    public boolean norep(String z){\\n        Set<Character> set=new HashSet<>();\\n        for(int i=0;i<z.length();i++){\\n            if(set.contains(z.charAt(i))){\\n                return false;\\n            }\\n            else{\\n                set.add(z.charAt(i));\\n            }\\n        }\\n        return true;\\n    } \\n}\\nthis one will clear your doubts"
                    },
                    {
                        "username": "connectaman",
                        "content": "I was solving the problem statement called longest substring without repeating character\\nand when i submit my code,\\ni get wrong answer at 90th test case \\nand the input is \"pwwkew\" where this output expected is 3 and i got output 5 which is correct.\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "The correct answer for the input \"pwwkew\" is indeed 3, corresponding to the substring \"wke\". Your output of 5 suggests that your code might be incorrectly considering a longer substring with repeating characters. Ensure your code correctly identifies and excludes repeated characters within a substring."
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "\"wke\" is the longest one so \\n"
                    },
                    {
                        "username": "johnathanrs",
                        "content": "Example: \\'dvdf\\'\\nHow do you determine what the substring here is? "
                    },
                    {
                        "username": "janis__",
                        "content": "[@bhupendrabc71](/bhupendrabc71) For the string \\'dvdf\\', the longest substring without repeating characters is \\'vdf\\'. Starting from the first character, \\'dv\\' is valid, but the next \\'d\\' repeats. Moving one character over, \\'vdf\\' is the longest valid substring without any repetition."
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "\"vdf\" would be the longest one \\n"
                    }
                ]
            },
            {
                "id": 1573889,
                "content": [
                    {
                        "username": "user5558p",
                        "content": "The solution given expects an output of 1 for an **empty input string**.\\nThe longest substring without repeating characters for an empty string should be 0, and not 1."
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "As question has stated, it will be considering spaces as  a character so it does consider the empty input as well unless it has some character in it\\n"
                    },
                    {
                        "username": "rishi101",
                        "content": "Hi, \\n\\nI\\'m a bit confused on how they got Theta(n^3) for the brute force solution. I don\\'t completely follow their proof with the summation notation. The way I thought about the runtime was by counting the number of iterations of the innermost 3rd loop (which is in the \"allunique\" function). The number of iterations can be counted as: \\n\\n(2+3+4+...+n) +  (2+3+4+...+n-1)  +  (2+3+4+..+n-2)  + ..... +  (2+3+4)  + (2+3)  + (2)\\n\\nI believe this is the same sum that was written in the official solution using summation notation. However, I didn\\'t really follow the proof that followed, which continued to use summation notation. Could anyone provide an alternate proof that doesn\\'t use summation notation (it just uses the expanded sum that I wrote above)? \\n\\nThanks so much!"
                    },
                    {
                        "username": "janis__",
                        "content": "The sum you\\'ve written represents the number of iterations for each starting point of a substring. If you group the terms, you\\'ll notice that the number \"2\" appears n times, the number \"3\" appears n-1 times, \"4\" appears n-2 times, and so on. Therefore, the total number of iterations is n(2) + (n-1)(3) + (n-2)(4) + ... + 3(n-2) + 2(n-1) + n, which simplifies to a sum that is on the order of \\u0398(n3)\\u0398(n3) when considering the largest terms."
                    },
                    {
                        "username": "AndreiMotinga",
                        "content": "> Given \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\nin case of `pwwkew`, possible reponses might be `wke`, as well as `kew`. I think it\\'s important to mention, cause it affects how the problem is solved. "
                    },
                    {
                        "username": "ftorres12345",
                        "content": "This problem disgust me. Its simple to understand with sliding window but no where in the problem does it mention that IF* there is duplicate characters then that they would come up in the same sequence. EX) s= abca is a possible test case bacause \"a\" is the first char in the string and the first duplicate. BUT the sliding window would fail if the string was s= abcb because if u increment the initial pointer u would be taking out \"a\" and not \"b\". THATS MY GRIPE it doesnt mention this in the question description at all. "
                    },
                    {
                        "username": "janis__",
                        "content": "I understand your frustration. The sliding window technique works for both \"abca\" and \"abcb\". In the case of \"abcb\", when you encounter the second \\'b\\', you move the left pointer of the window to the position after the first \\'b\\', effectively removing the first \\'b\\' from consideration. This way, the window always maintains unique characters, and you can continue sliding it to find the longest substring without repeating characters."
                    },
                    {
                        "username": "charlie_1212",
                        "content": "Yeah. Some of the problems on here, I don\\'t realize what they\\'re _really_ asking until I\\'ve written my solution and it fails on test 172/175, then I scratch my head and code for that, then realize it won\\'t pass tests 1-171, then it all clicks together. "
                    },
                    {
                        "username": "Jia_Bao",
                        "content": "Given a string s, find the length of the longest substring without repeating characters.\\n\\nExample 1:\\ns = \"abcabcbb\"\\n\\nNon repeating char substring = \"a\" \"ab\" \"abc\"  \"bc\" \"cab\" \"cb\" \\n\\nExample 2:\\ns = \"bbbbb\"\\n\\nNon repeating char substring = \"b\"\\n\\nExample 3:\\ns = \"pwwkew\"\\n\\nNon repeating char substring = \"pw\" \"wk\" \"wke\" \"ke\" \"kew\"\\n\\n\\n\\n\\n "
                    },
                    {
                        "username": "user1633nb",
                        "content": "Non repeating char substring = \"a\" \"ab\" \"abc\" \"bc\" \"cab\" \"abc\" \"bc\" \"cb\" \"b\""
                    },
                    {
                        "username": "Asthebel",
                        "content": "help , i tried to run the code it gave the right answer then when i submitted it ,it gave me a wrong messsage for the same test case.![image](https://assets.leetcode.com/users/images/af8a943c-b4ee-4fc2-89da-0b4d303d2bd3_1617445778.0467362.png)\\n"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "maybe it got the wrong results with wider range of test cases, does your code generalize for all possible cases? you have to try with different cases as well "
                    },
                    {
                        "username": "msn_user",
                        "content": "See below two related problems on finding longest substring with sliding window:\\n\\nhttps://www.techiedelight.com/find-longest-substring-given-string-containing-distinct-characters/\\nhttps://www.techiedelight.com/find-longest-substring-containing-k-distinct-characters/"
                    },
                    {
                        "username": "calderra",
                        "content": "I think this problem is very hard to parse. I would have failed an interview just because it would take me the whole time to figure out what the question meant.\\n\\nCurrent problem:\\n\"Given a string, find the length of the longest substring without repeating characters.\"\\n\\nExample 1. If the input is:\\n\"abcabcbb\"\\nThe problem EXPECTS:\\n\"abc\", for 3 characters\\n\\nIssues with Example 1:\\n* The longest substring without \"repeating characters\" could be read to be \"abcabcb\", for 7 characters. Imagine a sticky key on a keyboard, where \"bbbbbbbb\" is a repeating character. In the word \"basketball\", only the \"ll\" charactes are repeated. It\\'s not immediately obvious from anything in the question why this reading is invalid.\\n* Substring \"abc\" is itself repeated in the input, so why wouldn\\'t characters \"a\", \"b\", and \"c\" all count as repeated characters? The answer would be 0, all characters in this example are repeated somewhere in the string.\\n* If we take \"bb\" to be a repeated character, why would the solution contain any \"b\" character at all?\\n\\nExample 3. For the input:\\n\"pwwkew\"\\nThey say the longest substring should be:\\n\"wke\"\\n\\nIssues with Example 3:\\n* All of the same issues per Example 1.\\n* In particular, Example 3 baffles because one of the \"w\" characters repeated as \"ww\" is in the substring. It doesn\\'t make sense why a repeated character would be in the answer.\\n* Problem seems to assume we\\'re parsing left-ro-right, and only keeping the first answer, making one unique solution. Why? If my solution arrives at the longest substring being \"kew\" is this in any way an incorrect solution?\\n\\nSUGGESTED VERBIAGE:\\n\\nProblem. What is the longest substring which can be formed from the input, where all characters in the substring are unique? There may be multiple substrings of the same length.\\n\\nInput. \"abcabcbb\"\\nOutput. 3\\nExplanation. The longest substring is of length 3. Longest substrings include \"abc\", \"bca\", and \"cab\".\\n\\nInput. \"pwwkew\"\\nOutput. 3\\nExplanation. The longest substring is of length 3. Longest substrings include \"wke\" and \"kew\"."
                    },
                    {
                        "username": "sivaswaroopsarma121",
                        "content": "the question is what is length of substring which does not have any repeated char \\nyou can start at any point in the string and at any point in the string but the string formed by the starting index and ending index should not have any repeated char \\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        \\n\\n        List<Integer> length=new ArrayList<>();\\n        for(int i=0;i<s.length();i++){\\n            for(int j=i+1;j<s.length();j++){\\n                String z=s.substring(i,j);\\n                if(norep(z)){\\n                    length.add(z.length());\\n                }\\n            }\\n        }\\n        Collections.sort(length);\\n        return length.get(length.size()-1);\\n    }\\n    public boolean norep(String z){\\n        Set<Character> set=new HashSet<>();\\n        for(int i=0;i<z.length();i++){\\n            if(set.contains(z.charAt(i))){\\n                return false;\\n            }\\n            else{\\n                set.add(z.charAt(i));\\n            }\\n        }\\n        return true;\\n    } \\n}\\nthis one will clear your doubts"
                    },
                    {
                        "username": "connectaman",
                        "content": "I was solving the problem statement called longest substring without repeating character\\nand when i submit my code,\\ni get wrong answer at 90th test case \\nand the input is \"pwwkew\" where this output expected is 3 and i got output 5 which is correct.\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "The correct answer for the input \"pwwkew\" is indeed 3, corresponding to the substring \"wke\". Your output of 5 suggests that your code might be incorrectly considering a longer substring with repeating characters. Ensure your code correctly identifies and excludes repeated characters within a substring."
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "\"wke\" is the longest one so \\n"
                    },
                    {
                        "username": "johnathanrs",
                        "content": "Example: \\'dvdf\\'\\nHow do you determine what the substring here is? "
                    },
                    {
                        "username": "janis__",
                        "content": "[@bhupendrabc71](/bhupendrabc71) For the string \\'dvdf\\', the longest substring without repeating characters is \\'vdf\\'. Starting from the first character, \\'dv\\' is valid, but the next \\'d\\' repeats. Moving one character over, \\'vdf\\' is the longest valid substring without any repetition."
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "\"vdf\" would be the longest one \\n"
                    }
                ]
            },
            {
                "id": 1572862,
                "content": [
                    {
                        "username": "user5558p",
                        "content": "The solution given expects an output of 1 for an **empty input string**.\\nThe longest substring without repeating characters for an empty string should be 0, and not 1."
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "As question has stated, it will be considering spaces as  a character so it does consider the empty input as well unless it has some character in it\\n"
                    },
                    {
                        "username": "rishi101",
                        "content": "Hi, \\n\\nI\\'m a bit confused on how they got Theta(n^3) for the brute force solution. I don\\'t completely follow their proof with the summation notation. The way I thought about the runtime was by counting the number of iterations of the innermost 3rd loop (which is in the \"allunique\" function). The number of iterations can be counted as: \\n\\n(2+3+4+...+n) +  (2+3+4+...+n-1)  +  (2+3+4+..+n-2)  + ..... +  (2+3+4)  + (2+3)  + (2)\\n\\nI believe this is the same sum that was written in the official solution using summation notation. However, I didn\\'t really follow the proof that followed, which continued to use summation notation. Could anyone provide an alternate proof that doesn\\'t use summation notation (it just uses the expanded sum that I wrote above)? \\n\\nThanks so much!"
                    },
                    {
                        "username": "janis__",
                        "content": "The sum you\\'ve written represents the number of iterations for each starting point of a substring. If you group the terms, you\\'ll notice that the number \"2\" appears n times, the number \"3\" appears n-1 times, \"4\" appears n-2 times, and so on. Therefore, the total number of iterations is n(2) + (n-1)(3) + (n-2)(4) + ... + 3(n-2) + 2(n-1) + n, which simplifies to a sum that is on the order of \\u0398(n3)\\u0398(n3) when considering the largest terms."
                    },
                    {
                        "username": "AndreiMotinga",
                        "content": "> Given \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\nin case of `pwwkew`, possible reponses might be `wke`, as well as `kew`. I think it\\'s important to mention, cause it affects how the problem is solved. "
                    },
                    {
                        "username": "ftorres12345",
                        "content": "This problem disgust me. Its simple to understand with sliding window but no where in the problem does it mention that IF* there is duplicate characters then that they would come up in the same sequence. EX) s= abca is a possible test case bacause \"a\" is the first char in the string and the first duplicate. BUT the sliding window would fail if the string was s= abcb because if u increment the initial pointer u would be taking out \"a\" and not \"b\". THATS MY GRIPE it doesnt mention this in the question description at all. "
                    },
                    {
                        "username": "janis__",
                        "content": "I understand your frustration. The sliding window technique works for both \"abca\" and \"abcb\". In the case of \"abcb\", when you encounter the second \\'b\\', you move the left pointer of the window to the position after the first \\'b\\', effectively removing the first \\'b\\' from consideration. This way, the window always maintains unique characters, and you can continue sliding it to find the longest substring without repeating characters."
                    },
                    {
                        "username": "charlie_1212",
                        "content": "Yeah. Some of the problems on here, I don\\'t realize what they\\'re _really_ asking until I\\'ve written my solution and it fails on test 172/175, then I scratch my head and code for that, then realize it won\\'t pass tests 1-171, then it all clicks together. "
                    },
                    {
                        "username": "Jia_Bao",
                        "content": "Given a string s, find the length of the longest substring without repeating characters.\\n\\nExample 1:\\ns = \"abcabcbb\"\\n\\nNon repeating char substring = \"a\" \"ab\" \"abc\"  \"bc\" \"cab\" \"cb\" \\n\\nExample 2:\\ns = \"bbbbb\"\\n\\nNon repeating char substring = \"b\"\\n\\nExample 3:\\ns = \"pwwkew\"\\n\\nNon repeating char substring = \"pw\" \"wk\" \"wke\" \"ke\" \"kew\"\\n\\n\\n\\n\\n "
                    },
                    {
                        "username": "user1633nb",
                        "content": "Non repeating char substring = \"a\" \"ab\" \"abc\" \"bc\" \"cab\" \"abc\" \"bc\" \"cb\" \"b\""
                    },
                    {
                        "username": "Asthebel",
                        "content": "help , i tried to run the code it gave the right answer then when i submitted it ,it gave me a wrong messsage for the same test case.![image](https://assets.leetcode.com/users/images/af8a943c-b4ee-4fc2-89da-0b4d303d2bd3_1617445778.0467362.png)\\n"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "maybe it got the wrong results with wider range of test cases, does your code generalize for all possible cases? you have to try with different cases as well "
                    },
                    {
                        "username": "msn_user",
                        "content": "See below two related problems on finding longest substring with sliding window:\\n\\nhttps://www.techiedelight.com/find-longest-substring-given-string-containing-distinct-characters/\\nhttps://www.techiedelight.com/find-longest-substring-containing-k-distinct-characters/"
                    },
                    {
                        "username": "calderra",
                        "content": "I think this problem is very hard to parse. I would have failed an interview just because it would take me the whole time to figure out what the question meant.\\n\\nCurrent problem:\\n\"Given a string, find the length of the longest substring without repeating characters.\"\\n\\nExample 1. If the input is:\\n\"abcabcbb\"\\nThe problem EXPECTS:\\n\"abc\", for 3 characters\\n\\nIssues with Example 1:\\n* The longest substring without \"repeating characters\" could be read to be \"abcabcb\", for 7 characters. Imagine a sticky key on a keyboard, where \"bbbbbbbb\" is a repeating character. In the word \"basketball\", only the \"ll\" charactes are repeated. It\\'s not immediately obvious from anything in the question why this reading is invalid.\\n* Substring \"abc\" is itself repeated in the input, so why wouldn\\'t characters \"a\", \"b\", and \"c\" all count as repeated characters? The answer would be 0, all characters in this example are repeated somewhere in the string.\\n* If we take \"bb\" to be a repeated character, why would the solution contain any \"b\" character at all?\\n\\nExample 3. For the input:\\n\"pwwkew\"\\nThey say the longest substring should be:\\n\"wke\"\\n\\nIssues with Example 3:\\n* All of the same issues per Example 1.\\n* In particular, Example 3 baffles because one of the \"w\" characters repeated as \"ww\" is in the substring. It doesn\\'t make sense why a repeated character would be in the answer.\\n* Problem seems to assume we\\'re parsing left-ro-right, and only keeping the first answer, making one unique solution. Why? If my solution arrives at the longest substring being \"kew\" is this in any way an incorrect solution?\\n\\nSUGGESTED VERBIAGE:\\n\\nProblem. What is the longest substring which can be formed from the input, where all characters in the substring are unique? There may be multiple substrings of the same length.\\n\\nInput. \"abcabcbb\"\\nOutput. 3\\nExplanation. The longest substring is of length 3. Longest substrings include \"abc\", \"bca\", and \"cab\".\\n\\nInput. \"pwwkew\"\\nOutput. 3\\nExplanation. The longest substring is of length 3. Longest substrings include \"wke\" and \"kew\"."
                    },
                    {
                        "username": "sivaswaroopsarma121",
                        "content": "the question is what is length of substring which does not have any repeated char \\nyou can start at any point in the string and at any point in the string but the string formed by the starting index and ending index should not have any repeated char \\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        \\n\\n        List<Integer> length=new ArrayList<>();\\n        for(int i=0;i<s.length();i++){\\n            for(int j=i+1;j<s.length();j++){\\n                String z=s.substring(i,j);\\n                if(norep(z)){\\n                    length.add(z.length());\\n                }\\n            }\\n        }\\n        Collections.sort(length);\\n        return length.get(length.size()-1);\\n    }\\n    public boolean norep(String z){\\n        Set<Character> set=new HashSet<>();\\n        for(int i=0;i<z.length();i++){\\n            if(set.contains(z.charAt(i))){\\n                return false;\\n            }\\n            else{\\n                set.add(z.charAt(i));\\n            }\\n        }\\n        return true;\\n    } \\n}\\nthis one will clear your doubts"
                    },
                    {
                        "username": "connectaman",
                        "content": "I was solving the problem statement called longest substring without repeating character\\nand when i submit my code,\\ni get wrong answer at 90th test case \\nand the input is \"pwwkew\" where this output expected is 3 and i got output 5 which is correct.\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "The correct answer for the input \"pwwkew\" is indeed 3, corresponding to the substring \"wke\". Your output of 5 suggests that your code might be incorrectly considering a longer substring with repeating characters. Ensure your code correctly identifies and excludes repeated characters within a substring."
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "\"wke\" is the longest one so \\n"
                    },
                    {
                        "username": "johnathanrs",
                        "content": "Example: \\'dvdf\\'\\nHow do you determine what the substring here is? "
                    },
                    {
                        "username": "janis__",
                        "content": "[@bhupendrabc71](/bhupendrabc71) For the string \\'dvdf\\', the longest substring without repeating characters is \\'vdf\\'. Starting from the first character, \\'dv\\' is valid, but the next \\'d\\' repeats. Moving one character over, \\'vdf\\' is the longest valid substring without any repetition."
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "\"vdf\" would be the longest one \\n"
                    }
                ]
            },
            {
                "id": 1572077,
                "content": [
                    {
                        "username": "user5558p",
                        "content": "The solution given expects an output of 1 for an **empty input string**.\\nThe longest substring without repeating characters for an empty string should be 0, and not 1."
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "As question has stated, it will be considering spaces as  a character so it does consider the empty input as well unless it has some character in it\\n"
                    },
                    {
                        "username": "rishi101",
                        "content": "Hi, \\n\\nI\\'m a bit confused on how they got Theta(n^3) for the brute force solution. I don\\'t completely follow their proof with the summation notation. The way I thought about the runtime was by counting the number of iterations of the innermost 3rd loop (which is in the \"allunique\" function). The number of iterations can be counted as: \\n\\n(2+3+4+...+n) +  (2+3+4+...+n-1)  +  (2+3+4+..+n-2)  + ..... +  (2+3+4)  + (2+3)  + (2)\\n\\nI believe this is the same sum that was written in the official solution using summation notation. However, I didn\\'t really follow the proof that followed, which continued to use summation notation. Could anyone provide an alternate proof that doesn\\'t use summation notation (it just uses the expanded sum that I wrote above)? \\n\\nThanks so much!"
                    },
                    {
                        "username": "janis__",
                        "content": "The sum you\\'ve written represents the number of iterations for each starting point of a substring. If you group the terms, you\\'ll notice that the number \"2\" appears n times, the number \"3\" appears n-1 times, \"4\" appears n-2 times, and so on. Therefore, the total number of iterations is n(2) + (n-1)(3) + (n-2)(4) + ... + 3(n-2) + 2(n-1) + n, which simplifies to a sum that is on the order of \\u0398(n3)\\u0398(n3) when considering the largest terms."
                    },
                    {
                        "username": "AndreiMotinga",
                        "content": "> Given \"pwwkew\", the answer is \"wke\", with the length of 3. Note that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\nin case of `pwwkew`, possible reponses might be `wke`, as well as `kew`. I think it\\'s important to mention, cause it affects how the problem is solved. "
                    },
                    {
                        "username": "ftorres12345",
                        "content": "This problem disgust me. Its simple to understand with sliding window but no where in the problem does it mention that IF* there is duplicate characters then that they would come up in the same sequence. EX) s= abca is a possible test case bacause \"a\" is the first char in the string and the first duplicate. BUT the sliding window would fail if the string was s= abcb because if u increment the initial pointer u would be taking out \"a\" and not \"b\". THATS MY GRIPE it doesnt mention this in the question description at all. "
                    },
                    {
                        "username": "janis__",
                        "content": "I understand your frustration. The sliding window technique works for both \"abca\" and \"abcb\". In the case of \"abcb\", when you encounter the second \\'b\\', you move the left pointer of the window to the position after the first \\'b\\', effectively removing the first \\'b\\' from consideration. This way, the window always maintains unique characters, and you can continue sliding it to find the longest substring without repeating characters."
                    },
                    {
                        "username": "charlie_1212",
                        "content": "Yeah. Some of the problems on here, I don\\'t realize what they\\'re _really_ asking until I\\'ve written my solution and it fails on test 172/175, then I scratch my head and code for that, then realize it won\\'t pass tests 1-171, then it all clicks together. "
                    },
                    {
                        "username": "Jia_Bao",
                        "content": "Given a string s, find the length of the longest substring without repeating characters.\\n\\nExample 1:\\ns = \"abcabcbb\"\\n\\nNon repeating char substring = \"a\" \"ab\" \"abc\"  \"bc\" \"cab\" \"cb\" \\n\\nExample 2:\\ns = \"bbbbb\"\\n\\nNon repeating char substring = \"b\"\\n\\nExample 3:\\ns = \"pwwkew\"\\n\\nNon repeating char substring = \"pw\" \"wk\" \"wke\" \"ke\" \"kew\"\\n\\n\\n\\n\\n "
                    },
                    {
                        "username": "user1633nb",
                        "content": "Non repeating char substring = \"a\" \"ab\" \"abc\" \"bc\" \"cab\" \"abc\" \"bc\" \"cb\" \"b\""
                    },
                    {
                        "username": "Asthebel",
                        "content": "help , i tried to run the code it gave the right answer then when i submitted it ,it gave me a wrong messsage for the same test case.![image](https://assets.leetcode.com/users/images/af8a943c-b4ee-4fc2-89da-0b4d303d2bd3_1617445778.0467362.png)\\n"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "maybe it got the wrong results with wider range of test cases, does your code generalize for all possible cases? you have to try with different cases as well "
                    },
                    {
                        "username": "msn_user",
                        "content": "See below two related problems on finding longest substring with sliding window:\\n\\nhttps://www.techiedelight.com/find-longest-substring-given-string-containing-distinct-characters/\\nhttps://www.techiedelight.com/find-longest-substring-containing-k-distinct-characters/"
                    },
                    {
                        "username": "calderra",
                        "content": "I think this problem is very hard to parse. I would have failed an interview just because it would take me the whole time to figure out what the question meant.\\n\\nCurrent problem:\\n\"Given a string, find the length of the longest substring without repeating characters.\"\\n\\nExample 1. If the input is:\\n\"abcabcbb\"\\nThe problem EXPECTS:\\n\"abc\", for 3 characters\\n\\nIssues with Example 1:\\n* The longest substring without \"repeating characters\" could be read to be \"abcabcb\", for 7 characters. Imagine a sticky key on a keyboard, where \"bbbbbbbb\" is a repeating character. In the word \"basketball\", only the \"ll\" charactes are repeated. It\\'s not immediately obvious from anything in the question why this reading is invalid.\\n* Substring \"abc\" is itself repeated in the input, so why wouldn\\'t characters \"a\", \"b\", and \"c\" all count as repeated characters? The answer would be 0, all characters in this example are repeated somewhere in the string.\\n* If we take \"bb\" to be a repeated character, why would the solution contain any \"b\" character at all?\\n\\nExample 3. For the input:\\n\"pwwkew\"\\nThey say the longest substring should be:\\n\"wke\"\\n\\nIssues with Example 3:\\n* All of the same issues per Example 1.\\n* In particular, Example 3 baffles because one of the \"w\" characters repeated as \"ww\" is in the substring. It doesn\\'t make sense why a repeated character would be in the answer.\\n* Problem seems to assume we\\'re parsing left-ro-right, and only keeping the first answer, making one unique solution. Why? If my solution arrives at the longest substring being \"kew\" is this in any way an incorrect solution?\\n\\nSUGGESTED VERBIAGE:\\n\\nProblem. What is the longest substring which can be formed from the input, where all characters in the substring are unique? There may be multiple substrings of the same length.\\n\\nInput. \"abcabcbb\"\\nOutput. 3\\nExplanation. The longest substring is of length 3. Longest substrings include \"abc\", \"bca\", and \"cab\".\\n\\nInput. \"pwwkew\"\\nOutput. 3\\nExplanation. The longest substring is of length 3. Longest substrings include \"wke\" and \"kew\"."
                    },
                    {
                        "username": "sivaswaroopsarma121",
                        "content": "the question is what is length of substring which does not have any repeated char \\nyou can start at any point in the string and at any point in the string but the string formed by the starting index and ending index should not have any repeated char \\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        \\n\\n        List<Integer> length=new ArrayList<>();\\n        for(int i=0;i<s.length();i++){\\n            for(int j=i+1;j<s.length();j++){\\n                String z=s.substring(i,j);\\n                if(norep(z)){\\n                    length.add(z.length());\\n                }\\n            }\\n        }\\n        Collections.sort(length);\\n        return length.get(length.size()-1);\\n    }\\n    public boolean norep(String z){\\n        Set<Character> set=new HashSet<>();\\n        for(int i=0;i<z.length();i++){\\n            if(set.contains(z.charAt(i))){\\n                return false;\\n            }\\n            else{\\n                set.add(z.charAt(i));\\n            }\\n        }\\n        return true;\\n    } \\n}\\nthis one will clear your doubts"
                    },
                    {
                        "username": "connectaman",
                        "content": "I was solving the problem statement called longest substring without repeating character\\nand when i submit my code,\\ni get wrong answer at 90th test case \\nand the input is \"pwwkew\" where this output expected is 3 and i got output 5 which is correct.\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "The correct answer for the input \"pwwkew\" is indeed 3, corresponding to the substring \"wke\". Your output of 5 suggests that your code might be incorrectly considering a longer substring with repeating characters. Ensure your code correctly identifies and excludes repeated characters within a substring."
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "\"wke\" is the longest one so \\n"
                    },
                    {
                        "username": "johnathanrs",
                        "content": "Example: \\'dvdf\\'\\nHow do you determine what the substring here is? "
                    },
                    {
                        "username": "janis__",
                        "content": "[@bhupendrabc71](/bhupendrabc71) For the string \\'dvdf\\', the longest substring without repeating characters is \\'vdf\\'. Starting from the first character, \\'dv\\' is valid, but the next \\'d\\' repeats. Moving one character over, \\'vdf\\' is the longest valid substring without any repetition."
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "\"vdf\" would be the longest one \\n"
                    }
                ]
            },
            {
                "id": 2074873,
                "content": [
                    {
                        "username": "ledieuelephant",
                        "content": "My answer is logic for 407 case. But more than 800 tests are too much"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "same bro"
                    },
                    {
                        "username": "lovishbansal441",
                        "content": "dude what is this one testcase can u belive\\n\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCD\"\\n\\ndude why would anyone do a string of 31k letters. TF"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "bro my code just runs at O(n^2) and it still works"
                    },
                    {
                        "username": "sujitg0124",
                        "content": "Bro all 987 test case passed but Time limit exceeded. "
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "[@sujitg0124](/sujitg0124) class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        if(s.isEmpty()) return 0;\\n\\n        int ans = Integer.MIN_VALUE;\\n        int left = 0;\\n        int right = 0;\\n\\n        while(right < s.length()) {\\n            if(hasDuplicates(s.substring(left, right + 1))) {\\n                ans = Math.max(ans, s.substring(left, right).length());\\n                left++;\\n            }\\n            else {\\n                ans = Math.max(ans, s.substring(left, right + 1).length());\\n            }\\n\\n            right++;\\n        }\\n\\n        return ans;\\n    }\\n\\n    private boolean hasDuplicates(String s) {\\n        Set<Character> set = new HashSet<>();\\n\\n        for(int i = 0; i < s.length(); i++) {\\n            if(!set.add(s.charAt(i))) return true;\\n        }\\n\\n        return false;\\n    }\\n}\\n\\n\\nstill works"
                    },
                    {
                        "username": "sujitg0124",
                        "content": "[@DamianIvanochko](/DamianIvanochko) \\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        List<Character> hs=new ArrayList<>();\\n        int maxlength=0;\\n        int l=s.length();\\n        int initial=0;\\n        int end=0;\\n        while(end<l){\\n            if(!hs.contains(s.charAt(end))){\\n                hs.add((s.charAt(end)));\\n                maxlength=Math.max(maxlength,hs.size());\\n                end++;\\n            }\\n            else{\\n                hs.remove(Character.valueOf((s.charAt(initial))));\\n               initial++;\\n            }\\n        }\\n        return maxlength;\\n        }\\n    }\\n"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Donno, solved it in O(n^2)"
                    },
                    {
                        "username": "chrisyu0106",
                        "content": "I passed 986/987 testcases, and WTF is 987???"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "same problem"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "Input: s = \"pwwkew\"\\nOutput: 3\\nExplanation: The answer is \"wke\", with the length of 3.\\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\n can someone explain this? what does it mean. subsequence means string+string?"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Substring: \"abCDEf\", subsequence: \"aBcdEF\""
                    },
                    {
                        "username": "sivas5262",
                        "content": "import java.util.*;\\npublic class Main\\n{\\n\\tpublic static void main(String[] args) {\\n\\tScanner sc = new Scanner(System.in);\\n    String s = sc.nextLine();\\n    String dup =\"\";\\n    for(int i=0;i<s.length();i++){\\n        String str = Character.toString(s.charAt(i));\\n        if(!dup.contains(str)){\\n            dup=dup+s.charAt(i);\\n            }\\n        }\\n        System.out.print(dup.length());\\n\\t}\\n}"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "That\\'s gay, don\\'t post solutions here"
                    },
                    {
                        "username": "sivas5262",
                        "content": "import java.util.*;\npublic class Main\n{\n\tpublic static void main(String[] args) {\n\tScanner sc = new Scanner(System.in);\n    String s = sc.nextLine();\n    String dup =\"\";\n    for(int i=0;i<s.length();i++){\n        String str = Character.toString(s.charAt(i));\n        if(!dup.contains(str)){\n            dup=dup+s.charAt(i);\n            }\n        }\n        System.out.print(dup);\n\t}\n}\n\n\nthis is the simplest code"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "That\\'s gay, don\\'t post solutions here"
                    },
                    {
                        "username": "emmanuelouattara75",
                        "content": "hello here is my solution. i solved the 3 cases.\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n    let s2=s[0];\\n    let s1=\\'\\';\\n    for (let i=0; i<s.length; i++) {\\n      for (let j=0; j<s1.length; j++) {\\n      if (s1[j]==s[i]) {\\n        s1=s[i];\\n      }\\n    }\\n    if (s1!=s[i]) {\\n      s1+=s[i]\\n      if (s1.length>s2.length) {\\n        s2=s1\\n      }\\n    }\\n    }\\n   let s3 = s2.length;\\n    return s3;\\n};\\nbut it\\'s take the following error:\\nLine 21 in solution.js let s3 = s2.length; ^ TypeError: Cannot read properties of undefined (reading \\'length\\') Line 21: Char 16 in solution.js (lengthOfLongestSubstring) Line 33: Char 19 in solution.js (Object.<anonymous>) Line 16: Char 8 in runner.js (Object.runner) Line 24: Char 26 in solution.js (Object.<anonymous>) at Module._compile (node:internal/modules/cjs/loader:1101:14) at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10) at Module.load (node:internal/modules/cjs/loader:981:32) at Function.Module._load (node:internal/modules/cjs/loader:822:12) at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12) at node:internal/main/run_main_module:17:47"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "[@emmanuelouattara75](/emmanuelouattara75) donno"
                    },
                    {
                        "username": "emmanuelouattara75",
                        "content": "[@DamianIvanochko](/DamianIvanochko) no it\\'s the first variable i had defined (global scope). what i don\\'t understand even more is my code works on Free code camp console et codepen.io console but not here."
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "The error you\\'re encountering is due to the fact that s2 is undefined when you\\'re trying to access its length on line 21."
                    },
                    {
                        "username": "sujaltangde",
                        "content": "last test case 987 is like a main boss at end of game :)"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "GigaNiga"
                    },
                    {
                        "username": "lowerkinded",
                        "content": "Hint: It's not the `s[i]` that makes the sequence invalid -- it's the `appeared.index(s[i])`."
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "ok bro"
                    }
                ]
            },
            {
                "id": 2070577,
                "content": [
                    {
                        "username": "ledieuelephant",
                        "content": "My answer is logic for 407 case. But more than 800 tests are too much"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "same bro"
                    },
                    {
                        "username": "lovishbansal441",
                        "content": "dude what is this one testcase can u belive\\n\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCD\"\\n\\ndude why would anyone do a string of 31k letters. TF"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "bro my code just runs at O(n^2) and it still works"
                    },
                    {
                        "username": "sujitg0124",
                        "content": "Bro all 987 test case passed but Time limit exceeded. "
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "[@sujitg0124](/sujitg0124) class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        if(s.isEmpty()) return 0;\\n\\n        int ans = Integer.MIN_VALUE;\\n        int left = 0;\\n        int right = 0;\\n\\n        while(right < s.length()) {\\n            if(hasDuplicates(s.substring(left, right + 1))) {\\n                ans = Math.max(ans, s.substring(left, right).length());\\n                left++;\\n            }\\n            else {\\n                ans = Math.max(ans, s.substring(left, right + 1).length());\\n            }\\n\\n            right++;\\n        }\\n\\n        return ans;\\n    }\\n\\n    private boolean hasDuplicates(String s) {\\n        Set<Character> set = new HashSet<>();\\n\\n        for(int i = 0; i < s.length(); i++) {\\n            if(!set.add(s.charAt(i))) return true;\\n        }\\n\\n        return false;\\n    }\\n}\\n\\n\\nstill works"
                    },
                    {
                        "username": "sujitg0124",
                        "content": "[@DamianIvanochko](/DamianIvanochko) \\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        List<Character> hs=new ArrayList<>();\\n        int maxlength=0;\\n        int l=s.length();\\n        int initial=0;\\n        int end=0;\\n        while(end<l){\\n            if(!hs.contains(s.charAt(end))){\\n                hs.add((s.charAt(end)));\\n                maxlength=Math.max(maxlength,hs.size());\\n                end++;\\n            }\\n            else{\\n                hs.remove(Character.valueOf((s.charAt(initial))));\\n               initial++;\\n            }\\n        }\\n        return maxlength;\\n        }\\n    }\\n"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Donno, solved it in O(n^2)"
                    },
                    {
                        "username": "chrisyu0106",
                        "content": "I passed 986/987 testcases, and WTF is 987???"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "same problem"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "Input: s = \"pwwkew\"\\nOutput: 3\\nExplanation: The answer is \"wke\", with the length of 3.\\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\n can someone explain this? what does it mean. subsequence means string+string?"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Substring: \"abCDEf\", subsequence: \"aBcdEF\""
                    },
                    {
                        "username": "sivas5262",
                        "content": "import java.util.*;\\npublic class Main\\n{\\n\\tpublic static void main(String[] args) {\\n\\tScanner sc = new Scanner(System.in);\\n    String s = sc.nextLine();\\n    String dup =\"\";\\n    for(int i=0;i<s.length();i++){\\n        String str = Character.toString(s.charAt(i));\\n        if(!dup.contains(str)){\\n            dup=dup+s.charAt(i);\\n            }\\n        }\\n        System.out.print(dup.length());\\n\\t}\\n}"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "That\\'s gay, don\\'t post solutions here"
                    },
                    {
                        "username": "sivas5262",
                        "content": "import java.util.*;\npublic class Main\n{\n\tpublic static void main(String[] args) {\n\tScanner sc = new Scanner(System.in);\n    String s = sc.nextLine();\n    String dup =\"\";\n    for(int i=0;i<s.length();i++){\n        String str = Character.toString(s.charAt(i));\n        if(!dup.contains(str)){\n            dup=dup+s.charAt(i);\n            }\n        }\n        System.out.print(dup);\n\t}\n}\n\n\nthis is the simplest code"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "That\\'s gay, don\\'t post solutions here"
                    },
                    {
                        "username": "emmanuelouattara75",
                        "content": "hello here is my solution. i solved the 3 cases.\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n    let s2=s[0];\\n    let s1=\\'\\';\\n    for (let i=0; i<s.length; i++) {\\n      for (let j=0; j<s1.length; j++) {\\n      if (s1[j]==s[i]) {\\n        s1=s[i];\\n      }\\n    }\\n    if (s1!=s[i]) {\\n      s1+=s[i]\\n      if (s1.length>s2.length) {\\n        s2=s1\\n      }\\n    }\\n    }\\n   let s3 = s2.length;\\n    return s3;\\n};\\nbut it\\'s take the following error:\\nLine 21 in solution.js let s3 = s2.length; ^ TypeError: Cannot read properties of undefined (reading \\'length\\') Line 21: Char 16 in solution.js (lengthOfLongestSubstring) Line 33: Char 19 in solution.js (Object.<anonymous>) Line 16: Char 8 in runner.js (Object.runner) Line 24: Char 26 in solution.js (Object.<anonymous>) at Module._compile (node:internal/modules/cjs/loader:1101:14) at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10) at Module.load (node:internal/modules/cjs/loader:981:32) at Function.Module._load (node:internal/modules/cjs/loader:822:12) at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12) at node:internal/main/run_main_module:17:47"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "[@emmanuelouattara75](/emmanuelouattara75) donno"
                    },
                    {
                        "username": "emmanuelouattara75",
                        "content": "[@DamianIvanochko](/DamianIvanochko) no it\\'s the first variable i had defined (global scope). what i don\\'t understand even more is my code works on Free code camp console et codepen.io console but not here."
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "The error you\\'re encountering is due to the fact that s2 is undefined when you\\'re trying to access its length on line 21."
                    },
                    {
                        "username": "sujaltangde",
                        "content": "last test case 987 is like a main boss at end of game :)"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "GigaNiga"
                    },
                    {
                        "username": "lowerkinded",
                        "content": "Hint: It's not the `s[i]` that makes the sequence invalid -- it's the `appeared.index(s[i])`."
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "ok bro"
                    }
                ]
            },
            {
                "id": 2069113,
                "content": [
                    {
                        "username": "ledieuelephant",
                        "content": "My answer is logic for 407 case. But more than 800 tests are too much"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "same bro"
                    },
                    {
                        "username": "lovishbansal441",
                        "content": "dude what is this one testcase can u belive\\n\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCD\"\\n\\ndude why would anyone do a string of 31k letters. TF"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "bro my code just runs at O(n^2) and it still works"
                    },
                    {
                        "username": "sujitg0124",
                        "content": "Bro all 987 test case passed but Time limit exceeded. "
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "[@sujitg0124](/sujitg0124) class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        if(s.isEmpty()) return 0;\\n\\n        int ans = Integer.MIN_VALUE;\\n        int left = 0;\\n        int right = 0;\\n\\n        while(right < s.length()) {\\n            if(hasDuplicates(s.substring(left, right + 1))) {\\n                ans = Math.max(ans, s.substring(left, right).length());\\n                left++;\\n            }\\n            else {\\n                ans = Math.max(ans, s.substring(left, right + 1).length());\\n            }\\n\\n            right++;\\n        }\\n\\n        return ans;\\n    }\\n\\n    private boolean hasDuplicates(String s) {\\n        Set<Character> set = new HashSet<>();\\n\\n        for(int i = 0; i < s.length(); i++) {\\n            if(!set.add(s.charAt(i))) return true;\\n        }\\n\\n        return false;\\n    }\\n}\\n\\n\\nstill works"
                    },
                    {
                        "username": "sujitg0124",
                        "content": "[@DamianIvanochko](/DamianIvanochko) \\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        List<Character> hs=new ArrayList<>();\\n        int maxlength=0;\\n        int l=s.length();\\n        int initial=0;\\n        int end=0;\\n        while(end<l){\\n            if(!hs.contains(s.charAt(end))){\\n                hs.add((s.charAt(end)));\\n                maxlength=Math.max(maxlength,hs.size());\\n                end++;\\n            }\\n            else{\\n                hs.remove(Character.valueOf((s.charAt(initial))));\\n               initial++;\\n            }\\n        }\\n        return maxlength;\\n        }\\n    }\\n"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Donno, solved it in O(n^2)"
                    },
                    {
                        "username": "chrisyu0106",
                        "content": "I passed 986/987 testcases, and WTF is 987???"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "same problem"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "Input: s = \"pwwkew\"\\nOutput: 3\\nExplanation: The answer is \"wke\", with the length of 3.\\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\n can someone explain this? what does it mean. subsequence means string+string?"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Substring: \"abCDEf\", subsequence: \"aBcdEF\""
                    },
                    {
                        "username": "sivas5262",
                        "content": "import java.util.*;\\npublic class Main\\n{\\n\\tpublic static void main(String[] args) {\\n\\tScanner sc = new Scanner(System.in);\\n    String s = sc.nextLine();\\n    String dup =\"\";\\n    for(int i=0;i<s.length();i++){\\n        String str = Character.toString(s.charAt(i));\\n        if(!dup.contains(str)){\\n            dup=dup+s.charAt(i);\\n            }\\n        }\\n        System.out.print(dup.length());\\n\\t}\\n}"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "That\\'s gay, don\\'t post solutions here"
                    },
                    {
                        "username": "sivas5262",
                        "content": "import java.util.*;\npublic class Main\n{\n\tpublic static void main(String[] args) {\n\tScanner sc = new Scanner(System.in);\n    String s = sc.nextLine();\n    String dup =\"\";\n    for(int i=0;i<s.length();i++){\n        String str = Character.toString(s.charAt(i));\n        if(!dup.contains(str)){\n            dup=dup+s.charAt(i);\n            }\n        }\n        System.out.print(dup);\n\t}\n}\n\n\nthis is the simplest code"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "That\\'s gay, don\\'t post solutions here"
                    },
                    {
                        "username": "emmanuelouattara75",
                        "content": "hello here is my solution. i solved the 3 cases.\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n    let s2=s[0];\\n    let s1=\\'\\';\\n    for (let i=0; i<s.length; i++) {\\n      for (let j=0; j<s1.length; j++) {\\n      if (s1[j]==s[i]) {\\n        s1=s[i];\\n      }\\n    }\\n    if (s1!=s[i]) {\\n      s1+=s[i]\\n      if (s1.length>s2.length) {\\n        s2=s1\\n      }\\n    }\\n    }\\n   let s3 = s2.length;\\n    return s3;\\n};\\nbut it\\'s take the following error:\\nLine 21 in solution.js let s3 = s2.length; ^ TypeError: Cannot read properties of undefined (reading \\'length\\') Line 21: Char 16 in solution.js (lengthOfLongestSubstring) Line 33: Char 19 in solution.js (Object.<anonymous>) Line 16: Char 8 in runner.js (Object.runner) Line 24: Char 26 in solution.js (Object.<anonymous>) at Module._compile (node:internal/modules/cjs/loader:1101:14) at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10) at Module.load (node:internal/modules/cjs/loader:981:32) at Function.Module._load (node:internal/modules/cjs/loader:822:12) at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12) at node:internal/main/run_main_module:17:47"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "[@emmanuelouattara75](/emmanuelouattara75) donno"
                    },
                    {
                        "username": "emmanuelouattara75",
                        "content": "[@DamianIvanochko](/DamianIvanochko) no it\\'s the first variable i had defined (global scope). what i don\\'t understand even more is my code works on Free code camp console et codepen.io console but not here."
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "The error you\\'re encountering is due to the fact that s2 is undefined when you\\'re trying to access its length on line 21."
                    },
                    {
                        "username": "sujaltangde",
                        "content": "last test case 987 is like a main boss at end of game :)"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "GigaNiga"
                    },
                    {
                        "username": "lowerkinded",
                        "content": "Hint: It's not the `s[i]` that makes the sequence invalid -- it's the `appeared.index(s[i])`."
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "ok bro"
                    }
                ]
            },
            {
                "id": 2068785,
                "content": [
                    {
                        "username": "ledieuelephant",
                        "content": "My answer is logic for 407 case. But more than 800 tests are too much"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "same bro"
                    },
                    {
                        "username": "lovishbansal441",
                        "content": "dude what is this one testcase can u belive\\n\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCD\"\\n\\ndude why would anyone do a string of 31k letters. TF"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "bro my code just runs at O(n^2) and it still works"
                    },
                    {
                        "username": "sujitg0124",
                        "content": "Bro all 987 test case passed but Time limit exceeded. "
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "[@sujitg0124](/sujitg0124) class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        if(s.isEmpty()) return 0;\\n\\n        int ans = Integer.MIN_VALUE;\\n        int left = 0;\\n        int right = 0;\\n\\n        while(right < s.length()) {\\n            if(hasDuplicates(s.substring(left, right + 1))) {\\n                ans = Math.max(ans, s.substring(left, right).length());\\n                left++;\\n            }\\n            else {\\n                ans = Math.max(ans, s.substring(left, right + 1).length());\\n            }\\n\\n            right++;\\n        }\\n\\n        return ans;\\n    }\\n\\n    private boolean hasDuplicates(String s) {\\n        Set<Character> set = new HashSet<>();\\n\\n        for(int i = 0; i < s.length(); i++) {\\n            if(!set.add(s.charAt(i))) return true;\\n        }\\n\\n        return false;\\n    }\\n}\\n\\n\\nstill works"
                    },
                    {
                        "username": "sujitg0124",
                        "content": "[@DamianIvanochko](/DamianIvanochko) \\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        List<Character> hs=new ArrayList<>();\\n        int maxlength=0;\\n        int l=s.length();\\n        int initial=0;\\n        int end=0;\\n        while(end<l){\\n            if(!hs.contains(s.charAt(end))){\\n                hs.add((s.charAt(end)));\\n                maxlength=Math.max(maxlength,hs.size());\\n                end++;\\n            }\\n            else{\\n                hs.remove(Character.valueOf((s.charAt(initial))));\\n               initial++;\\n            }\\n        }\\n        return maxlength;\\n        }\\n    }\\n"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Donno, solved it in O(n^2)"
                    },
                    {
                        "username": "chrisyu0106",
                        "content": "I passed 986/987 testcases, and WTF is 987???"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "same problem"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "Input: s = \"pwwkew\"\\nOutput: 3\\nExplanation: The answer is \"wke\", with the length of 3.\\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\n can someone explain this? what does it mean. subsequence means string+string?"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Substring: \"abCDEf\", subsequence: \"aBcdEF\""
                    },
                    {
                        "username": "sivas5262",
                        "content": "import java.util.*;\\npublic class Main\\n{\\n\\tpublic static void main(String[] args) {\\n\\tScanner sc = new Scanner(System.in);\\n    String s = sc.nextLine();\\n    String dup =\"\";\\n    for(int i=0;i<s.length();i++){\\n        String str = Character.toString(s.charAt(i));\\n        if(!dup.contains(str)){\\n            dup=dup+s.charAt(i);\\n            }\\n        }\\n        System.out.print(dup.length());\\n\\t}\\n}"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "That\\'s gay, don\\'t post solutions here"
                    },
                    {
                        "username": "sivas5262",
                        "content": "import java.util.*;\npublic class Main\n{\n\tpublic static void main(String[] args) {\n\tScanner sc = new Scanner(System.in);\n    String s = sc.nextLine();\n    String dup =\"\";\n    for(int i=0;i<s.length();i++){\n        String str = Character.toString(s.charAt(i));\n        if(!dup.contains(str)){\n            dup=dup+s.charAt(i);\n            }\n        }\n        System.out.print(dup);\n\t}\n}\n\n\nthis is the simplest code"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "That\\'s gay, don\\'t post solutions here"
                    },
                    {
                        "username": "emmanuelouattara75",
                        "content": "hello here is my solution. i solved the 3 cases.\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n    let s2=s[0];\\n    let s1=\\'\\';\\n    for (let i=0; i<s.length; i++) {\\n      for (let j=0; j<s1.length; j++) {\\n      if (s1[j]==s[i]) {\\n        s1=s[i];\\n      }\\n    }\\n    if (s1!=s[i]) {\\n      s1+=s[i]\\n      if (s1.length>s2.length) {\\n        s2=s1\\n      }\\n    }\\n    }\\n   let s3 = s2.length;\\n    return s3;\\n};\\nbut it\\'s take the following error:\\nLine 21 in solution.js let s3 = s2.length; ^ TypeError: Cannot read properties of undefined (reading \\'length\\') Line 21: Char 16 in solution.js (lengthOfLongestSubstring) Line 33: Char 19 in solution.js (Object.<anonymous>) Line 16: Char 8 in runner.js (Object.runner) Line 24: Char 26 in solution.js (Object.<anonymous>) at Module._compile (node:internal/modules/cjs/loader:1101:14) at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10) at Module.load (node:internal/modules/cjs/loader:981:32) at Function.Module._load (node:internal/modules/cjs/loader:822:12) at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12) at node:internal/main/run_main_module:17:47"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "[@emmanuelouattara75](/emmanuelouattara75) donno"
                    },
                    {
                        "username": "emmanuelouattara75",
                        "content": "[@DamianIvanochko](/DamianIvanochko) no it\\'s the first variable i had defined (global scope). what i don\\'t understand even more is my code works on Free code camp console et codepen.io console but not here."
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "The error you\\'re encountering is due to the fact that s2 is undefined when you\\'re trying to access its length on line 21."
                    },
                    {
                        "username": "sujaltangde",
                        "content": "last test case 987 is like a main boss at end of game :)"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "GigaNiga"
                    },
                    {
                        "username": "lowerkinded",
                        "content": "Hint: It's not the `s[i]` that makes the sequence invalid -- it's the `appeared.index(s[i])`."
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "ok bro"
                    }
                ]
            },
            {
                "id": 2063045,
                "content": [
                    {
                        "username": "ledieuelephant",
                        "content": "My answer is logic for 407 case. But more than 800 tests are too much"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "same bro"
                    },
                    {
                        "username": "lovishbansal441",
                        "content": "dude what is this one testcase can u belive\\n\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCD\"\\n\\ndude why would anyone do a string of 31k letters. TF"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "bro my code just runs at O(n^2) and it still works"
                    },
                    {
                        "username": "sujitg0124",
                        "content": "Bro all 987 test case passed but Time limit exceeded. "
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "[@sujitg0124](/sujitg0124) class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        if(s.isEmpty()) return 0;\\n\\n        int ans = Integer.MIN_VALUE;\\n        int left = 0;\\n        int right = 0;\\n\\n        while(right < s.length()) {\\n            if(hasDuplicates(s.substring(left, right + 1))) {\\n                ans = Math.max(ans, s.substring(left, right).length());\\n                left++;\\n            }\\n            else {\\n                ans = Math.max(ans, s.substring(left, right + 1).length());\\n            }\\n\\n            right++;\\n        }\\n\\n        return ans;\\n    }\\n\\n    private boolean hasDuplicates(String s) {\\n        Set<Character> set = new HashSet<>();\\n\\n        for(int i = 0; i < s.length(); i++) {\\n            if(!set.add(s.charAt(i))) return true;\\n        }\\n\\n        return false;\\n    }\\n}\\n\\n\\nstill works"
                    },
                    {
                        "username": "sujitg0124",
                        "content": "[@DamianIvanochko](/DamianIvanochko) \\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        List<Character> hs=new ArrayList<>();\\n        int maxlength=0;\\n        int l=s.length();\\n        int initial=0;\\n        int end=0;\\n        while(end<l){\\n            if(!hs.contains(s.charAt(end))){\\n                hs.add((s.charAt(end)));\\n                maxlength=Math.max(maxlength,hs.size());\\n                end++;\\n            }\\n            else{\\n                hs.remove(Character.valueOf((s.charAt(initial))));\\n               initial++;\\n            }\\n        }\\n        return maxlength;\\n        }\\n    }\\n"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Donno, solved it in O(n^2)"
                    },
                    {
                        "username": "chrisyu0106",
                        "content": "I passed 986/987 testcases, and WTF is 987???"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "same problem"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "Input: s = \"pwwkew\"\\nOutput: 3\\nExplanation: The answer is \"wke\", with the length of 3.\\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\n can someone explain this? what does it mean. subsequence means string+string?"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Substring: \"abCDEf\", subsequence: \"aBcdEF\""
                    },
                    {
                        "username": "sivas5262",
                        "content": "import java.util.*;\\npublic class Main\\n{\\n\\tpublic static void main(String[] args) {\\n\\tScanner sc = new Scanner(System.in);\\n    String s = sc.nextLine();\\n    String dup =\"\";\\n    for(int i=0;i<s.length();i++){\\n        String str = Character.toString(s.charAt(i));\\n        if(!dup.contains(str)){\\n            dup=dup+s.charAt(i);\\n            }\\n        }\\n        System.out.print(dup.length());\\n\\t}\\n}"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "That\\'s gay, don\\'t post solutions here"
                    },
                    {
                        "username": "sivas5262",
                        "content": "import java.util.*;\npublic class Main\n{\n\tpublic static void main(String[] args) {\n\tScanner sc = new Scanner(System.in);\n    String s = sc.nextLine();\n    String dup =\"\";\n    for(int i=0;i<s.length();i++){\n        String str = Character.toString(s.charAt(i));\n        if(!dup.contains(str)){\n            dup=dup+s.charAt(i);\n            }\n        }\n        System.out.print(dup);\n\t}\n}\n\n\nthis is the simplest code"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "That\\'s gay, don\\'t post solutions here"
                    },
                    {
                        "username": "emmanuelouattara75",
                        "content": "hello here is my solution. i solved the 3 cases.\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n    let s2=s[0];\\n    let s1=\\'\\';\\n    for (let i=0; i<s.length; i++) {\\n      for (let j=0; j<s1.length; j++) {\\n      if (s1[j]==s[i]) {\\n        s1=s[i];\\n      }\\n    }\\n    if (s1!=s[i]) {\\n      s1+=s[i]\\n      if (s1.length>s2.length) {\\n        s2=s1\\n      }\\n    }\\n    }\\n   let s3 = s2.length;\\n    return s3;\\n};\\nbut it\\'s take the following error:\\nLine 21 in solution.js let s3 = s2.length; ^ TypeError: Cannot read properties of undefined (reading \\'length\\') Line 21: Char 16 in solution.js (lengthOfLongestSubstring) Line 33: Char 19 in solution.js (Object.<anonymous>) Line 16: Char 8 in runner.js (Object.runner) Line 24: Char 26 in solution.js (Object.<anonymous>) at Module._compile (node:internal/modules/cjs/loader:1101:14) at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10) at Module.load (node:internal/modules/cjs/loader:981:32) at Function.Module._load (node:internal/modules/cjs/loader:822:12) at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12) at node:internal/main/run_main_module:17:47"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "[@emmanuelouattara75](/emmanuelouattara75) donno"
                    },
                    {
                        "username": "emmanuelouattara75",
                        "content": "[@DamianIvanochko](/DamianIvanochko) no it\\'s the first variable i had defined (global scope). what i don\\'t understand even more is my code works on Free code camp console et codepen.io console but not here."
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "The error you\\'re encountering is due to the fact that s2 is undefined when you\\'re trying to access its length on line 21."
                    },
                    {
                        "username": "sujaltangde",
                        "content": "last test case 987 is like a main boss at end of game :)"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "GigaNiga"
                    },
                    {
                        "username": "lowerkinded",
                        "content": "Hint: It's not the `s[i]` that makes the sequence invalid -- it's the `appeared.index(s[i])`."
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "ok bro"
                    }
                ]
            },
            {
                "id": 2059793,
                "content": [
                    {
                        "username": "ledieuelephant",
                        "content": "My answer is logic for 407 case. But more than 800 tests are too much"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "same bro"
                    },
                    {
                        "username": "lovishbansal441",
                        "content": "dude what is this one testcase can u belive\\n\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCD\"\\n\\ndude why would anyone do a string of 31k letters. TF"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "bro my code just runs at O(n^2) and it still works"
                    },
                    {
                        "username": "sujitg0124",
                        "content": "Bro all 987 test case passed but Time limit exceeded. "
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "[@sujitg0124](/sujitg0124) class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        if(s.isEmpty()) return 0;\\n\\n        int ans = Integer.MIN_VALUE;\\n        int left = 0;\\n        int right = 0;\\n\\n        while(right < s.length()) {\\n            if(hasDuplicates(s.substring(left, right + 1))) {\\n                ans = Math.max(ans, s.substring(left, right).length());\\n                left++;\\n            }\\n            else {\\n                ans = Math.max(ans, s.substring(left, right + 1).length());\\n            }\\n\\n            right++;\\n        }\\n\\n        return ans;\\n    }\\n\\n    private boolean hasDuplicates(String s) {\\n        Set<Character> set = new HashSet<>();\\n\\n        for(int i = 0; i < s.length(); i++) {\\n            if(!set.add(s.charAt(i))) return true;\\n        }\\n\\n        return false;\\n    }\\n}\\n\\n\\nstill works"
                    },
                    {
                        "username": "sujitg0124",
                        "content": "[@DamianIvanochko](/DamianIvanochko) \\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        List<Character> hs=new ArrayList<>();\\n        int maxlength=0;\\n        int l=s.length();\\n        int initial=0;\\n        int end=0;\\n        while(end<l){\\n            if(!hs.contains(s.charAt(end))){\\n                hs.add((s.charAt(end)));\\n                maxlength=Math.max(maxlength,hs.size());\\n                end++;\\n            }\\n            else{\\n                hs.remove(Character.valueOf((s.charAt(initial))));\\n               initial++;\\n            }\\n        }\\n        return maxlength;\\n        }\\n    }\\n"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Donno, solved it in O(n^2)"
                    },
                    {
                        "username": "chrisyu0106",
                        "content": "I passed 986/987 testcases, and WTF is 987???"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "same problem"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "Input: s = \"pwwkew\"\\nOutput: 3\\nExplanation: The answer is \"wke\", with the length of 3.\\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\n can someone explain this? what does it mean. subsequence means string+string?"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Substring: \"abCDEf\", subsequence: \"aBcdEF\""
                    },
                    {
                        "username": "sivas5262",
                        "content": "import java.util.*;\\npublic class Main\\n{\\n\\tpublic static void main(String[] args) {\\n\\tScanner sc = new Scanner(System.in);\\n    String s = sc.nextLine();\\n    String dup =\"\";\\n    for(int i=0;i<s.length();i++){\\n        String str = Character.toString(s.charAt(i));\\n        if(!dup.contains(str)){\\n            dup=dup+s.charAt(i);\\n            }\\n        }\\n        System.out.print(dup.length());\\n\\t}\\n}"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "That\\'s gay, don\\'t post solutions here"
                    },
                    {
                        "username": "sivas5262",
                        "content": "import java.util.*;\npublic class Main\n{\n\tpublic static void main(String[] args) {\n\tScanner sc = new Scanner(System.in);\n    String s = sc.nextLine();\n    String dup =\"\";\n    for(int i=0;i<s.length();i++){\n        String str = Character.toString(s.charAt(i));\n        if(!dup.contains(str)){\n            dup=dup+s.charAt(i);\n            }\n        }\n        System.out.print(dup);\n\t}\n}\n\n\nthis is the simplest code"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "That\\'s gay, don\\'t post solutions here"
                    },
                    {
                        "username": "emmanuelouattara75",
                        "content": "hello here is my solution. i solved the 3 cases.\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n    let s2=s[0];\\n    let s1=\\'\\';\\n    for (let i=0; i<s.length; i++) {\\n      for (let j=0; j<s1.length; j++) {\\n      if (s1[j]==s[i]) {\\n        s1=s[i];\\n      }\\n    }\\n    if (s1!=s[i]) {\\n      s1+=s[i]\\n      if (s1.length>s2.length) {\\n        s2=s1\\n      }\\n    }\\n    }\\n   let s3 = s2.length;\\n    return s3;\\n};\\nbut it\\'s take the following error:\\nLine 21 in solution.js let s3 = s2.length; ^ TypeError: Cannot read properties of undefined (reading \\'length\\') Line 21: Char 16 in solution.js (lengthOfLongestSubstring) Line 33: Char 19 in solution.js (Object.<anonymous>) Line 16: Char 8 in runner.js (Object.runner) Line 24: Char 26 in solution.js (Object.<anonymous>) at Module._compile (node:internal/modules/cjs/loader:1101:14) at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10) at Module.load (node:internal/modules/cjs/loader:981:32) at Function.Module._load (node:internal/modules/cjs/loader:822:12) at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12) at node:internal/main/run_main_module:17:47"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "[@emmanuelouattara75](/emmanuelouattara75) donno"
                    },
                    {
                        "username": "emmanuelouattara75",
                        "content": "[@DamianIvanochko](/DamianIvanochko) no it\\'s the first variable i had defined (global scope). what i don\\'t understand even more is my code works on Free code camp console et codepen.io console but not here."
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "The error you\\'re encountering is due to the fact that s2 is undefined when you\\'re trying to access its length on line 21."
                    },
                    {
                        "username": "sujaltangde",
                        "content": "last test case 987 is like a main boss at end of game :)"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "GigaNiga"
                    },
                    {
                        "username": "lowerkinded",
                        "content": "Hint: It's not the `s[i]` that makes the sequence invalid -- it's the `appeared.index(s[i])`."
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "ok bro"
                    }
                ]
            },
            {
                "id": 2059741,
                "content": [
                    {
                        "username": "ledieuelephant",
                        "content": "My answer is logic for 407 case. But more than 800 tests are too much"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "same bro"
                    },
                    {
                        "username": "lovishbansal441",
                        "content": "dude what is this one testcase can u belive\\n\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCD\"\\n\\ndude why would anyone do a string of 31k letters. TF"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "bro my code just runs at O(n^2) and it still works"
                    },
                    {
                        "username": "sujitg0124",
                        "content": "Bro all 987 test case passed but Time limit exceeded. "
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "[@sujitg0124](/sujitg0124) class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        if(s.isEmpty()) return 0;\\n\\n        int ans = Integer.MIN_VALUE;\\n        int left = 0;\\n        int right = 0;\\n\\n        while(right < s.length()) {\\n            if(hasDuplicates(s.substring(left, right + 1))) {\\n                ans = Math.max(ans, s.substring(left, right).length());\\n                left++;\\n            }\\n            else {\\n                ans = Math.max(ans, s.substring(left, right + 1).length());\\n            }\\n\\n            right++;\\n        }\\n\\n        return ans;\\n    }\\n\\n    private boolean hasDuplicates(String s) {\\n        Set<Character> set = new HashSet<>();\\n\\n        for(int i = 0; i < s.length(); i++) {\\n            if(!set.add(s.charAt(i))) return true;\\n        }\\n\\n        return false;\\n    }\\n}\\n\\n\\nstill works"
                    },
                    {
                        "username": "sujitg0124",
                        "content": "[@DamianIvanochko](/DamianIvanochko) \\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        List<Character> hs=new ArrayList<>();\\n        int maxlength=0;\\n        int l=s.length();\\n        int initial=0;\\n        int end=0;\\n        while(end<l){\\n            if(!hs.contains(s.charAt(end))){\\n                hs.add((s.charAt(end)));\\n                maxlength=Math.max(maxlength,hs.size());\\n                end++;\\n            }\\n            else{\\n                hs.remove(Character.valueOf((s.charAt(initial))));\\n               initial++;\\n            }\\n        }\\n        return maxlength;\\n        }\\n    }\\n"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Donno, solved it in O(n^2)"
                    },
                    {
                        "username": "chrisyu0106",
                        "content": "I passed 986/987 testcases, and WTF is 987???"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "same problem"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "Input: s = \"pwwkew\"\\nOutput: 3\\nExplanation: The answer is \"wke\", with the length of 3.\\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\n can someone explain this? what does it mean. subsequence means string+string?"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Substring: \"abCDEf\", subsequence: \"aBcdEF\""
                    },
                    {
                        "username": "sivas5262",
                        "content": "import java.util.*;\\npublic class Main\\n{\\n\\tpublic static void main(String[] args) {\\n\\tScanner sc = new Scanner(System.in);\\n    String s = sc.nextLine();\\n    String dup =\"\";\\n    for(int i=0;i<s.length();i++){\\n        String str = Character.toString(s.charAt(i));\\n        if(!dup.contains(str)){\\n            dup=dup+s.charAt(i);\\n            }\\n        }\\n        System.out.print(dup.length());\\n\\t}\\n}"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "That\\'s gay, don\\'t post solutions here"
                    },
                    {
                        "username": "sivas5262",
                        "content": "import java.util.*;\npublic class Main\n{\n\tpublic static void main(String[] args) {\n\tScanner sc = new Scanner(System.in);\n    String s = sc.nextLine();\n    String dup =\"\";\n    for(int i=0;i<s.length();i++){\n        String str = Character.toString(s.charAt(i));\n        if(!dup.contains(str)){\n            dup=dup+s.charAt(i);\n            }\n        }\n        System.out.print(dup);\n\t}\n}\n\n\nthis is the simplest code"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "That\\'s gay, don\\'t post solutions here"
                    },
                    {
                        "username": "emmanuelouattara75",
                        "content": "hello here is my solution. i solved the 3 cases.\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n    let s2=s[0];\\n    let s1=\\'\\';\\n    for (let i=0; i<s.length; i++) {\\n      for (let j=0; j<s1.length; j++) {\\n      if (s1[j]==s[i]) {\\n        s1=s[i];\\n      }\\n    }\\n    if (s1!=s[i]) {\\n      s1+=s[i]\\n      if (s1.length>s2.length) {\\n        s2=s1\\n      }\\n    }\\n    }\\n   let s3 = s2.length;\\n    return s3;\\n};\\nbut it\\'s take the following error:\\nLine 21 in solution.js let s3 = s2.length; ^ TypeError: Cannot read properties of undefined (reading \\'length\\') Line 21: Char 16 in solution.js (lengthOfLongestSubstring) Line 33: Char 19 in solution.js (Object.<anonymous>) Line 16: Char 8 in runner.js (Object.runner) Line 24: Char 26 in solution.js (Object.<anonymous>) at Module._compile (node:internal/modules/cjs/loader:1101:14) at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10) at Module.load (node:internal/modules/cjs/loader:981:32) at Function.Module._load (node:internal/modules/cjs/loader:822:12) at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12) at node:internal/main/run_main_module:17:47"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "[@emmanuelouattara75](/emmanuelouattara75) donno"
                    },
                    {
                        "username": "emmanuelouattara75",
                        "content": "[@DamianIvanochko](/DamianIvanochko) no it\\'s the first variable i had defined (global scope). what i don\\'t understand even more is my code works on Free code camp console et codepen.io console but not here."
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "The error you\\'re encountering is due to the fact that s2 is undefined when you\\'re trying to access its length on line 21."
                    },
                    {
                        "username": "sujaltangde",
                        "content": "last test case 987 is like a main boss at end of game :)"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "GigaNiga"
                    },
                    {
                        "username": "lowerkinded",
                        "content": "Hint: It's not the `s[i]` that makes the sequence invalid -- it's the `appeared.index(s[i])`."
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "ok bro"
                    }
                ]
            },
            {
                "id": 2059192,
                "content": [
                    {
                        "username": "ledieuelephant",
                        "content": "My answer is logic for 407 case. But more than 800 tests are too much"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "same bro"
                    },
                    {
                        "username": "lovishbansal441",
                        "content": "dude what is this one testcase can u belive\\n\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCD\"\\n\\ndude why would anyone do a string of 31k letters. TF"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "bro my code just runs at O(n^2) and it still works"
                    },
                    {
                        "username": "sujitg0124",
                        "content": "Bro all 987 test case passed but Time limit exceeded. "
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "[@sujitg0124](/sujitg0124) class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        if(s.isEmpty()) return 0;\\n\\n        int ans = Integer.MIN_VALUE;\\n        int left = 0;\\n        int right = 0;\\n\\n        while(right < s.length()) {\\n            if(hasDuplicates(s.substring(left, right + 1))) {\\n                ans = Math.max(ans, s.substring(left, right).length());\\n                left++;\\n            }\\n            else {\\n                ans = Math.max(ans, s.substring(left, right + 1).length());\\n            }\\n\\n            right++;\\n        }\\n\\n        return ans;\\n    }\\n\\n    private boolean hasDuplicates(String s) {\\n        Set<Character> set = new HashSet<>();\\n\\n        for(int i = 0; i < s.length(); i++) {\\n            if(!set.add(s.charAt(i))) return true;\\n        }\\n\\n        return false;\\n    }\\n}\\n\\n\\nstill works"
                    },
                    {
                        "username": "sujitg0124",
                        "content": "[@DamianIvanochko](/DamianIvanochko) \\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        List<Character> hs=new ArrayList<>();\\n        int maxlength=0;\\n        int l=s.length();\\n        int initial=0;\\n        int end=0;\\n        while(end<l){\\n            if(!hs.contains(s.charAt(end))){\\n                hs.add((s.charAt(end)));\\n                maxlength=Math.max(maxlength,hs.size());\\n                end++;\\n            }\\n            else{\\n                hs.remove(Character.valueOf((s.charAt(initial))));\\n               initial++;\\n            }\\n        }\\n        return maxlength;\\n        }\\n    }\\n"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Donno, solved it in O(n^2)"
                    },
                    {
                        "username": "chrisyu0106",
                        "content": "I passed 986/987 testcases, and WTF is 987???"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "same problem"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "Input: s = \"pwwkew\"\\nOutput: 3\\nExplanation: The answer is \"wke\", with the length of 3.\\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\n can someone explain this? what does it mean. subsequence means string+string?"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Substring: \"abCDEf\", subsequence: \"aBcdEF\""
                    },
                    {
                        "username": "sivas5262",
                        "content": "import java.util.*;\\npublic class Main\\n{\\n\\tpublic static void main(String[] args) {\\n\\tScanner sc = new Scanner(System.in);\\n    String s = sc.nextLine();\\n    String dup =\"\";\\n    for(int i=0;i<s.length();i++){\\n        String str = Character.toString(s.charAt(i));\\n        if(!dup.contains(str)){\\n            dup=dup+s.charAt(i);\\n            }\\n        }\\n        System.out.print(dup.length());\\n\\t}\\n}"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "That\\'s gay, don\\'t post solutions here"
                    },
                    {
                        "username": "sivas5262",
                        "content": "import java.util.*;\npublic class Main\n{\n\tpublic static void main(String[] args) {\n\tScanner sc = new Scanner(System.in);\n    String s = sc.nextLine();\n    String dup =\"\";\n    for(int i=0;i<s.length();i++){\n        String str = Character.toString(s.charAt(i));\n        if(!dup.contains(str)){\n            dup=dup+s.charAt(i);\n            }\n        }\n        System.out.print(dup);\n\t}\n}\n\n\nthis is the simplest code"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "That\\'s gay, don\\'t post solutions here"
                    },
                    {
                        "username": "emmanuelouattara75",
                        "content": "hello here is my solution. i solved the 3 cases.\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n    let s2=s[0];\\n    let s1=\\'\\';\\n    for (let i=0; i<s.length; i++) {\\n      for (let j=0; j<s1.length; j++) {\\n      if (s1[j]==s[i]) {\\n        s1=s[i];\\n      }\\n    }\\n    if (s1!=s[i]) {\\n      s1+=s[i]\\n      if (s1.length>s2.length) {\\n        s2=s1\\n      }\\n    }\\n    }\\n   let s3 = s2.length;\\n    return s3;\\n};\\nbut it\\'s take the following error:\\nLine 21 in solution.js let s3 = s2.length; ^ TypeError: Cannot read properties of undefined (reading \\'length\\') Line 21: Char 16 in solution.js (lengthOfLongestSubstring) Line 33: Char 19 in solution.js (Object.<anonymous>) Line 16: Char 8 in runner.js (Object.runner) Line 24: Char 26 in solution.js (Object.<anonymous>) at Module._compile (node:internal/modules/cjs/loader:1101:14) at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10) at Module.load (node:internal/modules/cjs/loader:981:32) at Function.Module._load (node:internal/modules/cjs/loader:822:12) at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12) at node:internal/main/run_main_module:17:47"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "[@emmanuelouattara75](/emmanuelouattara75) donno"
                    },
                    {
                        "username": "emmanuelouattara75",
                        "content": "[@DamianIvanochko](/DamianIvanochko) no it\\'s the first variable i had defined (global scope). what i don\\'t understand even more is my code works on Free code camp console et codepen.io console but not here."
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "The error you\\'re encountering is due to the fact that s2 is undefined when you\\'re trying to access its length on line 21."
                    },
                    {
                        "username": "sujaltangde",
                        "content": "last test case 987 is like a main boss at end of game :)"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "GigaNiga"
                    },
                    {
                        "username": "lowerkinded",
                        "content": "Hint: It's not the `s[i]` that makes the sequence invalid -- it's the `appeared.index(s[i])`."
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "ok bro"
                    }
                ]
            },
            {
                "id": 2049912,
                "content": [
                    {
                        "username": "ledieuelephant",
                        "content": "My answer is logic for 407 case. But more than 800 tests are too much"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "same bro"
                    },
                    {
                        "username": "lovishbansal441",
                        "content": "dude what is this one testcase can u belive\\n\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCD\"\\n\\ndude why would anyone do a string of 31k letters. TF"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "bro my code just runs at O(n^2) and it still works"
                    },
                    {
                        "username": "sujitg0124",
                        "content": "Bro all 987 test case passed but Time limit exceeded. "
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "[@sujitg0124](/sujitg0124) class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        if(s.isEmpty()) return 0;\\n\\n        int ans = Integer.MIN_VALUE;\\n        int left = 0;\\n        int right = 0;\\n\\n        while(right < s.length()) {\\n            if(hasDuplicates(s.substring(left, right + 1))) {\\n                ans = Math.max(ans, s.substring(left, right).length());\\n                left++;\\n            }\\n            else {\\n                ans = Math.max(ans, s.substring(left, right + 1).length());\\n            }\\n\\n            right++;\\n        }\\n\\n        return ans;\\n    }\\n\\n    private boolean hasDuplicates(String s) {\\n        Set<Character> set = new HashSet<>();\\n\\n        for(int i = 0; i < s.length(); i++) {\\n            if(!set.add(s.charAt(i))) return true;\\n        }\\n\\n        return false;\\n    }\\n}\\n\\n\\nstill works"
                    },
                    {
                        "username": "sujitg0124",
                        "content": "[@DamianIvanochko](/DamianIvanochko) \\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        List<Character> hs=new ArrayList<>();\\n        int maxlength=0;\\n        int l=s.length();\\n        int initial=0;\\n        int end=0;\\n        while(end<l){\\n            if(!hs.contains(s.charAt(end))){\\n                hs.add((s.charAt(end)));\\n                maxlength=Math.max(maxlength,hs.size());\\n                end++;\\n            }\\n            else{\\n                hs.remove(Character.valueOf((s.charAt(initial))));\\n               initial++;\\n            }\\n        }\\n        return maxlength;\\n        }\\n    }\\n"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Donno, solved it in O(n^2)"
                    },
                    {
                        "username": "chrisyu0106",
                        "content": "I passed 986/987 testcases, and WTF is 987???"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "same problem"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "Input: s = \"pwwkew\"\\nOutput: 3\\nExplanation: The answer is \"wke\", with the length of 3.\\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\n can someone explain this? what does it mean. subsequence means string+string?"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Substring: \"abCDEf\", subsequence: \"aBcdEF\""
                    },
                    {
                        "username": "sivas5262",
                        "content": "import java.util.*;\\npublic class Main\\n{\\n\\tpublic static void main(String[] args) {\\n\\tScanner sc = new Scanner(System.in);\\n    String s = sc.nextLine();\\n    String dup =\"\";\\n    for(int i=0;i<s.length();i++){\\n        String str = Character.toString(s.charAt(i));\\n        if(!dup.contains(str)){\\n            dup=dup+s.charAt(i);\\n            }\\n        }\\n        System.out.print(dup.length());\\n\\t}\\n}"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "That\\'s gay, don\\'t post solutions here"
                    },
                    {
                        "username": "sivas5262",
                        "content": "import java.util.*;\npublic class Main\n{\n\tpublic static void main(String[] args) {\n\tScanner sc = new Scanner(System.in);\n    String s = sc.nextLine();\n    String dup =\"\";\n    for(int i=0;i<s.length();i++){\n        String str = Character.toString(s.charAt(i));\n        if(!dup.contains(str)){\n            dup=dup+s.charAt(i);\n            }\n        }\n        System.out.print(dup);\n\t}\n}\n\n\nthis is the simplest code"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "That\\'s gay, don\\'t post solutions here"
                    },
                    {
                        "username": "emmanuelouattara75",
                        "content": "hello here is my solution. i solved the 3 cases.\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n    let s2=s[0];\\n    let s1=\\'\\';\\n    for (let i=0; i<s.length; i++) {\\n      for (let j=0; j<s1.length; j++) {\\n      if (s1[j]==s[i]) {\\n        s1=s[i];\\n      }\\n    }\\n    if (s1!=s[i]) {\\n      s1+=s[i]\\n      if (s1.length>s2.length) {\\n        s2=s1\\n      }\\n    }\\n    }\\n   let s3 = s2.length;\\n    return s3;\\n};\\nbut it\\'s take the following error:\\nLine 21 in solution.js let s3 = s2.length; ^ TypeError: Cannot read properties of undefined (reading \\'length\\') Line 21: Char 16 in solution.js (lengthOfLongestSubstring) Line 33: Char 19 in solution.js (Object.<anonymous>) Line 16: Char 8 in runner.js (Object.runner) Line 24: Char 26 in solution.js (Object.<anonymous>) at Module._compile (node:internal/modules/cjs/loader:1101:14) at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10) at Module.load (node:internal/modules/cjs/loader:981:32) at Function.Module._load (node:internal/modules/cjs/loader:822:12) at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12) at node:internal/main/run_main_module:17:47"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "[@emmanuelouattara75](/emmanuelouattara75) donno"
                    },
                    {
                        "username": "emmanuelouattara75",
                        "content": "[@DamianIvanochko](/DamianIvanochko) no it\\'s the first variable i had defined (global scope). what i don\\'t understand even more is my code works on Free code camp console et codepen.io console but not here."
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "The error you\\'re encountering is due to the fact that s2 is undefined when you\\'re trying to access its length on line 21."
                    },
                    {
                        "username": "sujaltangde",
                        "content": "last test case 987 is like a main boss at end of game :)"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "GigaNiga"
                    },
                    {
                        "username": "lowerkinded",
                        "content": "Hint: It's not the `s[i]` that makes the sequence invalid -- it's the `appeared.index(s[i])`."
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "ok bro"
                    }
                ]
            },
            {
                "id": 2048941,
                "content": [
                    {
                        "username": "ledieuelephant",
                        "content": "My answer is logic for 407 case. But more than 800 tests are too much"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "same bro"
                    },
                    {
                        "username": "lovishbansal441",
                        "content": "dude what is this one testcase can u belive\\n\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\\\"#$%&\\'()*+,-./:;<=>?@[\\\\\\\\]^_`{|}~ abcdefghijklmnopqrstuvwxyzABCD\"\\n\\ndude why would anyone do a string of 31k letters. TF"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "bro my code just runs at O(n^2) and it still works"
                    },
                    {
                        "username": "sujitg0124",
                        "content": "Bro all 987 test case passed but Time limit exceeded. "
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "[@sujitg0124](/sujitg0124) class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        if(s.isEmpty()) return 0;\\n\\n        int ans = Integer.MIN_VALUE;\\n        int left = 0;\\n        int right = 0;\\n\\n        while(right < s.length()) {\\n            if(hasDuplicates(s.substring(left, right + 1))) {\\n                ans = Math.max(ans, s.substring(left, right).length());\\n                left++;\\n            }\\n            else {\\n                ans = Math.max(ans, s.substring(left, right + 1).length());\\n            }\\n\\n            right++;\\n        }\\n\\n        return ans;\\n    }\\n\\n    private boolean hasDuplicates(String s) {\\n        Set<Character> set = new HashSet<>();\\n\\n        for(int i = 0; i < s.length(); i++) {\\n            if(!set.add(s.charAt(i))) return true;\\n        }\\n\\n        return false;\\n    }\\n}\\n\\n\\nstill works"
                    },
                    {
                        "username": "sujitg0124",
                        "content": "[@DamianIvanochko](/DamianIvanochko) \\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        List<Character> hs=new ArrayList<>();\\n        int maxlength=0;\\n        int l=s.length();\\n        int initial=0;\\n        int end=0;\\n        while(end<l){\\n            if(!hs.contains(s.charAt(end))){\\n                hs.add((s.charAt(end)));\\n                maxlength=Math.max(maxlength,hs.size());\\n                end++;\\n            }\\n            else{\\n                hs.remove(Character.valueOf((s.charAt(initial))));\\n               initial++;\\n            }\\n        }\\n        return maxlength;\\n        }\\n    }\\n"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Donno, solved it in O(n^2)"
                    },
                    {
                        "username": "chrisyu0106",
                        "content": "I passed 986/987 testcases, and WTF is 987???"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "same problem"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "Input: s = \"pwwkew\"\\nOutput: 3\\nExplanation: The answer is \"wke\", with the length of 3.\\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\n can someone explain this? what does it mean. subsequence means string+string?"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Substring: \"abCDEf\", subsequence: \"aBcdEF\""
                    },
                    {
                        "username": "sivas5262",
                        "content": "import java.util.*;\\npublic class Main\\n{\\n\\tpublic static void main(String[] args) {\\n\\tScanner sc = new Scanner(System.in);\\n    String s = sc.nextLine();\\n    String dup =\"\";\\n    for(int i=0;i<s.length();i++){\\n        String str = Character.toString(s.charAt(i));\\n        if(!dup.contains(str)){\\n            dup=dup+s.charAt(i);\\n            }\\n        }\\n        System.out.print(dup.length());\\n\\t}\\n}"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "That\\'s gay, don\\'t post solutions here"
                    },
                    {
                        "username": "sivas5262",
                        "content": "import java.util.*;\npublic class Main\n{\n\tpublic static void main(String[] args) {\n\tScanner sc = new Scanner(System.in);\n    String s = sc.nextLine();\n    String dup =\"\";\n    for(int i=0;i<s.length();i++){\n        String str = Character.toString(s.charAt(i));\n        if(!dup.contains(str)){\n            dup=dup+s.charAt(i);\n            }\n        }\n        System.out.print(dup);\n\t}\n}\n\n\nthis is the simplest code"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "That\\'s gay, don\\'t post solutions here"
                    },
                    {
                        "username": "emmanuelouattara75",
                        "content": "hello here is my solution. i solved the 3 cases.\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n    let s2=s[0];\\n    let s1=\\'\\';\\n    for (let i=0; i<s.length; i++) {\\n      for (let j=0; j<s1.length; j++) {\\n      if (s1[j]==s[i]) {\\n        s1=s[i];\\n      }\\n    }\\n    if (s1!=s[i]) {\\n      s1+=s[i]\\n      if (s1.length>s2.length) {\\n        s2=s1\\n      }\\n    }\\n    }\\n   let s3 = s2.length;\\n    return s3;\\n};\\nbut it\\'s take the following error:\\nLine 21 in solution.js let s3 = s2.length; ^ TypeError: Cannot read properties of undefined (reading \\'length\\') Line 21: Char 16 in solution.js (lengthOfLongestSubstring) Line 33: Char 19 in solution.js (Object.<anonymous>) Line 16: Char 8 in runner.js (Object.runner) Line 24: Char 26 in solution.js (Object.<anonymous>) at Module._compile (node:internal/modules/cjs/loader:1101:14) at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10) at Module.load (node:internal/modules/cjs/loader:981:32) at Function.Module._load (node:internal/modules/cjs/loader:822:12) at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12) at node:internal/main/run_main_module:17:47"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "[@emmanuelouattara75](/emmanuelouattara75) donno"
                    },
                    {
                        "username": "emmanuelouattara75",
                        "content": "[@DamianIvanochko](/DamianIvanochko) no it\\'s the first variable i had defined (global scope). what i don\\'t understand even more is my code works on Free code camp console et codepen.io console but not here."
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "The error you\\'re encountering is due to the fact that s2 is undefined when you\\'re trying to access its length on line 21."
                    },
                    {
                        "username": "sujaltangde",
                        "content": "last test case 987 is like a main boss at end of game :)"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "GigaNiga"
                    },
                    {
                        "username": "lowerkinded",
                        "content": "Hint: It's not the `s[i]` that makes the sequence invalid -- it's the `appeared.index(s[i])`."
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "ok bro"
                    }
                ]
            },
            {
                "id": 2043365,
                "content": [
                    {
                        "username": "sonicflame21",
                        "content": "I am a bit confused by the third example, it said to print out the number of individual characters without repeating and it should be four as there is p w k and e, so why is there an expected of 3?"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "yes"
                    },
                    {
                        "username": "VladoBradi",
                        "content": "At first I had the same question, but then I got advice to read the tasks that are being asked for. The task asks for a substring, consecutive characters in the string, \\'pwke\\' are not consecutive and it is a subsequence. In this task, a substring is required and it is \\'wke\\' or \\'kew\\', but it is definitely 3. I hope that I helped you a little ;)"
                    },
                    {
                        "username": "artemilin-2023",
                        "content": "986 / 987 testcases passed T_T"
                    },
                    {
                        "username": "dmitriimi",
                        "content": "Test: 986\\nMe: O_o"
                    },
                    {
                        "username": "Hariharan98",
                        "content": "I spent plenty of time trying to solve this using DP. I wrote recursive optimal sub structure relations for Longest Substring. I wrote a recurrence relation to update the hash map from the previous ones as well. In spite of all my efforts whatever recurrence relations I wrote kept failing some tests. The two pointer approach is quite intuitive and solves the problem. Does this problem not have optimal sub structure? Is it possible to solve it using DP?"
                    },
                    {
                        "username": "janis__",
                        "content": "This problem does exhibit optimal substructure, but the challenge lies in defining the right state transitions for dynamic programming. While the two-pointer (sliding window) approach is more intuitive and efficient for this problem, it\\'s theoretically possible to use DP, but it\\'s more complex and might not offer any advantages over the sliding window approach in terms of clarity or efficiency."
                    },
                    {
                        "username": "drashti1118",
                        "content": "Hi\\n\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n    if(s==\"\") return 0\\n    let ans = []\\n    let str = \"\"\\n    for(let i = 0 ; i < s.length; i++) {\\n      \\tstr = \"\"\\n    \\tfor(let j = i;j < s.length;j++){\\n          \\tif(!str.includes(s[j])) {\\n             \\tstr += s[j]\\n              \\tans.push(str)\\n            } else {\\n              \\tbreak;\\n            }\\n        \\tif(s[j] === s[j+1]) {\\n              \\tbreak;\\n            }         \\n        }\\n    }\\n    return Math.max(...(ans.map(ele => ele.length)))\\n};\\n\\nThis is the solution in JavaScript. I am able to run this in VS code and it works for every test cases but when I submit on leetcode, I am getting the error : terminate called after throwing an instance of \\'std::bad_alloc\\'cwhat():  std::bad_alloc\\n\\nCould anyone please tell me what\\'s wrong ?"
                    },
                    {
                        "username": "janis__",
                        "content": "The error message you\\'re seeing (std::bad_alloc) is related to C++ memory allocation, which is unusual for a JavaScript solution. It\\'s possible that your solution is consuming too much memory for certain test cases, causing LeetCode\\'s backend to throw this error. To fix this, consider optimizing your solution to use less memory, such as by avoiding storing all substrings in the ans array and instead just keeping track of the maximum length found so far."
                    },
                    {
                        "username": "gagarinrout",
                        "content": "Some Testcases to try before submission - \\n\"jbpnbwwd\"\\n\"anviaj\"\\n\\n"
                    },
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://thecscience.com/leetcode-longest-substring-without-repeating-characters-problem-solution.html](https://thecscience.com/leetcode-longest-substring-without-repeating-characters-problem-solution.html)"
                    },
                    {
                        "username": "COdeGun007",
                        "content": "Fast Java | JavaScript | C++ | Python Solution\\nhttps://leetcode.com/problems/4sum/discuss/1968315/Fast-Java-or-JavaScript-or-C%2B%2B-or-Python-Solution"
                    },
                    {
                        "username": "poonamsharma29",
                        "content": "dont see anything there, Am I doing anything wrong?"
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/longest-substring-without-repeating-characters-leetcode-solutions/\\n"
                    },
                    {
                        "username": "guptaparth25",
                        "content": "We know that the length of the longest substring can be 256 (because of the pigeonhole principle). Hence we can generate all the substrings of length 1, 2, 3, ... 256, which will be n+ (n-1) + .... (n-255) substrings which is O(256n). Also, checking a substring to contain unique characters will take O(256). Hence the overall time complexity is O(256 X 256 X n) = O(n)?"
                    },
                    {
                        "username": "vasyl_pupok",
                        "content": "we can make it even more optimized by getting quantity of all different characters which is just O(n). This also helps optimize edge cases such as \"aaaaaaa\" and string with all different characters. However, it's still don't work(\n\nUPD: I realized, that checking all different chars is O(NlogN)"
                    }
                ]
            },
            {
                "id": 2034547,
                "content": [
                    {
                        "username": "sonicflame21",
                        "content": "I am a bit confused by the third example, it said to print out the number of individual characters without repeating and it should be four as there is p w k and e, so why is there an expected of 3?"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "yes"
                    },
                    {
                        "username": "VladoBradi",
                        "content": "At first I had the same question, but then I got advice to read the tasks that are being asked for. The task asks for a substring, consecutive characters in the string, \\'pwke\\' are not consecutive and it is a subsequence. In this task, a substring is required and it is \\'wke\\' or \\'kew\\', but it is definitely 3. I hope that I helped you a little ;)"
                    },
                    {
                        "username": "artemilin-2023",
                        "content": "986 / 987 testcases passed T_T"
                    },
                    {
                        "username": "dmitriimi",
                        "content": "Test: 986\\nMe: O_o"
                    },
                    {
                        "username": "Hariharan98",
                        "content": "I spent plenty of time trying to solve this using DP. I wrote recursive optimal sub structure relations for Longest Substring. I wrote a recurrence relation to update the hash map from the previous ones as well. In spite of all my efforts whatever recurrence relations I wrote kept failing some tests. The two pointer approach is quite intuitive and solves the problem. Does this problem not have optimal sub structure? Is it possible to solve it using DP?"
                    },
                    {
                        "username": "janis__",
                        "content": "This problem does exhibit optimal substructure, but the challenge lies in defining the right state transitions for dynamic programming. While the two-pointer (sliding window) approach is more intuitive and efficient for this problem, it\\'s theoretically possible to use DP, but it\\'s more complex and might not offer any advantages over the sliding window approach in terms of clarity or efficiency."
                    },
                    {
                        "username": "drashti1118",
                        "content": "Hi\\n\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n    if(s==\"\") return 0\\n    let ans = []\\n    let str = \"\"\\n    for(let i = 0 ; i < s.length; i++) {\\n      \\tstr = \"\"\\n    \\tfor(let j = i;j < s.length;j++){\\n          \\tif(!str.includes(s[j])) {\\n             \\tstr += s[j]\\n              \\tans.push(str)\\n            } else {\\n              \\tbreak;\\n            }\\n        \\tif(s[j] === s[j+1]) {\\n              \\tbreak;\\n            }         \\n        }\\n    }\\n    return Math.max(...(ans.map(ele => ele.length)))\\n};\\n\\nThis is the solution in JavaScript. I am able to run this in VS code and it works for every test cases but when I submit on leetcode, I am getting the error : terminate called after throwing an instance of \\'std::bad_alloc\\'cwhat():  std::bad_alloc\\n\\nCould anyone please tell me what\\'s wrong ?"
                    },
                    {
                        "username": "janis__",
                        "content": "The error message you\\'re seeing (std::bad_alloc) is related to C++ memory allocation, which is unusual for a JavaScript solution. It\\'s possible that your solution is consuming too much memory for certain test cases, causing LeetCode\\'s backend to throw this error. To fix this, consider optimizing your solution to use less memory, such as by avoiding storing all substrings in the ans array and instead just keeping track of the maximum length found so far."
                    },
                    {
                        "username": "gagarinrout",
                        "content": "Some Testcases to try before submission - \\n\"jbpnbwwd\"\\n\"anviaj\"\\n\\n"
                    },
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://thecscience.com/leetcode-longest-substring-without-repeating-characters-problem-solution.html](https://thecscience.com/leetcode-longest-substring-without-repeating-characters-problem-solution.html)"
                    },
                    {
                        "username": "COdeGun007",
                        "content": "Fast Java | JavaScript | C++ | Python Solution\\nhttps://leetcode.com/problems/4sum/discuss/1968315/Fast-Java-or-JavaScript-or-C%2B%2B-or-Python-Solution"
                    },
                    {
                        "username": "poonamsharma29",
                        "content": "dont see anything there, Am I doing anything wrong?"
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/longest-substring-without-repeating-characters-leetcode-solutions/\\n"
                    },
                    {
                        "username": "guptaparth25",
                        "content": "We know that the length of the longest substring can be 256 (because of the pigeonhole principle). Hence we can generate all the substrings of length 1, 2, 3, ... 256, which will be n+ (n-1) + .... (n-255) substrings which is O(256n). Also, checking a substring to contain unique characters will take O(256). Hence the overall time complexity is O(256 X 256 X n) = O(n)?"
                    },
                    {
                        "username": "vasyl_pupok",
                        "content": "we can make it even more optimized by getting quantity of all different characters which is just O(n). This also helps optimize edge cases such as \"aaaaaaa\" and string with all different characters. However, it's still don't work(\n\nUPD: I realized, that checking all different chars is O(NlogN)"
                    }
                ]
            },
            {
                "id": 2017818,
                "content": [
                    {
                        "username": "sonicflame21",
                        "content": "I am a bit confused by the third example, it said to print out the number of individual characters without repeating and it should be four as there is p w k and e, so why is there an expected of 3?"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "yes"
                    },
                    {
                        "username": "VladoBradi",
                        "content": "At first I had the same question, but then I got advice to read the tasks that are being asked for. The task asks for a substring, consecutive characters in the string, \\'pwke\\' are not consecutive and it is a subsequence. In this task, a substring is required and it is \\'wke\\' or \\'kew\\', but it is definitely 3. I hope that I helped you a little ;)"
                    },
                    {
                        "username": "artemilin-2023",
                        "content": "986 / 987 testcases passed T_T"
                    },
                    {
                        "username": "dmitriimi",
                        "content": "Test: 986\\nMe: O_o"
                    },
                    {
                        "username": "Hariharan98",
                        "content": "I spent plenty of time trying to solve this using DP. I wrote recursive optimal sub structure relations for Longest Substring. I wrote a recurrence relation to update the hash map from the previous ones as well. In spite of all my efforts whatever recurrence relations I wrote kept failing some tests. The two pointer approach is quite intuitive and solves the problem. Does this problem not have optimal sub structure? Is it possible to solve it using DP?"
                    },
                    {
                        "username": "janis__",
                        "content": "This problem does exhibit optimal substructure, but the challenge lies in defining the right state transitions for dynamic programming. While the two-pointer (sliding window) approach is more intuitive and efficient for this problem, it\\'s theoretically possible to use DP, but it\\'s more complex and might not offer any advantages over the sliding window approach in terms of clarity or efficiency."
                    },
                    {
                        "username": "drashti1118",
                        "content": "Hi\\n\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n    if(s==\"\") return 0\\n    let ans = []\\n    let str = \"\"\\n    for(let i = 0 ; i < s.length; i++) {\\n      \\tstr = \"\"\\n    \\tfor(let j = i;j < s.length;j++){\\n          \\tif(!str.includes(s[j])) {\\n             \\tstr += s[j]\\n              \\tans.push(str)\\n            } else {\\n              \\tbreak;\\n            }\\n        \\tif(s[j] === s[j+1]) {\\n              \\tbreak;\\n            }         \\n        }\\n    }\\n    return Math.max(...(ans.map(ele => ele.length)))\\n};\\n\\nThis is the solution in JavaScript. I am able to run this in VS code and it works for every test cases but when I submit on leetcode, I am getting the error : terminate called after throwing an instance of \\'std::bad_alloc\\'cwhat():  std::bad_alloc\\n\\nCould anyone please tell me what\\'s wrong ?"
                    },
                    {
                        "username": "janis__",
                        "content": "The error message you\\'re seeing (std::bad_alloc) is related to C++ memory allocation, which is unusual for a JavaScript solution. It\\'s possible that your solution is consuming too much memory for certain test cases, causing LeetCode\\'s backend to throw this error. To fix this, consider optimizing your solution to use less memory, such as by avoiding storing all substrings in the ans array and instead just keeping track of the maximum length found so far."
                    },
                    {
                        "username": "gagarinrout",
                        "content": "Some Testcases to try before submission - \\n\"jbpnbwwd\"\\n\"anviaj\"\\n\\n"
                    },
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://thecscience.com/leetcode-longest-substring-without-repeating-characters-problem-solution.html](https://thecscience.com/leetcode-longest-substring-without-repeating-characters-problem-solution.html)"
                    },
                    {
                        "username": "COdeGun007",
                        "content": "Fast Java | JavaScript | C++ | Python Solution\\nhttps://leetcode.com/problems/4sum/discuss/1968315/Fast-Java-or-JavaScript-or-C%2B%2B-or-Python-Solution"
                    },
                    {
                        "username": "poonamsharma29",
                        "content": "dont see anything there, Am I doing anything wrong?"
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/longest-substring-without-repeating-characters-leetcode-solutions/\\n"
                    },
                    {
                        "username": "guptaparth25",
                        "content": "We know that the length of the longest substring can be 256 (because of the pigeonhole principle). Hence we can generate all the substrings of length 1, 2, 3, ... 256, which will be n+ (n-1) + .... (n-255) substrings which is O(256n). Also, checking a substring to contain unique characters will take O(256). Hence the overall time complexity is O(256 X 256 X n) = O(n)?"
                    },
                    {
                        "username": "vasyl_pupok",
                        "content": "we can make it even more optimized by getting quantity of all different characters which is just O(n). This also helps optimize edge cases such as \"aaaaaaa\" and string with all different characters. However, it's still don't work(\n\nUPD: I realized, that checking all different chars is O(NlogN)"
                    }
                ]
            },
            {
                "id": 2004407,
                "content": [
                    {
                        "username": "sonicflame21",
                        "content": "I am a bit confused by the third example, it said to print out the number of individual characters without repeating and it should be four as there is p w k and e, so why is there an expected of 3?"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "yes"
                    },
                    {
                        "username": "VladoBradi",
                        "content": "At first I had the same question, but then I got advice to read the tasks that are being asked for. The task asks for a substring, consecutive characters in the string, \\'pwke\\' are not consecutive and it is a subsequence. In this task, a substring is required and it is \\'wke\\' or \\'kew\\', but it is definitely 3. I hope that I helped you a little ;)"
                    },
                    {
                        "username": "artemilin-2023",
                        "content": "986 / 987 testcases passed T_T"
                    },
                    {
                        "username": "dmitriimi",
                        "content": "Test: 986\\nMe: O_o"
                    },
                    {
                        "username": "Hariharan98",
                        "content": "I spent plenty of time trying to solve this using DP. I wrote recursive optimal sub structure relations for Longest Substring. I wrote a recurrence relation to update the hash map from the previous ones as well. In spite of all my efforts whatever recurrence relations I wrote kept failing some tests. The two pointer approach is quite intuitive and solves the problem. Does this problem not have optimal sub structure? Is it possible to solve it using DP?"
                    },
                    {
                        "username": "janis__",
                        "content": "This problem does exhibit optimal substructure, but the challenge lies in defining the right state transitions for dynamic programming. While the two-pointer (sliding window) approach is more intuitive and efficient for this problem, it\\'s theoretically possible to use DP, but it\\'s more complex and might not offer any advantages over the sliding window approach in terms of clarity or efficiency."
                    },
                    {
                        "username": "drashti1118",
                        "content": "Hi\\n\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n    if(s==\"\") return 0\\n    let ans = []\\n    let str = \"\"\\n    for(let i = 0 ; i < s.length; i++) {\\n      \\tstr = \"\"\\n    \\tfor(let j = i;j < s.length;j++){\\n          \\tif(!str.includes(s[j])) {\\n             \\tstr += s[j]\\n              \\tans.push(str)\\n            } else {\\n              \\tbreak;\\n            }\\n        \\tif(s[j] === s[j+1]) {\\n              \\tbreak;\\n            }         \\n        }\\n    }\\n    return Math.max(...(ans.map(ele => ele.length)))\\n};\\n\\nThis is the solution in JavaScript. I am able to run this in VS code and it works for every test cases but when I submit on leetcode, I am getting the error : terminate called after throwing an instance of \\'std::bad_alloc\\'cwhat():  std::bad_alloc\\n\\nCould anyone please tell me what\\'s wrong ?"
                    },
                    {
                        "username": "janis__",
                        "content": "The error message you\\'re seeing (std::bad_alloc) is related to C++ memory allocation, which is unusual for a JavaScript solution. It\\'s possible that your solution is consuming too much memory for certain test cases, causing LeetCode\\'s backend to throw this error. To fix this, consider optimizing your solution to use less memory, such as by avoiding storing all substrings in the ans array and instead just keeping track of the maximum length found so far."
                    },
                    {
                        "username": "gagarinrout",
                        "content": "Some Testcases to try before submission - \\n\"jbpnbwwd\"\\n\"anviaj\"\\n\\n"
                    },
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://thecscience.com/leetcode-longest-substring-without-repeating-characters-problem-solution.html](https://thecscience.com/leetcode-longest-substring-without-repeating-characters-problem-solution.html)"
                    },
                    {
                        "username": "COdeGun007",
                        "content": "Fast Java | JavaScript | C++ | Python Solution\\nhttps://leetcode.com/problems/4sum/discuss/1968315/Fast-Java-or-JavaScript-or-C%2B%2B-or-Python-Solution"
                    },
                    {
                        "username": "poonamsharma29",
                        "content": "dont see anything there, Am I doing anything wrong?"
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/longest-substring-without-repeating-characters-leetcode-solutions/\\n"
                    },
                    {
                        "username": "guptaparth25",
                        "content": "We know that the length of the longest substring can be 256 (because of the pigeonhole principle). Hence we can generate all the substrings of length 1, 2, 3, ... 256, which will be n+ (n-1) + .... (n-255) substrings which is O(256n). Also, checking a substring to contain unique characters will take O(256). Hence the overall time complexity is O(256 X 256 X n) = O(n)?"
                    },
                    {
                        "username": "vasyl_pupok",
                        "content": "we can make it even more optimized by getting quantity of all different characters which is just O(n). This also helps optimize edge cases such as \"aaaaaaa\" and string with all different characters. However, it's still don't work(\n\nUPD: I realized, that checking all different chars is O(NlogN)"
                    }
                ]
            },
            {
                "id": 1999277,
                "content": [
                    {
                        "username": "sonicflame21",
                        "content": "I am a bit confused by the third example, it said to print out the number of individual characters without repeating and it should be four as there is p w k and e, so why is there an expected of 3?"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "yes"
                    },
                    {
                        "username": "VladoBradi",
                        "content": "At first I had the same question, but then I got advice to read the tasks that are being asked for. The task asks for a substring, consecutive characters in the string, \\'pwke\\' are not consecutive and it is a subsequence. In this task, a substring is required and it is \\'wke\\' or \\'kew\\', but it is definitely 3. I hope that I helped you a little ;)"
                    },
                    {
                        "username": "artemilin-2023",
                        "content": "986 / 987 testcases passed T_T"
                    },
                    {
                        "username": "dmitriimi",
                        "content": "Test: 986\\nMe: O_o"
                    },
                    {
                        "username": "Hariharan98",
                        "content": "I spent plenty of time trying to solve this using DP. I wrote recursive optimal sub structure relations for Longest Substring. I wrote a recurrence relation to update the hash map from the previous ones as well. In spite of all my efforts whatever recurrence relations I wrote kept failing some tests. The two pointer approach is quite intuitive and solves the problem. Does this problem not have optimal sub structure? Is it possible to solve it using DP?"
                    },
                    {
                        "username": "janis__",
                        "content": "This problem does exhibit optimal substructure, but the challenge lies in defining the right state transitions for dynamic programming. While the two-pointer (sliding window) approach is more intuitive and efficient for this problem, it\\'s theoretically possible to use DP, but it\\'s more complex and might not offer any advantages over the sliding window approach in terms of clarity or efficiency."
                    },
                    {
                        "username": "drashti1118",
                        "content": "Hi\\n\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n    if(s==\"\") return 0\\n    let ans = []\\n    let str = \"\"\\n    for(let i = 0 ; i < s.length; i++) {\\n      \\tstr = \"\"\\n    \\tfor(let j = i;j < s.length;j++){\\n          \\tif(!str.includes(s[j])) {\\n             \\tstr += s[j]\\n              \\tans.push(str)\\n            } else {\\n              \\tbreak;\\n            }\\n        \\tif(s[j] === s[j+1]) {\\n              \\tbreak;\\n            }         \\n        }\\n    }\\n    return Math.max(...(ans.map(ele => ele.length)))\\n};\\n\\nThis is the solution in JavaScript. I am able to run this in VS code and it works for every test cases but when I submit on leetcode, I am getting the error : terminate called after throwing an instance of \\'std::bad_alloc\\'cwhat():  std::bad_alloc\\n\\nCould anyone please tell me what\\'s wrong ?"
                    },
                    {
                        "username": "janis__",
                        "content": "The error message you\\'re seeing (std::bad_alloc) is related to C++ memory allocation, which is unusual for a JavaScript solution. It\\'s possible that your solution is consuming too much memory for certain test cases, causing LeetCode\\'s backend to throw this error. To fix this, consider optimizing your solution to use less memory, such as by avoiding storing all substrings in the ans array and instead just keeping track of the maximum length found so far."
                    },
                    {
                        "username": "gagarinrout",
                        "content": "Some Testcases to try before submission - \\n\"jbpnbwwd\"\\n\"anviaj\"\\n\\n"
                    },
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://thecscience.com/leetcode-longest-substring-without-repeating-characters-problem-solution.html](https://thecscience.com/leetcode-longest-substring-without-repeating-characters-problem-solution.html)"
                    },
                    {
                        "username": "COdeGun007",
                        "content": "Fast Java | JavaScript | C++ | Python Solution\\nhttps://leetcode.com/problems/4sum/discuss/1968315/Fast-Java-or-JavaScript-or-C%2B%2B-or-Python-Solution"
                    },
                    {
                        "username": "poonamsharma29",
                        "content": "dont see anything there, Am I doing anything wrong?"
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/longest-substring-without-repeating-characters-leetcode-solutions/\\n"
                    },
                    {
                        "username": "guptaparth25",
                        "content": "We know that the length of the longest substring can be 256 (because of the pigeonhole principle). Hence we can generate all the substrings of length 1, 2, 3, ... 256, which will be n+ (n-1) + .... (n-255) substrings which is O(256n). Also, checking a substring to contain unique characters will take O(256). Hence the overall time complexity is O(256 X 256 X n) = O(n)?"
                    },
                    {
                        "username": "vasyl_pupok",
                        "content": "we can make it even more optimized by getting quantity of all different characters which is just O(n). This also helps optimize edge cases such as \"aaaaaaa\" and string with all different characters. However, it's still don't work(\n\nUPD: I realized, that checking all different chars is O(NlogN)"
                    }
                ]
            },
            {
                "id": 1947150,
                "content": [
                    {
                        "username": "sonicflame21",
                        "content": "I am a bit confused by the third example, it said to print out the number of individual characters without repeating and it should be four as there is p w k and e, so why is there an expected of 3?"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "yes"
                    },
                    {
                        "username": "VladoBradi",
                        "content": "At first I had the same question, but then I got advice to read the tasks that are being asked for. The task asks for a substring, consecutive characters in the string, \\'pwke\\' are not consecutive and it is a subsequence. In this task, a substring is required and it is \\'wke\\' or \\'kew\\', but it is definitely 3. I hope that I helped you a little ;)"
                    },
                    {
                        "username": "artemilin-2023",
                        "content": "986 / 987 testcases passed T_T"
                    },
                    {
                        "username": "dmitriimi",
                        "content": "Test: 986\\nMe: O_o"
                    },
                    {
                        "username": "Hariharan98",
                        "content": "I spent plenty of time trying to solve this using DP. I wrote recursive optimal sub structure relations for Longest Substring. I wrote a recurrence relation to update the hash map from the previous ones as well. In spite of all my efforts whatever recurrence relations I wrote kept failing some tests. The two pointer approach is quite intuitive and solves the problem. Does this problem not have optimal sub structure? Is it possible to solve it using DP?"
                    },
                    {
                        "username": "janis__",
                        "content": "This problem does exhibit optimal substructure, but the challenge lies in defining the right state transitions for dynamic programming. While the two-pointer (sliding window) approach is more intuitive and efficient for this problem, it\\'s theoretically possible to use DP, but it\\'s more complex and might not offer any advantages over the sliding window approach in terms of clarity or efficiency."
                    },
                    {
                        "username": "drashti1118",
                        "content": "Hi\\n\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n    if(s==\"\") return 0\\n    let ans = []\\n    let str = \"\"\\n    for(let i = 0 ; i < s.length; i++) {\\n      \\tstr = \"\"\\n    \\tfor(let j = i;j < s.length;j++){\\n          \\tif(!str.includes(s[j])) {\\n             \\tstr += s[j]\\n              \\tans.push(str)\\n            } else {\\n              \\tbreak;\\n            }\\n        \\tif(s[j] === s[j+1]) {\\n              \\tbreak;\\n            }         \\n        }\\n    }\\n    return Math.max(...(ans.map(ele => ele.length)))\\n};\\n\\nThis is the solution in JavaScript. I am able to run this in VS code and it works for every test cases but when I submit on leetcode, I am getting the error : terminate called after throwing an instance of \\'std::bad_alloc\\'cwhat():  std::bad_alloc\\n\\nCould anyone please tell me what\\'s wrong ?"
                    },
                    {
                        "username": "janis__",
                        "content": "The error message you\\'re seeing (std::bad_alloc) is related to C++ memory allocation, which is unusual for a JavaScript solution. It\\'s possible that your solution is consuming too much memory for certain test cases, causing LeetCode\\'s backend to throw this error. To fix this, consider optimizing your solution to use less memory, such as by avoiding storing all substrings in the ans array and instead just keeping track of the maximum length found so far."
                    },
                    {
                        "username": "gagarinrout",
                        "content": "Some Testcases to try before submission - \\n\"jbpnbwwd\"\\n\"anviaj\"\\n\\n"
                    },
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://thecscience.com/leetcode-longest-substring-without-repeating-characters-problem-solution.html](https://thecscience.com/leetcode-longest-substring-without-repeating-characters-problem-solution.html)"
                    },
                    {
                        "username": "COdeGun007",
                        "content": "Fast Java | JavaScript | C++ | Python Solution\\nhttps://leetcode.com/problems/4sum/discuss/1968315/Fast-Java-or-JavaScript-or-C%2B%2B-or-Python-Solution"
                    },
                    {
                        "username": "poonamsharma29",
                        "content": "dont see anything there, Am I doing anything wrong?"
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/longest-substring-without-repeating-characters-leetcode-solutions/\\n"
                    },
                    {
                        "username": "guptaparth25",
                        "content": "We know that the length of the longest substring can be 256 (because of the pigeonhole principle). Hence we can generate all the substrings of length 1, 2, 3, ... 256, which will be n+ (n-1) + .... (n-255) substrings which is O(256n). Also, checking a substring to contain unique characters will take O(256). Hence the overall time complexity is O(256 X 256 X n) = O(n)?"
                    },
                    {
                        "username": "vasyl_pupok",
                        "content": "we can make it even more optimized by getting quantity of all different characters which is just O(n). This also helps optimize edge cases such as \"aaaaaaa\" and string with all different characters. However, it's still don't work(\n\nUPD: I realized, that checking all different chars is O(NlogN)"
                    }
                ]
            },
            {
                "id": 1735615,
                "content": [
                    {
                        "username": "sonicflame21",
                        "content": "I am a bit confused by the third example, it said to print out the number of individual characters without repeating and it should be four as there is p w k and e, so why is there an expected of 3?"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "yes"
                    },
                    {
                        "username": "VladoBradi",
                        "content": "At first I had the same question, but then I got advice to read the tasks that are being asked for. The task asks for a substring, consecutive characters in the string, \\'pwke\\' are not consecutive and it is a subsequence. In this task, a substring is required and it is \\'wke\\' or \\'kew\\', but it is definitely 3. I hope that I helped you a little ;)"
                    },
                    {
                        "username": "artemilin-2023",
                        "content": "986 / 987 testcases passed T_T"
                    },
                    {
                        "username": "dmitriimi",
                        "content": "Test: 986\\nMe: O_o"
                    },
                    {
                        "username": "Hariharan98",
                        "content": "I spent plenty of time trying to solve this using DP. I wrote recursive optimal sub structure relations for Longest Substring. I wrote a recurrence relation to update the hash map from the previous ones as well. In spite of all my efforts whatever recurrence relations I wrote kept failing some tests. The two pointer approach is quite intuitive and solves the problem. Does this problem not have optimal sub structure? Is it possible to solve it using DP?"
                    },
                    {
                        "username": "janis__",
                        "content": "This problem does exhibit optimal substructure, but the challenge lies in defining the right state transitions for dynamic programming. While the two-pointer (sliding window) approach is more intuitive and efficient for this problem, it\\'s theoretically possible to use DP, but it\\'s more complex and might not offer any advantages over the sliding window approach in terms of clarity or efficiency."
                    },
                    {
                        "username": "drashti1118",
                        "content": "Hi\\n\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n    if(s==\"\") return 0\\n    let ans = []\\n    let str = \"\"\\n    for(let i = 0 ; i < s.length; i++) {\\n      \\tstr = \"\"\\n    \\tfor(let j = i;j < s.length;j++){\\n          \\tif(!str.includes(s[j])) {\\n             \\tstr += s[j]\\n              \\tans.push(str)\\n            } else {\\n              \\tbreak;\\n            }\\n        \\tif(s[j] === s[j+1]) {\\n              \\tbreak;\\n            }         \\n        }\\n    }\\n    return Math.max(...(ans.map(ele => ele.length)))\\n};\\n\\nThis is the solution in JavaScript. I am able to run this in VS code and it works for every test cases but when I submit on leetcode, I am getting the error : terminate called after throwing an instance of \\'std::bad_alloc\\'cwhat():  std::bad_alloc\\n\\nCould anyone please tell me what\\'s wrong ?"
                    },
                    {
                        "username": "janis__",
                        "content": "The error message you\\'re seeing (std::bad_alloc) is related to C++ memory allocation, which is unusual for a JavaScript solution. It\\'s possible that your solution is consuming too much memory for certain test cases, causing LeetCode\\'s backend to throw this error. To fix this, consider optimizing your solution to use less memory, such as by avoiding storing all substrings in the ans array and instead just keeping track of the maximum length found so far."
                    },
                    {
                        "username": "gagarinrout",
                        "content": "Some Testcases to try before submission - \\n\"jbpnbwwd\"\\n\"anviaj\"\\n\\n"
                    },
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://thecscience.com/leetcode-longest-substring-without-repeating-characters-problem-solution.html](https://thecscience.com/leetcode-longest-substring-without-repeating-characters-problem-solution.html)"
                    },
                    {
                        "username": "COdeGun007",
                        "content": "Fast Java | JavaScript | C++ | Python Solution\\nhttps://leetcode.com/problems/4sum/discuss/1968315/Fast-Java-or-JavaScript-or-C%2B%2B-or-Python-Solution"
                    },
                    {
                        "username": "poonamsharma29",
                        "content": "dont see anything there, Am I doing anything wrong?"
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/longest-substring-without-repeating-characters-leetcode-solutions/\\n"
                    },
                    {
                        "username": "guptaparth25",
                        "content": "We know that the length of the longest substring can be 256 (because of the pigeonhole principle). Hence we can generate all the substrings of length 1, 2, 3, ... 256, which will be n+ (n-1) + .... (n-255) substrings which is O(256n). Also, checking a substring to contain unique characters will take O(256). Hence the overall time complexity is O(256 X 256 X n) = O(n)?"
                    },
                    {
                        "username": "vasyl_pupok",
                        "content": "we can make it even more optimized by getting quantity of all different characters which is just O(n). This also helps optimize edge cases such as \"aaaaaaa\" and string with all different characters. However, it's still don't work(\n\nUPD: I realized, that checking all different chars is O(NlogN)"
                    }
                ]
            },
            {
                "id": 1576651,
                "content": [
                    {
                        "username": "sonicflame21",
                        "content": "I am a bit confused by the third example, it said to print out the number of individual characters without repeating and it should be four as there is p w k and e, so why is there an expected of 3?"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "yes"
                    },
                    {
                        "username": "VladoBradi",
                        "content": "At first I had the same question, but then I got advice to read the tasks that are being asked for. The task asks for a substring, consecutive characters in the string, \\'pwke\\' are not consecutive and it is a subsequence. In this task, a substring is required and it is \\'wke\\' or \\'kew\\', but it is definitely 3. I hope that I helped you a little ;)"
                    },
                    {
                        "username": "artemilin-2023",
                        "content": "986 / 987 testcases passed T_T"
                    },
                    {
                        "username": "dmitriimi",
                        "content": "Test: 986\\nMe: O_o"
                    },
                    {
                        "username": "Hariharan98",
                        "content": "I spent plenty of time trying to solve this using DP. I wrote recursive optimal sub structure relations for Longest Substring. I wrote a recurrence relation to update the hash map from the previous ones as well. In spite of all my efforts whatever recurrence relations I wrote kept failing some tests. The two pointer approach is quite intuitive and solves the problem. Does this problem not have optimal sub structure? Is it possible to solve it using DP?"
                    },
                    {
                        "username": "janis__",
                        "content": "This problem does exhibit optimal substructure, but the challenge lies in defining the right state transitions for dynamic programming. While the two-pointer (sliding window) approach is more intuitive and efficient for this problem, it\\'s theoretically possible to use DP, but it\\'s more complex and might not offer any advantages over the sliding window approach in terms of clarity or efficiency."
                    },
                    {
                        "username": "drashti1118",
                        "content": "Hi\\n\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n    if(s==\"\") return 0\\n    let ans = []\\n    let str = \"\"\\n    for(let i = 0 ; i < s.length; i++) {\\n      \\tstr = \"\"\\n    \\tfor(let j = i;j < s.length;j++){\\n          \\tif(!str.includes(s[j])) {\\n             \\tstr += s[j]\\n              \\tans.push(str)\\n            } else {\\n              \\tbreak;\\n            }\\n        \\tif(s[j] === s[j+1]) {\\n              \\tbreak;\\n            }         \\n        }\\n    }\\n    return Math.max(...(ans.map(ele => ele.length)))\\n};\\n\\nThis is the solution in JavaScript. I am able to run this in VS code and it works for every test cases but when I submit on leetcode, I am getting the error : terminate called after throwing an instance of \\'std::bad_alloc\\'cwhat():  std::bad_alloc\\n\\nCould anyone please tell me what\\'s wrong ?"
                    },
                    {
                        "username": "janis__",
                        "content": "The error message you\\'re seeing (std::bad_alloc) is related to C++ memory allocation, which is unusual for a JavaScript solution. It\\'s possible that your solution is consuming too much memory for certain test cases, causing LeetCode\\'s backend to throw this error. To fix this, consider optimizing your solution to use less memory, such as by avoiding storing all substrings in the ans array and instead just keeping track of the maximum length found so far."
                    },
                    {
                        "username": "gagarinrout",
                        "content": "Some Testcases to try before submission - \\n\"jbpnbwwd\"\\n\"anviaj\"\\n\\n"
                    },
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://thecscience.com/leetcode-longest-substring-without-repeating-characters-problem-solution.html](https://thecscience.com/leetcode-longest-substring-without-repeating-characters-problem-solution.html)"
                    },
                    {
                        "username": "COdeGun007",
                        "content": "Fast Java | JavaScript | C++ | Python Solution\\nhttps://leetcode.com/problems/4sum/discuss/1968315/Fast-Java-or-JavaScript-or-C%2B%2B-or-Python-Solution"
                    },
                    {
                        "username": "poonamsharma29",
                        "content": "dont see anything there, Am I doing anything wrong?"
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/longest-substring-without-repeating-characters-leetcode-solutions/\\n"
                    },
                    {
                        "username": "guptaparth25",
                        "content": "We know that the length of the longest substring can be 256 (because of the pigeonhole principle). Hence we can generate all the substrings of length 1, 2, 3, ... 256, which will be n+ (n-1) + .... (n-255) substrings which is O(256n). Also, checking a substring to contain unique characters will take O(256). Hence the overall time complexity is O(256 X 256 X n) = O(n)?"
                    },
                    {
                        "username": "vasyl_pupok",
                        "content": "we can make it even more optimized by getting quantity of all different characters which is just O(n). This also helps optimize edge cases such as \"aaaaaaa\" and string with all different characters. However, it's still don't work(\n\nUPD: I realized, that checking all different chars is O(NlogN)"
                    }
                ]
            },
            {
                "id": 1576560,
                "content": [
                    {
                        "username": "sonicflame21",
                        "content": "I am a bit confused by the third example, it said to print out the number of individual characters without repeating and it should be four as there is p w k and e, so why is there an expected of 3?"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "yes"
                    },
                    {
                        "username": "VladoBradi",
                        "content": "At first I had the same question, but then I got advice to read the tasks that are being asked for. The task asks for a substring, consecutive characters in the string, \\'pwke\\' are not consecutive and it is a subsequence. In this task, a substring is required and it is \\'wke\\' or \\'kew\\', but it is definitely 3. I hope that I helped you a little ;)"
                    },
                    {
                        "username": "artemilin-2023",
                        "content": "986 / 987 testcases passed T_T"
                    },
                    {
                        "username": "dmitriimi",
                        "content": "Test: 986\\nMe: O_o"
                    },
                    {
                        "username": "Hariharan98",
                        "content": "I spent plenty of time trying to solve this using DP. I wrote recursive optimal sub structure relations for Longest Substring. I wrote a recurrence relation to update the hash map from the previous ones as well. In spite of all my efforts whatever recurrence relations I wrote kept failing some tests. The two pointer approach is quite intuitive and solves the problem. Does this problem not have optimal sub structure? Is it possible to solve it using DP?"
                    },
                    {
                        "username": "janis__",
                        "content": "This problem does exhibit optimal substructure, but the challenge lies in defining the right state transitions for dynamic programming. While the two-pointer (sliding window) approach is more intuitive and efficient for this problem, it\\'s theoretically possible to use DP, but it\\'s more complex and might not offer any advantages over the sliding window approach in terms of clarity or efficiency."
                    },
                    {
                        "username": "drashti1118",
                        "content": "Hi\\n\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n    if(s==\"\") return 0\\n    let ans = []\\n    let str = \"\"\\n    for(let i = 0 ; i < s.length; i++) {\\n      \\tstr = \"\"\\n    \\tfor(let j = i;j < s.length;j++){\\n          \\tif(!str.includes(s[j])) {\\n             \\tstr += s[j]\\n              \\tans.push(str)\\n            } else {\\n              \\tbreak;\\n            }\\n        \\tif(s[j] === s[j+1]) {\\n              \\tbreak;\\n            }         \\n        }\\n    }\\n    return Math.max(...(ans.map(ele => ele.length)))\\n};\\n\\nThis is the solution in JavaScript. I am able to run this in VS code and it works for every test cases but when I submit on leetcode, I am getting the error : terminate called after throwing an instance of \\'std::bad_alloc\\'cwhat():  std::bad_alloc\\n\\nCould anyone please tell me what\\'s wrong ?"
                    },
                    {
                        "username": "janis__",
                        "content": "The error message you\\'re seeing (std::bad_alloc) is related to C++ memory allocation, which is unusual for a JavaScript solution. It\\'s possible that your solution is consuming too much memory for certain test cases, causing LeetCode\\'s backend to throw this error. To fix this, consider optimizing your solution to use less memory, such as by avoiding storing all substrings in the ans array and instead just keeping track of the maximum length found so far."
                    },
                    {
                        "username": "gagarinrout",
                        "content": "Some Testcases to try before submission - \\n\"jbpnbwwd\"\\n\"anviaj\"\\n\\n"
                    },
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://thecscience.com/leetcode-longest-substring-without-repeating-characters-problem-solution.html](https://thecscience.com/leetcode-longest-substring-without-repeating-characters-problem-solution.html)"
                    },
                    {
                        "username": "COdeGun007",
                        "content": "Fast Java | JavaScript | C++ | Python Solution\\nhttps://leetcode.com/problems/4sum/discuss/1968315/Fast-Java-or-JavaScript-or-C%2B%2B-or-Python-Solution"
                    },
                    {
                        "username": "poonamsharma29",
                        "content": "dont see anything there, Am I doing anything wrong?"
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/longest-substring-without-repeating-characters-leetcode-solutions/\\n"
                    },
                    {
                        "username": "guptaparth25",
                        "content": "We know that the length of the longest substring can be 256 (because of the pigeonhole principle). Hence we can generate all the substrings of length 1, 2, 3, ... 256, which will be n+ (n-1) + .... (n-255) substrings which is O(256n). Also, checking a substring to contain unique characters will take O(256). Hence the overall time complexity is O(256 X 256 X n) = O(n)?"
                    },
                    {
                        "username": "vasyl_pupok",
                        "content": "we can make it even more optimized by getting quantity of all different characters which is just O(n). This also helps optimize edge cases such as \"aaaaaaa\" and string with all different characters. However, it's still don't work(\n\nUPD: I realized, that checking all different chars is O(NlogN)"
                    }
                ]
            },
            {
                "id": 1575650,
                "content": [
                    {
                        "username": "sonicflame21",
                        "content": "I am a bit confused by the third example, it said to print out the number of individual characters without repeating and it should be four as there is p w k and e, so why is there an expected of 3?"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "yes"
                    },
                    {
                        "username": "VladoBradi",
                        "content": "At first I had the same question, but then I got advice to read the tasks that are being asked for. The task asks for a substring, consecutive characters in the string, \\'pwke\\' are not consecutive and it is a subsequence. In this task, a substring is required and it is \\'wke\\' or \\'kew\\', but it is definitely 3. I hope that I helped you a little ;)"
                    },
                    {
                        "username": "artemilin-2023",
                        "content": "986 / 987 testcases passed T_T"
                    },
                    {
                        "username": "dmitriimi",
                        "content": "Test: 986\\nMe: O_o"
                    },
                    {
                        "username": "Hariharan98",
                        "content": "I spent plenty of time trying to solve this using DP. I wrote recursive optimal sub structure relations for Longest Substring. I wrote a recurrence relation to update the hash map from the previous ones as well. In spite of all my efforts whatever recurrence relations I wrote kept failing some tests. The two pointer approach is quite intuitive and solves the problem. Does this problem not have optimal sub structure? Is it possible to solve it using DP?"
                    },
                    {
                        "username": "janis__",
                        "content": "This problem does exhibit optimal substructure, but the challenge lies in defining the right state transitions for dynamic programming. While the two-pointer (sliding window) approach is more intuitive and efficient for this problem, it\\'s theoretically possible to use DP, but it\\'s more complex and might not offer any advantages over the sliding window approach in terms of clarity or efficiency."
                    },
                    {
                        "username": "drashti1118",
                        "content": "Hi\\n\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n    if(s==\"\") return 0\\n    let ans = []\\n    let str = \"\"\\n    for(let i = 0 ; i < s.length; i++) {\\n      \\tstr = \"\"\\n    \\tfor(let j = i;j < s.length;j++){\\n          \\tif(!str.includes(s[j])) {\\n             \\tstr += s[j]\\n              \\tans.push(str)\\n            } else {\\n              \\tbreak;\\n            }\\n        \\tif(s[j] === s[j+1]) {\\n              \\tbreak;\\n            }         \\n        }\\n    }\\n    return Math.max(...(ans.map(ele => ele.length)))\\n};\\n\\nThis is the solution in JavaScript. I am able to run this in VS code and it works for every test cases but when I submit on leetcode, I am getting the error : terminate called after throwing an instance of \\'std::bad_alloc\\'cwhat():  std::bad_alloc\\n\\nCould anyone please tell me what\\'s wrong ?"
                    },
                    {
                        "username": "janis__",
                        "content": "The error message you\\'re seeing (std::bad_alloc) is related to C++ memory allocation, which is unusual for a JavaScript solution. It\\'s possible that your solution is consuming too much memory for certain test cases, causing LeetCode\\'s backend to throw this error. To fix this, consider optimizing your solution to use less memory, such as by avoiding storing all substrings in the ans array and instead just keeping track of the maximum length found so far."
                    },
                    {
                        "username": "gagarinrout",
                        "content": "Some Testcases to try before submission - \\n\"jbpnbwwd\"\\n\"anviaj\"\\n\\n"
                    },
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://thecscience.com/leetcode-longest-substring-without-repeating-characters-problem-solution.html](https://thecscience.com/leetcode-longest-substring-without-repeating-characters-problem-solution.html)"
                    },
                    {
                        "username": "COdeGun007",
                        "content": "Fast Java | JavaScript | C++ | Python Solution\\nhttps://leetcode.com/problems/4sum/discuss/1968315/Fast-Java-or-JavaScript-or-C%2B%2B-or-Python-Solution"
                    },
                    {
                        "username": "poonamsharma29",
                        "content": "dont see anything there, Am I doing anything wrong?"
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/longest-substring-without-repeating-characters-leetcode-solutions/\\n"
                    },
                    {
                        "username": "guptaparth25",
                        "content": "We know that the length of the longest substring can be 256 (because of the pigeonhole principle). Hence we can generate all the substrings of length 1, 2, 3, ... 256, which will be n+ (n-1) + .... (n-255) substrings which is O(256n). Also, checking a substring to contain unique characters will take O(256). Hence the overall time complexity is O(256 X 256 X n) = O(n)?"
                    },
                    {
                        "username": "vasyl_pupok",
                        "content": "we can make it even more optimized by getting quantity of all different characters which is just O(n). This also helps optimize edge cases such as \"aaaaaaa\" and string with all different characters. However, it's still don't work(\n\nUPD: I realized, that checking all different chars is O(NlogN)"
                    }
                ]
            },
            {
                "id": 1574274,
                "content": [
                    {
                        "username": "saebalam123",
                        "content": "output length is 3 .but when i am printing set it is showing less elements. Any Help ??"
                    },
                    {
                        "username": "SahilBhola",
                        "content": "![image](https://assets.leetcode.com/users/sahilbhola/image_1567177262.png)\\n"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "i think as per question it starts to check from the beginning of the string and give the longest substring if it finds several substring having repeated longest value i think it prioritize the first found longest substring "
                    },
                    {
                        "username": "malabikas",
                        "content": "- why is OJ giving the answer as 3 and rejecting my solution?"
                    },
                    {
                        "username": "kevincai79",
                        "content": "my solution would not pass a test case which input is \\'dvdf\\' and expected output is 3, shouldn\\'t output to be 2? anybody can explain?\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "For the string \\'dvdf\\', the longest substring without repeating characters is \\'vdf\\', which has a length of 3. If your solution outputs 2, it might be considering \\'dv\\' or \\'vd\\', but it\\'s missing the longer valid substring \\'vdf\\'."
                    },
                    {
                        "username": "charlie_1212",
                        "content": "[@weisinger](/weisinger) That is not an explanation."
                    },
                    {
                        "username": "weisinger",
                        "content": "vdf is the solution"
                    },
                    {
                        "username": "byhoung",
                        "content": "Why is \"anviaj\" expected 5? Shouldn\\'t it be 4? \"anvi\""
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "cause \"nviaj\" is the longest one so "
                    },
                    {
                        "username": "user9739tx",
                        "content": "nviaj"
                    },
                    {
                        "username": "wlxzhg",
                        "content": "Does input only contain English characters?"
                    },
                    {
                        "username": "sagar4374",
                        "content": "If the input is \"anviaj\", shouldn't the output be 4 i.e. \"anvi\"?? LeetCode is expecting 5. Am I missing something here?"
                    },
                    {
                        "username": "NaveenLeetcodeSWE",
                        "content": "yes, it should be \"nviaj\" i.e 5"
                    },
                    {
                        "username": "wangxingyuq1230",
                        "content": "I met the issue in this problem, There is the issue report\\n\\nSubmission Result: Wrong Answer More Details \\n\\nInput:\\n\"dvdf\"\\nOutput:\\n2\\nExpected:\\n3\\nStdout:\\n5\\n\\nFrom what I perspective, when Input is dvdf output should be 2.I don't know why it should be 3"
                    },
                    {
                        "username": "Vithesh",
                        "content": "length of vdf is 3 bruhhhh. that is the longest substring."
                    },
                    {
                        "username": "et13713",
                        "content": "vdf is the longest unique string?"
                    },
                    {
                        "username": "xieyx2012",
                        "content": "Input: \"pwwkew\"\\n\\nOutput: 4\\n\\nExpected: 3"
                    },
                    {
                        "username": "zhao.chen.758",
                        "content": "The question might be a bit weird for most modern language users but here is how I practically put it. How do you C programmers tackle those questions that require hash set/map? Anyone have a good suggestion on quick/lightweighted approach on building hash structures in C?"
                    },
                    {
                        "username": "janis__",
                        "content": "I understand the challenge, as C doesn\\'t have built-in hash set/map structures like modern languages. When I need a hash set/map in C, I often use an array for simple cases, especially when the key space is limited. For more complex scenarios, I\\'d implement a basic hash table using linked lists to handle collisions. There are also libraries, like the uthash library, which provide hash table functionalities in C and can be easily integrated into projects."
                    }
                ]
            },
            {
                "id": 1572972,
                "content": [
                    {
                        "username": "saebalam123",
                        "content": "output length is 3 .but when i am printing set it is showing less elements. Any Help ??"
                    },
                    {
                        "username": "SahilBhola",
                        "content": "![image](https://assets.leetcode.com/users/sahilbhola/image_1567177262.png)\\n"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "i think as per question it starts to check from the beginning of the string and give the longest substring if it finds several substring having repeated longest value i think it prioritize the first found longest substring "
                    },
                    {
                        "username": "malabikas",
                        "content": "- why is OJ giving the answer as 3 and rejecting my solution?"
                    },
                    {
                        "username": "kevincai79",
                        "content": "my solution would not pass a test case which input is \\'dvdf\\' and expected output is 3, shouldn\\'t output to be 2? anybody can explain?\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "For the string \\'dvdf\\', the longest substring without repeating characters is \\'vdf\\', which has a length of 3. If your solution outputs 2, it might be considering \\'dv\\' or \\'vd\\', but it\\'s missing the longer valid substring \\'vdf\\'."
                    },
                    {
                        "username": "charlie_1212",
                        "content": "[@weisinger](/weisinger) That is not an explanation."
                    },
                    {
                        "username": "weisinger",
                        "content": "vdf is the solution"
                    },
                    {
                        "username": "byhoung",
                        "content": "Why is \"anviaj\" expected 5? Shouldn\\'t it be 4? \"anvi\""
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "cause \"nviaj\" is the longest one so "
                    },
                    {
                        "username": "user9739tx",
                        "content": "nviaj"
                    },
                    {
                        "username": "wlxzhg",
                        "content": "Does input only contain English characters?"
                    },
                    {
                        "username": "sagar4374",
                        "content": "If the input is \"anviaj\", shouldn't the output be 4 i.e. \"anvi\"?? LeetCode is expecting 5. Am I missing something here?"
                    },
                    {
                        "username": "NaveenLeetcodeSWE",
                        "content": "yes, it should be \"nviaj\" i.e 5"
                    },
                    {
                        "username": "wangxingyuq1230",
                        "content": "I met the issue in this problem, There is the issue report\\n\\nSubmission Result: Wrong Answer More Details \\n\\nInput:\\n\"dvdf\"\\nOutput:\\n2\\nExpected:\\n3\\nStdout:\\n5\\n\\nFrom what I perspective, when Input is dvdf output should be 2.I don't know why it should be 3"
                    },
                    {
                        "username": "Vithesh",
                        "content": "length of vdf is 3 bruhhhh. that is the longest substring."
                    },
                    {
                        "username": "et13713",
                        "content": "vdf is the longest unique string?"
                    },
                    {
                        "username": "xieyx2012",
                        "content": "Input: \"pwwkew\"\\n\\nOutput: 4\\n\\nExpected: 3"
                    },
                    {
                        "username": "zhao.chen.758",
                        "content": "The question might be a bit weird for most modern language users but here is how I practically put it. How do you C programmers tackle those questions that require hash set/map? Anyone have a good suggestion on quick/lightweighted approach on building hash structures in C?"
                    },
                    {
                        "username": "janis__",
                        "content": "I understand the challenge, as C doesn\\'t have built-in hash set/map structures like modern languages. When I need a hash set/map in C, I often use an array for simple cases, especially when the key space is limited. For more complex scenarios, I\\'d implement a basic hash table using linked lists to handle collisions. There are also libraries, like the uthash library, which provide hash table functionalities in C and can be easily integrated into projects."
                    }
                ]
            },
            {
                "id": 1572587,
                "content": [
                    {
                        "username": "saebalam123",
                        "content": "output length is 3 .but when i am printing set it is showing less elements. Any Help ??"
                    },
                    {
                        "username": "SahilBhola",
                        "content": "![image](https://assets.leetcode.com/users/sahilbhola/image_1567177262.png)\\n"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "i think as per question it starts to check from the beginning of the string and give the longest substring if it finds several substring having repeated longest value i think it prioritize the first found longest substring "
                    },
                    {
                        "username": "malabikas",
                        "content": "- why is OJ giving the answer as 3 and rejecting my solution?"
                    },
                    {
                        "username": "kevincai79",
                        "content": "my solution would not pass a test case which input is \\'dvdf\\' and expected output is 3, shouldn\\'t output to be 2? anybody can explain?\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "For the string \\'dvdf\\', the longest substring without repeating characters is \\'vdf\\', which has a length of 3. If your solution outputs 2, it might be considering \\'dv\\' or \\'vd\\', but it\\'s missing the longer valid substring \\'vdf\\'."
                    },
                    {
                        "username": "charlie_1212",
                        "content": "[@weisinger](/weisinger) That is not an explanation."
                    },
                    {
                        "username": "weisinger",
                        "content": "vdf is the solution"
                    },
                    {
                        "username": "byhoung",
                        "content": "Why is \"anviaj\" expected 5? Shouldn\\'t it be 4? \"anvi\""
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "cause \"nviaj\" is the longest one so "
                    },
                    {
                        "username": "user9739tx",
                        "content": "nviaj"
                    },
                    {
                        "username": "wlxzhg",
                        "content": "Does input only contain English characters?"
                    },
                    {
                        "username": "sagar4374",
                        "content": "If the input is \"anviaj\", shouldn't the output be 4 i.e. \"anvi\"?? LeetCode is expecting 5. Am I missing something here?"
                    },
                    {
                        "username": "NaveenLeetcodeSWE",
                        "content": "yes, it should be \"nviaj\" i.e 5"
                    },
                    {
                        "username": "wangxingyuq1230",
                        "content": "I met the issue in this problem, There is the issue report\\n\\nSubmission Result: Wrong Answer More Details \\n\\nInput:\\n\"dvdf\"\\nOutput:\\n2\\nExpected:\\n3\\nStdout:\\n5\\n\\nFrom what I perspective, when Input is dvdf output should be 2.I don't know why it should be 3"
                    },
                    {
                        "username": "Vithesh",
                        "content": "length of vdf is 3 bruhhhh. that is the longest substring."
                    },
                    {
                        "username": "et13713",
                        "content": "vdf is the longest unique string?"
                    },
                    {
                        "username": "xieyx2012",
                        "content": "Input: \"pwwkew\"\\n\\nOutput: 4\\n\\nExpected: 3"
                    },
                    {
                        "username": "zhao.chen.758",
                        "content": "The question might be a bit weird for most modern language users but here is how I practically put it. How do you C programmers tackle those questions that require hash set/map? Anyone have a good suggestion on quick/lightweighted approach on building hash structures in C?"
                    },
                    {
                        "username": "janis__",
                        "content": "I understand the challenge, as C doesn\\'t have built-in hash set/map structures like modern languages. When I need a hash set/map in C, I often use an array for simple cases, especially when the key space is limited. For more complex scenarios, I\\'d implement a basic hash table using linked lists to handle collisions. There are also libraries, like the uthash library, which provide hash table functionalities in C and can be easily integrated into projects."
                    }
                ]
            },
            {
                "id": 1571970,
                "content": [
                    {
                        "username": "saebalam123",
                        "content": "output length is 3 .but when i am printing set it is showing less elements. Any Help ??"
                    },
                    {
                        "username": "SahilBhola",
                        "content": "![image](https://assets.leetcode.com/users/sahilbhola/image_1567177262.png)\\n"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "i think as per question it starts to check from the beginning of the string and give the longest substring if it finds several substring having repeated longest value i think it prioritize the first found longest substring "
                    },
                    {
                        "username": "malabikas",
                        "content": "- why is OJ giving the answer as 3 and rejecting my solution?"
                    },
                    {
                        "username": "kevincai79",
                        "content": "my solution would not pass a test case which input is \\'dvdf\\' and expected output is 3, shouldn\\'t output to be 2? anybody can explain?\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "For the string \\'dvdf\\', the longest substring without repeating characters is \\'vdf\\', which has a length of 3. If your solution outputs 2, it might be considering \\'dv\\' or \\'vd\\', but it\\'s missing the longer valid substring \\'vdf\\'."
                    },
                    {
                        "username": "charlie_1212",
                        "content": "[@weisinger](/weisinger) That is not an explanation."
                    },
                    {
                        "username": "weisinger",
                        "content": "vdf is the solution"
                    },
                    {
                        "username": "byhoung",
                        "content": "Why is \"anviaj\" expected 5? Shouldn\\'t it be 4? \"anvi\""
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "cause \"nviaj\" is the longest one so "
                    },
                    {
                        "username": "user9739tx",
                        "content": "nviaj"
                    },
                    {
                        "username": "wlxzhg",
                        "content": "Does input only contain English characters?"
                    },
                    {
                        "username": "sagar4374",
                        "content": "If the input is \"anviaj\", shouldn't the output be 4 i.e. \"anvi\"?? LeetCode is expecting 5. Am I missing something here?"
                    },
                    {
                        "username": "NaveenLeetcodeSWE",
                        "content": "yes, it should be \"nviaj\" i.e 5"
                    },
                    {
                        "username": "wangxingyuq1230",
                        "content": "I met the issue in this problem, There is the issue report\\n\\nSubmission Result: Wrong Answer More Details \\n\\nInput:\\n\"dvdf\"\\nOutput:\\n2\\nExpected:\\n3\\nStdout:\\n5\\n\\nFrom what I perspective, when Input is dvdf output should be 2.I don't know why it should be 3"
                    },
                    {
                        "username": "Vithesh",
                        "content": "length of vdf is 3 bruhhhh. that is the longest substring."
                    },
                    {
                        "username": "et13713",
                        "content": "vdf is the longest unique string?"
                    },
                    {
                        "username": "xieyx2012",
                        "content": "Input: \"pwwkew\"\\n\\nOutput: 4\\n\\nExpected: 3"
                    },
                    {
                        "username": "zhao.chen.758",
                        "content": "The question might be a bit weird for most modern language users but here is how I practically put it. How do you C programmers tackle those questions that require hash set/map? Anyone have a good suggestion on quick/lightweighted approach on building hash structures in C?"
                    },
                    {
                        "username": "janis__",
                        "content": "I understand the challenge, as C doesn\\'t have built-in hash set/map structures like modern languages. When I need a hash set/map in C, I often use an array for simple cases, especially when the key space is limited. For more complex scenarios, I\\'d implement a basic hash table using linked lists to handle collisions. There are also libraries, like the uthash library, which provide hash table functionalities in C and can be easily integrated into projects."
                    }
                ]
            },
            {
                "id": 1571896,
                "content": [
                    {
                        "username": "saebalam123",
                        "content": "output length is 3 .but when i am printing set it is showing less elements. Any Help ??"
                    },
                    {
                        "username": "SahilBhola",
                        "content": "![image](https://assets.leetcode.com/users/sahilbhola/image_1567177262.png)\\n"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "i think as per question it starts to check from the beginning of the string and give the longest substring if it finds several substring having repeated longest value i think it prioritize the first found longest substring "
                    },
                    {
                        "username": "malabikas",
                        "content": "- why is OJ giving the answer as 3 and rejecting my solution?"
                    },
                    {
                        "username": "kevincai79",
                        "content": "my solution would not pass a test case which input is \\'dvdf\\' and expected output is 3, shouldn\\'t output to be 2? anybody can explain?\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "For the string \\'dvdf\\', the longest substring without repeating characters is \\'vdf\\', which has a length of 3. If your solution outputs 2, it might be considering \\'dv\\' or \\'vd\\', but it\\'s missing the longer valid substring \\'vdf\\'."
                    },
                    {
                        "username": "charlie_1212",
                        "content": "[@weisinger](/weisinger) That is not an explanation."
                    },
                    {
                        "username": "weisinger",
                        "content": "vdf is the solution"
                    },
                    {
                        "username": "byhoung",
                        "content": "Why is \"anviaj\" expected 5? Shouldn\\'t it be 4? \"anvi\""
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "cause \"nviaj\" is the longest one so "
                    },
                    {
                        "username": "user9739tx",
                        "content": "nviaj"
                    },
                    {
                        "username": "wlxzhg",
                        "content": "Does input only contain English characters?"
                    },
                    {
                        "username": "sagar4374",
                        "content": "If the input is \"anviaj\", shouldn't the output be 4 i.e. \"anvi\"?? LeetCode is expecting 5. Am I missing something here?"
                    },
                    {
                        "username": "NaveenLeetcodeSWE",
                        "content": "yes, it should be \"nviaj\" i.e 5"
                    },
                    {
                        "username": "wangxingyuq1230",
                        "content": "I met the issue in this problem, There is the issue report\\n\\nSubmission Result: Wrong Answer More Details \\n\\nInput:\\n\"dvdf\"\\nOutput:\\n2\\nExpected:\\n3\\nStdout:\\n5\\n\\nFrom what I perspective, when Input is dvdf output should be 2.I don't know why it should be 3"
                    },
                    {
                        "username": "Vithesh",
                        "content": "length of vdf is 3 bruhhhh. that is the longest substring."
                    },
                    {
                        "username": "et13713",
                        "content": "vdf is the longest unique string?"
                    },
                    {
                        "username": "xieyx2012",
                        "content": "Input: \"pwwkew\"\\n\\nOutput: 4\\n\\nExpected: 3"
                    },
                    {
                        "username": "zhao.chen.758",
                        "content": "The question might be a bit weird for most modern language users but here is how I practically put it. How do you C programmers tackle those questions that require hash set/map? Anyone have a good suggestion on quick/lightweighted approach on building hash structures in C?"
                    },
                    {
                        "username": "janis__",
                        "content": "I understand the challenge, as C doesn\\'t have built-in hash set/map structures like modern languages. When I need a hash set/map in C, I often use an array for simple cases, especially when the key space is limited. For more complex scenarios, I\\'d implement a basic hash table using linked lists to handle collisions. There are also libraries, like the uthash library, which provide hash table functionalities in C and can be easily integrated into projects."
                    }
                ]
            },
            {
                "id": 1571887,
                "content": [
                    {
                        "username": "saebalam123",
                        "content": "output length is 3 .but when i am printing set it is showing less elements. Any Help ??"
                    },
                    {
                        "username": "SahilBhola",
                        "content": "![image](https://assets.leetcode.com/users/sahilbhola/image_1567177262.png)\\n"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "i think as per question it starts to check from the beginning of the string and give the longest substring if it finds several substring having repeated longest value i think it prioritize the first found longest substring "
                    },
                    {
                        "username": "malabikas",
                        "content": "- why is OJ giving the answer as 3 and rejecting my solution?"
                    },
                    {
                        "username": "kevincai79",
                        "content": "my solution would not pass a test case which input is \\'dvdf\\' and expected output is 3, shouldn\\'t output to be 2? anybody can explain?\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "For the string \\'dvdf\\', the longest substring without repeating characters is \\'vdf\\', which has a length of 3. If your solution outputs 2, it might be considering \\'dv\\' or \\'vd\\', but it\\'s missing the longer valid substring \\'vdf\\'."
                    },
                    {
                        "username": "charlie_1212",
                        "content": "[@weisinger](/weisinger) That is not an explanation."
                    },
                    {
                        "username": "weisinger",
                        "content": "vdf is the solution"
                    },
                    {
                        "username": "byhoung",
                        "content": "Why is \"anviaj\" expected 5? Shouldn\\'t it be 4? \"anvi\""
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "cause \"nviaj\" is the longest one so "
                    },
                    {
                        "username": "user9739tx",
                        "content": "nviaj"
                    },
                    {
                        "username": "wlxzhg",
                        "content": "Does input only contain English characters?"
                    },
                    {
                        "username": "sagar4374",
                        "content": "If the input is \"anviaj\", shouldn't the output be 4 i.e. \"anvi\"?? LeetCode is expecting 5. Am I missing something here?"
                    },
                    {
                        "username": "NaveenLeetcodeSWE",
                        "content": "yes, it should be \"nviaj\" i.e 5"
                    },
                    {
                        "username": "wangxingyuq1230",
                        "content": "I met the issue in this problem, There is the issue report\\n\\nSubmission Result: Wrong Answer More Details \\n\\nInput:\\n\"dvdf\"\\nOutput:\\n2\\nExpected:\\n3\\nStdout:\\n5\\n\\nFrom what I perspective, when Input is dvdf output should be 2.I don't know why it should be 3"
                    },
                    {
                        "username": "Vithesh",
                        "content": "length of vdf is 3 bruhhhh. that is the longest substring."
                    },
                    {
                        "username": "et13713",
                        "content": "vdf is the longest unique string?"
                    },
                    {
                        "username": "xieyx2012",
                        "content": "Input: \"pwwkew\"\\n\\nOutput: 4\\n\\nExpected: 3"
                    },
                    {
                        "username": "zhao.chen.758",
                        "content": "The question might be a bit weird for most modern language users but here is how I practically put it. How do you C programmers tackle those questions that require hash set/map? Anyone have a good suggestion on quick/lightweighted approach on building hash structures in C?"
                    },
                    {
                        "username": "janis__",
                        "content": "I understand the challenge, as C doesn\\'t have built-in hash set/map structures like modern languages. When I need a hash set/map in C, I often use an array for simple cases, especially when the key space is limited. For more complex scenarios, I\\'d implement a basic hash table using linked lists to handle collisions. There are also libraries, like the uthash library, which provide hash table functionalities in C and can be easily integrated into projects."
                    }
                ]
            },
            {
                "id": 1570965,
                "content": [
                    {
                        "username": "saebalam123",
                        "content": "output length is 3 .but when i am printing set it is showing less elements. Any Help ??"
                    },
                    {
                        "username": "SahilBhola",
                        "content": "![image](https://assets.leetcode.com/users/sahilbhola/image_1567177262.png)\\n"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "i think as per question it starts to check from the beginning of the string and give the longest substring if it finds several substring having repeated longest value i think it prioritize the first found longest substring "
                    },
                    {
                        "username": "malabikas",
                        "content": "- why is OJ giving the answer as 3 and rejecting my solution?"
                    },
                    {
                        "username": "kevincai79",
                        "content": "my solution would not pass a test case which input is \\'dvdf\\' and expected output is 3, shouldn\\'t output to be 2? anybody can explain?\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "For the string \\'dvdf\\', the longest substring without repeating characters is \\'vdf\\', which has a length of 3. If your solution outputs 2, it might be considering \\'dv\\' or \\'vd\\', but it\\'s missing the longer valid substring \\'vdf\\'."
                    },
                    {
                        "username": "charlie_1212",
                        "content": "[@weisinger](/weisinger) That is not an explanation."
                    },
                    {
                        "username": "weisinger",
                        "content": "vdf is the solution"
                    },
                    {
                        "username": "byhoung",
                        "content": "Why is \"anviaj\" expected 5? Shouldn\\'t it be 4? \"anvi\""
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "cause \"nviaj\" is the longest one so "
                    },
                    {
                        "username": "user9739tx",
                        "content": "nviaj"
                    },
                    {
                        "username": "wlxzhg",
                        "content": "Does input only contain English characters?"
                    },
                    {
                        "username": "sagar4374",
                        "content": "If the input is \"anviaj\", shouldn't the output be 4 i.e. \"anvi\"?? LeetCode is expecting 5. Am I missing something here?"
                    },
                    {
                        "username": "NaveenLeetcodeSWE",
                        "content": "yes, it should be \"nviaj\" i.e 5"
                    },
                    {
                        "username": "wangxingyuq1230",
                        "content": "I met the issue in this problem, There is the issue report\\n\\nSubmission Result: Wrong Answer More Details \\n\\nInput:\\n\"dvdf\"\\nOutput:\\n2\\nExpected:\\n3\\nStdout:\\n5\\n\\nFrom what I perspective, when Input is dvdf output should be 2.I don't know why it should be 3"
                    },
                    {
                        "username": "Vithesh",
                        "content": "length of vdf is 3 bruhhhh. that is the longest substring."
                    },
                    {
                        "username": "et13713",
                        "content": "vdf is the longest unique string?"
                    },
                    {
                        "username": "xieyx2012",
                        "content": "Input: \"pwwkew\"\\n\\nOutput: 4\\n\\nExpected: 3"
                    },
                    {
                        "username": "zhao.chen.758",
                        "content": "The question might be a bit weird for most modern language users but here is how I practically put it. How do you C programmers tackle those questions that require hash set/map? Anyone have a good suggestion on quick/lightweighted approach on building hash structures in C?"
                    },
                    {
                        "username": "janis__",
                        "content": "I understand the challenge, as C doesn\\'t have built-in hash set/map structures like modern languages. When I need a hash set/map in C, I often use an array for simple cases, especially when the key space is limited. For more complex scenarios, I\\'d implement a basic hash table using linked lists to handle collisions. There are also libraries, like the uthash library, which provide hash table functionalities in C and can be easily integrated into projects."
                    }
                ]
            },
            {
                "id": 1570966,
                "content": [
                    {
                        "username": "saebalam123",
                        "content": "output length is 3 .but when i am printing set it is showing less elements. Any Help ??"
                    },
                    {
                        "username": "SahilBhola",
                        "content": "![image](https://assets.leetcode.com/users/sahilbhola/image_1567177262.png)\\n"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "i think as per question it starts to check from the beginning of the string and give the longest substring if it finds several substring having repeated longest value i think it prioritize the first found longest substring "
                    },
                    {
                        "username": "malabikas",
                        "content": "- why is OJ giving the answer as 3 and rejecting my solution?"
                    },
                    {
                        "username": "kevincai79",
                        "content": "my solution would not pass a test case which input is \\'dvdf\\' and expected output is 3, shouldn\\'t output to be 2? anybody can explain?\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "For the string \\'dvdf\\', the longest substring without repeating characters is \\'vdf\\', which has a length of 3. If your solution outputs 2, it might be considering \\'dv\\' or \\'vd\\', but it\\'s missing the longer valid substring \\'vdf\\'."
                    },
                    {
                        "username": "charlie_1212",
                        "content": "[@weisinger](/weisinger) That is not an explanation."
                    },
                    {
                        "username": "weisinger",
                        "content": "vdf is the solution"
                    },
                    {
                        "username": "byhoung",
                        "content": "Why is \"anviaj\" expected 5? Shouldn\\'t it be 4? \"anvi\""
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "cause \"nviaj\" is the longest one so "
                    },
                    {
                        "username": "user9739tx",
                        "content": "nviaj"
                    },
                    {
                        "username": "wlxzhg",
                        "content": "Does input only contain English characters?"
                    },
                    {
                        "username": "sagar4374",
                        "content": "If the input is \"anviaj\", shouldn't the output be 4 i.e. \"anvi\"?? LeetCode is expecting 5. Am I missing something here?"
                    },
                    {
                        "username": "NaveenLeetcodeSWE",
                        "content": "yes, it should be \"nviaj\" i.e 5"
                    },
                    {
                        "username": "wangxingyuq1230",
                        "content": "I met the issue in this problem, There is the issue report\\n\\nSubmission Result: Wrong Answer More Details \\n\\nInput:\\n\"dvdf\"\\nOutput:\\n2\\nExpected:\\n3\\nStdout:\\n5\\n\\nFrom what I perspective, when Input is dvdf output should be 2.I don't know why it should be 3"
                    },
                    {
                        "username": "Vithesh",
                        "content": "length of vdf is 3 bruhhhh. that is the longest substring."
                    },
                    {
                        "username": "et13713",
                        "content": "vdf is the longest unique string?"
                    },
                    {
                        "username": "xieyx2012",
                        "content": "Input: \"pwwkew\"\\n\\nOutput: 4\\n\\nExpected: 3"
                    },
                    {
                        "username": "zhao.chen.758",
                        "content": "The question might be a bit weird for most modern language users but here is how I practically put it. How do you C programmers tackle those questions that require hash set/map? Anyone have a good suggestion on quick/lightweighted approach on building hash structures in C?"
                    },
                    {
                        "username": "janis__",
                        "content": "I understand the challenge, as C doesn\\'t have built-in hash set/map structures like modern languages. When I need a hash set/map in C, I often use an array for simple cases, especially when the key space is limited. For more complex scenarios, I\\'d implement a basic hash table using linked lists to handle collisions. There are also libraries, like the uthash library, which provide hash table functionalities in C and can be easily integrated into projects."
                    }
                ]
            },
            {
                "id": 1570967,
                "content": [
                    {
                        "username": "saebalam123",
                        "content": "output length is 3 .but when i am printing set it is showing less elements. Any Help ??"
                    },
                    {
                        "username": "SahilBhola",
                        "content": "![image](https://assets.leetcode.com/users/sahilbhola/image_1567177262.png)\\n"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "i think as per question it starts to check from the beginning of the string and give the longest substring if it finds several substring having repeated longest value i think it prioritize the first found longest substring "
                    },
                    {
                        "username": "malabikas",
                        "content": "- why is OJ giving the answer as 3 and rejecting my solution?"
                    },
                    {
                        "username": "kevincai79",
                        "content": "my solution would not pass a test case which input is \\'dvdf\\' and expected output is 3, shouldn\\'t output to be 2? anybody can explain?\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "For the string \\'dvdf\\', the longest substring without repeating characters is \\'vdf\\', which has a length of 3. If your solution outputs 2, it might be considering \\'dv\\' or \\'vd\\', but it\\'s missing the longer valid substring \\'vdf\\'."
                    },
                    {
                        "username": "charlie_1212",
                        "content": "[@weisinger](/weisinger) That is not an explanation."
                    },
                    {
                        "username": "weisinger",
                        "content": "vdf is the solution"
                    },
                    {
                        "username": "byhoung",
                        "content": "Why is \"anviaj\" expected 5? Shouldn\\'t it be 4? \"anvi\""
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "cause \"nviaj\" is the longest one so "
                    },
                    {
                        "username": "user9739tx",
                        "content": "nviaj"
                    },
                    {
                        "username": "wlxzhg",
                        "content": "Does input only contain English characters?"
                    },
                    {
                        "username": "sagar4374",
                        "content": "If the input is \"anviaj\", shouldn't the output be 4 i.e. \"anvi\"?? LeetCode is expecting 5. Am I missing something here?"
                    },
                    {
                        "username": "NaveenLeetcodeSWE",
                        "content": "yes, it should be \"nviaj\" i.e 5"
                    },
                    {
                        "username": "wangxingyuq1230",
                        "content": "I met the issue in this problem, There is the issue report\\n\\nSubmission Result: Wrong Answer More Details \\n\\nInput:\\n\"dvdf\"\\nOutput:\\n2\\nExpected:\\n3\\nStdout:\\n5\\n\\nFrom what I perspective, when Input is dvdf output should be 2.I don't know why it should be 3"
                    },
                    {
                        "username": "Vithesh",
                        "content": "length of vdf is 3 bruhhhh. that is the longest substring."
                    },
                    {
                        "username": "et13713",
                        "content": "vdf is the longest unique string?"
                    },
                    {
                        "username": "xieyx2012",
                        "content": "Input: \"pwwkew\"\\n\\nOutput: 4\\n\\nExpected: 3"
                    },
                    {
                        "username": "zhao.chen.758",
                        "content": "The question might be a bit weird for most modern language users but here is how I practically put it. How do you C programmers tackle those questions that require hash set/map? Anyone have a good suggestion on quick/lightweighted approach on building hash structures in C?"
                    },
                    {
                        "username": "janis__",
                        "content": "I understand the challenge, as C doesn\\'t have built-in hash set/map structures like modern languages. When I need a hash set/map in C, I often use an array for simple cases, especially when the key space is limited. For more complex scenarios, I\\'d implement a basic hash table using linked lists to handle collisions. There are also libraries, like the uthash library, which provide hash table functionalities in C and can be easily integrated into projects."
                    }
                ]
            },
            {
                "id": 1570968,
                "content": [
                    {
                        "username": "saebalam123",
                        "content": "output length is 3 .but when i am printing set it is showing less elements. Any Help ??"
                    },
                    {
                        "username": "SahilBhola",
                        "content": "![image](https://assets.leetcode.com/users/sahilbhola/image_1567177262.png)\\n"
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "i think as per question it starts to check from the beginning of the string and give the longest substring if it finds several substring having repeated longest value i think it prioritize the first found longest substring "
                    },
                    {
                        "username": "malabikas",
                        "content": "- why is OJ giving the answer as 3 and rejecting my solution?"
                    },
                    {
                        "username": "kevincai79",
                        "content": "my solution would not pass a test case which input is \\'dvdf\\' and expected output is 3, shouldn\\'t output to be 2? anybody can explain?\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "For the string \\'dvdf\\', the longest substring without repeating characters is \\'vdf\\', which has a length of 3. If your solution outputs 2, it might be considering \\'dv\\' or \\'vd\\', but it\\'s missing the longer valid substring \\'vdf\\'."
                    },
                    {
                        "username": "charlie_1212",
                        "content": "[@weisinger](/weisinger) That is not an explanation."
                    },
                    {
                        "username": "weisinger",
                        "content": "vdf is the solution"
                    },
                    {
                        "username": "byhoung",
                        "content": "Why is \"anviaj\" expected 5? Shouldn\\'t it be 4? \"anvi\""
                    },
                    {
                        "username": "bhupendrabc71",
                        "content": "cause \"nviaj\" is the longest one so "
                    },
                    {
                        "username": "user9739tx",
                        "content": "nviaj"
                    },
                    {
                        "username": "wlxzhg",
                        "content": "Does input only contain English characters?"
                    },
                    {
                        "username": "sagar4374",
                        "content": "If the input is \"anviaj\", shouldn't the output be 4 i.e. \"anvi\"?? LeetCode is expecting 5. Am I missing something here?"
                    },
                    {
                        "username": "NaveenLeetcodeSWE",
                        "content": "yes, it should be \"nviaj\" i.e 5"
                    },
                    {
                        "username": "wangxingyuq1230",
                        "content": "I met the issue in this problem, There is the issue report\\n\\nSubmission Result: Wrong Answer More Details \\n\\nInput:\\n\"dvdf\"\\nOutput:\\n2\\nExpected:\\n3\\nStdout:\\n5\\n\\nFrom what I perspective, when Input is dvdf output should be 2.I don't know why it should be 3"
                    },
                    {
                        "username": "Vithesh",
                        "content": "length of vdf is 3 bruhhhh. that is the longest substring."
                    },
                    {
                        "username": "et13713",
                        "content": "vdf is the longest unique string?"
                    },
                    {
                        "username": "xieyx2012",
                        "content": "Input: \"pwwkew\"\\n\\nOutput: 4\\n\\nExpected: 3"
                    },
                    {
                        "username": "zhao.chen.758",
                        "content": "The question might be a bit weird for most modern language users but here is how I practically put it. How do you C programmers tackle those questions that require hash set/map? Anyone have a good suggestion on quick/lightweighted approach on building hash structures in C?"
                    },
                    {
                        "username": "janis__",
                        "content": "I understand the challenge, as C doesn\\'t have built-in hash set/map structures like modern languages. When I need a hash set/map in C, I often use an array for simple cases, especially when the key space is limited. For more complex scenarios, I\\'d implement a basic hash table using linked lists to handle collisions. There are also libraries, like the uthash library, which provide hash table functionalities in C and can be easily integrated into projects."
                    }
                ]
            },
            {
                "id": 1567039,
                "content": [
                    {
                        "username": "letitbemini",
                        "content": "https://hashnode.com/post/sliding-window-cko39zsax04omdes1cxuxgtgw\\n\\nCheck out this article. This explains sliding window concept along with solution of this question\\n\\nPlease like the article if you found it helpful!"
                    },
                    {
                        "username": "Asadbek525",
                        "content": "This problem should be easy."
                    },
                    {
                        "username": "niteshsaxena03",
                        "content": "it could be said easy only for brute force"
                    },
                    {
                        "username": "saiprasadkhule0",
                        "content": "lavdya\\n"
                    },
                    {
                        "username": "b04502020",
                        "content": "![image](https://assets.leetcode.com/users/images/d9d0e754-f176-445d-9d62-e28d78c218b8_1639815412.3087351.png)\\nI have no adea what\\'s wrong.\\nI checked my code with the input \"bbbbb\" but it woks well in Run Code Result.\\nAnyone encontered the same problem?"
                    },
                    {
                        "username": "Mostafa3la2",
                        "content": "Same solution submitted using **C# and swift**, gives completion time of **68 ms** in **C#** and runs out of time in **Swift**, is **Swift** really that slow ?"
                    },
                    {
                        "username": "ghanshyampatil754",
                        "content": "![image](https://assets.leetcode.com/users/images/75bef5f6-1dea-4390-ada4-60a034503ef3_1629918118.0891154.png)\\n"
                    },
                    {
                        "username": "ya17kun",
                        "content": "Dont post solutions in Discussions ... can you not read?"
                    },
                    {
                        "username": "playsforfun42",
                        "content": "I\\'m going to be real with ya chief, even after looking up what substring/subsequences are, I still have 0 clue to what this is actually asking."
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Well, if you look on first testcase you can see that answer is 3 \"abc\" longest increasing substring, a substring and subsequence are two different things, substring: [a, B, C, D, f], \"BCD\" is a substring, [A, b, C, D, f] \"ACD\" is subsequence, basically substring is like dynamic sliding window, but in this case it has to be without repeating characters, you can just iterate through string and use two pointers, left = 0, right = 0, increment right by 1, when you find duplicate, set left to right + 1, and continue while right < s.length"
                    },
                    {
                        "username": "anivaries",
                        "content": "OMG finally solved this after days of banging my head with all those \\'gotcha\\' cases. Not the fastest code but deque is doing it\\'s job"
                    },
                    {
                        "username": "sathwikreddy0843",
                        "content": "Can this question can be solved using C ? How ?"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "why not, on the top there is a list of languages that you can use for this problem"
                    },
                    {
                        "username": "Rakib-Khan",
                        "content": "how to can i use in python"
                    },
                    {
                        "username": "morefromalan",
                        "content": "What is the expected behavior if the string is only one character long"
                    },
                    {
                        "username": "morefromalan",
                        "content": "[@DamianIvanochko](/DamianIvanochko) it would be nice if the problem statement said something about that. "
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "if  you mean that length of a string is 1 than the process is the same as with other code. but if string is empty(s.isEmpty()) than you have to return 0;"
                    }
                ]
            },
            {
                "id": 1778216,
                "content": [
                    {
                        "username": "letitbemini",
                        "content": "https://hashnode.com/post/sliding-window-cko39zsax04omdes1cxuxgtgw\\n\\nCheck out this article. This explains sliding window concept along with solution of this question\\n\\nPlease like the article if you found it helpful!"
                    },
                    {
                        "username": "Asadbek525",
                        "content": "This problem should be easy."
                    },
                    {
                        "username": "niteshsaxena03",
                        "content": "it could be said easy only for brute force"
                    },
                    {
                        "username": "saiprasadkhule0",
                        "content": "lavdya\\n"
                    },
                    {
                        "username": "b04502020",
                        "content": "![image](https://assets.leetcode.com/users/images/d9d0e754-f176-445d-9d62-e28d78c218b8_1639815412.3087351.png)\\nI have no adea what\\'s wrong.\\nI checked my code with the input \"bbbbb\" but it woks well in Run Code Result.\\nAnyone encontered the same problem?"
                    },
                    {
                        "username": "Mostafa3la2",
                        "content": "Same solution submitted using **C# and swift**, gives completion time of **68 ms** in **C#** and runs out of time in **Swift**, is **Swift** really that slow ?"
                    },
                    {
                        "username": "ghanshyampatil754",
                        "content": "![image](https://assets.leetcode.com/users/images/75bef5f6-1dea-4390-ada4-60a034503ef3_1629918118.0891154.png)\\n"
                    },
                    {
                        "username": "ya17kun",
                        "content": "Dont post solutions in Discussions ... can you not read?"
                    },
                    {
                        "username": "playsforfun42",
                        "content": "I\\'m going to be real with ya chief, even after looking up what substring/subsequences are, I still have 0 clue to what this is actually asking."
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Well, if you look on first testcase you can see that answer is 3 \"abc\" longest increasing substring, a substring and subsequence are two different things, substring: [a, B, C, D, f], \"BCD\" is a substring, [A, b, C, D, f] \"ACD\" is subsequence, basically substring is like dynamic sliding window, but in this case it has to be without repeating characters, you can just iterate through string and use two pointers, left = 0, right = 0, increment right by 1, when you find duplicate, set left to right + 1, and continue while right < s.length"
                    },
                    {
                        "username": "anivaries",
                        "content": "OMG finally solved this after days of banging my head with all those \\'gotcha\\' cases. Not the fastest code but deque is doing it\\'s job"
                    },
                    {
                        "username": "sathwikreddy0843",
                        "content": "Can this question can be solved using C ? How ?"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "why not, on the top there is a list of languages that you can use for this problem"
                    },
                    {
                        "username": "Rakib-Khan",
                        "content": "how to can i use in python"
                    },
                    {
                        "username": "morefromalan",
                        "content": "What is the expected behavior if the string is only one character long"
                    },
                    {
                        "username": "morefromalan",
                        "content": "[@DamianIvanochko](/DamianIvanochko) it would be nice if the problem statement said something about that. "
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "if  you mean that length of a string is 1 than the process is the same as with other code. but if string is empty(s.isEmpty()) than you have to return 0;"
                    }
                ]
            },
            {
                "id": 1576096,
                "content": [
                    {
                        "username": "letitbemini",
                        "content": "https://hashnode.com/post/sliding-window-cko39zsax04omdes1cxuxgtgw\\n\\nCheck out this article. This explains sliding window concept along with solution of this question\\n\\nPlease like the article if you found it helpful!"
                    },
                    {
                        "username": "Asadbek525",
                        "content": "This problem should be easy."
                    },
                    {
                        "username": "niteshsaxena03",
                        "content": "it could be said easy only for brute force"
                    },
                    {
                        "username": "saiprasadkhule0",
                        "content": "lavdya\\n"
                    },
                    {
                        "username": "b04502020",
                        "content": "![image](https://assets.leetcode.com/users/images/d9d0e754-f176-445d-9d62-e28d78c218b8_1639815412.3087351.png)\\nI have no adea what\\'s wrong.\\nI checked my code with the input \"bbbbb\" but it woks well in Run Code Result.\\nAnyone encontered the same problem?"
                    },
                    {
                        "username": "Mostafa3la2",
                        "content": "Same solution submitted using **C# and swift**, gives completion time of **68 ms** in **C#** and runs out of time in **Swift**, is **Swift** really that slow ?"
                    },
                    {
                        "username": "ghanshyampatil754",
                        "content": "![image](https://assets.leetcode.com/users/images/75bef5f6-1dea-4390-ada4-60a034503ef3_1629918118.0891154.png)\\n"
                    },
                    {
                        "username": "ya17kun",
                        "content": "Dont post solutions in Discussions ... can you not read?"
                    },
                    {
                        "username": "playsforfun42",
                        "content": "I\\'m going to be real with ya chief, even after looking up what substring/subsequences are, I still have 0 clue to what this is actually asking."
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Well, if you look on first testcase you can see that answer is 3 \"abc\" longest increasing substring, a substring and subsequence are two different things, substring: [a, B, C, D, f], \"BCD\" is a substring, [A, b, C, D, f] \"ACD\" is subsequence, basically substring is like dynamic sliding window, but in this case it has to be without repeating characters, you can just iterate through string and use two pointers, left = 0, right = 0, increment right by 1, when you find duplicate, set left to right + 1, and continue while right < s.length"
                    },
                    {
                        "username": "anivaries",
                        "content": "OMG finally solved this after days of banging my head with all those \\'gotcha\\' cases. Not the fastest code but deque is doing it\\'s job"
                    },
                    {
                        "username": "sathwikreddy0843",
                        "content": "Can this question can be solved using C ? How ?"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "why not, on the top there is a list of languages that you can use for this problem"
                    },
                    {
                        "username": "Rakib-Khan",
                        "content": "how to can i use in python"
                    },
                    {
                        "username": "morefromalan",
                        "content": "What is the expected behavior if the string is only one character long"
                    },
                    {
                        "username": "morefromalan",
                        "content": "[@DamianIvanochko](/DamianIvanochko) it would be nice if the problem statement said something about that. "
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "if  you mean that length of a string is 1 than the process is the same as with other code. but if string is empty(s.isEmpty()) than you have to return 0;"
                    }
                ]
            },
            {
                "id": 1575947,
                "content": [
                    {
                        "username": "letitbemini",
                        "content": "https://hashnode.com/post/sliding-window-cko39zsax04omdes1cxuxgtgw\\n\\nCheck out this article. This explains sliding window concept along with solution of this question\\n\\nPlease like the article if you found it helpful!"
                    },
                    {
                        "username": "Asadbek525",
                        "content": "This problem should be easy."
                    },
                    {
                        "username": "niteshsaxena03",
                        "content": "it could be said easy only for brute force"
                    },
                    {
                        "username": "saiprasadkhule0",
                        "content": "lavdya\\n"
                    },
                    {
                        "username": "b04502020",
                        "content": "![image](https://assets.leetcode.com/users/images/d9d0e754-f176-445d-9d62-e28d78c218b8_1639815412.3087351.png)\\nI have no adea what\\'s wrong.\\nI checked my code with the input \"bbbbb\" but it woks well in Run Code Result.\\nAnyone encontered the same problem?"
                    },
                    {
                        "username": "Mostafa3la2",
                        "content": "Same solution submitted using **C# and swift**, gives completion time of **68 ms** in **C#** and runs out of time in **Swift**, is **Swift** really that slow ?"
                    },
                    {
                        "username": "ghanshyampatil754",
                        "content": "![image](https://assets.leetcode.com/users/images/75bef5f6-1dea-4390-ada4-60a034503ef3_1629918118.0891154.png)\\n"
                    },
                    {
                        "username": "ya17kun",
                        "content": "Dont post solutions in Discussions ... can you not read?"
                    },
                    {
                        "username": "playsforfun42",
                        "content": "I\\'m going to be real with ya chief, even after looking up what substring/subsequences are, I still have 0 clue to what this is actually asking."
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Well, if you look on first testcase you can see that answer is 3 \"abc\" longest increasing substring, a substring and subsequence are two different things, substring: [a, B, C, D, f], \"BCD\" is a substring, [A, b, C, D, f] \"ACD\" is subsequence, basically substring is like dynamic sliding window, but in this case it has to be without repeating characters, you can just iterate through string and use two pointers, left = 0, right = 0, increment right by 1, when you find duplicate, set left to right + 1, and continue while right < s.length"
                    },
                    {
                        "username": "anivaries",
                        "content": "OMG finally solved this after days of banging my head with all those \\'gotcha\\' cases. Not the fastest code but deque is doing it\\'s job"
                    },
                    {
                        "username": "sathwikreddy0843",
                        "content": "Can this question can be solved using C ? How ?"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "why not, on the top there is a list of languages that you can use for this problem"
                    },
                    {
                        "username": "Rakib-Khan",
                        "content": "how to can i use in python"
                    },
                    {
                        "username": "morefromalan",
                        "content": "What is the expected behavior if the string is only one character long"
                    },
                    {
                        "username": "morefromalan",
                        "content": "[@DamianIvanochko](/DamianIvanochko) it would be nice if the problem statement said something about that. "
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "if  you mean that length of a string is 1 than the process is the same as with other code. but if string is empty(s.isEmpty()) than you have to return 0;"
                    }
                ]
            },
            {
                "id": 1575686,
                "content": [
                    {
                        "username": "letitbemini",
                        "content": "https://hashnode.com/post/sliding-window-cko39zsax04omdes1cxuxgtgw\\n\\nCheck out this article. This explains sliding window concept along with solution of this question\\n\\nPlease like the article if you found it helpful!"
                    },
                    {
                        "username": "Asadbek525",
                        "content": "This problem should be easy."
                    },
                    {
                        "username": "niteshsaxena03",
                        "content": "it could be said easy only for brute force"
                    },
                    {
                        "username": "saiprasadkhule0",
                        "content": "lavdya\\n"
                    },
                    {
                        "username": "b04502020",
                        "content": "![image](https://assets.leetcode.com/users/images/d9d0e754-f176-445d-9d62-e28d78c218b8_1639815412.3087351.png)\\nI have no adea what\\'s wrong.\\nI checked my code with the input \"bbbbb\" but it woks well in Run Code Result.\\nAnyone encontered the same problem?"
                    },
                    {
                        "username": "Mostafa3la2",
                        "content": "Same solution submitted using **C# and swift**, gives completion time of **68 ms** in **C#** and runs out of time in **Swift**, is **Swift** really that slow ?"
                    },
                    {
                        "username": "ghanshyampatil754",
                        "content": "![image](https://assets.leetcode.com/users/images/75bef5f6-1dea-4390-ada4-60a034503ef3_1629918118.0891154.png)\\n"
                    },
                    {
                        "username": "ya17kun",
                        "content": "Dont post solutions in Discussions ... can you not read?"
                    },
                    {
                        "username": "playsforfun42",
                        "content": "I\\'m going to be real with ya chief, even after looking up what substring/subsequences are, I still have 0 clue to what this is actually asking."
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Well, if you look on first testcase you can see that answer is 3 \"abc\" longest increasing substring, a substring and subsequence are two different things, substring: [a, B, C, D, f], \"BCD\" is a substring, [A, b, C, D, f] \"ACD\" is subsequence, basically substring is like dynamic sliding window, but in this case it has to be without repeating characters, you can just iterate through string and use two pointers, left = 0, right = 0, increment right by 1, when you find duplicate, set left to right + 1, and continue while right < s.length"
                    },
                    {
                        "username": "anivaries",
                        "content": "OMG finally solved this after days of banging my head with all those \\'gotcha\\' cases. Not the fastest code but deque is doing it\\'s job"
                    },
                    {
                        "username": "sathwikreddy0843",
                        "content": "Can this question can be solved using C ? How ?"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "why not, on the top there is a list of languages that you can use for this problem"
                    },
                    {
                        "username": "Rakib-Khan",
                        "content": "how to can i use in python"
                    },
                    {
                        "username": "morefromalan",
                        "content": "What is the expected behavior if the string is only one character long"
                    },
                    {
                        "username": "morefromalan",
                        "content": "[@DamianIvanochko](/DamianIvanochko) it would be nice if the problem statement said something about that. "
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "if  you mean that length of a string is 1 than the process is the same as with other code. but if string is empty(s.isEmpty()) than you have to return 0;"
                    }
                ]
            },
            {
                "id": 2055349,
                "content": [
                    {
                        "username": "letitbemini",
                        "content": "https://hashnode.com/post/sliding-window-cko39zsax04omdes1cxuxgtgw\\n\\nCheck out this article. This explains sliding window concept along with solution of this question\\n\\nPlease like the article if you found it helpful!"
                    },
                    {
                        "username": "Asadbek525",
                        "content": "This problem should be easy."
                    },
                    {
                        "username": "niteshsaxena03",
                        "content": "it could be said easy only for brute force"
                    },
                    {
                        "username": "saiprasadkhule0",
                        "content": "lavdya\\n"
                    },
                    {
                        "username": "b04502020",
                        "content": "![image](https://assets.leetcode.com/users/images/d9d0e754-f176-445d-9d62-e28d78c218b8_1639815412.3087351.png)\\nI have no adea what\\'s wrong.\\nI checked my code with the input \"bbbbb\" but it woks well in Run Code Result.\\nAnyone encontered the same problem?"
                    },
                    {
                        "username": "Mostafa3la2",
                        "content": "Same solution submitted using **C# and swift**, gives completion time of **68 ms** in **C#** and runs out of time in **Swift**, is **Swift** really that slow ?"
                    },
                    {
                        "username": "ghanshyampatil754",
                        "content": "![image](https://assets.leetcode.com/users/images/75bef5f6-1dea-4390-ada4-60a034503ef3_1629918118.0891154.png)\\n"
                    },
                    {
                        "username": "ya17kun",
                        "content": "Dont post solutions in Discussions ... can you not read?"
                    },
                    {
                        "username": "playsforfun42",
                        "content": "I\\'m going to be real with ya chief, even after looking up what substring/subsequences are, I still have 0 clue to what this is actually asking."
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Well, if you look on first testcase you can see that answer is 3 \"abc\" longest increasing substring, a substring and subsequence are two different things, substring: [a, B, C, D, f], \"BCD\" is a substring, [A, b, C, D, f] \"ACD\" is subsequence, basically substring is like dynamic sliding window, but in this case it has to be without repeating characters, you can just iterate through string and use two pointers, left = 0, right = 0, increment right by 1, when you find duplicate, set left to right + 1, and continue while right < s.length"
                    },
                    {
                        "username": "anivaries",
                        "content": "OMG finally solved this after days of banging my head with all those \\'gotcha\\' cases. Not the fastest code but deque is doing it\\'s job"
                    },
                    {
                        "username": "sathwikreddy0843",
                        "content": "Can this question can be solved using C ? How ?"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "why not, on the top there is a list of languages that you can use for this problem"
                    },
                    {
                        "username": "Rakib-Khan",
                        "content": "how to can i use in python"
                    },
                    {
                        "username": "morefromalan",
                        "content": "What is the expected behavior if the string is only one character long"
                    },
                    {
                        "username": "morefromalan",
                        "content": "[@DamianIvanochko](/DamianIvanochko) it would be nice if the problem statement said something about that. "
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "if  you mean that length of a string is 1 than the process is the same as with other code. but if string is empty(s.isEmpty()) than you have to return 0;"
                    }
                ]
            },
            {
                "id": 2050607,
                "content": [
                    {
                        "username": "letitbemini",
                        "content": "https://hashnode.com/post/sliding-window-cko39zsax04omdes1cxuxgtgw\\n\\nCheck out this article. This explains sliding window concept along with solution of this question\\n\\nPlease like the article if you found it helpful!"
                    },
                    {
                        "username": "Asadbek525",
                        "content": "This problem should be easy."
                    },
                    {
                        "username": "niteshsaxena03",
                        "content": "it could be said easy only for brute force"
                    },
                    {
                        "username": "saiprasadkhule0",
                        "content": "lavdya\\n"
                    },
                    {
                        "username": "b04502020",
                        "content": "![image](https://assets.leetcode.com/users/images/d9d0e754-f176-445d-9d62-e28d78c218b8_1639815412.3087351.png)\\nI have no adea what\\'s wrong.\\nI checked my code with the input \"bbbbb\" but it woks well in Run Code Result.\\nAnyone encontered the same problem?"
                    },
                    {
                        "username": "Mostafa3la2",
                        "content": "Same solution submitted using **C# and swift**, gives completion time of **68 ms** in **C#** and runs out of time in **Swift**, is **Swift** really that slow ?"
                    },
                    {
                        "username": "ghanshyampatil754",
                        "content": "![image](https://assets.leetcode.com/users/images/75bef5f6-1dea-4390-ada4-60a034503ef3_1629918118.0891154.png)\\n"
                    },
                    {
                        "username": "ya17kun",
                        "content": "Dont post solutions in Discussions ... can you not read?"
                    },
                    {
                        "username": "playsforfun42",
                        "content": "I\\'m going to be real with ya chief, even after looking up what substring/subsequences are, I still have 0 clue to what this is actually asking."
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Well, if you look on first testcase you can see that answer is 3 \"abc\" longest increasing substring, a substring and subsequence are two different things, substring: [a, B, C, D, f], \"BCD\" is a substring, [A, b, C, D, f] \"ACD\" is subsequence, basically substring is like dynamic sliding window, but in this case it has to be without repeating characters, you can just iterate through string and use two pointers, left = 0, right = 0, increment right by 1, when you find duplicate, set left to right + 1, and continue while right < s.length"
                    },
                    {
                        "username": "anivaries",
                        "content": "OMG finally solved this after days of banging my head with all those \\'gotcha\\' cases. Not the fastest code but deque is doing it\\'s job"
                    },
                    {
                        "username": "sathwikreddy0843",
                        "content": "Can this question can be solved using C ? How ?"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "why not, on the top there is a list of languages that you can use for this problem"
                    },
                    {
                        "username": "Rakib-Khan",
                        "content": "how to can i use in python"
                    },
                    {
                        "username": "morefromalan",
                        "content": "What is the expected behavior if the string is only one character long"
                    },
                    {
                        "username": "morefromalan",
                        "content": "[@DamianIvanochko](/DamianIvanochko) it would be nice if the problem statement said something about that. "
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "if  you mean that length of a string is 1 than the process is the same as with other code. but if string is empty(s.isEmpty()) than you have to return 0;"
                    }
                ]
            },
            {
                "id": 2037335,
                "content": [
                    {
                        "username": "letitbemini",
                        "content": "https://hashnode.com/post/sliding-window-cko39zsax04omdes1cxuxgtgw\\n\\nCheck out this article. This explains sliding window concept along with solution of this question\\n\\nPlease like the article if you found it helpful!"
                    },
                    {
                        "username": "Asadbek525",
                        "content": "This problem should be easy."
                    },
                    {
                        "username": "niteshsaxena03",
                        "content": "it could be said easy only for brute force"
                    },
                    {
                        "username": "saiprasadkhule0",
                        "content": "lavdya\\n"
                    },
                    {
                        "username": "b04502020",
                        "content": "![image](https://assets.leetcode.com/users/images/d9d0e754-f176-445d-9d62-e28d78c218b8_1639815412.3087351.png)\\nI have no adea what\\'s wrong.\\nI checked my code with the input \"bbbbb\" but it woks well in Run Code Result.\\nAnyone encontered the same problem?"
                    },
                    {
                        "username": "Mostafa3la2",
                        "content": "Same solution submitted using **C# and swift**, gives completion time of **68 ms** in **C#** and runs out of time in **Swift**, is **Swift** really that slow ?"
                    },
                    {
                        "username": "ghanshyampatil754",
                        "content": "![image](https://assets.leetcode.com/users/images/75bef5f6-1dea-4390-ada4-60a034503ef3_1629918118.0891154.png)\\n"
                    },
                    {
                        "username": "ya17kun",
                        "content": "Dont post solutions in Discussions ... can you not read?"
                    },
                    {
                        "username": "playsforfun42",
                        "content": "I\\'m going to be real with ya chief, even after looking up what substring/subsequences are, I still have 0 clue to what this is actually asking."
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Well, if you look on first testcase you can see that answer is 3 \"abc\" longest increasing substring, a substring and subsequence are two different things, substring: [a, B, C, D, f], \"BCD\" is a substring, [A, b, C, D, f] \"ACD\" is subsequence, basically substring is like dynamic sliding window, but in this case it has to be without repeating characters, you can just iterate through string and use two pointers, left = 0, right = 0, increment right by 1, when you find duplicate, set left to right + 1, and continue while right < s.length"
                    },
                    {
                        "username": "anivaries",
                        "content": "OMG finally solved this after days of banging my head with all those \\'gotcha\\' cases. Not the fastest code but deque is doing it\\'s job"
                    },
                    {
                        "username": "sathwikreddy0843",
                        "content": "Can this question can be solved using C ? How ?"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "why not, on the top there is a list of languages that you can use for this problem"
                    },
                    {
                        "username": "Rakib-Khan",
                        "content": "how to can i use in python"
                    },
                    {
                        "username": "morefromalan",
                        "content": "What is the expected behavior if the string is only one character long"
                    },
                    {
                        "username": "morefromalan",
                        "content": "[@DamianIvanochko](/DamianIvanochko) it would be nice if the problem statement said something about that. "
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "if  you mean that length of a string is 1 than the process is the same as with other code. but if string is empty(s.isEmpty()) than you have to return 0;"
                    }
                ]
            },
            {
                "id": 2036109,
                "content": [
                    {
                        "username": "letitbemini",
                        "content": "https://hashnode.com/post/sliding-window-cko39zsax04omdes1cxuxgtgw\\n\\nCheck out this article. This explains sliding window concept along with solution of this question\\n\\nPlease like the article if you found it helpful!"
                    },
                    {
                        "username": "Asadbek525",
                        "content": "This problem should be easy."
                    },
                    {
                        "username": "niteshsaxena03",
                        "content": "it could be said easy only for brute force"
                    },
                    {
                        "username": "saiprasadkhule0",
                        "content": "lavdya\\n"
                    },
                    {
                        "username": "b04502020",
                        "content": "![image](https://assets.leetcode.com/users/images/d9d0e754-f176-445d-9d62-e28d78c218b8_1639815412.3087351.png)\\nI have no adea what\\'s wrong.\\nI checked my code with the input \"bbbbb\" but it woks well in Run Code Result.\\nAnyone encontered the same problem?"
                    },
                    {
                        "username": "Mostafa3la2",
                        "content": "Same solution submitted using **C# and swift**, gives completion time of **68 ms** in **C#** and runs out of time in **Swift**, is **Swift** really that slow ?"
                    },
                    {
                        "username": "ghanshyampatil754",
                        "content": "![image](https://assets.leetcode.com/users/images/75bef5f6-1dea-4390-ada4-60a034503ef3_1629918118.0891154.png)\\n"
                    },
                    {
                        "username": "ya17kun",
                        "content": "Dont post solutions in Discussions ... can you not read?"
                    },
                    {
                        "username": "playsforfun42",
                        "content": "I\\'m going to be real with ya chief, even after looking up what substring/subsequences are, I still have 0 clue to what this is actually asking."
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Well, if you look on first testcase you can see that answer is 3 \"abc\" longest increasing substring, a substring and subsequence are two different things, substring: [a, B, C, D, f], \"BCD\" is a substring, [A, b, C, D, f] \"ACD\" is subsequence, basically substring is like dynamic sliding window, but in this case it has to be without repeating characters, you can just iterate through string and use two pointers, left = 0, right = 0, increment right by 1, when you find duplicate, set left to right + 1, and continue while right < s.length"
                    },
                    {
                        "username": "anivaries",
                        "content": "OMG finally solved this after days of banging my head with all those \\'gotcha\\' cases. Not the fastest code but deque is doing it\\'s job"
                    },
                    {
                        "username": "sathwikreddy0843",
                        "content": "Can this question can be solved using C ? How ?"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "why not, on the top there is a list of languages that you can use for this problem"
                    },
                    {
                        "username": "Rakib-Khan",
                        "content": "how to can i use in python"
                    },
                    {
                        "username": "morefromalan",
                        "content": "What is the expected behavior if the string is only one character long"
                    },
                    {
                        "username": "morefromalan",
                        "content": "[@DamianIvanochko](/DamianIvanochko) it would be nice if the problem statement said something about that. "
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "if  you mean that length of a string is 1 than the process is the same as with other code. but if string is empty(s.isEmpty()) than you have to return 0;"
                    }
                ]
            },
            {
                "id": 2028971,
                "content": [
                    {
                        "username": "letitbemini",
                        "content": "https://hashnode.com/post/sliding-window-cko39zsax04omdes1cxuxgtgw\\n\\nCheck out this article. This explains sliding window concept along with solution of this question\\n\\nPlease like the article if you found it helpful!"
                    },
                    {
                        "username": "Asadbek525",
                        "content": "This problem should be easy."
                    },
                    {
                        "username": "niteshsaxena03",
                        "content": "it could be said easy only for brute force"
                    },
                    {
                        "username": "saiprasadkhule0",
                        "content": "lavdya\\n"
                    },
                    {
                        "username": "b04502020",
                        "content": "![image](https://assets.leetcode.com/users/images/d9d0e754-f176-445d-9d62-e28d78c218b8_1639815412.3087351.png)\\nI have no adea what\\'s wrong.\\nI checked my code with the input \"bbbbb\" but it woks well in Run Code Result.\\nAnyone encontered the same problem?"
                    },
                    {
                        "username": "Mostafa3la2",
                        "content": "Same solution submitted using **C# and swift**, gives completion time of **68 ms** in **C#** and runs out of time in **Swift**, is **Swift** really that slow ?"
                    },
                    {
                        "username": "ghanshyampatil754",
                        "content": "![image](https://assets.leetcode.com/users/images/75bef5f6-1dea-4390-ada4-60a034503ef3_1629918118.0891154.png)\\n"
                    },
                    {
                        "username": "ya17kun",
                        "content": "Dont post solutions in Discussions ... can you not read?"
                    },
                    {
                        "username": "playsforfun42",
                        "content": "I\\'m going to be real with ya chief, even after looking up what substring/subsequences are, I still have 0 clue to what this is actually asking."
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Well, if you look on first testcase you can see that answer is 3 \"abc\" longest increasing substring, a substring and subsequence are two different things, substring: [a, B, C, D, f], \"BCD\" is a substring, [A, b, C, D, f] \"ACD\" is subsequence, basically substring is like dynamic sliding window, but in this case it has to be without repeating characters, you can just iterate through string and use two pointers, left = 0, right = 0, increment right by 1, when you find duplicate, set left to right + 1, and continue while right < s.length"
                    },
                    {
                        "username": "anivaries",
                        "content": "OMG finally solved this after days of banging my head with all those \\'gotcha\\' cases. Not the fastest code but deque is doing it\\'s job"
                    },
                    {
                        "username": "sathwikreddy0843",
                        "content": "Can this question can be solved using C ? How ?"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "why not, on the top there is a list of languages that you can use for this problem"
                    },
                    {
                        "username": "Rakib-Khan",
                        "content": "how to can i use in python"
                    },
                    {
                        "username": "morefromalan",
                        "content": "What is the expected behavior if the string is only one character long"
                    },
                    {
                        "username": "morefromalan",
                        "content": "[@DamianIvanochko](/DamianIvanochko) it would be nice if the problem statement said something about that. "
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "if  you mean that length of a string is 1 than the process is the same as with other code. but if string is empty(s.isEmpty()) than you have to return 0;"
                    }
                ]
            },
            {
                "id": 2024460,
                "content": [
                    {
                        "username": "Aditya_leet170802",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        set<int> sett;\\n        int count=1;\\n        int i=0;\\n        int j=1;\\n        int flag = 0; \\n\\n        if(s.size() <= 1){\\n            return s.size();\\n        }\\n        else if( s.size()==2){     \\n            if(s[0] == s[1]){\\n                return 1;\\n            }\\n            else{\\n                return 2;\\n            }\\n        }\\n        else{                   \\n \\n            while(j <= s.size()){\\n                if(s[i] == s[j]){\\n                    sett.insert(count);\\n                    count = 1;\\n                    i++;\\n                    j = i+1;\\n                }\\n                else{\\n                    for(int k=i;k<j;k++){\\n                        if(s[k] == s[j]){\\n                            flag = 1;\\n                        }\\n                    }\\n                    if(flag == 0){\\n                        j++;\\n                        count++;\\n                    }\\n                    else{\\n                        sett.insert(count);\\n                        count = 1;\\n                        i++;\\n                        j = i+1; \\n                    }\\n                }\\n            }\\n        }\\n        int max = *(sett.rbegin());\\n        return max;\\n    }\\n};\\n\\n\\ncan anybody help me with my code, for 3rd case my output is coming 2 \\n"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code is missing the insertion of the final count value into the sett after the while loop ends, which can lead to an incorrect result if the longest substring is at the end of the string. After the while loop, add sett.insert(count); to ensure the last counted value is considered when determining the maximum length."
                    },
                    {
                        "username": "richadubey3323",
                        "content": "why is it not working for testcase s=\" \"??\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        HashSet<Character> set=new HashSet<>();\\n        int max=0, count=0;\\n        for(int i=0;i<s.length();i++){\\n            char ch=s.charAt(i);\\n            if(!set.contains(ch)){\\n                set.add(ch);\\n                count++;\\n            }\\n            else{\\n                set.clear();\\n                if(count>max){\\n                    max=count;\\n                }\\n                count=0;\\n                i--;\\n            }\\n        }\\n        return max;\\n    }\\n}"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code fails for the testcase s=\" \" because when encountering a single character, it\\'s added to the set, but the max value is never updated unless a duplicate character is found later. To fix this, after the for-loop, add a check to update max with count if count is greater than max."
                    },
                    {
                        "username": "kongnakornna",
                        "content": "``````\\nfunction lengthOfLongestSubstring(s: string): number {\\n    let maxLength = 0;\\n    let start = 0;\\n    const charIndexMap: { [key: string]: number } = {};\\n\\n    for (let end = 0; end < s.length; end++) {\\n        const currentChar = s[end];\\n\\n        if (currentChar in charIndexMap && charIndexMap[currentChar] >= start) {\\n            start = charIndexMap[currentChar] + 1;\\n        }\\n\\n        charIndexMap[currentChar] = end;\\n        maxLength = Math.max(maxLength, end - start + 1);\\n    }\\n\\n    return maxLength;\\n}\\n\\n// Test cases\\nconst s1 = \"abcabcbb\";\\nconsole.log(lengthOfLongestSubstring(s1)); // Output: 3\\n\\nconst s2 = \"bbbbb\";\\nconsole.log(lengthOfLongestSubstring(s2)); // Output: 1\\n\\nconst s3 = \"pwwkew\";\\nconsole.log(lengthOfLongestSubstring(s3)); // Output: 3\\n\\n/*\\nIn this solution, we use a sliding window approach. We maintain two pointers, start and end, representing the current window\\'s boundaries. We also maintain a charIndexMap to store the most recent index where each character appeared.\\n\\nAs we iterate through the string, if we encounter a character that has been seen before and its index is within the current window\\'s boundaries, we update the start pointer to move right after the last occurrence of that character. This ensures that we\\'re maintaining a substring without repeating characters.\\n\\nWe update the charIndexMap with the current character\\'s index and calculate the length of the current substring. We keep track of the maximum length encountered so far and return it at the end.\\n \\n \\u0E43\\u0E19\\u0E01\\u0E32\\u0E23\\u0E41\\u0E01\\u0E49\\u0E1B\\u0E31\\u0E0D\\u0E2B\\u0E32\\u0E19\\u0E35\\u0E49 \\u0E40\\u0E23\\u0E32\\u0E43\\u0E0A\\u0E49\\u0E27\\u0E34\\u0E18\\u0E35\\u0E2B\\u0E19\\u0E49\\u0E32\\u0E15\\u0E48\\u0E32\\u0E07\\u0E1A\\u0E32\\u0E19\\u0E40\\u0E25\\u0E37\\u0E48\\u0E2D\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E21\\u0E35\\u0E1E\\u0E2D\\u0E22\\u0E19\\u0E4C\\u0E40\\u0E15\\u0E2D\\u0E23\\u0E4C\\u0E2A\\u0E2D\\u0E07\\u0E15\\u0E31\\u0E27 \\u0E04\\u0E37\\u0E2D\\u0E08\\u0E38\\u0E14\\u0E40\\u0E23\\u0E34\\u0E48\\u0E21\\u0E15\\u0E49\\u0E19\\u0E41\\u0E25\\u0E30\\u0E08\\u0E38\\u0E14\\u0E2A\\u0E34\\u0E49\\u0E19\\u0E2A\\u0E38\\u0E14 \\u0E0B\\u0E36\\u0E48\\u0E07\\u0E41\\u0E2A\\u0E14\\u0E07\\u0E16\\u0E36\\u0E07\\u0E02\\u0E2D\\u0E1A\\u0E40\\u0E02\\u0E15\\u0E02\\u0E2D\\u0E07\\u0E2B\\u0E19\\u0E49\\u0E32\\u0E15\\u0E48\\u0E32\\u0E07\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E22\\u0E31\\u0E07\\u0E23\\u0E31\\u0E01\\u0E29\\u0E32 charIndexMap \\u0E40\\u0E1E\\u0E37\\u0E48\\u0E2D\\u0E08\\u0E31\\u0E14\\u0E40\\u0E01\\u0E47\\u0E1A\\u0E14\\u0E31\\u0E0A\\u0E19\\u0E35\\u0E25\\u0E48\\u0E32\\u0E2A\\u0E38\\u0E14\\u0E17\\u0E35\\u0E48\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E41\\u0E15\\u0E48\\u0E25\\u0E30\\u0E15\\u0E31\\u0E27\\u0E1B\\u0E23\\u0E32\\u0E01\\u0E0F\\u0E02\\u0E36\\u0E49\\u0E19\\n\\n\\u0E02\\u0E13\\u0E30\\u0E17\\u0E35\\u0E48\\u0E40\\u0E23\\u0E32\\u0E27\\u0E19\\u0E0B\\u0E49\\u0E33\\u0E43\\u0E19\\u0E2A\\u0E15\\u0E23\\u0E34\\u0E07 \\u0E2B\\u0E32\\u0E01\\u0E40\\u0E23\\u0E32\\u0E1E\\u0E1A\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E17\\u0E35\\u0E48\\u0E40\\u0E04\\u0E22\\u0E40\\u0E2B\\u0E47\\u0E19\\u0E21\\u0E32\\u0E01\\u0E48\\u0E2D\\u0E19\\u0E41\\u0E25\\u0E30\\u0E14\\u0E31\\u0E0A\\u0E19\\u0E35\\u0E2D\\u0E22\\u0E39\\u0E48\\u0E20\\u0E32\\u0E22\\u0E43\\u0E19\\u0E02\\u0E2D\\u0E1A\\u0E40\\u0E02\\u0E15\\u0E02\\u0E2D\\u0E07\\u0E2B\\u0E19\\u0E49\\u0E32\\u0E15\\u0E48\\u0E32\\u0E07\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E08\\u0E30\\u0E2D\\u0E31\\u0E1B\\u0E40\\u0E14\\u0E15\\u0E15\\u0E31\\u0E27\\u0E0A\\u0E35\\u0E49\\u0E40\\u0E23\\u0E34\\u0E48\\u0E21\\u0E15\\u0E49\\u0E19\\u0E43\\u0E2B\\u0E49\\u0E40\\u0E25\\u0E37\\u0E48\\u0E2D\\u0E19\\u0E44\\u0E1B\\u0E17\\u0E32\\u0E07\\u0E02\\u0E27\\u0E32\\u0E2B\\u0E25\\u0E31\\u0E07\\u0E08\\u0E32\\u0E01\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E19\\u0E31\\u0E49\\u0E19\\u0E1B\\u0E23\\u0E32\\u0E01\\u0E0F\\u0E02\\u0E36\\u0E49\\u0E19\\u0E04\\u0E23\\u0E31\\u0E49\\u0E07\\u0E25\\u0E48\\u0E32\\u0E2A\\u0E38\\u0E14 \\u0E2A\\u0E34\\u0E48\\u0E07\\u0E19\\u0E35\\u0E49\\u0E17\\u0E33\\u0E43\\u0E2B\\u0E49\\u0E41\\u0E19\\u0E48\\u0E43\\u0E08\\u0E27\\u0E48\\u0E32\\u0E40\\u0E23\\u0E32\\u0E04\\u0E07\\u0E2A\\u0E15\\u0E23\\u0E34\\u0E07\\u0E22\\u0E48\\u0E2D\\u0E22\\u0E44\\u0E27\\u0E49\\u0E42\\u0E14\\u0E22\\u0E44\\u0E21\\u0E48\\u0E21\\u0E35\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E0B\\u0E49\\u0E33\\n\\n\\u0E40\\u0E23\\u0E32\\u0E2D\\u0E31\\u0E1B\\u0E40\\u0E14\\u0E15 charIndexMap \\u0E14\\u0E49\\u0E27\\u0E22\\u0E14\\u0E31\\u0E0A\\u0E19\\u0E35\\u0E02\\u0E2D\\u0E07\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E41\\u0E25\\u0E30\\u0E04\\u0E33\\u0E19\\u0E27\\u0E13\\u0E04\\u0E27\\u0E32\\u0E21\\u0E22\\u0E32\\u0E27\\u0E02\\u0E2D\\u0E07\\u0E2A\\u0E15\\u0E23\\u0E34\\u0E07\\u0E22\\u0E48\\u0E2D\\u0E22\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E15\\u0E34\\u0E14\\u0E15\\u0E32\\u0E21\\u0E04\\u0E27\\u0E32\\u0E21\\u0E22\\u0E32\\u0E27\\u0E2A\\u0E39\\u0E07\\u0E2A\\u0E38\\u0E14\\u0E17\\u0E35\\u0E48\\u0E1E\\u0E1A\\u0E08\\u0E19\\u0E16\\u0E36\\u0E07\\u0E15\\u0E2D\\u0E19\\u0E19\\u0E35\\u0E49\\u0E41\\u0E25\\u0E30\\u0E2A\\u0E48\\u0E07\\u0E04\\u0E37\\u0E19\\u0E43\\u0E19\\u0E15\\u0E2D\\u0E19\\u0E17\\u0E49\\u0E32\\u0E22\\n \\n */\\n``````"
                    },
                    {
                        "username": "Zersya",
                        "content": " `Output Limit Exceeded `\\n\\nWhat happen? I got all the test passed"
                    },
                    {
                        "username": "CarlosHsu",
                        "content": "why \"DVD\" the answer is 3"
                    },
                    {
                        "username": "JohnSyoft",
                        "content": "[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "jayaramv98",
                        "content": "What should I return from the function the length of the substring or the substring itself?\\nI returned the length until now and it is not accepting. There is no clear statement explaining the return value."
                    },
                    {
                        "username": "_chandra_bhushan_",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        HashSet<Character> hs = new HashSet<>();\\n        int curr_max = 0;\\n        int left = 0;\\n        for(int right = 0 ; right < s.length() ; right++){\\n            if(!hs.contains(s.charAt(right))){\\n                hs.add(s.charAt(right));\\n                curr_max = Math.max(curr_max , right-left+1);\\n            }\\n            else{\\n                while(s.charAt(left)!=s.charAt(right)){\\n                    hs.remove(s.charAt(left));\\n                    left++;\\n                }\\n                hs.remove(s.charAt(left));\\n                left++;\\n                hs.add(s.charAt(right));\\n            }\\n        }\\n        return curr_max;    \\n    }\\n}"
                    },
                    {
                        "username": "_chandra_bhushan_",
                        "content": "return curr_max;\\n"
                    },
                    {
                        "username": "_chandra_bhushan_",
                        "content": "We can use Hashset and two pointer approach to solve this problem"
                    },
                    {
                        "username": "sachin_mittal1",
                        "content": "What is wrong in my code:\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n\\n        int n = s.length();\\n        int maxLen = INT_MIN;\\n\\n        for(int i=0; i<n; i++){\\n            set<int> freq;\\n            int len = 0;\\n            for(int j=i; j<n; j++){\\n                if(freq.find(s[j]) == freq.end()){\\n                    len++;\\n                    freq.insert(s[i]);\\n                }else{\\n                    break;\\n                }\\n            }\\n            maxLen = max(maxLen, len);\\n            cout<<maxLen<<\"  \"<<len<<endl;\\n            freq.clear();\\n        }\\n\\n        return maxLen;\\n    }\\n};"
                    },
                    {
                        "username": "janis__",
                        "content": "The issue in your code is that you\\'re inserting s[i] into the freq set inside the inner loop, when you should be inserting s[j]. Change freq.insert(s[i]); to freq.insert(s[j]); to correctly track the characters you\\'ve seen."
                    },
                    {
                        "username": "sachin_mittal1",
                        "content": "What is wrong in below code:\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n\n        int n = s.length();\n        int maxLen = INT_MIN;\n\n        for(int i=0; i<n; i++){\n            set<int> freq;\n            int len = 0;\n            for(int j=i; j<n; j++){\n                if(freq.find(s[j]) == freq.end()){\n                    len++;\n                    freq.insert(s[i]);\n                }else{\n                    break;\n                }\n            }\n            maxLen = max(maxLen, len);\n            cout<<maxLen<<\"  \"<<len<<endl;\n            freq.clear();\n        }\n\n        return maxLen;\n    }\n};"
                    }
                ]
            },
            {
                "id": 2023771,
                "content": [
                    {
                        "username": "Aditya_leet170802",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        set<int> sett;\\n        int count=1;\\n        int i=0;\\n        int j=1;\\n        int flag = 0; \\n\\n        if(s.size() <= 1){\\n            return s.size();\\n        }\\n        else if( s.size()==2){     \\n            if(s[0] == s[1]){\\n                return 1;\\n            }\\n            else{\\n                return 2;\\n            }\\n        }\\n        else{                   \\n \\n            while(j <= s.size()){\\n                if(s[i] == s[j]){\\n                    sett.insert(count);\\n                    count = 1;\\n                    i++;\\n                    j = i+1;\\n                }\\n                else{\\n                    for(int k=i;k<j;k++){\\n                        if(s[k] == s[j]){\\n                            flag = 1;\\n                        }\\n                    }\\n                    if(flag == 0){\\n                        j++;\\n                        count++;\\n                    }\\n                    else{\\n                        sett.insert(count);\\n                        count = 1;\\n                        i++;\\n                        j = i+1; \\n                    }\\n                }\\n            }\\n        }\\n        int max = *(sett.rbegin());\\n        return max;\\n    }\\n};\\n\\n\\ncan anybody help me with my code, for 3rd case my output is coming 2 \\n"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code is missing the insertion of the final count value into the sett after the while loop ends, which can lead to an incorrect result if the longest substring is at the end of the string. After the while loop, add sett.insert(count); to ensure the last counted value is considered when determining the maximum length."
                    },
                    {
                        "username": "richadubey3323",
                        "content": "why is it not working for testcase s=\" \"??\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        HashSet<Character> set=new HashSet<>();\\n        int max=0, count=0;\\n        for(int i=0;i<s.length();i++){\\n            char ch=s.charAt(i);\\n            if(!set.contains(ch)){\\n                set.add(ch);\\n                count++;\\n            }\\n            else{\\n                set.clear();\\n                if(count>max){\\n                    max=count;\\n                }\\n                count=0;\\n                i--;\\n            }\\n        }\\n        return max;\\n    }\\n}"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code fails for the testcase s=\" \" because when encountering a single character, it\\'s added to the set, but the max value is never updated unless a duplicate character is found later. To fix this, after the for-loop, add a check to update max with count if count is greater than max."
                    },
                    {
                        "username": "kongnakornna",
                        "content": "``````\\nfunction lengthOfLongestSubstring(s: string): number {\\n    let maxLength = 0;\\n    let start = 0;\\n    const charIndexMap: { [key: string]: number } = {};\\n\\n    for (let end = 0; end < s.length; end++) {\\n        const currentChar = s[end];\\n\\n        if (currentChar in charIndexMap && charIndexMap[currentChar] >= start) {\\n            start = charIndexMap[currentChar] + 1;\\n        }\\n\\n        charIndexMap[currentChar] = end;\\n        maxLength = Math.max(maxLength, end - start + 1);\\n    }\\n\\n    return maxLength;\\n}\\n\\n// Test cases\\nconst s1 = \"abcabcbb\";\\nconsole.log(lengthOfLongestSubstring(s1)); // Output: 3\\n\\nconst s2 = \"bbbbb\";\\nconsole.log(lengthOfLongestSubstring(s2)); // Output: 1\\n\\nconst s3 = \"pwwkew\";\\nconsole.log(lengthOfLongestSubstring(s3)); // Output: 3\\n\\n/*\\nIn this solution, we use a sliding window approach. We maintain two pointers, start and end, representing the current window\\'s boundaries. We also maintain a charIndexMap to store the most recent index where each character appeared.\\n\\nAs we iterate through the string, if we encounter a character that has been seen before and its index is within the current window\\'s boundaries, we update the start pointer to move right after the last occurrence of that character. This ensures that we\\'re maintaining a substring without repeating characters.\\n\\nWe update the charIndexMap with the current character\\'s index and calculate the length of the current substring. We keep track of the maximum length encountered so far and return it at the end.\\n \\n \\u0E43\\u0E19\\u0E01\\u0E32\\u0E23\\u0E41\\u0E01\\u0E49\\u0E1B\\u0E31\\u0E0D\\u0E2B\\u0E32\\u0E19\\u0E35\\u0E49 \\u0E40\\u0E23\\u0E32\\u0E43\\u0E0A\\u0E49\\u0E27\\u0E34\\u0E18\\u0E35\\u0E2B\\u0E19\\u0E49\\u0E32\\u0E15\\u0E48\\u0E32\\u0E07\\u0E1A\\u0E32\\u0E19\\u0E40\\u0E25\\u0E37\\u0E48\\u0E2D\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E21\\u0E35\\u0E1E\\u0E2D\\u0E22\\u0E19\\u0E4C\\u0E40\\u0E15\\u0E2D\\u0E23\\u0E4C\\u0E2A\\u0E2D\\u0E07\\u0E15\\u0E31\\u0E27 \\u0E04\\u0E37\\u0E2D\\u0E08\\u0E38\\u0E14\\u0E40\\u0E23\\u0E34\\u0E48\\u0E21\\u0E15\\u0E49\\u0E19\\u0E41\\u0E25\\u0E30\\u0E08\\u0E38\\u0E14\\u0E2A\\u0E34\\u0E49\\u0E19\\u0E2A\\u0E38\\u0E14 \\u0E0B\\u0E36\\u0E48\\u0E07\\u0E41\\u0E2A\\u0E14\\u0E07\\u0E16\\u0E36\\u0E07\\u0E02\\u0E2D\\u0E1A\\u0E40\\u0E02\\u0E15\\u0E02\\u0E2D\\u0E07\\u0E2B\\u0E19\\u0E49\\u0E32\\u0E15\\u0E48\\u0E32\\u0E07\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E22\\u0E31\\u0E07\\u0E23\\u0E31\\u0E01\\u0E29\\u0E32 charIndexMap \\u0E40\\u0E1E\\u0E37\\u0E48\\u0E2D\\u0E08\\u0E31\\u0E14\\u0E40\\u0E01\\u0E47\\u0E1A\\u0E14\\u0E31\\u0E0A\\u0E19\\u0E35\\u0E25\\u0E48\\u0E32\\u0E2A\\u0E38\\u0E14\\u0E17\\u0E35\\u0E48\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E41\\u0E15\\u0E48\\u0E25\\u0E30\\u0E15\\u0E31\\u0E27\\u0E1B\\u0E23\\u0E32\\u0E01\\u0E0F\\u0E02\\u0E36\\u0E49\\u0E19\\n\\n\\u0E02\\u0E13\\u0E30\\u0E17\\u0E35\\u0E48\\u0E40\\u0E23\\u0E32\\u0E27\\u0E19\\u0E0B\\u0E49\\u0E33\\u0E43\\u0E19\\u0E2A\\u0E15\\u0E23\\u0E34\\u0E07 \\u0E2B\\u0E32\\u0E01\\u0E40\\u0E23\\u0E32\\u0E1E\\u0E1A\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E17\\u0E35\\u0E48\\u0E40\\u0E04\\u0E22\\u0E40\\u0E2B\\u0E47\\u0E19\\u0E21\\u0E32\\u0E01\\u0E48\\u0E2D\\u0E19\\u0E41\\u0E25\\u0E30\\u0E14\\u0E31\\u0E0A\\u0E19\\u0E35\\u0E2D\\u0E22\\u0E39\\u0E48\\u0E20\\u0E32\\u0E22\\u0E43\\u0E19\\u0E02\\u0E2D\\u0E1A\\u0E40\\u0E02\\u0E15\\u0E02\\u0E2D\\u0E07\\u0E2B\\u0E19\\u0E49\\u0E32\\u0E15\\u0E48\\u0E32\\u0E07\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E08\\u0E30\\u0E2D\\u0E31\\u0E1B\\u0E40\\u0E14\\u0E15\\u0E15\\u0E31\\u0E27\\u0E0A\\u0E35\\u0E49\\u0E40\\u0E23\\u0E34\\u0E48\\u0E21\\u0E15\\u0E49\\u0E19\\u0E43\\u0E2B\\u0E49\\u0E40\\u0E25\\u0E37\\u0E48\\u0E2D\\u0E19\\u0E44\\u0E1B\\u0E17\\u0E32\\u0E07\\u0E02\\u0E27\\u0E32\\u0E2B\\u0E25\\u0E31\\u0E07\\u0E08\\u0E32\\u0E01\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E19\\u0E31\\u0E49\\u0E19\\u0E1B\\u0E23\\u0E32\\u0E01\\u0E0F\\u0E02\\u0E36\\u0E49\\u0E19\\u0E04\\u0E23\\u0E31\\u0E49\\u0E07\\u0E25\\u0E48\\u0E32\\u0E2A\\u0E38\\u0E14 \\u0E2A\\u0E34\\u0E48\\u0E07\\u0E19\\u0E35\\u0E49\\u0E17\\u0E33\\u0E43\\u0E2B\\u0E49\\u0E41\\u0E19\\u0E48\\u0E43\\u0E08\\u0E27\\u0E48\\u0E32\\u0E40\\u0E23\\u0E32\\u0E04\\u0E07\\u0E2A\\u0E15\\u0E23\\u0E34\\u0E07\\u0E22\\u0E48\\u0E2D\\u0E22\\u0E44\\u0E27\\u0E49\\u0E42\\u0E14\\u0E22\\u0E44\\u0E21\\u0E48\\u0E21\\u0E35\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E0B\\u0E49\\u0E33\\n\\n\\u0E40\\u0E23\\u0E32\\u0E2D\\u0E31\\u0E1B\\u0E40\\u0E14\\u0E15 charIndexMap \\u0E14\\u0E49\\u0E27\\u0E22\\u0E14\\u0E31\\u0E0A\\u0E19\\u0E35\\u0E02\\u0E2D\\u0E07\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E41\\u0E25\\u0E30\\u0E04\\u0E33\\u0E19\\u0E27\\u0E13\\u0E04\\u0E27\\u0E32\\u0E21\\u0E22\\u0E32\\u0E27\\u0E02\\u0E2D\\u0E07\\u0E2A\\u0E15\\u0E23\\u0E34\\u0E07\\u0E22\\u0E48\\u0E2D\\u0E22\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E15\\u0E34\\u0E14\\u0E15\\u0E32\\u0E21\\u0E04\\u0E27\\u0E32\\u0E21\\u0E22\\u0E32\\u0E27\\u0E2A\\u0E39\\u0E07\\u0E2A\\u0E38\\u0E14\\u0E17\\u0E35\\u0E48\\u0E1E\\u0E1A\\u0E08\\u0E19\\u0E16\\u0E36\\u0E07\\u0E15\\u0E2D\\u0E19\\u0E19\\u0E35\\u0E49\\u0E41\\u0E25\\u0E30\\u0E2A\\u0E48\\u0E07\\u0E04\\u0E37\\u0E19\\u0E43\\u0E19\\u0E15\\u0E2D\\u0E19\\u0E17\\u0E49\\u0E32\\u0E22\\n \\n */\\n``````"
                    },
                    {
                        "username": "Zersya",
                        "content": " `Output Limit Exceeded `\\n\\nWhat happen? I got all the test passed"
                    },
                    {
                        "username": "CarlosHsu",
                        "content": "why \"DVD\" the answer is 3"
                    },
                    {
                        "username": "JohnSyoft",
                        "content": "[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "jayaramv98",
                        "content": "What should I return from the function the length of the substring or the substring itself?\\nI returned the length until now and it is not accepting. There is no clear statement explaining the return value."
                    },
                    {
                        "username": "_chandra_bhushan_",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        HashSet<Character> hs = new HashSet<>();\\n        int curr_max = 0;\\n        int left = 0;\\n        for(int right = 0 ; right < s.length() ; right++){\\n            if(!hs.contains(s.charAt(right))){\\n                hs.add(s.charAt(right));\\n                curr_max = Math.max(curr_max , right-left+1);\\n            }\\n            else{\\n                while(s.charAt(left)!=s.charAt(right)){\\n                    hs.remove(s.charAt(left));\\n                    left++;\\n                }\\n                hs.remove(s.charAt(left));\\n                left++;\\n                hs.add(s.charAt(right));\\n            }\\n        }\\n        return curr_max;    \\n    }\\n}"
                    },
                    {
                        "username": "_chandra_bhushan_",
                        "content": "return curr_max;\\n"
                    },
                    {
                        "username": "_chandra_bhushan_",
                        "content": "We can use Hashset and two pointer approach to solve this problem"
                    },
                    {
                        "username": "sachin_mittal1",
                        "content": "What is wrong in my code:\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n\\n        int n = s.length();\\n        int maxLen = INT_MIN;\\n\\n        for(int i=0; i<n; i++){\\n            set<int> freq;\\n            int len = 0;\\n            for(int j=i; j<n; j++){\\n                if(freq.find(s[j]) == freq.end()){\\n                    len++;\\n                    freq.insert(s[i]);\\n                }else{\\n                    break;\\n                }\\n            }\\n            maxLen = max(maxLen, len);\\n            cout<<maxLen<<\"  \"<<len<<endl;\\n            freq.clear();\\n        }\\n\\n        return maxLen;\\n    }\\n};"
                    },
                    {
                        "username": "janis__",
                        "content": "The issue in your code is that you\\'re inserting s[i] into the freq set inside the inner loop, when you should be inserting s[j]. Change freq.insert(s[i]); to freq.insert(s[j]); to correctly track the characters you\\'ve seen."
                    },
                    {
                        "username": "sachin_mittal1",
                        "content": "What is wrong in below code:\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n\n        int n = s.length();\n        int maxLen = INT_MIN;\n\n        for(int i=0; i<n; i++){\n            set<int> freq;\n            int len = 0;\n            for(int j=i; j<n; j++){\n                if(freq.find(s[j]) == freq.end()){\n                    len++;\n                    freq.insert(s[i]);\n                }else{\n                    break;\n                }\n            }\n            maxLen = max(maxLen, len);\n            cout<<maxLen<<\"  \"<<len<<endl;\n            freq.clear();\n        }\n\n        return maxLen;\n    }\n};"
                    }
                ]
            },
            {
                "id": 2018694,
                "content": [
                    {
                        "username": "Aditya_leet170802",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        set<int> sett;\\n        int count=1;\\n        int i=0;\\n        int j=1;\\n        int flag = 0; \\n\\n        if(s.size() <= 1){\\n            return s.size();\\n        }\\n        else if( s.size()==2){     \\n            if(s[0] == s[1]){\\n                return 1;\\n            }\\n            else{\\n                return 2;\\n            }\\n        }\\n        else{                   \\n \\n            while(j <= s.size()){\\n                if(s[i] == s[j]){\\n                    sett.insert(count);\\n                    count = 1;\\n                    i++;\\n                    j = i+1;\\n                }\\n                else{\\n                    for(int k=i;k<j;k++){\\n                        if(s[k] == s[j]){\\n                            flag = 1;\\n                        }\\n                    }\\n                    if(flag == 0){\\n                        j++;\\n                        count++;\\n                    }\\n                    else{\\n                        sett.insert(count);\\n                        count = 1;\\n                        i++;\\n                        j = i+1; \\n                    }\\n                }\\n            }\\n        }\\n        int max = *(sett.rbegin());\\n        return max;\\n    }\\n};\\n\\n\\ncan anybody help me with my code, for 3rd case my output is coming 2 \\n"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code is missing the insertion of the final count value into the sett after the while loop ends, which can lead to an incorrect result if the longest substring is at the end of the string. After the while loop, add sett.insert(count); to ensure the last counted value is considered when determining the maximum length."
                    },
                    {
                        "username": "richadubey3323",
                        "content": "why is it not working for testcase s=\" \"??\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        HashSet<Character> set=new HashSet<>();\\n        int max=0, count=0;\\n        for(int i=0;i<s.length();i++){\\n            char ch=s.charAt(i);\\n            if(!set.contains(ch)){\\n                set.add(ch);\\n                count++;\\n            }\\n            else{\\n                set.clear();\\n                if(count>max){\\n                    max=count;\\n                }\\n                count=0;\\n                i--;\\n            }\\n        }\\n        return max;\\n    }\\n}"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code fails for the testcase s=\" \" because when encountering a single character, it\\'s added to the set, but the max value is never updated unless a duplicate character is found later. To fix this, after the for-loop, add a check to update max with count if count is greater than max."
                    },
                    {
                        "username": "kongnakornna",
                        "content": "``````\\nfunction lengthOfLongestSubstring(s: string): number {\\n    let maxLength = 0;\\n    let start = 0;\\n    const charIndexMap: { [key: string]: number } = {};\\n\\n    for (let end = 0; end < s.length; end++) {\\n        const currentChar = s[end];\\n\\n        if (currentChar in charIndexMap && charIndexMap[currentChar] >= start) {\\n            start = charIndexMap[currentChar] + 1;\\n        }\\n\\n        charIndexMap[currentChar] = end;\\n        maxLength = Math.max(maxLength, end - start + 1);\\n    }\\n\\n    return maxLength;\\n}\\n\\n// Test cases\\nconst s1 = \"abcabcbb\";\\nconsole.log(lengthOfLongestSubstring(s1)); // Output: 3\\n\\nconst s2 = \"bbbbb\";\\nconsole.log(lengthOfLongestSubstring(s2)); // Output: 1\\n\\nconst s3 = \"pwwkew\";\\nconsole.log(lengthOfLongestSubstring(s3)); // Output: 3\\n\\n/*\\nIn this solution, we use a sliding window approach. We maintain two pointers, start and end, representing the current window\\'s boundaries. We also maintain a charIndexMap to store the most recent index where each character appeared.\\n\\nAs we iterate through the string, if we encounter a character that has been seen before and its index is within the current window\\'s boundaries, we update the start pointer to move right after the last occurrence of that character. This ensures that we\\'re maintaining a substring without repeating characters.\\n\\nWe update the charIndexMap with the current character\\'s index and calculate the length of the current substring. We keep track of the maximum length encountered so far and return it at the end.\\n \\n \\u0E43\\u0E19\\u0E01\\u0E32\\u0E23\\u0E41\\u0E01\\u0E49\\u0E1B\\u0E31\\u0E0D\\u0E2B\\u0E32\\u0E19\\u0E35\\u0E49 \\u0E40\\u0E23\\u0E32\\u0E43\\u0E0A\\u0E49\\u0E27\\u0E34\\u0E18\\u0E35\\u0E2B\\u0E19\\u0E49\\u0E32\\u0E15\\u0E48\\u0E32\\u0E07\\u0E1A\\u0E32\\u0E19\\u0E40\\u0E25\\u0E37\\u0E48\\u0E2D\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E21\\u0E35\\u0E1E\\u0E2D\\u0E22\\u0E19\\u0E4C\\u0E40\\u0E15\\u0E2D\\u0E23\\u0E4C\\u0E2A\\u0E2D\\u0E07\\u0E15\\u0E31\\u0E27 \\u0E04\\u0E37\\u0E2D\\u0E08\\u0E38\\u0E14\\u0E40\\u0E23\\u0E34\\u0E48\\u0E21\\u0E15\\u0E49\\u0E19\\u0E41\\u0E25\\u0E30\\u0E08\\u0E38\\u0E14\\u0E2A\\u0E34\\u0E49\\u0E19\\u0E2A\\u0E38\\u0E14 \\u0E0B\\u0E36\\u0E48\\u0E07\\u0E41\\u0E2A\\u0E14\\u0E07\\u0E16\\u0E36\\u0E07\\u0E02\\u0E2D\\u0E1A\\u0E40\\u0E02\\u0E15\\u0E02\\u0E2D\\u0E07\\u0E2B\\u0E19\\u0E49\\u0E32\\u0E15\\u0E48\\u0E32\\u0E07\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E22\\u0E31\\u0E07\\u0E23\\u0E31\\u0E01\\u0E29\\u0E32 charIndexMap \\u0E40\\u0E1E\\u0E37\\u0E48\\u0E2D\\u0E08\\u0E31\\u0E14\\u0E40\\u0E01\\u0E47\\u0E1A\\u0E14\\u0E31\\u0E0A\\u0E19\\u0E35\\u0E25\\u0E48\\u0E32\\u0E2A\\u0E38\\u0E14\\u0E17\\u0E35\\u0E48\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E41\\u0E15\\u0E48\\u0E25\\u0E30\\u0E15\\u0E31\\u0E27\\u0E1B\\u0E23\\u0E32\\u0E01\\u0E0F\\u0E02\\u0E36\\u0E49\\u0E19\\n\\n\\u0E02\\u0E13\\u0E30\\u0E17\\u0E35\\u0E48\\u0E40\\u0E23\\u0E32\\u0E27\\u0E19\\u0E0B\\u0E49\\u0E33\\u0E43\\u0E19\\u0E2A\\u0E15\\u0E23\\u0E34\\u0E07 \\u0E2B\\u0E32\\u0E01\\u0E40\\u0E23\\u0E32\\u0E1E\\u0E1A\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E17\\u0E35\\u0E48\\u0E40\\u0E04\\u0E22\\u0E40\\u0E2B\\u0E47\\u0E19\\u0E21\\u0E32\\u0E01\\u0E48\\u0E2D\\u0E19\\u0E41\\u0E25\\u0E30\\u0E14\\u0E31\\u0E0A\\u0E19\\u0E35\\u0E2D\\u0E22\\u0E39\\u0E48\\u0E20\\u0E32\\u0E22\\u0E43\\u0E19\\u0E02\\u0E2D\\u0E1A\\u0E40\\u0E02\\u0E15\\u0E02\\u0E2D\\u0E07\\u0E2B\\u0E19\\u0E49\\u0E32\\u0E15\\u0E48\\u0E32\\u0E07\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E08\\u0E30\\u0E2D\\u0E31\\u0E1B\\u0E40\\u0E14\\u0E15\\u0E15\\u0E31\\u0E27\\u0E0A\\u0E35\\u0E49\\u0E40\\u0E23\\u0E34\\u0E48\\u0E21\\u0E15\\u0E49\\u0E19\\u0E43\\u0E2B\\u0E49\\u0E40\\u0E25\\u0E37\\u0E48\\u0E2D\\u0E19\\u0E44\\u0E1B\\u0E17\\u0E32\\u0E07\\u0E02\\u0E27\\u0E32\\u0E2B\\u0E25\\u0E31\\u0E07\\u0E08\\u0E32\\u0E01\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E19\\u0E31\\u0E49\\u0E19\\u0E1B\\u0E23\\u0E32\\u0E01\\u0E0F\\u0E02\\u0E36\\u0E49\\u0E19\\u0E04\\u0E23\\u0E31\\u0E49\\u0E07\\u0E25\\u0E48\\u0E32\\u0E2A\\u0E38\\u0E14 \\u0E2A\\u0E34\\u0E48\\u0E07\\u0E19\\u0E35\\u0E49\\u0E17\\u0E33\\u0E43\\u0E2B\\u0E49\\u0E41\\u0E19\\u0E48\\u0E43\\u0E08\\u0E27\\u0E48\\u0E32\\u0E40\\u0E23\\u0E32\\u0E04\\u0E07\\u0E2A\\u0E15\\u0E23\\u0E34\\u0E07\\u0E22\\u0E48\\u0E2D\\u0E22\\u0E44\\u0E27\\u0E49\\u0E42\\u0E14\\u0E22\\u0E44\\u0E21\\u0E48\\u0E21\\u0E35\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E0B\\u0E49\\u0E33\\n\\n\\u0E40\\u0E23\\u0E32\\u0E2D\\u0E31\\u0E1B\\u0E40\\u0E14\\u0E15 charIndexMap \\u0E14\\u0E49\\u0E27\\u0E22\\u0E14\\u0E31\\u0E0A\\u0E19\\u0E35\\u0E02\\u0E2D\\u0E07\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E41\\u0E25\\u0E30\\u0E04\\u0E33\\u0E19\\u0E27\\u0E13\\u0E04\\u0E27\\u0E32\\u0E21\\u0E22\\u0E32\\u0E27\\u0E02\\u0E2D\\u0E07\\u0E2A\\u0E15\\u0E23\\u0E34\\u0E07\\u0E22\\u0E48\\u0E2D\\u0E22\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E15\\u0E34\\u0E14\\u0E15\\u0E32\\u0E21\\u0E04\\u0E27\\u0E32\\u0E21\\u0E22\\u0E32\\u0E27\\u0E2A\\u0E39\\u0E07\\u0E2A\\u0E38\\u0E14\\u0E17\\u0E35\\u0E48\\u0E1E\\u0E1A\\u0E08\\u0E19\\u0E16\\u0E36\\u0E07\\u0E15\\u0E2D\\u0E19\\u0E19\\u0E35\\u0E49\\u0E41\\u0E25\\u0E30\\u0E2A\\u0E48\\u0E07\\u0E04\\u0E37\\u0E19\\u0E43\\u0E19\\u0E15\\u0E2D\\u0E19\\u0E17\\u0E49\\u0E32\\u0E22\\n \\n */\\n``````"
                    },
                    {
                        "username": "Zersya",
                        "content": " `Output Limit Exceeded `\\n\\nWhat happen? I got all the test passed"
                    },
                    {
                        "username": "CarlosHsu",
                        "content": "why \"DVD\" the answer is 3"
                    },
                    {
                        "username": "JohnSyoft",
                        "content": "[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "jayaramv98",
                        "content": "What should I return from the function the length of the substring or the substring itself?\\nI returned the length until now and it is not accepting. There is no clear statement explaining the return value."
                    },
                    {
                        "username": "_chandra_bhushan_",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        HashSet<Character> hs = new HashSet<>();\\n        int curr_max = 0;\\n        int left = 0;\\n        for(int right = 0 ; right < s.length() ; right++){\\n            if(!hs.contains(s.charAt(right))){\\n                hs.add(s.charAt(right));\\n                curr_max = Math.max(curr_max , right-left+1);\\n            }\\n            else{\\n                while(s.charAt(left)!=s.charAt(right)){\\n                    hs.remove(s.charAt(left));\\n                    left++;\\n                }\\n                hs.remove(s.charAt(left));\\n                left++;\\n                hs.add(s.charAt(right));\\n            }\\n        }\\n        return curr_max;    \\n    }\\n}"
                    },
                    {
                        "username": "_chandra_bhushan_",
                        "content": "return curr_max;\\n"
                    },
                    {
                        "username": "_chandra_bhushan_",
                        "content": "We can use Hashset and two pointer approach to solve this problem"
                    },
                    {
                        "username": "sachin_mittal1",
                        "content": "What is wrong in my code:\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n\\n        int n = s.length();\\n        int maxLen = INT_MIN;\\n\\n        for(int i=0; i<n; i++){\\n            set<int> freq;\\n            int len = 0;\\n            for(int j=i; j<n; j++){\\n                if(freq.find(s[j]) == freq.end()){\\n                    len++;\\n                    freq.insert(s[i]);\\n                }else{\\n                    break;\\n                }\\n            }\\n            maxLen = max(maxLen, len);\\n            cout<<maxLen<<\"  \"<<len<<endl;\\n            freq.clear();\\n        }\\n\\n        return maxLen;\\n    }\\n};"
                    },
                    {
                        "username": "janis__",
                        "content": "The issue in your code is that you\\'re inserting s[i] into the freq set inside the inner loop, when you should be inserting s[j]. Change freq.insert(s[i]); to freq.insert(s[j]); to correctly track the characters you\\'ve seen."
                    },
                    {
                        "username": "sachin_mittal1",
                        "content": "What is wrong in below code:\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n\n        int n = s.length();\n        int maxLen = INT_MIN;\n\n        for(int i=0; i<n; i++){\n            set<int> freq;\n            int len = 0;\n            for(int j=i; j<n; j++){\n                if(freq.find(s[j]) == freq.end()){\n                    len++;\n                    freq.insert(s[i]);\n                }else{\n                    break;\n                }\n            }\n            maxLen = max(maxLen, len);\n            cout<<maxLen<<\"  \"<<len<<endl;\n            freq.clear();\n        }\n\n        return maxLen;\n    }\n};"
                    }
                ]
            },
            {
                "id": 2015566,
                "content": [
                    {
                        "username": "Aditya_leet170802",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        set<int> sett;\\n        int count=1;\\n        int i=0;\\n        int j=1;\\n        int flag = 0; \\n\\n        if(s.size() <= 1){\\n            return s.size();\\n        }\\n        else if( s.size()==2){     \\n            if(s[0] == s[1]){\\n                return 1;\\n            }\\n            else{\\n                return 2;\\n            }\\n        }\\n        else{                   \\n \\n            while(j <= s.size()){\\n                if(s[i] == s[j]){\\n                    sett.insert(count);\\n                    count = 1;\\n                    i++;\\n                    j = i+1;\\n                }\\n                else{\\n                    for(int k=i;k<j;k++){\\n                        if(s[k] == s[j]){\\n                            flag = 1;\\n                        }\\n                    }\\n                    if(flag == 0){\\n                        j++;\\n                        count++;\\n                    }\\n                    else{\\n                        sett.insert(count);\\n                        count = 1;\\n                        i++;\\n                        j = i+1; \\n                    }\\n                }\\n            }\\n        }\\n        int max = *(sett.rbegin());\\n        return max;\\n    }\\n};\\n\\n\\ncan anybody help me with my code, for 3rd case my output is coming 2 \\n"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code is missing the insertion of the final count value into the sett after the while loop ends, which can lead to an incorrect result if the longest substring is at the end of the string. After the while loop, add sett.insert(count); to ensure the last counted value is considered when determining the maximum length."
                    },
                    {
                        "username": "richadubey3323",
                        "content": "why is it not working for testcase s=\" \"??\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        HashSet<Character> set=new HashSet<>();\\n        int max=0, count=0;\\n        for(int i=0;i<s.length();i++){\\n            char ch=s.charAt(i);\\n            if(!set.contains(ch)){\\n                set.add(ch);\\n                count++;\\n            }\\n            else{\\n                set.clear();\\n                if(count>max){\\n                    max=count;\\n                }\\n                count=0;\\n                i--;\\n            }\\n        }\\n        return max;\\n    }\\n}"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code fails for the testcase s=\" \" because when encountering a single character, it\\'s added to the set, but the max value is never updated unless a duplicate character is found later. To fix this, after the for-loop, add a check to update max with count if count is greater than max."
                    },
                    {
                        "username": "kongnakornna",
                        "content": "``````\\nfunction lengthOfLongestSubstring(s: string): number {\\n    let maxLength = 0;\\n    let start = 0;\\n    const charIndexMap: { [key: string]: number } = {};\\n\\n    for (let end = 0; end < s.length; end++) {\\n        const currentChar = s[end];\\n\\n        if (currentChar in charIndexMap && charIndexMap[currentChar] >= start) {\\n            start = charIndexMap[currentChar] + 1;\\n        }\\n\\n        charIndexMap[currentChar] = end;\\n        maxLength = Math.max(maxLength, end - start + 1);\\n    }\\n\\n    return maxLength;\\n}\\n\\n// Test cases\\nconst s1 = \"abcabcbb\";\\nconsole.log(lengthOfLongestSubstring(s1)); // Output: 3\\n\\nconst s2 = \"bbbbb\";\\nconsole.log(lengthOfLongestSubstring(s2)); // Output: 1\\n\\nconst s3 = \"pwwkew\";\\nconsole.log(lengthOfLongestSubstring(s3)); // Output: 3\\n\\n/*\\nIn this solution, we use a sliding window approach. We maintain two pointers, start and end, representing the current window\\'s boundaries. We also maintain a charIndexMap to store the most recent index where each character appeared.\\n\\nAs we iterate through the string, if we encounter a character that has been seen before and its index is within the current window\\'s boundaries, we update the start pointer to move right after the last occurrence of that character. This ensures that we\\'re maintaining a substring without repeating characters.\\n\\nWe update the charIndexMap with the current character\\'s index and calculate the length of the current substring. We keep track of the maximum length encountered so far and return it at the end.\\n \\n \\u0E43\\u0E19\\u0E01\\u0E32\\u0E23\\u0E41\\u0E01\\u0E49\\u0E1B\\u0E31\\u0E0D\\u0E2B\\u0E32\\u0E19\\u0E35\\u0E49 \\u0E40\\u0E23\\u0E32\\u0E43\\u0E0A\\u0E49\\u0E27\\u0E34\\u0E18\\u0E35\\u0E2B\\u0E19\\u0E49\\u0E32\\u0E15\\u0E48\\u0E32\\u0E07\\u0E1A\\u0E32\\u0E19\\u0E40\\u0E25\\u0E37\\u0E48\\u0E2D\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E21\\u0E35\\u0E1E\\u0E2D\\u0E22\\u0E19\\u0E4C\\u0E40\\u0E15\\u0E2D\\u0E23\\u0E4C\\u0E2A\\u0E2D\\u0E07\\u0E15\\u0E31\\u0E27 \\u0E04\\u0E37\\u0E2D\\u0E08\\u0E38\\u0E14\\u0E40\\u0E23\\u0E34\\u0E48\\u0E21\\u0E15\\u0E49\\u0E19\\u0E41\\u0E25\\u0E30\\u0E08\\u0E38\\u0E14\\u0E2A\\u0E34\\u0E49\\u0E19\\u0E2A\\u0E38\\u0E14 \\u0E0B\\u0E36\\u0E48\\u0E07\\u0E41\\u0E2A\\u0E14\\u0E07\\u0E16\\u0E36\\u0E07\\u0E02\\u0E2D\\u0E1A\\u0E40\\u0E02\\u0E15\\u0E02\\u0E2D\\u0E07\\u0E2B\\u0E19\\u0E49\\u0E32\\u0E15\\u0E48\\u0E32\\u0E07\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E22\\u0E31\\u0E07\\u0E23\\u0E31\\u0E01\\u0E29\\u0E32 charIndexMap \\u0E40\\u0E1E\\u0E37\\u0E48\\u0E2D\\u0E08\\u0E31\\u0E14\\u0E40\\u0E01\\u0E47\\u0E1A\\u0E14\\u0E31\\u0E0A\\u0E19\\u0E35\\u0E25\\u0E48\\u0E32\\u0E2A\\u0E38\\u0E14\\u0E17\\u0E35\\u0E48\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E41\\u0E15\\u0E48\\u0E25\\u0E30\\u0E15\\u0E31\\u0E27\\u0E1B\\u0E23\\u0E32\\u0E01\\u0E0F\\u0E02\\u0E36\\u0E49\\u0E19\\n\\n\\u0E02\\u0E13\\u0E30\\u0E17\\u0E35\\u0E48\\u0E40\\u0E23\\u0E32\\u0E27\\u0E19\\u0E0B\\u0E49\\u0E33\\u0E43\\u0E19\\u0E2A\\u0E15\\u0E23\\u0E34\\u0E07 \\u0E2B\\u0E32\\u0E01\\u0E40\\u0E23\\u0E32\\u0E1E\\u0E1A\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E17\\u0E35\\u0E48\\u0E40\\u0E04\\u0E22\\u0E40\\u0E2B\\u0E47\\u0E19\\u0E21\\u0E32\\u0E01\\u0E48\\u0E2D\\u0E19\\u0E41\\u0E25\\u0E30\\u0E14\\u0E31\\u0E0A\\u0E19\\u0E35\\u0E2D\\u0E22\\u0E39\\u0E48\\u0E20\\u0E32\\u0E22\\u0E43\\u0E19\\u0E02\\u0E2D\\u0E1A\\u0E40\\u0E02\\u0E15\\u0E02\\u0E2D\\u0E07\\u0E2B\\u0E19\\u0E49\\u0E32\\u0E15\\u0E48\\u0E32\\u0E07\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E08\\u0E30\\u0E2D\\u0E31\\u0E1B\\u0E40\\u0E14\\u0E15\\u0E15\\u0E31\\u0E27\\u0E0A\\u0E35\\u0E49\\u0E40\\u0E23\\u0E34\\u0E48\\u0E21\\u0E15\\u0E49\\u0E19\\u0E43\\u0E2B\\u0E49\\u0E40\\u0E25\\u0E37\\u0E48\\u0E2D\\u0E19\\u0E44\\u0E1B\\u0E17\\u0E32\\u0E07\\u0E02\\u0E27\\u0E32\\u0E2B\\u0E25\\u0E31\\u0E07\\u0E08\\u0E32\\u0E01\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E19\\u0E31\\u0E49\\u0E19\\u0E1B\\u0E23\\u0E32\\u0E01\\u0E0F\\u0E02\\u0E36\\u0E49\\u0E19\\u0E04\\u0E23\\u0E31\\u0E49\\u0E07\\u0E25\\u0E48\\u0E32\\u0E2A\\u0E38\\u0E14 \\u0E2A\\u0E34\\u0E48\\u0E07\\u0E19\\u0E35\\u0E49\\u0E17\\u0E33\\u0E43\\u0E2B\\u0E49\\u0E41\\u0E19\\u0E48\\u0E43\\u0E08\\u0E27\\u0E48\\u0E32\\u0E40\\u0E23\\u0E32\\u0E04\\u0E07\\u0E2A\\u0E15\\u0E23\\u0E34\\u0E07\\u0E22\\u0E48\\u0E2D\\u0E22\\u0E44\\u0E27\\u0E49\\u0E42\\u0E14\\u0E22\\u0E44\\u0E21\\u0E48\\u0E21\\u0E35\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E0B\\u0E49\\u0E33\\n\\n\\u0E40\\u0E23\\u0E32\\u0E2D\\u0E31\\u0E1B\\u0E40\\u0E14\\u0E15 charIndexMap \\u0E14\\u0E49\\u0E27\\u0E22\\u0E14\\u0E31\\u0E0A\\u0E19\\u0E35\\u0E02\\u0E2D\\u0E07\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E41\\u0E25\\u0E30\\u0E04\\u0E33\\u0E19\\u0E27\\u0E13\\u0E04\\u0E27\\u0E32\\u0E21\\u0E22\\u0E32\\u0E27\\u0E02\\u0E2D\\u0E07\\u0E2A\\u0E15\\u0E23\\u0E34\\u0E07\\u0E22\\u0E48\\u0E2D\\u0E22\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E15\\u0E34\\u0E14\\u0E15\\u0E32\\u0E21\\u0E04\\u0E27\\u0E32\\u0E21\\u0E22\\u0E32\\u0E27\\u0E2A\\u0E39\\u0E07\\u0E2A\\u0E38\\u0E14\\u0E17\\u0E35\\u0E48\\u0E1E\\u0E1A\\u0E08\\u0E19\\u0E16\\u0E36\\u0E07\\u0E15\\u0E2D\\u0E19\\u0E19\\u0E35\\u0E49\\u0E41\\u0E25\\u0E30\\u0E2A\\u0E48\\u0E07\\u0E04\\u0E37\\u0E19\\u0E43\\u0E19\\u0E15\\u0E2D\\u0E19\\u0E17\\u0E49\\u0E32\\u0E22\\n \\n */\\n``````"
                    },
                    {
                        "username": "Zersya",
                        "content": " `Output Limit Exceeded `\\n\\nWhat happen? I got all the test passed"
                    },
                    {
                        "username": "CarlosHsu",
                        "content": "why \"DVD\" the answer is 3"
                    },
                    {
                        "username": "JohnSyoft",
                        "content": "[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "jayaramv98",
                        "content": "What should I return from the function the length of the substring or the substring itself?\\nI returned the length until now and it is not accepting. There is no clear statement explaining the return value."
                    },
                    {
                        "username": "_chandra_bhushan_",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        HashSet<Character> hs = new HashSet<>();\\n        int curr_max = 0;\\n        int left = 0;\\n        for(int right = 0 ; right < s.length() ; right++){\\n            if(!hs.contains(s.charAt(right))){\\n                hs.add(s.charAt(right));\\n                curr_max = Math.max(curr_max , right-left+1);\\n            }\\n            else{\\n                while(s.charAt(left)!=s.charAt(right)){\\n                    hs.remove(s.charAt(left));\\n                    left++;\\n                }\\n                hs.remove(s.charAt(left));\\n                left++;\\n                hs.add(s.charAt(right));\\n            }\\n        }\\n        return curr_max;    \\n    }\\n}"
                    },
                    {
                        "username": "_chandra_bhushan_",
                        "content": "return curr_max;\\n"
                    },
                    {
                        "username": "_chandra_bhushan_",
                        "content": "We can use Hashset and two pointer approach to solve this problem"
                    },
                    {
                        "username": "sachin_mittal1",
                        "content": "What is wrong in my code:\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n\\n        int n = s.length();\\n        int maxLen = INT_MIN;\\n\\n        for(int i=0; i<n; i++){\\n            set<int> freq;\\n            int len = 0;\\n            for(int j=i; j<n; j++){\\n                if(freq.find(s[j]) == freq.end()){\\n                    len++;\\n                    freq.insert(s[i]);\\n                }else{\\n                    break;\\n                }\\n            }\\n            maxLen = max(maxLen, len);\\n            cout<<maxLen<<\"  \"<<len<<endl;\\n            freq.clear();\\n        }\\n\\n        return maxLen;\\n    }\\n};"
                    },
                    {
                        "username": "janis__",
                        "content": "The issue in your code is that you\\'re inserting s[i] into the freq set inside the inner loop, when you should be inserting s[j]. Change freq.insert(s[i]); to freq.insert(s[j]); to correctly track the characters you\\'ve seen."
                    },
                    {
                        "username": "sachin_mittal1",
                        "content": "What is wrong in below code:\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n\n        int n = s.length();\n        int maxLen = INT_MIN;\n\n        for(int i=0; i<n; i++){\n            set<int> freq;\n            int len = 0;\n            for(int j=i; j<n; j++){\n                if(freq.find(s[j]) == freq.end()){\n                    len++;\n                    freq.insert(s[i]);\n                }else{\n                    break;\n                }\n            }\n            maxLen = max(maxLen, len);\n            cout<<maxLen<<\"  \"<<len<<endl;\n            freq.clear();\n        }\n\n        return maxLen;\n    }\n};"
                    }
                ]
            },
            {
                "id": 2014975,
                "content": [
                    {
                        "username": "Aditya_leet170802",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        set<int> sett;\\n        int count=1;\\n        int i=0;\\n        int j=1;\\n        int flag = 0; \\n\\n        if(s.size() <= 1){\\n            return s.size();\\n        }\\n        else if( s.size()==2){     \\n            if(s[0] == s[1]){\\n                return 1;\\n            }\\n            else{\\n                return 2;\\n            }\\n        }\\n        else{                   \\n \\n            while(j <= s.size()){\\n                if(s[i] == s[j]){\\n                    sett.insert(count);\\n                    count = 1;\\n                    i++;\\n                    j = i+1;\\n                }\\n                else{\\n                    for(int k=i;k<j;k++){\\n                        if(s[k] == s[j]){\\n                            flag = 1;\\n                        }\\n                    }\\n                    if(flag == 0){\\n                        j++;\\n                        count++;\\n                    }\\n                    else{\\n                        sett.insert(count);\\n                        count = 1;\\n                        i++;\\n                        j = i+1; \\n                    }\\n                }\\n            }\\n        }\\n        int max = *(sett.rbegin());\\n        return max;\\n    }\\n};\\n\\n\\ncan anybody help me with my code, for 3rd case my output is coming 2 \\n"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code is missing the insertion of the final count value into the sett after the while loop ends, which can lead to an incorrect result if the longest substring is at the end of the string. After the while loop, add sett.insert(count); to ensure the last counted value is considered when determining the maximum length."
                    },
                    {
                        "username": "richadubey3323",
                        "content": "why is it not working for testcase s=\" \"??\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        HashSet<Character> set=new HashSet<>();\\n        int max=0, count=0;\\n        for(int i=0;i<s.length();i++){\\n            char ch=s.charAt(i);\\n            if(!set.contains(ch)){\\n                set.add(ch);\\n                count++;\\n            }\\n            else{\\n                set.clear();\\n                if(count>max){\\n                    max=count;\\n                }\\n                count=0;\\n                i--;\\n            }\\n        }\\n        return max;\\n    }\\n}"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code fails for the testcase s=\" \" because when encountering a single character, it\\'s added to the set, but the max value is never updated unless a duplicate character is found later. To fix this, after the for-loop, add a check to update max with count if count is greater than max."
                    },
                    {
                        "username": "kongnakornna",
                        "content": "``````\\nfunction lengthOfLongestSubstring(s: string): number {\\n    let maxLength = 0;\\n    let start = 0;\\n    const charIndexMap: { [key: string]: number } = {};\\n\\n    for (let end = 0; end < s.length; end++) {\\n        const currentChar = s[end];\\n\\n        if (currentChar in charIndexMap && charIndexMap[currentChar] >= start) {\\n            start = charIndexMap[currentChar] + 1;\\n        }\\n\\n        charIndexMap[currentChar] = end;\\n        maxLength = Math.max(maxLength, end - start + 1);\\n    }\\n\\n    return maxLength;\\n}\\n\\n// Test cases\\nconst s1 = \"abcabcbb\";\\nconsole.log(lengthOfLongestSubstring(s1)); // Output: 3\\n\\nconst s2 = \"bbbbb\";\\nconsole.log(lengthOfLongestSubstring(s2)); // Output: 1\\n\\nconst s3 = \"pwwkew\";\\nconsole.log(lengthOfLongestSubstring(s3)); // Output: 3\\n\\n/*\\nIn this solution, we use a sliding window approach. We maintain two pointers, start and end, representing the current window\\'s boundaries. We also maintain a charIndexMap to store the most recent index where each character appeared.\\n\\nAs we iterate through the string, if we encounter a character that has been seen before and its index is within the current window\\'s boundaries, we update the start pointer to move right after the last occurrence of that character. This ensures that we\\'re maintaining a substring without repeating characters.\\n\\nWe update the charIndexMap with the current character\\'s index and calculate the length of the current substring. We keep track of the maximum length encountered so far and return it at the end.\\n \\n \\u0E43\\u0E19\\u0E01\\u0E32\\u0E23\\u0E41\\u0E01\\u0E49\\u0E1B\\u0E31\\u0E0D\\u0E2B\\u0E32\\u0E19\\u0E35\\u0E49 \\u0E40\\u0E23\\u0E32\\u0E43\\u0E0A\\u0E49\\u0E27\\u0E34\\u0E18\\u0E35\\u0E2B\\u0E19\\u0E49\\u0E32\\u0E15\\u0E48\\u0E32\\u0E07\\u0E1A\\u0E32\\u0E19\\u0E40\\u0E25\\u0E37\\u0E48\\u0E2D\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E21\\u0E35\\u0E1E\\u0E2D\\u0E22\\u0E19\\u0E4C\\u0E40\\u0E15\\u0E2D\\u0E23\\u0E4C\\u0E2A\\u0E2D\\u0E07\\u0E15\\u0E31\\u0E27 \\u0E04\\u0E37\\u0E2D\\u0E08\\u0E38\\u0E14\\u0E40\\u0E23\\u0E34\\u0E48\\u0E21\\u0E15\\u0E49\\u0E19\\u0E41\\u0E25\\u0E30\\u0E08\\u0E38\\u0E14\\u0E2A\\u0E34\\u0E49\\u0E19\\u0E2A\\u0E38\\u0E14 \\u0E0B\\u0E36\\u0E48\\u0E07\\u0E41\\u0E2A\\u0E14\\u0E07\\u0E16\\u0E36\\u0E07\\u0E02\\u0E2D\\u0E1A\\u0E40\\u0E02\\u0E15\\u0E02\\u0E2D\\u0E07\\u0E2B\\u0E19\\u0E49\\u0E32\\u0E15\\u0E48\\u0E32\\u0E07\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E22\\u0E31\\u0E07\\u0E23\\u0E31\\u0E01\\u0E29\\u0E32 charIndexMap \\u0E40\\u0E1E\\u0E37\\u0E48\\u0E2D\\u0E08\\u0E31\\u0E14\\u0E40\\u0E01\\u0E47\\u0E1A\\u0E14\\u0E31\\u0E0A\\u0E19\\u0E35\\u0E25\\u0E48\\u0E32\\u0E2A\\u0E38\\u0E14\\u0E17\\u0E35\\u0E48\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E41\\u0E15\\u0E48\\u0E25\\u0E30\\u0E15\\u0E31\\u0E27\\u0E1B\\u0E23\\u0E32\\u0E01\\u0E0F\\u0E02\\u0E36\\u0E49\\u0E19\\n\\n\\u0E02\\u0E13\\u0E30\\u0E17\\u0E35\\u0E48\\u0E40\\u0E23\\u0E32\\u0E27\\u0E19\\u0E0B\\u0E49\\u0E33\\u0E43\\u0E19\\u0E2A\\u0E15\\u0E23\\u0E34\\u0E07 \\u0E2B\\u0E32\\u0E01\\u0E40\\u0E23\\u0E32\\u0E1E\\u0E1A\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E17\\u0E35\\u0E48\\u0E40\\u0E04\\u0E22\\u0E40\\u0E2B\\u0E47\\u0E19\\u0E21\\u0E32\\u0E01\\u0E48\\u0E2D\\u0E19\\u0E41\\u0E25\\u0E30\\u0E14\\u0E31\\u0E0A\\u0E19\\u0E35\\u0E2D\\u0E22\\u0E39\\u0E48\\u0E20\\u0E32\\u0E22\\u0E43\\u0E19\\u0E02\\u0E2D\\u0E1A\\u0E40\\u0E02\\u0E15\\u0E02\\u0E2D\\u0E07\\u0E2B\\u0E19\\u0E49\\u0E32\\u0E15\\u0E48\\u0E32\\u0E07\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E08\\u0E30\\u0E2D\\u0E31\\u0E1B\\u0E40\\u0E14\\u0E15\\u0E15\\u0E31\\u0E27\\u0E0A\\u0E35\\u0E49\\u0E40\\u0E23\\u0E34\\u0E48\\u0E21\\u0E15\\u0E49\\u0E19\\u0E43\\u0E2B\\u0E49\\u0E40\\u0E25\\u0E37\\u0E48\\u0E2D\\u0E19\\u0E44\\u0E1B\\u0E17\\u0E32\\u0E07\\u0E02\\u0E27\\u0E32\\u0E2B\\u0E25\\u0E31\\u0E07\\u0E08\\u0E32\\u0E01\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E19\\u0E31\\u0E49\\u0E19\\u0E1B\\u0E23\\u0E32\\u0E01\\u0E0F\\u0E02\\u0E36\\u0E49\\u0E19\\u0E04\\u0E23\\u0E31\\u0E49\\u0E07\\u0E25\\u0E48\\u0E32\\u0E2A\\u0E38\\u0E14 \\u0E2A\\u0E34\\u0E48\\u0E07\\u0E19\\u0E35\\u0E49\\u0E17\\u0E33\\u0E43\\u0E2B\\u0E49\\u0E41\\u0E19\\u0E48\\u0E43\\u0E08\\u0E27\\u0E48\\u0E32\\u0E40\\u0E23\\u0E32\\u0E04\\u0E07\\u0E2A\\u0E15\\u0E23\\u0E34\\u0E07\\u0E22\\u0E48\\u0E2D\\u0E22\\u0E44\\u0E27\\u0E49\\u0E42\\u0E14\\u0E22\\u0E44\\u0E21\\u0E48\\u0E21\\u0E35\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E0B\\u0E49\\u0E33\\n\\n\\u0E40\\u0E23\\u0E32\\u0E2D\\u0E31\\u0E1B\\u0E40\\u0E14\\u0E15 charIndexMap \\u0E14\\u0E49\\u0E27\\u0E22\\u0E14\\u0E31\\u0E0A\\u0E19\\u0E35\\u0E02\\u0E2D\\u0E07\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E41\\u0E25\\u0E30\\u0E04\\u0E33\\u0E19\\u0E27\\u0E13\\u0E04\\u0E27\\u0E32\\u0E21\\u0E22\\u0E32\\u0E27\\u0E02\\u0E2D\\u0E07\\u0E2A\\u0E15\\u0E23\\u0E34\\u0E07\\u0E22\\u0E48\\u0E2D\\u0E22\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E15\\u0E34\\u0E14\\u0E15\\u0E32\\u0E21\\u0E04\\u0E27\\u0E32\\u0E21\\u0E22\\u0E32\\u0E27\\u0E2A\\u0E39\\u0E07\\u0E2A\\u0E38\\u0E14\\u0E17\\u0E35\\u0E48\\u0E1E\\u0E1A\\u0E08\\u0E19\\u0E16\\u0E36\\u0E07\\u0E15\\u0E2D\\u0E19\\u0E19\\u0E35\\u0E49\\u0E41\\u0E25\\u0E30\\u0E2A\\u0E48\\u0E07\\u0E04\\u0E37\\u0E19\\u0E43\\u0E19\\u0E15\\u0E2D\\u0E19\\u0E17\\u0E49\\u0E32\\u0E22\\n \\n */\\n``````"
                    },
                    {
                        "username": "Zersya",
                        "content": " `Output Limit Exceeded `\\n\\nWhat happen? I got all the test passed"
                    },
                    {
                        "username": "CarlosHsu",
                        "content": "why \"DVD\" the answer is 3"
                    },
                    {
                        "username": "JohnSyoft",
                        "content": "[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "jayaramv98",
                        "content": "What should I return from the function the length of the substring or the substring itself?\\nI returned the length until now and it is not accepting. There is no clear statement explaining the return value."
                    },
                    {
                        "username": "_chandra_bhushan_",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        HashSet<Character> hs = new HashSet<>();\\n        int curr_max = 0;\\n        int left = 0;\\n        for(int right = 0 ; right < s.length() ; right++){\\n            if(!hs.contains(s.charAt(right))){\\n                hs.add(s.charAt(right));\\n                curr_max = Math.max(curr_max , right-left+1);\\n            }\\n            else{\\n                while(s.charAt(left)!=s.charAt(right)){\\n                    hs.remove(s.charAt(left));\\n                    left++;\\n                }\\n                hs.remove(s.charAt(left));\\n                left++;\\n                hs.add(s.charAt(right));\\n            }\\n        }\\n        return curr_max;    \\n    }\\n}"
                    },
                    {
                        "username": "_chandra_bhushan_",
                        "content": "return curr_max;\\n"
                    },
                    {
                        "username": "_chandra_bhushan_",
                        "content": "We can use Hashset and two pointer approach to solve this problem"
                    },
                    {
                        "username": "sachin_mittal1",
                        "content": "What is wrong in my code:\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n\\n        int n = s.length();\\n        int maxLen = INT_MIN;\\n\\n        for(int i=0; i<n; i++){\\n            set<int> freq;\\n            int len = 0;\\n            for(int j=i; j<n; j++){\\n                if(freq.find(s[j]) == freq.end()){\\n                    len++;\\n                    freq.insert(s[i]);\\n                }else{\\n                    break;\\n                }\\n            }\\n            maxLen = max(maxLen, len);\\n            cout<<maxLen<<\"  \"<<len<<endl;\\n            freq.clear();\\n        }\\n\\n        return maxLen;\\n    }\\n};"
                    },
                    {
                        "username": "janis__",
                        "content": "The issue in your code is that you\\'re inserting s[i] into the freq set inside the inner loop, when you should be inserting s[j]. Change freq.insert(s[i]); to freq.insert(s[j]); to correctly track the characters you\\'ve seen."
                    },
                    {
                        "username": "sachin_mittal1",
                        "content": "What is wrong in below code:\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n\n        int n = s.length();\n        int maxLen = INT_MIN;\n\n        for(int i=0; i<n; i++){\n            set<int> freq;\n            int len = 0;\n            for(int j=i; j<n; j++){\n                if(freq.find(s[j]) == freq.end()){\n                    len++;\n                    freq.insert(s[i]);\n                }else{\n                    break;\n                }\n            }\n            maxLen = max(maxLen, len);\n            cout<<maxLen<<\"  \"<<len<<endl;\n            freq.clear();\n        }\n\n        return maxLen;\n    }\n};"
                    }
                ]
            },
            {
                "id": 2004484,
                "content": [
                    {
                        "username": "Aditya_leet170802",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        set<int> sett;\\n        int count=1;\\n        int i=0;\\n        int j=1;\\n        int flag = 0; \\n\\n        if(s.size() <= 1){\\n            return s.size();\\n        }\\n        else if( s.size()==2){     \\n            if(s[0] == s[1]){\\n                return 1;\\n            }\\n            else{\\n                return 2;\\n            }\\n        }\\n        else{                   \\n \\n            while(j <= s.size()){\\n                if(s[i] == s[j]){\\n                    sett.insert(count);\\n                    count = 1;\\n                    i++;\\n                    j = i+1;\\n                }\\n                else{\\n                    for(int k=i;k<j;k++){\\n                        if(s[k] == s[j]){\\n                            flag = 1;\\n                        }\\n                    }\\n                    if(flag == 0){\\n                        j++;\\n                        count++;\\n                    }\\n                    else{\\n                        sett.insert(count);\\n                        count = 1;\\n                        i++;\\n                        j = i+1; \\n                    }\\n                }\\n            }\\n        }\\n        int max = *(sett.rbegin());\\n        return max;\\n    }\\n};\\n\\n\\ncan anybody help me with my code, for 3rd case my output is coming 2 \\n"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code is missing the insertion of the final count value into the sett after the while loop ends, which can lead to an incorrect result if the longest substring is at the end of the string. After the while loop, add sett.insert(count); to ensure the last counted value is considered when determining the maximum length."
                    },
                    {
                        "username": "richadubey3323",
                        "content": "why is it not working for testcase s=\" \"??\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        HashSet<Character> set=new HashSet<>();\\n        int max=0, count=0;\\n        for(int i=0;i<s.length();i++){\\n            char ch=s.charAt(i);\\n            if(!set.contains(ch)){\\n                set.add(ch);\\n                count++;\\n            }\\n            else{\\n                set.clear();\\n                if(count>max){\\n                    max=count;\\n                }\\n                count=0;\\n                i--;\\n            }\\n        }\\n        return max;\\n    }\\n}"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code fails for the testcase s=\" \" because when encountering a single character, it\\'s added to the set, but the max value is never updated unless a duplicate character is found later. To fix this, after the for-loop, add a check to update max with count if count is greater than max."
                    },
                    {
                        "username": "kongnakornna",
                        "content": "``````\\nfunction lengthOfLongestSubstring(s: string): number {\\n    let maxLength = 0;\\n    let start = 0;\\n    const charIndexMap: { [key: string]: number } = {};\\n\\n    for (let end = 0; end < s.length; end++) {\\n        const currentChar = s[end];\\n\\n        if (currentChar in charIndexMap && charIndexMap[currentChar] >= start) {\\n            start = charIndexMap[currentChar] + 1;\\n        }\\n\\n        charIndexMap[currentChar] = end;\\n        maxLength = Math.max(maxLength, end - start + 1);\\n    }\\n\\n    return maxLength;\\n}\\n\\n// Test cases\\nconst s1 = \"abcabcbb\";\\nconsole.log(lengthOfLongestSubstring(s1)); // Output: 3\\n\\nconst s2 = \"bbbbb\";\\nconsole.log(lengthOfLongestSubstring(s2)); // Output: 1\\n\\nconst s3 = \"pwwkew\";\\nconsole.log(lengthOfLongestSubstring(s3)); // Output: 3\\n\\n/*\\nIn this solution, we use a sliding window approach. We maintain two pointers, start and end, representing the current window\\'s boundaries. We also maintain a charIndexMap to store the most recent index where each character appeared.\\n\\nAs we iterate through the string, if we encounter a character that has been seen before and its index is within the current window\\'s boundaries, we update the start pointer to move right after the last occurrence of that character. This ensures that we\\'re maintaining a substring without repeating characters.\\n\\nWe update the charIndexMap with the current character\\'s index and calculate the length of the current substring. We keep track of the maximum length encountered so far and return it at the end.\\n \\n \\u0E43\\u0E19\\u0E01\\u0E32\\u0E23\\u0E41\\u0E01\\u0E49\\u0E1B\\u0E31\\u0E0D\\u0E2B\\u0E32\\u0E19\\u0E35\\u0E49 \\u0E40\\u0E23\\u0E32\\u0E43\\u0E0A\\u0E49\\u0E27\\u0E34\\u0E18\\u0E35\\u0E2B\\u0E19\\u0E49\\u0E32\\u0E15\\u0E48\\u0E32\\u0E07\\u0E1A\\u0E32\\u0E19\\u0E40\\u0E25\\u0E37\\u0E48\\u0E2D\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E21\\u0E35\\u0E1E\\u0E2D\\u0E22\\u0E19\\u0E4C\\u0E40\\u0E15\\u0E2D\\u0E23\\u0E4C\\u0E2A\\u0E2D\\u0E07\\u0E15\\u0E31\\u0E27 \\u0E04\\u0E37\\u0E2D\\u0E08\\u0E38\\u0E14\\u0E40\\u0E23\\u0E34\\u0E48\\u0E21\\u0E15\\u0E49\\u0E19\\u0E41\\u0E25\\u0E30\\u0E08\\u0E38\\u0E14\\u0E2A\\u0E34\\u0E49\\u0E19\\u0E2A\\u0E38\\u0E14 \\u0E0B\\u0E36\\u0E48\\u0E07\\u0E41\\u0E2A\\u0E14\\u0E07\\u0E16\\u0E36\\u0E07\\u0E02\\u0E2D\\u0E1A\\u0E40\\u0E02\\u0E15\\u0E02\\u0E2D\\u0E07\\u0E2B\\u0E19\\u0E49\\u0E32\\u0E15\\u0E48\\u0E32\\u0E07\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E22\\u0E31\\u0E07\\u0E23\\u0E31\\u0E01\\u0E29\\u0E32 charIndexMap \\u0E40\\u0E1E\\u0E37\\u0E48\\u0E2D\\u0E08\\u0E31\\u0E14\\u0E40\\u0E01\\u0E47\\u0E1A\\u0E14\\u0E31\\u0E0A\\u0E19\\u0E35\\u0E25\\u0E48\\u0E32\\u0E2A\\u0E38\\u0E14\\u0E17\\u0E35\\u0E48\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E41\\u0E15\\u0E48\\u0E25\\u0E30\\u0E15\\u0E31\\u0E27\\u0E1B\\u0E23\\u0E32\\u0E01\\u0E0F\\u0E02\\u0E36\\u0E49\\u0E19\\n\\n\\u0E02\\u0E13\\u0E30\\u0E17\\u0E35\\u0E48\\u0E40\\u0E23\\u0E32\\u0E27\\u0E19\\u0E0B\\u0E49\\u0E33\\u0E43\\u0E19\\u0E2A\\u0E15\\u0E23\\u0E34\\u0E07 \\u0E2B\\u0E32\\u0E01\\u0E40\\u0E23\\u0E32\\u0E1E\\u0E1A\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E17\\u0E35\\u0E48\\u0E40\\u0E04\\u0E22\\u0E40\\u0E2B\\u0E47\\u0E19\\u0E21\\u0E32\\u0E01\\u0E48\\u0E2D\\u0E19\\u0E41\\u0E25\\u0E30\\u0E14\\u0E31\\u0E0A\\u0E19\\u0E35\\u0E2D\\u0E22\\u0E39\\u0E48\\u0E20\\u0E32\\u0E22\\u0E43\\u0E19\\u0E02\\u0E2D\\u0E1A\\u0E40\\u0E02\\u0E15\\u0E02\\u0E2D\\u0E07\\u0E2B\\u0E19\\u0E49\\u0E32\\u0E15\\u0E48\\u0E32\\u0E07\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E08\\u0E30\\u0E2D\\u0E31\\u0E1B\\u0E40\\u0E14\\u0E15\\u0E15\\u0E31\\u0E27\\u0E0A\\u0E35\\u0E49\\u0E40\\u0E23\\u0E34\\u0E48\\u0E21\\u0E15\\u0E49\\u0E19\\u0E43\\u0E2B\\u0E49\\u0E40\\u0E25\\u0E37\\u0E48\\u0E2D\\u0E19\\u0E44\\u0E1B\\u0E17\\u0E32\\u0E07\\u0E02\\u0E27\\u0E32\\u0E2B\\u0E25\\u0E31\\u0E07\\u0E08\\u0E32\\u0E01\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E19\\u0E31\\u0E49\\u0E19\\u0E1B\\u0E23\\u0E32\\u0E01\\u0E0F\\u0E02\\u0E36\\u0E49\\u0E19\\u0E04\\u0E23\\u0E31\\u0E49\\u0E07\\u0E25\\u0E48\\u0E32\\u0E2A\\u0E38\\u0E14 \\u0E2A\\u0E34\\u0E48\\u0E07\\u0E19\\u0E35\\u0E49\\u0E17\\u0E33\\u0E43\\u0E2B\\u0E49\\u0E41\\u0E19\\u0E48\\u0E43\\u0E08\\u0E27\\u0E48\\u0E32\\u0E40\\u0E23\\u0E32\\u0E04\\u0E07\\u0E2A\\u0E15\\u0E23\\u0E34\\u0E07\\u0E22\\u0E48\\u0E2D\\u0E22\\u0E44\\u0E27\\u0E49\\u0E42\\u0E14\\u0E22\\u0E44\\u0E21\\u0E48\\u0E21\\u0E35\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E0B\\u0E49\\u0E33\\n\\n\\u0E40\\u0E23\\u0E32\\u0E2D\\u0E31\\u0E1B\\u0E40\\u0E14\\u0E15 charIndexMap \\u0E14\\u0E49\\u0E27\\u0E22\\u0E14\\u0E31\\u0E0A\\u0E19\\u0E35\\u0E02\\u0E2D\\u0E07\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E41\\u0E25\\u0E30\\u0E04\\u0E33\\u0E19\\u0E27\\u0E13\\u0E04\\u0E27\\u0E32\\u0E21\\u0E22\\u0E32\\u0E27\\u0E02\\u0E2D\\u0E07\\u0E2A\\u0E15\\u0E23\\u0E34\\u0E07\\u0E22\\u0E48\\u0E2D\\u0E22\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E15\\u0E34\\u0E14\\u0E15\\u0E32\\u0E21\\u0E04\\u0E27\\u0E32\\u0E21\\u0E22\\u0E32\\u0E27\\u0E2A\\u0E39\\u0E07\\u0E2A\\u0E38\\u0E14\\u0E17\\u0E35\\u0E48\\u0E1E\\u0E1A\\u0E08\\u0E19\\u0E16\\u0E36\\u0E07\\u0E15\\u0E2D\\u0E19\\u0E19\\u0E35\\u0E49\\u0E41\\u0E25\\u0E30\\u0E2A\\u0E48\\u0E07\\u0E04\\u0E37\\u0E19\\u0E43\\u0E19\\u0E15\\u0E2D\\u0E19\\u0E17\\u0E49\\u0E32\\u0E22\\n \\n */\\n``````"
                    },
                    {
                        "username": "Zersya",
                        "content": " `Output Limit Exceeded `\\n\\nWhat happen? I got all the test passed"
                    },
                    {
                        "username": "CarlosHsu",
                        "content": "why \"DVD\" the answer is 3"
                    },
                    {
                        "username": "JohnSyoft",
                        "content": "[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "jayaramv98",
                        "content": "What should I return from the function the length of the substring or the substring itself?\\nI returned the length until now and it is not accepting. There is no clear statement explaining the return value."
                    },
                    {
                        "username": "_chandra_bhushan_",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        HashSet<Character> hs = new HashSet<>();\\n        int curr_max = 0;\\n        int left = 0;\\n        for(int right = 0 ; right < s.length() ; right++){\\n            if(!hs.contains(s.charAt(right))){\\n                hs.add(s.charAt(right));\\n                curr_max = Math.max(curr_max , right-left+1);\\n            }\\n            else{\\n                while(s.charAt(left)!=s.charAt(right)){\\n                    hs.remove(s.charAt(left));\\n                    left++;\\n                }\\n                hs.remove(s.charAt(left));\\n                left++;\\n                hs.add(s.charAt(right));\\n            }\\n        }\\n        return curr_max;    \\n    }\\n}"
                    },
                    {
                        "username": "_chandra_bhushan_",
                        "content": "return curr_max;\\n"
                    },
                    {
                        "username": "_chandra_bhushan_",
                        "content": "We can use Hashset and two pointer approach to solve this problem"
                    },
                    {
                        "username": "sachin_mittal1",
                        "content": "What is wrong in my code:\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n\\n        int n = s.length();\\n        int maxLen = INT_MIN;\\n\\n        for(int i=0; i<n; i++){\\n            set<int> freq;\\n            int len = 0;\\n            for(int j=i; j<n; j++){\\n                if(freq.find(s[j]) == freq.end()){\\n                    len++;\\n                    freq.insert(s[i]);\\n                }else{\\n                    break;\\n                }\\n            }\\n            maxLen = max(maxLen, len);\\n            cout<<maxLen<<\"  \"<<len<<endl;\\n            freq.clear();\\n        }\\n\\n        return maxLen;\\n    }\\n};"
                    },
                    {
                        "username": "janis__",
                        "content": "The issue in your code is that you\\'re inserting s[i] into the freq set inside the inner loop, when you should be inserting s[j]. Change freq.insert(s[i]); to freq.insert(s[j]); to correctly track the characters you\\'ve seen."
                    },
                    {
                        "username": "sachin_mittal1",
                        "content": "What is wrong in below code:\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n\n        int n = s.length();\n        int maxLen = INT_MIN;\n\n        for(int i=0; i<n; i++){\n            set<int> freq;\n            int len = 0;\n            for(int j=i; j<n; j++){\n                if(freq.find(s[j]) == freq.end()){\n                    len++;\n                    freq.insert(s[i]);\n                }else{\n                    break;\n                }\n            }\n            maxLen = max(maxLen, len);\n            cout<<maxLen<<\"  \"<<len<<endl;\n            freq.clear();\n        }\n\n        return maxLen;\n    }\n};"
                    }
                ]
            },
            {
                "id": 2001239,
                "content": [
                    {
                        "username": "Aditya_leet170802",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        set<int> sett;\\n        int count=1;\\n        int i=0;\\n        int j=1;\\n        int flag = 0; \\n\\n        if(s.size() <= 1){\\n            return s.size();\\n        }\\n        else if( s.size()==2){     \\n            if(s[0] == s[1]){\\n                return 1;\\n            }\\n            else{\\n                return 2;\\n            }\\n        }\\n        else{                   \\n \\n            while(j <= s.size()){\\n                if(s[i] == s[j]){\\n                    sett.insert(count);\\n                    count = 1;\\n                    i++;\\n                    j = i+1;\\n                }\\n                else{\\n                    for(int k=i;k<j;k++){\\n                        if(s[k] == s[j]){\\n                            flag = 1;\\n                        }\\n                    }\\n                    if(flag == 0){\\n                        j++;\\n                        count++;\\n                    }\\n                    else{\\n                        sett.insert(count);\\n                        count = 1;\\n                        i++;\\n                        j = i+1; \\n                    }\\n                }\\n            }\\n        }\\n        int max = *(sett.rbegin());\\n        return max;\\n    }\\n};\\n\\n\\ncan anybody help me with my code, for 3rd case my output is coming 2 \\n"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code is missing the insertion of the final count value into the sett after the while loop ends, which can lead to an incorrect result if the longest substring is at the end of the string. After the while loop, add sett.insert(count); to ensure the last counted value is considered when determining the maximum length."
                    },
                    {
                        "username": "richadubey3323",
                        "content": "why is it not working for testcase s=\" \"??\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        HashSet<Character> set=new HashSet<>();\\n        int max=0, count=0;\\n        for(int i=0;i<s.length();i++){\\n            char ch=s.charAt(i);\\n            if(!set.contains(ch)){\\n                set.add(ch);\\n                count++;\\n            }\\n            else{\\n                set.clear();\\n                if(count>max){\\n                    max=count;\\n                }\\n                count=0;\\n                i--;\\n            }\\n        }\\n        return max;\\n    }\\n}"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code fails for the testcase s=\" \" because when encountering a single character, it\\'s added to the set, but the max value is never updated unless a duplicate character is found later. To fix this, after the for-loop, add a check to update max with count if count is greater than max."
                    },
                    {
                        "username": "kongnakornna",
                        "content": "``````\\nfunction lengthOfLongestSubstring(s: string): number {\\n    let maxLength = 0;\\n    let start = 0;\\n    const charIndexMap: { [key: string]: number } = {};\\n\\n    for (let end = 0; end < s.length; end++) {\\n        const currentChar = s[end];\\n\\n        if (currentChar in charIndexMap && charIndexMap[currentChar] >= start) {\\n            start = charIndexMap[currentChar] + 1;\\n        }\\n\\n        charIndexMap[currentChar] = end;\\n        maxLength = Math.max(maxLength, end - start + 1);\\n    }\\n\\n    return maxLength;\\n}\\n\\n// Test cases\\nconst s1 = \"abcabcbb\";\\nconsole.log(lengthOfLongestSubstring(s1)); // Output: 3\\n\\nconst s2 = \"bbbbb\";\\nconsole.log(lengthOfLongestSubstring(s2)); // Output: 1\\n\\nconst s3 = \"pwwkew\";\\nconsole.log(lengthOfLongestSubstring(s3)); // Output: 3\\n\\n/*\\nIn this solution, we use a sliding window approach. We maintain two pointers, start and end, representing the current window\\'s boundaries. We also maintain a charIndexMap to store the most recent index where each character appeared.\\n\\nAs we iterate through the string, if we encounter a character that has been seen before and its index is within the current window\\'s boundaries, we update the start pointer to move right after the last occurrence of that character. This ensures that we\\'re maintaining a substring without repeating characters.\\n\\nWe update the charIndexMap with the current character\\'s index and calculate the length of the current substring. We keep track of the maximum length encountered so far and return it at the end.\\n \\n \\u0E43\\u0E19\\u0E01\\u0E32\\u0E23\\u0E41\\u0E01\\u0E49\\u0E1B\\u0E31\\u0E0D\\u0E2B\\u0E32\\u0E19\\u0E35\\u0E49 \\u0E40\\u0E23\\u0E32\\u0E43\\u0E0A\\u0E49\\u0E27\\u0E34\\u0E18\\u0E35\\u0E2B\\u0E19\\u0E49\\u0E32\\u0E15\\u0E48\\u0E32\\u0E07\\u0E1A\\u0E32\\u0E19\\u0E40\\u0E25\\u0E37\\u0E48\\u0E2D\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E21\\u0E35\\u0E1E\\u0E2D\\u0E22\\u0E19\\u0E4C\\u0E40\\u0E15\\u0E2D\\u0E23\\u0E4C\\u0E2A\\u0E2D\\u0E07\\u0E15\\u0E31\\u0E27 \\u0E04\\u0E37\\u0E2D\\u0E08\\u0E38\\u0E14\\u0E40\\u0E23\\u0E34\\u0E48\\u0E21\\u0E15\\u0E49\\u0E19\\u0E41\\u0E25\\u0E30\\u0E08\\u0E38\\u0E14\\u0E2A\\u0E34\\u0E49\\u0E19\\u0E2A\\u0E38\\u0E14 \\u0E0B\\u0E36\\u0E48\\u0E07\\u0E41\\u0E2A\\u0E14\\u0E07\\u0E16\\u0E36\\u0E07\\u0E02\\u0E2D\\u0E1A\\u0E40\\u0E02\\u0E15\\u0E02\\u0E2D\\u0E07\\u0E2B\\u0E19\\u0E49\\u0E32\\u0E15\\u0E48\\u0E32\\u0E07\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E22\\u0E31\\u0E07\\u0E23\\u0E31\\u0E01\\u0E29\\u0E32 charIndexMap \\u0E40\\u0E1E\\u0E37\\u0E48\\u0E2D\\u0E08\\u0E31\\u0E14\\u0E40\\u0E01\\u0E47\\u0E1A\\u0E14\\u0E31\\u0E0A\\u0E19\\u0E35\\u0E25\\u0E48\\u0E32\\u0E2A\\u0E38\\u0E14\\u0E17\\u0E35\\u0E48\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E41\\u0E15\\u0E48\\u0E25\\u0E30\\u0E15\\u0E31\\u0E27\\u0E1B\\u0E23\\u0E32\\u0E01\\u0E0F\\u0E02\\u0E36\\u0E49\\u0E19\\n\\n\\u0E02\\u0E13\\u0E30\\u0E17\\u0E35\\u0E48\\u0E40\\u0E23\\u0E32\\u0E27\\u0E19\\u0E0B\\u0E49\\u0E33\\u0E43\\u0E19\\u0E2A\\u0E15\\u0E23\\u0E34\\u0E07 \\u0E2B\\u0E32\\u0E01\\u0E40\\u0E23\\u0E32\\u0E1E\\u0E1A\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E17\\u0E35\\u0E48\\u0E40\\u0E04\\u0E22\\u0E40\\u0E2B\\u0E47\\u0E19\\u0E21\\u0E32\\u0E01\\u0E48\\u0E2D\\u0E19\\u0E41\\u0E25\\u0E30\\u0E14\\u0E31\\u0E0A\\u0E19\\u0E35\\u0E2D\\u0E22\\u0E39\\u0E48\\u0E20\\u0E32\\u0E22\\u0E43\\u0E19\\u0E02\\u0E2D\\u0E1A\\u0E40\\u0E02\\u0E15\\u0E02\\u0E2D\\u0E07\\u0E2B\\u0E19\\u0E49\\u0E32\\u0E15\\u0E48\\u0E32\\u0E07\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E08\\u0E30\\u0E2D\\u0E31\\u0E1B\\u0E40\\u0E14\\u0E15\\u0E15\\u0E31\\u0E27\\u0E0A\\u0E35\\u0E49\\u0E40\\u0E23\\u0E34\\u0E48\\u0E21\\u0E15\\u0E49\\u0E19\\u0E43\\u0E2B\\u0E49\\u0E40\\u0E25\\u0E37\\u0E48\\u0E2D\\u0E19\\u0E44\\u0E1B\\u0E17\\u0E32\\u0E07\\u0E02\\u0E27\\u0E32\\u0E2B\\u0E25\\u0E31\\u0E07\\u0E08\\u0E32\\u0E01\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E19\\u0E31\\u0E49\\u0E19\\u0E1B\\u0E23\\u0E32\\u0E01\\u0E0F\\u0E02\\u0E36\\u0E49\\u0E19\\u0E04\\u0E23\\u0E31\\u0E49\\u0E07\\u0E25\\u0E48\\u0E32\\u0E2A\\u0E38\\u0E14 \\u0E2A\\u0E34\\u0E48\\u0E07\\u0E19\\u0E35\\u0E49\\u0E17\\u0E33\\u0E43\\u0E2B\\u0E49\\u0E41\\u0E19\\u0E48\\u0E43\\u0E08\\u0E27\\u0E48\\u0E32\\u0E40\\u0E23\\u0E32\\u0E04\\u0E07\\u0E2A\\u0E15\\u0E23\\u0E34\\u0E07\\u0E22\\u0E48\\u0E2D\\u0E22\\u0E44\\u0E27\\u0E49\\u0E42\\u0E14\\u0E22\\u0E44\\u0E21\\u0E48\\u0E21\\u0E35\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E0B\\u0E49\\u0E33\\n\\n\\u0E40\\u0E23\\u0E32\\u0E2D\\u0E31\\u0E1B\\u0E40\\u0E14\\u0E15 charIndexMap \\u0E14\\u0E49\\u0E27\\u0E22\\u0E14\\u0E31\\u0E0A\\u0E19\\u0E35\\u0E02\\u0E2D\\u0E07\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E41\\u0E25\\u0E30\\u0E04\\u0E33\\u0E19\\u0E27\\u0E13\\u0E04\\u0E27\\u0E32\\u0E21\\u0E22\\u0E32\\u0E27\\u0E02\\u0E2D\\u0E07\\u0E2A\\u0E15\\u0E23\\u0E34\\u0E07\\u0E22\\u0E48\\u0E2D\\u0E22\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E15\\u0E34\\u0E14\\u0E15\\u0E32\\u0E21\\u0E04\\u0E27\\u0E32\\u0E21\\u0E22\\u0E32\\u0E27\\u0E2A\\u0E39\\u0E07\\u0E2A\\u0E38\\u0E14\\u0E17\\u0E35\\u0E48\\u0E1E\\u0E1A\\u0E08\\u0E19\\u0E16\\u0E36\\u0E07\\u0E15\\u0E2D\\u0E19\\u0E19\\u0E35\\u0E49\\u0E41\\u0E25\\u0E30\\u0E2A\\u0E48\\u0E07\\u0E04\\u0E37\\u0E19\\u0E43\\u0E19\\u0E15\\u0E2D\\u0E19\\u0E17\\u0E49\\u0E32\\u0E22\\n \\n */\\n``````"
                    },
                    {
                        "username": "Zersya",
                        "content": " `Output Limit Exceeded `\\n\\nWhat happen? I got all the test passed"
                    },
                    {
                        "username": "CarlosHsu",
                        "content": "why \"DVD\" the answer is 3"
                    },
                    {
                        "username": "JohnSyoft",
                        "content": "[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "jayaramv98",
                        "content": "What should I return from the function the length of the substring or the substring itself?\\nI returned the length until now and it is not accepting. There is no clear statement explaining the return value."
                    },
                    {
                        "username": "_chandra_bhushan_",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        HashSet<Character> hs = new HashSet<>();\\n        int curr_max = 0;\\n        int left = 0;\\n        for(int right = 0 ; right < s.length() ; right++){\\n            if(!hs.contains(s.charAt(right))){\\n                hs.add(s.charAt(right));\\n                curr_max = Math.max(curr_max , right-left+1);\\n            }\\n            else{\\n                while(s.charAt(left)!=s.charAt(right)){\\n                    hs.remove(s.charAt(left));\\n                    left++;\\n                }\\n                hs.remove(s.charAt(left));\\n                left++;\\n                hs.add(s.charAt(right));\\n            }\\n        }\\n        return curr_max;    \\n    }\\n}"
                    },
                    {
                        "username": "_chandra_bhushan_",
                        "content": "return curr_max;\\n"
                    },
                    {
                        "username": "_chandra_bhushan_",
                        "content": "We can use Hashset and two pointer approach to solve this problem"
                    },
                    {
                        "username": "sachin_mittal1",
                        "content": "What is wrong in my code:\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n\\n        int n = s.length();\\n        int maxLen = INT_MIN;\\n\\n        for(int i=0; i<n; i++){\\n            set<int> freq;\\n            int len = 0;\\n            for(int j=i; j<n; j++){\\n                if(freq.find(s[j]) == freq.end()){\\n                    len++;\\n                    freq.insert(s[i]);\\n                }else{\\n                    break;\\n                }\\n            }\\n            maxLen = max(maxLen, len);\\n            cout<<maxLen<<\"  \"<<len<<endl;\\n            freq.clear();\\n        }\\n\\n        return maxLen;\\n    }\\n};"
                    },
                    {
                        "username": "janis__",
                        "content": "The issue in your code is that you\\'re inserting s[i] into the freq set inside the inner loop, when you should be inserting s[j]. Change freq.insert(s[i]); to freq.insert(s[j]); to correctly track the characters you\\'ve seen."
                    },
                    {
                        "username": "sachin_mittal1",
                        "content": "What is wrong in below code:\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n\n        int n = s.length();\n        int maxLen = INT_MIN;\n\n        for(int i=0; i<n; i++){\n            set<int> freq;\n            int len = 0;\n            for(int j=i; j<n; j++){\n                if(freq.find(s[j]) == freq.end()){\n                    len++;\n                    freq.insert(s[i]);\n                }else{\n                    break;\n                }\n            }\n            maxLen = max(maxLen, len);\n            cout<<maxLen<<\"  \"<<len<<endl;\n            freq.clear();\n        }\n\n        return maxLen;\n    }\n};"
                    }
                ]
            },
            {
                "id": 1999826,
                "content": [
                    {
                        "username": "Aditya_leet170802",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        set<int> sett;\\n        int count=1;\\n        int i=0;\\n        int j=1;\\n        int flag = 0; \\n\\n        if(s.size() <= 1){\\n            return s.size();\\n        }\\n        else if( s.size()==2){     \\n            if(s[0] == s[1]){\\n                return 1;\\n            }\\n            else{\\n                return 2;\\n            }\\n        }\\n        else{                   \\n \\n            while(j <= s.size()){\\n                if(s[i] == s[j]){\\n                    sett.insert(count);\\n                    count = 1;\\n                    i++;\\n                    j = i+1;\\n                }\\n                else{\\n                    for(int k=i;k<j;k++){\\n                        if(s[k] == s[j]){\\n                            flag = 1;\\n                        }\\n                    }\\n                    if(flag == 0){\\n                        j++;\\n                        count++;\\n                    }\\n                    else{\\n                        sett.insert(count);\\n                        count = 1;\\n                        i++;\\n                        j = i+1; \\n                    }\\n                }\\n            }\\n        }\\n        int max = *(sett.rbegin());\\n        return max;\\n    }\\n};\\n\\n\\ncan anybody help me with my code, for 3rd case my output is coming 2 \\n"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code is missing the insertion of the final count value into the sett after the while loop ends, which can lead to an incorrect result if the longest substring is at the end of the string. After the while loop, add sett.insert(count); to ensure the last counted value is considered when determining the maximum length."
                    },
                    {
                        "username": "richadubey3323",
                        "content": "why is it not working for testcase s=\" \"??\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        HashSet<Character> set=new HashSet<>();\\n        int max=0, count=0;\\n        for(int i=0;i<s.length();i++){\\n            char ch=s.charAt(i);\\n            if(!set.contains(ch)){\\n                set.add(ch);\\n                count++;\\n            }\\n            else{\\n                set.clear();\\n                if(count>max){\\n                    max=count;\\n                }\\n                count=0;\\n                i--;\\n            }\\n        }\\n        return max;\\n    }\\n}"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code fails for the testcase s=\" \" because when encountering a single character, it\\'s added to the set, but the max value is never updated unless a duplicate character is found later. To fix this, after the for-loop, add a check to update max with count if count is greater than max."
                    },
                    {
                        "username": "kongnakornna",
                        "content": "``````\\nfunction lengthOfLongestSubstring(s: string): number {\\n    let maxLength = 0;\\n    let start = 0;\\n    const charIndexMap: { [key: string]: number } = {};\\n\\n    for (let end = 0; end < s.length; end++) {\\n        const currentChar = s[end];\\n\\n        if (currentChar in charIndexMap && charIndexMap[currentChar] >= start) {\\n            start = charIndexMap[currentChar] + 1;\\n        }\\n\\n        charIndexMap[currentChar] = end;\\n        maxLength = Math.max(maxLength, end - start + 1);\\n    }\\n\\n    return maxLength;\\n}\\n\\n// Test cases\\nconst s1 = \"abcabcbb\";\\nconsole.log(lengthOfLongestSubstring(s1)); // Output: 3\\n\\nconst s2 = \"bbbbb\";\\nconsole.log(lengthOfLongestSubstring(s2)); // Output: 1\\n\\nconst s3 = \"pwwkew\";\\nconsole.log(lengthOfLongestSubstring(s3)); // Output: 3\\n\\n/*\\nIn this solution, we use a sliding window approach. We maintain two pointers, start and end, representing the current window\\'s boundaries. We also maintain a charIndexMap to store the most recent index where each character appeared.\\n\\nAs we iterate through the string, if we encounter a character that has been seen before and its index is within the current window\\'s boundaries, we update the start pointer to move right after the last occurrence of that character. This ensures that we\\'re maintaining a substring without repeating characters.\\n\\nWe update the charIndexMap with the current character\\'s index and calculate the length of the current substring. We keep track of the maximum length encountered so far and return it at the end.\\n \\n \\u0E43\\u0E19\\u0E01\\u0E32\\u0E23\\u0E41\\u0E01\\u0E49\\u0E1B\\u0E31\\u0E0D\\u0E2B\\u0E32\\u0E19\\u0E35\\u0E49 \\u0E40\\u0E23\\u0E32\\u0E43\\u0E0A\\u0E49\\u0E27\\u0E34\\u0E18\\u0E35\\u0E2B\\u0E19\\u0E49\\u0E32\\u0E15\\u0E48\\u0E32\\u0E07\\u0E1A\\u0E32\\u0E19\\u0E40\\u0E25\\u0E37\\u0E48\\u0E2D\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E21\\u0E35\\u0E1E\\u0E2D\\u0E22\\u0E19\\u0E4C\\u0E40\\u0E15\\u0E2D\\u0E23\\u0E4C\\u0E2A\\u0E2D\\u0E07\\u0E15\\u0E31\\u0E27 \\u0E04\\u0E37\\u0E2D\\u0E08\\u0E38\\u0E14\\u0E40\\u0E23\\u0E34\\u0E48\\u0E21\\u0E15\\u0E49\\u0E19\\u0E41\\u0E25\\u0E30\\u0E08\\u0E38\\u0E14\\u0E2A\\u0E34\\u0E49\\u0E19\\u0E2A\\u0E38\\u0E14 \\u0E0B\\u0E36\\u0E48\\u0E07\\u0E41\\u0E2A\\u0E14\\u0E07\\u0E16\\u0E36\\u0E07\\u0E02\\u0E2D\\u0E1A\\u0E40\\u0E02\\u0E15\\u0E02\\u0E2D\\u0E07\\u0E2B\\u0E19\\u0E49\\u0E32\\u0E15\\u0E48\\u0E32\\u0E07\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E22\\u0E31\\u0E07\\u0E23\\u0E31\\u0E01\\u0E29\\u0E32 charIndexMap \\u0E40\\u0E1E\\u0E37\\u0E48\\u0E2D\\u0E08\\u0E31\\u0E14\\u0E40\\u0E01\\u0E47\\u0E1A\\u0E14\\u0E31\\u0E0A\\u0E19\\u0E35\\u0E25\\u0E48\\u0E32\\u0E2A\\u0E38\\u0E14\\u0E17\\u0E35\\u0E48\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E41\\u0E15\\u0E48\\u0E25\\u0E30\\u0E15\\u0E31\\u0E27\\u0E1B\\u0E23\\u0E32\\u0E01\\u0E0F\\u0E02\\u0E36\\u0E49\\u0E19\\n\\n\\u0E02\\u0E13\\u0E30\\u0E17\\u0E35\\u0E48\\u0E40\\u0E23\\u0E32\\u0E27\\u0E19\\u0E0B\\u0E49\\u0E33\\u0E43\\u0E19\\u0E2A\\u0E15\\u0E23\\u0E34\\u0E07 \\u0E2B\\u0E32\\u0E01\\u0E40\\u0E23\\u0E32\\u0E1E\\u0E1A\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E17\\u0E35\\u0E48\\u0E40\\u0E04\\u0E22\\u0E40\\u0E2B\\u0E47\\u0E19\\u0E21\\u0E32\\u0E01\\u0E48\\u0E2D\\u0E19\\u0E41\\u0E25\\u0E30\\u0E14\\u0E31\\u0E0A\\u0E19\\u0E35\\u0E2D\\u0E22\\u0E39\\u0E48\\u0E20\\u0E32\\u0E22\\u0E43\\u0E19\\u0E02\\u0E2D\\u0E1A\\u0E40\\u0E02\\u0E15\\u0E02\\u0E2D\\u0E07\\u0E2B\\u0E19\\u0E49\\u0E32\\u0E15\\u0E48\\u0E32\\u0E07\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E08\\u0E30\\u0E2D\\u0E31\\u0E1B\\u0E40\\u0E14\\u0E15\\u0E15\\u0E31\\u0E27\\u0E0A\\u0E35\\u0E49\\u0E40\\u0E23\\u0E34\\u0E48\\u0E21\\u0E15\\u0E49\\u0E19\\u0E43\\u0E2B\\u0E49\\u0E40\\u0E25\\u0E37\\u0E48\\u0E2D\\u0E19\\u0E44\\u0E1B\\u0E17\\u0E32\\u0E07\\u0E02\\u0E27\\u0E32\\u0E2B\\u0E25\\u0E31\\u0E07\\u0E08\\u0E32\\u0E01\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E19\\u0E31\\u0E49\\u0E19\\u0E1B\\u0E23\\u0E32\\u0E01\\u0E0F\\u0E02\\u0E36\\u0E49\\u0E19\\u0E04\\u0E23\\u0E31\\u0E49\\u0E07\\u0E25\\u0E48\\u0E32\\u0E2A\\u0E38\\u0E14 \\u0E2A\\u0E34\\u0E48\\u0E07\\u0E19\\u0E35\\u0E49\\u0E17\\u0E33\\u0E43\\u0E2B\\u0E49\\u0E41\\u0E19\\u0E48\\u0E43\\u0E08\\u0E27\\u0E48\\u0E32\\u0E40\\u0E23\\u0E32\\u0E04\\u0E07\\u0E2A\\u0E15\\u0E23\\u0E34\\u0E07\\u0E22\\u0E48\\u0E2D\\u0E22\\u0E44\\u0E27\\u0E49\\u0E42\\u0E14\\u0E22\\u0E44\\u0E21\\u0E48\\u0E21\\u0E35\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E0B\\u0E49\\u0E33\\n\\n\\u0E40\\u0E23\\u0E32\\u0E2D\\u0E31\\u0E1B\\u0E40\\u0E14\\u0E15 charIndexMap \\u0E14\\u0E49\\u0E27\\u0E22\\u0E14\\u0E31\\u0E0A\\u0E19\\u0E35\\u0E02\\u0E2D\\u0E07\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E41\\u0E25\\u0E30\\u0E04\\u0E33\\u0E19\\u0E27\\u0E13\\u0E04\\u0E27\\u0E32\\u0E21\\u0E22\\u0E32\\u0E27\\u0E02\\u0E2D\\u0E07\\u0E2A\\u0E15\\u0E23\\u0E34\\u0E07\\u0E22\\u0E48\\u0E2D\\u0E22\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E15\\u0E34\\u0E14\\u0E15\\u0E32\\u0E21\\u0E04\\u0E27\\u0E32\\u0E21\\u0E22\\u0E32\\u0E27\\u0E2A\\u0E39\\u0E07\\u0E2A\\u0E38\\u0E14\\u0E17\\u0E35\\u0E48\\u0E1E\\u0E1A\\u0E08\\u0E19\\u0E16\\u0E36\\u0E07\\u0E15\\u0E2D\\u0E19\\u0E19\\u0E35\\u0E49\\u0E41\\u0E25\\u0E30\\u0E2A\\u0E48\\u0E07\\u0E04\\u0E37\\u0E19\\u0E43\\u0E19\\u0E15\\u0E2D\\u0E19\\u0E17\\u0E49\\u0E32\\u0E22\\n \\n */\\n``````"
                    },
                    {
                        "username": "Zersya",
                        "content": " `Output Limit Exceeded `\\n\\nWhat happen? I got all the test passed"
                    },
                    {
                        "username": "CarlosHsu",
                        "content": "why \"DVD\" the answer is 3"
                    },
                    {
                        "username": "JohnSyoft",
                        "content": "[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "jayaramv98",
                        "content": "What should I return from the function the length of the substring or the substring itself?\\nI returned the length until now and it is not accepting. There is no clear statement explaining the return value."
                    },
                    {
                        "username": "_chandra_bhushan_",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        HashSet<Character> hs = new HashSet<>();\\n        int curr_max = 0;\\n        int left = 0;\\n        for(int right = 0 ; right < s.length() ; right++){\\n            if(!hs.contains(s.charAt(right))){\\n                hs.add(s.charAt(right));\\n                curr_max = Math.max(curr_max , right-left+1);\\n            }\\n            else{\\n                while(s.charAt(left)!=s.charAt(right)){\\n                    hs.remove(s.charAt(left));\\n                    left++;\\n                }\\n                hs.remove(s.charAt(left));\\n                left++;\\n                hs.add(s.charAt(right));\\n            }\\n        }\\n        return curr_max;    \\n    }\\n}"
                    },
                    {
                        "username": "_chandra_bhushan_",
                        "content": "return curr_max;\\n"
                    },
                    {
                        "username": "_chandra_bhushan_",
                        "content": "We can use Hashset and two pointer approach to solve this problem"
                    },
                    {
                        "username": "sachin_mittal1",
                        "content": "What is wrong in my code:\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n\\n        int n = s.length();\\n        int maxLen = INT_MIN;\\n\\n        for(int i=0; i<n; i++){\\n            set<int> freq;\\n            int len = 0;\\n            for(int j=i; j<n; j++){\\n                if(freq.find(s[j]) == freq.end()){\\n                    len++;\\n                    freq.insert(s[i]);\\n                }else{\\n                    break;\\n                }\\n            }\\n            maxLen = max(maxLen, len);\\n            cout<<maxLen<<\"  \"<<len<<endl;\\n            freq.clear();\\n        }\\n\\n        return maxLen;\\n    }\\n};"
                    },
                    {
                        "username": "janis__",
                        "content": "The issue in your code is that you\\'re inserting s[i] into the freq set inside the inner loop, when you should be inserting s[j]. Change freq.insert(s[i]); to freq.insert(s[j]); to correctly track the characters you\\'ve seen."
                    },
                    {
                        "username": "sachin_mittal1",
                        "content": "What is wrong in below code:\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n\n        int n = s.length();\n        int maxLen = INT_MIN;\n\n        for(int i=0; i<n; i++){\n            set<int> freq;\n            int len = 0;\n            for(int j=i; j<n; j++){\n                if(freq.find(s[j]) == freq.end()){\n                    len++;\n                    freq.insert(s[i]);\n                }else{\n                    break;\n                }\n            }\n            maxLen = max(maxLen, len);\n            cout<<maxLen<<\"  \"<<len<<endl;\n            freq.clear();\n        }\n\n        return maxLen;\n    }\n};"
                    }
                ]
            },
            {
                "id": 1998773,
                "content": [
                    {
                        "username": "Aditya_leet170802",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        set<int> sett;\\n        int count=1;\\n        int i=0;\\n        int j=1;\\n        int flag = 0; \\n\\n        if(s.size() <= 1){\\n            return s.size();\\n        }\\n        else if( s.size()==2){     \\n            if(s[0] == s[1]){\\n                return 1;\\n            }\\n            else{\\n                return 2;\\n            }\\n        }\\n        else{                   \\n \\n            while(j <= s.size()){\\n                if(s[i] == s[j]){\\n                    sett.insert(count);\\n                    count = 1;\\n                    i++;\\n                    j = i+1;\\n                }\\n                else{\\n                    for(int k=i;k<j;k++){\\n                        if(s[k] == s[j]){\\n                            flag = 1;\\n                        }\\n                    }\\n                    if(flag == 0){\\n                        j++;\\n                        count++;\\n                    }\\n                    else{\\n                        sett.insert(count);\\n                        count = 1;\\n                        i++;\\n                        j = i+1; \\n                    }\\n                }\\n            }\\n        }\\n        int max = *(sett.rbegin());\\n        return max;\\n    }\\n};\\n\\n\\ncan anybody help me with my code, for 3rd case my output is coming 2 \\n"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code is missing the insertion of the final count value into the sett after the while loop ends, which can lead to an incorrect result if the longest substring is at the end of the string. After the while loop, add sett.insert(count); to ensure the last counted value is considered when determining the maximum length."
                    },
                    {
                        "username": "richadubey3323",
                        "content": "why is it not working for testcase s=\" \"??\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        HashSet<Character> set=new HashSet<>();\\n        int max=0, count=0;\\n        for(int i=0;i<s.length();i++){\\n            char ch=s.charAt(i);\\n            if(!set.contains(ch)){\\n                set.add(ch);\\n                count++;\\n            }\\n            else{\\n                set.clear();\\n                if(count>max){\\n                    max=count;\\n                }\\n                count=0;\\n                i--;\\n            }\\n        }\\n        return max;\\n    }\\n}"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code fails for the testcase s=\" \" because when encountering a single character, it\\'s added to the set, but the max value is never updated unless a duplicate character is found later. To fix this, after the for-loop, add a check to update max with count if count is greater than max."
                    },
                    {
                        "username": "kongnakornna",
                        "content": "``````\\nfunction lengthOfLongestSubstring(s: string): number {\\n    let maxLength = 0;\\n    let start = 0;\\n    const charIndexMap: { [key: string]: number } = {};\\n\\n    for (let end = 0; end < s.length; end++) {\\n        const currentChar = s[end];\\n\\n        if (currentChar in charIndexMap && charIndexMap[currentChar] >= start) {\\n            start = charIndexMap[currentChar] + 1;\\n        }\\n\\n        charIndexMap[currentChar] = end;\\n        maxLength = Math.max(maxLength, end - start + 1);\\n    }\\n\\n    return maxLength;\\n}\\n\\n// Test cases\\nconst s1 = \"abcabcbb\";\\nconsole.log(lengthOfLongestSubstring(s1)); // Output: 3\\n\\nconst s2 = \"bbbbb\";\\nconsole.log(lengthOfLongestSubstring(s2)); // Output: 1\\n\\nconst s3 = \"pwwkew\";\\nconsole.log(lengthOfLongestSubstring(s3)); // Output: 3\\n\\n/*\\nIn this solution, we use a sliding window approach. We maintain two pointers, start and end, representing the current window\\'s boundaries. We also maintain a charIndexMap to store the most recent index where each character appeared.\\n\\nAs we iterate through the string, if we encounter a character that has been seen before and its index is within the current window\\'s boundaries, we update the start pointer to move right after the last occurrence of that character. This ensures that we\\'re maintaining a substring without repeating characters.\\n\\nWe update the charIndexMap with the current character\\'s index and calculate the length of the current substring. We keep track of the maximum length encountered so far and return it at the end.\\n \\n \\u0E43\\u0E19\\u0E01\\u0E32\\u0E23\\u0E41\\u0E01\\u0E49\\u0E1B\\u0E31\\u0E0D\\u0E2B\\u0E32\\u0E19\\u0E35\\u0E49 \\u0E40\\u0E23\\u0E32\\u0E43\\u0E0A\\u0E49\\u0E27\\u0E34\\u0E18\\u0E35\\u0E2B\\u0E19\\u0E49\\u0E32\\u0E15\\u0E48\\u0E32\\u0E07\\u0E1A\\u0E32\\u0E19\\u0E40\\u0E25\\u0E37\\u0E48\\u0E2D\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E21\\u0E35\\u0E1E\\u0E2D\\u0E22\\u0E19\\u0E4C\\u0E40\\u0E15\\u0E2D\\u0E23\\u0E4C\\u0E2A\\u0E2D\\u0E07\\u0E15\\u0E31\\u0E27 \\u0E04\\u0E37\\u0E2D\\u0E08\\u0E38\\u0E14\\u0E40\\u0E23\\u0E34\\u0E48\\u0E21\\u0E15\\u0E49\\u0E19\\u0E41\\u0E25\\u0E30\\u0E08\\u0E38\\u0E14\\u0E2A\\u0E34\\u0E49\\u0E19\\u0E2A\\u0E38\\u0E14 \\u0E0B\\u0E36\\u0E48\\u0E07\\u0E41\\u0E2A\\u0E14\\u0E07\\u0E16\\u0E36\\u0E07\\u0E02\\u0E2D\\u0E1A\\u0E40\\u0E02\\u0E15\\u0E02\\u0E2D\\u0E07\\u0E2B\\u0E19\\u0E49\\u0E32\\u0E15\\u0E48\\u0E32\\u0E07\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E22\\u0E31\\u0E07\\u0E23\\u0E31\\u0E01\\u0E29\\u0E32 charIndexMap \\u0E40\\u0E1E\\u0E37\\u0E48\\u0E2D\\u0E08\\u0E31\\u0E14\\u0E40\\u0E01\\u0E47\\u0E1A\\u0E14\\u0E31\\u0E0A\\u0E19\\u0E35\\u0E25\\u0E48\\u0E32\\u0E2A\\u0E38\\u0E14\\u0E17\\u0E35\\u0E48\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E41\\u0E15\\u0E48\\u0E25\\u0E30\\u0E15\\u0E31\\u0E27\\u0E1B\\u0E23\\u0E32\\u0E01\\u0E0F\\u0E02\\u0E36\\u0E49\\u0E19\\n\\n\\u0E02\\u0E13\\u0E30\\u0E17\\u0E35\\u0E48\\u0E40\\u0E23\\u0E32\\u0E27\\u0E19\\u0E0B\\u0E49\\u0E33\\u0E43\\u0E19\\u0E2A\\u0E15\\u0E23\\u0E34\\u0E07 \\u0E2B\\u0E32\\u0E01\\u0E40\\u0E23\\u0E32\\u0E1E\\u0E1A\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E17\\u0E35\\u0E48\\u0E40\\u0E04\\u0E22\\u0E40\\u0E2B\\u0E47\\u0E19\\u0E21\\u0E32\\u0E01\\u0E48\\u0E2D\\u0E19\\u0E41\\u0E25\\u0E30\\u0E14\\u0E31\\u0E0A\\u0E19\\u0E35\\u0E2D\\u0E22\\u0E39\\u0E48\\u0E20\\u0E32\\u0E22\\u0E43\\u0E19\\u0E02\\u0E2D\\u0E1A\\u0E40\\u0E02\\u0E15\\u0E02\\u0E2D\\u0E07\\u0E2B\\u0E19\\u0E49\\u0E32\\u0E15\\u0E48\\u0E32\\u0E07\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E08\\u0E30\\u0E2D\\u0E31\\u0E1B\\u0E40\\u0E14\\u0E15\\u0E15\\u0E31\\u0E27\\u0E0A\\u0E35\\u0E49\\u0E40\\u0E23\\u0E34\\u0E48\\u0E21\\u0E15\\u0E49\\u0E19\\u0E43\\u0E2B\\u0E49\\u0E40\\u0E25\\u0E37\\u0E48\\u0E2D\\u0E19\\u0E44\\u0E1B\\u0E17\\u0E32\\u0E07\\u0E02\\u0E27\\u0E32\\u0E2B\\u0E25\\u0E31\\u0E07\\u0E08\\u0E32\\u0E01\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E19\\u0E31\\u0E49\\u0E19\\u0E1B\\u0E23\\u0E32\\u0E01\\u0E0F\\u0E02\\u0E36\\u0E49\\u0E19\\u0E04\\u0E23\\u0E31\\u0E49\\u0E07\\u0E25\\u0E48\\u0E32\\u0E2A\\u0E38\\u0E14 \\u0E2A\\u0E34\\u0E48\\u0E07\\u0E19\\u0E35\\u0E49\\u0E17\\u0E33\\u0E43\\u0E2B\\u0E49\\u0E41\\u0E19\\u0E48\\u0E43\\u0E08\\u0E27\\u0E48\\u0E32\\u0E40\\u0E23\\u0E32\\u0E04\\u0E07\\u0E2A\\u0E15\\u0E23\\u0E34\\u0E07\\u0E22\\u0E48\\u0E2D\\u0E22\\u0E44\\u0E27\\u0E49\\u0E42\\u0E14\\u0E22\\u0E44\\u0E21\\u0E48\\u0E21\\u0E35\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E0B\\u0E49\\u0E33\\n\\n\\u0E40\\u0E23\\u0E32\\u0E2D\\u0E31\\u0E1B\\u0E40\\u0E14\\u0E15 charIndexMap \\u0E14\\u0E49\\u0E27\\u0E22\\u0E14\\u0E31\\u0E0A\\u0E19\\u0E35\\u0E02\\u0E2D\\u0E07\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E41\\u0E25\\u0E30\\u0E04\\u0E33\\u0E19\\u0E27\\u0E13\\u0E04\\u0E27\\u0E32\\u0E21\\u0E22\\u0E32\\u0E27\\u0E02\\u0E2D\\u0E07\\u0E2A\\u0E15\\u0E23\\u0E34\\u0E07\\u0E22\\u0E48\\u0E2D\\u0E22\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E15\\u0E34\\u0E14\\u0E15\\u0E32\\u0E21\\u0E04\\u0E27\\u0E32\\u0E21\\u0E22\\u0E32\\u0E27\\u0E2A\\u0E39\\u0E07\\u0E2A\\u0E38\\u0E14\\u0E17\\u0E35\\u0E48\\u0E1E\\u0E1A\\u0E08\\u0E19\\u0E16\\u0E36\\u0E07\\u0E15\\u0E2D\\u0E19\\u0E19\\u0E35\\u0E49\\u0E41\\u0E25\\u0E30\\u0E2A\\u0E48\\u0E07\\u0E04\\u0E37\\u0E19\\u0E43\\u0E19\\u0E15\\u0E2D\\u0E19\\u0E17\\u0E49\\u0E32\\u0E22\\n \\n */\\n``````"
                    },
                    {
                        "username": "Zersya",
                        "content": " `Output Limit Exceeded `\\n\\nWhat happen? I got all the test passed"
                    },
                    {
                        "username": "CarlosHsu",
                        "content": "why \"DVD\" the answer is 3"
                    },
                    {
                        "username": "JohnSyoft",
                        "content": "[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "jayaramv98",
                        "content": "What should I return from the function the length of the substring or the substring itself?\\nI returned the length until now and it is not accepting. There is no clear statement explaining the return value."
                    },
                    {
                        "username": "_chandra_bhushan_",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        HashSet<Character> hs = new HashSet<>();\\n        int curr_max = 0;\\n        int left = 0;\\n        for(int right = 0 ; right < s.length() ; right++){\\n            if(!hs.contains(s.charAt(right))){\\n                hs.add(s.charAt(right));\\n                curr_max = Math.max(curr_max , right-left+1);\\n            }\\n            else{\\n                while(s.charAt(left)!=s.charAt(right)){\\n                    hs.remove(s.charAt(left));\\n                    left++;\\n                }\\n                hs.remove(s.charAt(left));\\n                left++;\\n                hs.add(s.charAt(right));\\n            }\\n        }\\n        return curr_max;    \\n    }\\n}"
                    },
                    {
                        "username": "_chandra_bhushan_",
                        "content": "return curr_max;\\n"
                    },
                    {
                        "username": "_chandra_bhushan_",
                        "content": "We can use Hashset and two pointer approach to solve this problem"
                    },
                    {
                        "username": "sachin_mittal1",
                        "content": "What is wrong in my code:\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n\\n        int n = s.length();\\n        int maxLen = INT_MIN;\\n\\n        for(int i=0; i<n; i++){\\n            set<int> freq;\\n            int len = 0;\\n            for(int j=i; j<n; j++){\\n                if(freq.find(s[j]) == freq.end()){\\n                    len++;\\n                    freq.insert(s[i]);\\n                }else{\\n                    break;\\n                }\\n            }\\n            maxLen = max(maxLen, len);\\n            cout<<maxLen<<\"  \"<<len<<endl;\\n            freq.clear();\\n        }\\n\\n        return maxLen;\\n    }\\n};"
                    },
                    {
                        "username": "janis__",
                        "content": "The issue in your code is that you\\'re inserting s[i] into the freq set inside the inner loop, when you should be inserting s[j]. Change freq.insert(s[i]); to freq.insert(s[j]); to correctly track the characters you\\'ve seen."
                    },
                    {
                        "username": "sachin_mittal1",
                        "content": "What is wrong in below code:\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n\n        int n = s.length();\n        int maxLen = INT_MIN;\n\n        for(int i=0; i<n; i++){\n            set<int> freq;\n            int len = 0;\n            for(int j=i; j<n; j++){\n                if(freq.find(s[j]) == freq.end()){\n                    len++;\n                    freq.insert(s[i]);\n                }else{\n                    break;\n                }\n            }\n            maxLen = max(maxLen, len);\n            cout<<maxLen<<\"  \"<<len<<endl;\n            freq.clear();\n        }\n\n        return maxLen;\n    }\n};"
                    }
                ]
            },
            {
                "id": 1998771,
                "content": [
                    {
                        "username": "Aditya_leet170802",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        set<int> sett;\\n        int count=1;\\n        int i=0;\\n        int j=1;\\n        int flag = 0; \\n\\n        if(s.size() <= 1){\\n            return s.size();\\n        }\\n        else if( s.size()==2){     \\n            if(s[0] == s[1]){\\n                return 1;\\n            }\\n            else{\\n                return 2;\\n            }\\n        }\\n        else{                   \\n \\n            while(j <= s.size()){\\n                if(s[i] == s[j]){\\n                    sett.insert(count);\\n                    count = 1;\\n                    i++;\\n                    j = i+1;\\n                }\\n                else{\\n                    for(int k=i;k<j;k++){\\n                        if(s[k] == s[j]){\\n                            flag = 1;\\n                        }\\n                    }\\n                    if(flag == 0){\\n                        j++;\\n                        count++;\\n                    }\\n                    else{\\n                        sett.insert(count);\\n                        count = 1;\\n                        i++;\\n                        j = i+1; \\n                    }\\n                }\\n            }\\n        }\\n        int max = *(sett.rbegin());\\n        return max;\\n    }\\n};\\n\\n\\ncan anybody help me with my code, for 3rd case my output is coming 2 \\n"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code is missing the insertion of the final count value into the sett after the while loop ends, which can lead to an incorrect result if the longest substring is at the end of the string. After the while loop, add sett.insert(count); to ensure the last counted value is considered when determining the maximum length."
                    },
                    {
                        "username": "richadubey3323",
                        "content": "why is it not working for testcase s=\" \"??\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        HashSet<Character> set=new HashSet<>();\\n        int max=0, count=0;\\n        for(int i=0;i<s.length();i++){\\n            char ch=s.charAt(i);\\n            if(!set.contains(ch)){\\n                set.add(ch);\\n                count++;\\n            }\\n            else{\\n                set.clear();\\n                if(count>max){\\n                    max=count;\\n                }\\n                count=0;\\n                i--;\\n            }\\n        }\\n        return max;\\n    }\\n}"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code fails for the testcase s=\" \" because when encountering a single character, it\\'s added to the set, but the max value is never updated unless a duplicate character is found later. To fix this, after the for-loop, add a check to update max with count if count is greater than max."
                    },
                    {
                        "username": "kongnakornna",
                        "content": "``````\\nfunction lengthOfLongestSubstring(s: string): number {\\n    let maxLength = 0;\\n    let start = 0;\\n    const charIndexMap: { [key: string]: number } = {};\\n\\n    for (let end = 0; end < s.length; end++) {\\n        const currentChar = s[end];\\n\\n        if (currentChar in charIndexMap && charIndexMap[currentChar] >= start) {\\n            start = charIndexMap[currentChar] + 1;\\n        }\\n\\n        charIndexMap[currentChar] = end;\\n        maxLength = Math.max(maxLength, end - start + 1);\\n    }\\n\\n    return maxLength;\\n}\\n\\n// Test cases\\nconst s1 = \"abcabcbb\";\\nconsole.log(lengthOfLongestSubstring(s1)); // Output: 3\\n\\nconst s2 = \"bbbbb\";\\nconsole.log(lengthOfLongestSubstring(s2)); // Output: 1\\n\\nconst s3 = \"pwwkew\";\\nconsole.log(lengthOfLongestSubstring(s3)); // Output: 3\\n\\n/*\\nIn this solution, we use a sliding window approach. We maintain two pointers, start and end, representing the current window\\'s boundaries. We also maintain a charIndexMap to store the most recent index where each character appeared.\\n\\nAs we iterate through the string, if we encounter a character that has been seen before and its index is within the current window\\'s boundaries, we update the start pointer to move right after the last occurrence of that character. This ensures that we\\'re maintaining a substring without repeating characters.\\n\\nWe update the charIndexMap with the current character\\'s index and calculate the length of the current substring. We keep track of the maximum length encountered so far and return it at the end.\\n \\n \\u0E43\\u0E19\\u0E01\\u0E32\\u0E23\\u0E41\\u0E01\\u0E49\\u0E1B\\u0E31\\u0E0D\\u0E2B\\u0E32\\u0E19\\u0E35\\u0E49 \\u0E40\\u0E23\\u0E32\\u0E43\\u0E0A\\u0E49\\u0E27\\u0E34\\u0E18\\u0E35\\u0E2B\\u0E19\\u0E49\\u0E32\\u0E15\\u0E48\\u0E32\\u0E07\\u0E1A\\u0E32\\u0E19\\u0E40\\u0E25\\u0E37\\u0E48\\u0E2D\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E21\\u0E35\\u0E1E\\u0E2D\\u0E22\\u0E19\\u0E4C\\u0E40\\u0E15\\u0E2D\\u0E23\\u0E4C\\u0E2A\\u0E2D\\u0E07\\u0E15\\u0E31\\u0E27 \\u0E04\\u0E37\\u0E2D\\u0E08\\u0E38\\u0E14\\u0E40\\u0E23\\u0E34\\u0E48\\u0E21\\u0E15\\u0E49\\u0E19\\u0E41\\u0E25\\u0E30\\u0E08\\u0E38\\u0E14\\u0E2A\\u0E34\\u0E49\\u0E19\\u0E2A\\u0E38\\u0E14 \\u0E0B\\u0E36\\u0E48\\u0E07\\u0E41\\u0E2A\\u0E14\\u0E07\\u0E16\\u0E36\\u0E07\\u0E02\\u0E2D\\u0E1A\\u0E40\\u0E02\\u0E15\\u0E02\\u0E2D\\u0E07\\u0E2B\\u0E19\\u0E49\\u0E32\\u0E15\\u0E48\\u0E32\\u0E07\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E22\\u0E31\\u0E07\\u0E23\\u0E31\\u0E01\\u0E29\\u0E32 charIndexMap \\u0E40\\u0E1E\\u0E37\\u0E48\\u0E2D\\u0E08\\u0E31\\u0E14\\u0E40\\u0E01\\u0E47\\u0E1A\\u0E14\\u0E31\\u0E0A\\u0E19\\u0E35\\u0E25\\u0E48\\u0E32\\u0E2A\\u0E38\\u0E14\\u0E17\\u0E35\\u0E48\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E41\\u0E15\\u0E48\\u0E25\\u0E30\\u0E15\\u0E31\\u0E27\\u0E1B\\u0E23\\u0E32\\u0E01\\u0E0F\\u0E02\\u0E36\\u0E49\\u0E19\\n\\n\\u0E02\\u0E13\\u0E30\\u0E17\\u0E35\\u0E48\\u0E40\\u0E23\\u0E32\\u0E27\\u0E19\\u0E0B\\u0E49\\u0E33\\u0E43\\u0E19\\u0E2A\\u0E15\\u0E23\\u0E34\\u0E07 \\u0E2B\\u0E32\\u0E01\\u0E40\\u0E23\\u0E32\\u0E1E\\u0E1A\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E17\\u0E35\\u0E48\\u0E40\\u0E04\\u0E22\\u0E40\\u0E2B\\u0E47\\u0E19\\u0E21\\u0E32\\u0E01\\u0E48\\u0E2D\\u0E19\\u0E41\\u0E25\\u0E30\\u0E14\\u0E31\\u0E0A\\u0E19\\u0E35\\u0E2D\\u0E22\\u0E39\\u0E48\\u0E20\\u0E32\\u0E22\\u0E43\\u0E19\\u0E02\\u0E2D\\u0E1A\\u0E40\\u0E02\\u0E15\\u0E02\\u0E2D\\u0E07\\u0E2B\\u0E19\\u0E49\\u0E32\\u0E15\\u0E48\\u0E32\\u0E07\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E08\\u0E30\\u0E2D\\u0E31\\u0E1B\\u0E40\\u0E14\\u0E15\\u0E15\\u0E31\\u0E27\\u0E0A\\u0E35\\u0E49\\u0E40\\u0E23\\u0E34\\u0E48\\u0E21\\u0E15\\u0E49\\u0E19\\u0E43\\u0E2B\\u0E49\\u0E40\\u0E25\\u0E37\\u0E48\\u0E2D\\u0E19\\u0E44\\u0E1B\\u0E17\\u0E32\\u0E07\\u0E02\\u0E27\\u0E32\\u0E2B\\u0E25\\u0E31\\u0E07\\u0E08\\u0E32\\u0E01\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E19\\u0E31\\u0E49\\u0E19\\u0E1B\\u0E23\\u0E32\\u0E01\\u0E0F\\u0E02\\u0E36\\u0E49\\u0E19\\u0E04\\u0E23\\u0E31\\u0E49\\u0E07\\u0E25\\u0E48\\u0E32\\u0E2A\\u0E38\\u0E14 \\u0E2A\\u0E34\\u0E48\\u0E07\\u0E19\\u0E35\\u0E49\\u0E17\\u0E33\\u0E43\\u0E2B\\u0E49\\u0E41\\u0E19\\u0E48\\u0E43\\u0E08\\u0E27\\u0E48\\u0E32\\u0E40\\u0E23\\u0E32\\u0E04\\u0E07\\u0E2A\\u0E15\\u0E23\\u0E34\\u0E07\\u0E22\\u0E48\\u0E2D\\u0E22\\u0E44\\u0E27\\u0E49\\u0E42\\u0E14\\u0E22\\u0E44\\u0E21\\u0E48\\u0E21\\u0E35\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E0B\\u0E49\\u0E33\\n\\n\\u0E40\\u0E23\\u0E32\\u0E2D\\u0E31\\u0E1B\\u0E40\\u0E14\\u0E15 charIndexMap \\u0E14\\u0E49\\u0E27\\u0E22\\u0E14\\u0E31\\u0E0A\\u0E19\\u0E35\\u0E02\\u0E2D\\u0E07\\u0E2D\\u0E31\\u0E01\\u0E02\\u0E23\\u0E30\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E41\\u0E25\\u0E30\\u0E04\\u0E33\\u0E19\\u0E27\\u0E13\\u0E04\\u0E27\\u0E32\\u0E21\\u0E22\\u0E32\\u0E27\\u0E02\\u0E2D\\u0E07\\u0E2A\\u0E15\\u0E23\\u0E34\\u0E07\\u0E22\\u0E48\\u0E2D\\u0E22\\u0E1B\\u0E31\\u0E08\\u0E08\\u0E38\\u0E1A\\u0E31\\u0E19 \\u0E40\\u0E23\\u0E32\\u0E15\\u0E34\\u0E14\\u0E15\\u0E32\\u0E21\\u0E04\\u0E27\\u0E32\\u0E21\\u0E22\\u0E32\\u0E27\\u0E2A\\u0E39\\u0E07\\u0E2A\\u0E38\\u0E14\\u0E17\\u0E35\\u0E48\\u0E1E\\u0E1A\\u0E08\\u0E19\\u0E16\\u0E36\\u0E07\\u0E15\\u0E2D\\u0E19\\u0E19\\u0E35\\u0E49\\u0E41\\u0E25\\u0E30\\u0E2A\\u0E48\\u0E07\\u0E04\\u0E37\\u0E19\\u0E43\\u0E19\\u0E15\\u0E2D\\u0E19\\u0E17\\u0E49\\u0E32\\u0E22\\n \\n */\\n``````"
                    },
                    {
                        "username": "Zersya",
                        "content": " `Output Limit Exceeded `\\n\\nWhat happen? I got all the test passed"
                    },
                    {
                        "username": "CarlosHsu",
                        "content": "why \"DVD\" the answer is 3"
                    },
                    {
                        "username": "JohnSyoft",
                        "content": "[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "jayaramv98",
                        "content": "What should I return from the function the length of the substring or the substring itself?\\nI returned the length until now and it is not accepting. There is no clear statement explaining the return value."
                    },
                    {
                        "username": "_chandra_bhushan_",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        HashSet<Character> hs = new HashSet<>();\\n        int curr_max = 0;\\n        int left = 0;\\n        for(int right = 0 ; right < s.length() ; right++){\\n            if(!hs.contains(s.charAt(right))){\\n                hs.add(s.charAt(right));\\n                curr_max = Math.max(curr_max , right-left+1);\\n            }\\n            else{\\n                while(s.charAt(left)!=s.charAt(right)){\\n                    hs.remove(s.charAt(left));\\n                    left++;\\n                }\\n                hs.remove(s.charAt(left));\\n                left++;\\n                hs.add(s.charAt(right));\\n            }\\n        }\\n        return curr_max;    \\n    }\\n}"
                    },
                    {
                        "username": "_chandra_bhushan_",
                        "content": "return curr_max;\\n"
                    },
                    {
                        "username": "_chandra_bhushan_",
                        "content": "We can use Hashset and two pointer approach to solve this problem"
                    },
                    {
                        "username": "sachin_mittal1",
                        "content": "What is wrong in my code:\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n\\n        int n = s.length();\\n        int maxLen = INT_MIN;\\n\\n        for(int i=0; i<n; i++){\\n            set<int> freq;\\n            int len = 0;\\n            for(int j=i; j<n; j++){\\n                if(freq.find(s[j]) == freq.end()){\\n                    len++;\\n                    freq.insert(s[i]);\\n                }else{\\n                    break;\\n                }\\n            }\\n            maxLen = max(maxLen, len);\\n            cout<<maxLen<<\"  \"<<len<<endl;\\n            freq.clear();\\n        }\\n\\n        return maxLen;\\n    }\\n};"
                    },
                    {
                        "username": "janis__",
                        "content": "The issue in your code is that you\\'re inserting s[i] into the freq set inside the inner loop, when you should be inserting s[j]. Change freq.insert(s[i]); to freq.insert(s[j]); to correctly track the characters you\\'ve seen."
                    },
                    {
                        "username": "sachin_mittal1",
                        "content": "What is wrong in below code:\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n\n        int n = s.length();\n        int maxLen = INT_MIN;\n\n        for(int i=0; i<n; i++){\n            set<int> freq;\n            int len = 0;\n            for(int j=i; j<n; j++){\n                if(freq.find(s[j]) == freq.end()){\n                    len++;\n                    freq.insert(s[i]);\n                }else{\n                    break;\n                }\n            }\n            maxLen = max(maxLen, len);\n            cout<<maxLen<<\"  \"<<len<<endl;\n            freq.clear();\n        }\n\n        return maxLen;\n    }\n};"
                    }
                ]
            },
            {
                "id": 1997299,
                "content": [
                    {
                        "username": "MitchMountainCoding",
                        "content": "To me- this problem is good practice for understanding and implementing the \"sliding window\" approach, which is a commonly used technique to solve array/string problems in linear time."
                    },
                    {
                        "username": "alvi__",
                        "content": "Testcase 987 is over 1k chars long, don\\'t try to bruteforce it with \"normal techniques\" such as for-loops, you will most likely get a \"Time Limit Exceeded\" and 986/987 testcases passed. Maybe someone should take a look at that testcase, I am not sure if this is intended."
                    },
                    {
                        "username": "Elad770",
                        "content": "I\\'m not sure I understand 100% the question, does the following string count as a substring?\\nSuppose the string is abcadabc is the following substring: abcad also considered a substring? Or not, a actually appears twice on the other hand this substring can be 2 different substrings abc and ad and in the first example for example what actually caused the problem was that the substring abc repeated itself twice and therefore the answer was 3"
                    },
                    {
                        "username": "janis__",
                        "content": "Yes, in the string \"abcadabc\", \"abcad\" is considered a substring. However, for the problem of finding the longest substring without repeating characters, \"abcad\" would not be the longest valid substring because the character \"a\" appears twice; instead, \"abc\" or \"cad\" would be valid solutions with a length of 3."
                    },
                    {
                        "username": "vianj26",
                        "content": "this question easier than those of the \"Easy\" questions."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "Everything you should remember that `'  '` is not a valid string character, that's why if you try to loop and append, programming languages won't append, because that's not a valid character.\n\nHowever, the authors know more :D"
                    },
                    {
                        "username": "deepaBhoomasbaskar",
                        "content": "this one worked but  failed for one test case\\nlength= len(s)\\ni=0\\nj=0\\ncount=0\\nmaxval=0\\nmydict={}\\n\\n\\nwhile (i<length):\\n    desired_key = \"key2\"\\n    found_key = False\\n    print(\"iteration=\", i)\\n    print(s[i])\\n    for key, value in mydict.items():\\n        print(key, value)\\n    if s[i] not in mydict:\\n        mydict[s[i]]=i\\n        count=len(mydict)\\n        if count > maxval:\\n            maxval = count\\n        print(\"maxval=\", maxval)\\n    else:\\n        desired_key=s[i]\\n        print(desired_key)\\n        while s[j] != desired_key:\\n            del mydict[s[j]]\\n            j=j+1\\n            print(j)\\n        j=j+1\\n        if desired_key in mydict:\\n            value = mydict.pop(desired_key)\\n            print(f\"Popped: {desired_key} -> {value}\")\\n        mydict[s[i]]=i\\n            \\n    i=i+1    "
                    },
                    {
                        "username": "janis__",
                        "content": "The issue arises from the way you handle the case when s[i] is already in mydict. After finding the desired_key, you should delete entries from the start (j) until you remove the desired_key, then move j one step further and continue with the outer loop. Ensure that after updating j, you don\\'t immediately insert the current s[i] into mydict within the same iteration, as it will be handled in the next loop iteration."
                    },
                    {
                        "username": "ajay2305",
                        "content": "abbacd\\nwhy acd is wrong i mean ther\\'s no repeating char here \\nplease help"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "**\"bacd\"** is longest substring so acd is wrong"
                    },
                    {
                        "username": "harryk22m",
                        "content": "Use stringbuilder y\\u2019all "
                    },
                    {
                        "username": "user2354tC",
                        "content": "The answer of Case 3  is 4 because it have four different characters and my code also give answer 4. But it gives that my answer is wrong and the right answer is 3. How is it possible?"
                    },
                    {
                        "username": "iAniruddh2004",
                        "content": "f**k I just complete 986 testcase, now they are giving me very very very long input and when I run code they say : Time Limit Exceeded"
                    },
                    {
                        "username": "orangejuice555",
                        "content": "lol same here except for me its memory exceeded"
                    }
                ]
            },
            {
                "id": 1996673,
                "content": [
                    {
                        "username": "MitchMountainCoding",
                        "content": "To me- this problem is good practice for understanding and implementing the \"sliding window\" approach, which is a commonly used technique to solve array/string problems in linear time."
                    },
                    {
                        "username": "alvi__",
                        "content": "Testcase 987 is over 1k chars long, don\\'t try to bruteforce it with \"normal techniques\" such as for-loops, you will most likely get a \"Time Limit Exceeded\" and 986/987 testcases passed. Maybe someone should take a look at that testcase, I am not sure if this is intended."
                    },
                    {
                        "username": "Elad770",
                        "content": "I\\'m not sure I understand 100% the question, does the following string count as a substring?\\nSuppose the string is abcadabc is the following substring: abcad also considered a substring? Or not, a actually appears twice on the other hand this substring can be 2 different substrings abc and ad and in the first example for example what actually caused the problem was that the substring abc repeated itself twice and therefore the answer was 3"
                    },
                    {
                        "username": "janis__",
                        "content": "Yes, in the string \"abcadabc\", \"abcad\" is considered a substring. However, for the problem of finding the longest substring without repeating characters, \"abcad\" would not be the longest valid substring because the character \"a\" appears twice; instead, \"abc\" or \"cad\" would be valid solutions with a length of 3."
                    },
                    {
                        "username": "vianj26",
                        "content": "this question easier than those of the \"Easy\" questions."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "Everything you should remember that `'  '` is not a valid string character, that's why if you try to loop and append, programming languages won't append, because that's not a valid character.\n\nHowever, the authors know more :D"
                    },
                    {
                        "username": "deepaBhoomasbaskar",
                        "content": "this one worked but  failed for one test case\\nlength= len(s)\\ni=0\\nj=0\\ncount=0\\nmaxval=0\\nmydict={}\\n\\n\\nwhile (i<length):\\n    desired_key = \"key2\"\\n    found_key = False\\n    print(\"iteration=\", i)\\n    print(s[i])\\n    for key, value in mydict.items():\\n        print(key, value)\\n    if s[i] not in mydict:\\n        mydict[s[i]]=i\\n        count=len(mydict)\\n        if count > maxval:\\n            maxval = count\\n        print(\"maxval=\", maxval)\\n    else:\\n        desired_key=s[i]\\n        print(desired_key)\\n        while s[j] != desired_key:\\n            del mydict[s[j]]\\n            j=j+1\\n            print(j)\\n        j=j+1\\n        if desired_key in mydict:\\n            value = mydict.pop(desired_key)\\n            print(f\"Popped: {desired_key} -> {value}\")\\n        mydict[s[i]]=i\\n            \\n    i=i+1    "
                    },
                    {
                        "username": "janis__",
                        "content": "The issue arises from the way you handle the case when s[i] is already in mydict. After finding the desired_key, you should delete entries from the start (j) until you remove the desired_key, then move j one step further and continue with the outer loop. Ensure that after updating j, you don\\'t immediately insert the current s[i] into mydict within the same iteration, as it will be handled in the next loop iteration."
                    },
                    {
                        "username": "ajay2305",
                        "content": "abbacd\\nwhy acd is wrong i mean ther\\'s no repeating char here \\nplease help"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "**\"bacd\"** is longest substring so acd is wrong"
                    },
                    {
                        "username": "harryk22m",
                        "content": "Use stringbuilder y\\u2019all "
                    },
                    {
                        "username": "user2354tC",
                        "content": "The answer of Case 3  is 4 because it have four different characters and my code also give answer 4. But it gives that my answer is wrong and the right answer is 3. How is it possible?"
                    },
                    {
                        "username": "iAniruddh2004",
                        "content": "f**k I just complete 986 testcase, now they are giving me very very very long input and when I run code they say : Time Limit Exceeded"
                    },
                    {
                        "username": "orangejuice555",
                        "content": "lol same here except for me its memory exceeded"
                    }
                ]
            },
            {
                "id": 1996447,
                "content": [
                    {
                        "username": "MitchMountainCoding",
                        "content": "To me- this problem is good practice for understanding and implementing the \"sliding window\" approach, which is a commonly used technique to solve array/string problems in linear time."
                    },
                    {
                        "username": "alvi__",
                        "content": "Testcase 987 is over 1k chars long, don\\'t try to bruteforce it with \"normal techniques\" such as for-loops, you will most likely get a \"Time Limit Exceeded\" and 986/987 testcases passed. Maybe someone should take a look at that testcase, I am not sure if this is intended."
                    },
                    {
                        "username": "Elad770",
                        "content": "I\\'m not sure I understand 100% the question, does the following string count as a substring?\\nSuppose the string is abcadabc is the following substring: abcad also considered a substring? Or not, a actually appears twice on the other hand this substring can be 2 different substrings abc and ad and in the first example for example what actually caused the problem was that the substring abc repeated itself twice and therefore the answer was 3"
                    },
                    {
                        "username": "janis__",
                        "content": "Yes, in the string \"abcadabc\", \"abcad\" is considered a substring. However, for the problem of finding the longest substring without repeating characters, \"abcad\" would not be the longest valid substring because the character \"a\" appears twice; instead, \"abc\" or \"cad\" would be valid solutions with a length of 3."
                    },
                    {
                        "username": "vianj26",
                        "content": "this question easier than those of the \"Easy\" questions."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "Everything you should remember that `'  '` is not a valid string character, that's why if you try to loop and append, programming languages won't append, because that's not a valid character.\n\nHowever, the authors know more :D"
                    },
                    {
                        "username": "deepaBhoomasbaskar",
                        "content": "this one worked but  failed for one test case\\nlength= len(s)\\ni=0\\nj=0\\ncount=0\\nmaxval=0\\nmydict={}\\n\\n\\nwhile (i<length):\\n    desired_key = \"key2\"\\n    found_key = False\\n    print(\"iteration=\", i)\\n    print(s[i])\\n    for key, value in mydict.items():\\n        print(key, value)\\n    if s[i] not in mydict:\\n        mydict[s[i]]=i\\n        count=len(mydict)\\n        if count > maxval:\\n            maxval = count\\n        print(\"maxval=\", maxval)\\n    else:\\n        desired_key=s[i]\\n        print(desired_key)\\n        while s[j] != desired_key:\\n            del mydict[s[j]]\\n            j=j+1\\n            print(j)\\n        j=j+1\\n        if desired_key in mydict:\\n            value = mydict.pop(desired_key)\\n            print(f\"Popped: {desired_key} -> {value}\")\\n        mydict[s[i]]=i\\n            \\n    i=i+1    "
                    },
                    {
                        "username": "janis__",
                        "content": "The issue arises from the way you handle the case when s[i] is already in mydict. After finding the desired_key, you should delete entries from the start (j) until you remove the desired_key, then move j one step further and continue with the outer loop. Ensure that after updating j, you don\\'t immediately insert the current s[i] into mydict within the same iteration, as it will be handled in the next loop iteration."
                    },
                    {
                        "username": "ajay2305",
                        "content": "abbacd\\nwhy acd is wrong i mean ther\\'s no repeating char here \\nplease help"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "**\"bacd\"** is longest substring so acd is wrong"
                    },
                    {
                        "username": "harryk22m",
                        "content": "Use stringbuilder y\\u2019all "
                    },
                    {
                        "username": "user2354tC",
                        "content": "The answer of Case 3  is 4 because it have four different characters and my code also give answer 4. But it gives that my answer is wrong and the right answer is 3. How is it possible?"
                    },
                    {
                        "username": "iAniruddh2004",
                        "content": "f**k I just complete 986 testcase, now they are giving me very very very long input and when I run code they say : Time Limit Exceeded"
                    },
                    {
                        "username": "orangejuice555",
                        "content": "lol same here except for me its memory exceeded"
                    }
                ]
            },
            {
                "id": 1986342,
                "content": [
                    {
                        "username": "MitchMountainCoding",
                        "content": "To me- this problem is good practice for understanding and implementing the \"sliding window\" approach, which is a commonly used technique to solve array/string problems in linear time."
                    },
                    {
                        "username": "alvi__",
                        "content": "Testcase 987 is over 1k chars long, don\\'t try to bruteforce it with \"normal techniques\" such as for-loops, you will most likely get a \"Time Limit Exceeded\" and 986/987 testcases passed. Maybe someone should take a look at that testcase, I am not sure if this is intended."
                    },
                    {
                        "username": "Elad770",
                        "content": "I\\'m not sure I understand 100% the question, does the following string count as a substring?\\nSuppose the string is abcadabc is the following substring: abcad also considered a substring? Or not, a actually appears twice on the other hand this substring can be 2 different substrings abc and ad and in the first example for example what actually caused the problem was that the substring abc repeated itself twice and therefore the answer was 3"
                    },
                    {
                        "username": "janis__",
                        "content": "Yes, in the string \"abcadabc\", \"abcad\" is considered a substring. However, for the problem of finding the longest substring without repeating characters, \"abcad\" would not be the longest valid substring because the character \"a\" appears twice; instead, \"abc\" or \"cad\" would be valid solutions with a length of 3."
                    },
                    {
                        "username": "vianj26",
                        "content": "this question easier than those of the \"Easy\" questions."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "Everything you should remember that `'  '` is not a valid string character, that's why if you try to loop and append, programming languages won't append, because that's not a valid character.\n\nHowever, the authors know more :D"
                    },
                    {
                        "username": "deepaBhoomasbaskar",
                        "content": "this one worked but  failed for one test case\\nlength= len(s)\\ni=0\\nj=0\\ncount=0\\nmaxval=0\\nmydict={}\\n\\n\\nwhile (i<length):\\n    desired_key = \"key2\"\\n    found_key = False\\n    print(\"iteration=\", i)\\n    print(s[i])\\n    for key, value in mydict.items():\\n        print(key, value)\\n    if s[i] not in mydict:\\n        mydict[s[i]]=i\\n        count=len(mydict)\\n        if count > maxval:\\n            maxval = count\\n        print(\"maxval=\", maxval)\\n    else:\\n        desired_key=s[i]\\n        print(desired_key)\\n        while s[j] != desired_key:\\n            del mydict[s[j]]\\n            j=j+1\\n            print(j)\\n        j=j+1\\n        if desired_key in mydict:\\n            value = mydict.pop(desired_key)\\n            print(f\"Popped: {desired_key} -> {value}\")\\n        mydict[s[i]]=i\\n            \\n    i=i+1    "
                    },
                    {
                        "username": "janis__",
                        "content": "The issue arises from the way you handle the case when s[i] is already in mydict. After finding the desired_key, you should delete entries from the start (j) until you remove the desired_key, then move j one step further and continue with the outer loop. Ensure that after updating j, you don\\'t immediately insert the current s[i] into mydict within the same iteration, as it will be handled in the next loop iteration."
                    },
                    {
                        "username": "ajay2305",
                        "content": "abbacd\\nwhy acd is wrong i mean ther\\'s no repeating char here \\nplease help"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "**\"bacd\"** is longest substring so acd is wrong"
                    },
                    {
                        "username": "harryk22m",
                        "content": "Use stringbuilder y\\u2019all "
                    },
                    {
                        "username": "user2354tC",
                        "content": "The answer of Case 3  is 4 because it have four different characters and my code also give answer 4. But it gives that my answer is wrong and the right answer is 3. How is it possible?"
                    },
                    {
                        "username": "iAniruddh2004",
                        "content": "f**k I just complete 986 testcase, now they are giving me very very very long input and when I run code they say : Time Limit Exceeded"
                    },
                    {
                        "username": "orangejuice555",
                        "content": "lol same here except for me its memory exceeded"
                    }
                ]
            },
            {
                "id": 1984962,
                "content": [
                    {
                        "username": "MitchMountainCoding",
                        "content": "To me- this problem is good practice for understanding and implementing the \"sliding window\" approach, which is a commonly used technique to solve array/string problems in linear time."
                    },
                    {
                        "username": "alvi__",
                        "content": "Testcase 987 is over 1k chars long, don\\'t try to bruteforce it with \"normal techniques\" such as for-loops, you will most likely get a \"Time Limit Exceeded\" and 986/987 testcases passed. Maybe someone should take a look at that testcase, I am not sure if this is intended."
                    },
                    {
                        "username": "Elad770",
                        "content": "I\\'m not sure I understand 100% the question, does the following string count as a substring?\\nSuppose the string is abcadabc is the following substring: abcad also considered a substring? Or not, a actually appears twice on the other hand this substring can be 2 different substrings abc and ad and in the first example for example what actually caused the problem was that the substring abc repeated itself twice and therefore the answer was 3"
                    },
                    {
                        "username": "janis__",
                        "content": "Yes, in the string \"abcadabc\", \"abcad\" is considered a substring. However, for the problem of finding the longest substring without repeating characters, \"abcad\" would not be the longest valid substring because the character \"a\" appears twice; instead, \"abc\" or \"cad\" would be valid solutions with a length of 3."
                    },
                    {
                        "username": "vianj26",
                        "content": "this question easier than those of the \"Easy\" questions."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "Everything you should remember that `'  '` is not a valid string character, that's why if you try to loop and append, programming languages won't append, because that's not a valid character.\n\nHowever, the authors know more :D"
                    },
                    {
                        "username": "deepaBhoomasbaskar",
                        "content": "this one worked but  failed for one test case\\nlength= len(s)\\ni=0\\nj=0\\ncount=0\\nmaxval=0\\nmydict={}\\n\\n\\nwhile (i<length):\\n    desired_key = \"key2\"\\n    found_key = False\\n    print(\"iteration=\", i)\\n    print(s[i])\\n    for key, value in mydict.items():\\n        print(key, value)\\n    if s[i] not in mydict:\\n        mydict[s[i]]=i\\n        count=len(mydict)\\n        if count > maxval:\\n            maxval = count\\n        print(\"maxval=\", maxval)\\n    else:\\n        desired_key=s[i]\\n        print(desired_key)\\n        while s[j] != desired_key:\\n            del mydict[s[j]]\\n            j=j+1\\n            print(j)\\n        j=j+1\\n        if desired_key in mydict:\\n            value = mydict.pop(desired_key)\\n            print(f\"Popped: {desired_key} -> {value}\")\\n        mydict[s[i]]=i\\n            \\n    i=i+1    "
                    },
                    {
                        "username": "janis__",
                        "content": "The issue arises from the way you handle the case when s[i] is already in mydict. After finding the desired_key, you should delete entries from the start (j) until you remove the desired_key, then move j one step further and continue with the outer loop. Ensure that after updating j, you don\\'t immediately insert the current s[i] into mydict within the same iteration, as it will be handled in the next loop iteration."
                    },
                    {
                        "username": "ajay2305",
                        "content": "abbacd\\nwhy acd is wrong i mean ther\\'s no repeating char here \\nplease help"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "**\"bacd\"** is longest substring so acd is wrong"
                    },
                    {
                        "username": "harryk22m",
                        "content": "Use stringbuilder y\\u2019all "
                    },
                    {
                        "username": "user2354tC",
                        "content": "The answer of Case 3  is 4 because it have four different characters and my code also give answer 4. But it gives that my answer is wrong and the right answer is 3. How is it possible?"
                    },
                    {
                        "username": "iAniruddh2004",
                        "content": "f**k I just complete 986 testcase, now they are giving me very very very long input and when I run code they say : Time Limit Exceeded"
                    },
                    {
                        "username": "orangejuice555",
                        "content": "lol same here except for me its memory exceeded"
                    }
                ]
            },
            {
                "id": 1979070,
                "content": [
                    {
                        "username": "MitchMountainCoding",
                        "content": "To me- this problem is good practice for understanding and implementing the \"sliding window\" approach, which is a commonly used technique to solve array/string problems in linear time."
                    },
                    {
                        "username": "alvi__",
                        "content": "Testcase 987 is over 1k chars long, don\\'t try to bruteforce it with \"normal techniques\" such as for-loops, you will most likely get a \"Time Limit Exceeded\" and 986/987 testcases passed. Maybe someone should take a look at that testcase, I am not sure if this is intended."
                    },
                    {
                        "username": "Elad770",
                        "content": "I\\'m not sure I understand 100% the question, does the following string count as a substring?\\nSuppose the string is abcadabc is the following substring: abcad also considered a substring? Or not, a actually appears twice on the other hand this substring can be 2 different substrings abc and ad and in the first example for example what actually caused the problem was that the substring abc repeated itself twice and therefore the answer was 3"
                    },
                    {
                        "username": "janis__",
                        "content": "Yes, in the string \"abcadabc\", \"abcad\" is considered a substring. However, for the problem of finding the longest substring without repeating characters, \"abcad\" would not be the longest valid substring because the character \"a\" appears twice; instead, \"abc\" or \"cad\" would be valid solutions with a length of 3."
                    },
                    {
                        "username": "vianj26",
                        "content": "this question easier than those of the \"Easy\" questions."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "Everything you should remember that `'  '` is not a valid string character, that's why if you try to loop and append, programming languages won't append, because that's not a valid character.\n\nHowever, the authors know more :D"
                    },
                    {
                        "username": "deepaBhoomasbaskar",
                        "content": "this one worked but  failed for one test case\\nlength= len(s)\\ni=0\\nj=0\\ncount=0\\nmaxval=0\\nmydict={}\\n\\n\\nwhile (i<length):\\n    desired_key = \"key2\"\\n    found_key = False\\n    print(\"iteration=\", i)\\n    print(s[i])\\n    for key, value in mydict.items():\\n        print(key, value)\\n    if s[i] not in mydict:\\n        mydict[s[i]]=i\\n        count=len(mydict)\\n        if count > maxval:\\n            maxval = count\\n        print(\"maxval=\", maxval)\\n    else:\\n        desired_key=s[i]\\n        print(desired_key)\\n        while s[j] != desired_key:\\n            del mydict[s[j]]\\n            j=j+1\\n            print(j)\\n        j=j+1\\n        if desired_key in mydict:\\n            value = mydict.pop(desired_key)\\n            print(f\"Popped: {desired_key} -> {value}\")\\n        mydict[s[i]]=i\\n            \\n    i=i+1    "
                    },
                    {
                        "username": "janis__",
                        "content": "The issue arises from the way you handle the case when s[i] is already in mydict. After finding the desired_key, you should delete entries from the start (j) until you remove the desired_key, then move j one step further and continue with the outer loop. Ensure that after updating j, you don\\'t immediately insert the current s[i] into mydict within the same iteration, as it will be handled in the next loop iteration."
                    },
                    {
                        "username": "ajay2305",
                        "content": "abbacd\\nwhy acd is wrong i mean ther\\'s no repeating char here \\nplease help"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "**\"bacd\"** is longest substring so acd is wrong"
                    },
                    {
                        "username": "harryk22m",
                        "content": "Use stringbuilder y\\u2019all "
                    },
                    {
                        "username": "user2354tC",
                        "content": "The answer of Case 3  is 4 because it have four different characters and my code also give answer 4. But it gives that my answer is wrong and the right answer is 3. How is it possible?"
                    },
                    {
                        "username": "iAniruddh2004",
                        "content": "f**k I just complete 986 testcase, now they are giving me very very very long input and when I run code they say : Time Limit Exceeded"
                    },
                    {
                        "username": "orangejuice555",
                        "content": "lol same here except for me its memory exceeded"
                    }
                ]
            },
            {
                "id": 1978701,
                "content": [
                    {
                        "username": "MitchMountainCoding",
                        "content": "To me- this problem is good practice for understanding and implementing the \"sliding window\" approach, which is a commonly used technique to solve array/string problems in linear time."
                    },
                    {
                        "username": "alvi__",
                        "content": "Testcase 987 is over 1k chars long, don\\'t try to bruteforce it with \"normal techniques\" such as for-loops, you will most likely get a \"Time Limit Exceeded\" and 986/987 testcases passed. Maybe someone should take a look at that testcase, I am not sure if this is intended."
                    },
                    {
                        "username": "Elad770",
                        "content": "I\\'m not sure I understand 100% the question, does the following string count as a substring?\\nSuppose the string is abcadabc is the following substring: abcad also considered a substring? Or not, a actually appears twice on the other hand this substring can be 2 different substrings abc and ad and in the first example for example what actually caused the problem was that the substring abc repeated itself twice and therefore the answer was 3"
                    },
                    {
                        "username": "janis__",
                        "content": "Yes, in the string \"abcadabc\", \"abcad\" is considered a substring. However, for the problem of finding the longest substring without repeating characters, \"abcad\" would not be the longest valid substring because the character \"a\" appears twice; instead, \"abc\" or \"cad\" would be valid solutions with a length of 3."
                    },
                    {
                        "username": "vianj26",
                        "content": "this question easier than those of the \"Easy\" questions."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "Everything you should remember that `'  '` is not a valid string character, that's why if you try to loop and append, programming languages won't append, because that's not a valid character.\n\nHowever, the authors know more :D"
                    },
                    {
                        "username": "deepaBhoomasbaskar",
                        "content": "this one worked but  failed for one test case\\nlength= len(s)\\ni=0\\nj=0\\ncount=0\\nmaxval=0\\nmydict={}\\n\\n\\nwhile (i<length):\\n    desired_key = \"key2\"\\n    found_key = False\\n    print(\"iteration=\", i)\\n    print(s[i])\\n    for key, value in mydict.items():\\n        print(key, value)\\n    if s[i] not in mydict:\\n        mydict[s[i]]=i\\n        count=len(mydict)\\n        if count > maxval:\\n            maxval = count\\n        print(\"maxval=\", maxval)\\n    else:\\n        desired_key=s[i]\\n        print(desired_key)\\n        while s[j] != desired_key:\\n            del mydict[s[j]]\\n            j=j+1\\n            print(j)\\n        j=j+1\\n        if desired_key in mydict:\\n            value = mydict.pop(desired_key)\\n            print(f\"Popped: {desired_key} -> {value}\")\\n        mydict[s[i]]=i\\n            \\n    i=i+1    "
                    },
                    {
                        "username": "janis__",
                        "content": "The issue arises from the way you handle the case when s[i] is already in mydict. After finding the desired_key, you should delete entries from the start (j) until you remove the desired_key, then move j one step further and continue with the outer loop. Ensure that after updating j, you don\\'t immediately insert the current s[i] into mydict within the same iteration, as it will be handled in the next loop iteration."
                    },
                    {
                        "username": "ajay2305",
                        "content": "abbacd\\nwhy acd is wrong i mean ther\\'s no repeating char here \\nplease help"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "**\"bacd\"** is longest substring so acd is wrong"
                    },
                    {
                        "username": "harryk22m",
                        "content": "Use stringbuilder y\\u2019all "
                    },
                    {
                        "username": "user2354tC",
                        "content": "The answer of Case 3  is 4 because it have four different characters and my code also give answer 4. But it gives that my answer is wrong and the right answer is 3. How is it possible?"
                    },
                    {
                        "username": "iAniruddh2004",
                        "content": "f**k I just complete 986 testcase, now they are giving me very very very long input and when I run code they say : Time Limit Exceeded"
                    },
                    {
                        "username": "orangejuice555",
                        "content": "lol same here except for me its memory exceeded"
                    }
                ]
            },
            {
                "id": 1976381,
                "content": [
                    {
                        "username": "MitchMountainCoding",
                        "content": "To me- this problem is good practice for understanding and implementing the \"sliding window\" approach, which is a commonly used technique to solve array/string problems in linear time."
                    },
                    {
                        "username": "alvi__",
                        "content": "Testcase 987 is over 1k chars long, don\\'t try to bruteforce it with \"normal techniques\" such as for-loops, you will most likely get a \"Time Limit Exceeded\" and 986/987 testcases passed. Maybe someone should take a look at that testcase, I am not sure if this is intended."
                    },
                    {
                        "username": "Elad770",
                        "content": "I\\'m not sure I understand 100% the question, does the following string count as a substring?\\nSuppose the string is abcadabc is the following substring: abcad also considered a substring? Or not, a actually appears twice on the other hand this substring can be 2 different substrings abc and ad and in the first example for example what actually caused the problem was that the substring abc repeated itself twice and therefore the answer was 3"
                    },
                    {
                        "username": "janis__",
                        "content": "Yes, in the string \"abcadabc\", \"abcad\" is considered a substring. However, for the problem of finding the longest substring without repeating characters, \"abcad\" would not be the longest valid substring because the character \"a\" appears twice; instead, \"abc\" or \"cad\" would be valid solutions with a length of 3."
                    },
                    {
                        "username": "vianj26",
                        "content": "this question easier than those of the \"Easy\" questions."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "Everything you should remember that `'  '` is not a valid string character, that's why if you try to loop and append, programming languages won't append, because that's not a valid character.\n\nHowever, the authors know more :D"
                    },
                    {
                        "username": "deepaBhoomasbaskar",
                        "content": "this one worked but  failed for one test case\\nlength= len(s)\\ni=0\\nj=0\\ncount=0\\nmaxval=0\\nmydict={}\\n\\n\\nwhile (i<length):\\n    desired_key = \"key2\"\\n    found_key = False\\n    print(\"iteration=\", i)\\n    print(s[i])\\n    for key, value in mydict.items():\\n        print(key, value)\\n    if s[i] not in mydict:\\n        mydict[s[i]]=i\\n        count=len(mydict)\\n        if count > maxval:\\n            maxval = count\\n        print(\"maxval=\", maxval)\\n    else:\\n        desired_key=s[i]\\n        print(desired_key)\\n        while s[j] != desired_key:\\n            del mydict[s[j]]\\n            j=j+1\\n            print(j)\\n        j=j+1\\n        if desired_key in mydict:\\n            value = mydict.pop(desired_key)\\n            print(f\"Popped: {desired_key} -> {value}\")\\n        mydict[s[i]]=i\\n            \\n    i=i+1    "
                    },
                    {
                        "username": "janis__",
                        "content": "The issue arises from the way you handle the case when s[i] is already in mydict. After finding the desired_key, you should delete entries from the start (j) until you remove the desired_key, then move j one step further and continue with the outer loop. Ensure that after updating j, you don\\'t immediately insert the current s[i] into mydict within the same iteration, as it will be handled in the next loop iteration."
                    },
                    {
                        "username": "ajay2305",
                        "content": "abbacd\\nwhy acd is wrong i mean ther\\'s no repeating char here \\nplease help"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "**\"bacd\"** is longest substring so acd is wrong"
                    },
                    {
                        "username": "harryk22m",
                        "content": "Use stringbuilder y\\u2019all "
                    },
                    {
                        "username": "user2354tC",
                        "content": "The answer of Case 3  is 4 because it have four different characters and my code also give answer 4. But it gives that my answer is wrong and the right answer is 3. How is it possible?"
                    },
                    {
                        "username": "iAniruddh2004",
                        "content": "f**k I just complete 986 testcase, now they are giving me very very very long input and when I run code they say : Time Limit Exceeded"
                    },
                    {
                        "username": "orangejuice555",
                        "content": "lol same here except for me its memory exceeded"
                    }
                ]
            },
            {
                "id": 1966738,
                "content": [
                    {
                        "username": "MitchMountainCoding",
                        "content": "To me- this problem is good practice for understanding and implementing the \"sliding window\" approach, which is a commonly used technique to solve array/string problems in linear time."
                    },
                    {
                        "username": "alvi__",
                        "content": "Testcase 987 is over 1k chars long, don\\'t try to bruteforce it with \"normal techniques\" such as for-loops, you will most likely get a \"Time Limit Exceeded\" and 986/987 testcases passed. Maybe someone should take a look at that testcase, I am not sure if this is intended."
                    },
                    {
                        "username": "Elad770",
                        "content": "I\\'m not sure I understand 100% the question, does the following string count as a substring?\\nSuppose the string is abcadabc is the following substring: abcad also considered a substring? Or not, a actually appears twice on the other hand this substring can be 2 different substrings abc and ad and in the first example for example what actually caused the problem was that the substring abc repeated itself twice and therefore the answer was 3"
                    },
                    {
                        "username": "janis__",
                        "content": "Yes, in the string \"abcadabc\", \"abcad\" is considered a substring. However, for the problem of finding the longest substring without repeating characters, \"abcad\" would not be the longest valid substring because the character \"a\" appears twice; instead, \"abc\" or \"cad\" would be valid solutions with a length of 3."
                    },
                    {
                        "username": "vianj26",
                        "content": "this question easier than those of the \"Easy\" questions."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "Everything you should remember that `'  '` is not a valid string character, that's why if you try to loop and append, programming languages won't append, because that's not a valid character.\n\nHowever, the authors know more :D"
                    },
                    {
                        "username": "deepaBhoomasbaskar",
                        "content": "this one worked but  failed for one test case\\nlength= len(s)\\ni=0\\nj=0\\ncount=0\\nmaxval=0\\nmydict={}\\n\\n\\nwhile (i<length):\\n    desired_key = \"key2\"\\n    found_key = False\\n    print(\"iteration=\", i)\\n    print(s[i])\\n    for key, value in mydict.items():\\n        print(key, value)\\n    if s[i] not in mydict:\\n        mydict[s[i]]=i\\n        count=len(mydict)\\n        if count > maxval:\\n            maxval = count\\n        print(\"maxval=\", maxval)\\n    else:\\n        desired_key=s[i]\\n        print(desired_key)\\n        while s[j] != desired_key:\\n            del mydict[s[j]]\\n            j=j+1\\n            print(j)\\n        j=j+1\\n        if desired_key in mydict:\\n            value = mydict.pop(desired_key)\\n            print(f\"Popped: {desired_key} -> {value}\")\\n        mydict[s[i]]=i\\n            \\n    i=i+1    "
                    },
                    {
                        "username": "janis__",
                        "content": "The issue arises from the way you handle the case when s[i] is already in mydict. After finding the desired_key, you should delete entries from the start (j) until you remove the desired_key, then move j one step further and continue with the outer loop. Ensure that after updating j, you don\\'t immediately insert the current s[i] into mydict within the same iteration, as it will be handled in the next loop iteration."
                    },
                    {
                        "username": "ajay2305",
                        "content": "abbacd\\nwhy acd is wrong i mean ther\\'s no repeating char here \\nplease help"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "**\"bacd\"** is longest substring so acd is wrong"
                    },
                    {
                        "username": "harryk22m",
                        "content": "Use stringbuilder y\\u2019all "
                    },
                    {
                        "username": "user2354tC",
                        "content": "The answer of Case 3  is 4 because it have four different characters and my code also give answer 4. But it gives that my answer is wrong and the right answer is 3. How is it possible?"
                    },
                    {
                        "username": "iAniruddh2004",
                        "content": "f**k I just complete 986 testcase, now they are giving me very very very long input and when I run code they say : Time Limit Exceeded"
                    },
                    {
                        "username": "orangejuice555",
                        "content": "lol same here except for me its memory exceeded"
                    }
                ]
            },
            {
                "id": 1965598,
                "content": [
                    {
                        "username": "MitchMountainCoding",
                        "content": "To me- this problem is good practice for understanding and implementing the \"sliding window\" approach, which is a commonly used technique to solve array/string problems in linear time."
                    },
                    {
                        "username": "alvi__",
                        "content": "Testcase 987 is over 1k chars long, don\\'t try to bruteforce it with \"normal techniques\" such as for-loops, you will most likely get a \"Time Limit Exceeded\" and 986/987 testcases passed. Maybe someone should take a look at that testcase, I am not sure if this is intended."
                    },
                    {
                        "username": "Elad770",
                        "content": "I\\'m not sure I understand 100% the question, does the following string count as a substring?\\nSuppose the string is abcadabc is the following substring: abcad also considered a substring? Or not, a actually appears twice on the other hand this substring can be 2 different substrings abc and ad and in the first example for example what actually caused the problem was that the substring abc repeated itself twice and therefore the answer was 3"
                    },
                    {
                        "username": "janis__",
                        "content": "Yes, in the string \"abcadabc\", \"abcad\" is considered a substring. However, for the problem of finding the longest substring without repeating characters, \"abcad\" would not be the longest valid substring because the character \"a\" appears twice; instead, \"abc\" or \"cad\" would be valid solutions with a length of 3."
                    },
                    {
                        "username": "vianj26",
                        "content": "this question easier than those of the \"Easy\" questions."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "Everything you should remember that `'  '` is not a valid string character, that's why if you try to loop and append, programming languages won't append, because that's not a valid character.\n\nHowever, the authors know more :D"
                    },
                    {
                        "username": "deepaBhoomasbaskar",
                        "content": "this one worked but  failed for one test case\\nlength= len(s)\\ni=0\\nj=0\\ncount=0\\nmaxval=0\\nmydict={}\\n\\n\\nwhile (i<length):\\n    desired_key = \"key2\"\\n    found_key = False\\n    print(\"iteration=\", i)\\n    print(s[i])\\n    for key, value in mydict.items():\\n        print(key, value)\\n    if s[i] not in mydict:\\n        mydict[s[i]]=i\\n        count=len(mydict)\\n        if count > maxval:\\n            maxval = count\\n        print(\"maxval=\", maxval)\\n    else:\\n        desired_key=s[i]\\n        print(desired_key)\\n        while s[j] != desired_key:\\n            del mydict[s[j]]\\n            j=j+1\\n            print(j)\\n        j=j+1\\n        if desired_key in mydict:\\n            value = mydict.pop(desired_key)\\n            print(f\"Popped: {desired_key} -> {value}\")\\n        mydict[s[i]]=i\\n            \\n    i=i+1    "
                    },
                    {
                        "username": "janis__",
                        "content": "The issue arises from the way you handle the case when s[i] is already in mydict. After finding the desired_key, you should delete entries from the start (j) until you remove the desired_key, then move j one step further and continue with the outer loop. Ensure that after updating j, you don\\'t immediately insert the current s[i] into mydict within the same iteration, as it will be handled in the next loop iteration."
                    },
                    {
                        "username": "ajay2305",
                        "content": "abbacd\\nwhy acd is wrong i mean ther\\'s no repeating char here \\nplease help"
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "**\"bacd\"** is longest substring so acd is wrong"
                    },
                    {
                        "username": "harryk22m",
                        "content": "Use stringbuilder y\\u2019all "
                    },
                    {
                        "username": "user2354tC",
                        "content": "The answer of Case 3  is 4 because it have four different characters and my code also give answer 4. But it gives that my answer is wrong and the right answer is 3. How is it possible?"
                    },
                    {
                        "username": "iAniruddh2004",
                        "content": "f**k I just complete 986 testcase, now they are giving me very very very long input and when I run code they say : Time Limit Exceeded"
                    },
                    {
                        "username": "orangejuice555",
                        "content": "lol same here except for me its memory exceeded"
                    }
                ]
            },
            {
                "id": 1965022,
                "content": [
                    {
                        "username": "close27",
                        "content": "In case, anyone is starting, look at the brute force here - https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3747943/brute-force-easy-to-understand/"
                    },
                    {
                        "username": "BatMe",
                        "content": "Hint: \\nJust try to find the size of window. \\nAlso this question is a follow up of: \"1876. Substrings of Size Three with Distinct Characters\"\\n"
                    },
                    {
                        "username": "orangejuice555",
                        "content": "please help, i got pass 986/987 testcases and memory limit exceeded in last test case. I used recursion to backtrek"
                    },
                    {
                        "username": "Mohitchand04",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int[] count = new int[26];\\n        int i = 0;\\n        int maxLen = 0;\\n        int currLen = 1;\\n        for(;i<s.length();i++){\\n            char c = s.charAt(i);\\n            count[c-\\'a\\']++;\\n            if(count[c-\\'a\\']<=1){\\n                currLen++;\\n            }else{\\n                maxLen=Math.max(maxLen,currLen);\\n                currLen = 1;\\n                i--;\\n            }\\n        }\\n        return maxLen;\\n    }\\n} \\nwhy this code is showing time limit exceeds?? i Don\\'t understand\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code gets stuck in an infinite loop because when count[c-\\'a\\'] > 1, you decrement i but don\\'t reset the count for the character, causing the same condition to be met repeatedly."
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "You can use a set to store the sliding window (simpler than using a dict or counter).\\nThen when you add items from the right pointer, remove items at the left pointer until the set is valid."
                    },
                    {
                        "username": "shubham9021",
                        "content": "I have written code in C.\\nBut Its failing case 3 . \\nPlease help to understand why it is failing last case and what i am missing \\n\\nint lengthOfLongestSubstring(char * s)\\n{\\n    int i , j;\\n    char x ; \\n    int cnt = 0 , max = 0;\\n    int len  = strlen(s)-1;\\n    for (i = 1 ; i < len ; i++)\\n    {\\n        x = s[i];\\n        j = i - 1;\\n        cnt = 1;\\n        while(j >= 0)\\n        {\\n            if(s[j] != x)\\n            {\\n                cnt++;\\n            }\\n            else{\\n                break;\\n            }\\n            j = j-1;\\n        }\\n        if (max < cnt)\\n            max = cnt;\\n    }           \\n    return max;\\n}"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code only checks for repeating characters against the current character x, but it doesn\\'t account for other characters in the substring, causing it to miss cases where characters other than x repeat."
                    },
                    {
                        "username": "user5979vk",
                        "content": "The performance \"beats 90%\" etc. is not statistically significant for a fast solution. It is all over the place each time you run. So don't worry about it. It probably has more to do with the VM they are running it on than your code. If you can get a 90% run once that is probably good. "
                    },
                    {
                        "username": "Asel03",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "congvu",
                        "content": "You can refer at https://www.youtube.com/watch?v=zT3nqbNSC0c"
                    },
                    {
                        "username": "zhoulingyu21",
                        "content": "what does it mean to be \"Time Limit Exceeded\"? I am a rookie"
                    },
                    {
                        "username": "sandeep-p",
                        "content": "This means that the solution took more time than expected. "
                    }
                ]
            },
            {
                "id": 1964573,
                "content": [
                    {
                        "username": "close27",
                        "content": "In case, anyone is starting, look at the brute force here - https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3747943/brute-force-easy-to-understand/"
                    },
                    {
                        "username": "BatMe",
                        "content": "Hint: \\nJust try to find the size of window. \\nAlso this question is a follow up of: \"1876. Substrings of Size Three with Distinct Characters\"\\n"
                    },
                    {
                        "username": "orangejuice555",
                        "content": "please help, i got pass 986/987 testcases and memory limit exceeded in last test case. I used recursion to backtrek"
                    },
                    {
                        "username": "Mohitchand04",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int[] count = new int[26];\\n        int i = 0;\\n        int maxLen = 0;\\n        int currLen = 1;\\n        for(;i<s.length();i++){\\n            char c = s.charAt(i);\\n            count[c-\\'a\\']++;\\n            if(count[c-\\'a\\']<=1){\\n                currLen++;\\n            }else{\\n                maxLen=Math.max(maxLen,currLen);\\n                currLen = 1;\\n                i--;\\n            }\\n        }\\n        return maxLen;\\n    }\\n} \\nwhy this code is showing time limit exceeds?? i Don\\'t understand\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code gets stuck in an infinite loop because when count[c-\\'a\\'] > 1, you decrement i but don\\'t reset the count for the character, causing the same condition to be met repeatedly."
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "You can use a set to store the sliding window (simpler than using a dict or counter).\\nThen when you add items from the right pointer, remove items at the left pointer until the set is valid."
                    },
                    {
                        "username": "shubham9021",
                        "content": "I have written code in C.\\nBut Its failing case 3 . \\nPlease help to understand why it is failing last case and what i am missing \\n\\nint lengthOfLongestSubstring(char * s)\\n{\\n    int i , j;\\n    char x ; \\n    int cnt = 0 , max = 0;\\n    int len  = strlen(s)-1;\\n    for (i = 1 ; i < len ; i++)\\n    {\\n        x = s[i];\\n        j = i - 1;\\n        cnt = 1;\\n        while(j >= 0)\\n        {\\n            if(s[j] != x)\\n            {\\n                cnt++;\\n            }\\n            else{\\n                break;\\n            }\\n            j = j-1;\\n        }\\n        if (max < cnt)\\n            max = cnt;\\n    }           \\n    return max;\\n}"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code only checks for repeating characters against the current character x, but it doesn\\'t account for other characters in the substring, causing it to miss cases where characters other than x repeat."
                    },
                    {
                        "username": "user5979vk",
                        "content": "The performance \"beats 90%\" etc. is not statistically significant for a fast solution. It is all over the place each time you run. So don't worry about it. It probably has more to do with the VM they are running it on than your code. If you can get a 90% run once that is probably good. "
                    },
                    {
                        "username": "Asel03",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "congvu",
                        "content": "You can refer at https://www.youtube.com/watch?v=zT3nqbNSC0c"
                    },
                    {
                        "username": "zhoulingyu21",
                        "content": "what does it mean to be \"Time Limit Exceeded\"? I am a rookie"
                    },
                    {
                        "username": "sandeep-p",
                        "content": "This means that the solution took more time than expected. "
                    }
                ]
            },
            {
                "id": 1963664,
                "content": [
                    {
                        "username": "close27",
                        "content": "In case, anyone is starting, look at the brute force here - https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3747943/brute-force-easy-to-understand/"
                    },
                    {
                        "username": "BatMe",
                        "content": "Hint: \\nJust try to find the size of window. \\nAlso this question is a follow up of: \"1876. Substrings of Size Three with Distinct Characters\"\\n"
                    },
                    {
                        "username": "orangejuice555",
                        "content": "please help, i got pass 986/987 testcases and memory limit exceeded in last test case. I used recursion to backtrek"
                    },
                    {
                        "username": "Mohitchand04",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int[] count = new int[26];\\n        int i = 0;\\n        int maxLen = 0;\\n        int currLen = 1;\\n        for(;i<s.length();i++){\\n            char c = s.charAt(i);\\n            count[c-\\'a\\']++;\\n            if(count[c-\\'a\\']<=1){\\n                currLen++;\\n            }else{\\n                maxLen=Math.max(maxLen,currLen);\\n                currLen = 1;\\n                i--;\\n            }\\n        }\\n        return maxLen;\\n    }\\n} \\nwhy this code is showing time limit exceeds?? i Don\\'t understand\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code gets stuck in an infinite loop because when count[c-\\'a\\'] > 1, you decrement i but don\\'t reset the count for the character, causing the same condition to be met repeatedly."
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "You can use a set to store the sliding window (simpler than using a dict or counter).\\nThen when you add items from the right pointer, remove items at the left pointer until the set is valid."
                    },
                    {
                        "username": "shubham9021",
                        "content": "I have written code in C.\\nBut Its failing case 3 . \\nPlease help to understand why it is failing last case and what i am missing \\n\\nint lengthOfLongestSubstring(char * s)\\n{\\n    int i , j;\\n    char x ; \\n    int cnt = 0 , max = 0;\\n    int len  = strlen(s)-1;\\n    for (i = 1 ; i < len ; i++)\\n    {\\n        x = s[i];\\n        j = i - 1;\\n        cnt = 1;\\n        while(j >= 0)\\n        {\\n            if(s[j] != x)\\n            {\\n                cnt++;\\n            }\\n            else{\\n                break;\\n            }\\n            j = j-1;\\n        }\\n        if (max < cnt)\\n            max = cnt;\\n    }           \\n    return max;\\n}"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code only checks for repeating characters against the current character x, but it doesn\\'t account for other characters in the substring, causing it to miss cases where characters other than x repeat."
                    },
                    {
                        "username": "user5979vk",
                        "content": "The performance \"beats 90%\" etc. is not statistically significant for a fast solution. It is all over the place each time you run. So don't worry about it. It probably has more to do with the VM they are running it on than your code. If you can get a 90% run once that is probably good. "
                    },
                    {
                        "username": "Asel03",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "congvu",
                        "content": "You can refer at https://www.youtube.com/watch?v=zT3nqbNSC0c"
                    },
                    {
                        "username": "zhoulingyu21",
                        "content": "what does it mean to be \"Time Limit Exceeded\"? I am a rookie"
                    },
                    {
                        "username": "sandeep-p",
                        "content": "This means that the solution took more time than expected. "
                    }
                ]
            },
            {
                "id": 1958256,
                "content": [
                    {
                        "username": "close27",
                        "content": "In case, anyone is starting, look at the brute force here - https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3747943/brute-force-easy-to-understand/"
                    },
                    {
                        "username": "BatMe",
                        "content": "Hint: \\nJust try to find the size of window. \\nAlso this question is a follow up of: \"1876. Substrings of Size Three with Distinct Characters\"\\n"
                    },
                    {
                        "username": "orangejuice555",
                        "content": "please help, i got pass 986/987 testcases and memory limit exceeded in last test case. I used recursion to backtrek"
                    },
                    {
                        "username": "Mohitchand04",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int[] count = new int[26];\\n        int i = 0;\\n        int maxLen = 0;\\n        int currLen = 1;\\n        for(;i<s.length();i++){\\n            char c = s.charAt(i);\\n            count[c-\\'a\\']++;\\n            if(count[c-\\'a\\']<=1){\\n                currLen++;\\n            }else{\\n                maxLen=Math.max(maxLen,currLen);\\n                currLen = 1;\\n                i--;\\n            }\\n        }\\n        return maxLen;\\n    }\\n} \\nwhy this code is showing time limit exceeds?? i Don\\'t understand\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code gets stuck in an infinite loop because when count[c-\\'a\\'] > 1, you decrement i but don\\'t reset the count for the character, causing the same condition to be met repeatedly."
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "You can use a set to store the sliding window (simpler than using a dict or counter).\\nThen when you add items from the right pointer, remove items at the left pointer until the set is valid."
                    },
                    {
                        "username": "shubham9021",
                        "content": "I have written code in C.\\nBut Its failing case 3 . \\nPlease help to understand why it is failing last case and what i am missing \\n\\nint lengthOfLongestSubstring(char * s)\\n{\\n    int i , j;\\n    char x ; \\n    int cnt = 0 , max = 0;\\n    int len  = strlen(s)-1;\\n    for (i = 1 ; i < len ; i++)\\n    {\\n        x = s[i];\\n        j = i - 1;\\n        cnt = 1;\\n        while(j >= 0)\\n        {\\n            if(s[j] != x)\\n            {\\n                cnt++;\\n            }\\n            else{\\n                break;\\n            }\\n            j = j-1;\\n        }\\n        if (max < cnt)\\n            max = cnt;\\n    }           \\n    return max;\\n}"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code only checks for repeating characters against the current character x, but it doesn\\'t account for other characters in the substring, causing it to miss cases where characters other than x repeat."
                    },
                    {
                        "username": "user5979vk",
                        "content": "The performance \"beats 90%\" etc. is not statistically significant for a fast solution. It is all over the place each time you run. So don't worry about it. It probably has more to do with the VM they are running it on than your code. If you can get a 90% run once that is probably good. "
                    },
                    {
                        "username": "Asel03",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "congvu",
                        "content": "You can refer at https://www.youtube.com/watch?v=zT3nqbNSC0c"
                    },
                    {
                        "username": "zhoulingyu21",
                        "content": "what does it mean to be \"Time Limit Exceeded\"? I am a rookie"
                    },
                    {
                        "username": "sandeep-p",
                        "content": "This means that the solution took more time than expected. "
                    }
                ]
            },
            {
                "id": 1957963,
                "content": [
                    {
                        "username": "close27",
                        "content": "In case, anyone is starting, look at the brute force here - https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3747943/brute-force-easy-to-understand/"
                    },
                    {
                        "username": "BatMe",
                        "content": "Hint: \\nJust try to find the size of window. \\nAlso this question is a follow up of: \"1876. Substrings of Size Three with Distinct Characters\"\\n"
                    },
                    {
                        "username": "orangejuice555",
                        "content": "please help, i got pass 986/987 testcases and memory limit exceeded in last test case. I used recursion to backtrek"
                    },
                    {
                        "username": "Mohitchand04",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int[] count = new int[26];\\n        int i = 0;\\n        int maxLen = 0;\\n        int currLen = 1;\\n        for(;i<s.length();i++){\\n            char c = s.charAt(i);\\n            count[c-\\'a\\']++;\\n            if(count[c-\\'a\\']<=1){\\n                currLen++;\\n            }else{\\n                maxLen=Math.max(maxLen,currLen);\\n                currLen = 1;\\n                i--;\\n            }\\n        }\\n        return maxLen;\\n    }\\n} \\nwhy this code is showing time limit exceeds?? i Don\\'t understand\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code gets stuck in an infinite loop because when count[c-\\'a\\'] > 1, you decrement i but don\\'t reset the count for the character, causing the same condition to be met repeatedly."
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "You can use a set to store the sliding window (simpler than using a dict or counter).\\nThen when you add items from the right pointer, remove items at the left pointer until the set is valid."
                    },
                    {
                        "username": "shubham9021",
                        "content": "I have written code in C.\\nBut Its failing case 3 . \\nPlease help to understand why it is failing last case and what i am missing \\n\\nint lengthOfLongestSubstring(char * s)\\n{\\n    int i , j;\\n    char x ; \\n    int cnt = 0 , max = 0;\\n    int len  = strlen(s)-1;\\n    for (i = 1 ; i < len ; i++)\\n    {\\n        x = s[i];\\n        j = i - 1;\\n        cnt = 1;\\n        while(j >= 0)\\n        {\\n            if(s[j] != x)\\n            {\\n                cnt++;\\n            }\\n            else{\\n                break;\\n            }\\n            j = j-1;\\n        }\\n        if (max < cnt)\\n            max = cnt;\\n    }           \\n    return max;\\n}"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code only checks for repeating characters against the current character x, but it doesn\\'t account for other characters in the substring, causing it to miss cases where characters other than x repeat."
                    },
                    {
                        "username": "user5979vk",
                        "content": "The performance \"beats 90%\" etc. is not statistically significant for a fast solution. It is all over the place each time you run. So don't worry about it. It probably has more to do with the VM they are running it on than your code. If you can get a 90% run once that is probably good. "
                    },
                    {
                        "username": "Asel03",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "congvu",
                        "content": "You can refer at https://www.youtube.com/watch?v=zT3nqbNSC0c"
                    },
                    {
                        "username": "zhoulingyu21",
                        "content": "what does it mean to be \"Time Limit Exceeded\"? I am a rookie"
                    },
                    {
                        "username": "sandeep-p",
                        "content": "This means that the solution took more time than expected. "
                    }
                ]
            },
            {
                "id": 1946705,
                "content": [
                    {
                        "username": "close27",
                        "content": "In case, anyone is starting, look at the brute force here - https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3747943/brute-force-easy-to-understand/"
                    },
                    {
                        "username": "BatMe",
                        "content": "Hint: \\nJust try to find the size of window. \\nAlso this question is a follow up of: \"1876. Substrings of Size Three with Distinct Characters\"\\n"
                    },
                    {
                        "username": "orangejuice555",
                        "content": "please help, i got pass 986/987 testcases and memory limit exceeded in last test case. I used recursion to backtrek"
                    },
                    {
                        "username": "Mohitchand04",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int[] count = new int[26];\\n        int i = 0;\\n        int maxLen = 0;\\n        int currLen = 1;\\n        for(;i<s.length();i++){\\n            char c = s.charAt(i);\\n            count[c-\\'a\\']++;\\n            if(count[c-\\'a\\']<=1){\\n                currLen++;\\n            }else{\\n                maxLen=Math.max(maxLen,currLen);\\n                currLen = 1;\\n                i--;\\n            }\\n        }\\n        return maxLen;\\n    }\\n} \\nwhy this code is showing time limit exceeds?? i Don\\'t understand\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code gets stuck in an infinite loop because when count[c-\\'a\\'] > 1, you decrement i but don\\'t reset the count for the character, causing the same condition to be met repeatedly."
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "You can use a set to store the sliding window (simpler than using a dict or counter).\\nThen when you add items from the right pointer, remove items at the left pointer until the set is valid."
                    },
                    {
                        "username": "shubham9021",
                        "content": "I have written code in C.\\nBut Its failing case 3 . \\nPlease help to understand why it is failing last case and what i am missing \\n\\nint lengthOfLongestSubstring(char * s)\\n{\\n    int i , j;\\n    char x ; \\n    int cnt = 0 , max = 0;\\n    int len  = strlen(s)-1;\\n    for (i = 1 ; i < len ; i++)\\n    {\\n        x = s[i];\\n        j = i - 1;\\n        cnt = 1;\\n        while(j >= 0)\\n        {\\n            if(s[j] != x)\\n            {\\n                cnt++;\\n            }\\n            else{\\n                break;\\n            }\\n            j = j-1;\\n        }\\n        if (max < cnt)\\n            max = cnt;\\n    }           \\n    return max;\\n}"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code only checks for repeating characters against the current character x, but it doesn\\'t account for other characters in the substring, causing it to miss cases where characters other than x repeat."
                    },
                    {
                        "username": "user5979vk",
                        "content": "The performance \"beats 90%\" etc. is not statistically significant for a fast solution. It is all over the place each time you run. So don't worry about it. It probably has more to do with the VM they are running it on than your code. If you can get a 90% run once that is probably good. "
                    },
                    {
                        "username": "Asel03",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "congvu",
                        "content": "You can refer at https://www.youtube.com/watch?v=zT3nqbNSC0c"
                    },
                    {
                        "username": "zhoulingyu21",
                        "content": "what does it mean to be \"Time Limit Exceeded\"? I am a rookie"
                    },
                    {
                        "username": "sandeep-p",
                        "content": "This means that the solution took more time than expected. "
                    }
                ]
            },
            {
                "id": 1943006,
                "content": [
                    {
                        "username": "close27",
                        "content": "In case, anyone is starting, look at the brute force here - https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3747943/brute-force-easy-to-understand/"
                    },
                    {
                        "username": "BatMe",
                        "content": "Hint: \\nJust try to find the size of window. \\nAlso this question is a follow up of: \"1876. Substrings of Size Three with Distinct Characters\"\\n"
                    },
                    {
                        "username": "orangejuice555",
                        "content": "please help, i got pass 986/987 testcases and memory limit exceeded in last test case. I used recursion to backtrek"
                    },
                    {
                        "username": "Mohitchand04",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int[] count = new int[26];\\n        int i = 0;\\n        int maxLen = 0;\\n        int currLen = 1;\\n        for(;i<s.length();i++){\\n            char c = s.charAt(i);\\n            count[c-\\'a\\']++;\\n            if(count[c-\\'a\\']<=1){\\n                currLen++;\\n            }else{\\n                maxLen=Math.max(maxLen,currLen);\\n                currLen = 1;\\n                i--;\\n            }\\n        }\\n        return maxLen;\\n    }\\n} \\nwhy this code is showing time limit exceeds?? i Don\\'t understand\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code gets stuck in an infinite loop because when count[c-\\'a\\'] > 1, you decrement i but don\\'t reset the count for the character, causing the same condition to be met repeatedly."
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "You can use a set to store the sliding window (simpler than using a dict or counter).\\nThen when you add items from the right pointer, remove items at the left pointer until the set is valid."
                    },
                    {
                        "username": "shubham9021",
                        "content": "I have written code in C.\\nBut Its failing case 3 . \\nPlease help to understand why it is failing last case and what i am missing \\n\\nint lengthOfLongestSubstring(char * s)\\n{\\n    int i , j;\\n    char x ; \\n    int cnt = 0 , max = 0;\\n    int len  = strlen(s)-1;\\n    for (i = 1 ; i < len ; i++)\\n    {\\n        x = s[i];\\n        j = i - 1;\\n        cnt = 1;\\n        while(j >= 0)\\n        {\\n            if(s[j] != x)\\n            {\\n                cnt++;\\n            }\\n            else{\\n                break;\\n            }\\n            j = j-1;\\n        }\\n        if (max < cnt)\\n            max = cnt;\\n    }           \\n    return max;\\n}"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code only checks for repeating characters against the current character x, but it doesn\\'t account for other characters in the substring, causing it to miss cases where characters other than x repeat."
                    },
                    {
                        "username": "user5979vk",
                        "content": "The performance \"beats 90%\" etc. is not statistically significant for a fast solution. It is all over the place each time you run. So don't worry about it. It probably has more to do with the VM they are running it on than your code. If you can get a 90% run once that is probably good. "
                    },
                    {
                        "username": "Asel03",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "congvu",
                        "content": "You can refer at https://www.youtube.com/watch?v=zT3nqbNSC0c"
                    },
                    {
                        "username": "zhoulingyu21",
                        "content": "what does it mean to be \"Time Limit Exceeded\"? I am a rookie"
                    },
                    {
                        "username": "sandeep-p",
                        "content": "This means that the solution took more time than expected. "
                    }
                ]
            },
            {
                "id": 1941220,
                "content": [
                    {
                        "username": "close27",
                        "content": "In case, anyone is starting, look at the brute force here - https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3747943/brute-force-easy-to-understand/"
                    },
                    {
                        "username": "BatMe",
                        "content": "Hint: \\nJust try to find the size of window. \\nAlso this question is a follow up of: \"1876. Substrings of Size Three with Distinct Characters\"\\n"
                    },
                    {
                        "username": "orangejuice555",
                        "content": "please help, i got pass 986/987 testcases and memory limit exceeded in last test case. I used recursion to backtrek"
                    },
                    {
                        "username": "Mohitchand04",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int[] count = new int[26];\\n        int i = 0;\\n        int maxLen = 0;\\n        int currLen = 1;\\n        for(;i<s.length();i++){\\n            char c = s.charAt(i);\\n            count[c-\\'a\\']++;\\n            if(count[c-\\'a\\']<=1){\\n                currLen++;\\n            }else{\\n                maxLen=Math.max(maxLen,currLen);\\n                currLen = 1;\\n                i--;\\n            }\\n        }\\n        return maxLen;\\n    }\\n} \\nwhy this code is showing time limit exceeds?? i Don\\'t understand\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code gets stuck in an infinite loop because when count[c-\\'a\\'] > 1, you decrement i but don\\'t reset the count for the character, causing the same condition to be met repeatedly."
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "You can use a set to store the sliding window (simpler than using a dict or counter).\\nThen when you add items from the right pointer, remove items at the left pointer until the set is valid."
                    },
                    {
                        "username": "shubham9021",
                        "content": "I have written code in C.\\nBut Its failing case 3 . \\nPlease help to understand why it is failing last case and what i am missing \\n\\nint lengthOfLongestSubstring(char * s)\\n{\\n    int i , j;\\n    char x ; \\n    int cnt = 0 , max = 0;\\n    int len  = strlen(s)-1;\\n    for (i = 1 ; i < len ; i++)\\n    {\\n        x = s[i];\\n        j = i - 1;\\n        cnt = 1;\\n        while(j >= 0)\\n        {\\n            if(s[j] != x)\\n            {\\n                cnt++;\\n            }\\n            else{\\n                break;\\n            }\\n            j = j-1;\\n        }\\n        if (max < cnt)\\n            max = cnt;\\n    }           \\n    return max;\\n}"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code only checks for repeating characters against the current character x, but it doesn\\'t account for other characters in the substring, causing it to miss cases where characters other than x repeat."
                    },
                    {
                        "username": "user5979vk",
                        "content": "The performance \"beats 90%\" etc. is not statistically significant for a fast solution. It is all over the place each time you run. So don't worry about it. It probably has more to do with the VM they are running it on than your code. If you can get a 90% run once that is probably good. "
                    },
                    {
                        "username": "Asel03",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "congvu",
                        "content": "You can refer at https://www.youtube.com/watch?v=zT3nqbNSC0c"
                    },
                    {
                        "username": "zhoulingyu21",
                        "content": "what does it mean to be \"Time Limit Exceeded\"? I am a rookie"
                    },
                    {
                        "username": "sandeep-p",
                        "content": "This means that the solution took more time than expected. "
                    }
                ]
            },
            {
                "id": 1940192,
                "content": [
                    {
                        "username": "close27",
                        "content": "In case, anyone is starting, look at the brute force here - https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3747943/brute-force-easy-to-understand/"
                    },
                    {
                        "username": "BatMe",
                        "content": "Hint: \\nJust try to find the size of window. \\nAlso this question is a follow up of: \"1876. Substrings of Size Three with Distinct Characters\"\\n"
                    },
                    {
                        "username": "orangejuice555",
                        "content": "please help, i got pass 986/987 testcases and memory limit exceeded in last test case. I used recursion to backtrek"
                    },
                    {
                        "username": "Mohitchand04",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int[] count = new int[26];\\n        int i = 0;\\n        int maxLen = 0;\\n        int currLen = 1;\\n        for(;i<s.length();i++){\\n            char c = s.charAt(i);\\n            count[c-\\'a\\']++;\\n            if(count[c-\\'a\\']<=1){\\n                currLen++;\\n            }else{\\n                maxLen=Math.max(maxLen,currLen);\\n                currLen = 1;\\n                i--;\\n            }\\n        }\\n        return maxLen;\\n    }\\n} \\nwhy this code is showing time limit exceeds?? i Don\\'t understand\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code gets stuck in an infinite loop because when count[c-\\'a\\'] > 1, you decrement i but don\\'t reset the count for the character, causing the same condition to be met repeatedly."
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "You can use a set to store the sliding window (simpler than using a dict or counter).\\nThen when you add items from the right pointer, remove items at the left pointer until the set is valid."
                    },
                    {
                        "username": "shubham9021",
                        "content": "I have written code in C.\\nBut Its failing case 3 . \\nPlease help to understand why it is failing last case and what i am missing \\n\\nint lengthOfLongestSubstring(char * s)\\n{\\n    int i , j;\\n    char x ; \\n    int cnt = 0 , max = 0;\\n    int len  = strlen(s)-1;\\n    for (i = 1 ; i < len ; i++)\\n    {\\n        x = s[i];\\n        j = i - 1;\\n        cnt = 1;\\n        while(j >= 0)\\n        {\\n            if(s[j] != x)\\n            {\\n                cnt++;\\n            }\\n            else{\\n                break;\\n            }\\n            j = j-1;\\n        }\\n        if (max < cnt)\\n            max = cnt;\\n    }           \\n    return max;\\n}"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code only checks for repeating characters against the current character x, but it doesn\\'t account for other characters in the substring, causing it to miss cases where characters other than x repeat."
                    },
                    {
                        "username": "user5979vk",
                        "content": "The performance \"beats 90%\" etc. is not statistically significant for a fast solution. It is all over the place each time you run. So don't worry about it. It probably has more to do with the VM they are running it on than your code. If you can get a 90% run once that is probably good. "
                    },
                    {
                        "username": "Asel03",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "congvu",
                        "content": "You can refer at https://www.youtube.com/watch?v=zT3nqbNSC0c"
                    },
                    {
                        "username": "zhoulingyu21",
                        "content": "what does it mean to be \"Time Limit Exceeded\"? I am a rookie"
                    },
                    {
                        "username": "sandeep-p",
                        "content": "This means that the solution took more time than expected. "
                    }
                ]
            },
            {
                "id": 1935723,
                "content": [
                    {
                        "username": "close27",
                        "content": "In case, anyone is starting, look at the brute force here - https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3747943/brute-force-easy-to-understand/"
                    },
                    {
                        "username": "BatMe",
                        "content": "Hint: \\nJust try to find the size of window. \\nAlso this question is a follow up of: \"1876. Substrings of Size Three with Distinct Characters\"\\n"
                    },
                    {
                        "username": "orangejuice555",
                        "content": "please help, i got pass 986/987 testcases and memory limit exceeded in last test case. I used recursion to backtrek"
                    },
                    {
                        "username": "Mohitchand04",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int[] count = new int[26];\\n        int i = 0;\\n        int maxLen = 0;\\n        int currLen = 1;\\n        for(;i<s.length();i++){\\n            char c = s.charAt(i);\\n            count[c-\\'a\\']++;\\n            if(count[c-\\'a\\']<=1){\\n                currLen++;\\n            }else{\\n                maxLen=Math.max(maxLen,currLen);\\n                currLen = 1;\\n                i--;\\n            }\\n        }\\n        return maxLen;\\n    }\\n} \\nwhy this code is showing time limit exceeds?? i Don\\'t understand\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code gets stuck in an infinite loop because when count[c-\\'a\\'] > 1, you decrement i but don\\'t reset the count for the character, causing the same condition to be met repeatedly."
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "You can use a set to store the sliding window (simpler than using a dict or counter).\\nThen when you add items from the right pointer, remove items at the left pointer until the set is valid."
                    },
                    {
                        "username": "shubham9021",
                        "content": "I have written code in C.\\nBut Its failing case 3 . \\nPlease help to understand why it is failing last case and what i am missing \\n\\nint lengthOfLongestSubstring(char * s)\\n{\\n    int i , j;\\n    char x ; \\n    int cnt = 0 , max = 0;\\n    int len  = strlen(s)-1;\\n    for (i = 1 ; i < len ; i++)\\n    {\\n        x = s[i];\\n        j = i - 1;\\n        cnt = 1;\\n        while(j >= 0)\\n        {\\n            if(s[j] != x)\\n            {\\n                cnt++;\\n            }\\n            else{\\n                break;\\n            }\\n            j = j-1;\\n        }\\n        if (max < cnt)\\n            max = cnt;\\n    }           \\n    return max;\\n}"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code only checks for repeating characters against the current character x, but it doesn\\'t account for other characters in the substring, causing it to miss cases where characters other than x repeat."
                    },
                    {
                        "username": "user5979vk",
                        "content": "The performance \"beats 90%\" etc. is not statistically significant for a fast solution. It is all over the place each time you run. So don't worry about it. It probably has more to do with the VM they are running it on than your code. If you can get a 90% run once that is probably good. "
                    },
                    {
                        "username": "Asel03",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "congvu",
                        "content": "You can refer at https://www.youtube.com/watch?v=zT3nqbNSC0c"
                    },
                    {
                        "username": "zhoulingyu21",
                        "content": "what does it mean to be \"Time Limit Exceeded\"? I am a rookie"
                    },
                    {
                        "username": "sandeep-p",
                        "content": "This means that the solution took more time than expected. "
                    }
                ]
            },
            {
                "id": 1933611,
                "content": [
                    {
                        "username": "tassioFront",
                        "content": "The last test is INSANE! "
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "final=[]\\ndef chack(word):\\n    w=\"\"\\n    \\n    for i in word:\\n        if i in w:\\n           return\\n        else:\\n            w+=i\\n    final.append(w)\\n    \\n            \\n\\narry=\"pwwkew\"\\nfor i in range(len(arry)):\\n    for j in range(i,len(arry)):\\n        v=arry[i:j+1]\\n        chack(v)\\nlength=[]\\nfor i in final:\\n    length.append(len(i))\\nbig=max(length)\\nfor i in final:\\n    if big==len(i):\\n        print(i)\\n        break\\n    "
                    },
                    {
                        "username": "ujjawal_OP",
                        "content": "Why am i getting this error for this code?\n//\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string S) {\n    unordered_set<char> c;\n    int mx = INT_MIN;\n    int n = S.length();\n    int i=0;\n    int r=0;\n    while(r<n)            //O-2N time and O-k space\n    {\n        while(c.find(S[r])!=c.end())\n        {\n            c.erase(S[i]);\n            i++;\n        }\n        mx = max(mx,r-i+1);\n        c.insert(S[r]);\n        r++;\n    }\n    return mx;\n    }\n};\n//\nRuntime error\n==22==ERROR: AddressSanitizer failed to allocate 0xdfff0001000 (15392894357504) bytes at address 2008fff7000 (errno: 12)\n==22==ReserveShadowMemoryRange failed while trying to map 0xdfff0001000 bytes. Perhaps you're using ulimit -v"
                    },
                    {
                        "username": "rawalprashidha",
                        "content": "use chatgpt to remove errors\\n"
                    },
                    {
                        "username": "gp0216716",
                        "content": "this question is the combination of frequency counter and window sliding technique. Use it to optimise space and time complexity "
                    },
                    {
                        "username": "eidelparada",
                        "content": "My solution pass the 3 testcases, says accepted in all af them, but when I choose \"Submit\" it says \"runtime error\". Why is that? "
                    },
                    {
                        "username": "irichmond1",
                        "content": "I agree with a lot of other people that the question is too vague.  I can read the requirements two ways.  The grammatical ambiguity is that the phrase \"without repeating characters\" could apply either to the subject of the sentence (me, the engineer) or it could refer to the substring.  If it\\'s the former, Examples 1 and 2 seem correct, but Example 3 does not.  Given \"abcabcbb\", \"abc\" seems to be correct, because the first time a letter is repeated in the string (as I, the subject of the sentence am recursing it) is \"a\" at index 3.  Therefore, the answer is the length of \"abc\" (3).  In Example 2, given \"bbbbb\", the we stop before index 1, where we get our 2nd b and say 1 (the first \"b\").  In this context, it\\'s very difficult to understand how Example 3 makes sense, because the answer would seem to be 2 (\"pw\"), since we\\'d stop as soon as we found the second \"w\".\\n\\nUnder the second parsing of the sentence, in which \"without repeating characters\" refers to the substring, all 3 examples make sense, because it\\'s looking at the longest substring, WHICH does not have repeating characters.  \\n\\nAfter a lot of work, interpreting the problem the first way, I finally realized this.  The trouble is that I\\'ve already wasted too much time on this problem and I don\\'t really have the patience to do it over again, so I\\'m moving on."
                    },
                    {
                        "username": "keshavmishra1001",
                        "content": "Hi i\\'m Noob please help me out wtf is this\\n"
                    },
                    {
                        "username": "kazama_jin",
                        "content": "\"anao\" is working but why not \"ynyo\"?"
                    },
                    {
                        "username": "bhushannaik",
                        "content": "For test case 407 input is \"dvdf\" output should be 2 but it is expecting 3 please look into it."
                    },
                    {
                        "username": "kazama_jin",
                        "content": "\"vdf\" , output 3 is correct\\n"
                    },
                    {
                        "username": "shriya_03",
                        "content": "class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        l=[]\\n        for i in range(0,len(s)):\\n            for j in range(len(s)-1,0,-1):\\n                l.append(s[i:j+1])\\n        for i in l:\\n            for j in i:\\n                if i.count(j)>1:\\n                    l.remove(i)\\n                    break\\n        max=len(l[0])\\n        for i in l:\\n            if len(i)>max:\\n                max=len(i)\\n        print(max)\\ncan anyone explain whats wrong with this code?"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code attempts to generate all possible substrings and then remove those with repeated characters, but the l.remove(i) inside nested loops can skip some substrings and lead to incorrect results."
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "Just copy this code and paste it on chatgpt and ask the question u will get ur error rectified and answered "
                    }
                ]
            },
            {
                "id": 1932713,
                "content": [
                    {
                        "username": "tassioFront",
                        "content": "The last test is INSANE! "
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "final=[]\\ndef chack(word):\\n    w=\"\"\\n    \\n    for i in word:\\n        if i in w:\\n           return\\n        else:\\n            w+=i\\n    final.append(w)\\n    \\n            \\n\\narry=\"pwwkew\"\\nfor i in range(len(arry)):\\n    for j in range(i,len(arry)):\\n        v=arry[i:j+1]\\n        chack(v)\\nlength=[]\\nfor i in final:\\n    length.append(len(i))\\nbig=max(length)\\nfor i in final:\\n    if big==len(i):\\n        print(i)\\n        break\\n    "
                    },
                    {
                        "username": "ujjawal_OP",
                        "content": "Why am i getting this error for this code?\n//\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string S) {\n    unordered_set<char> c;\n    int mx = INT_MIN;\n    int n = S.length();\n    int i=0;\n    int r=0;\n    while(r<n)            //O-2N time and O-k space\n    {\n        while(c.find(S[r])!=c.end())\n        {\n            c.erase(S[i]);\n            i++;\n        }\n        mx = max(mx,r-i+1);\n        c.insert(S[r]);\n        r++;\n    }\n    return mx;\n    }\n};\n//\nRuntime error\n==22==ERROR: AddressSanitizer failed to allocate 0xdfff0001000 (15392894357504) bytes at address 2008fff7000 (errno: 12)\n==22==ReserveShadowMemoryRange failed while trying to map 0xdfff0001000 bytes. Perhaps you're using ulimit -v"
                    },
                    {
                        "username": "rawalprashidha",
                        "content": "use chatgpt to remove errors\\n"
                    },
                    {
                        "username": "gp0216716",
                        "content": "this question is the combination of frequency counter and window sliding technique. Use it to optimise space and time complexity "
                    },
                    {
                        "username": "eidelparada",
                        "content": "My solution pass the 3 testcases, says accepted in all af them, but when I choose \"Submit\" it says \"runtime error\". Why is that? "
                    },
                    {
                        "username": "irichmond1",
                        "content": "I agree with a lot of other people that the question is too vague.  I can read the requirements two ways.  The grammatical ambiguity is that the phrase \"without repeating characters\" could apply either to the subject of the sentence (me, the engineer) or it could refer to the substring.  If it\\'s the former, Examples 1 and 2 seem correct, but Example 3 does not.  Given \"abcabcbb\", \"abc\" seems to be correct, because the first time a letter is repeated in the string (as I, the subject of the sentence am recursing it) is \"a\" at index 3.  Therefore, the answer is the length of \"abc\" (3).  In Example 2, given \"bbbbb\", the we stop before index 1, where we get our 2nd b and say 1 (the first \"b\").  In this context, it\\'s very difficult to understand how Example 3 makes sense, because the answer would seem to be 2 (\"pw\"), since we\\'d stop as soon as we found the second \"w\".\\n\\nUnder the second parsing of the sentence, in which \"without repeating characters\" refers to the substring, all 3 examples make sense, because it\\'s looking at the longest substring, WHICH does not have repeating characters.  \\n\\nAfter a lot of work, interpreting the problem the first way, I finally realized this.  The trouble is that I\\'ve already wasted too much time on this problem and I don\\'t really have the patience to do it over again, so I\\'m moving on."
                    },
                    {
                        "username": "keshavmishra1001",
                        "content": "Hi i\\'m Noob please help me out wtf is this\\n"
                    },
                    {
                        "username": "kazama_jin",
                        "content": "\"anao\" is working but why not \"ynyo\"?"
                    },
                    {
                        "username": "bhushannaik",
                        "content": "For test case 407 input is \"dvdf\" output should be 2 but it is expecting 3 please look into it."
                    },
                    {
                        "username": "kazama_jin",
                        "content": "\"vdf\" , output 3 is correct\\n"
                    },
                    {
                        "username": "shriya_03",
                        "content": "class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        l=[]\\n        for i in range(0,len(s)):\\n            for j in range(len(s)-1,0,-1):\\n                l.append(s[i:j+1])\\n        for i in l:\\n            for j in i:\\n                if i.count(j)>1:\\n                    l.remove(i)\\n                    break\\n        max=len(l[0])\\n        for i in l:\\n            if len(i)>max:\\n                max=len(i)\\n        print(max)\\ncan anyone explain whats wrong with this code?"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code attempts to generate all possible substrings and then remove those with repeated characters, but the l.remove(i) inside nested loops can skip some substrings and lead to incorrect results."
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "Just copy this code and paste it on chatgpt and ask the question u will get ur error rectified and answered "
                    }
                ]
            },
            {
                "id": 1932174,
                "content": [
                    {
                        "username": "tassioFront",
                        "content": "The last test is INSANE! "
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "final=[]\\ndef chack(word):\\n    w=\"\"\\n    \\n    for i in word:\\n        if i in w:\\n           return\\n        else:\\n            w+=i\\n    final.append(w)\\n    \\n            \\n\\narry=\"pwwkew\"\\nfor i in range(len(arry)):\\n    for j in range(i,len(arry)):\\n        v=arry[i:j+1]\\n        chack(v)\\nlength=[]\\nfor i in final:\\n    length.append(len(i))\\nbig=max(length)\\nfor i in final:\\n    if big==len(i):\\n        print(i)\\n        break\\n    "
                    },
                    {
                        "username": "ujjawal_OP",
                        "content": "Why am i getting this error for this code?\n//\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string S) {\n    unordered_set<char> c;\n    int mx = INT_MIN;\n    int n = S.length();\n    int i=0;\n    int r=0;\n    while(r<n)            //O-2N time and O-k space\n    {\n        while(c.find(S[r])!=c.end())\n        {\n            c.erase(S[i]);\n            i++;\n        }\n        mx = max(mx,r-i+1);\n        c.insert(S[r]);\n        r++;\n    }\n    return mx;\n    }\n};\n//\nRuntime error\n==22==ERROR: AddressSanitizer failed to allocate 0xdfff0001000 (15392894357504) bytes at address 2008fff7000 (errno: 12)\n==22==ReserveShadowMemoryRange failed while trying to map 0xdfff0001000 bytes. Perhaps you're using ulimit -v"
                    },
                    {
                        "username": "rawalprashidha",
                        "content": "use chatgpt to remove errors\\n"
                    },
                    {
                        "username": "gp0216716",
                        "content": "this question is the combination of frequency counter and window sliding technique. Use it to optimise space and time complexity "
                    },
                    {
                        "username": "eidelparada",
                        "content": "My solution pass the 3 testcases, says accepted in all af them, but when I choose \"Submit\" it says \"runtime error\". Why is that? "
                    },
                    {
                        "username": "irichmond1",
                        "content": "I agree with a lot of other people that the question is too vague.  I can read the requirements two ways.  The grammatical ambiguity is that the phrase \"without repeating characters\" could apply either to the subject of the sentence (me, the engineer) or it could refer to the substring.  If it\\'s the former, Examples 1 and 2 seem correct, but Example 3 does not.  Given \"abcabcbb\", \"abc\" seems to be correct, because the first time a letter is repeated in the string (as I, the subject of the sentence am recursing it) is \"a\" at index 3.  Therefore, the answer is the length of \"abc\" (3).  In Example 2, given \"bbbbb\", the we stop before index 1, where we get our 2nd b and say 1 (the first \"b\").  In this context, it\\'s very difficult to understand how Example 3 makes sense, because the answer would seem to be 2 (\"pw\"), since we\\'d stop as soon as we found the second \"w\".\\n\\nUnder the second parsing of the sentence, in which \"without repeating characters\" refers to the substring, all 3 examples make sense, because it\\'s looking at the longest substring, WHICH does not have repeating characters.  \\n\\nAfter a lot of work, interpreting the problem the first way, I finally realized this.  The trouble is that I\\'ve already wasted too much time on this problem and I don\\'t really have the patience to do it over again, so I\\'m moving on."
                    },
                    {
                        "username": "keshavmishra1001",
                        "content": "Hi i\\'m Noob please help me out wtf is this\\n"
                    },
                    {
                        "username": "kazama_jin",
                        "content": "\"anao\" is working but why not \"ynyo\"?"
                    },
                    {
                        "username": "bhushannaik",
                        "content": "For test case 407 input is \"dvdf\" output should be 2 but it is expecting 3 please look into it."
                    },
                    {
                        "username": "kazama_jin",
                        "content": "\"vdf\" , output 3 is correct\\n"
                    },
                    {
                        "username": "shriya_03",
                        "content": "class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        l=[]\\n        for i in range(0,len(s)):\\n            for j in range(len(s)-1,0,-1):\\n                l.append(s[i:j+1])\\n        for i in l:\\n            for j in i:\\n                if i.count(j)>1:\\n                    l.remove(i)\\n                    break\\n        max=len(l[0])\\n        for i in l:\\n            if len(i)>max:\\n                max=len(i)\\n        print(max)\\ncan anyone explain whats wrong with this code?"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code attempts to generate all possible substrings and then remove those with repeated characters, but the l.remove(i) inside nested loops can skip some substrings and lead to incorrect results."
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "Just copy this code and paste it on chatgpt and ask the question u will get ur error rectified and answered "
                    }
                ]
            },
            {
                "id": 1929053,
                "content": [
                    {
                        "username": "tassioFront",
                        "content": "The last test is INSANE! "
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "final=[]\\ndef chack(word):\\n    w=\"\"\\n    \\n    for i in word:\\n        if i in w:\\n           return\\n        else:\\n            w+=i\\n    final.append(w)\\n    \\n            \\n\\narry=\"pwwkew\"\\nfor i in range(len(arry)):\\n    for j in range(i,len(arry)):\\n        v=arry[i:j+1]\\n        chack(v)\\nlength=[]\\nfor i in final:\\n    length.append(len(i))\\nbig=max(length)\\nfor i in final:\\n    if big==len(i):\\n        print(i)\\n        break\\n    "
                    },
                    {
                        "username": "ujjawal_OP",
                        "content": "Why am i getting this error for this code?\n//\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string S) {\n    unordered_set<char> c;\n    int mx = INT_MIN;\n    int n = S.length();\n    int i=0;\n    int r=0;\n    while(r<n)            //O-2N time and O-k space\n    {\n        while(c.find(S[r])!=c.end())\n        {\n            c.erase(S[i]);\n            i++;\n        }\n        mx = max(mx,r-i+1);\n        c.insert(S[r]);\n        r++;\n    }\n    return mx;\n    }\n};\n//\nRuntime error\n==22==ERROR: AddressSanitizer failed to allocate 0xdfff0001000 (15392894357504) bytes at address 2008fff7000 (errno: 12)\n==22==ReserveShadowMemoryRange failed while trying to map 0xdfff0001000 bytes. Perhaps you're using ulimit -v"
                    },
                    {
                        "username": "rawalprashidha",
                        "content": "use chatgpt to remove errors\\n"
                    },
                    {
                        "username": "gp0216716",
                        "content": "this question is the combination of frequency counter and window sliding technique. Use it to optimise space and time complexity "
                    },
                    {
                        "username": "eidelparada",
                        "content": "My solution pass the 3 testcases, says accepted in all af them, but when I choose \"Submit\" it says \"runtime error\". Why is that? "
                    },
                    {
                        "username": "irichmond1",
                        "content": "I agree with a lot of other people that the question is too vague.  I can read the requirements two ways.  The grammatical ambiguity is that the phrase \"without repeating characters\" could apply either to the subject of the sentence (me, the engineer) or it could refer to the substring.  If it\\'s the former, Examples 1 and 2 seem correct, but Example 3 does not.  Given \"abcabcbb\", \"abc\" seems to be correct, because the first time a letter is repeated in the string (as I, the subject of the sentence am recursing it) is \"a\" at index 3.  Therefore, the answer is the length of \"abc\" (3).  In Example 2, given \"bbbbb\", the we stop before index 1, where we get our 2nd b and say 1 (the first \"b\").  In this context, it\\'s very difficult to understand how Example 3 makes sense, because the answer would seem to be 2 (\"pw\"), since we\\'d stop as soon as we found the second \"w\".\\n\\nUnder the second parsing of the sentence, in which \"without repeating characters\" refers to the substring, all 3 examples make sense, because it\\'s looking at the longest substring, WHICH does not have repeating characters.  \\n\\nAfter a lot of work, interpreting the problem the first way, I finally realized this.  The trouble is that I\\'ve already wasted too much time on this problem and I don\\'t really have the patience to do it over again, so I\\'m moving on."
                    },
                    {
                        "username": "keshavmishra1001",
                        "content": "Hi i\\'m Noob please help me out wtf is this\\n"
                    },
                    {
                        "username": "kazama_jin",
                        "content": "\"anao\" is working but why not \"ynyo\"?"
                    },
                    {
                        "username": "bhushannaik",
                        "content": "For test case 407 input is \"dvdf\" output should be 2 but it is expecting 3 please look into it."
                    },
                    {
                        "username": "kazama_jin",
                        "content": "\"vdf\" , output 3 is correct\\n"
                    },
                    {
                        "username": "shriya_03",
                        "content": "class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        l=[]\\n        for i in range(0,len(s)):\\n            for j in range(len(s)-1,0,-1):\\n                l.append(s[i:j+1])\\n        for i in l:\\n            for j in i:\\n                if i.count(j)>1:\\n                    l.remove(i)\\n                    break\\n        max=len(l[0])\\n        for i in l:\\n            if len(i)>max:\\n                max=len(i)\\n        print(max)\\ncan anyone explain whats wrong with this code?"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code attempts to generate all possible substrings and then remove those with repeated characters, but the l.remove(i) inside nested loops can skip some substrings and lead to incorrect results."
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "Just copy this code and paste it on chatgpt and ask the question u will get ur error rectified and answered "
                    }
                ]
            },
            {
                "id": 1928731,
                "content": [
                    {
                        "username": "tassioFront",
                        "content": "The last test is INSANE! "
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "final=[]\\ndef chack(word):\\n    w=\"\"\\n    \\n    for i in word:\\n        if i in w:\\n           return\\n        else:\\n            w+=i\\n    final.append(w)\\n    \\n            \\n\\narry=\"pwwkew\"\\nfor i in range(len(arry)):\\n    for j in range(i,len(arry)):\\n        v=arry[i:j+1]\\n        chack(v)\\nlength=[]\\nfor i in final:\\n    length.append(len(i))\\nbig=max(length)\\nfor i in final:\\n    if big==len(i):\\n        print(i)\\n        break\\n    "
                    },
                    {
                        "username": "ujjawal_OP",
                        "content": "Why am i getting this error for this code?\n//\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string S) {\n    unordered_set<char> c;\n    int mx = INT_MIN;\n    int n = S.length();\n    int i=0;\n    int r=0;\n    while(r<n)            //O-2N time and O-k space\n    {\n        while(c.find(S[r])!=c.end())\n        {\n            c.erase(S[i]);\n            i++;\n        }\n        mx = max(mx,r-i+1);\n        c.insert(S[r]);\n        r++;\n    }\n    return mx;\n    }\n};\n//\nRuntime error\n==22==ERROR: AddressSanitizer failed to allocate 0xdfff0001000 (15392894357504) bytes at address 2008fff7000 (errno: 12)\n==22==ReserveShadowMemoryRange failed while trying to map 0xdfff0001000 bytes. Perhaps you're using ulimit -v"
                    },
                    {
                        "username": "rawalprashidha",
                        "content": "use chatgpt to remove errors\\n"
                    },
                    {
                        "username": "gp0216716",
                        "content": "this question is the combination of frequency counter and window sliding technique. Use it to optimise space and time complexity "
                    },
                    {
                        "username": "eidelparada",
                        "content": "My solution pass the 3 testcases, says accepted in all af them, but when I choose \"Submit\" it says \"runtime error\". Why is that? "
                    },
                    {
                        "username": "irichmond1",
                        "content": "I agree with a lot of other people that the question is too vague.  I can read the requirements two ways.  The grammatical ambiguity is that the phrase \"without repeating characters\" could apply either to the subject of the sentence (me, the engineer) or it could refer to the substring.  If it\\'s the former, Examples 1 and 2 seem correct, but Example 3 does not.  Given \"abcabcbb\", \"abc\" seems to be correct, because the first time a letter is repeated in the string (as I, the subject of the sentence am recursing it) is \"a\" at index 3.  Therefore, the answer is the length of \"abc\" (3).  In Example 2, given \"bbbbb\", the we stop before index 1, where we get our 2nd b and say 1 (the first \"b\").  In this context, it\\'s very difficult to understand how Example 3 makes sense, because the answer would seem to be 2 (\"pw\"), since we\\'d stop as soon as we found the second \"w\".\\n\\nUnder the second parsing of the sentence, in which \"without repeating characters\" refers to the substring, all 3 examples make sense, because it\\'s looking at the longest substring, WHICH does not have repeating characters.  \\n\\nAfter a lot of work, interpreting the problem the first way, I finally realized this.  The trouble is that I\\'ve already wasted too much time on this problem and I don\\'t really have the patience to do it over again, so I\\'m moving on."
                    },
                    {
                        "username": "keshavmishra1001",
                        "content": "Hi i\\'m Noob please help me out wtf is this\\n"
                    },
                    {
                        "username": "kazama_jin",
                        "content": "\"anao\" is working but why not \"ynyo\"?"
                    },
                    {
                        "username": "bhushannaik",
                        "content": "For test case 407 input is \"dvdf\" output should be 2 but it is expecting 3 please look into it."
                    },
                    {
                        "username": "kazama_jin",
                        "content": "\"vdf\" , output 3 is correct\\n"
                    },
                    {
                        "username": "shriya_03",
                        "content": "class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        l=[]\\n        for i in range(0,len(s)):\\n            for j in range(len(s)-1,0,-1):\\n                l.append(s[i:j+1])\\n        for i in l:\\n            for j in i:\\n                if i.count(j)>1:\\n                    l.remove(i)\\n                    break\\n        max=len(l[0])\\n        for i in l:\\n            if len(i)>max:\\n                max=len(i)\\n        print(max)\\ncan anyone explain whats wrong with this code?"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code attempts to generate all possible substrings and then remove those with repeated characters, but the l.remove(i) inside nested loops can skip some substrings and lead to incorrect results."
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "Just copy this code and paste it on chatgpt and ask the question u will get ur error rectified and answered "
                    }
                ]
            },
            {
                "id": 1928555,
                "content": [
                    {
                        "username": "tassioFront",
                        "content": "The last test is INSANE! "
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "final=[]\\ndef chack(word):\\n    w=\"\"\\n    \\n    for i in word:\\n        if i in w:\\n           return\\n        else:\\n            w+=i\\n    final.append(w)\\n    \\n            \\n\\narry=\"pwwkew\"\\nfor i in range(len(arry)):\\n    for j in range(i,len(arry)):\\n        v=arry[i:j+1]\\n        chack(v)\\nlength=[]\\nfor i in final:\\n    length.append(len(i))\\nbig=max(length)\\nfor i in final:\\n    if big==len(i):\\n        print(i)\\n        break\\n    "
                    },
                    {
                        "username": "ujjawal_OP",
                        "content": "Why am i getting this error for this code?\n//\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string S) {\n    unordered_set<char> c;\n    int mx = INT_MIN;\n    int n = S.length();\n    int i=0;\n    int r=0;\n    while(r<n)            //O-2N time and O-k space\n    {\n        while(c.find(S[r])!=c.end())\n        {\n            c.erase(S[i]);\n            i++;\n        }\n        mx = max(mx,r-i+1);\n        c.insert(S[r]);\n        r++;\n    }\n    return mx;\n    }\n};\n//\nRuntime error\n==22==ERROR: AddressSanitizer failed to allocate 0xdfff0001000 (15392894357504) bytes at address 2008fff7000 (errno: 12)\n==22==ReserveShadowMemoryRange failed while trying to map 0xdfff0001000 bytes. Perhaps you're using ulimit -v"
                    },
                    {
                        "username": "rawalprashidha",
                        "content": "use chatgpt to remove errors\\n"
                    },
                    {
                        "username": "gp0216716",
                        "content": "this question is the combination of frequency counter and window sliding technique. Use it to optimise space and time complexity "
                    },
                    {
                        "username": "eidelparada",
                        "content": "My solution pass the 3 testcases, says accepted in all af them, but when I choose \"Submit\" it says \"runtime error\". Why is that? "
                    },
                    {
                        "username": "irichmond1",
                        "content": "I agree with a lot of other people that the question is too vague.  I can read the requirements two ways.  The grammatical ambiguity is that the phrase \"without repeating characters\" could apply either to the subject of the sentence (me, the engineer) or it could refer to the substring.  If it\\'s the former, Examples 1 and 2 seem correct, but Example 3 does not.  Given \"abcabcbb\", \"abc\" seems to be correct, because the first time a letter is repeated in the string (as I, the subject of the sentence am recursing it) is \"a\" at index 3.  Therefore, the answer is the length of \"abc\" (3).  In Example 2, given \"bbbbb\", the we stop before index 1, where we get our 2nd b and say 1 (the first \"b\").  In this context, it\\'s very difficult to understand how Example 3 makes sense, because the answer would seem to be 2 (\"pw\"), since we\\'d stop as soon as we found the second \"w\".\\n\\nUnder the second parsing of the sentence, in which \"without repeating characters\" refers to the substring, all 3 examples make sense, because it\\'s looking at the longest substring, WHICH does not have repeating characters.  \\n\\nAfter a lot of work, interpreting the problem the first way, I finally realized this.  The trouble is that I\\'ve already wasted too much time on this problem and I don\\'t really have the patience to do it over again, so I\\'m moving on."
                    },
                    {
                        "username": "keshavmishra1001",
                        "content": "Hi i\\'m Noob please help me out wtf is this\\n"
                    },
                    {
                        "username": "kazama_jin",
                        "content": "\"anao\" is working but why not \"ynyo\"?"
                    },
                    {
                        "username": "bhushannaik",
                        "content": "For test case 407 input is \"dvdf\" output should be 2 but it is expecting 3 please look into it."
                    },
                    {
                        "username": "kazama_jin",
                        "content": "\"vdf\" , output 3 is correct\\n"
                    },
                    {
                        "username": "shriya_03",
                        "content": "class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        l=[]\\n        for i in range(0,len(s)):\\n            for j in range(len(s)-1,0,-1):\\n                l.append(s[i:j+1])\\n        for i in l:\\n            for j in i:\\n                if i.count(j)>1:\\n                    l.remove(i)\\n                    break\\n        max=len(l[0])\\n        for i in l:\\n            if len(i)>max:\\n                max=len(i)\\n        print(max)\\ncan anyone explain whats wrong with this code?"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code attempts to generate all possible substrings and then remove those with repeated characters, but the l.remove(i) inside nested loops can skip some substrings and lead to incorrect results."
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "Just copy this code and paste it on chatgpt and ask the question u will get ur error rectified and answered "
                    }
                ]
            },
            {
                "id": 1926993,
                "content": [
                    {
                        "username": "tassioFront",
                        "content": "The last test is INSANE! "
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "final=[]\\ndef chack(word):\\n    w=\"\"\\n    \\n    for i in word:\\n        if i in w:\\n           return\\n        else:\\n            w+=i\\n    final.append(w)\\n    \\n            \\n\\narry=\"pwwkew\"\\nfor i in range(len(arry)):\\n    for j in range(i,len(arry)):\\n        v=arry[i:j+1]\\n        chack(v)\\nlength=[]\\nfor i in final:\\n    length.append(len(i))\\nbig=max(length)\\nfor i in final:\\n    if big==len(i):\\n        print(i)\\n        break\\n    "
                    },
                    {
                        "username": "ujjawal_OP",
                        "content": "Why am i getting this error for this code?\n//\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string S) {\n    unordered_set<char> c;\n    int mx = INT_MIN;\n    int n = S.length();\n    int i=0;\n    int r=0;\n    while(r<n)            //O-2N time and O-k space\n    {\n        while(c.find(S[r])!=c.end())\n        {\n            c.erase(S[i]);\n            i++;\n        }\n        mx = max(mx,r-i+1);\n        c.insert(S[r]);\n        r++;\n    }\n    return mx;\n    }\n};\n//\nRuntime error\n==22==ERROR: AddressSanitizer failed to allocate 0xdfff0001000 (15392894357504) bytes at address 2008fff7000 (errno: 12)\n==22==ReserveShadowMemoryRange failed while trying to map 0xdfff0001000 bytes. Perhaps you're using ulimit -v"
                    },
                    {
                        "username": "rawalprashidha",
                        "content": "use chatgpt to remove errors\\n"
                    },
                    {
                        "username": "gp0216716",
                        "content": "this question is the combination of frequency counter and window sliding technique. Use it to optimise space and time complexity "
                    },
                    {
                        "username": "eidelparada",
                        "content": "My solution pass the 3 testcases, says accepted in all af them, but when I choose \"Submit\" it says \"runtime error\". Why is that? "
                    },
                    {
                        "username": "irichmond1",
                        "content": "I agree with a lot of other people that the question is too vague.  I can read the requirements two ways.  The grammatical ambiguity is that the phrase \"without repeating characters\" could apply either to the subject of the sentence (me, the engineer) or it could refer to the substring.  If it\\'s the former, Examples 1 and 2 seem correct, but Example 3 does not.  Given \"abcabcbb\", \"abc\" seems to be correct, because the first time a letter is repeated in the string (as I, the subject of the sentence am recursing it) is \"a\" at index 3.  Therefore, the answer is the length of \"abc\" (3).  In Example 2, given \"bbbbb\", the we stop before index 1, where we get our 2nd b and say 1 (the first \"b\").  In this context, it\\'s very difficult to understand how Example 3 makes sense, because the answer would seem to be 2 (\"pw\"), since we\\'d stop as soon as we found the second \"w\".\\n\\nUnder the second parsing of the sentence, in which \"without repeating characters\" refers to the substring, all 3 examples make sense, because it\\'s looking at the longest substring, WHICH does not have repeating characters.  \\n\\nAfter a lot of work, interpreting the problem the first way, I finally realized this.  The trouble is that I\\'ve already wasted too much time on this problem and I don\\'t really have the patience to do it over again, so I\\'m moving on."
                    },
                    {
                        "username": "keshavmishra1001",
                        "content": "Hi i\\'m Noob please help me out wtf is this\\n"
                    },
                    {
                        "username": "kazama_jin",
                        "content": "\"anao\" is working but why not \"ynyo\"?"
                    },
                    {
                        "username": "bhushannaik",
                        "content": "For test case 407 input is \"dvdf\" output should be 2 but it is expecting 3 please look into it."
                    },
                    {
                        "username": "kazama_jin",
                        "content": "\"vdf\" , output 3 is correct\\n"
                    },
                    {
                        "username": "shriya_03",
                        "content": "class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        l=[]\\n        for i in range(0,len(s)):\\n            for j in range(len(s)-1,0,-1):\\n                l.append(s[i:j+1])\\n        for i in l:\\n            for j in i:\\n                if i.count(j)>1:\\n                    l.remove(i)\\n                    break\\n        max=len(l[0])\\n        for i in l:\\n            if len(i)>max:\\n                max=len(i)\\n        print(max)\\ncan anyone explain whats wrong with this code?"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code attempts to generate all possible substrings and then remove those with repeated characters, but the l.remove(i) inside nested loops can skip some substrings and lead to incorrect results."
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "Just copy this code and paste it on chatgpt and ask the question u will get ur error rectified and answered "
                    }
                ]
            },
            {
                "id": 1925918,
                "content": [
                    {
                        "username": "tassioFront",
                        "content": "The last test is INSANE! "
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "final=[]\\ndef chack(word):\\n    w=\"\"\\n    \\n    for i in word:\\n        if i in w:\\n           return\\n        else:\\n            w+=i\\n    final.append(w)\\n    \\n            \\n\\narry=\"pwwkew\"\\nfor i in range(len(arry)):\\n    for j in range(i,len(arry)):\\n        v=arry[i:j+1]\\n        chack(v)\\nlength=[]\\nfor i in final:\\n    length.append(len(i))\\nbig=max(length)\\nfor i in final:\\n    if big==len(i):\\n        print(i)\\n        break\\n    "
                    },
                    {
                        "username": "ujjawal_OP",
                        "content": "Why am i getting this error for this code?\n//\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string S) {\n    unordered_set<char> c;\n    int mx = INT_MIN;\n    int n = S.length();\n    int i=0;\n    int r=0;\n    while(r<n)            //O-2N time and O-k space\n    {\n        while(c.find(S[r])!=c.end())\n        {\n            c.erase(S[i]);\n            i++;\n        }\n        mx = max(mx,r-i+1);\n        c.insert(S[r]);\n        r++;\n    }\n    return mx;\n    }\n};\n//\nRuntime error\n==22==ERROR: AddressSanitizer failed to allocate 0xdfff0001000 (15392894357504) bytes at address 2008fff7000 (errno: 12)\n==22==ReserveShadowMemoryRange failed while trying to map 0xdfff0001000 bytes. Perhaps you're using ulimit -v"
                    },
                    {
                        "username": "rawalprashidha",
                        "content": "use chatgpt to remove errors\\n"
                    },
                    {
                        "username": "gp0216716",
                        "content": "this question is the combination of frequency counter and window sliding technique. Use it to optimise space and time complexity "
                    },
                    {
                        "username": "eidelparada",
                        "content": "My solution pass the 3 testcases, says accepted in all af them, but when I choose \"Submit\" it says \"runtime error\". Why is that? "
                    },
                    {
                        "username": "irichmond1",
                        "content": "I agree with a lot of other people that the question is too vague.  I can read the requirements two ways.  The grammatical ambiguity is that the phrase \"without repeating characters\" could apply either to the subject of the sentence (me, the engineer) or it could refer to the substring.  If it\\'s the former, Examples 1 and 2 seem correct, but Example 3 does not.  Given \"abcabcbb\", \"abc\" seems to be correct, because the first time a letter is repeated in the string (as I, the subject of the sentence am recursing it) is \"a\" at index 3.  Therefore, the answer is the length of \"abc\" (3).  In Example 2, given \"bbbbb\", the we stop before index 1, where we get our 2nd b and say 1 (the first \"b\").  In this context, it\\'s very difficult to understand how Example 3 makes sense, because the answer would seem to be 2 (\"pw\"), since we\\'d stop as soon as we found the second \"w\".\\n\\nUnder the second parsing of the sentence, in which \"without repeating characters\" refers to the substring, all 3 examples make sense, because it\\'s looking at the longest substring, WHICH does not have repeating characters.  \\n\\nAfter a lot of work, interpreting the problem the first way, I finally realized this.  The trouble is that I\\'ve already wasted too much time on this problem and I don\\'t really have the patience to do it over again, so I\\'m moving on."
                    },
                    {
                        "username": "keshavmishra1001",
                        "content": "Hi i\\'m Noob please help me out wtf is this\\n"
                    },
                    {
                        "username": "kazama_jin",
                        "content": "\"anao\" is working but why not \"ynyo\"?"
                    },
                    {
                        "username": "bhushannaik",
                        "content": "For test case 407 input is \"dvdf\" output should be 2 but it is expecting 3 please look into it."
                    },
                    {
                        "username": "kazama_jin",
                        "content": "\"vdf\" , output 3 is correct\\n"
                    },
                    {
                        "username": "shriya_03",
                        "content": "class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        l=[]\\n        for i in range(0,len(s)):\\n            for j in range(len(s)-1,0,-1):\\n                l.append(s[i:j+1])\\n        for i in l:\\n            for j in i:\\n                if i.count(j)>1:\\n                    l.remove(i)\\n                    break\\n        max=len(l[0])\\n        for i in l:\\n            if len(i)>max:\\n                max=len(i)\\n        print(max)\\ncan anyone explain whats wrong with this code?"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code attempts to generate all possible substrings and then remove those with repeated characters, but the l.remove(i) inside nested loops can skip some substrings and lead to incorrect results."
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "Just copy this code and paste it on chatgpt and ask the question u will get ur error rectified and answered "
                    }
                ]
            },
            {
                "id": 1923630,
                "content": [
                    {
                        "username": "tassioFront",
                        "content": "The last test is INSANE! "
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "final=[]\\ndef chack(word):\\n    w=\"\"\\n    \\n    for i in word:\\n        if i in w:\\n           return\\n        else:\\n            w+=i\\n    final.append(w)\\n    \\n            \\n\\narry=\"pwwkew\"\\nfor i in range(len(arry)):\\n    for j in range(i,len(arry)):\\n        v=arry[i:j+1]\\n        chack(v)\\nlength=[]\\nfor i in final:\\n    length.append(len(i))\\nbig=max(length)\\nfor i in final:\\n    if big==len(i):\\n        print(i)\\n        break\\n    "
                    },
                    {
                        "username": "ujjawal_OP",
                        "content": "Why am i getting this error for this code?\n//\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string S) {\n    unordered_set<char> c;\n    int mx = INT_MIN;\n    int n = S.length();\n    int i=0;\n    int r=0;\n    while(r<n)            //O-2N time and O-k space\n    {\n        while(c.find(S[r])!=c.end())\n        {\n            c.erase(S[i]);\n            i++;\n        }\n        mx = max(mx,r-i+1);\n        c.insert(S[r]);\n        r++;\n    }\n    return mx;\n    }\n};\n//\nRuntime error\n==22==ERROR: AddressSanitizer failed to allocate 0xdfff0001000 (15392894357504) bytes at address 2008fff7000 (errno: 12)\n==22==ReserveShadowMemoryRange failed while trying to map 0xdfff0001000 bytes. Perhaps you're using ulimit -v"
                    },
                    {
                        "username": "rawalprashidha",
                        "content": "use chatgpt to remove errors\\n"
                    },
                    {
                        "username": "gp0216716",
                        "content": "this question is the combination of frequency counter and window sliding technique. Use it to optimise space and time complexity "
                    },
                    {
                        "username": "eidelparada",
                        "content": "My solution pass the 3 testcases, says accepted in all af them, but when I choose \"Submit\" it says \"runtime error\". Why is that? "
                    },
                    {
                        "username": "irichmond1",
                        "content": "I agree with a lot of other people that the question is too vague.  I can read the requirements two ways.  The grammatical ambiguity is that the phrase \"without repeating characters\" could apply either to the subject of the sentence (me, the engineer) or it could refer to the substring.  If it\\'s the former, Examples 1 and 2 seem correct, but Example 3 does not.  Given \"abcabcbb\", \"abc\" seems to be correct, because the first time a letter is repeated in the string (as I, the subject of the sentence am recursing it) is \"a\" at index 3.  Therefore, the answer is the length of \"abc\" (3).  In Example 2, given \"bbbbb\", the we stop before index 1, where we get our 2nd b and say 1 (the first \"b\").  In this context, it\\'s very difficult to understand how Example 3 makes sense, because the answer would seem to be 2 (\"pw\"), since we\\'d stop as soon as we found the second \"w\".\\n\\nUnder the second parsing of the sentence, in which \"without repeating characters\" refers to the substring, all 3 examples make sense, because it\\'s looking at the longest substring, WHICH does not have repeating characters.  \\n\\nAfter a lot of work, interpreting the problem the first way, I finally realized this.  The trouble is that I\\'ve already wasted too much time on this problem and I don\\'t really have the patience to do it over again, so I\\'m moving on."
                    },
                    {
                        "username": "keshavmishra1001",
                        "content": "Hi i\\'m Noob please help me out wtf is this\\n"
                    },
                    {
                        "username": "kazama_jin",
                        "content": "\"anao\" is working but why not \"ynyo\"?"
                    },
                    {
                        "username": "bhushannaik",
                        "content": "For test case 407 input is \"dvdf\" output should be 2 but it is expecting 3 please look into it."
                    },
                    {
                        "username": "kazama_jin",
                        "content": "\"vdf\" , output 3 is correct\\n"
                    },
                    {
                        "username": "shriya_03",
                        "content": "class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        l=[]\\n        for i in range(0,len(s)):\\n            for j in range(len(s)-1,0,-1):\\n                l.append(s[i:j+1])\\n        for i in l:\\n            for j in i:\\n                if i.count(j)>1:\\n                    l.remove(i)\\n                    break\\n        max=len(l[0])\\n        for i in l:\\n            if len(i)>max:\\n                max=len(i)\\n        print(max)\\ncan anyone explain whats wrong with this code?"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code attempts to generate all possible substrings and then remove those with repeated characters, but the l.remove(i) inside nested loops can skip some substrings and lead to incorrect results."
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "Just copy this code and paste it on chatgpt and ask the question u will get ur error rectified and answered "
                    }
                ]
            },
            {
                "id": 1923136,
                "content": [
                    {
                        "username": "tassioFront",
                        "content": "The last test is INSANE! "
                    },
                    {
                        "username": "manneganeshveerraju",
                        "content": "final=[]\\ndef chack(word):\\n    w=\"\"\\n    \\n    for i in word:\\n        if i in w:\\n           return\\n        else:\\n            w+=i\\n    final.append(w)\\n    \\n            \\n\\narry=\"pwwkew\"\\nfor i in range(len(arry)):\\n    for j in range(i,len(arry)):\\n        v=arry[i:j+1]\\n        chack(v)\\nlength=[]\\nfor i in final:\\n    length.append(len(i))\\nbig=max(length)\\nfor i in final:\\n    if big==len(i):\\n        print(i)\\n        break\\n    "
                    },
                    {
                        "username": "ujjawal_OP",
                        "content": "Why am i getting this error for this code?\n//\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string S) {\n    unordered_set<char> c;\n    int mx = INT_MIN;\n    int n = S.length();\n    int i=0;\n    int r=0;\n    while(r<n)            //O-2N time and O-k space\n    {\n        while(c.find(S[r])!=c.end())\n        {\n            c.erase(S[i]);\n            i++;\n        }\n        mx = max(mx,r-i+1);\n        c.insert(S[r]);\n        r++;\n    }\n    return mx;\n    }\n};\n//\nRuntime error\n==22==ERROR: AddressSanitizer failed to allocate 0xdfff0001000 (15392894357504) bytes at address 2008fff7000 (errno: 12)\n==22==ReserveShadowMemoryRange failed while trying to map 0xdfff0001000 bytes. Perhaps you're using ulimit -v"
                    },
                    {
                        "username": "rawalprashidha",
                        "content": "use chatgpt to remove errors\\n"
                    },
                    {
                        "username": "gp0216716",
                        "content": "this question is the combination of frequency counter and window sliding technique. Use it to optimise space and time complexity "
                    },
                    {
                        "username": "eidelparada",
                        "content": "My solution pass the 3 testcases, says accepted in all af them, but when I choose \"Submit\" it says \"runtime error\". Why is that? "
                    },
                    {
                        "username": "irichmond1",
                        "content": "I agree with a lot of other people that the question is too vague.  I can read the requirements two ways.  The grammatical ambiguity is that the phrase \"without repeating characters\" could apply either to the subject of the sentence (me, the engineer) or it could refer to the substring.  If it\\'s the former, Examples 1 and 2 seem correct, but Example 3 does not.  Given \"abcabcbb\", \"abc\" seems to be correct, because the first time a letter is repeated in the string (as I, the subject of the sentence am recursing it) is \"a\" at index 3.  Therefore, the answer is the length of \"abc\" (3).  In Example 2, given \"bbbbb\", the we stop before index 1, where we get our 2nd b and say 1 (the first \"b\").  In this context, it\\'s very difficult to understand how Example 3 makes sense, because the answer would seem to be 2 (\"pw\"), since we\\'d stop as soon as we found the second \"w\".\\n\\nUnder the second parsing of the sentence, in which \"without repeating characters\" refers to the substring, all 3 examples make sense, because it\\'s looking at the longest substring, WHICH does not have repeating characters.  \\n\\nAfter a lot of work, interpreting the problem the first way, I finally realized this.  The trouble is that I\\'ve already wasted too much time on this problem and I don\\'t really have the patience to do it over again, so I\\'m moving on."
                    },
                    {
                        "username": "keshavmishra1001",
                        "content": "Hi i\\'m Noob please help me out wtf is this\\n"
                    },
                    {
                        "username": "kazama_jin",
                        "content": "\"anao\" is working but why not \"ynyo\"?"
                    },
                    {
                        "username": "bhushannaik",
                        "content": "For test case 407 input is \"dvdf\" output should be 2 but it is expecting 3 please look into it."
                    },
                    {
                        "username": "kazama_jin",
                        "content": "\"vdf\" , output 3 is correct\\n"
                    },
                    {
                        "username": "shriya_03",
                        "content": "class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        l=[]\\n        for i in range(0,len(s)):\\n            for j in range(len(s)-1,0,-1):\\n                l.append(s[i:j+1])\\n        for i in l:\\n            for j in i:\\n                if i.count(j)>1:\\n                    l.remove(i)\\n                    break\\n        max=len(l[0])\\n        for i in l:\\n            if len(i)>max:\\n                max=len(i)\\n        print(max)\\ncan anyone explain whats wrong with this code?"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code attempts to generate all possible substrings and then remove those with repeated characters, but the l.remove(i) inside nested loops can skip some substrings and lead to incorrect results."
                    },
                    {
                        "username": "vijay__bhaskar",
                        "content": "Just copy this code and paste it on chatgpt and ask the question u will get ur error rectified and answered "
                    }
                ]
            },
            {
                "id": 1922432,
                "content": [
                    {
                        "username": "rawalprashidha",
                        "content": "Average time to solve this problem?"
                    },
                    {
                        "username": "nayanrabiul",
                        "content": "the confusion arise in 3rd example. when it said \"pwke\" is a subsequence and not a substring.\\nnow, we have to understand that,\\na substring is a contiguous sequence of characters, while a subsequence is a sequence of characters obtained by deleting zero or more characters without changing the order of the remaining characters.\\nTo illustrate the difference between substrings and subsequences, let\\'s consider the string \"abcde\":\\n\\nSubstrings: \"a\", \"b\", \"c\", \"d\", \"e\", \"ab\", \"abc\", \"bc\", \"cde\", etc.\\nSubsequences: \"a\", \"b\", \"c\", \"d\", \"e\", \"ab\", \"ac\", \"ad\", \"ae\", \"bc\", \"bd\", \"be\", \"cd\", \"ce\", \"de\", \"abc\", \"abd\", \"abe\", \"acd\", \"ace\", \"ade\", \"bcd\", \"bce\", \"bde\", \"cde\", etc.\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "A substring is a continuous chunk of characters taken from a string without skipping any, while a subsequence is any sequence of characters from the original string, even if they\\'re not next to each other. For example, in \"abcde\", \"abc\" is a substring, but \"ace\" is a subsequence because it skips \"b\" and \"d\"."
                    },
                    {
                        "username": "s4srivat",
                        "content": "For example 3 (input = \"pwwkew\"), are both \"wke\" and \"kew\" not examples of substrings that both meet the answer criteria? "
                    },
                    {
                        "username": "Shaswat_Pandey",
                        "content": "Correct me if i\\'m wrong , should be the output 5 or 7?\\n\\nInput :  s = \"sluaklj^@\"\\n\\nMy code Output :  5\\n\\nExpected : 7 \\n\\n\\nTry for this test case.          Thanks & Regards"
                    },
                    {
                        "username": "Shaswat_Pandey",
                        "content": "[@meraj05](/meraj05) ohh, yes Thanks"
                    },
                    {
                        "username": "meraj05",
                        "content": "it is 7 coz here substring with maxmium length is \"uaklj^@\"  "
                    },
                    {
                        "username": "procoderer",
                        "content": "first LC medium attempt, SUCCESS (Beats 70.19% runtime, 99.36% memory)\\n\\njust wanted to share lol"
                    },
                    {
                        "username": "yuaroslav29",
                        "content": " `function lengthOfLongestSubstring(s: string): number {\\n\\n    let set = new Set<string>();\\n    let count: number = 0;\\n    let left: number = 0;\\n    let right: number = 0;\\n\\n    if(s === null) {\\n        return 0;\\n    }\\n\\n    while(right < s.length) {\\n        if(!set.has(s[right])) {\\n            set.add(s[right]);\\n            right++;\\n\\n            count = Math.max(count, set.size);\\n        } else {\\n            console.log(set);\\n            set.delete(s[left]);\\n            left++;\\n        }\\n    }\\n\\n    return count;\\n}.`\\n\\nWhy does \"Output Limit Exceeded 987 / 987 testcases passed Last Executed Input Use Testcases s=\"  ?"
                    },
                    {
                        "username": "janis__",
                        "content": "The \"Output Limit Exceeded\" error is likely due to the console.log(set); line, which prints too much output for large test cases; removing or commenting out that line should resolve the issue."
                    },
                    {
                        "username": "lethal-bot",
                        "content": "\"s consists of English letters, digits, symbols and spaces.\" don\\'t ignore this \\uD83D\\uDE36"
                    },
                    {
                        "username": "BlackManFromAfrica",
                        "content": "Runtime Error\\n986 / 987 testcases passed\\n\\nterminate called after throwing an instance of \\'std::bad_alloc\\'\\n  what():  std::bad_alloc\\n\\nwhat\\'s wrong?"
                    },
                    {
                        "username": "janis__",
                        "content": "The error std::bad_alloc indicates that your program tried to allocate memory but failed, typically due to excessive memory usage. This suggests that your solution might be consuming too much memory for certain test cases, and you should optimize or revise your approach to be more memory-efficient."
                    },
                    {
                        "username": "eliyoung4",
                        "content": "class Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        max_length = 0\\n        start = 0\\n        seen = {}\\n\\n        for end in range(len(s)):\\n            if s[end] in seen and start <= seen[s[end]]:\\n                start = seen[s[end]] + 1\\n            else:\\n                max_length = max(max_length, end - start + 1)\\n            seen[s[end]] = end\\n\\n        return max_length"
                    },
                    {
                        "username": "yogesh166",
                        "content": "Use sliding window approach with hash Set for optimized solution\\n"
                    }
                ]
            },
            {
                "id": 1920596,
                "content": [
                    {
                        "username": "rawalprashidha",
                        "content": "Average time to solve this problem?"
                    },
                    {
                        "username": "nayanrabiul",
                        "content": "the confusion arise in 3rd example. when it said \"pwke\" is a subsequence and not a substring.\\nnow, we have to understand that,\\na substring is a contiguous sequence of characters, while a subsequence is a sequence of characters obtained by deleting zero or more characters without changing the order of the remaining characters.\\nTo illustrate the difference between substrings and subsequences, let\\'s consider the string \"abcde\":\\n\\nSubstrings: \"a\", \"b\", \"c\", \"d\", \"e\", \"ab\", \"abc\", \"bc\", \"cde\", etc.\\nSubsequences: \"a\", \"b\", \"c\", \"d\", \"e\", \"ab\", \"ac\", \"ad\", \"ae\", \"bc\", \"bd\", \"be\", \"cd\", \"ce\", \"de\", \"abc\", \"abd\", \"abe\", \"acd\", \"ace\", \"ade\", \"bcd\", \"bce\", \"bde\", \"cde\", etc.\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "A substring is a continuous chunk of characters taken from a string without skipping any, while a subsequence is any sequence of characters from the original string, even if they\\'re not next to each other. For example, in \"abcde\", \"abc\" is a substring, but \"ace\" is a subsequence because it skips \"b\" and \"d\"."
                    },
                    {
                        "username": "s4srivat",
                        "content": "For example 3 (input = \"pwwkew\"), are both \"wke\" and \"kew\" not examples of substrings that both meet the answer criteria? "
                    },
                    {
                        "username": "Shaswat_Pandey",
                        "content": "Correct me if i\\'m wrong , should be the output 5 or 7?\\n\\nInput :  s = \"sluaklj^@\"\\n\\nMy code Output :  5\\n\\nExpected : 7 \\n\\n\\nTry for this test case.          Thanks & Regards"
                    },
                    {
                        "username": "Shaswat_Pandey",
                        "content": "[@meraj05](/meraj05) ohh, yes Thanks"
                    },
                    {
                        "username": "meraj05",
                        "content": "it is 7 coz here substring with maxmium length is \"uaklj^@\"  "
                    },
                    {
                        "username": "procoderer",
                        "content": "first LC medium attempt, SUCCESS (Beats 70.19% runtime, 99.36% memory)\\n\\njust wanted to share lol"
                    },
                    {
                        "username": "yuaroslav29",
                        "content": " `function lengthOfLongestSubstring(s: string): number {\\n\\n    let set = new Set<string>();\\n    let count: number = 0;\\n    let left: number = 0;\\n    let right: number = 0;\\n\\n    if(s === null) {\\n        return 0;\\n    }\\n\\n    while(right < s.length) {\\n        if(!set.has(s[right])) {\\n            set.add(s[right]);\\n            right++;\\n\\n            count = Math.max(count, set.size);\\n        } else {\\n            console.log(set);\\n            set.delete(s[left]);\\n            left++;\\n        }\\n    }\\n\\n    return count;\\n}.`\\n\\nWhy does \"Output Limit Exceeded 987 / 987 testcases passed Last Executed Input Use Testcases s=\"  ?"
                    },
                    {
                        "username": "janis__",
                        "content": "The \"Output Limit Exceeded\" error is likely due to the console.log(set); line, which prints too much output for large test cases; removing or commenting out that line should resolve the issue."
                    },
                    {
                        "username": "lethal-bot",
                        "content": "\"s consists of English letters, digits, symbols and spaces.\" don\\'t ignore this \\uD83D\\uDE36"
                    },
                    {
                        "username": "BlackManFromAfrica",
                        "content": "Runtime Error\\n986 / 987 testcases passed\\n\\nterminate called after throwing an instance of \\'std::bad_alloc\\'\\n  what():  std::bad_alloc\\n\\nwhat\\'s wrong?"
                    },
                    {
                        "username": "janis__",
                        "content": "The error std::bad_alloc indicates that your program tried to allocate memory but failed, typically due to excessive memory usage. This suggests that your solution might be consuming too much memory for certain test cases, and you should optimize or revise your approach to be more memory-efficient."
                    },
                    {
                        "username": "eliyoung4",
                        "content": "class Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        max_length = 0\\n        start = 0\\n        seen = {}\\n\\n        for end in range(len(s)):\\n            if s[end] in seen and start <= seen[s[end]]:\\n                start = seen[s[end]] + 1\\n            else:\\n                max_length = max(max_length, end - start + 1)\\n            seen[s[end]] = end\\n\\n        return max_length"
                    },
                    {
                        "username": "yogesh166",
                        "content": "Use sliding window approach with hash Set for optimized solution\\n"
                    }
                ]
            },
            {
                "id": 1918182,
                "content": [
                    {
                        "username": "rawalprashidha",
                        "content": "Average time to solve this problem?"
                    },
                    {
                        "username": "nayanrabiul",
                        "content": "the confusion arise in 3rd example. when it said \"pwke\" is a subsequence and not a substring.\\nnow, we have to understand that,\\na substring is a contiguous sequence of characters, while a subsequence is a sequence of characters obtained by deleting zero or more characters without changing the order of the remaining characters.\\nTo illustrate the difference between substrings and subsequences, let\\'s consider the string \"abcde\":\\n\\nSubstrings: \"a\", \"b\", \"c\", \"d\", \"e\", \"ab\", \"abc\", \"bc\", \"cde\", etc.\\nSubsequences: \"a\", \"b\", \"c\", \"d\", \"e\", \"ab\", \"ac\", \"ad\", \"ae\", \"bc\", \"bd\", \"be\", \"cd\", \"ce\", \"de\", \"abc\", \"abd\", \"abe\", \"acd\", \"ace\", \"ade\", \"bcd\", \"bce\", \"bde\", \"cde\", etc.\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "A substring is a continuous chunk of characters taken from a string without skipping any, while a subsequence is any sequence of characters from the original string, even if they\\'re not next to each other. For example, in \"abcde\", \"abc\" is a substring, but \"ace\" is a subsequence because it skips \"b\" and \"d\"."
                    },
                    {
                        "username": "s4srivat",
                        "content": "For example 3 (input = \"pwwkew\"), are both \"wke\" and \"kew\" not examples of substrings that both meet the answer criteria? "
                    },
                    {
                        "username": "Shaswat_Pandey",
                        "content": "Correct me if i\\'m wrong , should be the output 5 or 7?\\n\\nInput :  s = \"sluaklj^@\"\\n\\nMy code Output :  5\\n\\nExpected : 7 \\n\\n\\nTry for this test case.          Thanks & Regards"
                    },
                    {
                        "username": "Shaswat_Pandey",
                        "content": "[@meraj05](/meraj05) ohh, yes Thanks"
                    },
                    {
                        "username": "meraj05",
                        "content": "it is 7 coz here substring with maxmium length is \"uaklj^@\"  "
                    },
                    {
                        "username": "procoderer",
                        "content": "first LC medium attempt, SUCCESS (Beats 70.19% runtime, 99.36% memory)\\n\\njust wanted to share lol"
                    },
                    {
                        "username": "yuaroslav29",
                        "content": " `function lengthOfLongestSubstring(s: string): number {\\n\\n    let set = new Set<string>();\\n    let count: number = 0;\\n    let left: number = 0;\\n    let right: number = 0;\\n\\n    if(s === null) {\\n        return 0;\\n    }\\n\\n    while(right < s.length) {\\n        if(!set.has(s[right])) {\\n            set.add(s[right]);\\n            right++;\\n\\n            count = Math.max(count, set.size);\\n        } else {\\n            console.log(set);\\n            set.delete(s[left]);\\n            left++;\\n        }\\n    }\\n\\n    return count;\\n}.`\\n\\nWhy does \"Output Limit Exceeded 987 / 987 testcases passed Last Executed Input Use Testcases s=\"  ?"
                    },
                    {
                        "username": "janis__",
                        "content": "The \"Output Limit Exceeded\" error is likely due to the console.log(set); line, which prints too much output for large test cases; removing or commenting out that line should resolve the issue."
                    },
                    {
                        "username": "lethal-bot",
                        "content": "\"s consists of English letters, digits, symbols and spaces.\" don\\'t ignore this \\uD83D\\uDE36"
                    },
                    {
                        "username": "BlackManFromAfrica",
                        "content": "Runtime Error\\n986 / 987 testcases passed\\n\\nterminate called after throwing an instance of \\'std::bad_alloc\\'\\n  what():  std::bad_alloc\\n\\nwhat\\'s wrong?"
                    },
                    {
                        "username": "janis__",
                        "content": "The error std::bad_alloc indicates that your program tried to allocate memory but failed, typically due to excessive memory usage. This suggests that your solution might be consuming too much memory for certain test cases, and you should optimize or revise your approach to be more memory-efficient."
                    },
                    {
                        "username": "eliyoung4",
                        "content": "class Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        max_length = 0\\n        start = 0\\n        seen = {}\\n\\n        for end in range(len(s)):\\n            if s[end] in seen and start <= seen[s[end]]:\\n                start = seen[s[end]] + 1\\n            else:\\n                max_length = max(max_length, end - start + 1)\\n            seen[s[end]] = end\\n\\n        return max_length"
                    },
                    {
                        "username": "yogesh166",
                        "content": "Use sliding window approach with hash Set for optimized solution\\n"
                    }
                ]
            },
            {
                "id": 1914282,
                "content": [
                    {
                        "username": "rawalprashidha",
                        "content": "Average time to solve this problem?"
                    },
                    {
                        "username": "nayanrabiul",
                        "content": "the confusion arise in 3rd example. when it said \"pwke\" is a subsequence and not a substring.\\nnow, we have to understand that,\\na substring is a contiguous sequence of characters, while a subsequence is a sequence of characters obtained by deleting zero or more characters without changing the order of the remaining characters.\\nTo illustrate the difference between substrings and subsequences, let\\'s consider the string \"abcde\":\\n\\nSubstrings: \"a\", \"b\", \"c\", \"d\", \"e\", \"ab\", \"abc\", \"bc\", \"cde\", etc.\\nSubsequences: \"a\", \"b\", \"c\", \"d\", \"e\", \"ab\", \"ac\", \"ad\", \"ae\", \"bc\", \"bd\", \"be\", \"cd\", \"ce\", \"de\", \"abc\", \"abd\", \"abe\", \"acd\", \"ace\", \"ade\", \"bcd\", \"bce\", \"bde\", \"cde\", etc.\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "A substring is a continuous chunk of characters taken from a string without skipping any, while a subsequence is any sequence of characters from the original string, even if they\\'re not next to each other. For example, in \"abcde\", \"abc\" is a substring, but \"ace\" is a subsequence because it skips \"b\" and \"d\"."
                    },
                    {
                        "username": "s4srivat",
                        "content": "For example 3 (input = \"pwwkew\"), are both \"wke\" and \"kew\" not examples of substrings that both meet the answer criteria? "
                    },
                    {
                        "username": "Shaswat_Pandey",
                        "content": "Correct me if i\\'m wrong , should be the output 5 or 7?\\n\\nInput :  s = \"sluaklj^@\"\\n\\nMy code Output :  5\\n\\nExpected : 7 \\n\\n\\nTry for this test case.          Thanks & Regards"
                    },
                    {
                        "username": "Shaswat_Pandey",
                        "content": "[@meraj05](/meraj05) ohh, yes Thanks"
                    },
                    {
                        "username": "meraj05",
                        "content": "it is 7 coz here substring with maxmium length is \"uaklj^@\"  "
                    },
                    {
                        "username": "procoderer",
                        "content": "first LC medium attempt, SUCCESS (Beats 70.19% runtime, 99.36% memory)\\n\\njust wanted to share lol"
                    },
                    {
                        "username": "yuaroslav29",
                        "content": " `function lengthOfLongestSubstring(s: string): number {\\n\\n    let set = new Set<string>();\\n    let count: number = 0;\\n    let left: number = 0;\\n    let right: number = 0;\\n\\n    if(s === null) {\\n        return 0;\\n    }\\n\\n    while(right < s.length) {\\n        if(!set.has(s[right])) {\\n            set.add(s[right]);\\n            right++;\\n\\n            count = Math.max(count, set.size);\\n        } else {\\n            console.log(set);\\n            set.delete(s[left]);\\n            left++;\\n        }\\n    }\\n\\n    return count;\\n}.`\\n\\nWhy does \"Output Limit Exceeded 987 / 987 testcases passed Last Executed Input Use Testcases s=\"  ?"
                    },
                    {
                        "username": "janis__",
                        "content": "The \"Output Limit Exceeded\" error is likely due to the console.log(set); line, which prints too much output for large test cases; removing or commenting out that line should resolve the issue."
                    },
                    {
                        "username": "lethal-bot",
                        "content": "\"s consists of English letters, digits, symbols and spaces.\" don\\'t ignore this \\uD83D\\uDE36"
                    },
                    {
                        "username": "BlackManFromAfrica",
                        "content": "Runtime Error\\n986 / 987 testcases passed\\n\\nterminate called after throwing an instance of \\'std::bad_alloc\\'\\n  what():  std::bad_alloc\\n\\nwhat\\'s wrong?"
                    },
                    {
                        "username": "janis__",
                        "content": "The error std::bad_alloc indicates that your program tried to allocate memory but failed, typically due to excessive memory usage. This suggests that your solution might be consuming too much memory for certain test cases, and you should optimize or revise your approach to be more memory-efficient."
                    },
                    {
                        "username": "eliyoung4",
                        "content": "class Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        max_length = 0\\n        start = 0\\n        seen = {}\\n\\n        for end in range(len(s)):\\n            if s[end] in seen and start <= seen[s[end]]:\\n                start = seen[s[end]] + 1\\n            else:\\n                max_length = max(max_length, end - start + 1)\\n            seen[s[end]] = end\\n\\n        return max_length"
                    },
                    {
                        "username": "yogesh166",
                        "content": "Use sliding window approach with hash Set for optimized solution\\n"
                    }
                ]
            },
            {
                "id": 1911448,
                "content": [
                    {
                        "username": "rawalprashidha",
                        "content": "Average time to solve this problem?"
                    },
                    {
                        "username": "nayanrabiul",
                        "content": "the confusion arise in 3rd example. when it said \"pwke\" is a subsequence and not a substring.\\nnow, we have to understand that,\\na substring is a contiguous sequence of characters, while a subsequence is a sequence of characters obtained by deleting zero or more characters without changing the order of the remaining characters.\\nTo illustrate the difference between substrings and subsequences, let\\'s consider the string \"abcde\":\\n\\nSubstrings: \"a\", \"b\", \"c\", \"d\", \"e\", \"ab\", \"abc\", \"bc\", \"cde\", etc.\\nSubsequences: \"a\", \"b\", \"c\", \"d\", \"e\", \"ab\", \"ac\", \"ad\", \"ae\", \"bc\", \"bd\", \"be\", \"cd\", \"ce\", \"de\", \"abc\", \"abd\", \"abe\", \"acd\", \"ace\", \"ade\", \"bcd\", \"bce\", \"bde\", \"cde\", etc.\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "A substring is a continuous chunk of characters taken from a string without skipping any, while a subsequence is any sequence of characters from the original string, even if they\\'re not next to each other. For example, in \"abcde\", \"abc\" is a substring, but \"ace\" is a subsequence because it skips \"b\" and \"d\"."
                    },
                    {
                        "username": "s4srivat",
                        "content": "For example 3 (input = \"pwwkew\"), are both \"wke\" and \"kew\" not examples of substrings that both meet the answer criteria? "
                    },
                    {
                        "username": "Shaswat_Pandey",
                        "content": "Correct me if i\\'m wrong , should be the output 5 or 7?\\n\\nInput :  s = \"sluaklj^@\"\\n\\nMy code Output :  5\\n\\nExpected : 7 \\n\\n\\nTry for this test case.          Thanks & Regards"
                    },
                    {
                        "username": "Shaswat_Pandey",
                        "content": "[@meraj05](/meraj05) ohh, yes Thanks"
                    },
                    {
                        "username": "meraj05",
                        "content": "it is 7 coz here substring with maxmium length is \"uaklj^@\"  "
                    },
                    {
                        "username": "procoderer",
                        "content": "first LC medium attempt, SUCCESS (Beats 70.19% runtime, 99.36% memory)\\n\\njust wanted to share lol"
                    },
                    {
                        "username": "yuaroslav29",
                        "content": " `function lengthOfLongestSubstring(s: string): number {\\n\\n    let set = new Set<string>();\\n    let count: number = 0;\\n    let left: number = 0;\\n    let right: number = 0;\\n\\n    if(s === null) {\\n        return 0;\\n    }\\n\\n    while(right < s.length) {\\n        if(!set.has(s[right])) {\\n            set.add(s[right]);\\n            right++;\\n\\n            count = Math.max(count, set.size);\\n        } else {\\n            console.log(set);\\n            set.delete(s[left]);\\n            left++;\\n        }\\n    }\\n\\n    return count;\\n}.`\\n\\nWhy does \"Output Limit Exceeded 987 / 987 testcases passed Last Executed Input Use Testcases s=\"  ?"
                    },
                    {
                        "username": "janis__",
                        "content": "The \"Output Limit Exceeded\" error is likely due to the console.log(set); line, which prints too much output for large test cases; removing or commenting out that line should resolve the issue."
                    },
                    {
                        "username": "lethal-bot",
                        "content": "\"s consists of English letters, digits, symbols and spaces.\" don\\'t ignore this \\uD83D\\uDE36"
                    },
                    {
                        "username": "BlackManFromAfrica",
                        "content": "Runtime Error\\n986 / 987 testcases passed\\n\\nterminate called after throwing an instance of \\'std::bad_alloc\\'\\n  what():  std::bad_alloc\\n\\nwhat\\'s wrong?"
                    },
                    {
                        "username": "janis__",
                        "content": "The error std::bad_alloc indicates that your program tried to allocate memory but failed, typically due to excessive memory usage. This suggests that your solution might be consuming too much memory for certain test cases, and you should optimize or revise your approach to be more memory-efficient."
                    },
                    {
                        "username": "eliyoung4",
                        "content": "class Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        max_length = 0\\n        start = 0\\n        seen = {}\\n\\n        for end in range(len(s)):\\n            if s[end] in seen and start <= seen[s[end]]:\\n                start = seen[s[end]] + 1\\n            else:\\n                max_length = max(max_length, end - start + 1)\\n            seen[s[end]] = end\\n\\n        return max_length"
                    },
                    {
                        "username": "yogesh166",
                        "content": "Use sliding window approach with hash Set for optimized solution\\n"
                    }
                ]
            },
            {
                "id": 1908989,
                "content": [
                    {
                        "username": "rawalprashidha",
                        "content": "Average time to solve this problem?"
                    },
                    {
                        "username": "nayanrabiul",
                        "content": "the confusion arise in 3rd example. when it said \"pwke\" is a subsequence and not a substring.\\nnow, we have to understand that,\\na substring is a contiguous sequence of characters, while a subsequence is a sequence of characters obtained by deleting zero or more characters without changing the order of the remaining characters.\\nTo illustrate the difference between substrings and subsequences, let\\'s consider the string \"abcde\":\\n\\nSubstrings: \"a\", \"b\", \"c\", \"d\", \"e\", \"ab\", \"abc\", \"bc\", \"cde\", etc.\\nSubsequences: \"a\", \"b\", \"c\", \"d\", \"e\", \"ab\", \"ac\", \"ad\", \"ae\", \"bc\", \"bd\", \"be\", \"cd\", \"ce\", \"de\", \"abc\", \"abd\", \"abe\", \"acd\", \"ace\", \"ade\", \"bcd\", \"bce\", \"bde\", \"cde\", etc.\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "A substring is a continuous chunk of characters taken from a string without skipping any, while a subsequence is any sequence of characters from the original string, even if they\\'re not next to each other. For example, in \"abcde\", \"abc\" is a substring, but \"ace\" is a subsequence because it skips \"b\" and \"d\"."
                    },
                    {
                        "username": "s4srivat",
                        "content": "For example 3 (input = \"pwwkew\"), are both \"wke\" and \"kew\" not examples of substrings that both meet the answer criteria? "
                    },
                    {
                        "username": "Shaswat_Pandey",
                        "content": "Correct me if i\\'m wrong , should be the output 5 or 7?\\n\\nInput :  s = \"sluaklj^@\"\\n\\nMy code Output :  5\\n\\nExpected : 7 \\n\\n\\nTry for this test case.          Thanks & Regards"
                    },
                    {
                        "username": "Shaswat_Pandey",
                        "content": "[@meraj05](/meraj05) ohh, yes Thanks"
                    },
                    {
                        "username": "meraj05",
                        "content": "it is 7 coz here substring with maxmium length is \"uaklj^@\"  "
                    },
                    {
                        "username": "procoderer",
                        "content": "first LC medium attempt, SUCCESS (Beats 70.19% runtime, 99.36% memory)\\n\\njust wanted to share lol"
                    },
                    {
                        "username": "yuaroslav29",
                        "content": " `function lengthOfLongestSubstring(s: string): number {\\n\\n    let set = new Set<string>();\\n    let count: number = 0;\\n    let left: number = 0;\\n    let right: number = 0;\\n\\n    if(s === null) {\\n        return 0;\\n    }\\n\\n    while(right < s.length) {\\n        if(!set.has(s[right])) {\\n            set.add(s[right]);\\n            right++;\\n\\n            count = Math.max(count, set.size);\\n        } else {\\n            console.log(set);\\n            set.delete(s[left]);\\n            left++;\\n        }\\n    }\\n\\n    return count;\\n}.`\\n\\nWhy does \"Output Limit Exceeded 987 / 987 testcases passed Last Executed Input Use Testcases s=\"  ?"
                    },
                    {
                        "username": "janis__",
                        "content": "The \"Output Limit Exceeded\" error is likely due to the console.log(set); line, which prints too much output for large test cases; removing or commenting out that line should resolve the issue."
                    },
                    {
                        "username": "lethal-bot",
                        "content": "\"s consists of English letters, digits, symbols and spaces.\" don\\'t ignore this \\uD83D\\uDE36"
                    },
                    {
                        "username": "BlackManFromAfrica",
                        "content": "Runtime Error\\n986 / 987 testcases passed\\n\\nterminate called after throwing an instance of \\'std::bad_alloc\\'\\n  what():  std::bad_alloc\\n\\nwhat\\'s wrong?"
                    },
                    {
                        "username": "janis__",
                        "content": "The error std::bad_alloc indicates that your program tried to allocate memory but failed, typically due to excessive memory usage. This suggests that your solution might be consuming too much memory for certain test cases, and you should optimize or revise your approach to be more memory-efficient."
                    },
                    {
                        "username": "eliyoung4",
                        "content": "class Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        max_length = 0\\n        start = 0\\n        seen = {}\\n\\n        for end in range(len(s)):\\n            if s[end] in seen and start <= seen[s[end]]:\\n                start = seen[s[end]] + 1\\n            else:\\n                max_length = max(max_length, end - start + 1)\\n            seen[s[end]] = end\\n\\n        return max_length"
                    },
                    {
                        "username": "yogesh166",
                        "content": "Use sliding window approach with hash Set for optimized solution\\n"
                    }
                ]
            },
            {
                "id": 1904454,
                "content": [
                    {
                        "username": "rawalprashidha",
                        "content": "Average time to solve this problem?"
                    },
                    {
                        "username": "nayanrabiul",
                        "content": "the confusion arise in 3rd example. when it said \"pwke\" is a subsequence and not a substring.\\nnow, we have to understand that,\\na substring is a contiguous sequence of characters, while a subsequence is a sequence of characters obtained by deleting zero or more characters without changing the order of the remaining characters.\\nTo illustrate the difference between substrings and subsequences, let\\'s consider the string \"abcde\":\\n\\nSubstrings: \"a\", \"b\", \"c\", \"d\", \"e\", \"ab\", \"abc\", \"bc\", \"cde\", etc.\\nSubsequences: \"a\", \"b\", \"c\", \"d\", \"e\", \"ab\", \"ac\", \"ad\", \"ae\", \"bc\", \"bd\", \"be\", \"cd\", \"ce\", \"de\", \"abc\", \"abd\", \"abe\", \"acd\", \"ace\", \"ade\", \"bcd\", \"bce\", \"bde\", \"cde\", etc.\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "A substring is a continuous chunk of characters taken from a string without skipping any, while a subsequence is any sequence of characters from the original string, even if they\\'re not next to each other. For example, in \"abcde\", \"abc\" is a substring, but \"ace\" is a subsequence because it skips \"b\" and \"d\"."
                    },
                    {
                        "username": "s4srivat",
                        "content": "For example 3 (input = \"pwwkew\"), are both \"wke\" and \"kew\" not examples of substrings that both meet the answer criteria? "
                    },
                    {
                        "username": "Shaswat_Pandey",
                        "content": "Correct me if i\\'m wrong , should be the output 5 or 7?\\n\\nInput :  s = \"sluaklj^@\"\\n\\nMy code Output :  5\\n\\nExpected : 7 \\n\\n\\nTry for this test case.          Thanks & Regards"
                    },
                    {
                        "username": "Shaswat_Pandey",
                        "content": "[@meraj05](/meraj05) ohh, yes Thanks"
                    },
                    {
                        "username": "meraj05",
                        "content": "it is 7 coz here substring with maxmium length is \"uaklj^@\"  "
                    },
                    {
                        "username": "procoderer",
                        "content": "first LC medium attempt, SUCCESS (Beats 70.19% runtime, 99.36% memory)\\n\\njust wanted to share lol"
                    },
                    {
                        "username": "yuaroslav29",
                        "content": " `function lengthOfLongestSubstring(s: string): number {\\n\\n    let set = new Set<string>();\\n    let count: number = 0;\\n    let left: number = 0;\\n    let right: number = 0;\\n\\n    if(s === null) {\\n        return 0;\\n    }\\n\\n    while(right < s.length) {\\n        if(!set.has(s[right])) {\\n            set.add(s[right]);\\n            right++;\\n\\n            count = Math.max(count, set.size);\\n        } else {\\n            console.log(set);\\n            set.delete(s[left]);\\n            left++;\\n        }\\n    }\\n\\n    return count;\\n}.`\\n\\nWhy does \"Output Limit Exceeded 987 / 987 testcases passed Last Executed Input Use Testcases s=\"  ?"
                    },
                    {
                        "username": "janis__",
                        "content": "The \"Output Limit Exceeded\" error is likely due to the console.log(set); line, which prints too much output for large test cases; removing or commenting out that line should resolve the issue."
                    },
                    {
                        "username": "lethal-bot",
                        "content": "\"s consists of English letters, digits, symbols and spaces.\" don\\'t ignore this \\uD83D\\uDE36"
                    },
                    {
                        "username": "BlackManFromAfrica",
                        "content": "Runtime Error\\n986 / 987 testcases passed\\n\\nterminate called after throwing an instance of \\'std::bad_alloc\\'\\n  what():  std::bad_alloc\\n\\nwhat\\'s wrong?"
                    },
                    {
                        "username": "janis__",
                        "content": "The error std::bad_alloc indicates that your program tried to allocate memory but failed, typically due to excessive memory usage. This suggests that your solution might be consuming too much memory for certain test cases, and you should optimize or revise your approach to be more memory-efficient."
                    },
                    {
                        "username": "eliyoung4",
                        "content": "class Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        max_length = 0\\n        start = 0\\n        seen = {}\\n\\n        for end in range(len(s)):\\n            if s[end] in seen and start <= seen[s[end]]:\\n                start = seen[s[end]] + 1\\n            else:\\n                max_length = max(max_length, end - start + 1)\\n            seen[s[end]] = end\\n\\n        return max_length"
                    },
                    {
                        "username": "yogesh166",
                        "content": "Use sliding window approach with hash Set for optimized solution\\n"
                    }
                ]
            },
            {
                "id": 1898923,
                "content": [
                    {
                        "username": "rawalprashidha",
                        "content": "Average time to solve this problem?"
                    },
                    {
                        "username": "nayanrabiul",
                        "content": "the confusion arise in 3rd example. when it said \"pwke\" is a subsequence and not a substring.\\nnow, we have to understand that,\\na substring is a contiguous sequence of characters, while a subsequence is a sequence of characters obtained by deleting zero or more characters without changing the order of the remaining characters.\\nTo illustrate the difference between substrings and subsequences, let\\'s consider the string \"abcde\":\\n\\nSubstrings: \"a\", \"b\", \"c\", \"d\", \"e\", \"ab\", \"abc\", \"bc\", \"cde\", etc.\\nSubsequences: \"a\", \"b\", \"c\", \"d\", \"e\", \"ab\", \"ac\", \"ad\", \"ae\", \"bc\", \"bd\", \"be\", \"cd\", \"ce\", \"de\", \"abc\", \"abd\", \"abe\", \"acd\", \"ace\", \"ade\", \"bcd\", \"bce\", \"bde\", \"cde\", etc.\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "A substring is a continuous chunk of characters taken from a string without skipping any, while a subsequence is any sequence of characters from the original string, even if they\\'re not next to each other. For example, in \"abcde\", \"abc\" is a substring, but \"ace\" is a subsequence because it skips \"b\" and \"d\"."
                    },
                    {
                        "username": "s4srivat",
                        "content": "For example 3 (input = \"pwwkew\"), are both \"wke\" and \"kew\" not examples of substrings that both meet the answer criteria? "
                    },
                    {
                        "username": "Shaswat_Pandey",
                        "content": "Correct me if i\\'m wrong , should be the output 5 or 7?\\n\\nInput :  s = \"sluaklj^@\"\\n\\nMy code Output :  5\\n\\nExpected : 7 \\n\\n\\nTry for this test case.          Thanks & Regards"
                    },
                    {
                        "username": "Shaswat_Pandey",
                        "content": "[@meraj05](/meraj05) ohh, yes Thanks"
                    },
                    {
                        "username": "meraj05",
                        "content": "it is 7 coz here substring with maxmium length is \"uaklj^@\"  "
                    },
                    {
                        "username": "procoderer",
                        "content": "first LC medium attempt, SUCCESS (Beats 70.19% runtime, 99.36% memory)\\n\\njust wanted to share lol"
                    },
                    {
                        "username": "yuaroslav29",
                        "content": " `function lengthOfLongestSubstring(s: string): number {\\n\\n    let set = new Set<string>();\\n    let count: number = 0;\\n    let left: number = 0;\\n    let right: number = 0;\\n\\n    if(s === null) {\\n        return 0;\\n    }\\n\\n    while(right < s.length) {\\n        if(!set.has(s[right])) {\\n            set.add(s[right]);\\n            right++;\\n\\n            count = Math.max(count, set.size);\\n        } else {\\n            console.log(set);\\n            set.delete(s[left]);\\n            left++;\\n        }\\n    }\\n\\n    return count;\\n}.`\\n\\nWhy does \"Output Limit Exceeded 987 / 987 testcases passed Last Executed Input Use Testcases s=\"  ?"
                    },
                    {
                        "username": "janis__",
                        "content": "The \"Output Limit Exceeded\" error is likely due to the console.log(set); line, which prints too much output for large test cases; removing or commenting out that line should resolve the issue."
                    },
                    {
                        "username": "lethal-bot",
                        "content": "\"s consists of English letters, digits, symbols and spaces.\" don\\'t ignore this \\uD83D\\uDE36"
                    },
                    {
                        "username": "BlackManFromAfrica",
                        "content": "Runtime Error\\n986 / 987 testcases passed\\n\\nterminate called after throwing an instance of \\'std::bad_alloc\\'\\n  what():  std::bad_alloc\\n\\nwhat\\'s wrong?"
                    },
                    {
                        "username": "janis__",
                        "content": "The error std::bad_alloc indicates that your program tried to allocate memory but failed, typically due to excessive memory usage. This suggests that your solution might be consuming too much memory for certain test cases, and you should optimize or revise your approach to be more memory-efficient."
                    },
                    {
                        "username": "eliyoung4",
                        "content": "class Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        max_length = 0\\n        start = 0\\n        seen = {}\\n\\n        for end in range(len(s)):\\n            if s[end] in seen and start <= seen[s[end]]:\\n                start = seen[s[end]] + 1\\n            else:\\n                max_length = max(max_length, end - start + 1)\\n            seen[s[end]] = end\\n\\n        return max_length"
                    },
                    {
                        "username": "yogesh166",
                        "content": "Use sliding window approach with hash Set for optimized solution\\n"
                    }
                ]
            },
            {
                "id": 1897938,
                "content": [
                    {
                        "username": "rawalprashidha",
                        "content": "Average time to solve this problem?"
                    },
                    {
                        "username": "nayanrabiul",
                        "content": "the confusion arise in 3rd example. when it said \"pwke\" is a subsequence and not a substring.\\nnow, we have to understand that,\\na substring is a contiguous sequence of characters, while a subsequence is a sequence of characters obtained by deleting zero or more characters without changing the order of the remaining characters.\\nTo illustrate the difference between substrings and subsequences, let\\'s consider the string \"abcde\":\\n\\nSubstrings: \"a\", \"b\", \"c\", \"d\", \"e\", \"ab\", \"abc\", \"bc\", \"cde\", etc.\\nSubsequences: \"a\", \"b\", \"c\", \"d\", \"e\", \"ab\", \"ac\", \"ad\", \"ae\", \"bc\", \"bd\", \"be\", \"cd\", \"ce\", \"de\", \"abc\", \"abd\", \"abe\", \"acd\", \"ace\", \"ade\", \"bcd\", \"bce\", \"bde\", \"cde\", etc.\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "A substring is a continuous chunk of characters taken from a string without skipping any, while a subsequence is any sequence of characters from the original string, even if they\\'re not next to each other. For example, in \"abcde\", \"abc\" is a substring, but \"ace\" is a subsequence because it skips \"b\" and \"d\"."
                    },
                    {
                        "username": "s4srivat",
                        "content": "For example 3 (input = \"pwwkew\"), are both \"wke\" and \"kew\" not examples of substrings that both meet the answer criteria? "
                    },
                    {
                        "username": "Shaswat_Pandey",
                        "content": "Correct me if i\\'m wrong , should be the output 5 or 7?\\n\\nInput :  s = \"sluaklj^@\"\\n\\nMy code Output :  5\\n\\nExpected : 7 \\n\\n\\nTry for this test case.          Thanks & Regards"
                    },
                    {
                        "username": "Shaswat_Pandey",
                        "content": "[@meraj05](/meraj05) ohh, yes Thanks"
                    },
                    {
                        "username": "meraj05",
                        "content": "it is 7 coz here substring with maxmium length is \"uaklj^@\"  "
                    },
                    {
                        "username": "procoderer",
                        "content": "first LC medium attempt, SUCCESS (Beats 70.19% runtime, 99.36% memory)\\n\\njust wanted to share lol"
                    },
                    {
                        "username": "yuaroslav29",
                        "content": " `function lengthOfLongestSubstring(s: string): number {\\n\\n    let set = new Set<string>();\\n    let count: number = 0;\\n    let left: number = 0;\\n    let right: number = 0;\\n\\n    if(s === null) {\\n        return 0;\\n    }\\n\\n    while(right < s.length) {\\n        if(!set.has(s[right])) {\\n            set.add(s[right]);\\n            right++;\\n\\n            count = Math.max(count, set.size);\\n        } else {\\n            console.log(set);\\n            set.delete(s[left]);\\n            left++;\\n        }\\n    }\\n\\n    return count;\\n}.`\\n\\nWhy does \"Output Limit Exceeded 987 / 987 testcases passed Last Executed Input Use Testcases s=\"  ?"
                    },
                    {
                        "username": "janis__",
                        "content": "The \"Output Limit Exceeded\" error is likely due to the console.log(set); line, which prints too much output for large test cases; removing or commenting out that line should resolve the issue."
                    },
                    {
                        "username": "lethal-bot",
                        "content": "\"s consists of English letters, digits, symbols and spaces.\" don\\'t ignore this \\uD83D\\uDE36"
                    },
                    {
                        "username": "BlackManFromAfrica",
                        "content": "Runtime Error\\n986 / 987 testcases passed\\n\\nterminate called after throwing an instance of \\'std::bad_alloc\\'\\n  what():  std::bad_alloc\\n\\nwhat\\'s wrong?"
                    },
                    {
                        "username": "janis__",
                        "content": "The error std::bad_alloc indicates that your program tried to allocate memory but failed, typically due to excessive memory usage. This suggests that your solution might be consuming too much memory for certain test cases, and you should optimize or revise your approach to be more memory-efficient."
                    },
                    {
                        "username": "eliyoung4",
                        "content": "class Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        max_length = 0\\n        start = 0\\n        seen = {}\\n\\n        for end in range(len(s)):\\n            if s[end] in seen and start <= seen[s[end]]:\\n                start = seen[s[end]] + 1\\n            else:\\n                max_length = max(max_length, end - start + 1)\\n            seen[s[end]] = end\\n\\n        return max_length"
                    },
                    {
                        "username": "yogesh166",
                        "content": "Use sliding window approach with hash Set for optimized solution\\n"
                    }
                ]
            },
            {
                "id": 1883416,
                "content": [
                    {
                        "username": "rawalprashidha",
                        "content": "Average time to solve this problem?"
                    },
                    {
                        "username": "nayanrabiul",
                        "content": "the confusion arise in 3rd example. when it said \"pwke\" is a subsequence and not a substring.\\nnow, we have to understand that,\\na substring is a contiguous sequence of characters, while a subsequence is a sequence of characters obtained by deleting zero or more characters without changing the order of the remaining characters.\\nTo illustrate the difference between substrings and subsequences, let\\'s consider the string \"abcde\":\\n\\nSubstrings: \"a\", \"b\", \"c\", \"d\", \"e\", \"ab\", \"abc\", \"bc\", \"cde\", etc.\\nSubsequences: \"a\", \"b\", \"c\", \"d\", \"e\", \"ab\", \"ac\", \"ad\", \"ae\", \"bc\", \"bd\", \"be\", \"cd\", \"ce\", \"de\", \"abc\", \"abd\", \"abe\", \"acd\", \"ace\", \"ade\", \"bcd\", \"bce\", \"bde\", \"cde\", etc.\\n"
                    },
                    {
                        "username": "janis__",
                        "content": "A substring is a continuous chunk of characters taken from a string without skipping any, while a subsequence is any sequence of characters from the original string, even if they\\'re not next to each other. For example, in \"abcde\", \"abc\" is a substring, but \"ace\" is a subsequence because it skips \"b\" and \"d\"."
                    },
                    {
                        "username": "s4srivat",
                        "content": "For example 3 (input = \"pwwkew\"), are both \"wke\" and \"kew\" not examples of substrings that both meet the answer criteria? "
                    },
                    {
                        "username": "Shaswat_Pandey",
                        "content": "Correct me if i\\'m wrong , should be the output 5 or 7?\\n\\nInput :  s = \"sluaklj^@\"\\n\\nMy code Output :  5\\n\\nExpected : 7 \\n\\n\\nTry for this test case.          Thanks & Regards"
                    },
                    {
                        "username": "Shaswat_Pandey",
                        "content": "[@meraj05](/meraj05) ohh, yes Thanks"
                    },
                    {
                        "username": "meraj05",
                        "content": "it is 7 coz here substring with maxmium length is \"uaklj^@\"  "
                    },
                    {
                        "username": "procoderer",
                        "content": "first LC medium attempt, SUCCESS (Beats 70.19% runtime, 99.36% memory)\\n\\njust wanted to share lol"
                    },
                    {
                        "username": "yuaroslav29",
                        "content": " `function lengthOfLongestSubstring(s: string): number {\\n\\n    let set = new Set<string>();\\n    let count: number = 0;\\n    let left: number = 0;\\n    let right: number = 0;\\n\\n    if(s === null) {\\n        return 0;\\n    }\\n\\n    while(right < s.length) {\\n        if(!set.has(s[right])) {\\n            set.add(s[right]);\\n            right++;\\n\\n            count = Math.max(count, set.size);\\n        } else {\\n            console.log(set);\\n            set.delete(s[left]);\\n            left++;\\n        }\\n    }\\n\\n    return count;\\n}.`\\n\\nWhy does \"Output Limit Exceeded 987 / 987 testcases passed Last Executed Input Use Testcases s=\"  ?"
                    },
                    {
                        "username": "janis__",
                        "content": "The \"Output Limit Exceeded\" error is likely due to the console.log(set); line, which prints too much output for large test cases; removing or commenting out that line should resolve the issue."
                    },
                    {
                        "username": "lethal-bot",
                        "content": "\"s consists of English letters, digits, symbols and spaces.\" don\\'t ignore this \\uD83D\\uDE36"
                    },
                    {
                        "username": "BlackManFromAfrica",
                        "content": "Runtime Error\\n986 / 987 testcases passed\\n\\nterminate called after throwing an instance of \\'std::bad_alloc\\'\\n  what():  std::bad_alloc\\n\\nwhat\\'s wrong?"
                    },
                    {
                        "username": "janis__",
                        "content": "The error std::bad_alloc indicates that your program tried to allocate memory but failed, typically due to excessive memory usage. This suggests that your solution might be consuming too much memory for certain test cases, and you should optimize or revise your approach to be more memory-efficient."
                    },
                    {
                        "username": "eliyoung4",
                        "content": "class Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        max_length = 0\\n        start = 0\\n        seen = {}\\n\\n        for end in range(len(s)):\\n            if s[end] in seen and start <= seen[s[end]]:\\n                start = seen[s[end]] + 1\\n            else:\\n                max_length = max(max_length, end - start + 1)\\n            seen[s[end]] = end\\n\\n        return max_length"
                    },
                    {
                        "username": "yogesh166",
                        "content": "Use sliding window approach with hash Set for optimized solution\\n"
                    }
                ]
            },
            {
                "id": 1872342,
                "content": [
                    {
                        "username": "Eragpm",
                        "content": "can someone tell me why with empty String the solution is 1 that feels kinda counterintuative?"
                    },
                    {
                        "username": "janis__",
                        "content": "The solution for an empty string should be 0, not 1, as there are no characters in the string to form a substring."
                    },
                    {
                        "username": "lionariman",
                        "content": "Why this test case expected 5 instead of 4?\\n\\nInput\\ns = \"anviaj\"\\n\\nOutput 4\\nExpected 5\\n\\nI really do not understand..."
                    },
                    {
                        "username": "swagiuli",
                        "content": "\"nviaj\" is the longest substring without repeating characters."
                    },
                    {
                        "username": "teckyshubham",
                        "content": " `int ans = 0;\\n    int[] count = new int[128];\\n\\n    for (int l = 0, r = 0; r < s.length(); ++r) {\\n      ++count[s.charAt(r)];\\n      while (count[s.charAt(r)] > 1)\\n        --count[s.charAt(l++)];\\n      ans = Math.max(ans, r - l + 1);\\n    }\\n\\n    return ans;`"
                    },
                    {
                        "username": "gggeh",
                        "content": "hi everyone, I\\'m not sure why I get this error:\\nTypeError: None is not valid value for the expected return type integer\\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\\nTypeError: \\'<\\' not supported between instances of \\'int\\' and \\'NoneType\\'\\n\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        seen = set()\\n        longest_string = \"\"\\n\\n        for i in range(len(s)):\\n            if s[i] in seen:\\n                print(len(longest_string))\\n                break\\n            else:\\n                longest_string += s[i]\\n                seen.add(s[i])\\n\\nAny advice would be greatly appreciated!"
                    },
                    {
                        "username": "janis__",
                        "content": "Your function doesn\\'t return any value when the loop completes, which is why you\\'re getting a TypeError. Ensure you return len(longest_string) at the end of your function to provide the expected integer output."
                    },
                    {
                        "username": "shriya_03",
                        "content": "instead of print give return\\n"
                    },
                    {
                        "username": "SeUz751",
                        "content": "Excuse me in the third example shouldnt the output be 4 ? \"pwwkew\" -> we have 4 letters unique ... p,w,k,e. Have I misunderstood something ?"
                    },
                    {
                        "username": "swagiuli",
                        "content": "you got it wrong, the task is to find the longest substring without repeating characters.\\na substring is a string that derives from another string. for example 3 the output is 3 because the longest substring is \"wke\". not \"pwke\" because there is an additional \"w\" between \"p\" and \"wke\"."
                    },
                    {
                        "username": "aliarsenal30",
                        "content": "I wrote the following code:\\n\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        count = 0\\n        chars = \\'\\'\\n        for i in range(len(s)):\\n            if s[i] not in chars:\\n                count += 1\\n                chars += s[i]\\n            else:\\n                break\\n        print(count)\\n\\nIt\\'s giving me runtime error on the leetcode IDE, however works fine on VScode. What could be the problem?"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "can we do it using stack ???"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "best question to get a hang on strings in cpp"
                    },
                    {
                        "username": "KillerMaker721",
                        "content": "I have a solution that works fine in VS but when i run it on the online editor fails a testcase, then i take the testcase and run it on VS and it works fine again :(\\n\\nHere is my code:\\n\\n `#include <iostream>\\n#include<unordered_set>\\n#include<algorithm>\\n\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(std::string s) \\n    {\\n        std::unordered_set<char> lu_substr;\\n\\n        auto element_collided_with = lu_substr.begin();\\n        int max_set_size = 0;\\n\\n        for (int i = 0; i < s.size(); i++) \\n        {\\n            if (!lu_substr.insert(s[i]).second)\\n            {\\n                element_collided_with = lu_substr.find(s[i]);\\n                max_set_size = max_set_size >= lu_substr.size() ? max_set_size : lu_substr.size();\\n                lu_substr.erase(lu_substr.begin(), element_collided_with);\\n            }\\n        }\\n\\n        return max_set_size >= lu_substr.size() ? max_set_size : lu_substr.size();\\n    }\\n};`"
                    },
                    {
                        "username": "ezinercan",
                        "content": "Question is not clear and given examples have mistakes. This questions doesn\\'t have a real life application anywhere so, doesn\\'t look like anything I have seen before. "
                    }
                ]
            },
            {
                "id": 1864576,
                "content": [
                    {
                        "username": "Eragpm",
                        "content": "can someone tell me why with empty String the solution is 1 that feels kinda counterintuative?"
                    },
                    {
                        "username": "janis__",
                        "content": "The solution for an empty string should be 0, not 1, as there are no characters in the string to form a substring."
                    },
                    {
                        "username": "lionariman",
                        "content": "Why this test case expected 5 instead of 4?\\n\\nInput\\ns = \"anviaj\"\\n\\nOutput 4\\nExpected 5\\n\\nI really do not understand..."
                    },
                    {
                        "username": "swagiuli",
                        "content": "\"nviaj\" is the longest substring without repeating characters."
                    },
                    {
                        "username": "teckyshubham",
                        "content": " `int ans = 0;\\n    int[] count = new int[128];\\n\\n    for (int l = 0, r = 0; r < s.length(); ++r) {\\n      ++count[s.charAt(r)];\\n      while (count[s.charAt(r)] > 1)\\n        --count[s.charAt(l++)];\\n      ans = Math.max(ans, r - l + 1);\\n    }\\n\\n    return ans;`"
                    },
                    {
                        "username": "gggeh",
                        "content": "hi everyone, I\\'m not sure why I get this error:\\nTypeError: None is not valid value for the expected return type integer\\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\\nTypeError: \\'<\\' not supported between instances of \\'int\\' and \\'NoneType\\'\\n\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        seen = set()\\n        longest_string = \"\"\\n\\n        for i in range(len(s)):\\n            if s[i] in seen:\\n                print(len(longest_string))\\n                break\\n            else:\\n                longest_string += s[i]\\n                seen.add(s[i])\\n\\nAny advice would be greatly appreciated!"
                    },
                    {
                        "username": "janis__",
                        "content": "Your function doesn\\'t return any value when the loop completes, which is why you\\'re getting a TypeError. Ensure you return len(longest_string) at the end of your function to provide the expected integer output."
                    },
                    {
                        "username": "shriya_03",
                        "content": "instead of print give return\\n"
                    },
                    {
                        "username": "SeUz751",
                        "content": "Excuse me in the third example shouldnt the output be 4 ? \"pwwkew\" -> we have 4 letters unique ... p,w,k,e. Have I misunderstood something ?"
                    },
                    {
                        "username": "swagiuli",
                        "content": "you got it wrong, the task is to find the longest substring without repeating characters.\\na substring is a string that derives from another string. for example 3 the output is 3 because the longest substring is \"wke\". not \"pwke\" because there is an additional \"w\" between \"p\" and \"wke\"."
                    },
                    {
                        "username": "aliarsenal30",
                        "content": "I wrote the following code:\\n\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        count = 0\\n        chars = \\'\\'\\n        for i in range(len(s)):\\n            if s[i] not in chars:\\n                count += 1\\n                chars += s[i]\\n            else:\\n                break\\n        print(count)\\n\\nIt\\'s giving me runtime error on the leetcode IDE, however works fine on VScode. What could be the problem?"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "can we do it using stack ???"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "best question to get a hang on strings in cpp"
                    },
                    {
                        "username": "KillerMaker721",
                        "content": "I have a solution that works fine in VS but when i run it on the online editor fails a testcase, then i take the testcase and run it on VS and it works fine again :(\\n\\nHere is my code:\\n\\n `#include <iostream>\\n#include<unordered_set>\\n#include<algorithm>\\n\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(std::string s) \\n    {\\n        std::unordered_set<char> lu_substr;\\n\\n        auto element_collided_with = lu_substr.begin();\\n        int max_set_size = 0;\\n\\n        for (int i = 0; i < s.size(); i++) \\n        {\\n            if (!lu_substr.insert(s[i]).second)\\n            {\\n                element_collided_with = lu_substr.find(s[i]);\\n                max_set_size = max_set_size >= lu_substr.size() ? max_set_size : lu_substr.size();\\n                lu_substr.erase(lu_substr.begin(), element_collided_with);\\n            }\\n        }\\n\\n        return max_set_size >= lu_substr.size() ? max_set_size : lu_substr.size();\\n    }\\n};`"
                    },
                    {
                        "username": "ezinercan",
                        "content": "Question is not clear and given examples have mistakes. This questions doesn\\'t have a real life application anywhere so, doesn\\'t look like anything I have seen before. "
                    }
                ]
            },
            {
                "id": 1862936,
                "content": [
                    {
                        "username": "Eragpm",
                        "content": "can someone tell me why with empty String the solution is 1 that feels kinda counterintuative?"
                    },
                    {
                        "username": "janis__",
                        "content": "The solution for an empty string should be 0, not 1, as there are no characters in the string to form a substring."
                    },
                    {
                        "username": "lionariman",
                        "content": "Why this test case expected 5 instead of 4?\\n\\nInput\\ns = \"anviaj\"\\n\\nOutput 4\\nExpected 5\\n\\nI really do not understand..."
                    },
                    {
                        "username": "swagiuli",
                        "content": "\"nviaj\" is the longest substring without repeating characters."
                    },
                    {
                        "username": "teckyshubham",
                        "content": " `int ans = 0;\\n    int[] count = new int[128];\\n\\n    for (int l = 0, r = 0; r < s.length(); ++r) {\\n      ++count[s.charAt(r)];\\n      while (count[s.charAt(r)] > 1)\\n        --count[s.charAt(l++)];\\n      ans = Math.max(ans, r - l + 1);\\n    }\\n\\n    return ans;`"
                    },
                    {
                        "username": "gggeh",
                        "content": "hi everyone, I\\'m not sure why I get this error:\\nTypeError: None is not valid value for the expected return type integer\\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\\nTypeError: \\'<\\' not supported between instances of \\'int\\' and \\'NoneType\\'\\n\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        seen = set()\\n        longest_string = \"\"\\n\\n        for i in range(len(s)):\\n            if s[i] in seen:\\n                print(len(longest_string))\\n                break\\n            else:\\n                longest_string += s[i]\\n                seen.add(s[i])\\n\\nAny advice would be greatly appreciated!"
                    },
                    {
                        "username": "janis__",
                        "content": "Your function doesn\\'t return any value when the loop completes, which is why you\\'re getting a TypeError. Ensure you return len(longest_string) at the end of your function to provide the expected integer output."
                    },
                    {
                        "username": "shriya_03",
                        "content": "instead of print give return\\n"
                    },
                    {
                        "username": "SeUz751",
                        "content": "Excuse me in the third example shouldnt the output be 4 ? \"pwwkew\" -> we have 4 letters unique ... p,w,k,e. Have I misunderstood something ?"
                    },
                    {
                        "username": "swagiuli",
                        "content": "you got it wrong, the task is to find the longest substring without repeating characters.\\na substring is a string that derives from another string. for example 3 the output is 3 because the longest substring is \"wke\". not \"pwke\" because there is an additional \"w\" between \"p\" and \"wke\"."
                    },
                    {
                        "username": "aliarsenal30",
                        "content": "I wrote the following code:\\n\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        count = 0\\n        chars = \\'\\'\\n        for i in range(len(s)):\\n            if s[i] not in chars:\\n                count += 1\\n                chars += s[i]\\n            else:\\n                break\\n        print(count)\\n\\nIt\\'s giving me runtime error on the leetcode IDE, however works fine on VScode. What could be the problem?"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "can we do it using stack ???"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "best question to get a hang on strings in cpp"
                    },
                    {
                        "username": "KillerMaker721",
                        "content": "I have a solution that works fine in VS but when i run it on the online editor fails a testcase, then i take the testcase and run it on VS and it works fine again :(\\n\\nHere is my code:\\n\\n `#include <iostream>\\n#include<unordered_set>\\n#include<algorithm>\\n\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(std::string s) \\n    {\\n        std::unordered_set<char> lu_substr;\\n\\n        auto element_collided_with = lu_substr.begin();\\n        int max_set_size = 0;\\n\\n        for (int i = 0; i < s.size(); i++) \\n        {\\n            if (!lu_substr.insert(s[i]).second)\\n            {\\n                element_collided_with = lu_substr.find(s[i]);\\n                max_set_size = max_set_size >= lu_substr.size() ? max_set_size : lu_substr.size();\\n                lu_substr.erase(lu_substr.begin(), element_collided_with);\\n            }\\n        }\\n\\n        return max_set_size >= lu_substr.size() ? max_set_size : lu_substr.size();\\n    }\\n};`"
                    },
                    {
                        "username": "ezinercan",
                        "content": "Question is not clear and given examples have mistakes. This questions doesn\\'t have a real life application anywhere so, doesn\\'t look like anything I have seen before. "
                    }
                ]
            },
            {
                "id": 1862231,
                "content": [
                    {
                        "username": "Eragpm",
                        "content": "can someone tell me why with empty String the solution is 1 that feels kinda counterintuative?"
                    },
                    {
                        "username": "janis__",
                        "content": "The solution for an empty string should be 0, not 1, as there are no characters in the string to form a substring."
                    },
                    {
                        "username": "lionariman",
                        "content": "Why this test case expected 5 instead of 4?\\n\\nInput\\ns = \"anviaj\"\\n\\nOutput 4\\nExpected 5\\n\\nI really do not understand..."
                    },
                    {
                        "username": "swagiuli",
                        "content": "\"nviaj\" is the longest substring without repeating characters."
                    },
                    {
                        "username": "teckyshubham",
                        "content": " `int ans = 0;\\n    int[] count = new int[128];\\n\\n    for (int l = 0, r = 0; r < s.length(); ++r) {\\n      ++count[s.charAt(r)];\\n      while (count[s.charAt(r)] > 1)\\n        --count[s.charAt(l++)];\\n      ans = Math.max(ans, r - l + 1);\\n    }\\n\\n    return ans;`"
                    },
                    {
                        "username": "gggeh",
                        "content": "hi everyone, I\\'m not sure why I get this error:\\nTypeError: None is not valid value for the expected return type integer\\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\\nTypeError: \\'<\\' not supported between instances of \\'int\\' and \\'NoneType\\'\\n\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        seen = set()\\n        longest_string = \"\"\\n\\n        for i in range(len(s)):\\n            if s[i] in seen:\\n                print(len(longest_string))\\n                break\\n            else:\\n                longest_string += s[i]\\n                seen.add(s[i])\\n\\nAny advice would be greatly appreciated!"
                    },
                    {
                        "username": "janis__",
                        "content": "Your function doesn\\'t return any value when the loop completes, which is why you\\'re getting a TypeError. Ensure you return len(longest_string) at the end of your function to provide the expected integer output."
                    },
                    {
                        "username": "shriya_03",
                        "content": "instead of print give return\\n"
                    },
                    {
                        "username": "SeUz751",
                        "content": "Excuse me in the third example shouldnt the output be 4 ? \"pwwkew\" -> we have 4 letters unique ... p,w,k,e. Have I misunderstood something ?"
                    },
                    {
                        "username": "swagiuli",
                        "content": "you got it wrong, the task is to find the longest substring without repeating characters.\\na substring is a string that derives from another string. for example 3 the output is 3 because the longest substring is \"wke\". not \"pwke\" because there is an additional \"w\" between \"p\" and \"wke\"."
                    },
                    {
                        "username": "aliarsenal30",
                        "content": "I wrote the following code:\\n\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        count = 0\\n        chars = \\'\\'\\n        for i in range(len(s)):\\n            if s[i] not in chars:\\n                count += 1\\n                chars += s[i]\\n            else:\\n                break\\n        print(count)\\n\\nIt\\'s giving me runtime error on the leetcode IDE, however works fine on VScode. What could be the problem?"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "can we do it using stack ???"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "best question to get a hang on strings in cpp"
                    },
                    {
                        "username": "KillerMaker721",
                        "content": "I have a solution that works fine in VS but when i run it on the online editor fails a testcase, then i take the testcase and run it on VS and it works fine again :(\\n\\nHere is my code:\\n\\n `#include <iostream>\\n#include<unordered_set>\\n#include<algorithm>\\n\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(std::string s) \\n    {\\n        std::unordered_set<char> lu_substr;\\n\\n        auto element_collided_with = lu_substr.begin();\\n        int max_set_size = 0;\\n\\n        for (int i = 0; i < s.size(); i++) \\n        {\\n            if (!lu_substr.insert(s[i]).second)\\n            {\\n                element_collided_with = lu_substr.find(s[i]);\\n                max_set_size = max_set_size >= lu_substr.size() ? max_set_size : lu_substr.size();\\n                lu_substr.erase(lu_substr.begin(), element_collided_with);\\n            }\\n        }\\n\\n        return max_set_size >= lu_substr.size() ? max_set_size : lu_substr.size();\\n    }\\n};`"
                    },
                    {
                        "username": "ezinercan",
                        "content": "Question is not clear and given examples have mistakes. This questions doesn\\'t have a real life application anywhere so, doesn\\'t look like anything I have seen before. "
                    }
                ]
            },
            {
                "id": 1855504,
                "content": [
                    {
                        "username": "Eragpm",
                        "content": "can someone tell me why with empty String the solution is 1 that feels kinda counterintuative?"
                    },
                    {
                        "username": "janis__",
                        "content": "The solution for an empty string should be 0, not 1, as there are no characters in the string to form a substring."
                    },
                    {
                        "username": "lionariman",
                        "content": "Why this test case expected 5 instead of 4?\\n\\nInput\\ns = \"anviaj\"\\n\\nOutput 4\\nExpected 5\\n\\nI really do not understand..."
                    },
                    {
                        "username": "swagiuli",
                        "content": "\"nviaj\" is the longest substring without repeating characters."
                    },
                    {
                        "username": "teckyshubham",
                        "content": " `int ans = 0;\\n    int[] count = new int[128];\\n\\n    for (int l = 0, r = 0; r < s.length(); ++r) {\\n      ++count[s.charAt(r)];\\n      while (count[s.charAt(r)] > 1)\\n        --count[s.charAt(l++)];\\n      ans = Math.max(ans, r - l + 1);\\n    }\\n\\n    return ans;`"
                    },
                    {
                        "username": "gggeh",
                        "content": "hi everyone, I\\'m not sure why I get this error:\\nTypeError: None is not valid value for the expected return type integer\\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\\nTypeError: \\'<\\' not supported between instances of \\'int\\' and \\'NoneType\\'\\n\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        seen = set()\\n        longest_string = \"\"\\n\\n        for i in range(len(s)):\\n            if s[i] in seen:\\n                print(len(longest_string))\\n                break\\n            else:\\n                longest_string += s[i]\\n                seen.add(s[i])\\n\\nAny advice would be greatly appreciated!"
                    },
                    {
                        "username": "janis__",
                        "content": "Your function doesn\\'t return any value when the loop completes, which is why you\\'re getting a TypeError. Ensure you return len(longest_string) at the end of your function to provide the expected integer output."
                    },
                    {
                        "username": "shriya_03",
                        "content": "instead of print give return\\n"
                    },
                    {
                        "username": "SeUz751",
                        "content": "Excuse me in the third example shouldnt the output be 4 ? \"pwwkew\" -> we have 4 letters unique ... p,w,k,e. Have I misunderstood something ?"
                    },
                    {
                        "username": "swagiuli",
                        "content": "you got it wrong, the task is to find the longest substring without repeating characters.\\na substring is a string that derives from another string. for example 3 the output is 3 because the longest substring is \"wke\". not \"pwke\" because there is an additional \"w\" between \"p\" and \"wke\"."
                    },
                    {
                        "username": "aliarsenal30",
                        "content": "I wrote the following code:\\n\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        count = 0\\n        chars = \\'\\'\\n        for i in range(len(s)):\\n            if s[i] not in chars:\\n                count += 1\\n                chars += s[i]\\n            else:\\n                break\\n        print(count)\\n\\nIt\\'s giving me runtime error on the leetcode IDE, however works fine on VScode. What could be the problem?"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "can we do it using stack ???"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "best question to get a hang on strings in cpp"
                    },
                    {
                        "username": "KillerMaker721",
                        "content": "I have a solution that works fine in VS but when i run it on the online editor fails a testcase, then i take the testcase and run it on VS and it works fine again :(\\n\\nHere is my code:\\n\\n `#include <iostream>\\n#include<unordered_set>\\n#include<algorithm>\\n\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(std::string s) \\n    {\\n        std::unordered_set<char> lu_substr;\\n\\n        auto element_collided_with = lu_substr.begin();\\n        int max_set_size = 0;\\n\\n        for (int i = 0; i < s.size(); i++) \\n        {\\n            if (!lu_substr.insert(s[i]).second)\\n            {\\n                element_collided_with = lu_substr.find(s[i]);\\n                max_set_size = max_set_size >= lu_substr.size() ? max_set_size : lu_substr.size();\\n                lu_substr.erase(lu_substr.begin(), element_collided_with);\\n            }\\n        }\\n\\n        return max_set_size >= lu_substr.size() ? max_set_size : lu_substr.size();\\n    }\\n};`"
                    },
                    {
                        "username": "ezinercan",
                        "content": "Question is not clear and given examples have mistakes. This questions doesn\\'t have a real life application anywhere so, doesn\\'t look like anything I have seen before. "
                    }
                ]
            },
            {
                "id": 1855083,
                "content": [
                    {
                        "username": "Eragpm",
                        "content": "can someone tell me why with empty String the solution is 1 that feels kinda counterintuative?"
                    },
                    {
                        "username": "janis__",
                        "content": "The solution for an empty string should be 0, not 1, as there are no characters in the string to form a substring."
                    },
                    {
                        "username": "lionariman",
                        "content": "Why this test case expected 5 instead of 4?\\n\\nInput\\ns = \"anviaj\"\\n\\nOutput 4\\nExpected 5\\n\\nI really do not understand..."
                    },
                    {
                        "username": "swagiuli",
                        "content": "\"nviaj\" is the longest substring without repeating characters."
                    },
                    {
                        "username": "teckyshubham",
                        "content": " `int ans = 0;\\n    int[] count = new int[128];\\n\\n    for (int l = 0, r = 0; r < s.length(); ++r) {\\n      ++count[s.charAt(r)];\\n      while (count[s.charAt(r)] > 1)\\n        --count[s.charAt(l++)];\\n      ans = Math.max(ans, r - l + 1);\\n    }\\n\\n    return ans;`"
                    },
                    {
                        "username": "gggeh",
                        "content": "hi everyone, I\\'m not sure why I get this error:\\nTypeError: None is not valid value for the expected return type integer\\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\\nTypeError: \\'<\\' not supported between instances of \\'int\\' and \\'NoneType\\'\\n\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        seen = set()\\n        longest_string = \"\"\\n\\n        for i in range(len(s)):\\n            if s[i] in seen:\\n                print(len(longest_string))\\n                break\\n            else:\\n                longest_string += s[i]\\n                seen.add(s[i])\\n\\nAny advice would be greatly appreciated!"
                    },
                    {
                        "username": "janis__",
                        "content": "Your function doesn\\'t return any value when the loop completes, which is why you\\'re getting a TypeError. Ensure you return len(longest_string) at the end of your function to provide the expected integer output."
                    },
                    {
                        "username": "shriya_03",
                        "content": "instead of print give return\\n"
                    },
                    {
                        "username": "SeUz751",
                        "content": "Excuse me in the third example shouldnt the output be 4 ? \"pwwkew\" -> we have 4 letters unique ... p,w,k,e. Have I misunderstood something ?"
                    },
                    {
                        "username": "swagiuli",
                        "content": "you got it wrong, the task is to find the longest substring without repeating characters.\\na substring is a string that derives from another string. for example 3 the output is 3 because the longest substring is \"wke\". not \"pwke\" because there is an additional \"w\" between \"p\" and \"wke\"."
                    },
                    {
                        "username": "aliarsenal30",
                        "content": "I wrote the following code:\\n\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        count = 0\\n        chars = \\'\\'\\n        for i in range(len(s)):\\n            if s[i] not in chars:\\n                count += 1\\n                chars += s[i]\\n            else:\\n                break\\n        print(count)\\n\\nIt\\'s giving me runtime error on the leetcode IDE, however works fine on VScode. What could be the problem?"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "can we do it using stack ???"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "best question to get a hang on strings in cpp"
                    },
                    {
                        "username": "KillerMaker721",
                        "content": "I have a solution that works fine in VS but when i run it on the online editor fails a testcase, then i take the testcase and run it on VS and it works fine again :(\\n\\nHere is my code:\\n\\n `#include <iostream>\\n#include<unordered_set>\\n#include<algorithm>\\n\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(std::string s) \\n    {\\n        std::unordered_set<char> lu_substr;\\n\\n        auto element_collided_with = lu_substr.begin();\\n        int max_set_size = 0;\\n\\n        for (int i = 0; i < s.size(); i++) \\n        {\\n            if (!lu_substr.insert(s[i]).second)\\n            {\\n                element_collided_with = lu_substr.find(s[i]);\\n                max_set_size = max_set_size >= lu_substr.size() ? max_set_size : lu_substr.size();\\n                lu_substr.erase(lu_substr.begin(), element_collided_with);\\n            }\\n        }\\n\\n        return max_set_size >= lu_substr.size() ? max_set_size : lu_substr.size();\\n    }\\n};`"
                    },
                    {
                        "username": "ezinercan",
                        "content": "Question is not clear and given examples have mistakes. This questions doesn\\'t have a real life application anywhere so, doesn\\'t look like anything I have seen before. "
                    }
                ]
            },
            {
                "id": 1854718,
                "content": [
                    {
                        "username": "Eragpm",
                        "content": "can someone tell me why with empty String the solution is 1 that feels kinda counterintuative?"
                    },
                    {
                        "username": "janis__",
                        "content": "The solution for an empty string should be 0, not 1, as there are no characters in the string to form a substring."
                    },
                    {
                        "username": "lionariman",
                        "content": "Why this test case expected 5 instead of 4?\\n\\nInput\\ns = \"anviaj\"\\n\\nOutput 4\\nExpected 5\\n\\nI really do not understand..."
                    },
                    {
                        "username": "swagiuli",
                        "content": "\"nviaj\" is the longest substring without repeating characters."
                    },
                    {
                        "username": "teckyshubham",
                        "content": " `int ans = 0;\\n    int[] count = new int[128];\\n\\n    for (int l = 0, r = 0; r < s.length(); ++r) {\\n      ++count[s.charAt(r)];\\n      while (count[s.charAt(r)] > 1)\\n        --count[s.charAt(l++)];\\n      ans = Math.max(ans, r - l + 1);\\n    }\\n\\n    return ans;`"
                    },
                    {
                        "username": "gggeh",
                        "content": "hi everyone, I\\'m not sure why I get this error:\\nTypeError: None is not valid value for the expected return type integer\\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\\nTypeError: \\'<\\' not supported between instances of \\'int\\' and \\'NoneType\\'\\n\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        seen = set()\\n        longest_string = \"\"\\n\\n        for i in range(len(s)):\\n            if s[i] in seen:\\n                print(len(longest_string))\\n                break\\n            else:\\n                longest_string += s[i]\\n                seen.add(s[i])\\n\\nAny advice would be greatly appreciated!"
                    },
                    {
                        "username": "janis__",
                        "content": "Your function doesn\\'t return any value when the loop completes, which is why you\\'re getting a TypeError. Ensure you return len(longest_string) at the end of your function to provide the expected integer output."
                    },
                    {
                        "username": "shriya_03",
                        "content": "instead of print give return\\n"
                    },
                    {
                        "username": "SeUz751",
                        "content": "Excuse me in the third example shouldnt the output be 4 ? \"pwwkew\" -> we have 4 letters unique ... p,w,k,e. Have I misunderstood something ?"
                    },
                    {
                        "username": "swagiuli",
                        "content": "you got it wrong, the task is to find the longest substring without repeating characters.\\na substring is a string that derives from another string. for example 3 the output is 3 because the longest substring is \"wke\". not \"pwke\" because there is an additional \"w\" between \"p\" and \"wke\"."
                    },
                    {
                        "username": "aliarsenal30",
                        "content": "I wrote the following code:\\n\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        count = 0\\n        chars = \\'\\'\\n        for i in range(len(s)):\\n            if s[i] not in chars:\\n                count += 1\\n                chars += s[i]\\n            else:\\n                break\\n        print(count)\\n\\nIt\\'s giving me runtime error on the leetcode IDE, however works fine on VScode. What could be the problem?"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "can we do it using stack ???"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "best question to get a hang on strings in cpp"
                    },
                    {
                        "username": "KillerMaker721",
                        "content": "I have a solution that works fine in VS but when i run it on the online editor fails a testcase, then i take the testcase and run it on VS and it works fine again :(\\n\\nHere is my code:\\n\\n `#include <iostream>\\n#include<unordered_set>\\n#include<algorithm>\\n\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(std::string s) \\n    {\\n        std::unordered_set<char> lu_substr;\\n\\n        auto element_collided_with = lu_substr.begin();\\n        int max_set_size = 0;\\n\\n        for (int i = 0; i < s.size(); i++) \\n        {\\n            if (!lu_substr.insert(s[i]).second)\\n            {\\n                element_collided_with = lu_substr.find(s[i]);\\n                max_set_size = max_set_size >= lu_substr.size() ? max_set_size : lu_substr.size();\\n                lu_substr.erase(lu_substr.begin(), element_collided_with);\\n            }\\n        }\\n\\n        return max_set_size >= lu_substr.size() ? max_set_size : lu_substr.size();\\n    }\\n};`"
                    },
                    {
                        "username": "ezinercan",
                        "content": "Question is not clear and given examples have mistakes. This questions doesn\\'t have a real life application anywhere so, doesn\\'t look like anything I have seen before. "
                    }
                ]
            },
            {
                "id": 1854705,
                "content": [
                    {
                        "username": "Eragpm",
                        "content": "can someone tell me why with empty String the solution is 1 that feels kinda counterintuative?"
                    },
                    {
                        "username": "janis__",
                        "content": "The solution for an empty string should be 0, not 1, as there are no characters in the string to form a substring."
                    },
                    {
                        "username": "lionariman",
                        "content": "Why this test case expected 5 instead of 4?\\n\\nInput\\ns = \"anviaj\"\\n\\nOutput 4\\nExpected 5\\n\\nI really do not understand..."
                    },
                    {
                        "username": "swagiuli",
                        "content": "\"nviaj\" is the longest substring without repeating characters."
                    },
                    {
                        "username": "teckyshubham",
                        "content": " `int ans = 0;\\n    int[] count = new int[128];\\n\\n    for (int l = 0, r = 0; r < s.length(); ++r) {\\n      ++count[s.charAt(r)];\\n      while (count[s.charAt(r)] > 1)\\n        --count[s.charAt(l++)];\\n      ans = Math.max(ans, r - l + 1);\\n    }\\n\\n    return ans;`"
                    },
                    {
                        "username": "gggeh",
                        "content": "hi everyone, I\\'m not sure why I get this error:\\nTypeError: None is not valid value for the expected return type integer\\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\\nTypeError: \\'<\\' not supported between instances of \\'int\\' and \\'NoneType\\'\\n\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        seen = set()\\n        longest_string = \"\"\\n\\n        for i in range(len(s)):\\n            if s[i] in seen:\\n                print(len(longest_string))\\n                break\\n            else:\\n                longest_string += s[i]\\n                seen.add(s[i])\\n\\nAny advice would be greatly appreciated!"
                    },
                    {
                        "username": "janis__",
                        "content": "Your function doesn\\'t return any value when the loop completes, which is why you\\'re getting a TypeError. Ensure you return len(longest_string) at the end of your function to provide the expected integer output."
                    },
                    {
                        "username": "shriya_03",
                        "content": "instead of print give return\\n"
                    },
                    {
                        "username": "SeUz751",
                        "content": "Excuse me in the third example shouldnt the output be 4 ? \"pwwkew\" -> we have 4 letters unique ... p,w,k,e. Have I misunderstood something ?"
                    },
                    {
                        "username": "swagiuli",
                        "content": "you got it wrong, the task is to find the longest substring without repeating characters.\\na substring is a string that derives from another string. for example 3 the output is 3 because the longest substring is \"wke\". not \"pwke\" because there is an additional \"w\" between \"p\" and \"wke\"."
                    },
                    {
                        "username": "aliarsenal30",
                        "content": "I wrote the following code:\\n\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        count = 0\\n        chars = \\'\\'\\n        for i in range(len(s)):\\n            if s[i] not in chars:\\n                count += 1\\n                chars += s[i]\\n            else:\\n                break\\n        print(count)\\n\\nIt\\'s giving me runtime error on the leetcode IDE, however works fine on VScode. What could be the problem?"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "can we do it using stack ???"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "best question to get a hang on strings in cpp"
                    },
                    {
                        "username": "KillerMaker721",
                        "content": "I have a solution that works fine in VS but when i run it on the online editor fails a testcase, then i take the testcase and run it on VS and it works fine again :(\\n\\nHere is my code:\\n\\n `#include <iostream>\\n#include<unordered_set>\\n#include<algorithm>\\n\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(std::string s) \\n    {\\n        std::unordered_set<char> lu_substr;\\n\\n        auto element_collided_with = lu_substr.begin();\\n        int max_set_size = 0;\\n\\n        for (int i = 0; i < s.size(); i++) \\n        {\\n            if (!lu_substr.insert(s[i]).second)\\n            {\\n                element_collided_with = lu_substr.find(s[i]);\\n                max_set_size = max_set_size >= lu_substr.size() ? max_set_size : lu_substr.size();\\n                lu_substr.erase(lu_substr.begin(), element_collided_with);\\n            }\\n        }\\n\\n        return max_set_size >= lu_substr.size() ? max_set_size : lu_substr.size();\\n    }\\n};`"
                    },
                    {
                        "username": "ezinercan",
                        "content": "Question is not clear and given examples have mistakes. This questions doesn\\'t have a real life application anywhere so, doesn\\'t look like anything I have seen before. "
                    }
                ]
            },
            {
                "id": 1853751,
                "content": [
                    {
                        "username": "Eragpm",
                        "content": "can someone tell me why with empty String the solution is 1 that feels kinda counterintuative?"
                    },
                    {
                        "username": "janis__",
                        "content": "The solution for an empty string should be 0, not 1, as there are no characters in the string to form a substring."
                    },
                    {
                        "username": "lionariman",
                        "content": "Why this test case expected 5 instead of 4?\\n\\nInput\\ns = \"anviaj\"\\n\\nOutput 4\\nExpected 5\\n\\nI really do not understand..."
                    },
                    {
                        "username": "swagiuli",
                        "content": "\"nviaj\" is the longest substring without repeating characters."
                    },
                    {
                        "username": "teckyshubham",
                        "content": " `int ans = 0;\\n    int[] count = new int[128];\\n\\n    for (int l = 0, r = 0; r < s.length(); ++r) {\\n      ++count[s.charAt(r)];\\n      while (count[s.charAt(r)] > 1)\\n        --count[s.charAt(l++)];\\n      ans = Math.max(ans, r - l + 1);\\n    }\\n\\n    return ans;`"
                    },
                    {
                        "username": "gggeh",
                        "content": "hi everyone, I\\'m not sure why I get this error:\\nTypeError: None is not valid value for the expected return type integer\\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\\nTypeError: \\'<\\' not supported between instances of \\'int\\' and \\'NoneType\\'\\n\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        seen = set()\\n        longest_string = \"\"\\n\\n        for i in range(len(s)):\\n            if s[i] in seen:\\n                print(len(longest_string))\\n                break\\n            else:\\n                longest_string += s[i]\\n                seen.add(s[i])\\n\\nAny advice would be greatly appreciated!"
                    },
                    {
                        "username": "janis__",
                        "content": "Your function doesn\\'t return any value when the loop completes, which is why you\\'re getting a TypeError. Ensure you return len(longest_string) at the end of your function to provide the expected integer output."
                    },
                    {
                        "username": "shriya_03",
                        "content": "instead of print give return\\n"
                    },
                    {
                        "username": "SeUz751",
                        "content": "Excuse me in the third example shouldnt the output be 4 ? \"pwwkew\" -> we have 4 letters unique ... p,w,k,e. Have I misunderstood something ?"
                    },
                    {
                        "username": "swagiuli",
                        "content": "you got it wrong, the task is to find the longest substring without repeating characters.\\na substring is a string that derives from another string. for example 3 the output is 3 because the longest substring is \"wke\". not \"pwke\" because there is an additional \"w\" between \"p\" and \"wke\"."
                    },
                    {
                        "username": "aliarsenal30",
                        "content": "I wrote the following code:\\n\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        count = 0\\n        chars = \\'\\'\\n        for i in range(len(s)):\\n            if s[i] not in chars:\\n                count += 1\\n                chars += s[i]\\n            else:\\n                break\\n        print(count)\\n\\nIt\\'s giving me runtime error on the leetcode IDE, however works fine on VScode. What could be the problem?"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "can we do it using stack ???"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "best question to get a hang on strings in cpp"
                    },
                    {
                        "username": "KillerMaker721",
                        "content": "I have a solution that works fine in VS but when i run it on the online editor fails a testcase, then i take the testcase and run it on VS and it works fine again :(\\n\\nHere is my code:\\n\\n `#include <iostream>\\n#include<unordered_set>\\n#include<algorithm>\\n\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(std::string s) \\n    {\\n        std::unordered_set<char> lu_substr;\\n\\n        auto element_collided_with = lu_substr.begin();\\n        int max_set_size = 0;\\n\\n        for (int i = 0; i < s.size(); i++) \\n        {\\n            if (!lu_substr.insert(s[i]).second)\\n            {\\n                element_collided_with = lu_substr.find(s[i]);\\n                max_set_size = max_set_size >= lu_substr.size() ? max_set_size : lu_substr.size();\\n                lu_substr.erase(lu_substr.begin(), element_collided_with);\\n            }\\n        }\\n\\n        return max_set_size >= lu_substr.size() ? max_set_size : lu_substr.size();\\n    }\\n};`"
                    },
                    {
                        "username": "ezinercan",
                        "content": "Question is not clear and given examples have mistakes. This questions doesn\\'t have a real life application anywhere so, doesn\\'t look like anything I have seen before. "
                    }
                ]
            },
            {
                "id": 1852980,
                "content": [
                    {
                        "username": "Eragpm",
                        "content": "can someone tell me why with empty String the solution is 1 that feels kinda counterintuative?"
                    },
                    {
                        "username": "janis__",
                        "content": "The solution for an empty string should be 0, not 1, as there are no characters in the string to form a substring."
                    },
                    {
                        "username": "lionariman",
                        "content": "Why this test case expected 5 instead of 4?\\n\\nInput\\ns = \"anviaj\"\\n\\nOutput 4\\nExpected 5\\n\\nI really do not understand..."
                    },
                    {
                        "username": "swagiuli",
                        "content": "\"nviaj\" is the longest substring without repeating characters."
                    },
                    {
                        "username": "teckyshubham",
                        "content": " `int ans = 0;\\n    int[] count = new int[128];\\n\\n    for (int l = 0, r = 0; r < s.length(); ++r) {\\n      ++count[s.charAt(r)];\\n      while (count[s.charAt(r)] > 1)\\n        --count[s.charAt(l++)];\\n      ans = Math.max(ans, r - l + 1);\\n    }\\n\\n    return ans;`"
                    },
                    {
                        "username": "gggeh",
                        "content": "hi everyone, I\\'m not sure why I get this error:\\nTypeError: None is not valid value for the expected return type integer\\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\\nTypeError: \\'<\\' not supported between instances of \\'int\\' and \\'NoneType\\'\\n\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        seen = set()\\n        longest_string = \"\"\\n\\n        for i in range(len(s)):\\n            if s[i] in seen:\\n                print(len(longest_string))\\n                break\\n            else:\\n                longest_string += s[i]\\n                seen.add(s[i])\\n\\nAny advice would be greatly appreciated!"
                    },
                    {
                        "username": "janis__",
                        "content": "Your function doesn\\'t return any value when the loop completes, which is why you\\'re getting a TypeError. Ensure you return len(longest_string) at the end of your function to provide the expected integer output."
                    },
                    {
                        "username": "shriya_03",
                        "content": "instead of print give return\\n"
                    },
                    {
                        "username": "SeUz751",
                        "content": "Excuse me in the third example shouldnt the output be 4 ? \"pwwkew\" -> we have 4 letters unique ... p,w,k,e. Have I misunderstood something ?"
                    },
                    {
                        "username": "swagiuli",
                        "content": "you got it wrong, the task is to find the longest substring without repeating characters.\\na substring is a string that derives from another string. for example 3 the output is 3 because the longest substring is \"wke\". not \"pwke\" because there is an additional \"w\" between \"p\" and \"wke\"."
                    },
                    {
                        "username": "aliarsenal30",
                        "content": "I wrote the following code:\\n\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        count = 0\\n        chars = \\'\\'\\n        for i in range(len(s)):\\n            if s[i] not in chars:\\n                count += 1\\n                chars += s[i]\\n            else:\\n                break\\n        print(count)\\n\\nIt\\'s giving me runtime error on the leetcode IDE, however works fine on VScode. What could be the problem?"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "can we do it using stack ???"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "best question to get a hang on strings in cpp"
                    },
                    {
                        "username": "KillerMaker721",
                        "content": "I have a solution that works fine in VS but when i run it on the online editor fails a testcase, then i take the testcase and run it on VS and it works fine again :(\\n\\nHere is my code:\\n\\n `#include <iostream>\\n#include<unordered_set>\\n#include<algorithm>\\n\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(std::string s) \\n    {\\n        std::unordered_set<char> lu_substr;\\n\\n        auto element_collided_with = lu_substr.begin();\\n        int max_set_size = 0;\\n\\n        for (int i = 0; i < s.size(); i++) \\n        {\\n            if (!lu_substr.insert(s[i]).second)\\n            {\\n                element_collided_with = lu_substr.find(s[i]);\\n                max_set_size = max_set_size >= lu_substr.size() ? max_set_size : lu_substr.size();\\n                lu_substr.erase(lu_substr.begin(), element_collided_with);\\n            }\\n        }\\n\\n        return max_set_size >= lu_substr.size() ? max_set_size : lu_substr.size();\\n    }\\n};`"
                    },
                    {
                        "username": "ezinercan",
                        "content": "Question is not clear and given examples have mistakes. This questions doesn\\'t have a real life application anywhere so, doesn\\'t look like anything I have seen before. "
                    }
                ]
            },
            {
                "id": 1851731,
                "content": [
                    {
                        "username": "dk4083",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        String s1=\"\";\\n        s=s.toLowerCase();\\n        for(int i=0;i<s.length();i++)\\n        {\\n            String a=String.valueOf(s.charAt(i));\\n            if(!s1.contains(a))\\n            {\\n                s1+=s.charAt(i);\\n            }\\n        }\\n        for(int i=0;i<s1.length();i++)\\n        {\\n            String j=s1.substring(i,s1.length()-1);\\n            if(!s.contains(j))\\n            {\\n                return j.length();\\n            }\\n\\n        }\\n        return s1.length();\\n    }\\n}\\nwhat is my mistake only 93/987 passed"
                    },
                    {
                        "username": "Anandsahni",
                        "content": "bhai reel dekhne se code nhi hoga\\n"
                    },
                    {
                        "username": "james_fanti",
                        "content": "i wrote the solution in c; it is working on my environment (arch linux with latest gcc) but here it always pop me out this \"==31==ERROR: AddressSanitizer: dynamic-stack-buffer-overflow on address 0x7ffdc415350\" i\\'m probably handling memory bad, but i don\\'t know how to fix since the debugger error is referred to registers and mem directly and not to lines of code that lead to that"
                    },
                    {
                        "username": "janis__",
                        "content": "The error \"AddressSanitizer: dynamic-stack-buffer-overflow\" suggests you\\'re accessing memory beyond the limits of a stack-allocated array or buffer in your C code; review any arrays or buffers you\\'ve defined and ensure you\\'re not writing or reading outside their bounds."
                    },
                    {
                        "username": "infinityCorporation",
                        "content": "The trickiest part about this question was catching substrings that formed at the end of a string. At the beginning and in the middle seemed fine, but at the end was definitely a little harder. \\n\\nNot my favorite question but certainly an interesting one. This one helped me push my limits a little bit with both my knowledge of code and my problem solving skills."
                    },
                    {
                        "username": "user9067q",
                        "content": "For the test case s =\"qrsvbspk\" the longest string is \"rsvbpk\" my output is 6, but LeetCode said that the expected is 5; there is an error with the test validation."
                    },
                    {
                        "username": "user2301t",
                        "content": "You should provide more example inputs than lower case alphabetic chars. It makes the problem look like that\\'s all we care about in terms of repeating characters"
                    },
                    {
                        "username": "waseemsabra2",
                        "content": "\"pwwkew\" why \"pwke\" Not Correct do you have any constraints that is not clear !?"
                    },
                    {
                        "username": "Did_You_Hear",
                        "content": "See example 3."
                    },
                    {
                        "username": "gauravsinha",
                        "content": "what is the last testcase if anyone has better understanding of it? It times out for me and the test shows: \\n\\nLast executed Input: \\n`s =\\n`"
                    },
                    {
                        "username": "inesbourouissi",
                        "content": "on the third test case the expected result is 4 not 3!!!!"
                    },
                    {
                        "username": "shuklatushar89",
                        "content": "Can anyone suggest what modifications can be made? \nIt only satisfies 407/987 test cases.\nLanguage :- Python3\n \n\n\nclass Solution:\n-- def lengthOfLongestSubstring(self, s: str) -> int:\n------max=0\n------a = \"\"\n------for char in s:\n---------if char not in a:\n------------a+=char\n---------else:\n------------if max < len(a) :\n----------------max=len(a)\n----------------a=char\n------------else:\n----------------a=char\n------if max<len(a):\n---------max=len(a)\n------return max\n\n"
                    },
                    {
                        "username": "janis__",
                        "content": "When encountering a repeated character, instead of resetting a to just the current character, you should update a to the substring starting after the first occurrence of the repeated character and then append the current character."
                    },
                    {
                        "username": "aviha22",
                        "content": "i\\'m just making sure:\\nat the testcase where s = \"anviaj\",\\nexpected answer is 5 but the real answer supposed to be 4, \\'anvi\\' isn\\'t it?"
                    },
                    {
                        "username": "Did_You_Hear",
                        "content": "\\'nviaj\\' is 5."
                    }
                ]
            },
            {
                "id": 1850183,
                "content": [
                    {
                        "username": "dk4083",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        String s1=\"\";\\n        s=s.toLowerCase();\\n        for(int i=0;i<s.length();i++)\\n        {\\n            String a=String.valueOf(s.charAt(i));\\n            if(!s1.contains(a))\\n            {\\n                s1+=s.charAt(i);\\n            }\\n        }\\n        for(int i=0;i<s1.length();i++)\\n        {\\n            String j=s1.substring(i,s1.length()-1);\\n            if(!s.contains(j))\\n            {\\n                return j.length();\\n            }\\n\\n        }\\n        return s1.length();\\n    }\\n}\\nwhat is my mistake only 93/987 passed"
                    },
                    {
                        "username": "Anandsahni",
                        "content": "bhai reel dekhne se code nhi hoga\\n"
                    },
                    {
                        "username": "james_fanti",
                        "content": "i wrote the solution in c; it is working on my environment (arch linux with latest gcc) but here it always pop me out this \"==31==ERROR: AddressSanitizer: dynamic-stack-buffer-overflow on address 0x7ffdc415350\" i\\'m probably handling memory bad, but i don\\'t know how to fix since the debugger error is referred to registers and mem directly and not to lines of code that lead to that"
                    },
                    {
                        "username": "janis__",
                        "content": "The error \"AddressSanitizer: dynamic-stack-buffer-overflow\" suggests you\\'re accessing memory beyond the limits of a stack-allocated array or buffer in your C code; review any arrays or buffers you\\'ve defined and ensure you\\'re not writing or reading outside their bounds."
                    },
                    {
                        "username": "infinityCorporation",
                        "content": "The trickiest part about this question was catching substrings that formed at the end of a string. At the beginning and in the middle seemed fine, but at the end was definitely a little harder. \\n\\nNot my favorite question but certainly an interesting one. This one helped me push my limits a little bit with both my knowledge of code and my problem solving skills."
                    },
                    {
                        "username": "user9067q",
                        "content": "For the test case s =\"qrsvbspk\" the longest string is \"rsvbpk\" my output is 6, but LeetCode said that the expected is 5; there is an error with the test validation."
                    },
                    {
                        "username": "user2301t",
                        "content": "You should provide more example inputs than lower case alphabetic chars. It makes the problem look like that\\'s all we care about in terms of repeating characters"
                    },
                    {
                        "username": "waseemsabra2",
                        "content": "\"pwwkew\" why \"pwke\" Not Correct do you have any constraints that is not clear !?"
                    },
                    {
                        "username": "Did_You_Hear",
                        "content": "See example 3."
                    },
                    {
                        "username": "gauravsinha",
                        "content": "what is the last testcase if anyone has better understanding of it? It times out for me and the test shows: \\n\\nLast executed Input: \\n`s =\\n`"
                    },
                    {
                        "username": "inesbourouissi",
                        "content": "on the third test case the expected result is 4 not 3!!!!"
                    },
                    {
                        "username": "shuklatushar89",
                        "content": "Can anyone suggest what modifications can be made? \nIt only satisfies 407/987 test cases.\nLanguage :- Python3\n \n\n\nclass Solution:\n-- def lengthOfLongestSubstring(self, s: str) -> int:\n------max=0\n------a = \"\"\n------for char in s:\n---------if char not in a:\n------------a+=char\n---------else:\n------------if max < len(a) :\n----------------max=len(a)\n----------------a=char\n------------else:\n----------------a=char\n------if max<len(a):\n---------max=len(a)\n------return max\n\n"
                    },
                    {
                        "username": "janis__",
                        "content": "When encountering a repeated character, instead of resetting a to just the current character, you should update a to the substring starting after the first occurrence of the repeated character and then append the current character."
                    },
                    {
                        "username": "aviha22",
                        "content": "i\\'m just making sure:\\nat the testcase where s = \"anviaj\",\\nexpected answer is 5 but the real answer supposed to be 4, \\'anvi\\' isn\\'t it?"
                    },
                    {
                        "username": "Did_You_Hear",
                        "content": "\\'nviaj\\' is 5."
                    }
                ]
            },
            {
                "id": 1847583,
                "content": [
                    {
                        "username": "dk4083",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        String s1=\"\";\\n        s=s.toLowerCase();\\n        for(int i=0;i<s.length();i++)\\n        {\\n            String a=String.valueOf(s.charAt(i));\\n            if(!s1.contains(a))\\n            {\\n                s1+=s.charAt(i);\\n            }\\n        }\\n        for(int i=0;i<s1.length();i++)\\n        {\\n            String j=s1.substring(i,s1.length()-1);\\n            if(!s.contains(j))\\n            {\\n                return j.length();\\n            }\\n\\n        }\\n        return s1.length();\\n    }\\n}\\nwhat is my mistake only 93/987 passed"
                    },
                    {
                        "username": "Anandsahni",
                        "content": "bhai reel dekhne se code nhi hoga\\n"
                    },
                    {
                        "username": "james_fanti",
                        "content": "i wrote the solution in c; it is working on my environment (arch linux with latest gcc) but here it always pop me out this \"==31==ERROR: AddressSanitizer: dynamic-stack-buffer-overflow on address 0x7ffdc415350\" i\\'m probably handling memory bad, but i don\\'t know how to fix since the debugger error is referred to registers and mem directly and not to lines of code that lead to that"
                    },
                    {
                        "username": "janis__",
                        "content": "The error \"AddressSanitizer: dynamic-stack-buffer-overflow\" suggests you\\'re accessing memory beyond the limits of a stack-allocated array or buffer in your C code; review any arrays or buffers you\\'ve defined and ensure you\\'re not writing or reading outside their bounds."
                    },
                    {
                        "username": "infinityCorporation",
                        "content": "The trickiest part about this question was catching substrings that formed at the end of a string. At the beginning and in the middle seemed fine, but at the end was definitely a little harder. \\n\\nNot my favorite question but certainly an interesting one. This one helped me push my limits a little bit with both my knowledge of code and my problem solving skills."
                    },
                    {
                        "username": "user9067q",
                        "content": "For the test case s =\"qrsvbspk\" the longest string is \"rsvbpk\" my output is 6, but LeetCode said that the expected is 5; there is an error with the test validation."
                    },
                    {
                        "username": "user2301t",
                        "content": "You should provide more example inputs than lower case alphabetic chars. It makes the problem look like that\\'s all we care about in terms of repeating characters"
                    },
                    {
                        "username": "waseemsabra2",
                        "content": "\"pwwkew\" why \"pwke\" Not Correct do you have any constraints that is not clear !?"
                    },
                    {
                        "username": "Did_You_Hear",
                        "content": "See example 3."
                    },
                    {
                        "username": "gauravsinha",
                        "content": "what is the last testcase if anyone has better understanding of it? It times out for me and the test shows: \\n\\nLast executed Input: \\n`s =\\n`"
                    },
                    {
                        "username": "inesbourouissi",
                        "content": "on the third test case the expected result is 4 not 3!!!!"
                    },
                    {
                        "username": "shuklatushar89",
                        "content": "Can anyone suggest what modifications can be made? \nIt only satisfies 407/987 test cases.\nLanguage :- Python3\n \n\n\nclass Solution:\n-- def lengthOfLongestSubstring(self, s: str) -> int:\n------max=0\n------a = \"\"\n------for char in s:\n---------if char not in a:\n------------a+=char\n---------else:\n------------if max < len(a) :\n----------------max=len(a)\n----------------a=char\n------------else:\n----------------a=char\n------if max<len(a):\n---------max=len(a)\n------return max\n\n"
                    },
                    {
                        "username": "janis__",
                        "content": "When encountering a repeated character, instead of resetting a to just the current character, you should update a to the substring starting after the first occurrence of the repeated character and then append the current character."
                    },
                    {
                        "username": "aviha22",
                        "content": "i\\'m just making sure:\\nat the testcase where s = \"anviaj\",\\nexpected answer is 5 but the real answer supposed to be 4, \\'anvi\\' isn\\'t it?"
                    },
                    {
                        "username": "Did_You_Hear",
                        "content": "\\'nviaj\\' is 5."
                    }
                ]
            },
            {
                "id": 1844934,
                "content": [
                    {
                        "username": "dk4083",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        String s1=\"\";\\n        s=s.toLowerCase();\\n        for(int i=0;i<s.length();i++)\\n        {\\n            String a=String.valueOf(s.charAt(i));\\n            if(!s1.contains(a))\\n            {\\n                s1+=s.charAt(i);\\n            }\\n        }\\n        for(int i=0;i<s1.length();i++)\\n        {\\n            String j=s1.substring(i,s1.length()-1);\\n            if(!s.contains(j))\\n            {\\n                return j.length();\\n            }\\n\\n        }\\n        return s1.length();\\n    }\\n}\\nwhat is my mistake only 93/987 passed"
                    },
                    {
                        "username": "Anandsahni",
                        "content": "bhai reel dekhne se code nhi hoga\\n"
                    },
                    {
                        "username": "james_fanti",
                        "content": "i wrote the solution in c; it is working on my environment (arch linux with latest gcc) but here it always pop me out this \"==31==ERROR: AddressSanitizer: dynamic-stack-buffer-overflow on address 0x7ffdc415350\" i\\'m probably handling memory bad, but i don\\'t know how to fix since the debugger error is referred to registers and mem directly and not to lines of code that lead to that"
                    },
                    {
                        "username": "janis__",
                        "content": "The error \"AddressSanitizer: dynamic-stack-buffer-overflow\" suggests you\\'re accessing memory beyond the limits of a stack-allocated array or buffer in your C code; review any arrays or buffers you\\'ve defined and ensure you\\'re not writing or reading outside their bounds."
                    },
                    {
                        "username": "infinityCorporation",
                        "content": "The trickiest part about this question was catching substrings that formed at the end of a string. At the beginning and in the middle seemed fine, but at the end was definitely a little harder. \\n\\nNot my favorite question but certainly an interesting one. This one helped me push my limits a little bit with both my knowledge of code and my problem solving skills."
                    },
                    {
                        "username": "user9067q",
                        "content": "For the test case s =\"qrsvbspk\" the longest string is \"rsvbpk\" my output is 6, but LeetCode said that the expected is 5; there is an error with the test validation."
                    },
                    {
                        "username": "user2301t",
                        "content": "You should provide more example inputs than lower case alphabetic chars. It makes the problem look like that\\'s all we care about in terms of repeating characters"
                    },
                    {
                        "username": "waseemsabra2",
                        "content": "\"pwwkew\" why \"pwke\" Not Correct do you have any constraints that is not clear !?"
                    },
                    {
                        "username": "Did_You_Hear",
                        "content": "See example 3."
                    },
                    {
                        "username": "gauravsinha",
                        "content": "what is the last testcase if anyone has better understanding of it? It times out for me and the test shows: \\n\\nLast executed Input: \\n`s =\\n`"
                    },
                    {
                        "username": "inesbourouissi",
                        "content": "on the third test case the expected result is 4 not 3!!!!"
                    },
                    {
                        "username": "shuklatushar89",
                        "content": "Can anyone suggest what modifications can be made? \nIt only satisfies 407/987 test cases.\nLanguage :- Python3\n \n\n\nclass Solution:\n-- def lengthOfLongestSubstring(self, s: str) -> int:\n------max=0\n------a = \"\"\n------for char in s:\n---------if char not in a:\n------------a+=char\n---------else:\n------------if max < len(a) :\n----------------max=len(a)\n----------------a=char\n------------else:\n----------------a=char\n------if max<len(a):\n---------max=len(a)\n------return max\n\n"
                    },
                    {
                        "username": "janis__",
                        "content": "When encountering a repeated character, instead of resetting a to just the current character, you should update a to the substring starting after the first occurrence of the repeated character and then append the current character."
                    },
                    {
                        "username": "aviha22",
                        "content": "i\\'m just making sure:\\nat the testcase where s = \"anviaj\",\\nexpected answer is 5 but the real answer supposed to be 4, \\'anvi\\' isn\\'t it?"
                    },
                    {
                        "username": "Did_You_Hear",
                        "content": "\\'nviaj\\' is 5."
                    }
                ]
            },
            {
                "id": 1837826,
                "content": [
                    {
                        "username": "dk4083",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        String s1=\"\";\\n        s=s.toLowerCase();\\n        for(int i=0;i<s.length();i++)\\n        {\\n            String a=String.valueOf(s.charAt(i));\\n            if(!s1.contains(a))\\n            {\\n                s1+=s.charAt(i);\\n            }\\n        }\\n        for(int i=0;i<s1.length();i++)\\n        {\\n            String j=s1.substring(i,s1.length()-1);\\n            if(!s.contains(j))\\n            {\\n                return j.length();\\n            }\\n\\n        }\\n        return s1.length();\\n    }\\n}\\nwhat is my mistake only 93/987 passed"
                    },
                    {
                        "username": "Anandsahni",
                        "content": "bhai reel dekhne se code nhi hoga\\n"
                    },
                    {
                        "username": "james_fanti",
                        "content": "i wrote the solution in c; it is working on my environment (arch linux with latest gcc) but here it always pop me out this \"==31==ERROR: AddressSanitizer: dynamic-stack-buffer-overflow on address 0x7ffdc415350\" i\\'m probably handling memory bad, but i don\\'t know how to fix since the debugger error is referred to registers and mem directly and not to lines of code that lead to that"
                    },
                    {
                        "username": "janis__",
                        "content": "The error \"AddressSanitizer: dynamic-stack-buffer-overflow\" suggests you\\'re accessing memory beyond the limits of a stack-allocated array or buffer in your C code; review any arrays or buffers you\\'ve defined and ensure you\\'re not writing or reading outside their bounds."
                    },
                    {
                        "username": "infinityCorporation",
                        "content": "The trickiest part about this question was catching substrings that formed at the end of a string. At the beginning and in the middle seemed fine, but at the end was definitely a little harder. \\n\\nNot my favorite question but certainly an interesting one. This one helped me push my limits a little bit with both my knowledge of code and my problem solving skills."
                    },
                    {
                        "username": "user9067q",
                        "content": "For the test case s =\"qrsvbspk\" the longest string is \"rsvbpk\" my output is 6, but LeetCode said that the expected is 5; there is an error with the test validation."
                    },
                    {
                        "username": "user2301t",
                        "content": "You should provide more example inputs than lower case alphabetic chars. It makes the problem look like that\\'s all we care about in terms of repeating characters"
                    },
                    {
                        "username": "waseemsabra2",
                        "content": "\"pwwkew\" why \"pwke\" Not Correct do you have any constraints that is not clear !?"
                    },
                    {
                        "username": "Did_You_Hear",
                        "content": "See example 3."
                    },
                    {
                        "username": "gauravsinha",
                        "content": "what is the last testcase if anyone has better understanding of it? It times out for me and the test shows: \\n\\nLast executed Input: \\n`s =\\n`"
                    },
                    {
                        "username": "inesbourouissi",
                        "content": "on the third test case the expected result is 4 not 3!!!!"
                    },
                    {
                        "username": "shuklatushar89",
                        "content": "Can anyone suggest what modifications can be made? \nIt only satisfies 407/987 test cases.\nLanguage :- Python3\n \n\n\nclass Solution:\n-- def lengthOfLongestSubstring(self, s: str) -> int:\n------max=0\n------a = \"\"\n------for char in s:\n---------if char not in a:\n------------a+=char\n---------else:\n------------if max < len(a) :\n----------------max=len(a)\n----------------a=char\n------------else:\n----------------a=char\n------if max<len(a):\n---------max=len(a)\n------return max\n\n"
                    },
                    {
                        "username": "janis__",
                        "content": "When encountering a repeated character, instead of resetting a to just the current character, you should update a to the substring starting after the first occurrence of the repeated character and then append the current character."
                    },
                    {
                        "username": "aviha22",
                        "content": "i\\'m just making sure:\\nat the testcase where s = \"anviaj\",\\nexpected answer is 5 but the real answer supposed to be 4, \\'anvi\\' isn\\'t it?"
                    },
                    {
                        "username": "Did_You_Hear",
                        "content": "\\'nviaj\\' is 5."
                    }
                ]
            },
            {
                "id": 1834953,
                "content": [
                    {
                        "username": "dk4083",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        String s1=\"\";\\n        s=s.toLowerCase();\\n        for(int i=0;i<s.length();i++)\\n        {\\n            String a=String.valueOf(s.charAt(i));\\n            if(!s1.contains(a))\\n            {\\n                s1+=s.charAt(i);\\n            }\\n        }\\n        for(int i=0;i<s1.length();i++)\\n        {\\n            String j=s1.substring(i,s1.length()-1);\\n            if(!s.contains(j))\\n            {\\n                return j.length();\\n            }\\n\\n        }\\n        return s1.length();\\n    }\\n}\\nwhat is my mistake only 93/987 passed"
                    },
                    {
                        "username": "Anandsahni",
                        "content": "bhai reel dekhne se code nhi hoga\\n"
                    },
                    {
                        "username": "james_fanti",
                        "content": "i wrote the solution in c; it is working on my environment (arch linux with latest gcc) but here it always pop me out this \"==31==ERROR: AddressSanitizer: dynamic-stack-buffer-overflow on address 0x7ffdc415350\" i\\'m probably handling memory bad, but i don\\'t know how to fix since the debugger error is referred to registers and mem directly and not to lines of code that lead to that"
                    },
                    {
                        "username": "janis__",
                        "content": "The error \"AddressSanitizer: dynamic-stack-buffer-overflow\" suggests you\\'re accessing memory beyond the limits of a stack-allocated array or buffer in your C code; review any arrays or buffers you\\'ve defined and ensure you\\'re not writing or reading outside their bounds."
                    },
                    {
                        "username": "infinityCorporation",
                        "content": "The trickiest part about this question was catching substrings that formed at the end of a string. At the beginning and in the middle seemed fine, but at the end was definitely a little harder. \\n\\nNot my favorite question but certainly an interesting one. This one helped me push my limits a little bit with both my knowledge of code and my problem solving skills."
                    },
                    {
                        "username": "user9067q",
                        "content": "For the test case s =\"qrsvbspk\" the longest string is \"rsvbpk\" my output is 6, but LeetCode said that the expected is 5; there is an error with the test validation."
                    },
                    {
                        "username": "user2301t",
                        "content": "You should provide more example inputs than lower case alphabetic chars. It makes the problem look like that\\'s all we care about in terms of repeating characters"
                    },
                    {
                        "username": "waseemsabra2",
                        "content": "\"pwwkew\" why \"pwke\" Not Correct do you have any constraints that is not clear !?"
                    },
                    {
                        "username": "Did_You_Hear",
                        "content": "See example 3."
                    },
                    {
                        "username": "gauravsinha",
                        "content": "what is the last testcase if anyone has better understanding of it? It times out for me and the test shows: \\n\\nLast executed Input: \\n`s =\\n`"
                    },
                    {
                        "username": "inesbourouissi",
                        "content": "on the third test case the expected result is 4 not 3!!!!"
                    },
                    {
                        "username": "shuklatushar89",
                        "content": "Can anyone suggest what modifications can be made? \nIt only satisfies 407/987 test cases.\nLanguage :- Python3\n \n\n\nclass Solution:\n-- def lengthOfLongestSubstring(self, s: str) -> int:\n------max=0\n------a = \"\"\n------for char in s:\n---------if char not in a:\n------------a+=char\n---------else:\n------------if max < len(a) :\n----------------max=len(a)\n----------------a=char\n------------else:\n----------------a=char\n------if max<len(a):\n---------max=len(a)\n------return max\n\n"
                    },
                    {
                        "username": "janis__",
                        "content": "When encountering a repeated character, instead of resetting a to just the current character, you should update a to the substring starting after the first occurrence of the repeated character and then append the current character."
                    },
                    {
                        "username": "aviha22",
                        "content": "i\\'m just making sure:\\nat the testcase where s = \"anviaj\",\\nexpected answer is 5 but the real answer supposed to be 4, \\'anvi\\' isn\\'t it?"
                    },
                    {
                        "username": "Did_You_Hear",
                        "content": "\\'nviaj\\' is 5."
                    }
                ]
            },
            {
                "id": 1834439,
                "content": [
                    {
                        "username": "dk4083",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        String s1=\"\";\\n        s=s.toLowerCase();\\n        for(int i=0;i<s.length();i++)\\n        {\\n            String a=String.valueOf(s.charAt(i));\\n            if(!s1.contains(a))\\n            {\\n                s1+=s.charAt(i);\\n            }\\n        }\\n        for(int i=0;i<s1.length();i++)\\n        {\\n            String j=s1.substring(i,s1.length()-1);\\n            if(!s.contains(j))\\n            {\\n                return j.length();\\n            }\\n\\n        }\\n        return s1.length();\\n    }\\n}\\nwhat is my mistake only 93/987 passed"
                    },
                    {
                        "username": "Anandsahni",
                        "content": "bhai reel dekhne se code nhi hoga\\n"
                    },
                    {
                        "username": "james_fanti",
                        "content": "i wrote the solution in c; it is working on my environment (arch linux with latest gcc) but here it always pop me out this \"==31==ERROR: AddressSanitizer: dynamic-stack-buffer-overflow on address 0x7ffdc415350\" i\\'m probably handling memory bad, but i don\\'t know how to fix since the debugger error is referred to registers and mem directly and not to lines of code that lead to that"
                    },
                    {
                        "username": "janis__",
                        "content": "The error \"AddressSanitizer: dynamic-stack-buffer-overflow\" suggests you\\'re accessing memory beyond the limits of a stack-allocated array or buffer in your C code; review any arrays or buffers you\\'ve defined and ensure you\\'re not writing or reading outside their bounds."
                    },
                    {
                        "username": "infinityCorporation",
                        "content": "The trickiest part about this question was catching substrings that formed at the end of a string. At the beginning and in the middle seemed fine, but at the end was definitely a little harder. \\n\\nNot my favorite question but certainly an interesting one. This one helped me push my limits a little bit with both my knowledge of code and my problem solving skills."
                    },
                    {
                        "username": "user9067q",
                        "content": "For the test case s =\"qrsvbspk\" the longest string is \"rsvbpk\" my output is 6, but LeetCode said that the expected is 5; there is an error with the test validation."
                    },
                    {
                        "username": "user2301t",
                        "content": "You should provide more example inputs than lower case alphabetic chars. It makes the problem look like that\\'s all we care about in terms of repeating characters"
                    },
                    {
                        "username": "waseemsabra2",
                        "content": "\"pwwkew\" why \"pwke\" Not Correct do you have any constraints that is not clear !?"
                    },
                    {
                        "username": "Did_You_Hear",
                        "content": "See example 3."
                    },
                    {
                        "username": "gauravsinha",
                        "content": "what is the last testcase if anyone has better understanding of it? It times out for me and the test shows: \\n\\nLast executed Input: \\n`s =\\n`"
                    },
                    {
                        "username": "inesbourouissi",
                        "content": "on the third test case the expected result is 4 not 3!!!!"
                    },
                    {
                        "username": "shuklatushar89",
                        "content": "Can anyone suggest what modifications can be made? \nIt only satisfies 407/987 test cases.\nLanguage :- Python3\n \n\n\nclass Solution:\n-- def lengthOfLongestSubstring(self, s: str) -> int:\n------max=0\n------a = \"\"\n------for char in s:\n---------if char not in a:\n------------a+=char\n---------else:\n------------if max < len(a) :\n----------------max=len(a)\n----------------a=char\n------------else:\n----------------a=char\n------if max<len(a):\n---------max=len(a)\n------return max\n\n"
                    },
                    {
                        "username": "janis__",
                        "content": "When encountering a repeated character, instead of resetting a to just the current character, you should update a to the substring starting after the first occurrence of the repeated character and then append the current character."
                    },
                    {
                        "username": "aviha22",
                        "content": "i\\'m just making sure:\\nat the testcase where s = \"anviaj\",\\nexpected answer is 5 but the real answer supposed to be 4, \\'anvi\\' isn\\'t it?"
                    },
                    {
                        "username": "Did_You_Hear",
                        "content": "\\'nviaj\\' is 5."
                    }
                ]
            },
            {
                "id": 1832594,
                "content": [
                    {
                        "username": "dk4083",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        String s1=\"\";\\n        s=s.toLowerCase();\\n        for(int i=0;i<s.length();i++)\\n        {\\n            String a=String.valueOf(s.charAt(i));\\n            if(!s1.contains(a))\\n            {\\n                s1+=s.charAt(i);\\n            }\\n        }\\n        for(int i=0;i<s1.length();i++)\\n        {\\n            String j=s1.substring(i,s1.length()-1);\\n            if(!s.contains(j))\\n            {\\n                return j.length();\\n            }\\n\\n        }\\n        return s1.length();\\n    }\\n}\\nwhat is my mistake only 93/987 passed"
                    },
                    {
                        "username": "Anandsahni",
                        "content": "bhai reel dekhne se code nhi hoga\\n"
                    },
                    {
                        "username": "james_fanti",
                        "content": "i wrote the solution in c; it is working on my environment (arch linux with latest gcc) but here it always pop me out this \"==31==ERROR: AddressSanitizer: dynamic-stack-buffer-overflow on address 0x7ffdc415350\" i\\'m probably handling memory bad, but i don\\'t know how to fix since the debugger error is referred to registers and mem directly and not to lines of code that lead to that"
                    },
                    {
                        "username": "janis__",
                        "content": "The error \"AddressSanitizer: dynamic-stack-buffer-overflow\" suggests you\\'re accessing memory beyond the limits of a stack-allocated array or buffer in your C code; review any arrays or buffers you\\'ve defined and ensure you\\'re not writing or reading outside their bounds."
                    },
                    {
                        "username": "infinityCorporation",
                        "content": "The trickiest part about this question was catching substrings that formed at the end of a string. At the beginning and in the middle seemed fine, but at the end was definitely a little harder. \\n\\nNot my favorite question but certainly an interesting one. This one helped me push my limits a little bit with both my knowledge of code and my problem solving skills."
                    },
                    {
                        "username": "user9067q",
                        "content": "For the test case s =\"qrsvbspk\" the longest string is \"rsvbpk\" my output is 6, but LeetCode said that the expected is 5; there is an error with the test validation."
                    },
                    {
                        "username": "user2301t",
                        "content": "You should provide more example inputs than lower case alphabetic chars. It makes the problem look like that\\'s all we care about in terms of repeating characters"
                    },
                    {
                        "username": "waseemsabra2",
                        "content": "\"pwwkew\" why \"pwke\" Not Correct do you have any constraints that is not clear !?"
                    },
                    {
                        "username": "Did_You_Hear",
                        "content": "See example 3."
                    },
                    {
                        "username": "gauravsinha",
                        "content": "what is the last testcase if anyone has better understanding of it? It times out for me and the test shows: \\n\\nLast executed Input: \\n`s =\\n`"
                    },
                    {
                        "username": "inesbourouissi",
                        "content": "on the third test case the expected result is 4 not 3!!!!"
                    },
                    {
                        "username": "shuklatushar89",
                        "content": "Can anyone suggest what modifications can be made? \nIt only satisfies 407/987 test cases.\nLanguage :- Python3\n \n\n\nclass Solution:\n-- def lengthOfLongestSubstring(self, s: str) -> int:\n------max=0\n------a = \"\"\n------for char in s:\n---------if char not in a:\n------------a+=char\n---------else:\n------------if max < len(a) :\n----------------max=len(a)\n----------------a=char\n------------else:\n----------------a=char\n------if max<len(a):\n---------max=len(a)\n------return max\n\n"
                    },
                    {
                        "username": "janis__",
                        "content": "When encountering a repeated character, instead of resetting a to just the current character, you should update a to the substring starting after the first occurrence of the repeated character and then append the current character."
                    },
                    {
                        "username": "aviha22",
                        "content": "i\\'m just making sure:\\nat the testcase where s = \"anviaj\",\\nexpected answer is 5 but the real answer supposed to be 4, \\'anvi\\' isn\\'t it?"
                    },
                    {
                        "username": "Did_You_Hear",
                        "content": "\\'nviaj\\' is 5."
                    }
                ]
            },
            {
                "id": 1832071,
                "content": [
                    {
                        "username": "dk4083",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        String s1=\"\";\\n        s=s.toLowerCase();\\n        for(int i=0;i<s.length();i++)\\n        {\\n            String a=String.valueOf(s.charAt(i));\\n            if(!s1.contains(a))\\n            {\\n                s1+=s.charAt(i);\\n            }\\n        }\\n        for(int i=0;i<s1.length();i++)\\n        {\\n            String j=s1.substring(i,s1.length()-1);\\n            if(!s.contains(j))\\n            {\\n                return j.length();\\n            }\\n\\n        }\\n        return s1.length();\\n    }\\n}\\nwhat is my mistake only 93/987 passed"
                    },
                    {
                        "username": "Anandsahni",
                        "content": "bhai reel dekhne se code nhi hoga\\n"
                    },
                    {
                        "username": "james_fanti",
                        "content": "i wrote the solution in c; it is working on my environment (arch linux with latest gcc) but here it always pop me out this \"==31==ERROR: AddressSanitizer: dynamic-stack-buffer-overflow on address 0x7ffdc415350\" i\\'m probably handling memory bad, but i don\\'t know how to fix since the debugger error is referred to registers and mem directly and not to lines of code that lead to that"
                    },
                    {
                        "username": "janis__",
                        "content": "The error \"AddressSanitizer: dynamic-stack-buffer-overflow\" suggests you\\'re accessing memory beyond the limits of a stack-allocated array or buffer in your C code; review any arrays or buffers you\\'ve defined and ensure you\\'re not writing or reading outside their bounds."
                    },
                    {
                        "username": "infinityCorporation",
                        "content": "The trickiest part about this question was catching substrings that formed at the end of a string. At the beginning and in the middle seemed fine, but at the end was definitely a little harder. \\n\\nNot my favorite question but certainly an interesting one. This one helped me push my limits a little bit with both my knowledge of code and my problem solving skills."
                    },
                    {
                        "username": "user9067q",
                        "content": "For the test case s =\"qrsvbspk\" the longest string is \"rsvbpk\" my output is 6, but LeetCode said that the expected is 5; there is an error with the test validation."
                    },
                    {
                        "username": "user2301t",
                        "content": "You should provide more example inputs than lower case alphabetic chars. It makes the problem look like that\\'s all we care about in terms of repeating characters"
                    },
                    {
                        "username": "waseemsabra2",
                        "content": "\"pwwkew\" why \"pwke\" Not Correct do you have any constraints that is not clear !?"
                    },
                    {
                        "username": "Did_You_Hear",
                        "content": "See example 3."
                    },
                    {
                        "username": "gauravsinha",
                        "content": "what is the last testcase if anyone has better understanding of it? It times out for me and the test shows: \\n\\nLast executed Input: \\n`s =\\n`"
                    },
                    {
                        "username": "inesbourouissi",
                        "content": "on the third test case the expected result is 4 not 3!!!!"
                    },
                    {
                        "username": "shuklatushar89",
                        "content": "Can anyone suggest what modifications can be made? \nIt only satisfies 407/987 test cases.\nLanguage :- Python3\n \n\n\nclass Solution:\n-- def lengthOfLongestSubstring(self, s: str) -> int:\n------max=0\n------a = \"\"\n------for char in s:\n---------if char not in a:\n------------a+=char\n---------else:\n------------if max < len(a) :\n----------------max=len(a)\n----------------a=char\n------------else:\n----------------a=char\n------if max<len(a):\n---------max=len(a)\n------return max\n\n"
                    },
                    {
                        "username": "janis__",
                        "content": "When encountering a repeated character, instead of resetting a to just the current character, you should update a to the substring starting after the first occurrence of the repeated character and then append the current character."
                    },
                    {
                        "username": "aviha22",
                        "content": "i\\'m just making sure:\\nat the testcase where s = \"anviaj\",\\nexpected answer is 5 but the real answer supposed to be 4, \\'anvi\\' isn\\'t it?"
                    },
                    {
                        "username": "Did_You_Hear",
                        "content": "\\'nviaj\\' is 5."
                    }
                ]
            },
            {
                "id": 1830735,
                "content": [
                    {
                        "username": "dk4083",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        String s1=\"\";\\n        s=s.toLowerCase();\\n        for(int i=0;i<s.length();i++)\\n        {\\n            String a=String.valueOf(s.charAt(i));\\n            if(!s1.contains(a))\\n            {\\n                s1+=s.charAt(i);\\n            }\\n        }\\n        for(int i=0;i<s1.length();i++)\\n        {\\n            String j=s1.substring(i,s1.length()-1);\\n            if(!s.contains(j))\\n            {\\n                return j.length();\\n            }\\n\\n        }\\n        return s1.length();\\n    }\\n}\\nwhat is my mistake only 93/987 passed"
                    },
                    {
                        "username": "Anandsahni",
                        "content": "bhai reel dekhne se code nhi hoga\\n"
                    },
                    {
                        "username": "james_fanti",
                        "content": "i wrote the solution in c; it is working on my environment (arch linux with latest gcc) but here it always pop me out this \"==31==ERROR: AddressSanitizer: dynamic-stack-buffer-overflow on address 0x7ffdc415350\" i\\'m probably handling memory bad, but i don\\'t know how to fix since the debugger error is referred to registers and mem directly and not to lines of code that lead to that"
                    },
                    {
                        "username": "janis__",
                        "content": "The error \"AddressSanitizer: dynamic-stack-buffer-overflow\" suggests you\\'re accessing memory beyond the limits of a stack-allocated array or buffer in your C code; review any arrays or buffers you\\'ve defined and ensure you\\'re not writing or reading outside their bounds."
                    },
                    {
                        "username": "infinityCorporation",
                        "content": "The trickiest part about this question was catching substrings that formed at the end of a string. At the beginning and in the middle seemed fine, but at the end was definitely a little harder. \\n\\nNot my favorite question but certainly an interesting one. This one helped me push my limits a little bit with both my knowledge of code and my problem solving skills."
                    },
                    {
                        "username": "user9067q",
                        "content": "For the test case s =\"qrsvbspk\" the longest string is \"rsvbpk\" my output is 6, but LeetCode said that the expected is 5; there is an error with the test validation."
                    },
                    {
                        "username": "user2301t",
                        "content": "You should provide more example inputs than lower case alphabetic chars. It makes the problem look like that\\'s all we care about in terms of repeating characters"
                    },
                    {
                        "username": "waseemsabra2",
                        "content": "\"pwwkew\" why \"pwke\" Not Correct do you have any constraints that is not clear !?"
                    },
                    {
                        "username": "Did_You_Hear",
                        "content": "See example 3."
                    },
                    {
                        "username": "gauravsinha",
                        "content": "what is the last testcase if anyone has better understanding of it? It times out for me and the test shows: \\n\\nLast executed Input: \\n`s =\\n`"
                    },
                    {
                        "username": "inesbourouissi",
                        "content": "on the third test case the expected result is 4 not 3!!!!"
                    },
                    {
                        "username": "shuklatushar89",
                        "content": "Can anyone suggest what modifications can be made? \nIt only satisfies 407/987 test cases.\nLanguage :- Python3\n \n\n\nclass Solution:\n-- def lengthOfLongestSubstring(self, s: str) -> int:\n------max=0\n------a = \"\"\n------for char in s:\n---------if char not in a:\n------------a+=char\n---------else:\n------------if max < len(a) :\n----------------max=len(a)\n----------------a=char\n------------else:\n----------------a=char\n------if max<len(a):\n---------max=len(a)\n------return max\n\n"
                    },
                    {
                        "username": "janis__",
                        "content": "When encountering a repeated character, instead of resetting a to just the current character, you should update a to the substring starting after the first occurrence of the repeated character and then append the current character."
                    },
                    {
                        "username": "aviha22",
                        "content": "i\\'m just making sure:\\nat the testcase where s = \"anviaj\",\\nexpected answer is 5 but the real answer supposed to be 4, \\'anvi\\' isn\\'t it?"
                    },
                    {
                        "username": "Did_You_Hear",
                        "content": "\\'nviaj\\' is 5."
                    }
                ]
            },
            {
                "id": 1822991,
                "content": [
                    {
                        "username": "Rmsa77",
                        "content": "\" \" This test case is not giving correct answer..can anyone explain why is this ??"
                    },
                    {
                        "username": "swagiuli",
                        "content": "the output should be 1 because \" \" (space character) is also a character so it counts.\\nonly when we have \"\" the length is 0, because it represents an empty string."
                    },
                    {
                        "username": "ajay_prgmr",
                        "content": "They are talking about length in return type , so whether you take \"wke\" or \"kew\" answer would be same only."
                    },
                    {
                        "username": "Fath123",
                        "content": "somehow the last test case answer i got here differs with the one i got on vsc. idk how the vsc one can gives the right answer just fine but not here."
                    },
                    {
                        "username": "praveenselvaraj27",
                        "content": " `class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int max=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            for(int j=i+1;j<=s.length();j++)\\n            {\\n                String a=s.substring(i,j);\\n                System.out.println(a);\\n                char[] arr= a.toCharArray();\\n                Set<Character> set= new LinkedHashSet<>();\\n                \\n                for(char g:arr)\\n                {\\n                    set.add(g);\\n                }\\n                if(a.length()==set.size()&&set.size()>max)\\n                max=set.size();\\n            }\\n        }\\n        return max;\\n    }\\n}`\\n\\n822/987 testcases passed"
                    },
                    {
                        "username": "bighub",
                        "content": "in case someone use String.valueOf(CHAR), that is slower. So reconsider to use String or Char as your data structure"
                    },
                    {
                        "username": "Nton118",
                        "content": "986 / 987 testcases passed ??? Time limit Exceeded. What am I doing wrong?"
                    },
                    {
                        "username": "warkeyli",
                        "content": "Same here ... but seems the testcase is legal."
                    },
                    {
                        "username": "pixer83",
                        "content": "can anyone help me with the logic here, I know where i\\'m going wrong just wanted to know how do i handle them.\\n if(s.length()<2)\\n        return s.length();\\n        int count=0;\\n        int maxcount=0;\\n        int countarr[]=new int[128];\\n        Arrays.fill(countarr,-1);\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(countarr[s.charAt(i)]==-1){\\n                countarr[s.charAt(i)]=i;\\n                count++;\\n                maxcount=Math.max(maxcount,count);\\n            }\\n            else{\\n                count-=(countarr[s.charAt(i)]);\\n                \\n                countarr[s.charAt(i)]=i;\\n                //count++;\\n                \\n                //maxcount=Math.max(maxcount,count);\\n            }\\n            System.out.println(count+\"\"+maxcount);\\n            \\n        }\\n        return maxcount;"
                    },
                    {
                        "username": "Subh001",
                        "content": "can someone explain why \"qrsvbspk\"  has output of 5"
                    },
                    {
                        "username": "PiBiHungary",
                        "content": "[@Yongbi](/Yongbi) why not the first part: \"qrsvb\"?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Subh001](/Subh001) because the correct answer is `\"vbspk\"` !"
                    },
                    {
                        "username": "hsiehro",
                        "content": "Given \"jbpnbwwd\" and the expected answer is 4. But why? Shouldn\\'t it be \"bpnwd\" which is counted as 5? Please explain, thanks~"
                    },
                    {
                        "username": "AMerrill",
                        "content": "[@hsiehro](/hsiehro) The characters must be contiguous and so the answer should be $$4$$, with two possible solutions: \"jbpn\" or \"pnbw\". Every other longer substring contains either $$2$$ *b*\\'s or $$2$$ *w*\\'s. "
                    },
                    {
                        "username": "hsiehro",
                        "content": "[@Yongbi](/Yongbi) Thanks for the help. I ran my code submission again. The original input is still \"jbpnbwwd\", and the expected answer is 4. That\\'s why it puzzles me. Maybe I\\'m missing something basic from the requirements?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@RogerH](/hsiehro) I think the original input is `\"jbpnbwd\"` then the expected output is `\" pnbwd\" `!"
                    },
                    {
                        "username": "gotzesoham19",
                        "content": "My code ends at line number 22, yet when I Run the code in the site it says the following: \"Line 25: Char 5: error: conflicting types for \\u2018main\\u2019 [solution.c]\\n int main(int argc, char *argv[]) {\\n     ^~~~\".\\nthe code is running absolutely error free in my vs code editor. Somebody help me out"
                    },
                    {
                        "username": "janis__",
                        "content": "The error suggests that the online platform might have its own main function for testing, so you should remove or comment out your main function before submitting on that platform."
                    }
                ]
            },
            {
                "id": 1811470,
                "content": [
                    {
                        "username": "Rmsa77",
                        "content": "\" \" This test case is not giving correct answer..can anyone explain why is this ??"
                    },
                    {
                        "username": "swagiuli",
                        "content": "the output should be 1 because \" \" (space character) is also a character so it counts.\\nonly when we have \"\" the length is 0, because it represents an empty string."
                    },
                    {
                        "username": "ajay_prgmr",
                        "content": "They are talking about length in return type , so whether you take \"wke\" or \"kew\" answer would be same only."
                    },
                    {
                        "username": "Fath123",
                        "content": "somehow the last test case answer i got here differs with the one i got on vsc. idk how the vsc one can gives the right answer just fine but not here."
                    },
                    {
                        "username": "praveenselvaraj27",
                        "content": " `class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int max=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            for(int j=i+1;j<=s.length();j++)\\n            {\\n                String a=s.substring(i,j);\\n                System.out.println(a);\\n                char[] arr= a.toCharArray();\\n                Set<Character> set= new LinkedHashSet<>();\\n                \\n                for(char g:arr)\\n                {\\n                    set.add(g);\\n                }\\n                if(a.length()==set.size()&&set.size()>max)\\n                max=set.size();\\n            }\\n        }\\n        return max;\\n    }\\n}`\\n\\n822/987 testcases passed"
                    },
                    {
                        "username": "bighub",
                        "content": "in case someone use String.valueOf(CHAR), that is slower. So reconsider to use String or Char as your data structure"
                    },
                    {
                        "username": "Nton118",
                        "content": "986 / 987 testcases passed ??? Time limit Exceeded. What am I doing wrong?"
                    },
                    {
                        "username": "warkeyli",
                        "content": "Same here ... but seems the testcase is legal."
                    },
                    {
                        "username": "pixer83",
                        "content": "can anyone help me with the logic here, I know where i\\'m going wrong just wanted to know how do i handle them.\\n if(s.length()<2)\\n        return s.length();\\n        int count=0;\\n        int maxcount=0;\\n        int countarr[]=new int[128];\\n        Arrays.fill(countarr,-1);\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(countarr[s.charAt(i)]==-1){\\n                countarr[s.charAt(i)]=i;\\n                count++;\\n                maxcount=Math.max(maxcount,count);\\n            }\\n            else{\\n                count-=(countarr[s.charAt(i)]);\\n                \\n                countarr[s.charAt(i)]=i;\\n                //count++;\\n                \\n                //maxcount=Math.max(maxcount,count);\\n            }\\n            System.out.println(count+\"\"+maxcount);\\n            \\n        }\\n        return maxcount;"
                    },
                    {
                        "username": "Subh001",
                        "content": "can someone explain why \"qrsvbspk\"  has output of 5"
                    },
                    {
                        "username": "PiBiHungary",
                        "content": "[@Yongbi](/Yongbi) why not the first part: \"qrsvb\"?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Subh001](/Subh001) because the correct answer is `\"vbspk\"` !"
                    },
                    {
                        "username": "hsiehro",
                        "content": "Given \"jbpnbwwd\" and the expected answer is 4. But why? Shouldn\\'t it be \"bpnwd\" which is counted as 5? Please explain, thanks~"
                    },
                    {
                        "username": "AMerrill",
                        "content": "[@hsiehro](/hsiehro) The characters must be contiguous and so the answer should be $$4$$, with two possible solutions: \"jbpn\" or \"pnbw\". Every other longer substring contains either $$2$$ *b*\\'s or $$2$$ *w*\\'s. "
                    },
                    {
                        "username": "hsiehro",
                        "content": "[@Yongbi](/Yongbi) Thanks for the help. I ran my code submission again. The original input is still \"jbpnbwwd\", and the expected answer is 4. That\\'s why it puzzles me. Maybe I\\'m missing something basic from the requirements?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@RogerH](/hsiehro) I think the original input is `\"jbpnbwd\"` then the expected output is `\" pnbwd\" `!"
                    },
                    {
                        "username": "gotzesoham19",
                        "content": "My code ends at line number 22, yet when I Run the code in the site it says the following: \"Line 25: Char 5: error: conflicting types for \\u2018main\\u2019 [solution.c]\\n int main(int argc, char *argv[]) {\\n     ^~~~\".\\nthe code is running absolutely error free in my vs code editor. Somebody help me out"
                    },
                    {
                        "username": "janis__",
                        "content": "The error suggests that the online platform might have its own main function for testing, so you should remove or comment out your main function before submitting on that platform."
                    }
                ]
            },
            {
                "id": 1810634,
                "content": [
                    {
                        "username": "Rmsa77",
                        "content": "\" \" This test case is not giving correct answer..can anyone explain why is this ??"
                    },
                    {
                        "username": "swagiuli",
                        "content": "the output should be 1 because \" \" (space character) is also a character so it counts.\\nonly when we have \"\" the length is 0, because it represents an empty string."
                    },
                    {
                        "username": "ajay_prgmr",
                        "content": "They are talking about length in return type , so whether you take \"wke\" or \"kew\" answer would be same only."
                    },
                    {
                        "username": "Fath123",
                        "content": "somehow the last test case answer i got here differs with the one i got on vsc. idk how the vsc one can gives the right answer just fine but not here."
                    },
                    {
                        "username": "praveenselvaraj27",
                        "content": " `class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int max=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            for(int j=i+1;j<=s.length();j++)\\n            {\\n                String a=s.substring(i,j);\\n                System.out.println(a);\\n                char[] arr= a.toCharArray();\\n                Set<Character> set= new LinkedHashSet<>();\\n                \\n                for(char g:arr)\\n                {\\n                    set.add(g);\\n                }\\n                if(a.length()==set.size()&&set.size()>max)\\n                max=set.size();\\n            }\\n        }\\n        return max;\\n    }\\n}`\\n\\n822/987 testcases passed"
                    },
                    {
                        "username": "bighub",
                        "content": "in case someone use String.valueOf(CHAR), that is slower. So reconsider to use String or Char as your data structure"
                    },
                    {
                        "username": "Nton118",
                        "content": "986 / 987 testcases passed ??? Time limit Exceeded. What am I doing wrong?"
                    },
                    {
                        "username": "warkeyli",
                        "content": "Same here ... but seems the testcase is legal."
                    },
                    {
                        "username": "pixer83",
                        "content": "can anyone help me with the logic here, I know where i\\'m going wrong just wanted to know how do i handle them.\\n if(s.length()<2)\\n        return s.length();\\n        int count=0;\\n        int maxcount=0;\\n        int countarr[]=new int[128];\\n        Arrays.fill(countarr,-1);\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(countarr[s.charAt(i)]==-1){\\n                countarr[s.charAt(i)]=i;\\n                count++;\\n                maxcount=Math.max(maxcount,count);\\n            }\\n            else{\\n                count-=(countarr[s.charAt(i)]);\\n                \\n                countarr[s.charAt(i)]=i;\\n                //count++;\\n                \\n                //maxcount=Math.max(maxcount,count);\\n            }\\n            System.out.println(count+\"\"+maxcount);\\n            \\n        }\\n        return maxcount;"
                    },
                    {
                        "username": "Subh001",
                        "content": "can someone explain why \"qrsvbspk\"  has output of 5"
                    },
                    {
                        "username": "PiBiHungary",
                        "content": "[@Yongbi](/Yongbi) why not the first part: \"qrsvb\"?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Subh001](/Subh001) because the correct answer is `\"vbspk\"` !"
                    },
                    {
                        "username": "hsiehro",
                        "content": "Given \"jbpnbwwd\" and the expected answer is 4. But why? Shouldn\\'t it be \"bpnwd\" which is counted as 5? Please explain, thanks~"
                    },
                    {
                        "username": "AMerrill",
                        "content": "[@hsiehro](/hsiehro) The characters must be contiguous and so the answer should be $$4$$, with two possible solutions: \"jbpn\" or \"pnbw\". Every other longer substring contains either $$2$$ *b*\\'s or $$2$$ *w*\\'s. "
                    },
                    {
                        "username": "hsiehro",
                        "content": "[@Yongbi](/Yongbi) Thanks for the help. I ran my code submission again. The original input is still \"jbpnbwwd\", and the expected answer is 4. That\\'s why it puzzles me. Maybe I\\'m missing something basic from the requirements?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@RogerH](/hsiehro) I think the original input is `\"jbpnbwd\"` then the expected output is `\" pnbwd\" `!"
                    },
                    {
                        "username": "gotzesoham19",
                        "content": "My code ends at line number 22, yet when I Run the code in the site it says the following: \"Line 25: Char 5: error: conflicting types for \\u2018main\\u2019 [solution.c]\\n int main(int argc, char *argv[]) {\\n     ^~~~\".\\nthe code is running absolutely error free in my vs code editor. Somebody help me out"
                    },
                    {
                        "username": "janis__",
                        "content": "The error suggests that the online platform might have its own main function for testing, so you should remove or comment out your main function before submitting on that platform."
                    }
                ]
            },
            {
                "id": 1809525,
                "content": [
                    {
                        "username": "Rmsa77",
                        "content": "\" \" This test case is not giving correct answer..can anyone explain why is this ??"
                    },
                    {
                        "username": "swagiuli",
                        "content": "the output should be 1 because \" \" (space character) is also a character so it counts.\\nonly when we have \"\" the length is 0, because it represents an empty string."
                    },
                    {
                        "username": "ajay_prgmr",
                        "content": "They are talking about length in return type , so whether you take \"wke\" or \"kew\" answer would be same only."
                    },
                    {
                        "username": "Fath123",
                        "content": "somehow the last test case answer i got here differs with the one i got on vsc. idk how the vsc one can gives the right answer just fine but not here."
                    },
                    {
                        "username": "praveenselvaraj27",
                        "content": " `class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int max=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            for(int j=i+1;j<=s.length();j++)\\n            {\\n                String a=s.substring(i,j);\\n                System.out.println(a);\\n                char[] arr= a.toCharArray();\\n                Set<Character> set= new LinkedHashSet<>();\\n                \\n                for(char g:arr)\\n                {\\n                    set.add(g);\\n                }\\n                if(a.length()==set.size()&&set.size()>max)\\n                max=set.size();\\n            }\\n        }\\n        return max;\\n    }\\n}`\\n\\n822/987 testcases passed"
                    },
                    {
                        "username": "bighub",
                        "content": "in case someone use String.valueOf(CHAR), that is slower. So reconsider to use String or Char as your data structure"
                    },
                    {
                        "username": "Nton118",
                        "content": "986 / 987 testcases passed ??? Time limit Exceeded. What am I doing wrong?"
                    },
                    {
                        "username": "warkeyli",
                        "content": "Same here ... but seems the testcase is legal."
                    },
                    {
                        "username": "pixer83",
                        "content": "can anyone help me with the logic here, I know where i\\'m going wrong just wanted to know how do i handle them.\\n if(s.length()<2)\\n        return s.length();\\n        int count=0;\\n        int maxcount=0;\\n        int countarr[]=new int[128];\\n        Arrays.fill(countarr,-1);\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(countarr[s.charAt(i)]==-1){\\n                countarr[s.charAt(i)]=i;\\n                count++;\\n                maxcount=Math.max(maxcount,count);\\n            }\\n            else{\\n                count-=(countarr[s.charAt(i)]);\\n                \\n                countarr[s.charAt(i)]=i;\\n                //count++;\\n                \\n                //maxcount=Math.max(maxcount,count);\\n            }\\n            System.out.println(count+\"\"+maxcount);\\n            \\n        }\\n        return maxcount;"
                    },
                    {
                        "username": "Subh001",
                        "content": "can someone explain why \"qrsvbspk\"  has output of 5"
                    },
                    {
                        "username": "PiBiHungary",
                        "content": "[@Yongbi](/Yongbi) why not the first part: \"qrsvb\"?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Subh001](/Subh001) because the correct answer is `\"vbspk\"` !"
                    },
                    {
                        "username": "hsiehro",
                        "content": "Given \"jbpnbwwd\" and the expected answer is 4. But why? Shouldn\\'t it be \"bpnwd\" which is counted as 5? Please explain, thanks~"
                    },
                    {
                        "username": "AMerrill",
                        "content": "[@hsiehro](/hsiehro) The characters must be contiguous and so the answer should be $$4$$, with two possible solutions: \"jbpn\" or \"pnbw\". Every other longer substring contains either $$2$$ *b*\\'s or $$2$$ *w*\\'s. "
                    },
                    {
                        "username": "hsiehro",
                        "content": "[@Yongbi](/Yongbi) Thanks for the help. I ran my code submission again. The original input is still \"jbpnbwwd\", and the expected answer is 4. That\\'s why it puzzles me. Maybe I\\'m missing something basic from the requirements?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@RogerH](/hsiehro) I think the original input is `\"jbpnbwd\"` then the expected output is `\" pnbwd\" `!"
                    },
                    {
                        "username": "gotzesoham19",
                        "content": "My code ends at line number 22, yet when I Run the code in the site it says the following: \"Line 25: Char 5: error: conflicting types for \\u2018main\\u2019 [solution.c]\\n int main(int argc, char *argv[]) {\\n     ^~~~\".\\nthe code is running absolutely error free in my vs code editor. Somebody help me out"
                    },
                    {
                        "username": "janis__",
                        "content": "The error suggests that the online platform might have its own main function for testing, so you should remove or comment out your main function before submitting on that platform."
                    }
                ]
            },
            {
                "id": 1809086,
                "content": [
                    {
                        "username": "Rmsa77",
                        "content": "\" \" This test case is not giving correct answer..can anyone explain why is this ??"
                    },
                    {
                        "username": "swagiuli",
                        "content": "the output should be 1 because \" \" (space character) is also a character so it counts.\\nonly when we have \"\" the length is 0, because it represents an empty string."
                    },
                    {
                        "username": "ajay_prgmr",
                        "content": "They are talking about length in return type , so whether you take \"wke\" or \"kew\" answer would be same only."
                    },
                    {
                        "username": "Fath123",
                        "content": "somehow the last test case answer i got here differs with the one i got on vsc. idk how the vsc one can gives the right answer just fine but not here."
                    },
                    {
                        "username": "praveenselvaraj27",
                        "content": " `class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int max=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            for(int j=i+1;j<=s.length();j++)\\n            {\\n                String a=s.substring(i,j);\\n                System.out.println(a);\\n                char[] arr= a.toCharArray();\\n                Set<Character> set= new LinkedHashSet<>();\\n                \\n                for(char g:arr)\\n                {\\n                    set.add(g);\\n                }\\n                if(a.length()==set.size()&&set.size()>max)\\n                max=set.size();\\n            }\\n        }\\n        return max;\\n    }\\n}`\\n\\n822/987 testcases passed"
                    },
                    {
                        "username": "bighub",
                        "content": "in case someone use String.valueOf(CHAR), that is slower. So reconsider to use String or Char as your data structure"
                    },
                    {
                        "username": "Nton118",
                        "content": "986 / 987 testcases passed ??? Time limit Exceeded. What am I doing wrong?"
                    },
                    {
                        "username": "warkeyli",
                        "content": "Same here ... but seems the testcase is legal."
                    },
                    {
                        "username": "pixer83",
                        "content": "can anyone help me with the logic here, I know where i\\'m going wrong just wanted to know how do i handle them.\\n if(s.length()<2)\\n        return s.length();\\n        int count=0;\\n        int maxcount=0;\\n        int countarr[]=new int[128];\\n        Arrays.fill(countarr,-1);\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(countarr[s.charAt(i)]==-1){\\n                countarr[s.charAt(i)]=i;\\n                count++;\\n                maxcount=Math.max(maxcount,count);\\n            }\\n            else{\\n                count-=(countarr[s.charAt(i)]);\\n                \\n                countarr[s.charAt(i)]=i;\\n                //count++;\\n                \\n                //maxcount=Math.max(maxcount,count);\\n            }\\n            System.out.println(count+\"\"+maxcount);\\n            \\n        }\\n        return maxcount;"
                    },
                    {
                        "username": "Subh001",
                        "content": "can someone explain why \"qrsvbspk\"  has output of 5"
                    },
                    {
                        "username": "PiBiHungary",
                        "content": "[@Yongbi](/Yongbi) why not the first part: \"qrsvb\"?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Subh001](/Subh001) because the correct answer is `\"vbspk\"` !"
                    },
                    {
                        "username": "hsiehro",
                        "content": "Given \"jbpnbwwd\" and the expected answer is 4. But why? Shouldn\\'t it be \"bpnwd\" which is counted as 5? Please explain, thanks~"
                    },
                    {
                        "username": "AMerrill",
                        "content": "[@hsiehro](/hsiehro) The characters must be contiguous and so the answer should be $$4$$, with two possible solutions: \"jbpn\" or \"pnbw\". Every other longer substring contains either $$2$$ *b*\\'s or $$2$$ *w*\\'s. "
                    },
                    {
                        "username": "hsiehro",
                        "content": "[@Yongbi](/Yongbi) Thanks for the help. I ran my code submission again. The original input is still \"jbpnbwwd\", and the expected answer is 4. That\\'s why it puzzles me. Maybe I\\'m missing something basic from the requirements?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@RogerH](/hsiehro) I think the original input is `\"jbpnbwd\"` then the expected output is `\" pnbwd\" `!"
                    },
                    {
                        "username": "gotzesoham19",
                        "content": "My code ends at line number 22, yet when I Run the code in the site it says the following: \"Line 25: Char 5: error: conflicting types for \\u2018main\\u2019 [solution.c]\\n int main(int argc, char *argv[]) {\\n     ^~~~\".\\nthe code is running absolutely error free in my vs code editor. Somebody help me out"
                    },
                    {
                        "username": "janis__",
                        "content": "The error suggests that the online platform might have its own main function for testing, so you should remove or comment out your main function before submitting on that platform."
                    }
                ]
            },
            {
                "id": 1808247,
                "content": [
                    {
                        "username": "Rmsa77",
                        "content": "\" \" This test case is not giving correct answer..can anyone explain why is this ??"
                    },
                    {
                        "username": "swagiuli",
                        "content": "the output should be 1 because \" \" (space character) is also a character so it counts.\\nonly when we have \"\" the length is 0, because it represents an empty string."
                    },
                    {
                        "username": "ajay_prgmr",
                        "content": "They are talking about length in return type , so whether you take \"wke\" or \"kew\" answer would be same only."
                    },
                    {
                        "username": "Fath123",
                        "content": "somehow the last test case answer i got here differs with the one i got on vsc. idk how the vsc one can gives the right answer just fine but not here."
                    },
                    {
                        "username": "praveenselvaraj27",
                        "content": " `class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int max=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            for(int j=i+1;j<=s.length();j++)\\n            {\\n                String a=s.substring(i,j);\\n                System.out.println(a);\\n                char[] arr= a.toCharArray();\\n                Set<Character> set= new LinkedHashSet<>();\\n                \\n                for(char g:arr)\\n                {\\n                    set.add(g);\\n                }\\n                if(a.length()==set.size()&&set.size()>max)\\n                max=set.size();\\n            }\\n        }\\n        return max;\\n    }\\n}`\\n\\n822/987 testcases passed"
                    },
                    {
                        "username": "bighub",
                        "content": "in case someone use String.valueOf(CHAR), that is slower. So reconsider to use String or Char as your data structure"
                    },
                    {
                        "username": "Nton118",
                        "content": "986 / 987 testcases passed ??? Time limit Exceeded. What am I doing wrong?"
                    },
                    {
                        "username": "warkeyli",
                        "content": "Same here ... but seems the testcase is legal."
                    },
                    {
                        "username": "pixer83",
                        "content": "can anyone help me with the logic here, I know where i\\'m going wrong just wanted to know how do i handle them.\\n if(s.length()<2)\\n        return s.length();\\n        int count=0;\\n        int maxcount=0;\\n        int countarr[]=new int[128];\\n        Arrays.fill(countarr,-1);\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(countarr[s.charAt(i)]==-1){\\n                countarr[s.charAt(i)]=i;\\n                count++;\\n                maxcount=Math.max(maxcount,count);\\n            }\\n            else{\\n                count-=(countarr[s.charAt(i)]);\\n                \\n                countarr[s.charAt(i)]=i;\\n                //count++;\\n                \\n                //maxcount=Math.max(maxcount,count);\\n            }\\n            System.out.println(count+\"\"+maxcount);\\n            \\n        }\\n        return maxcount;"
                    },
                    {
                        "username": "Subh001",
                        "content": "can someone explain why \"qrsvbspk\"  has output of 5"
                    },
                    {
                        "username": "PiBiHungary",
                        "content": "[@Yongbi](/Yongbi) why not the first part: \"qrsvb\"?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Subh001](/Subh001) because the correct answer is `\"vbspk\"` !"
                    },
                    {
                        "username": "hsiehro",
                        "content": "Given \"jbpnbwwd\" and the expected answer is 4. But why? Shouldn\\'t it be \"bpnwd\" which is counted as 5? Please explain, thanks~"
                    },
                    {
                        "username": "AMerrill",
                        "content": "[@hsiehro](/hsiehro) The characters must be contiguous and so the answer should be $$4$$, with two possible solutions: \"jbpn\" or \"pnbw\". Every other longer substring contains either $$2$$ *b*\\'s or $$2$$ *w*\\'s. "
                    },
                    {
                        "username": "hsiehro",
                        "content": "[@Yongbi](/Yongbi) Thanks for the help. I ran my code submission again. The original input is still \"jbpnbwwd\", and the expected answer is 4. That\\'s why it puzzles me. Maybe I\\'m missing something basic from the requirements?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@RogerH](/hsiehro) I think the original input is `\"jbpnbwd\"` then the expected output is `\" pnbwd\" `!"
                    },
                    {
                        "username": "gotzesoham19",
                        "content": "My code ends at line number 22, yet when I Run the code in the site it says the following: \"Line 25: Char 5: error: conflicting types for \\u2018main\\u2019 [solution.c]\\n int main(int argc, char *argv[]) {\\n     ^~~~\".\\nthe code is running absolutely error free in my vs code editor. Somebody help me out"
                    },
                    {
                        "username": "janis__",
                        "content": "The error suggests that the online platform might have its own main function for testing, so you should remove or comment out your main function before submitting on that platform."
                    }
                ]
            },
            {
                "id": 1805451,
                "content": [
                    {
                        "username": "Rmsa77",
                        "content": "\" \" This test case is not giving correct answer..can anyone explain why is this ??"
                    },
                    {
                        "username": "swagiuli",
                        "content": "the output should be 1 because \" \" (space character) is also a character so it counts.\\nonly when we have \"\" the length is 0, because it represents an empty string."
                    },
                    {
                        "username": "ajay_prgmr",
                        "content": "They are talking about length in return type , so whether you take \"wke\" or \"kew\" answer would be same only."
                    },
                    {
                        "username": "Fath123",
                        "content": "somehow the last test case answer i got here differs with the one i got on vsc. idk how the vsc one can gives the right answer just fine but not here."
                    },
                    {
                        "username": "praveenselvaraj27",
                        "content": " `class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int max=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            for(int j=i+1;j<=s.length();j++)\\n            {\\n                String a=s.substring(i,j);\\n                System.out.println(a);\\n                char[] arr= a.toCharArray();\\n                Set<Character> set= new LinkedHashSet<>();\\n                \\n                for(char g:arr)\\n                {\\n                    set.add(g);\\n                }\\n                if(a.length()==set.size()&&set.size()>max)\\n                max=set.size();\\n            }\\n        }\\n        return max;\\n    }\\n}`\\n\\n822/987 testcases passed"
                    },
                    {
                        "username": "bighub",
                        "content": "in case someone use String.valueOf(CHAR), that is slower. So reconsider to use String or Char as your data structure"
                    },
                    {
                        "username": "Nton118",
                        "content": "986 / 987 testcases passed ??? Time limit Exceeded. What am I doing wrong?"
                    },
                    {
                        "username": "warkeyli",
                        "content": "Same here ... but seems the testcase is legal."
                    },
                    {
                        "username": "pixer83",
                        "content": "can anyone help me with the logic here, I know where i\\'m going wrong just wanted to know how do i handle them.\\n if(s.length()<2)\\n        return s.length();\\n        int count=0;\\n        int maxcount=0;\\n        int countarr[]=new int[128];\\n        Arrays.fill(countarr,-1);\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(countarr[s.charAt(i)]==-1){\\n                countarr[s.charAt(i)]=i;\\n                count++;\\n                maxcount=Math.max(maxcount,count);\\n            }\\n            else{\\n                count-=(countarr[s.charAt(i)]);\\n                \\n                countarr[s.charAt(i)]=i;\\n                //count++;\\n                \\n                //maxcount=Math.max(maxcount,count);\\n            }\\n            System.out.println(count+\"\"+maxcount);\\n            \\n        }\\n        return maxcount;"
                    },
                    {
                        "username": "Subh001",
                        "content": "can someone explain why \"qrsvbspk\"  has output of 5"
                    },
                    {
                        "username": "PiBiHungary",
                        "content": "[@Yongbi](/Yongbi) why not the first part: \"qrsvb\"?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Subh001](/Subh001) because the correct answer is `\"vbspk\"` !"
                    },
                    {
                        "username": "hsiehro",
                        "content": "Given \"jbpnbwwd\" and the expected answer is 4. But why? Shouldn\\'t it be \"bpnwd\" which is counted as 5? Please explain, thanks~"
                    },
                    {
                        "username": "AMerrill",
                        "content": "[@hsiehro](/hsiehro) The characters must be contiguous and so the answer should be $$4$$, with two possible solutions: \"jbpn\" or \"pnbw\". Every other longer substring contains either $$2$$ *b*\\'s or $$2$$ *w*\\'s. "
                    },
                    {
                        "username": "hsiehro",
                        "content": "[@Yongbi](/Yongbi) Thanks for the help. I ran my code submission again. The original input is still \"jbpnbwwd\", and the expected answer is 4. That\\'s why it puzzles me. Maybe I\\'m missing something basic from the requirements?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@RogerH](/hsiehro) I think the original input is `\"jbpnbwd\"` then the expected output is `\" pnbwd\" `!"
                    },
                    {
                        "username": "gotzesoham19",
                        "content": "My code ends at line number 22, yet when I Run the code in the site it says the following: \"Line 25: Char 5: error: conflicting types for \\u2018main\\u2019 [solution.c]\\n int main(int argc, char *argv[]) {\\n     ^~~~\".\\nthe code is running absolutely error free in my vs code editor. Somebody help me out"
                    },
                    {
                        "username": "janis__",
                        "content": "The error suggests that the online platform might have its own main function for testing, so you should remove or comment out your main function before submitting on that platform."
                    }
                ]
            },
            {
                "id": 1804637,
                "content": [
                    {
                        "username": "Rmsa77",
                        "content": "\" \" This test case is not giving correct answer..can anyone explain why is this ??"
                    },
                    {
                        "username": "swagiuli",
                        "content": "the output should be 1 because \" \" (space character) is also a character so it counts.\\nonly when we have \"\" the length is 0, because it represents an empty string."
                    },
                    {
                        "username": "ajay_prgmr",
                        "content": "They are talking about length in return type , so whether you take \"wke\" or \"kew\" answer would be same only."
                    },
                    {
                        "username": "Fath123",
                        "content": "somehow the last test case answer i got here differs with the one i got on vsc. idk how the vsc one can gives the right answer just fine but not here."
                    },
                    {
                        "username": "praveenselvaraj27",
                        "content": " `class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int max=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            for(int j=i+1;j<=s.length();j++)\\n            {\\n                String a=s.substring(i,j);\\n                System.out.println(a);\\n                char[] arr= a.toCharArray();\\n                Set<Character> set= new LinkedHashSet<>();\\n                \\n                for(char g:arr)\\n                {\\n                    set.add(g);\\n                }\\n                if(a.length()==set.size()&&set.size()>max)\\n                max=set.size();\\n            }\\n        }\\n        return max;\\n    }\\n}`\\n\\n822/987 testcases passed"
                    },
                    {
                        "username": "bighub",
                        "content": "in case someone use String.valueOf(CHAR), that is slower. So reconsider to use String or Char as your data structure"
                    },
                    {
                        "username": "Nton118",
                        "content": "986 / 987 testcases passed ??? Time limit Exceeded. What am I doing wrong?"
                    },
                    {
                        "username": "warkeyli",
                        "content": "Same here ... but seems the testcase is legal."
                    },
                    {
                        "username": "pixer83",
                        "content": "can anyone help me with the logic here, I know where i\\'m going wrong just wanted to know how do i handle them.\\n if(s.length()<2)\\n        return s.length();\\n        int count=0;\\n        int maxcount=0;\\n        int countarr[]=new int[128];\\n        Arrays.fill(countarr,-1);\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(countarr[s.charAt(i)]==-1){\\n                countarr[s.charAt(i)]=i;\\n                count++;\\n                maxcount=Math.max(maxcount,count);\\n            }\\n            else{\\n                count-=(countarr[s.charAt(i)]);\\n                \\n                countarr[s.charAt(i)]=i;\\n                //count++;\\n                \\n                //maxcount=Math.max(maxcount,count);\\n            }\\n            System.out.println(count+\"\"+maxcount);\\n            \\n        }\\n        return maxcount;"
                    },
                    {
                        "username": "Subh001",
                        "content": "can someone explain why \"qrsvbspk\"  has output of 5"
                    },
                    {
                        "username": "PiBiHungary",
                        "content": "[@Yongbi](/Yongbi) why not the first part: \"qrsvb\"?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Subh001](/Subh001) because the correct answer is `\"vbspk\"` !"
                    },
                    {
                        "username": "hsiehro",
                        "content": "Given \"jbpnbwwd\" and the expected answer is 4. But why? Shouldn\\'t it be \"bpnwd\" which is counted as 5? Please explain, thanks~"
                    },
                    {
                        "username": "AMerrill",
                        "content": "[@hsiehro](/hsiehro) The characters must be contiguous and so the answer should be $$4$$, with two possible solutions: \"jbpn\" or \"pnbw\". Every other longer substring contains either $$2$$ *b*\\'s or $$2$$ *w*\\'s. "
                    },
                    {
                        "username": "hsiehro",
                        "content": "[@Yongbi](/Yongbi) Thanks for the help. I ran my code submission again. The original input is still \"jbpnbwwd\", and the expected answer is 4. That\\'s why it puzzles me. Maybe I\\'m missing something basic from the requirements?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@RogerH](/hsiehro) I think the original input is `\"jbpnbwd\"` then the expected output is `\" pnbwd\" `!"
                    },
                    {
                        "username": "gotzesoham19",
                        "content": "My code ends at line number 22, yet when I Run the code in the site it says the following: \"Line 25: Char 5: error: conflicting types for \\u2018main\\u2019 [solution.c]\\n int main(int argc, char *argv[]) {\\n     ^~~~\".\\nthe code is running absolutely error free in my vs code editor. Somebody help me out"
                    },
                    {
                        "username": "janis__",
                        "content": "The error suggests that the online platform might have its own main function for testing, so you should remove or comment out your main function before submitting on that platform."
                    }
                ]
            },
            {
                "id": 1804082,
                "content": [
                    {
                        "username": "Rmsa77",
                        "content": "\" \" This test case is not giving correct answer..can anyone explain why is this ??"
                    },
                    {
                        "username": "swagiuli",
                        "content": "the output should be 1 because \" \" (space character) is also a character so it counts.\\nonly when we have \"\" the length is 0, because it represents an empty string."
                    },
                    {
                        "username": "ajay_prgmr",
                        "content": "They are talking about length in return type , so whether you take \"wke\" or \"kew\" answer would be same only."
                    },
                    {
                        "username": "Fath123",
                        "content": "somehow the last test case answer i got here differs with the one i got on vsc. idk how the vsc one can gives the right answer just fine but not here."
                    },
                    {
                        "username": "praveenselvaraj27",
                        "content": " `class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int max=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            for(int j=i+1;j<=s.length();j++)\\n            {\\n                String a=s.substring(i,j);\\n                System.out.println(a);\\n                char[] arr= a.toCharArray();\\n                Set<Character> set= new LinkedHashSet<>();\\n                \\n                for(char g:arr)\\n                {\\n                    set.add(g);\\n                }\\n                if(a.length()==set.size()&&set.size()>max)\\n                max=set.size();\\n            }\\n        }\\n        return max;\\n    }\\n}`\\n\\n822/987 testcases passed"
                    },
                    {
                        "username": "bighub",
                        "content": "in case someone use String.valueOf(CHAR), that is slower. So reconsider to use String or Char as your data structure"
                    },
                    {
                        "username": "Nton118",
                        "content": "986 / 987 testcases passed ??? Time limit Exceeded. What am I doing wrong?"
                    },
                    {
                        "username": "warkeyli",
                        "content": "Same here ... but seems the testcase is legal."
                    },
                    {
                        "username": "pixer83",
                        "content": "can anyone help me with the logic here, I know where i\\'m going wrong just wanted to know how do i handle them.\\n if(s.length()<2)\\n        return s.length();\\n        int count=0;\\n        int maxcount=0;\\n        int countarr[]=new int[128];\\n        Arrays.fill(countarr,-1);\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(countarr[s.charAt(i)]==-1){\\n                countarr[s.charAt(i)]=i;\\n                count++;\\n                maxcount=Math.max(maxcount,count);\\n            }\\n            else{\\n                count-=(countarr[s.charAt(i)]);\\n                \\n                countarr[s.charAt(i)]=i;\\n                //count++;\\n                \\n                //maxcount=Math.max(maxcount,count);\\n            }\\n            System.out.println(count+\"\"+maxcount);\\n            \\n        }\\n        return maxcount;"
                    },
                    {
                        "username": "Subh001",
                        "content": "can someone explain why \"qrsvbspk\"  has output of 5"
                    },
                    {
                        "username": "PiBiHungary",
                        "content": "[@Yongbi](/Yongbi) why not the first part: \"qrsvb\"?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Subh001](/Subh001) because the correct answer is `\"vbspk\"` !"
                    },
                    {
                        "username": "hsiehro",
                        "content": "Given \"jbpnbwwd\" and the expected answer is 4. But why? Shouldn\\'t it be \"bpnwd\" which is counted as 5? Please explain, thanks~"
                    },
                    {
                        "username": "AMerrill",
                        "content": "[@hsiehro](/hsiehro) The characters must be contiguous and so the answer should be $$4$$, with two possible solutions: \"jbpn\" or \"pnbw\". Every other longer substring contains either $$2$$ *b*\\'s or $$2$$ *w*\\'s. "
                    },
                    {
                        "username": "hsiehro",
                        "content": "[@Yongbi](/Yongbi) Thanks for the help. I ran my code submission again. The original input is still \"jbpnbwwd\", and the expected answer is 4. That\\'s why it puzzles me. Maybe I\\'m missing something basic from the requirements?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@RogerH](/hsiehro) I think the original input is `\"jbpnbwd\"` then the expected output is `\" pnbwd\" `!"
                    },
                    {
                        "username": "gotzesoham19",
                        "content": "My code ends at line number 22, yet when I Run the code in the site it says the following: \"Line 25: Char 5: error: conflicting types for \\u2018main\\u2019 [solution.c]\\n int main(int argc, char *argv[]) {\\n     ^~~~\".\\nthe code is running absolutely error free in my vs code editor. Somebody help me out"
                    },
                    {
                        "username": "janis__",
                        "content": "The error suggests that the online platform might have its own main function for testing, so you should remove or comment out your main function before submitting on that platform."
                    }
                ]
            },
            {
                "id": 1802238,
                "content": [
                    {
                        "username": "Rmsa77",
                        "content": "\" \" This test case is not giving correct answer..can anyone explain why is this ??"
                    },
                    {
                        "username": "swagiuli",
                        "content": "the output should be 1 because \" \" (space character) is also a character so it counts.\\nonly when we have \"\" the length is 0, because it represents an empty string."
                    },
                    {
                        "username": "ajay_prgmr",
                        "content": "They are talking about length in return type , so whether you take \"wke\" or \"kew\" answer would be same only."
                    },
                    {
                        "username": "Fath123",
                        "content": "somehow the last test case answer i got here differs with the one i got on vsc. idk how the vsc one can gives the right answer just fine but not here."
                    },
                    {
                        "username": "praveenselvaraj27",
                        "content": " `class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int max=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            for(int j=i+1;j<=s.length();j++)\\n            {\\n                String a=s.substring(i,j);\\n                System.out.println(a);\\n                char[] arr= a.toCharArray();\\n                Set<Character> set= new LinkedHashSet<>();\\n                \\n                for(char g:arr)\\n                {\\n                    set.add(g);\\n                }\\n                if(a.length()==set.size()&&set.size()>max)\\n                max=set.size();\\n            }\\n        }\\n        return max;\\n    }\\n}`\\n\\n822/987 testcases passed"
                    },
                    {
                        "username": "bighub",
                        "content": "in case someone use String.valueOf(CHAR), that is slower. So reconsider to use String or Char as your data structure"
                    },
                    {
                        "username": "Nton118",
                        "content": "986 / 987 testcases passed ??? Time limit Exceeded. What am I doing wrong?"
                    },
                    {
                        "username": "warkeyli",
                        "content": "Same here ... but seems the testcase is legal."
                    },
                    {
                        "username": "pixer83",
                        "content": "can anyone help me with the logic here, I know where i\\'m going wrong just wanted to know how do i handle them.\\n if(s.length()<2)\\n        return s.length();\\n        int count=0;\\n        int maxcount=0;\\n        int countarr[]=new int[128];\\n        Arrays.fill(countarr,-1);\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(countarr[s.charAt(i)]==-1){\\n                countarr[s.charAt(i)]=i;\\n                count++;\\n                maxcount=Math.max(maxcount,count);\\n            }\\n            else{\\n                count-=(countarr[s.charAt(i)]);\\n                \\n                countarr[s.charAt(i)]=i;\\n                //count++;\\n                \\n                //maxcount=Math.max(maxcount,count);\\n            }\\n            System.out.println(count+\"\"+maxcount);\\n            \\n        }\\n        return maxcount;"
                    },
                    {
                        "username": "Subh001",
                        "content": "can someone explain why \"qrsvbspk\"  has output of 5"
                    },
                    {
                        "username": "PiBiHungary",
                        "content": "[@Yongbi](/Yongbi) why not the first part: \"qrsvb\"?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Subh001](/Subh001) because the correct answer is `\"vbspk\"` !"
                    },
                    {
                        "username": "hsiehro",
                        "content": "Given \"jbpnbwwd\" and the expected answer is 4. But why? Shouldn\\'t it be \"bpnwd\" which is counted as 5? Please explain, thanks~"
                    },
                    {
                        "username": "AMerrill",
                        "content": "[@hsiehro](/hsiehro) The characters must be contiguous and so the answer should be $$4$$, with two possible solutions: \"jbpn\" or \"pnbw\". Every other longer substring contains either $$2$$ *b*\\'s or $$2$$ *w*\\'s. "
                    },
                    {
                        "username": "hsiehro",
                        "content": "[@Yongbi](/Yongbi) Thanks for the help. I ran my code submission again. The original input is still \"jbpnbwwd\", and the expected answer is 4. That\\'s why it puzzles me. Maybe I\\'m missing something basic from the requirements?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@RogerH](/hsiehro) I think the original input is `\"jbpnbwd\"` then the expected output is `\" pnbwd\" `!"
                    },
                    {
                        "username": "gotzesoham19",
                        "content": "My code ends at line number 22, yet when I Run the code in the site it says the following: \"Line 25: Char 5: error: conflicting types for \\u2018main\\u2019 [solution.c]\\n int main(int argc, char *argv[]) {\\n     ^~~~\".\\nthe code is running absolutely error free in my vs code editor. Somebody help me out"
                    },
                    {
                        "username": "janis__",
                        "content": "The error suggests that the online platform might have its own main function for testing, so you should remove or comment out your main function before submitting on that platform."
                    }
                ]
            },
            {
                "id": 1796868,
                "content": [
                    {
                        "username": "arkad579",
                        "content": "s = \"pwwkew\" \\nIn here \"kew\" could also be a substring...Am i wrong?"
                    },
                    {
                        "username": "user1633nb",
                        "content": "[@Yongbi](/Yongbi) Question is asking for length only not string"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Arka Das](/arkad579) You r right, but `\"wke\"` comes first, so the corrected answer is `\"wke\"` (the left to right system!)."
                    },
                    {
                        "username": "cagils",
                        "content": "Javascript code tips for a sliding window approach of O(2n) = O(n)\\n```js\\nvar lengthOfLongestSubstring = function(s) {\\n    const f = {} // a simple boolean hashmap to store if the character occured\\n\\tlet a = 0, b = 0, max = 0 // left index and right index of window and the result\\n\\n    if (s.length < 2) return s.length; // a short circuit for simple cases\\n    while (b < s.length) {\\n        while (f[s[b]]) XXXXXX // A single line can be written here to both reset all indices from \\'a\\' to \\'b\\' while also increasing \\'a\\'\\n        f[s[b]] = 1\\n        max = XXXXXXX // A single line can be written here to both calculate max and increase \\'b\\'.\\n\\t}\\n    return max    \\n};\\n```"
                    },
                    {
                        "username": "ahrorbekOlimjonov",
                        "content": "why there is strings.Cut  not working in Go"
                    },
                    {
                        "username": "dilsherb",
                        "content": "what leetcode is doing today. they are providing invalid testcases. in this challenge they are providing test case s = [2,4,3] but expected was string."
                    },
                    {
                        "username": "juansymontano",
                        "content": "It does not matter what your substring is as long as you return the highest amount of characters. Keeping this in mind should make this problem easy."
                    },
                    {
                        "username": "Amankirat",
                        "content": "Why \"bca\" isn\\'t a longest string in \"abcabcbb\" example?"
                    },
                    {
                        "username": "PiBiHungary",
                        "content": "Hello, what is the diff between \"abc\" and \"bca\"? Both of them are 3. And \"abc\" starts sooner."
                    },
                    {
                        "username": "hirokish",
                        "content": "I couldn\\'t understand why `\"abcb\"` subsequence in Case1 isn\\'t accepted until I see the solutions.\\nThe terminology of \"substring\" can be clearer with the word \"subsequence that doesn\\'t contain duplicate of character of a kind.\" or something similar"
                    },
                    {
                        "username": "sanyammaheshwari2003",
                        "content": "Approach \\nSliding Window \\n\\nComplexity \\n\\nTime complexity: O(N)\\n Space complexity: O(1)\\n\\nSolution down here\\nhttps://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3140210/easy-optimized-and-efficient/"
                    },
                    {
                        "username": "liuyao201212",
                        "content": "Hi, here is my Java answer. It passed 984/987 test cases and stuck in the input \"hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\". \\n\\nI think my approach is quite similar with the sliding window answer. Could anyone help me to explain why my method doesn\\'t work? Thanks in advance.\\n `your inline code...your inline code...` `your inline code...your inline code...`\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        if(s.length() <= 0){\\n            return s.length();\\n        }\\n        if(s.isBlank()){\\n            return 1;\\n        }\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        for(int i = 0; i<26; i++){\\n            map.put((char)((int)\\'a\\'+i), 1);\\n            map.put((char)((int)\\'A\\'+i), 1);\\n        }\\n        int maxLength = 1;\\n        int left = 0; \\n        map.put(s.charAt(0), 0);\\n        int right = 1;\\n        while(left<right && right<s.length()){\\n            char currChar = s.charAt(right);\\n            if(map.containsKey(currChar) && map.get(currChar)==1){\\n                map.put(currChar, 0);\\n            }\\n            else{\\n                map.remove(currChar);\\n            }\\n            while(left<right && map.size()!=52){\\n                char leftChar = s.charAt(left);\\n                if(map.containsKey(leftChar)){\\n                    map.put(leftChar, 1);\\n                }\\n                else{\\n                    map.put(leftChar, 0);\\n                }\\n                left++;\\n            }\\n            maxLength = Integer.max(maxLength, right-left+1);\\n            right++;\\n        }\\n        return maxLength;\\n    }\\n}"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code is inefficient because when a repeated character is found, you\\'re removing characters from the map and then re-adding them, which is unnecessary and time-consuming for long strings. Instead of removing and re-adding characters, just update the index of the character in the map and adjust the left pointer accordingly to ensure the current window doesn\\'t have duplicates."
                    },
                    {
                        "username": "Aka_Nick",
                        "content": "I tried using split but it does\\'nt work for string with consequtive letters\\n"
                    }
                ]
            },
            {
                "id": 1796504,
                "content": [
                    {
                        "username": "arkad579",
                        "content": "s = \"pwwkew\" \\nIn here \"kew\" could also be a substring...Am i wrong?"
                    },
                    {
                        "username": "user1633nb",
                        "content": "[@Yongbi](/Yongbi) Question is asking for length only not string"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Arka Das](/arkad579) You r right, but `\"wke\"` comes first, so the corrected answer is `\"wke\"` (the left to right system!)."
                    },
                    {
                        "username": "cagils",
                        "content": "Javascript code tips for a sliding window approach of O(2n) = O(n)\\n```js\\nvar lengthOfLongestSubstring = function(s) {\\n    const f = {} // a simple boolean hashmap to store if the character occured\\n\\tlet a = 0, b = 0, max = 0 // left index and right index of window and the result\\n\\n    if (s.length < 2) return s.length; // a short circuit for simple cases\\n    while (b < s.length) {\\n        while (f[s[b]]) XXXXXX // A single line can be written here to both reset all indices from \\'a\\' to \\'b\\' while also increasing \\'a\\'\\n        f[s[b]] = 1\\n        max = XXXXXXX // A single line can be written here to both calculate max and increase \\'b\\'.\\n\\t}\\n    return max    \\n};\\n```"
                    },
                    {
                        "username": "ahrorbekOlimjonov",
                        "content": "why there is strings.Cut  not working in Go"
                    },
                    {
                        "username": "dilsherb",
                        "content": "what leetcode is doing today. they are providing invalid testcases. in this challenge they are providing test case s = [2,4,3] but expected was string."
                    },
                    {
                        "username": "juansymontano",
                        "content": "It does not matter what your substring is as long as you return the highest amount of characters. Keeping this in mind should make this problem easy."
                    },
                    {
                        "username": "Amankirat",
                        "content": "Why \"bca\" isn\\'t a longest string in \"abcabcbb\" example?"
                    },
                    {
                        "username": "PiBiHungary",
                        "content": "Hello, what is the diff between \"abc\" and \"bca\"? Both of them are 3. And \"abc\" starts sooner."
                    },
                    {
                        "username": "hirokish",
                        "content": "I couldn\\'t understand why `\"abcb\"` subsequence in Case1 isn\\'t accepted until I see the solutions.\\nThe terminology of \"substring\" can be clearer with the word \"subsequence that doesn\\'t contain duplicate of character of a kind.\" or something similar"
                    },
                    {
                        "username": "sanyammaheshwari2003",
                        "content": "Approach \\nSliding Window \\n\\nComplexity \\n\\nTime complexity: O(N)\\n Space complexity: O(1)\\n\\nSolution down here\\nhttps://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3140210/easy-optimized-and-efficient/"
                    },
                    {
                        "username": "liuyao201212",
                        "content": "Hi, here is my Java answer. It passed 984/987 test cases and stuck in the input \"hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\". \\n\\nI think my approach is quite similar with the sliding window answer. Could anyone help me to explain why my method doesn\\'t work? Thanks in advance.\\n `your inline code...your inline code...` `your inline code...your inline code...`\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        if(s.length() <= 0){\\n            return s.length();\\n        }\\n        if(s.isBlank()){\\n            return 1;\\n        }\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        for(int i = 0; i<26; i++){\\n            map.put((char)((int)\\'a\\'+i), 1);\\n            map.put((char)((int)\\'A\\'+i), 1);\\n        }\\n        int maxLength = 1;\\n        int left = 0; \\n        map.put(s.charAt(0), 0);\\n        int right = 1;\\n        while(left<right && right<s.length()){\\n            char currChar = s.charAt(right);\\n            if(map.containsKey(currChar) && map.get(currChar)==1){\\n                map.put(currChar, 0);\\n            }\\n            else{\\n                map.remove(currChar);\\n            }\\n            while(left<right && map.size()!=52){\\n                char leftChar = s.charAt(left);\\n                if(map.containsKey(leftChar)){\\n                    map.put(leftChar, 1);\\n                }\\n                else{\\n                    map.put(leftChar, 0);\\n                }\\n                left++;\\n            }\\n            maxLength = Integer.max(maxLength, right-left+1);\\n            right++;\\n        }\\n        return maxLength;\\n    }\\n}"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code is inefficient because when a repeated character is found, you\\'re removing characters from the map and then re-adding them, which is unnecessary and time-consuming for long strings. Instead of removing and re-adding characters, just update the index of the character in the map and adjust the left pointer accordingly to ensure the current window doesn\\'t have duplicates."
                    },
                    {
                        "username": "Aka_Nick",
                        "content": "I tried using split but it does\\'nt work for string with consequtive letters\\n"
                    }
                ]
            },
            {
                "id": 1793137,
                "content": [
                    {
                        "username": "arkad579",
                        "content": "s = \"pwwkew\" \\nIn here \"kew\" could also be a substring...Am i wrong?"
                    },
                    {
                        "username": "user1633nb",
                        "content": "[@Yongbi](/Yongbi) Question is asking for length only not string"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Arka Das](/arkad579) You r right, but `\"wke\"` comes first, so the corrected answer is `\"wke\"` (the left to right system!)."
                    },
                    {
                        "username": "cagils",
                        "content": "Javascript code tips for a sliding window approach of O(2n) = O(n)\\n```js\\nvar lengthOfLongestSubstring = function(s) {\\n    const f = {} // a simple boolean hashmap to store if the character occured\\n\\tlet a = 0, b = 0, max = 0 // left index and right index of window and the result\\n\\n    if (s.length < 2) return s.length; // a short circuit for simple cases\\n    while (b < s.length) {\\n        while (f[s[b]]) XXXXXX // A single line can be written here to both reset all indices from \\'a\\' to \\'b\\' while also increasing \\'a\\'\\n        f[s[b]] = 1\\n        max = XXXXXXX // A single line can be written here to both calculate max and increase \\'b\\'.\\n\\t}\\n    return max    \\n};\\n```"
                    },
                    {
                        "username": "ahrorbekOlimjonov",
                        "content": "why there is strings.Cut  not working in Go"
                    },
                    {
                        "username": "dilsherb",
                        "content": "what leetcode is doing today. they are providing invalid testcases. in this challenge they are providing test case s = [2,4,3] but expected was string."
                    },
                    {
                        "username": "juansymontano",
                        "content": "It does not matter what your substring is as long as you return the highest amount of characters. Keeping this in mind should make this problem easy."
                    },
                    {
                        "username": "Amankirat",
                        "content": "Why \"bca\" isn\\'t a longest string in \"abcabcbb\" example?"
                    },
                    {
                        "username": "PiBiHungary",
                        "content": "Hello, what is the diff between \"abc\" and \"bca\"? Both of them are 3. And \"abc\" starts sooner."
                    },
                    {
                        "username": "hirokish",
                        "content": "I couldn\\'t understand why `\"abcb\"` subsequence in Case1 isn\\'t accepted until I see the solutions.\\nThe terminology of \"substring\" can be clearer with the word \"subsequence that doesn\\'t contain duplicate of character of a kind.\" or something similar"
                    },
                    {
                        "username": "sanyammaheshwari2003",
                        "content": "Approach \\nSliding Window \\n\\nComplexity \\n\\nTime complexity: O(N)\\n Space complexity: O(1)\\n\\nSolution down here\\nhttps://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3140210/easy-optimized-and-efficient/"
                    },
                    {
                        "username": "liuyao201212",
                        "content": "Hi, here is my Java answer. It passed 984/987 test cases and stuck in the input \"hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\". \\n\\nI think my approach is quite similar with the sliding window answer. Could anyone help me to explain why my method doesn\\'t work? Thanks in advance.\\n `your inline code...your inline code...` `your inline code...your inline code...`\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        if(s.length() <= 0){\\n            return s.length();\\n        }\\n        if(s.isBlank()){\\n            return 1;\\n        }\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        for(int i = 0; i<26; i++){\\n            map.put((char)((int)\\'a\\'+i), 1);\\n            map.put((char)((int)\\'A\\'+i), 1);\\n        }\\n        int maxLength = 1;\\n        int left = 0; \\n        map.put(s.charAt(0), 0);\\n        int right = 1;\\n        while(left<right && right<s.length()){\\n            char currChar = s.charAt(right);\\n            if(map.containsKey(currChar) && map.get(currChar)==1){\\n                map.put(currChar, 0);\\n            }\\n            else{\\n                map.remove(currChar);\\n            }\\n            while(left<right && map.size()!=52){\\n                char leftChar = s.charAt(left);\\n                if(map.containsKey(leftChar)){\\n                    map.put(leftChar, 1);\\n                }\\n                else{\\n                    map.put(leftChar, 0);\\n                }\\n                left++;\\n            }\\n            maxLength = Integer.max(maxLength, right-left+1);\\n            right++;\\n        }\\n        return maxLength;\\n    }\\n}"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code is inefficient because when a repeated character is found, you\\'re removing characters from the map and then re-adding them, which is unnecessary and time-consuming for long strings. Instead of removing and re-adding characters, just update the index of the character in the map and adjust the left pointer accordingly to ensure the current window doesn\\'t have duplicates."
                    },
                    {
                        "username": "Aka_Nick",
                        "content": "I tried using split but it does\\'nt work for string with consequtive letters\\n"
                    }
                ]
            },
            {
                "id": 1791873,
                "content": [
                    {
                        "username": "arkad579",
                        "content": "s = \"pwwkew\" \\nIn here \"kew\" could also be a substring...Am i wrong?"
                    },
                    {
                        "username": "user1633nb",
                        "content": "[@Yongbi](/Yongbi) Question is asking for length only not string"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Arka Das](/arkad579) You r right, but `\"wke\"` comes first, so the corrected answer is `\"wke\"` (the left to right system!)."
                    },
                    {
                        "username": "cagils",
                        "content": "Javascript code tips for a sliding window approach of O(2n) = O(n)\\n```js\\nvar lengthOfLongestSubstring = function(s) {\\n    const f = {} // a simple boolean hashmap to store if the character occured\\n\\tlet a = 0, b = 0, max = 0 // left index and right index of window and the result\\n\\n    if (s.length < 2) return s.length; // a short circuit for simple cases\\n    while (b < s.length) {\\n        while (f[s[b]]) XXXXXX // A single line can be written here to both reset all indices from \\'a\\' to \\'b\\' while also increasing \\'a\\'\\n        f[s[b]] = 1\\n        max = XXXXXXX // A single line can be written here to both calculate max and increase \\'b\\'.\\n\\t}\\n    return max    \\n};\\n```"
                    },
                    {
                        "username": "ahrorbekOlimjonov",
                        "content": "why there is strings.Cut  not working in Go"
                    },
                    {
                        "username": "dilsherb",
                        "content": "what leetcode is doing today. they are providing invalid testcases. in this challenge they are providing test case s = [2,4,3] but expected was string."
                    },
                    {
                        "username": "juansymontano",
                        "content": "It does not matter what your substring is as long as you return the highest amount of characters. Keeping this in mind should make this problem easy."
                    },
                    {
                        "username": "Amankirat",
                        "content": "Why \"bca\" isn\\'t a longest string in \"abcabcbb\" example?"
                    },
                    {
                        "username": "PiBiHungary",
                        "content": "Hello, what is the diff between \"abc\" and \"bca\"? Both of them are 3. And \"abc\" starts sooner."
                    },
                    {
                        "username": "hirokish",
                        "content": "I couldn\\'t understand why `\"abcb\"` subsequence in Case1 isn\\'t accepted until I see the solutions.\\nThe terminology of \"substring\" can be clearer with the word \"subsequence that doesn\\'t contain duplicate of character of a kind.\" or something similar"
                    },
                    {
                        "username": "sanyammaheshwari2003",
                        "content": "Approach \\nSliding Window \\n\\nComplexity \\n\\nTime complexity: O(N)\\n Space complexity: O(1)\\n\\nSolution down here\\nhttps://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3140210/easy-optimized-and-efficient/"
                    },
                    {
                        "username": "liuyao201212",
                        "content": "Hi, here is my Java answer. It passed 984/987 test cases and stuck in the input \"hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\". \\n\\nI think my approach is quite similar with the sliding window answer. Could anyone help me to explain why my method doesn\\'t work? Thanks in advance.\\n `your inline code...your inline code...` `your inline code...your inline code...`\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        if(s.length() <= 0){\\n            return s.length();\\n        }\\n        if(s.isBlank()){\\n            return 1;\\n        }\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        for(int i = 0; i<26; i++){\\n            map.put((char)((int)\\'a\\'+i), 1);\\n            map.put((char)((int)\\'A\\'+i), 1);\\n        }\\n        int maxLength = 1;\\n        int left = 0; \\n        map.put(s.charAt(0), 0);\\n        int right = 1;\\n        while(left<right && right<s.length()){\\n            char currChar = s.charAt(right);\\n            if(map.containsKey(currChar) && map.get(currChar)==1){\\n                map.put(currChar, 0);\\n            }\\n            else{\\n                map.remove(currChar);\\n            }\\n            while(left<right && map.size()!=52){\\n                char leftChar = s.charAt(left);\\n                if(map.containsKey(leftChar)){\\n                    map.put(leftChar, 1);\\n                }\\n                else{\\n                    map.put(leftChar, 0);\\n                }\\n                left++;\\n            }\\n            maxLength = Integer.max(maxLength, right-left+1);\\n            right++;\\n        }\\n        return maxLength;\\n    }\\n}"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code is inefficient because when a repeated character is found, you\\'re removing characters from the map and then re-adding them, which is unnecessary and time-consuming for long strings. Instead of removing and re-adding characters, just update the index of the character in the map and adjust the left pointer accordingly to ensure the current window doesn\\'t have duplicates."
                    },
                    {
                        "username": "Aka_Nick",
                        "content": "I tried using split but it does\\'nt work for string with consequtive letters\\n"
                    }
                ]
            },
            {
                "id": 1790519,
                "content": [
                    {
                        "username": "arkad579",
                        "content": "s = \"pwwkew\" \\nIn here \"kew\" could also be a substring...Am i wrong?"
                    },
                    {
                        "username": "user1633nb",
                        "content": "[@Yongbi](/Yongbi) Question is asking for length only not string"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Arka Das](/arkad579) You r right, but `\"wke\"` comes first, so the corrected answer is `\"wke\"` (the left to right system!)."
                    },
                    {
                        "username": "cagils",
                        "content": "Javascript code tips for a sliding window approach of O(2n) = O(n)\\n```js\\nvar lengthOfLongestSubstring = function(s) {\\n    const f = {} // a simple boolean hashmap to store if the character occured\\n\\tlet a = 0, b = 0, max = 0 // left index and right index of window and the result\\n\\n    if (s.length < 2) return s.length; // a short circuit for simple cases\\n    while (b < s.length) {\\n        while (f[s[b]]) XXXXXX // A single line can be written here to both reset all indices from \\'a\\' to \\'b\\' while also increasing \\'a\\'\\n        f[s[b]] = 1\\n        max = XXXXXXX // A single line can be written here to both calculate max and increase \\'b\\'.\\n\\t}\\n    return max    \\n};\\n```"
                    },
                    {
                        "username": "ahrorbekOlimjonov",
                        "content": "why there is strings.Cut  not working in Go"
                    },
                    {
                        "username": "dilsherb",
                        "content": "what leetcode is doing today. they are providing invalid testcases. in this challenge they are providing test case s = [2,4,3] but expected was string."
                    },
                    {
                        "username": "juansymontano",
                        "content": "It does not matter what your substring is as long as you return the highest amount of characters. Keeping this in mind should make this problem easy."
                    },
                    {
                        "username": "Amankirat",
                        "content": "Why \"bca\" isn\\'t a longest string in \"abcabcbb\" example?"
                    },
                    {
                        "username": "PiBiHungary",
                        "content": "Hello, what is the diff between \"abc\" and \"bca\"? Both of them are 3. And \"abc\" starts sooner."
                    },
                    {
                        "username": "hirokish",
                        "content": "I couldn\\'t understand why `\"abcb\"` subsequence in Case1 isn\\'t accepted until I see the solutions.\\nThe terminology of \"substring\" can be clearer with the word \"subsequence that doesn\\'t contain duplicate of character of a kind.\" or something similar"
                    },
                    {
                        "username": "sanyammaheshwari2003",
                        "content": "Approach \\nSliding Window \\n\\nComplexity \\n\\nTime complexity: O(N)\\n Space complexity: O(1)\\n\\nSolution down here\\nhttps://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3140210/easy-optimized-and-efficient/"
                    },
                    {
                        "username": "liuyao201212",
                        "content": "Hi, here is my Java answer. It passed 984/987 test cases and stuck in the input \"hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\". \\n\\nI think my approach is quite similar with the sliding window answer. Could anyone help me to explain why my method doesn\\'t work? Thanks in advance.\\n `your inline code...your inline code...` `your inline code...your inline code...`\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        if(s.length() <= 0){\\n            return s.length();\\n        }\\n        if(s.isBlank()){\\n            return 1;\\n        }\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        for(int i = 0; i<26; i++){\\n            map.put((char)((int)\\'a\\'+i), 1);\\n            map.put((char)((int)\\'A\\'+i), 1);\\n        }\\n        int maxLength = 1;\\n        int left = 0; \\n        map.put(s.charAt(0), 0);\\n        int right = 1;\\n        while(left<right && right<s.length()){\\n            char currChar = s.charAt(right);\\n            if(map.containsKey(currChar) && map.get(currChar)==1){\\n                map.put(currChar, 0);\\n            }\\n            else{\\n                map.remove(currChar);\\n            }\\n            while(left<right && map.size()!=52){\\n                char leftChar = s.charAt(left);\\n                if(map.containsKey(leftChar)){\\n                    map.put(leftChar, 1);\\n                }\\n                else{\\n                    map.put(leftChar, 0);\\n                }\\n                left++;\\n            }\\n            maxLength = Integer.max(maxLength, right-left+1);\\n            right++;\\n        }\\n        return maxLength;\\n    }\\n}"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code is inefficient because when a repeated character is found, you\\'re removing characters from the map and then re-adding them, which is unnecessary and time-consuming for long strings. Instead of removing and re-adding characters, just update the index of the character in the map and adjust the left pointer accordingly to ensure the current window doesn\\'t have duplicates."
                    },
                    {
                        "username": "Aka_Nick",
                        "content": "I tried using split but it does\\'nt work for string with consequtive letters\\n"
                    }
                ]
            },
            {
                "id": 1789897,
                "content": [
                    {
                        "username": "arkad579",
                        "content": "s = \"pwwkew\" \\nIn here \"kew\" could also be a substring...Am i wrong?"
                    },
                    {
                        "username": "user1633nb",
                        "content": "[@Yongbi](/Yongbi) Question is asking for length only not string"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Arka Das](/arkad579) You r right, but `\"wke\"` comes first, so the corrected answer is `\"wke\"` (the left to right system!)."
                    },
                    {
                        "username": "cagils",
                        "content": "Javascript code tips for a sliding window approach of O(2n) = O(n)\\n```js\\nvar lengthOfLongestSubstring = function(s) {\\n    const f = {} // a simple boolean hashmap to store if the character occured\\n\\tlet a = 0, b = 0, max = 0 // left index and right index of window and the result\\n\\n    if (s.length < 2) return s.length; // a short circuit for simple cases\\n    while (b < s.length) {\\n        while (f[s[b]]) XXXXXX // A single line can be written here to both reset all indices from \\'a\\' to \\'b\\' while also increasing \\'a\\'\\n        f[s[b]] = 1\\n        max = XXXXXXX // A single line can be written here to both calculate max and increase \\'b\\'.\\n\\t}\\n    return max    \\n};\\n```"
                    },
                    {
                        "username": "ahrorbekOlimjonov",
                        "content": "why there is strings.Cut  not working in Go"
                    },
                    {
                        "username": "dilsherb",
                        "content": "what leetcode is doing today. they are providing invalid testcases. in this challenge they are providing test case s = [2,4,3] but expected was string."
                    },
                    {
                        "username": "juansymontano",
                        "content": "It does not matter what your substring is as long as you return the highest amount of characters. Keeping this in mind should make this problem easy."
                    },
                    {
                        "username": "Amankirat",
                        "content": "Why \"bca\" isn\\'t a longest string in \"abcabcbb\" example?"
                    },
                    {
                        "username": "PiBiHungary",
                        "content": "Hello, what is the diff between \"abc\" and \"bca\"? Both of them are 3. And \"abc\" starts sooner."
                    },
                    {
                        "username": "hirokish",
                        "content": "I couldn\\'t understand why `\"abcb\"` subsequence in Case1 isn\\'t accepted until I see the solutions.\\nThe terminology of \"substring\" can be clearer with the word \"subsequence that doesn\\'t contain duplicate of character of a kind.\" or something similar"
                    },
                    {
                        "username": "sanyammaheshwari2003",
                        "content": "Approach \\nSliding Window \\n\\nComplexity \\n\\nTime complexity: O(N)\\n Space complexity: O(1)\\n\\nSolution down here\\nhttps://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3140210/easy-optimized-and-efficient/"
                    },
                    {
                        "username": "liuyao201212",
                        "content": "Hi, here is my Java answer. It passed 984/987 test cases and stuck in the input \"hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\". \\n\\nI think my approach is quite similar with the sliding window answer. Could anyone help me to explain why my method doesn\\'t work? Thanks in advance.\\n `your inline code...your inline code...` `your inline code...your inline code...`\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        if(s.length() <= 0){\\n            return s.length();\\n        }\\n        if(s.isBlank()){\\n            return 1;\\n        }\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        for(int i = 0; i<26; i++){\\n            map.put((char)((int)\\'a\\'+i), 1);\\n            map.put((char)((int)\\'A\\'+i), 1);\\n        }\\n        int maxLength = 1;\\n        int left = 0; \\n        map.put(s.charAt(0), 0);\\n        int right = 1;\\n        while(left<right && right<s.length()){\\n            char currChar = s.charAt(right);\\n            if(map.containsKey(currChar) && map.get(currChar)==1){\\n                map.put(currChar, 0);\\n            }\\n            else{\\n                map.remove(currChar);\\n            }\\n            while(left<right && map.size()!=52){\\n                char leftChar = s.charAt(left);\\n                if(map.containsKey(leftChar)){\\n                    map.put(leftChar, 1);\\n                }\\n                else{\\n                    map.put(leftChar, 0);\\n                }\\n                left++;\\n            }\\n            maxLength = Integer.max(maxLength, right-left+1);\\n            right++;\\n        }\\n        return maxLength;\\n    }\\n}"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code is inefficient because when a repeated character is found, you\\'re removing characters from the map and then re-adding them, which is unnecessary and time-consuming for long strings. Instead of removing and re-adding characters, just update the index of the character in the map and adjust the left pointer accordingly to ensure the current window doesn\\'t have duplicates."
                    },
                    {
                        "username": "Aka_Nick",
                        "content": "I tried using split but it does\\'nt work for string with consequtive letters\\n"
                    }
                ]
            },
            {
                "id": 1788281,
                "content": [
                    {
                        "username": "arkad579",
                        "content": "s = \"pwwkew\" \\nIn here \"kew\" could also be a substring...Am i wrong?"
                    },
                    {
                        "username": "user1633nb",
                        "content": "[@Yongbi](/Yongbi) Question is asking for length only not string"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Arka Das](/arkad579) You r right, but `\"wke\"` comes first, so the corrected answer is `\"wke\"` (the left to right system!)."
                    },
                    {
                        "username": "cagils",
                        "content": "Javascript code tips for a sliding window approach of O(2n) = O(n)\\n```js\\nvar lengthOfLongestSubstring = function(s) {\\n    const f = {} // a simple boolean hashmap to store if the character occured\\n\\tlet a = 0, b = 0, max = 0 // left index and right index of window and the result\\n\\n    if (s.length < 2) return s.length; // a short circuit for simple cases\\n    while (b < s.length) {\\n        while (f[s[b]]) XXXXXX // A single line can be written here to both reset all indices from \\'a\\' to \\'b\\' while also increasing \\'a\\'\\n        f[s[b]] = 1\\n        max = XXXXXXX // A single line can be written here to both calculate max and increase \\'b\\'.\\n\\t}\\n    return max    \\n};\\n```"
                    },
                    {
                        "username": "ahrorbekOlimjonov",
                        "content": "why there is strings.Cut  not working in Go"
                    },
                    {
                        "username": "dilsherb",
                        "content": "what leetcode is doing today. they are providing invalid testcases. in this challenge they are providing test case s = [2,4,3] but expected was string."
                    },
                    {
                        "username": "juansymontano",
                        "content": "It does not matter what your substring is as long as you return the highest amount of characters. Keeping this in mind should make this problem easy."
                    },
                    {
                        "username": "Amankirat",
                        "content": "Why \"bca\" isn\\'t a longest string in \"abcabcbb\" example?"
                    },
                    {
                        "username": "PiBiHungary",
                        "content": "Hello, what is the diff between \"abc\" and \"bca\"? Both of them are 3. And \"abc\" starts sooner."
                    },
                    {
                        "username": "hirokish",
                        "content": "I couldn\\'t understand why `\"abcb\"` subsequence in Case1 isn\\'t accepted until I see the solutions.\\nThe terminology of \"substring\" can be clearer with the word \"subsequence that doesn\\'t contain duplicate of character of a kind.\" or something similar"
                    },
                    {
                        "username": "sanyammaheshwari2003",
                        "content": "Approach \\nSliding Window \\n\\nComplexity \\n\\nTime complexity: O(N)\\n Space complexity: O(1)\\n\\nSolution down here\\nhttps://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3140210/easy-optimized-and-efficient/"
                    },
                    {
                        "username": "liuyao201212",
                        "content": "Hi, here is my Java answer. It passed 984/987 test cases and stuck in the input \"hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\". \\n\\nI think my approach is quite similar with the sliding window answer. Could anyone help me to explain why my method doesn\\'t work? Thanks in advance.\\n `your inline code...your inline code...` `your inline code...your inline code...`\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        if(s.length() <= 0){\\n            return s.length();\\n        }\\n        if(s.isBlank()){\\n            return 1;\\n        }\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        for(int i = 0; i<26; i++){\\n            map.put((char)((int)\\'a\\'+i), 1);\\n            map.put((char)((int)\\'A\\'+i), 1);\\n        }\\n        int maxLength = 1;\\n        int left = 0; \\n        map.put(s.charAt(0), 0);\\n        int right = 1;\\n        while(left<right && right<s.length()){\\n            char currChar = s.charAt(right);\\n            if(map.containsKey(currChar) && map.get(currChar)==1){\\n                map.put(currChar, 0);\\n            }\\n            else{\\n                map.remove(currChar);\\n            }\\n            while(left<right && map.size()!=52){\\n                char leftChar = s.charAt(left);\\n                if(map.containsKey(leftChar)){\\n                    map.put(leftChar, 1);\\n                }\\n                else{\\n                    map.put(leftChar, 0);\\n                }\\n                left++;\\n            }\\n            maxLength = Integer.max(maxLength, right-left+1);\\n            right++;\\n        }\\n        return maxLength;\\n    }\\n}"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code is inefficient because when a repeated character is found, you\\'re removing characters from the map and then re-adding them, which is unnecessary and time-consuming for long strings. Instead of removing and re-adding characters, just update the index of the character in the map and adjust the left pointer accordingly to ensure the current window doesn\\'t have duplicates."
                    },
                    {
                        "username": "Aka_Nick",
                        "content": "I tried using split but it does\\'nt work for string with consequtive letters\\n"
                    }
                ]
            },
            {
                "id": 1787127,
                "content": [
                    {
                        "username": "arkad579",
                        "content": "s = \"pwwkew\" \\nIn here \"kew\" could also be a substring...Am i wrong?"
                    },
                    {
                        "username": "user1633nb",
                        "content": "[@Yongbi](/Yongbi) Question is asking for length only not string"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Arka Das](/arkad579) You r right, but `\"wke\"` comes first, so the corrected answer is `\"wke\"` (the left to right system!)."
                    },
                    {
                        "username": "cagils",
                        "content": "Javascript code tips for a sliding window approach of O(2n) = O(n)\\n```js\\nvar lengthOfLongestSubstring = function(s) {\\n    const f = {} // a simple boolean hashmap to store if the character occured\\n\\tlet a = 0, b = 0, max = 0 // left index and right index of window and the result\\n\\n    if (s.length < 2) return s.length; // a short circuit for simple cases\\n    while (b < s.length) {\\n        while (f[s[b]]) XXXXXX // A single line can be written here to both reset all indices from \\'a\\' to \\'b\\' while also increasing \\'a\\'\\n        f[s[b]] = 1\\n        max = XXXXXXX // A single line can be written here to both calculate max and increase \\'b\\'.\\n\\t}\\n    return max    \\n};\\n```"
                    },
                    {
                        "username": "ahrorbekOlimjonov",
                        "content": "why there is strings.Cut  not working in Go"
                    },
                    {
                        "username": "dilsherb",
                        "content": "what leetcode is doing today. they are providing invalid testcases. in this challenge they are providing test case s = [2,4,3] but expected was string."
                    },
                    {
                        "username": "juansymontano",
                        "content": "It does not matter what your substring is as long as you return the highest amount of characters. Keeping this in mind should make this problem easy."
                    },
                    {
                        "username": "Amankirat",
                        "content": "Why \"bca\" isn\\'t a longest string in \"abcabcbb\" example?"
                    },
                    {
                        "username": "PiBiHungary",
                        "content": "Hello, what is the diff between \"abc\" and \"bca\"? Both of them are 3. And \"abc\" starts sooner."
                    },
                    {
                        "username": "hirokish",
                        "content": "I couldn\\'t understand why `\"abcb\"` subsequence in Case1 isn\\'t accepted until I see the solutions.\\nThe terminology of \"substring\" can be clearer with the word \"subsequence that doesn\\'t contain duplicate of character of a kind.\" or something similar"
                    },
                    {
                        "username": "sanyammaheshwari2003",
                        "content": "Approach \\nSliding Window \\n\\nComplexity \\n\\nTime complexity: O(N)\\n Space complexity: O(1)\\n\\nSolution down here\\nhttps://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3140210/easy-optimized-and-efficient/"
                    },
                    {
                        "username": "liuyao201212",
                        "content": "Hi, here is my Java answer. It passed 984/987 test cases and stuck in the input \"hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\". \\n\\nI think my approach is quite similar with the sliding window answer. Could anyone help me to explain why my method doesn\\'t work? Thanks in advance.\\n `your inline code...your inline code...` `your inline code...your inline code...`\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        if(s.length() <= 0){\\n            return s.length();\\n        }\\n        if(s.isBlank()){\\n            return 1;\\n        }\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        for(int i = 0; i<26; i++){\\n            map.put((char)((int)\\'a\\'+i), 1);\\n            map.put((char)((int)\\'A\\'+i), 1);\\n        }\\n        int maxLength = 1;\\n        int left = 0; \\n        map.put(s.charAt(0), 0);\\n        int right = 1;\\n        while(left<right && right<s.length()){\\n            char currChar = s.charAt(right);\\n            if(map.containsKey(currChar) && map.get(currChar)==1){\\n                map.put(currChar, 0);\\n            }\\n            else{\\n                map.remove(currChar);\\n            }\\n            while(left<right && map.size()!=52){\\n                char leftChar = s.charAt(left);\\n                if(map.containsKey(leftChar)){\\n                    map.put(leftChar, 1);\\n                }\\n                else{\\n                    map.put(leftChar, 0);\\n                }\\n                left++;\\n            }\\n            maxLength = Integer.max(maxLength, right-left+1);\\n            right++;\\n        }\\n        return maxLength;\\n    }\\n}"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code is inefficient because when a repeated character is found, you\\'re removing characters from the map and then re-adding them, which is unnecessary and time-consuming for long strings. Instead of removing and re-adding characters, just update the index of the character in the map and adjust the left pointer accordingly to ensure the current window doesn\\'t have duplicates."
                    },
                    {
                        "username": "Aka_Nick",
                        "content": "I tried using split but it does\\'nt work for string with consequtive letters\\n"
                    }
                ]
            },
            {
                "id": 1786560,
                "content": [
                    {
                        "username": "arkad579",
                        "content": "s = \"pwwkew\" \\nIn here \"kew\" could also be a substring...Am i wrong?"
                    },
                    {
                        "username": "user1633nb",
                        "content": "[@Yongbi](/Yongbi) Question is asking for length only not string"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Arka Das](/arkad579) You r right, but `\"wke\"` comes first, so the corrected answer is `\"wke\"` (the left to right system!)."
                    },
                    {
                        "username": "cagils",
                        "content": "Javascript code tips for a sliding window approach of O(2n) = O(n)\\n```js\\nvar lengthOfLongestSubstring = function(s) {\\n    const f = {} // a simple boolean hashmap to store if the character occured\\n\\tlet a = 0, b = 0, max = 0 // left index and right index of window and the result\\n\\n    if (s.length < 2) return s.length; // a short circuit for simple cases\\n    while (b < s.length) {\\n        while (f[s[b]]) XXXXXX // A single line can be written here to both reset all indices from \\'a\\' to \\'b\\' while also increasing \\'a\\'\\n        f[s[b]] = 1\\n        max = XXXXXXX // A single line can be written here to both calculate max and increase \\'b\\'.\\n\\t}\\n    return max    \\n};\\n```"
                    },
                    {
                        "username": "ahrorbekOlimjonov",
                        "content": "why there is strings.Cut  not working in Go"
                    },
                    {
                        "username": "dilsherb",
                        "content": "what leetcode is doing today. they are providing invalid testcases. in this challenge they are providing test case s = [2,4,3] but expected was string."
                    },
                    {
                        "username": "juansymontano",
                        "content": "It does not matter what your substring is as long as you return the highest amount of characters. Keeping this in mind should make this problem easy."
                    },
                    {
                        "username": "Amankirat",
                        "content": "Why \"bca\" isn\\'t a longest string in \"abcabcbb\" example?"
                    },
                    {
                        "username": "PiBiHungary",
                        "content": "Hello, what is the diff between \"abc\" and \"bca\"? Both of them are 3. And \"abc\" starts sooner."
                    },
                    {
                        "username": "hirokish",
                        "content": "I couldn\\'t understand why `\"abcb\"` subsequence in Case1 isn\\'t accepted until I see the solutions.\\nThe terminology of \"substring\" can be clearer with the word \"subsequence that doesn\\'t contain duplicate of character of a kind.\" or something similar"
                    },
                    {
                        "username": "sanyammaheshwari2003",
                        "content": "Approach \\nSliding Window \\n\\nComplexity \\n\\nTime complexity: O(N)\\n Space complexity: O(1)\\n\\nSolution down here\\nhttps://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3140210/easy-optimized-and-efficient/"
                    },
                    {
                        "username": "liuyao201212",
                        "content": "Hi, here is my Java answer. It passed 984/987 test cases and stuck in the input \"hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\". \\n\\nI think my approach is quite similar with the sliding window answer. Could anyone help me to explain why my method doesn\\'t work? Thanks in advance.\\n `your inline code...your inline code...` `your inline code...your inline code...`\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        if(s.length() <= 0){\\n            return s.length();\\n        }\\n        if(s.isBlank()){\\n            return 1;\\n        }\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        for(int i = 0; i<26; i++){\\n            map.put((char)((int)\\'a\\'+i), 1);\\n            map.put((char)((int)\\'A\\'+i), 1);\\n        }\\n        int maxLength = 1;\\n        int left = 0; \\n        map.put(s.charAt(0), 0);\\n        int right = 1;\\n        while(left<right && right<s.length()){\\n            char currChar = s.charAt(right);\\n            if(map.containsKey(currChar) && map.get(currChar)==1){\\n                map.put(currChar, 0);\\n            }\\n            else{\\n                map.remove(currChar);\\n            }\\n            while(left<right && map.size()!=52){\\n                char leftChar = s.charAt(left);\\n                if(map.containsKey(leftChar)){\\n                    map.put(leftChar, 1);\\n                }\\n                else{\\n                    map.put(leftChar, 0);\\n                }\\n                left++;\\n            }\\n            maxLength = Integer.max(maxLength, right-left+1);\\n            right++;\\n        }\\n        return maxLength;\\n    }\\n}"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code is inefficient because when a repeated character is found, you\\'re removing characters from the map and then re-adding them, which is unnecessary and time-consuming for long strings. Instead of removing and re-adding characters, just update the index of the character in the map and adjust the left pointer accordingly to ensure the current window doesn\\'t have duplicates."
                    },
                    {
                        "username": "Aka_Nick",
                        "content": "I tried using split but it does\\'nt work for string with consequtive letters\\n"
                    }
                ]
            },
            {
                "id": 1785579,
                "content": [
                    {
                        "username": "arkad579",
                        "content": "s = \"pwwkew\" \\nIn here \"kew\" could also be a substring...Am i wrong?"
                    },
                    {
                        "username": "user1633nb",
                        "content": "[@Yongbi](/Yongbi) Question is asking for length only not string"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Arka Das](/arkad579) You r right, but `\"wke\"` comes first, so the corrected answer is `\"wke\"` (the left to right system!)."
                    },
                    {
                        "username": "cagils",
                        "content": "Javascript code tips for a sliding window approach of O(2n) = O(n)\\n```js\\nvar lengthOfLongestSubstring = function(s) {\\n    const f = {} // a simple boolean hashmap to store if the character occured\\n\\tlet a = 0, b = 0, max = 0 // left index and right index of window and the result\\n\\n    if (s.length < 2) return s.length; // a short circuit for simple cases\\n    while (b < s.length) {\\n        while (f[s[b]]) XXXXXX // A single line can be written here to both reset all indices from \\'a\\' to \\'b\\' while also increasing \\'a\\'\\n        f[s[b]] = 1\\n        max = XXXXXXX // A single line can be written here to both calculate max and increase \\'b\\'.\\n\\t}\\n    return max    \\n};\\n```"
                    },
                    {
                        "username": "ahrorbekOlimjonov",
                        "content": "why there is strings.Cut  not working in Go"
                    },
                    {
                        "username": "dilsherb",
                        "content": "what leetcode is doing today. they are providing invalid testcases. in this challenge they are providing test case s = [2,4,3] but expected was string."
                    },
                    {
                        "username": "juansymontano",
                        "content": "It does not matter what your substring is as long as you return the highest amount of characters. Keeping this in mind should make this problem easy."
                    },
                    {
                        "username": "Amankirat",
                        "content": "Why \"bca\" isn\\'t a longest string in \"abcabcbb\" example?"
                    },
                    {
                        "username": "PiBiHungary",
                        "content": "Hello, what is the diff between \"abc\" and \"bca\"? Both of them are 3. And \"abc\" starts sooner."
                    },
                    {
                        "username": "hirokish",
                        "content": "I couldn\\'t understand why `\"abcb\"` subsequence in Case1 isn\\'t accepted until I see the solutions.\\nThe terminology of \"substring\" can be clearer with the word \"subsequence that doesn\\'t contain duplicate of character of a kind.\" or something similar"
                    },
                    {
                        "username": "sanyammaheshwari2003",
                        "content": "Approach \\nSliding Window \\n\\nComplexity \\n\\nTime complexity: O(N)\\n Space complexity: O(1)\\n\\nSolution down here\\nhttps://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3140210/easy-optimized-and-efficient/"
                    },
                    {
                        "username": "liuyao201212",
                        "content": "Hi, here is my Java answer. It passed 984/987 test cases and stuck in the input \"hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789hijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\". \\n\\nI think my approach is quite similar with the sliding window answer. Could anyone help me to explain why my method doesn\\'t work? Thanks in advance.\\n `your inline code...your inline code...` `your inline code...your inline code...`\\nclass Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        if(s.length() <= 0){\\n            return s.length();\\n        }\\n        if(s.isBlank()){\\n            return 1;\\n        }\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        for(int i = 0; i<26; i++){\\n            map.put((char)((int)\\'a\\'+i), 1);\\n            map.put((char)((int)\\'A\\'+i), 1);\\n        }\\n        int maxLength = 1;\\n        int left = 0; \\n        map.put(s.charAt(0), 0);\\n        int right = 1;\\n        while(left<right && right<s.length()){\\n            char currChar = s.charAt(right);\\n            if(map.containsKey(currChar) && map.get(currChar)==1){\\n                map.put(currChar, 0);\\n            }\\n            else{\\n                map.remove(currChar);\\n            }\\n            while(left<right && map.size()!=52){\\n                char leftChar = s.charAt(left);\\n                if(map.containsKey(leftChar)){\\n                    map.put(leftChar, 1);\\n                }\\n                else{\\n                    map.put(leftChar, 0);\\n                }\\n                left++;\\n            }\\n            maxLength = Integer.max(maxLength, right-left+1);\\n            right++;\\n        }\\n        return maxLength;\\n    }\\n}"
                    },
                    {
                        "username": "janis__",
                        "content": "Your code is inefficient because when a repeated character is found, you\\'re removing characters from the map and then re-adding them, which is unnecessary and time-consuming for long strings. Instead of removing and re-adding characters, just update the index of the character in the map and adjust the left pointer accordingly to ensure the current window doesn\\'t have duplicates."
                    },
                    {
                        "username": "Aka_Nick",
                        "content": "I tried using split but it does\\'nt work for string with consequtive letters\\n"
                    }
                ]
            },
            {
                "id": 1785087,
                "content": [
                    {
                        "username": "kapustin",
                        "content": "why does not it work?\\n\\nclass Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        result = len(set(s))\\n        return result"
                    },
                    {
                        "username": "lacost765123",
                        "content": "Does somebody faced with 987 test failing? I see input but can\\'t understand why answer \"95\" is wrong :((("
                    },
                    {
                        "username": "AmbreMandar1812",
                        "content": "I am gettin an error in the testcase \\ns= \" \"\\nthe Output generated by my code is 0,\\nwhile the expected output is 1.\\nPlease Help...\\n"
                    },
                    {
                        "username": "user7734BK",
                        "content": "I think the space is counted as a character, so the longest substring is the character \"space\" (\" \")"
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "Why it doesn\\'t accept if I have added a statement `if(s == \" \") return 1;` here in case we just have a blank space as a string. It is actually a 340th test case I am actually stuck on. Code runs as expected on my IDE though, but leetcode isn\\'t accepting the solution."
                    },
                    {
                        "username": "janis__",
                        "content": "[@Soham_Panchal](/Soham_Panchal) Your code resets the entire charList and length when it encounters a repeated character, but instead, you should remove characters from the start of the charList until the repeated character is removed, and then continue, ensuring you don\\'t skip any potential valid substrings."
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "[@user7734BK](/user7734BK) sure\n`class Solution {\n    public int lengthOfLongestSubstring(String s) {\n\n        if(s.length() == 0){\n            return 0;\n        }\n\n        List<Character> charList = new ArrayList<>();\n        int length = 0;\n        int maxLength = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if(!charList.contains(s.charAt(i))){\n                length++;\n                charList.add(s.charAt(i));\n            }else{\n                if(length > maxLength){\n                    maxLength = length;\n                }\n                length = 0;\n                charList.clear();\n                i--;\n            }\n        }\n\n        return maxLength;\n    }\n}`"
                    },
                    {
                        "username": "user7734BK",
                        "content": "that\\'s strange... can you send the code please?"
                    },
                    {
                        "username": "BrianTheCoder",
                        "content": "I think this problem has to be less then 0(n^2), my code won\\'t work"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "pce29",
                        "content": "I tried to submit my code, but then it told me that I failed the test case for \"dvdf\". Here, my output comes out as 2, but it says that the expected output is 3. Is this a website bug?"
                    },
                    {
                        "username": "prantto",
                        "content": "vdf is the longest substring"
                    },
                    {
                        "username": "Radwimpz",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int out = 0;\\n        for(int i = 0; i <= s.length(); i++){\\n            for(int j = i+1; j < s.length(); j++){\\n                if(s.charAt(i) == s.charAt(j)){\\n                    String sub = s.substring(i,j);\\n                    out = sub.length();\\n                }\\n            }\\n        }\\n        return out;\\n    }\\n}\\n\\ncan someone tell me why wouldn\\'t this work?"
                    },
                    {
                        "username": "vishaljoshi1998",
                        "content": "please explain this logic\\nint lengthOfLongestSubstring(string s) {\\n        set<char> st;\\n        int i=0,j=0;\\n        int ans = 0;\\n        while(i<s.length()){\\n            if(!st.count(s[i])){\\n                st.insert(s[i]);\\n                ans = (st.size()>ans)?st.size():ans;\\n                 i++;\\n            }else\\n            {\\n                st.erase(s[j]); //why s[j]\\n                j++;\\n            }\\n           \\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "SaXDex",
                        "content": "What mean \"substring\"."
                    },
                    {
                        "username": "user7734BK",
                        "content": "hi, it means the longest sequence of characters without repetition.\\nfor example, given the string \"abcb\", the longest substring would be \"abc\"."
                    },
                    {
                        "username": "raviraj27",
                        "content": "contigeuous character"
                    }
                ]
            },
            {
                "id": 1781975,
                "content": [
                    {
                        "username": "kapustin",
                        "content": "why does not it work?\\n\\nclass Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        result = len(set(s))\\n        return result"
                    },
                    {
                        "username": "lacost765123",
                        "content": "Does somebody faced with 987 test failing? I see input but can\\'t understand why answer \"95\" is wrong :((("
                    },
                    {
                        "username": "AmbreMandar1812",
                        "content": "I am gettin an error in the testcase \\ns= \" \"\\nthe Output generated by my code is 0,\\nwhile the expected output is 1.\\nPlease Help...\\n"
                    },
                    {
                        "username": "user7734BK",
                        "content": "I think the space is counted as a character, so the longest substring is the character \"space\" (\" \")"
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "Why it doesn\\'t accept if I have added a statement `if(s == \" \") return 1;` here in case we just have a blank space as a string. It is actually a 340th test case I am actually stuck on. Code runs as expected on my IDE though, but leetcode isn\\'t accepting the solution."
                    },
                    {
                        "username": "janis__",
                        "content": "[@Soham_Panchal](/Soham_Panchal) Your code resets the entire charList and length when it encounters a repeated character, but instead, you should remove characters from the start of the charList until the repeated character is removed, and then continue, ensuring you don\\'t skip any potential valid substrings."
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "[@user7734BK](/user7734BK) sure\n`class Solution {\n    public int lengthOfLongestSubstring(String s) {\n\n        if(s.length() == 0){\n            return 0;\n        }\n\n        List<Character> charList = new ArrayList<>();\n        int length = 0;\n        int maxLength = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if(!charList.contains(s.charAt(i))){\n                length++;\n                charList.add(s.charAt(i));\n            }else{\n                if(length > maxLength){\n                    maxLength = length;\n                }\n                length = 0;\n                charList.clear();\n                i--;\n            }\n        }\n\n        return maxLength;\n    }\n}`"
                    },
                    {
                        "username": "user7734BK",
                        "content": "that\\'s strange... can you send the code please?"
                    },
                    {
                        "username": "BrianTheCoder",
                        "content": "I think this problem has to be less then 0(n^2), my code won\\'t work"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "pce29",
                        "content": "I tried to submit my code, but then it told me that I failed the test case for \"dvdf\". Here, my output comes out as 2, but it says that the expected output is 3. Is this a website bug?"
                    },
                    {
                        "username": "prantto",
                        "content": "vdf is the longest substring"
                    },
                    {
                        "username": "Radwimpz",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int out = 0;\\n        for(int i = 0; i <= s.length(); i++){\\n            for(int j = i+1; j < s.length(); j++){\\n                if(s.charAt(i) == s.charAt(j)){\\n                    String sub = s.substring(i,j);\\n                    out = sub.length();\\n                }\\n            }\\n        }\\n        return out;\\n    }\\n}\\n\\ncan someone tell me why wouldn\\'t this work?"
                    },
                    {
                        "username": "vishaljoshi1998",
                        "content": "please explain this logic\\nint lengthOfLongestSubstring(string s) {\\n        set<char> st;\\n        int i=0,j=0;\\n        int ans = 0;\\n        while(i<s.length()){\\n            if(!st.count(s[i])){\\n                st.insert(s[i]);\\n                ans = (st.size()>ans)?st.size():ans;\\n                 i++;\\n            }else\\n            {\\n                st.erase(s[j]); //why s[j]\\n                j++;\\n            }\\n           \\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "SaXDex",
                        "content": "What mean \"substring\"."
                    },
                    {
                        "username": "user7734BK",
                        "content": "hi, it means the longest sequence of characters without repetition.\\nfor example, given the string \"abcb\", the longest substring would be \"abc\"."
                    },
                    {
                        "username": "raviraj27",
                        "content": "contigeuous character"
                    }
                ]
            },
            {
                "id": 1781192,
                "content": [
                    {
                        "username": "kapustin",
                        "content": "why does not it work?\\n\\nclass Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        result = len(set(s))\\n        return result"
                    },
                    {
                        "username": "lacost765123",
                        "content": "Does somebody faced with 987 test failing? I see input but can\\'t understand why answer \"95\" is wrong :((("
                    },
                    {
                        "username": "AmbreMandar1812",
                        "content": "I am gettin an error in the testcase \\ns= \" \"\\nthe Output generated by my code is 0,\\nwhile the expected output is 1.\\nPlease Help...\\n"
                    },
                    {
                        "username": "user7734BK",
                        "content": "I think the space is counted as a character, so the longest substring is the character \"space\" (\" \")"
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "Why it doesn\\'t accept if I have added a statement `if(s == \" \") return 1;` here in case we just have a blank space as a string. It is actually a 340th test case I am actually stuck on. Code runs as expected on my IDE though, but leetcode isn\\'t accepting the solution."
                    },
                    {
                        "username": "janis__",
                        "content": "[@Soham_Panchal](/Soham_Panchal) Your code resets the entire charList and length when it encounters a repeated character, but instead, you should remove characters from the start of the charList until the repeated character is removed, and then continue, ensuring you don\\'t skip any potential valid substrings."
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "[@user7734BK](/user7734BK) sure\n`class Solution {\n    public int lengthOfLongestSubstring(String s) {\n\n        if(s.length() == 0){\n            return 0;\n        }\n\n        List<Character> charList = new ArrayList<>();\n        int length = 0;\n        int maxLength = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if(!charList.contains(s.charAt(i))){\n                length++;\n                charList.add(s.charAt(i));\n            }else{\n                if(length > maxLength){\n                    maxLength = length;\n                }\n                length = 0;\n                charList.clear();\n                i--;\n            }\n        }\n\n        return maxLength;\n    }\n}`"
                    },
                    {
                        "username": "user7734BK",
                        "content": "that\\'s strange... can you send the code please?"
                    },
                    {
                        "username": "BrianTheCoder",
                        "content": "I think this problem has to be less then 0(n^2), my code won\\'t work"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "pce29",
                        "content": "I tried to submit my code, but then it told me that I failed the test case for \"dvdf\". Here, my output comes out as 2, but it says that the expected output is 3. Is this a website bug?"
                    },
                    {
                        "username": "prantto",
                        "content": "vdf is the longest substring"
                    },
                    {
                        "username": "Radwimpz",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int out = 0;\\n        for(int i = 0; i <= s.length(); i++){\\n            for(int j = i+1; j < s.length(); j++){\\n                if(s.charAt(i) == s.charAt(j)){\\n                    String sub = s.substring(i,j);\\n                    out = sub.length();\\n                }\\n            }\\n        }\\n        return out;\\n    }\\n}\\n\\ncan someone tell me why wouldn\\'t this work?"
                    },
                    {
                        "username": "vishaljoshi1998",
                        "content": "please explain this logic\\nint lengthOfLongestSubstring(string s) {\\n        set<char> st;\\n        int i=0,j=0;\\n        int ans = 0;\\n        while(i<s.length()){\\n            if(!st.count(s[i])){\\n                st.insert(s[i]);\\n                ans = (st.size()>ans)?st.size():ans;\\n                 i++;\\n            }else\\n            {\\n                st.erase(s[j]); //why s[j]\\n                j++;\\n            }\\n           \\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "SaXDex",
                        "content": "What mean \"substring\"."
                    },
                    {
                        "username": "user7734BK",
                        "content": "hi, it means the longest sequence of characters without repetition.\\nfor example, given the string \"abcb\", the longest substring would be \"abc\"."
                    },
                    {
                        "username": "raviraj27",
                        "content": "contigeuous character"
                    }
                ]
            },
            {
                "id": 1779307,
                "content": [
                    {
                        "username": "kapustin",
                        "content": "why does not it work?\\n\\nclass Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        result = len(set(s))\\n        return result"
                    },
                    {
                        "username": "lacost765123",
                        "content": "Does somebody faced with 987 test failing? I see input but can\\'t understand why answer \"95\" is wrong :((("
                    },
                    {
                        "username": "AmbreMandar1812",
                        "content": "I am gettin an error in the testcase \\ns= \" \"\\nthe Output generated by my code is 0,\\nwhile the expected output is 1.\\nPlease Help...\\n"
                    },
                    {
                        "username": "user7734BK",
                        "content": "I think the space is counted as a character, so the longest substring is the character \"space\" (\" \")"
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "Why it doesn\\'t accept if I have added a statement `if(s == \" \") return 1;` here in case we just have a blank space as a string. It is actually a 340th test case I am actually stuck on. Code runs as expected on my IDE though, but leetcode isn\\'t accepting the solution."
                    },
                    {
                        "username": "janis__",
                        "content": "[@Soham_Panchal](/Soham_Panchal) Your code resets the entire charList and length when it encounters a repeated character, but instead, you should remove characters from the start of the charList until the repeated character is removed, and then continue, ensuring you don\\'t skip any potential valid substrings."
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "[@user7734BK](/user7734BK) sure\n`class Solution {\n    public int lengthOfLongestSubstring(String s) {\n\n        if(s.length() == 0){\n            return 0;\n        }\n\n        List<Character> charList = new ArrayList<>();\n        int length = 0;\n        int maxLength = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if(!charList.contains(s.charAt(i))){\n                length++;\n                charList.add(s.charAt(i));\n            }else{\n                if(length > maxLength){\n                    maxLength = length;\n                }\n                length = 0;\n                charList.clear();\n                i--;\n            }\n        }\n\n        return maxLength;\n    }\n}`"
                    },
                    {
                        "username": "user7734BK",
                        "content": "that\\'s strange... can you send the code please?"
                    },
                    {
                        "username": "BrianTheCoder",
                        "content": "I think this problem has to be less then 0(n^2), my code won\\'t work"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "pce29",
                        "content": "I tried to submit my code, but then it told me that I failed the test case for \"dvdf\". Here, my output comes out as 2, but it says that the expected output is 3. Is this a website bug?"
                    },
                    {
                        "username": "prantto",
                        "content": "vdf is the longest substring"
                    },
                    {
                        "username": "Radwimpz",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int out = 0;\\n        for(int i = 0; i <= s.length(); i++){\\n            for(int j = i+1; j < s.length(); j++){\\n                if(s.charAt(i) == s.charAt(j)){\\n                    String sub = s.substring(i,j);\\n                    out = sub.length();\\n                }\\n            }\\n        }\\n        return out;\\n    }\\n}\\n\\ncan someone tell me why wouldn\\'t this work?"
                    },
                    {
                        "username": "vishaljoshi1998",
                        "content": "please explain this logic\\nint lengthOfLongestSubstring(string s) {\\n        set<char> st;\\n        int i=0,j=0;\\n        int ans = 0;\\n        while(i<s.length()){\\n            if(!st.count(s[i])){\\n                st.insert(s[i]);\\n                ans = (st.size()>ans)?st.size():ans;\\n                 i++;\\n            }else\\n            {\\n                st.erase(s[j]); //why s[j]\\n                j++;\\n            }\\n           \\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "SaXDex",
                        "content": "What mean \"substring\"."
                    },
                    {
                        "username": "user7734BK",
                        "content": "hi, it means the longest sequence of characters without repetition.\\nfor example, given the string \"abcb\", the longest substring would be \"abc\"."
                    },
                    {
                        "username": "raviraj27",
                        "content": "contigeuous character"
                    }
                ]
            },
            {
                "id": 1778094,
                "content": [
                    {
                        "username": "kapustin",
                        "content": "why does not it work?\\n\\nclass Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        result = len(set(s))\\n        return result"
                    },
                    {
                        "username": "lacost765123",
                        "content": "Does somebody faced with 987 test failing? I see input but can\\'t understand why answer \"95\" is wrong :((("
                    },
                    {
                        "username": "AmbreMandar1812",
                        "content": "I am gettin an error in the testcase \\ns= \" \"\\nthe Output generated by my code is 0,\\nwhile the expected output is 1.\\nPlease Help...\\n"
                    },
                    {
                        "username": "user7734BK",
                        "content": "I think the space is counted as a character, so the longest substring is the character \"space\" (\" \")"
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "Why it doesn\\'t accept if I have added a statement `if(s == \" \") return 1;` here in case we just have a blank space as a string. It is actually a 340th test case I am actually stuck on. Code runs as expected on my IDE though, but leetcode isn\\'t accepting the solution."
                    },
                    {
                        "username": "janis__",
                        "content": "[@Soham_Panchal](/Soham_Panchal) Your code resets the entire charList and length when it encounters a repeated character, but instead, you should remove characters from the start of the charList until the repeated character is removed, and then continue, ensuring you don\\'t skip any potential valid substrings."
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "[@user7734BK](/user7734BK) sure\n`class Solution {\n    public int lengthOfLongestSubstring(String s) {\n\n        if(s.length() == 0){\n            return 0;\n        }\n\n        List<Character> charList = new ArrayList<>();\n        int length = 0;\n        int maxLength = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if(!charList.contains(s.charAt(i))){\n                length++;\n                charList.add(s.charAt(i));\n            }else{\n                if(length > maxLength){\n                    maxLength = length;\n                }\n                length = 0;\n                charList.clear();\n                i--;\n            }\n        }\n\n        return maxLength;\n    }\n}`"
                    },
                    {
                        "username": "user7734BK",
                        "content": "that\\'s strange... can you send the code please?"
                    },
                    {
                        "username": "BrianTheCoder",
                        "content": "I think this problem has to be less then 0(n^2), my code won\\'t work"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "pce29",
                        "content": "I tried to submit my code, but then it told me that I failed the test case for \"dvdf\". Here, my output comes out as 2, but it says that the expected output is 3. Is this a website bug?"
                    },
                    {
                        "username": "prantto",
                        "content": "vdf is the longest substring"
                    },
                    {
                        "username": "Radwimpz",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int out = 0;\\n        for(int i = 0; i <= s.length(); i++){\\n            for(int j = i+1; j < s.length(); j++){\\n                if(s.charAt(i) == s.charAt(j)){\\n                    String sub = s.substring(i,j);\\n                    out = sub.length();\\n                }\\n            }\\n        }\\n        return out;\\n    }\\n}\\n\\ncan someone tell me why wouldn\\'t this work?"
                    },
                    {
                        "username": "vishaljoshi1998",
                        "content": "please explain this logic\\nint lengthOfLongestSubstring(string s) {\\n        set<char> st;\\n        int i=0,j=0;\\n        int ans = 0;\\n        while(i<s.length()){\\n            if(!st.count(s[i])){\\n                st.insert(s[i]);\\n                ans = (st.size()>ans)?st.size():ans;\\n                 i++;\\n            }else\\n            {\\n                st.erase(s[j]); //why s[j]\\n                j++;\\n            }\\n           \\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "SaXDex",
                        "content": "What mean \"substring\"."
                    },
                    {
                        "username": "user7734BK",
                        "content": "hi, it means the longest sequence of characters without repetition.\\nfor example, given the string \"abcb\", the longest substring would be \"abc\"."
                    },
                    {
                        "username": "raviraj27",
                        "content": "contigeuous character"
                    }
                ]
            },
            {
                "id": 1768432,
                "content": [
                    {
                        "username": "kapustin",
                        "content": "why does not it work?\\n\\nclass Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        result = len(set(s))\\n        return result"
                    },
                    {
                        "username": "lacost765123",
                        "content": "Does somebody faced with 987 test failing? I see input but can\\'t understand why answer \"95\" is wrong :((("
                    },
                    {
                        "username": "AmbreMandar1812",
                        "content": "I am gettin an error in the testcase \\ns= \" \"\\nthe Output generated by my code is 0,\\nwhile the expected output is 1.\\nPlease Help...\\n"
                    },
                    {
                        "username": "user7734BK",
                        "content": "I think the space is counted as a character, so the longest substring is the character \"space\" (\" \")"
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "Why it doesn\\'t accept if I have added a statement `if(s == \" \") return 1;` here in case we just have a blank space as a string. It is actually a 340th test case I am actually stuck on. Code runs as expected on my IDE though, but leetcode isn\\'t accepting the solution."
                    },
                    {
                        "username": "janis__",
                        "content": "[@Soham_Panchal](/Soham_Panchal) Your code resets the entire charList and length when it encounters a repeated character, but instead, you should remove characters from the start of the charList until the repeated character is removed, and then continue, ensuring you don\\'t skip any potential valid substrings."
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "[@user7734BK](/user7734BK) sure\n`class Solution {\n    public int lengthOfLongestSubstring(String s) {\n\n        if(s.length() == 0){\n            return 0;\n        }\n\n        List<Character> charList = new ArrayList<>();\n        int length = 0;\n        int maxLength = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if(!charList.contains(s.charAt(i))){\n                length++;\n                charList.add(s.charAt(i));\n            }else{\n                if(length > maxLength){\n                    maxLength = length;\n                }\n                length = 0;\n                charList.clear();\n                i--;\n            }\n        }\n\n        return maxLength;\n    }\n}`"
                    },
                    {
                        "username": "user7734BK",
                        "content": "that\\'s strange... can you send the code please?"
                    },
                    {
                        "username": "BrianTheCoder",
                        "content": "I think this problem has to be less then 0(n^2), my code won\\'t work"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "pce29",
                        "content": "I tried to submit my code, but then it told me that I failed the test case for \"dvdf\". Here, my output comes out as 2, but it says that the expected output is 3. Is this a website bug?"
                    },
                    {
                        "username": "prantto",
                        "content": "vdf is the longest substring"
                    },
                    {
                        "username": "Radwimpz",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int out = 0;\\n        for(int i = 0; i <= s.length(); i++){\\n            for(int j = i+1; j < s.length(); j++){\\n                if(s.charAt(i) == s.charAt(j)){\\n                    String sub = s.substring(i,j);\\n                    out = sub.length();\\n                }\\n            }\\n        }\\n        return out;\\n    }\\n}\\n\\ncan someone tell me why wouldn\\'t this work?"
                    },
                    {
                        "username": "vishaljoshi1998",
                        "content": "please explain this logic\\nint lengthOfLongestSubstring(string s) {\\n        set<char> st;\\n        int i=0,j=0;\\n        int ans = 0;\\n        while(i<s.length()){\\n            if(!st.count(s[i])){\\n                st.insert(s[i]);\\n                ans = (st.size()>ans)?st.size():ans;\\n                 i++;\\n            }else\\n            {\\n                st.erase(s[j]); //why s[j]\\n                j++;\\n            }\\n           \\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "SaXDex",
                        "content": "What mean \"substring\"."
                    },
                    {
                        "username": "user7734BK",
                        "content": "hi, it means the longest sequence of characters without repetition.\\nfor example, given the string \"abcb\", the longest substring would be \"abc\"."
                    },
                    {
                        "username": "raviraj27",
                        "content": "contigeuous character"
                    }
                ]
            },
            {
                "id": 1761403,
                "content": [
                    {
                        "username": "kapustin",
                        "content": "why does not it work?\\n\\nclass Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        result = len(set(s))\\n        return result"
                    },
                    {
                        "username": "lacost765123",
                        "content": "Does somebody faced with 987 test failing? I see input but can\\'t understand why answer \"95\" is wrong :((("
                    },
                    {
                        "username": "AmbreMandar1812",
                        "content": "I am gettin an error in the testcase \\ns= \" \"\\nthe Output generated by my code is 0,\\nwhile the expected output is 1.\\nPlease Help...\\n"
                    },
                    {
                        "username": "user7734BK",
                        "content": "I think the space is counted as a character, so the longest substring is the character \"space\" (\" \")"
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "Why it doesn\\'t accept if I have added a statement `if(s == \" \") return 1;` here in case we just have a blank space as a string. It is actually a 340th test case I am actually stuck on. Code runs as expected on my IDE though, but leetcode isn\\'t accepting the solution."
                    },
                    {
                        "username": "janis__",
                        "content": "[@Soham_Panchal](/Soham_Panchal) Your code resets the entire charList and length when it encounters a repeated character, but instead, you should remove characters from the start of the charList until the repeated character is removed, and then continue, ensuring you don\\'t skip any potential valid substrings."
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "[@user7734BK](/user7734BK) sure\n`class Solution {\n    public int lengthOfLongestSubstring(String s) {\n\n        if(s.length() == 0){\n            return 0;\n        }\n\n        List<Character> charList = new ArrayList<>();\n        int length = 0;\n        int maxLength = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if(!charList.contains(s.charAt(i))){\n                length++;\n                charList.add(s.charAt(i));\n            }else{\n                if(length > maxLength){\n                    maxLength = length;\n                }\n                length = 0;\n                charList.clear();\n                i--;\n            }\n        }\n\n        return maxLength;\n    }\n}`"
                    },
                    {
                        "username": "user7734BK",
                        "content": "that\\'s strange... can you send the code please?"
                    },
                    {
                        "username": "BrianTheCoder",
                        "content": "I think this problem has to be less then 0(n^2), my code won\\'t work"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "pce29",
                        "content": "I tried to submit my code, but then it told me that I failed the test case for \"dvdf\". Here, my output comes out as 2, but it says that the expected output is 3. Is this a website bug?"
                    },
                    {
                        "username": "prantto",
                        "content": "vdf is the longest substring"
                    },
                    {
                        "username": "Radwimpz",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int out = 0;\\n        for(int i = 0; i <= s.length(); i++){\\n            for(int j = i+1; j < s.length(); j++){\\n                if(s.charAt(i) == s.charAt(j)){\\n                    String sub = s.substring(i,j);\\n                    out = sub.length();\\n                }\\n            }\\n        }\\n        return out;\\n    }\\n}\\n\\ncan someone tell me why wouldn\\'t this work?"
                    },
                    {
                        "username": "vishaljoshi1998",
                        "content": "please explain this logic\\nint lengthOfLongestSubstring(string s) {\\n        set<char> st;\\n        int i=0,j=0;\\n        int ans = 0;\\n        while(i<s.length()){\\n            if(!st.count(s[i])){\\n                st.insert(s[i]);\\n                ans = (st.size()>ans)?st.size():ans;\\n                 i++;\\n            }else\\n            {\\n                st.erase(s[j]); //why s[j]\\n                j++;\\n            }\\n           \\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "SaXDex",
                        "content": "What mean \"substring\"."
                    },
                    {
                        "username": "user7734BK",
                        "content": "hi, it means the longest sequence of characters without repetition.\\nfor example, given the string \"abcb\", the longest substring would be \"abc\"."
                    },
                    {
                        "username": "raviraj27",
                        "content": "contigeuous character"
                    }
                ]
            },
            {
                "id": 1759779,
                "content": [
                    {
                        "username": "kapustin",
                        "content": "why does not it work?\\n\\nclass Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        result = len(set(s))\\n        return result"
                    },
                    {
                        "username": "lacost765123",
                        "content": "Does somebody faced with 987 test failing? I see input but can\\'t understand why answer \"95\" is wrong :((("
                    },
                    {
                        "username": "AmbreMandar1812",
                        "content": "I am gettin an error in the testcase \\ns= \" \"\\nthe Output generated by my code is 0,\\nwhile the expected output is 1.\\nPlease Help...\\n"
                    },
                    {
                        "username": "user7734BK",
                        "content": "I think the space is counted as a character, so the longest substring is the character \"space\" (\" \")"
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "Why it doesn\\'t accept if I have added a statement `if(s == \" \") return 1;` here in case we just have a blank space as a string. It is actually a 340th test case I am actually stuck on. Code runs as expected on my IDE though, but leetcode isn\\'t accepting the solution."
                    },
                    {
                        "username": "janis__",
                        "content": "[@Soham_Panchal](/Soham_Panchal) Your code resets the entire charList and length when it encounters a repeated character, but instead, you should remove characters from the start of the charList until the repeated character is removed, and then continue, ensuring you don\\'t skip any potential valid substrings."
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "[@user7734BK](/user7734BK) sure\n`class Solution {\n    public int lengthOfLongestSubstring(String s) {\n\n        if(s.length() == 0){\n            return 0;\n        }\n\n        List<Character> charList = new ArrayList<>();\n        int length = 0;\n        int maxLength = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if(!charList.contains(s.charAt(i))){\n                length++;\n                charList.add(s.charAt(i));\n            }else{\n                if(length > maxLength){\n                    maxLength = length;\n                }\n                length = 0;\n                charList.clear();\n                i--;\n            }\n        }\n\n        return maxLength;\n    }\n}`"
                    },
                    {
                        "username": "user7734BK",
                        "content": "that\\'s strange... can you send the code please?"
                    },
                    {
                        "username": "BrianTheCoder",
                        "content": "I think this problem has to be less then 0(n^2), my code won\\'t work"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "pce29",
                        "content": "I tried to submit my code, but then it told me that I failed the test case for \"dvdf\". Here, my output comes out as 2, but it says that the expected output is 3. Is this a website bug?"
                    },
                    {
                        "username": "prantto",
                        "content": "vdf is the longest substring"
                    },
                    {
                        "username": "Radwimpz",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int out = 0;\\n        for(int i = 0; i <= s.length(); i++){\\n            for(int j = i+1; j < s.length(); j++){\\n                if(s.charAt(i) == s.charAt(j)){\\n                    String sub = s.substring(i,j);\\n                    out = sub.length();\\n                }\\n            }\\n        }\\n        return out;\\n    }\\n}\\n\\ncan someone tell me why wouldn\\'t this work?"
                    },
                    {
                        "username": "vishaljoshi1998",
                        "content": "please explain this logic\\nint lengthOfLongestSubstring(string s) {\\n        set<char> st;\\n        int i=0,j=0;\\n        int ans = 0;\\n        while(i<s.length()){\\n            if(!st.count(s[i])){\\n                st.insert(s[i]);\\n                ans = (st.size()>ans)?st.size():ans;\\n                 i++;\\n            }else\\n            {\\n                st.erase(s[j]); //why s[j]\\n                j++;\\n            }\\n           \\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "SaXDex",
                        "content": "What mean \"substring\"."
                    },
                    {
                        "username": "user7734BK",
                        "content": "hi, it means the longest sequence of characters without repetition.\\nfor example, given the string \"abcb\", the longest substring would be \"abc\"."
                    },
                    {
                        "username": "raviraj27",
                        "content": "contigeuous character"
                    }
                ]
            },
            {
                "id": 1756148,
                "content": [
                    {
                        "username": "kapustin",
                        "content": "why does not it work?\\n\\nclass Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        result = len(set(s))\\n        return result"
                    },
                    {
                        "username": "lacost765123",
                        "content": "Does somebody faced with 987 test failing? I see input but can\\'t understand why answer \"95\" is wrong :((("
                    },
                    {
                        "username": "AmbreMandar1812",
                        "content": "I am gettin an error in the testcase \\ns= \" \"\\nthe Output generated by my code is 0,\\nwhile the expected output is 1.\\nPlease Help...\\n"
                    },
                    {
                        "username": "user7734BK",
                        "content": "I think the space is counted as a character, so the longest substring is the character \"space\" (\" \")"
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "Why it doesn\\'t accept if I have added a statement `if(s == \" \") return 1;` here in case we just have a blank space as a string. It is actually a 340th test case I am actually stuck on. Code runs as expected on my IDE though, but leetcode isn\\'t accepting the solution."
                    },
                    {
                        "username": "janis__",
                        "content": "[@Soham_Panchal](/Soham_Panchal) Your code resets the entire charList and length when it encounters a repeated character, but instead, you should remove characters from the start of the charList until the repeated character is removed, and then continue, ensuring you don\\'t skip any potential valid substrings."
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "[@user7734BK](/user7734BK) sure\n`class Solution {\n    public int lengthOfLongestSubstring(String s) {\n\n        if(s.length() == 0){\n            return 0;\n        }\n\n        List<Character> charList = new ArrayList<>();\n        int length = 0;\n        int maxLength = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if(!charList.contains(s.charAt(i))){\n                length++;\n                charList.add(s.charAt(i));\n            }else{\n                if(length > maxLength){\n                    maxLength = length;\n                }\n                length = 0;\n                charList.clear();\n                i--;\n            }\n        }\n\n        return maxLength;\n    }\n}`"
                    },
                    {
                        "username": "user7734BK",
                        "content": "that\\'s strange... can you send the code please?"
                    },
                    {
                        "username": "BrianTheCoder",
                        "content": "I think this problem has to be less then 0(n^2), my code won\\'t work"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "pce29",
                        "content": "I tried to submit my code, but then it told me that I failed the test case for \"dvdf\". Here, my output comes out as 2, but it says that the expected output is 3. Is this a website bug?"
                    },
                    {
                        "username": "prantto",
                        "content": "vdf is the longest substring"
                    },
                    {
                        "username": "Radwimpz",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int out = 0;\\n        for(int i = 0; i <= s.length(); i++){\\n            for(int j = i+1; j < s.length(); j++){\\n                if(s.charAt(i) == s.charAt(j)){\\n                    String sub = s.substring(i,j);\\n                    out = sub.length();\\n                }\\n            }\\n        }\\n        return out;\\n    }\\n}\\n\\ncan someone tell me why wouldn\\'t this work?"
                    },
                    {
                        "username": "vishaljoshi1998",
                        "content": "please explain this logic\\nint lengthOfLongestSubstring(string s) {\\n        set<char> st;\\n        int i=0,j=0;\\n        int ans = 0;\\n        while(i<s.length()){\\n            if(!st.count(s[i])){\\n                st.insert(s[i]);\\n                ans = (st.size()>ans)?st.size():ans;\\n                 i++;\\n            }else\\n            {\\n                st.erase(s[j]); //why s[j]\\n                j++;\\n            }\\n           \\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "SaXDex",
                        "content": "What mean \"substring\"."
                    },
                    {
                        "username": "user7734BK",
                        "content": "hi, it means the longest sequence of characters without repetition.\\nfor example, given the string \"abcb\", the longest substring would be \"abc\"."
                    },
                    {
                        "username": "raviraj27",
                        "content": "contigeuous character"
                    }
                ]
            },
            {
                "id": 1755968,
                "content": [
                    {
                        "username": "kapustin",
                        "content": "why does not it work?\\n\\nclass Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        result = len(set(s))\\n        return result"
                    },
                    {
                        "username": "lacost765123",
                        "content": "Does somebody faced with 987 test failing? I see input but can\\'t understand why answer \"95\" is wrong :((("
                    },
                    {
                        "username": "AmbreMandar1812",
                        "content": "I am gettin an error in the testcase \\ns= \" \"\\nthe Output generated by my code is 0,\\nwhile the expected output is 1.\\nPlease Help...\\n"
                    },
                    {
                        "username": "user7734BK",
                        "content": "I think the space is counted as a character, so the longest substring is the character \"space\" (\" \")"
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "Why it doesn\\'t accept if I have added a statement `if(s == \" \") return 1;` here in case we just have a blank space as a string. It is actually a 340th test case I am actually stuck on. Code runs as expected on my IDE though, but leetcode isn\\'t accepting the solution."
                    },
                    {
                        "username": "janis__",
                        "content": "[@Soham_Panchal](/Soham_Panchal) Your code resets the entire charList and length when it encounters a repeated character, but instead, you should remove characters from the start of the charList until the repeated character is removed, and then continue, ensuring you don\\'t skip any potential valid substrings."
                    },
                    {
                        "username": "Soham_Panchal",
                        "content": "[@user7734BK](/user7734BK) sure\n`class Solution {\n    public int lengthOfLongestSubstring(String s) {\n\n        if(s.length() == 0){\n            return 0;\n        }\n\n        List<Character> charList = new ArrayList<>();\n        int length = 0;\n        int maxLength = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if(!charList.contains(s.charAt(i))){\n                length++;\n                charList.add(s.charAt(i));\n            }else{\n                if(length > maxLength){\n                    maxLength = length;\n                }\n                length = 0;\n                charList.clear();\n                i--;\n            }\n        }\n\n        return maxLength;\n    }\n}`"
                    },
                    {
                        "username": "user7734BK",
                        "content": "that\\'s strange... can you send the code please?"
                    },
                    {
                        "username": "BrianTheCoder",
                        "content": "I think this problem has to be less then 0(n^2), my code won\\'t work"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "pce29",
                        "content": "I tried to submit my code, but then it told me that I failed the test case for \"dvdf\". Here, my output comes out as 2, but it says that the expected output is 3. Is this a website bug?"
                    },
                    {
                        "username": "prantto",
                        "content": "vdf is the longest substring"
                    },
                    {
                        "username": "Radwimpz",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        int out = 0;\\n        for(int i = 0; i <= s.length(); i++){\\n            for(int j = i+1; j < s.length(); j++){\\n                if(s.charAt(i) == s.charAt(j)){\\n                    String sub = s.substring(i,j);\\n                    out = sub.length();\\n                }\\n            }\\n        }\\n        return out;\\n    }\\n}\\n\\ncan someone tell me why wouldn\\'t this work?"
                    },
                    {
                        "username": "vishaljoshi1998",
                        "content": "please explain this logic\\nint lengthOfLongestSubstring(string s) {\\n        set<char> st;\\n        int i=0,j=0;\\n        int ans = 0;\\n        while(i<s.length()){\\n            if(!st.count(s[i])){\\n                st.insert(s[i]);\\n                ans = (st.size()>ans)?st.size():ans;\\n                 i++;\\n            }else\\n            {\\n                st.erase(s[j]); //why s[j]\\n                j++;\\n            }\\n           \\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "SaXDex",
                        "content": "What mean \"substring\"."
                    },
                    {
                        "username": "user7734BK",
                        "content": "hi, it means the longest sequence of characters without repetition.\\nfor example, given the string \"abcb\", the longest substring would be \"abc\"."
                    },
                    {
                        "username": "raviraj27",
                        "content": "contigeuous character"
                    }
                ]
            },
            {
                "id": 1753786,
                "content": [
                    {
                        "username": "lokeshbaghel",
                        "content": "How do I know the number of test cases passed when my solution is throwing TLE. I this option removed in updated version\\n"
                    },
                    {
                        "username": "mossgreenpepper",
                        "content": "for anyone is wondering, there is 95 different characters used in the tests"
                    },
                    {
                        "username": "mzimmer52",
                        "content": "class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        biggest = 0\\n        answer = []\\n        for char in list(s):\\n            if char not in answer:\\n                answer.append(char)\\n            else:\\n                answer += char\\n                answer = answer[answer.index(char) + 1:]\\n\\n            if len(answer) > biggest:\\n                biggest = len(answer)\\n\\n        return(biggest)"
                    },
                    {
                        "username": "lecrowpus",
                        "content": "bro . input is\"ckilbkd\" and my output is 6 but expected is 5? how\n is that possible"
                    },
                    {
                        "username": "Akbarkhuja",
                        "content": "it should be 5 => ckilb next is k which is repeating"
                    },
                    {
                        "username": "Akbarkhuja",
                        "content": "I cannot find problem in my code. It returns undefined but in brovser it logs right answer\\n\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n    var ans = \"\";\\n    var first = (str) => {\\n        if (str.length == 0) {\\n            return ans.length;\\n        }\\n        var sub = str[0];\\n        var check = true;\\n        for (var i = 1; i < str.length; i++) {\\n            for (var j = 0; j < sub.length; j++) {\\n                if (str[i] == sub[j]) {\\n                    check = false;\\n                }\\n            }\\n            if (check) {\\n                sub = sub + str[i];\\n            } else {\\n                break;\\n            }\\n        }\\n        if (sub.length > ans.length) {\\n            ans = sub;\\n        }\\n        first(str.substring(1));\\n    };\\n    first(s);\\n};"
                    },
                    {
                        "username": "janis__",
                        "content": "Your function lengthOfLongestSubstring doesn\\'t return any value; at the end of the function, add return ans.length; to return the length of the longest substring."
                    },
                    {
                        "username": "saraahmed2693",
                        "content": "The strategy I am following on my solution is as soon as I find a duplicate, I will start the string again, so I will start with the index of the first duplicated char.\\nIt works well with all test cases expect for the \"\"dvdf\"! I will have to actually go back another index!  to start from v! so, any ideas to bypass that? \\n \\nI went through some solutions, and it follows the same strategy, however it can bypass the \"dvdf\". although it keeps taking the string from the duplicated char index. \\nI don\\'t understand how?   "
                    },
                    {
                        "username": "yair7705778",
                        "content": "Help me please!!!!!\\nMy answer is same with expected answer, but submit code failed.\\n\\n`Runtime Error\\nLine 30 in solution.js\\n    console.log(\\'longestStr.length\\', longestStr.length)\\n                                                ^\\nTypeError: Cannot read properties of undefined (reading \\'length\\')\\n    Line 30: Char 49 in solution.js (lengthOfLongestSubstring)\\n    Line 43: Char 19 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 34: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`\\n\\n---------------------------\\n\\n `\\nvar lengthOfLongestSubstring = function (s) {\\n    let s = s\\n    let newWord = \\'\\'\\n    let allWords = []\\n\\n    for (let index = 0; index < s.length; index++) {\\n\\n        newWord = \\'\\'\\n        for (let index2 = index; index2 < s.length; index2++) {\\n            if (newWord.indexOf(s[index2]) === -1) {\\n                newWord = newWord + s[index2]\\n\\n                if (index2 === s.length - 1) {\\n                    allWords.push(newWord)\\n                }\\n            } else {\\n                allWords.push(newWord)\\n                break\\n            }\\n        }\\n    }\\n\\n    let longestStr = allWords.sort((a, b) => b.length - a.length)[0]\\n\\n    console.log(\\'allWords\\', allWords)\\n    console.log(\\'longestStr.length\\', longestStr.length)\\n return longestStr.length\\n\\n}\\n`\\n\\n\\n\\n"
                    },
                    {
                        "username": "AHAMED27",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        Map<Character,Integer> map=new HashMap<>();\\n        int start=0,len=0;\\n        \\n        for(int end=0;end<s.length();end++){\\n            char c=s.charAt(end);\\n            \\n            if(map.containsKey(c)){\\n                if(start<=map.get(c)){\\n                    start=map.get(c)+1;\\n                }\\n            }\\n            \\n            len=Math.max(len,end-start+1);\\n            map.put(c,end);\\n        }\\n        return len;\\n    }\\n}"
                    },
                    {
                        "username": "oinrup",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n      // String=\"abcb\"\\n       int count; \\n       int max=0;\\n      for(int i=0;i<s.length()-1;i++){\\n          count=0;\\n          outer:\\n          for(int j=i+1;j<s.length()-1;j++){\\n              if(s.charAt(i)==s.charAt(j)){\\n                  break outer;\\n              }\\n              ++count; \\n              if(max< count){\\n                  max=count;\\n              }\\n               \\n          }\\n      }\\n      return max;\\n    }\\n}\\nIs it right?"
                    },
                    {
                        "username": "HarshMishra2k02",
                        "content": "Can anyone tell me what\\'s wrong with my code?\\n\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n         int SMax=0;\\n         int siz=s.length();\\n         for(int i=0;i<siz;i++){\\n             int Max=0;\\n             for(int j=i+1;j<siz;j++){ \\n                 if(s[i]!= s[j]){\\n                     Max++;\\n                 }\\n                 else{\\n                     break;\\n                 }\\n                 \\n             }\\n             if(SMax <= Max){\\n                 SMax= Max;\\n             }\\n         }\\n         return SMax;\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1752190,
                "content": [
                    {
                        "username": "lokeshbaghel",
                        "content": "How do I know the number of test cases passed when my solution is throwing TLE. I this option removed in updated version\\n"
                    },
                    {
                        "username": "mossgreenpepper",
                        "content": "for anyone is wondering, there is 95 different characters used in the tests"
                    },
                    {
                        "username": "mzimmer52",
                        "content": "class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        biggest = 0\\n        answer = []\\n        for char in list(s):\\n            if char not in answer:\\n                answer.append(char)\\n            else:\\n                answer += char\\n                answer = answer[answer.index(char) + 1:]\\n\\n            if len(answer) > biggest:\\n                biggest = len(answer)\\n\\n        return(biggest)"
                    },
                    {
                        "username": "lecrowpus",
                        "content": "bro . input is\"ckilbkd\" and my output is 6 but expected is 5? how\n is that possible"
                    },
                    {
                        "username": "Akbarkhuja",
                        "content": "it should be 5 => ckilb next is k which is repeating"
                    },
                    {
                        "username": "Akbarkhuja",
                        "content": "I cannot find problem in my code. It returns undefined but in brovser it logs right answer\\n\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n    var ans = \"\";\\n    var first = (str) => {\\n        if (str.length == 0) {\\n            return ans.length;\\n        }\\n        var sub = str[0];\\n        var check = true;\\n        for (var i = 1; i < str.length; i++) {\\n            for (var j = 0; j < sub.length; j++) {\\n                if (str[i] == sub[j]) {\\n                    check = false;\\n                }\\n            }\\n            if (check) {\\n                sub = sub + str[i];\\n            } else {\\n                break;\\n            }\\n        }\\n        if (sub.length > ans.length) {\\n            ans = sub;\\n        }\\n        first(str.substring(1));\\n    };\\n    first(s);\\n};"
                    },
                    {
                        "username": "janis__",
                        "content": "Your function lengthOfLongestSubstring doesn\\'t return any value; at the end of the function, add return ans.length; to return the length of the longest substring."
                    },
                    {
                        "username": "saraahmed2693",
                        "content": "The strategy I am following on my solution is as soon as I find a duplicate, I will start the string again, so I will start with the index of the first duplicated char.\\nIt works well with all test cases expect for the \"\"dvdf\"! I will have to actually go back another index!  to start from v! so, any ideas to bypass that? \\n \\nI went through some solutions, and it follows the same strategy, however it can bypass the \"dvdf\". although it keeps taking the string from the duplicated char index. \\nI don\\'t understand how?   "
                    },
                    {
                        "username": "yair7705778",
                        "content": "Help me please!!!!!\\nMy answer is same with expected answer, but submit code failed.\\n\\n`Runtime Error\\nLine 30 in solution.js\\n    console.log(\\'longestStr.length\\', longestStr.length)\\n                                                ^\\nTypeError: Cannot read properties of undefined (reading \\'length\\')\\n    Line 30: Char 49 in solution.js (lengthOfLongestSubstring)\\n    Line 43: Char 19 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 34: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`\\n\\n---------------------------\\n\\n `\\nvar lengthOfLongestSubstring = function (s) {\\n    let s = s\\n    let newWord = \\'\\'\\n    let allWords = []\\n\\n    for (let index = 0; index < s.length; index++) {\\n\\n        newWord = \\'\\'\\n        for (let index2 = index; index2 < s.length; index2++) {\\n            if (newWord.indexOf(s[index2]) === -1) {\\n                newWord = newWord + s[index2]\\n\\n                if (index2 === s.length - 1) {\\n                    allWords.push(newWord)\\n                }\\n            } else {\\n                allWords.push(newWord)\\n                break\\n            }\\n        }\\n    }\\n\\n    let longestStr = allWords.sort((a, b) => b.length - a.length)[0]\\n\\n    console.log(\\'allWords\\', allWords)\\n    console.log(\\'longestStr.length\\', longestStr.length)\\n return longestStr.length\\n\\n}\\n`\\n\\n\\n\\n"
                    },
                    {
                        "username": "AHAMED27",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        Map<Character,Integer> map=new HashMap<>();\\n        int start=0,len=0;\\n        \\n        for(int end=0;end<s.length();end++){\\n            char c=s.charAt(end);\\n            \\n            if(map.containsKey(c)){\\n                if(start<=map.get(c)){\\n                    start=map.get(c)+1;\\n                }\\n            }\\n            \\n            len=Math.max(len,end-start+1);\\n            map.put(c,end);\\n        }\\n        return len;\\n    }\\n}"
                    },
                    {
                        "username": "oinrup",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n      // String=\"abcb\"\\n       int count; \\n       int max=0;\\n      for(int i=0;i<s.length()-1;i++){\\n          count=0;\\n          outer:\\n          for(int j=i+1;j<s.length()-1;j++){\\n              if(s.charAt(i)==s.charAt(j)){\\n                  break outer;\\n              }\\n              ++count; \\n              if(max< count){\\n                  max=count;\\n              }\\n               \\n          }\\n      }\\n      return max;\\n    }\\n}\\nIs it right?"
                    },
                    {
                        "username": "HarshMishra2k02",
                        "content": "Can anyone tell me what\\'s wrong with my code?\\n\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n         int SMax=0;\\n         int siz=s.length();\\n         for(int i=0;i<siz;i++){\\n             int Max=0;\\n             for(int j=i+1;j<siz;j++){ \\n                 if(s[i]!= s[j]){\\n                     Max++;\\n                 }\\n                 else{\\n                     break;\\n                 }\\n                 \\n             }\\n             if(SMax <= Max){\\n                 SMax= Max;\\n             }\\n         }\\n         return SMax;\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1751893,
                "content": [
                    {
                        "username": "lokeshbaghel",
                        "content": "How do I know the number of test cases passed when my solution is throwing TLE. I this option removed in updated version\\n"
                    },
                    {
                        "username": "mossgreenpepper",
                        "content": "for anyone is wondering, there is 95 different characters used in the tests"
                    },
                    {
                        "username": "mzimmer52",
                        "content": "class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        biggest = 0\\n        answer = []\\n        for char in list(s):\\n            if char not in answer:\\n                answer.append(char)\\n            else:\\n                answer += char\\n                answer = answer[answer.index(char) + 1:]\\n\\n            if len(answer) > biggest:\\n                biggest = len(answer)\\n\\n        return(biggest)"
                    },
                    {
                        "username": "lecrowpus",
                        "content": "bro . input is\"ckilbkd\" and my output is 6 but expected is 5? how\n is that possible"
                    },
                    {
                        "username": "Akbarkhuja",
                        "content": "it should be 5 => ckilb next is k which is repeating"
                    },
                    {
                        "username": "Akbarkhuja",
                        "content": "I cannot find problem in my code. It returns undefined but in brovser it logs right answer\\n\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n    var ans = \"\";\\n    var first = (str) => {\\n        if (str.length == 0) {\\n            return ans.length;\\n        }\\n        var sub = str[0];\\n        var check = true;\\n        for (var i = 1; i < str.length; i++) {\\n            for (var j = 0; j < sub.length; j++) {\\n                if (str[i] == sub[j]) {\\n                    check = false;\\n                }\\n            }\\n            if (check) {\\n                sub = sub + str[i];\\n            } else {\\n                break;\\n            }\\n        }\\n        if (sub.length > ans.length) {\\n            ans = sub;\\n        }\\n        first(str.substring(1));\\n    };\\n    first(s);\\n};"
                    },
                    {
                        "username": "janis__",
                        "content": "Your function lengthOfLongestSubstring doesn\\'t return any value; at the end of the function, add return ans.length; to return the length of the longest substring."
                    },
                    {
                        "username": "saraahmed2693",
                        "content": "The strategy I am following on my solution is as soon as I find a duplicate, I will start the string again, so I will start with the index of the first duplicated char.\\nIt works well with all test cases expect for the \"\"dvdf\"! I will have to actually go back another index!  to start from v! so, any ideas to bypass that? \\n \\nI went through some solutions, and it follows the same strategy, however it can bypass the \"dvdf\". although it keeps taking the string from the duplicated char index. \\nI don\\'t understand how?   "
                    },
                    {
                        "username": "yair7705778",
                        "content": "Help me please!!!!!\\nMy answer is same with expected answer, but submit code failed.\\n\\n`Runtime Error\\nLine 30 in solution.js\\n    console.log(\\'longestStr.length\\', longestStr.length)\\n                                                ^\\nTypeError: Cannot read properties of undefined (reading \\'length\\')\\n    Line 30: Char 49 in solution.js (lengthOfLongestSubstring)\\n    Line 43: Char 19 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 34: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`\\n\\n---------------------------\\n\\n `\\nvar lengthOfLongestSubstring = function (s) {\\n    let s = s\\n    let newWord = \\'\\'\\n    let allWords = []\\n\\n    for (let index = 0; index < s.length; index++) {\\n\\n        newWord = \\'\\'\\n        for (let index2 = index; index2 < s.length; index2++) {\\n            if (newWord.indexOf(s[index2]) === -1) {\\n                newWord = newWord + s[index2]\\n\\n                if (index2 === s.length - 1) {\\n                    allWords.push(newWord)\\n                }\\n            } else {\\n                allWords.push(newWord)\\n                break\\n            }\\n        }\\n    }\\n\\n    let longestStr = allWords.sort((a, b) => b.length - a.length)[0]\\n\\n    console.log(\\'allWords\\', allWords)\\n    console.log(\\'longestStr.length\\', longestStr.length)\\n return longestStr.length\\n\\n}\\n`\\n\\n\\n\\n"
                    },
                    {
                        "username": "AHAMED27",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        Map<Character,Integer> map=new HashMap<>();\\n        int start=0,len=0;\\n        \\n        for(int end=0;end<s.length();end++){\\n            char c=s.charAt(end);\\n            \\n            if(map.containsKey(c)){\\n                if(start<=map.get(c)){\\n                    start=map.get(c)+1;\\n                }\\n            }\\n            \\n            len=Math.max(len,end-start+1);\\n            map.put(c,end);\\n        }\\n        return len;\\n    }\\n}"
                    },
                    {
                        "username": "oinrup",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n      // String=\"abcb\"\\n       int count; \\n       int max=0;\\n      for(int i=0;i<s.length()-1;i++){\\n          count=0;\\n          outer:\\n          for(int j=i+1;j<s.length()-1;j++){\\n              if(s.charAt(i)==s.charAt(j)){\\n                  break outer;\\n              }\\n              ++count; \\n              if(max< count){\\n                  max=count;\\n              }\\n               \\n          }\\n      }\\n      return max;\\n    }\\n}\\nIs it right?"
                    },
                    {
                        "username": "HarshMishra2k02",
                        "content": "Can anyone tell me what\\'s wrong with my code?\\n\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n         int SMax=0;\\n         int siz=s.length();\\n         for(int i=0;i<siz;i++){\\n             int Max=0;\\n             for(int j=i+1;j<siz;j++){ \\n                 if(s[i]!= s[j]){\\n                     Max++;\\n                 }\\n                 else{\\n                     break;\\n                 }\\n                 \\n             }\\n             if(SMax <= Max){\\n                 SMax= Max;\\n             }\\n         }\\n         return SMax;\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1751087,
                "content": [
                    {
                        "username": "lokeshbaghel",
                        "content": "How do I know the number of test cases passed when my solution is throwing TLE. I this option removed in updated version\\n"
                    },
                    {
                        "username": "mossgreenpepper",
                        "content": "for anyone is wondering, there is 95 different characters used in the tests"
                    },
                    {
                        "username": "mzimmer52",
                        "content": "class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        biggest = 0\\n        answer = []\\n        for char in list(s):\\n            if char not in answer:\\n                answer.append(char)\\n            else:\\n                answer += char\\n                answer = answer[answer.index(char) + 1:]\\n\\n            if len(answer) > biggest:\\n                biggest = len(answer)\\n\\n        return(biggest)"
                    },
                    {
                        "username": "lecrowpus",
                        "content": "bro . input is\"ckilbkd\" and my output is 6 but expected is 5? how\n is that possible"
                    },
                    {
                        "username": "Akbarkhuja",
                        "content": "it should be 5 => ckilb next is k which is repeating"
                    },
                    {
                        "username": "Akbarkhuja",
                        "content": "I cannot find problem in my code. It returns undefined but in brovser it logs right answer\\n\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n    var ans = \"\";\\n    var first = (str) => {\\n        if (str.length == 0) {\\n            return ans.length;\\n        }\\n        var sub = str[0];\\n        var check = true;\\n        for (var i = 1; i < str.length; i++) {\\n            for (var j = 0; j < sub.length; j++) {\\n                if (str[i] == sub[j]) {\\n                    check = false;\\n                }\\n            }\\n            if (check) {\\n                sub = sub + str[i];\\n            } else {\\n                break;\\n            }\\n        }\\n        if (sub.length > ans.length) {\\n            ans = sub;\\n        }\\n        first(str.substring(1));\\n    };\\n    first(s);\\n};"
                    },
                    {
                        "username": "janis__",
                        "content": "Your function lengthOfLongestSubstring doesn\\'t return any value; at the end of the function, add return ans.length; to return the length of the longest substring."
                    },
                    {
                        "username": "saraahmed2693",
                        "content": "The strategy I am following on my solution is as soon as I find a duplicate, I will start the string again, so I will start with the index of the first duplicated char.\\nIt works well with all test cases expect for the \"\"dvdf\"! I will have to actually go back another index!  to start from v! so, any ideas to bypass that? \\n \\nI went through some solutions, and it follows the same strategy, however it can bypass the \"dvdf\". although it keeps taking the string from the duplicated char index. \\nI don\\'t understand how?   "
                    },
                    {
                        "username": "yair7705778",
                        "content": "Help me please!!!!!\\nMy answer is same with expected answer, but submit code failed.\\n\\n`Runtime Error\\nLine 30 in solution.js\\n    console.log(\\'longestStr.length\\', longestStr.length)\\n                                                ^\\nTypeError: Cannot read properties of undefined (reading \\'length\\')\\n    Line 30: Char 49 in solution.js (lengthOfLongestSubstring)\\n    Line 43: Char 19 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 34: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`\\n\\n---------------------------\\n\\n `\\nvar lengthOfLongestSubstring = function (s) {\\n    let s = s\\n    let newWord = \\'\\'\\n    let allWords = []\\n\\n    for (let index = 0; index < s.length; index++) {\\n\\n        newWord = \\'\\'\\n        for (let index2 = index; index2 < s.length; index2++) {\\n            if (newWord.indexOf(s[index2]) === -1) {\\n                newWord = newWord + s[index2]\\n\\n                if (index2 === s.length - 1) {\\n                    allWords.push(newWord)\\n                }\\n            } else {\\n                allWords.push(newWord)\\n                break\\n            }\\n        }\\n    }\\n\\n    let longestStr = allWords.sort((a, b) => b.length - a.length)[0]\\n\\n    console.log(\\'allWords\\', allWords)\\n    console.log(\\'longestStr.length\\', longestStr.length)\\n return longestStr.length\\n\\n}\\n`\\n\\n\\n\\n"
                    },
                    {
                        "username": "AHAMED27",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        Map<Character,Integer> map=new HashMap<>();\\n        int start=0,len=0;\\n        \\n        for(int end=0;end<s.length();end++){\\n            char c=s.charAt(end);\\n            \\n            if(map.containsKey(c)){\\n                if(start<=map.get(c)){\\n                    start=map.get(c)+1;\\n                }\\n            }\\n            \\n            len=Math.max(len,end-start+1);\\n            map.put(c,end);\\n        }\\n        return len;\\n    }\\n}"
                    },
                    {
                        "username": "oinrup",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n      // String=\"abcb\"\\n       int count; \\n       int max=0;\\n      for(int i=0;i<s.length()-1;i++){\\n          count=0;\\n          outer:\\n          for(int j=i+1;j<s.length()-1;j++){\\n              if(s.charAt(i)==s.charAt(j)){\\n                  break outer;\\n              }\\n              ++count; \\n              if(max< count){\\n                  max=count;\\n              }\\n               \\n          }\\n      }\\n      return max;\\n    }\\n}\\nIs it right?"
                    },
                    {
                        "username": "HarshMishra2k02",
                        "content": "Can anyone tell me what\\'s wrong with my code?\\n\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n         int SMax=0;\\n         int siz=s.length();\\n         for(int i=0;i<siz;i++){\\n             int Max=0;\\n             for(int j=i+1;j<siz;j++){ \\n                 if(s[i]!= s[j]){\\n                     Max++;\\n                 }\\n                 else{\\n                     break;\\n                 }\\n                 \\n             }\\n             if(SMax <= Max){\\n                 SMax= Max;\\n             }\\n         }\\n         return SMax;\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1750141,
                "content": [
                    {
                        "username": "lokeshbaghel",
                        "content": "How do I know the number of test cases passed when my solution is throwing TLE. I this option removed in updated version\\n"
                    },
                    {
                        "username": "mossgreenpepper",
                        "content": "for anyone is wondering, there is 95 different characters used in the tests"
                    },
                    {
                        "username": "mzimmer52",
                        "content": "class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        biggest = 0\\n        answer = []\\n        for char in list(s):\\n            if char not in answer:\\n                answer.append(char)\\n            else:\\n                answer += char\\n                answer = answer[answer.index(char) + 1:]\\n\\n            if len(answer) > biggest:\\n                biggest = len(answer)\\n\\n        return(biggest)"
                    },
                    {
                        "username": "lecrowpus",
                        "content": "bro . input is\"ckilbkd\" and my output is 6 but expected is 5? how\n is that possible"
                    },
                    {
                        "username": "Akbarkhuja",
                        "content": "it should be 5 => ckilb next is k which is repeating"
                    },
                    {
                        "username": "Akbarkhuja",
                        "content": "I cannot find problem in my code. It returns undefined but in brovser it logs right answer\\n\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n    var ans = \"\";\\n    var first = (str) => {\\n        if (str.length == 0) {\\n            return ans.length;\\n        }\\n        var sub = str[0];\\n        var check = true;\\n        for (var i = 1; i < str.length; i++) {\\n            for (var j = 0; j < sub.length; j++) {\\n                if (str[i] == sub[j]) {\\n                    check = false;\\n                }\\n            }\\n            if (check) {\\n                sub = sub + str[i];\\n            } else {\\n                break;\\n            }\\n        }\\n        if (sub.length > ans.length) {\\n            ans = sub;\\n        }\\n        first(str.substring(1));\\n    };\\n    first(s);\\n};"
                    },
                    {
                        "username": "janis__",
                        "content": "Your function lengthOfLongestSubstring doesn\\'t return any value; at the end of the function, add return ans.length; to return the length of the longest substring."
                    },
                    {
                        "username": "saraahmed2693",
                        "content": "The strategy I am following on my solution is as soon as I find a duplicate, I will start the string again, so I will start with the index of the first duplicated char.\\nIt works well with all test cases expect for the \"\"dvdf\"! I will have to actually go back another index!  to start from v! so, any ideas to bypass that? \\n \\nI went through some solutions, and it follows the same strategy, however it can bypass the \"dvdf\". although it keeps taking the string from the duplicated char index. \\nI don\\'t understand how?   "
                    },
                    {
                        "username": "yair7705778",
                        "content": "Help me please!!!!!\\nMy answer is same with expected answer, but submit code failed.\\n\\n`Runtime Error\\nLine 30 in solution.js\\n    console.log(\\'longestStr.length\\', longestStr.length)\\n                                                ^\\nTypeError: Cannot read properties of undefined (reading \\'length\\')\\n    Line 30: Char 49 in solution.js (lengthOfLongestSubstring)\\n    Line 43: Char 19 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 34: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`\\n\\n---------------------------\\n\\n `\\nvar lengthOfLongestSubstring = function (s) {\\n    let s = s\\n    let newWord = \\'\\'\\n    let allWords = []\\n\\n    for (let index = 0; index < s.length; index++) {\\n\\n        newWord = \\'\\'\\n        for (let index2 = index; index2 < s.length; index2++) {\\n            if (newWord.indexOf(s[index2]) === -1) {\\n                newWord = newWord + s[index2]\\n\\n                if (index2 === s.length - 1) {\\n                    allWords.push(newWord)\\n                }\\n            } else {\\n                allWords.push(newWord)\\n                break\\n            }\\n        }\\n    }\\n\\n    let longestStr = allWords.sort((a, b) => b.length - a.length)[0]\\n\\n    console.log(\\'allWords\\', allWords)\\n    console.log(\\'longestStr.length\\', longestStr.length)\\n return longestStr.length\\n\\n}\\n`\\n\\n\\n\\n"
                    },
                    {
                        "username": "AHAMED27",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        Map<Character,Integer> map=new HashMap<>();\\n        int start=0,len=0;\\n        \\n        for(int end=0;end<s.length();end++){\\n            char c=s.charAt(end);\\n            \\n            if(map.containsKey(c)){\\n                if(start<=map.get(c)){\\n                    start=map.get(c)+1;\\n                }\\n            }\\n            \\n            len=Math.max(len,end-start+1);\\n            map.put(c,end);\\n        }\\n        return len;\\n    }\\n}"
                    },
                    {
                        "username": "oinrup",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n      // String=\"abcb\"\\n       int count; \\n       int max=0;\\n      for(int i=0;i<s.length()-1;i++){\\n          count=0;\\n          outer:\\n          for(int j=i+1;j<s.length()-1;j++){\\n              if(s.charAt(i)==s.charAt(j)){\\n                  break outer;\\n              }\\n              ++count; \\n              if(max< count){\\n                  max=count;\\n              }\\n               \\n          }\\n      }\\n      return max;\\n    }\\n}\\nIs it right?"
                    },
                    {
                        "username": "HarshMishra2k02",
                        "content": "Can anyone tell me what\\'s wrong with my code?\\n\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n         int SMax=0;\\n         int siz=s.length();\\n         for(int i=0;i<siz;i++){\\n             int Max=0;\\n             for(int j=i+1;j<siz;j++){ \\n                 if(s[i]!= s[j]){\\n                     Max++;\\n                 }\\n                 else{\\n                     break;\\n                 }\\n                 \\n             }\\n             if(SMax <= Max){\\n                 SMax= Max;\\n             }\\n         }\\n         return SMax;\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1749960,
                "content": [
                    {
                        "username": "lokeshbaghel",
                        "content": "How do I know the number of test cases passed when my solution is throwing TLE. I this option removed in updated version\\n"
                    },
                    {
                        "username": "mossgreenpepper",
                        "content": "for anyone is wondering, there is 95 different characters used in the tests"
                    },
                    {
                        "username": "mzimmer52",
                        "content": "class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        biggest = 0\\n        answer = []\\n        for char in list(s):\\n            if char not in answer:\\n                answer.append(char)\\n            else:\\n                answer += char\\n                answer = answer[answer.index(char) + 1:]\\n\\n            if len(answer) > biggest:\\n                biggest = len(answer)\\n\\n        return(biggest)"
                    },
                    {
                        "username": "lecrowpus",
                        "content": "bro . input is\"ckilbkd\" and my output is 6 but expected is 5? how\n is that possible"
                    },
                    {
                        "username": "Akbarkhuja",
                        "content": "it should be 5 => ckilb next is k which is repeating"
                    },
                    {
                        "username": "Akbarkhuja",
                        "content": "I cannot find problem in my code. It returns undefined but in brovser it logs right answer\\n\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n    var ans = \"\";\\n    var first = (str) => {\\n        if (str.length == 0) {\\n            return ans.length;\\n        }\\n        var sub = str[0];\\n        var check = true;\\n        for (var i = 1; i < str.length; i++) {\\n            for (var j = 0; j < sub.length; j++) {\\n                if (str[i] == sub[j]) {\\n                    check = false;\\n                }\\n            }\\n            if (check) {\\n                sub = sub + str[i];\\n            } else {\\n                break;\\n            }\\n        }\\n        if (sub.length > ans.length) {\\n            ans = sub;\\n        }\\n        first(str.substring(1));\\n    };\\n    first(s);\\n};"
                    },
                    {
                        "username": "janis__",
                        "content": "Your function lengthOfLongestSubstring doesn\\'t return any value; at the end of the function, add return ans.length; to return the length of the longest substring."
                    },
                    {
                        "username": "saraahmed2693",
                        "content": "The strategy I am following on my solution is as soon as I find a duplicate, I will start the string again, so I will start with the index of the first duplicated char.\\nIt works well with all test cases expect for the \"\"dvdf\"! I will have to actually go back another index!  to start from v! so, any ideas to bypass that? \\n \\nI went through some solutions, and it follows the same strategy, however it can bypass the \"dvdf\". although it keeps taking the string from the duplicated char index. \\nI don\\'t understand how?   "
                    },
                    {
                        "username": "yair7705778",
                        "content": "Help me please!!!!!\\nMy answer is same with expected answer, but submit code failed.\\n\\n`Runtime Error\\nLine 30 in solution.js\\n    console.log(\\'longestStr.length\\', longestStr.length)\\n                                                ^\\nTypeError: Cannot read properties of undefined (reading \\'length\\')\\n    Line 30: Char 49 in solution.js (lengthOfLongestSubstring)\\n    Line 43: Char 19 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 34: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`\\n\\n---------------------------\\n\\n `\\nvar lengthOfLongestSubstring = function (s) {\\n    let s = s\\n    let newWord = \\'\\'\\n    let allWords = []\\n\\n    for (let index = 0; index < s.length; index++) {\\n\\n        newWord = \\'\\'\\n        for (let index2 = index; index2 < s.length; index2++) {\\n            if (newWord.indexOf(s[index2]) === -1) {\\n                newWord = newWord + s[index2]\\n\\n                if (index2 === s.length - 1) {\\n                    allWords.push(newWord)\\n                }\\n            } else {\\n                allWords.push(newWord)\\n                break\\n            }\\n        }\\n    }\\n\\n    let longestStr = allWords.sort((a, b) => b.length - a.length)[0]\\n\\n    console.log(\\'allWords\\', allWords)\\n    console.log(\\'longestStr.length\\', longestStr.length)\\n return longestStr.length\\n\\n}\\n`\\n\\n\\n\\n"
                    },
                    {
                        "username": "AHAMED27",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        Map<Character,Integer> map=new HashMap<>();\\n        int start=0,len=0;\\n        \\n        for(int end=0;end<s.length();end++){\\n            char c=s.charAt(end);\\n            \\n            if(map.containsKey(c)){\\n                if(start<=map.get(c)){\\n                    start=map.get(c)+1;\\n                }\\n            }\\n            \\n            len=Math.max(len,end-start+1);\\n            map.put(c,end);\\n        }\\n        return len;\\n    }\\n}"
                    },
                    {
                        "username": "oinrup",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n      // String=\"abcb\"\\n       int count; \\n       int max=0;\\n      for(int i=0;i<s.length()-1;i++){\\n          count=0;\\n          outer:\\n          for(int j=i+1;j<s.length()-1;j++){\\n              if(s.charAt(i)==s.charAt(j)){\\n                  break outer;\\n              }\\n              ++count; \\n              if(max< count){\\n                  max=count;\\n              }\\n               \\n          }\\n      }\\n      return max;\\n    }\\n}\\nIs it right?"
                    },
                    {
                        "username": "HarshMishra2k02",
                        "content": "Can anyone tell me what\\'s wrong with my code?\\n\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n         int SMax=0;\\n         int siz=s.length();\\n         for(int i=0;i<siz;i++){\\n             int Max=0;\\n             for(int j=i+1;j<siz;j++){ \\n                 if(s[i]!= s[j]){\\n                     Max++;\\n                 }\\n                 else{\\n                     break;\\n                 }\\n                 \\n             }\\n             if(SMax <= Max){\\n                 SMax= Max;\\n             }\\n         }\\n         return SMax;\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1749752,
                "content": [
                    {
                        "username": "lokeshbaghel",
                        "content": "How do I know the number of test cases passed when my solution is throwing TLE. I this option removed in updated version\\n"
                    },
                    {
                        "username": "mossgreenpepper",
                        "content": "for anyone is wondering, there is 95 different characters used in the tests"
                    },
                    {
                        "username": "mzimmer52",
                        "content": "class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        biggest = 0\\n        answer = []\\n        for char in list(s):\\n            if char not in answer:\\n                answer.append(char)\\n            else:\\n                answer += char\\n                answer = answer[answer.index(char) + 1:]\\n\\n            if len(answer) > biggest:\\n                biggest = len(answer)\\n\\n        return(biggest)"
                    },
                    {
                        "username": "lecrowpus",
                        "content": "bro . input is\"ckilbkd\" and my output is 6 but expected is 5? how\n is that possible"
                    },
                    {
                        "username": "Akbarkhuja",
                        "content": "it should be 5 => ckilb next is k which is repeating"
                    },
                    {
                        "username": "Akbarkhuja",
                        "content": "I cannot find problem in my code. It returns undefined but in brovser it logs right answer\\n\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n    var ans = \"\";\\n    var first = (str) => {\\n        if (str.length == 0) {\\n            return ans.length;\\n        }\\n        var sub = str[0];\\n        var check = true;\\n        for (var i = 1; i < str.length; i++) {\\n            for (var j = 0; j < sub.length; j++) {\\n                if (str[i] == sub[j]) {\\n                    check = false;\\n                }\\n            }\\n            if (check) {\\n                sub = sub + str[i];\\n            } else {\\n                break;\\n            }\\n        }\\n        if (sub.length > ans.length) {\\n            ans = sub;\\n        }\\n        first(str.substring(1));\\n    };\\n    first(s);\\n};"
                    },
                    {
                        "username": "janis__",
                        "content": "Your function lengthOfLongestSubstring doesn\\'t return any value; at the end of the function, add return ans.length; to return the length of the longest substring."
                    },
                    {
                        "username": "saraahmed2693",
                        "content": "The strategy I am following on my solution is as soon as I find a duplicate, I will start the string again, so I will start with the index of the first duplicated char.\\nIt works well with all test cases expect for the \"\"dvdf\"! I will have to actually go back another index!  to start from v! so, any ideas to bypass that? \\n \\nI went through some solutions, and it follows the same strategy, however it can bypass the \"dvdf\". although it keeps taking the string from the duplicated char index. \\nI don\\'t understand how?   "
                    },
                    {
                        "username": "yair7705778",
                        "content": "Help me please!!!!!\\nMy answer is same with expected answer, but submit code failed.\\n\\n`Runtime Error\\nLine 30 in solution.js\\n    console.log(\\'longestStr.length\\', longestStr.length)\\n                                                ^\\nTypeError: Cannot read properties of undefined (reading \\'length\\')\\n    Line 30: Char 49 in solution.js (lengthOfLongestSubstring)\\n    Line 43: Char 19 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 34: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`\\n\\n---------------------------\\n\\n `\\nvar lengthOfLongestSubstring = function (s) {\\n    let s = s\\n    let newWord = \\'\\'\\n    let allWords = []\\n\\n    for (let index = 0; index < s.length; index++) {\\n\\n        newWord = \\'\\'\\n        for (let index2 = index; index2 < s.length; index2++) {\\n            if (newWord.indexOf(s[index2]) === -1) {\\n                newWord = newWord + s[index2]\\n\\n                if (index2 === s.length - 1) {\\n                    allWords.push(newWord)\\n                }\\n            } else {\\n                allWords.push(newWord)\\n                break\\n            }\\n        }\\n    }\\n\\n    let longestStr = allWords.sort((a, b) => b.length - a.length)[0]\\n\\n    console.log(\\'allWords\\', allWords)\\n    console.log(\\'longestStr.length\\', longestStr.length)\\n return longestStr.length\\n\\n}\\n`\\n\\n\\n\\n"
                    },
                    {
                        "username": "AHAMED27",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        Map<Character,Integer> map=new HashMap<>();\\n        int start=0,len=0;\\n        \\n        for(int end=0;end<s.length();end++){\\n            char c=s.charAt(end);\\n            \\n            if(map.containsKey(c)){\\n                if(start<=map.get(c)){\\n                    start=map.get(c)+1;\\n                }\\n            }\\n            \\n            len=Math.max(len,end-start+1);\\n            map.put(c,end);\\n        }\\n        return len;\\n    }\\n}"
                    },
                    {
                        "username": "oinrup",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n      // String=\"abcb\"\\n       int count; \\n       int max=0;\\n      for(int i=0;i<s.length()-1;i++){\\n          count=0;\\n          outer:\\n          for(int j=i+1;j<s.length()-1;j++){\\n              if(s.charAt(i)==s.charAt(j)){\\n                  break outer;\\n              }\\n              ++count; \\n              if(max< count){\\n                  max=count;\\n              }\\n               \\n          }\\n      }\\n      return max;\\n    }\\n}\\nIs it right?"
                    },
                    {
                        "username": "HarshMishra2k02",
                        "content": "Can anyone tell me what\\'s wrong with my code?\\n\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n         int SMax=0;\\n         int siz=s.length();\\n         for(int i=0;i<siz;i++){\\n             int Max=0;\\n             for(int j=i+1;j<siz;j++){ \\n                 if(s[i]!= s[j]){\\n                     Max++;\\n                 }\\n                 else{\\n                     break;\\n                 }\\n                 \\n             }\\n             if(SMax <= Max){\\n                 SMax= Max;\\n             }\\n         }\\n         return SMax;\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1746179,
                "content": [
                    {
                        "username": "lokeshbaghel",
                        "content": "How do I know the number of test cases passed when my solution is throwing TLE. I this option removed in updated version\\n"
                    },
                    {
                        "username": "mossgreenpepper",
                        "content": "for anyone is wondering, there is 95 different characters used in the tests"
                    },
                    {
                        "username": "mzimmer52",
                        "content": "class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        biggest = 0\\n        answer = []\\n        for char in list(s):\\n            if char not in answer:\\n                answer.append(char)\\n            else:\\n                answer += char\\n                answer = answer[answer.index(char) + 1:]\\n\\n            if len(answer) > biggest:\\n                biggest = len(answer)\\n\\n        return(biggest)"
                    },
                    {
                        "username": "lecrowpus",
                        "content": "bro . input is\"ckilbkd\" and my output is 6 but expected is 5? how\n is that possible"
                    },
                    {
                        "username": "Akbarkhuja",
                        "content": "it should be 5 => ckilb next is k which is repeating"
                    },
                    {
                        "username": "Akbarkhuja",
                        "content": "I cannot find problem in my code. It returns undefined but in brovser it logs right answer\\n\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n    var ans = \"\";\\n    var first = (str) => {\\n        if (str.length == 0) {\\n            return ans.length;\\n        }\\n        var sub = str[0];\\n        var check = true;\\n        for (var i = 1; i < str.length; i++) {\\n            for (var j = 0; j < sub.length; j++) {\\n                if (str[i] == sub[j]) {\\n                    check = false;\\n                }\\n            }\\n            if (check) {\\n                sub = sub + str[i];\\n            } else {\\n                break;\\n            }\\n        }\\n        if (sub.length > ans.length) {\\n            ans = sub;\\n        }\\n        first(str.substring(1));\\n    };\\n    first(s);\\n};"
                    },
                    {
                        "username": "janis__",
                        "content": "Your function lengthOfLongestSubstring doesn\\'t return any value; at the end of the function, add return ans.length; to return the length of the longest substring."
                    },
                    {
                        "username": "saraahmed2693",
                        "content": "The strategy I am following on my solution is as soon as I find a duplicate, I will start the string again, so I will start with the index of the first duplicated char.\\nIt works well with all test cases expect for the \"\"dvdf\"! I will have to actually go back another index!  to start from v! so, any ideas to bypass that? \\n \\nI went through some solutions, and it follows the same strategy, however it can bypass the \"dvdf\". although it keeps taking the string from the duplicated char index. \\nI don\\'t understand how?   "
                    },
                    {
                        "username": "yair7705778",
                        "content": "Help me please!!!!!\\nMy answer is same with expected answer, but submit code failed.\\n\\n`Runtime Error\\nLine 30 in solution.js\\n    console.log(\\'longestStr.length\\', longestStr.length)\\n                                                ^\\nTypeError: Cannot read properties of undefined (reading \\'length\\')\\n    Line 30: Char 49 in solution.js (lengthOfLongestSubstring)\\n    Line 43: Char 19 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 34: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`\\n\\n---------------------------\\n\\n `\\nvar lengthOfLongestSubstring = function (s) {\\n    let s = s\\n    let newWord = \\'\\'\\n    let allWords = []\\n\\n    for (let index = 0; index < s.length; index++) {\\n\\n        newWord = \\'\\'\\n        for (let index2 = index; index2 < s.length; index2++) {\\n            if (newWord.indexOf(s[index2]) === -1) {\\n                newWord = newWord + s[index2]\\n\\n                if (index2 === s.length - 1) {\\n                    allWords.push(newWord)\\n                }\\n            } else {\\n                allWords.push(newWord)\\n                break\\n            }\\n        }\\n    }\\n\\n    let longestStr = allWords.sort((a, b) => b.length - a.length)[0]\\n\\n    console.log(\\'allWords\\', allWords)\\n    console.log(\\'longestStr.length\\', longestStr.length)\\n return longestStr.length\\n\\n}\\n`\\n\\n\\n\\n"
                    },
                    {
                        "username": "AHAMED27",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        Map<Character,Integer> map=new HashMap<>();\\n        int start=0,len=0;\\n        \\n        for(int end=0;end<s.length();end++){\\n            char c=s.charAt(end);\\n            \\n            if(map.containsKey(c)){\\n                if(start<=map.get(c)){\\n                    start=map.get(c)+1;\\n                }\\n            }\\n            \\n            len=Math.max(len,end-start+1);\\n            map.put(c,end);\\n        }\\n        return len;\\n    }\\n}"
                    },
                    {
                        "username": "oinrup",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n      // String=\"abcb\"\\n       int count; \\n       int max=0;\\n      for(int i=0;i<s.length()-1;i++){\\n          count=0;\\n          outer:\\n          for(int j=i+1;j<s.length()-1;j++){\\n              if(s.charAt(i)==s.charAt(j)){\\n                  break outer;\\n              }\\n              ++count; \\n              if(max< count){\\n                  max=count;\\n              }\\n               \\n          }\\n      }\\n      return max;\\n    }\\n}\\nIs it right?"
                    },
                    {
                        "username": "HarshMishra2k02",
                        "content": "Can anyone tell me what\\'s wrong with my code?\\n\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n         int SMax=0;\\n         int siz=s.length();\\n         for(int i=0;i<siz;i++){\\n             int Max=0;\\n             for(int j=i+1;j<siz;j++){ \\n                 if(s[i]!= s[j]){\\n                     Max++;\\n                 }\\n                 else{\\n                     break;\\n                 }\\n                 \\n             }\\n             if(SMax <= Max){\\n                 SMax= Max;\\n             }\\n         }\\n         return SMax;\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1745311,
                "content": [
                    {
                        "username": "lokeshbaghel",
                        "content": "How do I know the number of test cases passed when my solution is throwing TLE. I this option removed in updated version\\n"
                    },
                    {
                        "username": "mossgreenpepper",
                        "content": "for anyone is wondering, there is 95 different characters used in the tests"
                    },
                    {
                        "username": "mzimmer52",
                        "content": "class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        biggest = 0\\n        answer = []\\n        for char in list(s):\\n            if char not in answer:\\n                answer.append(char)\\n            else:\\n                answer += char\\n                answer = answer[answer.index(char) + 1:]\\n\\n            if len(answer) > biggest:\\n                biggest = len(answer)\\n\\n        return(biggest)"
                    },
                    {
                        "username": "lecrowpus",
                        "content": "bro . input is\"ckilbkd\" and my output is 6 but expected is 5? how\n is that possible"
                    },
                    {
                        "username": "Akbarkhuja",
                        "content": "it should be 5 => ckilb next is k which is repeating"
                    },
                    {
                        "username": "Akbarkhuja",
                        "content": "I cannot find problem in my code. It returns undefined but in brovser it logs right answer\\n\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n    var ans = \"\";\\n    var first = (str) => {\\n        if (str.length == 0) {\\n            return ans.length;\\n        }\\n        var sub = str[0];\\n        var check = true;\\n        for (var i = 1; i < str.length; i++) {\\n            for (var j = 0; j < sub.length; j++) {\\n                if (str[i] == sub[j]) {\\n                    check = false;\\n                }\\n            }\\n            if (check) {\\n                sub = sub + str[i];\\n            } else {\\n                break;\\n            }\\n        }\\n        if (sub.length > ans.length) {\\n            ans = sub;\\n        }\\n        first(str.substring(1));\\n    };\\n    first(s);\\n};"
                    },
                    {
                        "username": "janis__",
                        "content": "Your function lengthOfLongestSubstring doesn\\'t return any value; at the end of the function, add return ans.length; to return the length of the longest substring."
                    },
                    {
                        "username": "saraahmed2693",
                        "content": "The strategy I am following on my solution is as soon as I find a duplicate, I will start the string again, so I will start with the index of the first duplicated char.\\nIt works well with all test cases expect for the \"\"dvdf\"! I will have to actually go back another index!  to start from v! so, any ideas to bypass that? \\n \\nI went through some solutions, and it follows the same strategy, however it can bypass the \"dvdf\". although it keeps taking the string from the duplicated char index. \\nI don\\'t understand how?   "
                    },
                    {
                        "username": "yair7705778",
                        "content": "Help me please!!!!!\\nMy answer is same with expected answer, but submit code failed.\\n\\n`Runtime Error\\nLine 30 in solution.js\\n    console.log(\\'longestStr.length\\', longestStr.length)\\n                                                ^\\nTypeError: Cannot read properties of undefined (reading \\'length\\')\\n    Line 30: Char 49 in solution.js (lengthOfLongestSubstring)\\n    Line 43: Char 19 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 34: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`\\n\\n---------------------------\\n\\n `\\nvar lengthOfLongestSubstring = function (s) {\\n    let s = s\\n    let newWord = \\'\\'\\n    let allWords = []\\n\\n    for (let index = 0; index < s.length; index++) {\\n\\n        newWord = \\'\\'\\n        for (let index2 = index; index2 < s.length; index2++) {\\n            if (newWord.indexOf(s[index2]) === -1) {\\n                newWord = newWord + s[index2]\\n\\n                if (index2 === s.length - 1) {\\n                    allWords.push(newWord)\\n                }\\n            } else {\\n                allWords.push(newWord)\\n                break\\n            }\\n        }\\n    }\\n\\n    let longestStr = allWords.sort((a, b) => b.length - a.length)[0]\\n\\n    console.log(\\'allWords\\', allWords)\\n    console.log(\\'longestStr.length\\', longestStr.length)\\n return longestStr.length\\n\\n}\\n`\\n\\n\\n\\n"
                    },
                    {
                        "username": "AHAMED27",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        Map<Character,Integer> map=new HashMap<>();\\n        int start=0,len=0;\\n        \\n        for(int end=0;end<s.length();end++){\\n            char c=s.charAt(end);\\n            \\n            if(map.containsKey(c)){\\n                if(start<=map.get(c)){\\n                    start=map.get(c)+1;\\n                }\\n            }\\n            \\n            len=Math.max(len,end-start+1);\\n            map.put(c,end);\\n        }\\n        return len;\\n    }\\n}"
                    },
                    {
                        "username": "oinrup",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n      // String=\"abcb\"\\n       int count; \\n       int max=0;\\n      for(int i=0;i<s.length()-1;i++){\\n          count=0;\\n          outer:\\n          for(int j=i+1;j<s.length()-1;j++){\\n              if(s.charAt(i)==s.charAt(j)){\\n                  break outer;\\n              }\\n              ++count; \\n              if(max< count){\\n                  max=count;\\n              }\\n               \\n          }\\n      }\\n      return max;\\n    }\\n}\\nIs it right?"
                    },
                    {
                        "username": "HarshMishra2k02",
                        "content": "Can anyone tell me what\\'s wrong with my code?\\n\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n         int SMax=0;\\n         int siz=s.length();\\n         for(int i=0;i<siz;i++){\\n             int Max=0;\\n             for(int j=i+1;j<siz;j++){ \\n                 if(s[i]!= s[j]){\\n                     Max++;\\n                 }\\n                 else{\\n                     break;\\n                 }\\n                 \\n             }\\n             if(SMax <= Max){\\n                 SMax= Max;\\n             }\\n         }\\n         return SMax;\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1741248,
                "content": [
                    {
                        "username": "lokeshbaghel",
                        "content": "How do I know the number of test cases passed when my solution is throwing TLE. I this option removed in updated version\\n"
                    },
                    {
                        "username": "mossgreenpepper",
                        "content": "for anyone is wondering, there is 95 different characters used in the tests"
                    },
                    {
                        "username": "mzimmer52",
                        "content": "class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        biggest = 0\\n        answer = []\\n        for char in list(s):\\n            if char not in answer:\\n                answer.append(char)\\n            else:\\n                answer += char\\n                answer = answer[answer.index(char) + 1:]\\n\\n            if len(answer) > biggest:\\n                biggest = len(answer)\\n\\n        return(biggest)"
                    },
                    {
                        "username": "lecrowpus",
                        "content": "bro . input is\"ckilbkd\" and my output is 6 but expected is 5? how\n is that possible"
                    },
                    {
                        "username": "Akbarkhuja",
                        "content": "it should be 5 => ckilb next is k which is repeating"
                    },
                    {
                        "username": "Akbarkhuja",
                        "content": "I cannot find problem in my code. It returns undefined but in brovser it logs right answer\\n\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n    var ans = \"\";\\n    var first = (str) => {\\n        if (str.length == 0) {\\n            return ans.length;\\n        }\\n        var sub = str[0];\\n        var check = true;\\n        for (var i = 1; i < str.length; i++) {\\n            for (var j = 0; j < sub.length; j++) {\\n                if (str[i] == sub[j]) {\\n                    check = false;\\n                }\\n            }\\n            if (check) {\\n                sub = sub + str[i];\\n            } else {\\n                break;\\n            }\\n        }\\n        if (sub.length > ans.length) {\\n            ans = sub;\\n        }\\n        first(str.substring(1));\\n    };\\n    first(s);\\n};"
                    },
                    {
                        "username": "janis__",
                        "content": "Your function lengthOfLongestSubstring doesn\\'t return any value; at the end of the function, add return ans.length; to return the length of the longest substring."
                    },
                    {
                        "username": "saraahmed2693",
                        "content": "The strategy I am following on my solution is as soon as I find a duplicate, I will start the string again, so I will start with the index of the first duplicated char.\\nIt works well with all test cases expect for the \"\"dvdf\"! I will have to actually go back another index!  to start from v! so, any ideas to bypass that? \\n \\nI went through some solutions, and it follows the same strategy, however it can bypass the \"dvdf\". although it keeps taking the string from the duplicated char index. \\nI don\\'t understand how?   "
                    },
                    {
                        "username": "yair7705778",
                        "content": "Help me please!!!!!\\nMy answer is same with expected answer, but submit code failed.\\n\\n`Runtime Error\\nLine 30 in solution.js\\n    console.log(\\'longestStr.length\\', longestStr.length)\\n                                                ^\\nTypeError: Cannot read properties of undefined (reading \\'length\\')\\n    Line 30: Char 49 in solution.js (lengthOfLongestSubstring)\\n    Line 43: Char 19 in solution.js (Object.<anonymous>)\\n    Line 16: Char 8 in runner.js (Object.runner)\\n    Line 34: Char 26 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47`\\n\\n---------------------------\\n\\n `\\nvar lengthOfLongestSubstring = function (s) {\\n    let s = s\\n    let newWord = \\'\\'\\n    let allWords = []\\n\\n    for (let index = 0; index < s.length; index++) {\\n\\n        newWord = \\'\\'\\n        for (let index2 = index; index2 < s.length; index2++) {\\n            if (newWord.indexOf(s[index2]) === -1) {\\n                newWord = newWord + s[index2]\\n\\n                if (index2 === s.length - 1) {\\n                    allWords.push(newWord)\\n                }\\n            } else {\\n                allWords.push(newWord)\\n                break\\n            }\\n        }\\n    }\\n\\n    let longestStr = allWords.sort((a, b) => b.length - a.length)[0]\\n\\n    console.log(\\'allWords\\', allWords)\\n    console.log(\\'longestStr.length\\', longestStr.length)\\n return longestStr.length\\n\\n}\\n`\\n\\n\\n\\n"
                    },
                    {
                        "username": "AHAMED27",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        Map<Character,Integer> map=new HashMap<>();\\n        int start=0,len=0;\\n        \\n        for(int end=0;end<s.length();end++){\\n            char c=s.charAt(end);\\n            \\n            if(map.containsKey(c)){\\n                if(start<=map.get(c)){\\n                    start=map.get(c)+1;\\n                }\\n            }\\n            \\n            len=Math.max(len,end-start+1);\\n            map.put(c,end);\\n        }\\n        return len;\\n    }\\n}"
                    },
                    {
                        "username": "oinrup",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n      // String=\"abcb\"\\n       int count; \\n       int max=0;\\n      for(int i=0;i<s.length()-1;i++){\\n          count=0;\\n          outer:\\n          for(int j=i+1;j<s.length()-1;j++){\\n              if(s.charAt(i)==s.charAt(j)){\\n                  break outer;\\n              }\\n              ++count; \\n              if(max< count){\\n                  max=count;\\n              }\\n               \\n          }\\n      }\\n      return max;\\n    }\\n}\\nIs it right?"
                    },
                    {
                        "username": "HarshMishra2k02",
                        "content": "Can anyone tell me what\\'s wrong with my code?\\n\\nclass Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n         int SMax=0;\\n         int siz=s.length();\\n         for(int i=0;i<siz;i++){\\n             int Max=0;\\n             for(int j=i+1;j<siz;j++){ \\n                 if(s[i]!= s[j]){\\n                     Max++;\\n                 }\\n                 else{\\n                     break;\\n                 }\\n                 \\n             }\\n             if(SMax <= Max){\\n                 SMax= Max;\\n             }\\n         }\\n         return SMax;\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1738691,
                "content": [
                    {
                        "username": "jyzeeg",
                        "content": "Stuck at 985/987..input is just a space s= \" \\u201C\\uFF0C  and my output is 0 and expected a 1... not sure how to fix this. anyone please help.. please"
                    },
                    {
                        "username": "nikhilsom2008",
                        "content": "if len(s)==1:\\n    return 1\\n\\nThis will fix it"
                    },
                    {
                        "username": "nyck33",
                        "content": "Where can I get a bunch of test cases?"
                    },
                    {
                        "username": "mukeshk92578",
                        "content": "class Solution {\\n\\n    \\n    public int lengthOfLongestSubstring(String str) {\\n       HashMap<Character,Integer> hm = new HashMap<>();\\n       int maxLength = 0, left = 0;\\n        if(str.isEmpty()){\\n            return 0;\\n        }\\n        else if(str.length() == 1){\\n            return 1;\\n        }\\n        for(int right = 0; right < str.length();right++){\\n            char ch = str.charAt(right);\\n            hm.put(ch,hm.getOrDefault(ch,0)+1);\\n\\n            while(hm.get(ch)> 1){\\n                char chl = str.charAt(left);\\n                hm.put(chl,hm.get(chl) -1);\\n                left++;\\n            }\\n            maxLength = Math.max(maxLength, right-left +1);\\n        }\\n        return maxLength;\\n    }\\n}"
                    },
                    {
                        "username": "akhilpan",
                        "content": "I\\'m getting ==30==ERROR: AddressSanitizer: heap-buffer-overflow error. What could be wrong with my solution?\\n"
                    },
                    {
                        "username": "mktek009",
                        "content": "Hi,\\nWhy is the expected output of  \"anviaj\" 5 and not 4 like my output?\\nAs far as I understand \"a ->n ->v -> i -> ///a (back to a ) means the longest substring length is 4?\\n\\nWhat am I missing.."
                    },
                    {
                        "username": "Jia_Bao",
                        "content": "anvi is a substring without repeating character.\\nBut how about nviaj is also without repeating character but it\\'s longer\\n"
                    },
                    {
                        "username": "user0322FJ",
                        "content": "case 986 is really crazy) 56seconds to find result"
                    },
                    {
                        "username": "luckyltk9",
                        "content": "anyone know how to deal with the time limit exceeded error?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@luckyltk9](/luckyltk9)\nFor TLE, dont return to check s[i] again, using two pointers, first pointer move to the last repeated character s[i_1+1], for example one pointer at string-th s[j+1] and another move forward till s[k], with k>j+1, if s[k] in s[j+1:k+1] stop and check if length > k-i-1? if no update length, then continue. "
                    },
                    {
                        "username": "vs153698",
                        "content": "Given \"anviaj\" longest substring without repeating characters  should be of length 4 i.e anvi but it is expecting 5  IDK why, do anyone has any explanation for this please let me know."
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@vs153698](/vs153698) The longest substring without repeating characters is \"nviaj\" not \"\"anvi\". Your algorithm should keep move pointer forward 1 after found \"a\" is repeated. "
                    },
                    {
                        "username": "Rahulx01",
                        "content": "on given input dvdf my output is 2, but expected output is 3, i littreally don\\'t understand it\\n"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Rahul Goyal](/Rahulx01)\\nThe longest substring without repeating characters is \"vdf\" not \"\"dv\". Your algorithm should keep move pointer forward 1 after found \"d\" is repeated."
                    },
                    {
                        "username": "Azid-ops",
                        "content": "I have a doubt, my question is to find longest substring without repeating characters and my string is: \\'pwwkew\\', the answer should be \\'pwke\\' because we have to eliminate duplicate characters but they showing that \\'wke\\' is the right answer ,i don\\'t understand where did \\'p\\' go, answer should be \\'pwke\\' after eliminating w "
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Mahad Ali](/Azid-ops)Substring is continuous string in string, it is not a subsequence, then pwke is not correct.\\n"
                    }
                ]
            },
            {
                "id": 1736454,
                "content": [
                    {
                        "username": "jyzeeg",
                        "content": "Stuck at 985/987..input is just a space s= \" \\u201C\\uFF0C  and my output is 0 and expected a 1... not sure how to fix this. anyone please help.. please"
                    },
                    {
                        "username": "nikhilsom2008",
                        "content": "if len(s)==1:\\n    return 1\\n\\nThis will fix it"
                    },
                    {
                        "username": "nyck33",
                        "content": "Where can I get a bunch of test cases?"
                    },
                    {
                        "username": "mukeshk92578",
                        "content": "class Solution {\\n\\n    \\n    public int lengthOfLongestSubstring(String str) {\\n       HashMap<Character,Integer> hm = new HashMap<>();\\n       int maxLength = 0, left = 0;\\n        if(str.isEmpty()){\\n            return 0;\\n        }\\n        else if(str.length() == 1){\\n            return 1;\\n        }\\n        for(int right = 0; right < str.length();right++){\\n            char ch = str.charAt(right);\\n            hm.put(ch,hm.getOrDefault(ch,0)+1);\\n\\n            while(hm.get(ch)> 1){\\n                char chl = str.charAt(left);\\n                hm.put(chl,hm.get(chl) -1);\\n                left++;\\n            }\\n            maxLength = Math.max(maxLength, right-left +1);\\n        }\\n        return maxLength;\\n    }\\n}"
                    },
                    {
                        "username": "akhilpan",
                        "content": "I\\'m getting ==30==ERROR: AddressSanitizer: heap-buffer-overflow error. What could be wrong with my solution?\\n"
                    },
                    {
                        "username": "mktek009",
                        "content": "Hi,\\nWhy is the expected output of  \"anviaj\" 5 and not 4 like my output?\\nAs far as I understand \"a ->n ->v -> i -> ///a (back to a ) means the longest substring length is 4?\\n\\nWhat am I missing.."
                    },
                    {
                        "username": "Jia_Bao",
                        "content": "anvi is a substring without repeating character.\\nBut how about nviaj is also without repeating character but it\\'s longer\\n"
                    },
                    {
                        "username": "user0322FJ",
                        "content": "case 986 is really crazy) 56seconds to find result"
                    },
                    {
                        "username": "luckyltk9",
                        "content": "anyone know how to deal with the time limit exceeded error?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@luckyltk9](/luckyltk9)\nFor TLE, dont return to check s[i] again, using two pointers, first pointer move to the last repeated character s[i_1+1], for example one pointer at string-th s[j+1] and another move forward till s[k], with k>j+1, if s[k] in s[j+1:k+1] stop and check if length > k-i-1? if no update length, then continue. "
                    },
                    {
                        "username": "vs153698",
                        "content": "Given \"anviaj\" longest substring without repeating characters  should be of length 4 i.e anvi but it is expecting 5  IDK why, do anyone has any explanation for this please let me know."
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@vs153698](/vs153698) The longest substring without repeating characters is \"nviaj\" not \"\"anvi\". Your algorithm should keep move pointer forward 1 after found \"a\" is repeated. "
                    },
                    {
                        "username": "Rahulx01",
                        "content": "on given input dvdf my output is 2, but expected output is 3, i littreally don\\'t understand it\\n"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Rahul Goyal](/Rahulx01)\\nThe longest substring without repeating characters is \"vdf\" not \"\"dv\". Your algorithm should keep move pointer forward 1 after found \"d\" is repeated."
                    },
                    {
                        "username": "Azid-ops",
                        "content": "I have a doubt, my question is to find longest substring without repeating characters and my string is: \\'pwwkew\\', the answer should be \\'pwke\\' because we have to eliminate duplicate characters but they showing that \\'wke\\' is the right answer ,i don\\'t understand where did \\'p\\' go, answer should be \\'pwke\\' after eliminating w "
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Mahad Ali](/Azid-ops)Substring is continuous string in string, it is not a subsequence, then pwke is not correct.\\n"
                    }
                ]
            },
            {
                "id": 1734227,
                "content": [
                    {
                        "username": "jyzeeg",
                        "content": "Stuck at 985/987..input is just a space s= \" \\u201C\\uFF0C  and my output is 0 and expected a 1... not sure how to fix this. anyone please help.. please"
                    },
                    {
                        "username": "nikhilsom2008",
                        "content": "if len(s)==1:\\n    return 1\\n\\nThis will fix it"
                    },
                    {
                        "username": "nyck33",
                        "content": "Where can I get a bunch of test cases?"
                    },
                    {
                        "username": "mukeshk92578",
                        "content": "class Solution {\\n\\n    \\n    public int lengthOfLongestSubstring(String str) {\\n       HashMap<Character,Integer> hm = new HashMap<>();\\n       int maxLength = 0, left = 0;\\n        if(str.isEmpty()){\\n            return 0;\\n        }\\n        else if(str.length() == 1){\\n            return 1;\\n        }\\n        for(int right = 0; right < str.length();right++){\\n            char ch = str.charAt(right);\\n            hm.put(ch,hm.getOrDefault(ch,0)+1);\\n\\n            while(hm.get(ch)> 1){\\n                char chl = str.charAt(left);\\n                hm.put(chl,hm.get(chl) -1);\\n                left++;\\n            }\\n            maxLength = Math.max(maxLength, right-left +1);\\n        }\\n        return maxLength;\\n    }\\n}"
                    },
                    {
                        "username": "akhilpan",
                        "content": "I\\'m getting ==30==ERROR: AddressSanitizer: heap-buffer-overflow error. What could be wrong with my solution?\\n"
                    },
                    {
                        "username": "mktek009",
                        "content": "Hi,\\nWhy is the expected output of  \"anviaj\" 5 and not 4 like my output?\\nAs far as I understand \"a ->n ->v -> i -> ///a (back to a ) means the longest substring length is 4?\\n\\nWhat am I missing.."
                    },
                    {
                        "username": "Jia_Bao",
                        "content": "anvi is a substring without repeating character.\\nBut how about nviaj is also without repeating character but it\\'s longer\\n"
                    },
                    {
                        "username": "user0322FJ",
                        "content": "case 986 is really crazy) 56seconds to find result"
                    },
                    {
                        "username": "luckyltk9",
                        "content": "anyone know how to deal with the time limit exceeded error?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@luckyltk9](/luckyltk9)\nFor TLE, dont return to check s[i] again, using two pointers, first pointer move to the last repeated character s[i_1+1], for example one pointer at string-th s[j+1] and another move forward till s[k], with k>j+1, if s[k] in s[j+1:k+1] stop and check if length > k-i-1? if no update length, then continue. "
                    },
                    {
                        "username": "vs153698",
                        "content": "Given \"anviaj\" longest substring without repeating characters  should be of length 4 i.e anvi but it is expecting 5  IDK why, do anyone has any explanation for this please let me know."
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@vs153698](/vs153698) The longest substring without repeating characters is \"nviaj\" not \"\"anvi\". Your algorithm should keep move pointer forward 1 after found \"a\" is repeated. "
                    },
                    {
                        "username": "Rahulx01",
                        "content": "on given input dvdf my output is 2, but expected output is 3, i littreally don\\'t understand it\\n"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Rahul Goyal](/Rahulx01)\\nThe longest substring without repeating characters is \"vdf\" not \"\"dv\". Your algorithm should keep move pointer forward 1 after found \"d\" is repeated."
                    },
                    {
                        "username": "Azid-ops",
                        "content": "I have a doubt, my question is to find longest substring without repeating characters and my string is: \\'pwwkew\\', the answer should be \\'pwke\\' because we have to eliminate duplicate characters but they showing that \\'wke\\' is the right answer ,i don\\'t understand where did \\'p\\' go, answer should be \\'pwke\\' after eliminating w "
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Mahad Ali](/Azid-ops)Substring is continuous string in string, it is not a subsequence, then pwke is not correct.\\n"
                    }
                ]
            },
            {
                "id": 1733843,
                "content": [
                    {
                        "username": "jyzeeg",
                        "content": "Stuck at 985/987..input is just a space s= \" \\u201C\\uFF0C  and my output is 0 and expected a 1... not sure how to fix this. anyone please help.. please"
                    },
                    {
                        "username": "nikhilsom2008",
                        "content": "if len(s)==1:\\n    return 1\\n\\nThis will fix it"
                    },
                    {
                        "username": "nyck33",
                        "content": "Where can I get a bunch of test cases?"
                    },
                    {
                        "username": "mukeshk92578",
                        "content": "class Solution {\\n\\n    \\n    public int lengthOfLongestSubstring(String str) {\\n       HashMap<Character,Integer> hm = new HashMap<>();\\n       int maxLength = 0, left = 0;\\n        if(str.isEmpty()){\\n            return 0;\\n        }\\n        else if(str.length() == 1){\\n            return 1;\\n        }\\n        for(int right = 0; right < str.length();right++){\\n            char ch = str.charAt(right);\\n            hm.put(ch,hm.getOrDefault(ch,0)+1);\\n\\n            while(hm.get(ch)> 1){\\n                char chl = str.charAt(left);\\n                hm.put(chl,hm.get(chl) -1);\\n                left++;\\n            }\\n            maxLength = Math.max(maxLength, right-left +1);\\n        }\\n        return maxLength;\\n    }\\n}"
                    },
                    {
                        "username": "akhilpan",
                        "content": "I\\'m getting ==30==ERROR: AddressSanitizer: heap-buffer-overflow error. What could be wrong with my solution?\\n"
                    },
                    {
                        "username": "mktek009",
                        "content": "Hi,\\nWhy is the expected output of  \"anviaj\" 5 and not 4 like my output?\\nAs far as I understand \"a ->n ->v -> i -> ///a (back to a ) means the longest substring length is 4?\\n\\nWhat am I missing.."
                    },
                    {
                        "username": "Jia_Bao",
                        "content": "anvi is a substring without repeating character.\\nBut how about nviaj is also without repeating character but it\\'s longer\\n"
                    },
                    {
                        "username": "user0322FJ",
                        "content": "case 986 is really crazy) 56seconds to find result"
                    },
                    {
                        "username": "luckyltk9",
                        "content": "anyone know how to deal with the time limit exceeded error?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@luckyltk9](/luckyltk9)\nFor TLE, dont return to check s[i] again, using two pointers, first pointer move to the last repeated character s[i_1+1], for example one pointer at string-th s[j+1] and another move forward till s[k], with k>j+1, if s[k] in s[j+1:k+1] stop and check if length > k-i-1? if no update length, then continue. "
                    },
                    {
                        "username": "vs153698",
                        "content": "Given \"anviaj\" longest substring without repeating characters  should be of length 4 i.e anvi but it is expecting 5  IDK why, do anyone has any explanation for this please let me know."
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@vs153698](/vs153698) The longest substring without repeating characters is \"nviaj\" not \"\"anvi\". Your algorithm should keep move pointer forward 1 after found \"a\" is repeated. "
                    },
                    {
                        "username": "Rahulx01",
                        "content": "on given input dvdf my output is 2, but expected output is 3, i littreally don\\'t understand it\\n"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Rahul Goyal](/Rahulx01)\\nThe longest substring without repeating characters is \"vdf\" not \"\"dv\". Your algorithm should keep move pointer forward 1 after found \"d\" is repeated."
                    },
                    {
                        "username": "Azid-ops",
                        "content": "I have a doubt, my question is to find longest substring without repeating characters and my string is: \\'pwwkew\\', the answer should be \\'pwke\\' because we have to eliminate duplicate characters but they showing that \\'wke\\' is the right answer ,i don\\'t understand where did \\'p\\' go, answer should be \\'pwke\\' after eliminating w "
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Mahad Ali](/Azid-ops)Substring is continuous string in string, it is not a subsequence, then pwke is not correct.\\n"
                    }
                ]
            },
            {
                "id": 1730896,
                "content": [
                    {
                        "username": "jyzeeg",
                        "content": "Stuck at 985/987..input is just a space s= \" \\u201C\\uFF0C  and my output is 0 and expected a 1... not sure how to fix this. anyone please help.. please"
                    },
                    {
                        "username": "nikhilsom2008",
                        "content": "if len(s)==1:\\n    return 1\\n\\nThis will fix it"
                    },
                    {
                        "username": "nyck33",
                        "content": "Where can I get a bunch of test cases?"
                    },
                    {
                        "username": "mukeshk92578",
                        "content": "class Solution {\\n\\n    \\n    public int lengthOfLongestSubstring(String str) {\\n       HashMap<Character,Integer> hm = new HashMap<>();\\n       int maxLength = 0, left = 0;\\n        if(str.isEmpty()){\\n            return 0;\\n        }\\n        else if(str.length() == 1){\\n            return 1;\\n        }\\n        for(int right = 0; right < str.length();right++){\\n            char ch = str.charAt(right);\\n            hm.put(ch,hm.getOrDefault(ch,0)+1);\\n\\n            while(hm.get(ch)> 1){\\n                char chl = str.charAt(left);\\n                hm.put(chl,hm.get(chl) -1);\\n                left++;\\n            }\\n            maxLength = Math.max(maxLength, right-left +1);\\n        }\\n        return maxLength;\\n    }\\n}"
                    },
                    {
                        "username": "akhilpan",
                        "content": "I\\'m getting ==30==ERROR: AddressSanitizer: heap-buffer-overflow error. What could be wrong with my solution?\\n"
                    },
                    {
                        "username": "mktek009",
                        "content": "Hi,\\nWhy is the expected output of  \"anviaj\" 5 and not 4 like my output?\\nAs far as I understand \"a ->n ->v -> i -> ///a (back to a ) means the longest substring length is 4?\\n\\nWhat am I missing.."
                    },
                    {
                        "username": "Jia_Bao",
                        "content": "anvi is a substring without repeating character.\\nBut how about nviaj is also without repeating character but it\\'s longer\\n"
                    },
                    {
                        "username": "user0322FJ",
                        "content": "case 986 is really crazy) 56seconds to find result"
                    },
                    {
                        "username": "luckyltk9",
                        "content": "anyone know how to deal with the time limit exceeded error?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@luckyltk9](/luckyltk9)\nFor TLE, dont return to check s[i] again, using two pointers, first pointer move to the last repeated character s[i_1+1], for example one pointer at string-th s[j+1] and another move forward till s[k], with k>j+1, if s[k] in s[j+1:k+1] stop and check if length > k-i-1? if no update length, then continue. "
                    },
                    {
                        "username": "vs153698",
                        "content": "Given \"anviaj\" longest substring without repeating characters  should be of length 4 i.e anvi but it is expecting 5  IDK why, do anyone has any explanation for this please let me know."
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@vs153698](/vs153698) The longest substring without repeating characters is \"nviaj\" not \"\"anvi\". Your algorithm should keep move pointer forward 1 after found \"a\" is repeated. "
                    },
                    {
                        "username": "Rahulx01",
                        "content": "on given input dvdf my output is 2, but expected output is 3, i littreally don\\'t understand it\\n"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Rahul Goyal](/Rahulx01)\\nThe longest substring without repeating characters is \"vdf\" not \"\"dv\". Your algorithm should keep move pointer forward 1 after found \"d\" is repeated."
                    },
                    {
                        "username": "Azid-ops",
                        "content": "I have a doubt, my question is to find longest substring without repeating characters and my string is: \\'pwwkew\\', the answer should be \\'pwke\\' because we have to eliminate duplicate characters but they showing that \\'wke\\' is the right answer ,i don\\'t understand where did \\'p\\' go, answer should be \\'pwke\\' after eliminating w "
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Mahad Ali](/Azid-ops)Substring is continuous string in string, it is not a subsequence, then pwke is not correct.\\n"
                    }
                ]
            },
            {
                "id": 1722965,
                "content": [
                    {
                        "username": "jyzeeg",
                        "content": "Stuck at 985/987..input is just a space s= \" \\u201C\\uFF0C  and my output is 0 and expected a 1... not sure how to fix this. anyone please help.. please"
                    },
                    {
                        "username": "nikhilsom2008",
                        "content": "if len(s)==1:\\n    return 1\\n\\nThis will fix it"
                    },
                    {
                        "username": "nyck33",
                        "content": "Where can I get a bunch of test cases?"
                    },
                    {
                        "username": "mukeshk92578",
                        "content": "class Solution {\\n\\n    \\n    public int lengthOfLongestSubstring(String str) {\\n       HashMap<Character,Integer> hm = new HashMap<>();\\n       int maxLength = 0, left = 0;\\n        if(str.isEmpty()){\\n            return 0;\\n        }\\n        else if(str.length() == 1){\\n            return 1;\\n        }\\n        for(int right = 0; right < str.length();right++){\\n            char ch = str.charAt(right);\\n            hm.put(ch,hm.getOrDefault(ch,0)+1);\\n\\n            while(hm.get(ch)> 1){\\n                char chl = str.charAt(left);\\n                hm.put(chl,hm.get(chl) -1);\\n                left++;\\n            }\\n            maxLength = Math.max(maxLength, right-left +1);\\n        }\\n        return maxLength;\\n    }\\n}"
                    },
                    {
                        "username": "akhilpan",
                        "content": "I\\'m getting ==30==ERROR: AddressSanitizer: heap-buffer-overflow error. What could be wrong with my solution?\\n"
                    },
                    {
                        "username": "mktek009",
                        "content": "Hi,\\nWhy is the expected output of  \"anviaj\" 5 and not 4 like my output?\\nAs far as I understand \"a ->n ->v -> i -> ///a (back to a ) means the longest substring length is 4?\\n\\nWhat am I missing.."
                    },
                    {
                        "username": "Jia_Bao",
                        "content": "anvi is a substring without repeating character.\\nBut how about nviaj is also without repeating character but it\\'s longer\\n"
                    },
                    {
                        "username": "user0322FJ",
                        "content": "case 986 is really crazy) 56seconds to find result"
                    },
                    {
                        "username": "luckyltk9",
                        "content": "anyone know how to deal with the time limit exceeded error?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@luckyltk9](/luckyltk9)\nFor TLE, dont return to check s[i] again, using two pointers, first pointer move to the last repeated character s[i_1+1], for example one pointer at string-th s[j+1] and another move forward till s[k], with k>j+1, if s[k] in s[j+1:k+1] stop and check if length > k-i-1? if no update length, then continue. "
                    },
                    {
                        "username": "vs153698",
                        "content": "Given \"anviaj\" longest substring without repeating characters  should be of length 4 i.e anvi but it is expecting 5  IDK why, do anyone has any explanation for this please let me know."
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@vs153698](/vs153698) The longest substring without repeating characters is \"nviaj\" not \"\"anvi\". Your algorithm should keep move pointer forward 1 after found \"a\" is repeated. "
                    },
                    {
                        "username": "Rahulx01",
                        "content": "on given input dvdf my output is 2, but expected output is 3, i littreally don\\'t understand it\\n"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Rahul Goyal](/Rahulx01)\\nThe longest substring without repeating characters is \"vdf\" not \"\"dv\". Your algorithm should keep move pointer forward 1 after found \"d\" is repeated."
                    },
                    {
                        "username": "Azid-ops",
                        "content": "I have a doubt, my question is to find longest substring without repeating characters and my string is: \\'pwwkew\\', the answer should be \\'pwke\\' because we have to eliminate duplicate characters but they showing that \\'wke\\' is the right answer ,i don\\'t understand where did \\'p\\' go, answer should be \\'pwke\\' after eliminating w "
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Mahad Ali](/Azid-ops)Substring is continuous string in string, it is not a subsequence, then pwke is not correct.\\n"
                    }
                ]
            },
            {
                "id": 1722303,
                "content": [
                    {
                        "username": "jyzeeg",
                        "content": "Stuck at 985/987..input is just a space s= \" \\u201C\\uFF0C  and my output is 0 and expected a 1... not sure how to fix this. anyone please help.. please"
                    },
                    {
                        "username": "nikhilsom2008",
                        "content": "if len(s)==1:\\n    return 1\\n\\nThis will fix it"
                    },
                    {
                        "username": "nyck33",
                        "content": "Where can I get a bunch of test cases?"
                    },
                    {
                        "username": "mukeshk92578",
                        "content": "class Solution {\\n\\n    \\n    public int lengthOfLongestSubstring(String str) {\\n       HashMap<Character,Integer> hm = new HashMap<>();\\n       int maxLength = 0, left = 0;\\n        if(str.isEmpty()){\\n            return 0;\\n        }\\n        else if(str.length() == 1){\\n            return 1;\\n        }\\n        for(int right = 0; right < str.length();right++){\\n            char ch = str.charAt(right);\\n            hm.put(ch,hm.getOrDefault(ch,0)+1);\\n\\n            while(hm.get(ch)> 1){\\n                char chl = str.charAt(left);\\n                hm.put(chl,hm.get(chl) -1);\\n                left++;\\n            }\\n            maxLength = Math.max(maxLength, right-left +1);\\n        }\\n        return maxLength;\\n    }\\n}"
                    },
                    {
                        "username": "akhilpan",
                        "content": "I\\'m getting ==30==ERROR: AddressSanitizer: heap-buffer-overflow error. What could be wrong with my solution?\\n"
                    },
                    {
                        "username": "mktek009",
                        "content": "Hi,\\nWhy is the expected output of  \"anviaj\" 5 and not 4 like my output?\\nAs far as I understand \"a ->n ->v -> i -> ///a (back to a ) means the longest substring length is 4?\\n\\nWhat am I missing.."
                    },
                    {
                        "username": "Jia_Bao",
                        "content": "anvi is a substring without repeating character.\\nBut how about nviaj is also without repeating character but it\\'s longer\\n"
                    },
                    {
                        "username": "user0322FJ",
                        "content": "case 986 is really crazy) 56seconds to find result"
                    },
                    {
                        "username": "luckyltk9",
                        "content": "anyone know how to deal with the time limit exceeded error?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@luckyltk9](/luckyltk9)\nFor TLE, dont return to check s[i] again, using two pointers, first pointer move to the last repeated character s[i_1+1], for example one pointer at string-th s[j+1] and another move forward till s[k], with k>j+1, if s[k] in s[j+1:k+1] stop and check if length > k-i-1? if no update length, then continue. "
                    },
                    {
                        "username": "vs153698",
                        "content": "Given \"anviaj\" longest substring without repeating characters  should be of length 4 i.e anvi but it is expecting 5  IDK why, do anyone has any explanation for this please let me know."
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@vs153698](/vs153698) The longest substring without repeating characters is \"nviaj\" not \"\"anvi\". Your algorithm should keep move pointer forward 1 after found \"a\" is repeated. "
                    },
                    {
                        "username": "Rahulx01",
                        "content": "on given input dvdf my output is 2, but expected output is 3, i littreally don\\'t understand it\\n"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Rahul Goyal](/Rahulx01)\\nThe longest substring without repeating characters is \"vdf\" not \"\"dv\". Your algorithm should keep move pointer forward 1 after found \"d\" is repeated."
                    },
                    {
                        "username": "Azid-ops",
                        "content": "I have a doubt, my question is to find longest substring without repeating characters and my string is: \\'pwwkew\\', the answer should be \\'pwke\\' because we have to eliminate duplicate characters but they showing that \\'wke\\' is the right answer ,i don\\'t understand where did \\'p\\' go, answer should be \\'pwke\\' after eliminating w "
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Mahad Ali](/Azid-ops)Substring is continuous string in string, it is not a subsequence, then pwke is not correct.\\n"
                    }
                ]
            },
            {
                "id": 1722080,
                "content": [
                    {
                        "username": "jyzeeg",
                        "content": "Stuck at 985/987..input is just a space s= \" \\u201C\\uFF0C  and my output is 0 and expected a 1... not sure how to fix this. anyone please help.. please"
                    },
                    {
                        "username": "nikhilsom2008",
                        "content": "if len(s)==1:\\n    return 1\\n\\nThis will fix it"
                    },
                    {
                        "username": "nyck33",
                        "content": "Where can I get a bunch of test cases?"
                    },
                    {
                        "username": "mukeshk92578",
                        "content": "class Solution {\\n\\n    \\n    public int lengthOfLongestSubstring(String str) {\\n       HashMap<Character,Integer> hm = new HashMap<>();\\n       int maxLength = 0, left = 0;\\n        if(str.isEmpty()){\\n            return 0;\\n        }\\n        else if(str.length() == 1){\\n            return 1;\\n        }\\n        for(int right = 0; right < str.length();right++){\\n            char ch = str.charAt(right);\\n            hm.put(ch,hm.getOrDefault(ch,0)+1);\\n\\n            while(hm.get(ch)> 1){\\n                char chl = str.charAt(left);\\n                hm.put(chl,hm.get(chl) -1);\\n                left++;\\n            }\\n            maxLength = Math.max(maxLength, right-left +1);\\n        }\\n        return maxLength;\\n    }\\n}"
                    },
                    {
                        "username": "akhilpan",
                        "content": "I\\'m getting ==30==ERROR: AddressSanitizer: heap-buffer-overflow error. What could be wrong with my solution?\\n"
                    },
                    {
                        "username": "mktek009",
                        "content": "Hi,\\nWhy is the expected output of  \"anviaj\" 5 and not 4 like my output?\\nAs far as I understand \"a ->n ->v -> i -> ///a (back to a ) means the longest substring length is 4?\\n\\nWhat am I missing.."
                    },
                    {
                        "username": "Jia_Bao",
                        "content": "anvi is a substring without repeating character.\\nBut how about nviaj is also without repeating character but it\\'s longer\\n"
                    },
                    {
                        "username": "user0322FJ",
                        "content": "case 986 is really crazy) 56seconds to find result"
                    },
                    {
                        "username": "luckyltk9",
                        "content": "anyone know how to deal with the time limit exceeded error?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@luckyltk9](/luckyltk9)\nFor TLE, dont return to check s[i] again, using two pointers, first pointer move to the last repeated character s[i_1+1], for example one pointer at string-th s[j+1] and another move forward till s[k], with k>j+1, if s[k] in s[j+1:k+1] stop and check if length > k-i-1? if no update length, then continue. "
                    },
                    {
                        "username": "vs153698",
                        "content": "Given \"anviaj\" longest substring without repeating characters  should be of length 4 i.e anvi but it is expecting 5  IDK why, do anyone has any explanation for this please let me know."
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@vs153698](/vs153698) The longest substring without repeating characters is \"nviaj\" not \"\"anvi\". Your algorithm should keep move pointer forward 1 after found \"a\" is repeated. "
                    },
                    {
                        "username": "Rahulx01",
                        "content": "on given input dvdf my output is 2, but expected output is 3, i littreally don\\'t understand it\\n"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Rahul Goyal](/Rahulx01)\\nThe longest substring without repeating characters is \"vdf\" not \"\"dv\". Your algorithm should keep move pointer forward 1 after found \"d\" is repeated."
                    },
                    {
                        "username": "Azid-ops",
                        "content": "I have a doubt, my question is to find longest substring without repeating characters and my string is: \\'pwwkew\\', the answer should be \\'pwke\\' because we have to eliminate duplicate characters but they showing that \\'wke\\' is the right answer ,i don\\'t understand where did \\'p\\' go, answer should be \\'pwke\\' after eliminating w "
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Mahad Ali](/Azid-ops)Substring is continuous string in string, it is not a subsequence, then pwke is not correct.\\n"
                    }
                ]
            },
            {
                "id": 1721847,
                "content": [
                    {
                        "username": "jyzeeg",
                        "content": "Stuck at 985/987..input is just a space s= \" \\u201C\\uFF0C  and my output is 0 and expected a 1... not sure how to fix this. anyone please help.. please"
                    },
                    {
                        "username": "nikhilsom2008",
                        "content": "if len(s)==1:\\n    return 1\\n\\nThis will fix it"
                    },
                    {
                        "username": "nyck33",
                        "content": "Where can I get a bunch of test cases?"
                    },
                    {
                        "username": "mukeshk92578",
                        "content": "class Solution {\\n\\n    \\n    public int lengthOfLongestSubstring(String str) {\\n       HashMap<Character,Integer> hm = new HashMap<>();\\n       int maxLength = 0, left = 0;\\n        if(str.isEmpty()){\\n            return 0;\\n        }\\n        else if(str.length() == 1){\\n            return 1;\\n        }\\n        for(int right = 0; right < str.length();right++){\\n            char ch = str.charAt(right);\\n            hm.put(ch,hm.getOrDefault(ch,0)+1);\\n\\n            while(hm.get(ch)> 1){\\n                char chl = str.charAt(left);\\n                hm.put(chl,hm.get(chl) -1);\\n                left++;\\n            }\\n            maxLength = Math.max(maxLength, right-left +1);\\n        }\\n        return maxLength;\\n    }\\n}"
                    },
                    {
                        "username": "akhilpan",
                        "content": "I\\'m getting ==30==ERROR: AddressSanitizer: heap-buffer-overflow error. What could be wrong with my solution?\\n"
                    },
                    {
                        "username": "mktek009",
                        "content": "Hi,\\nWhy is the expected output of  \"anviaj\" 5 and not 4 like my output?\\nAs far as I understand \"a ->n ->v -> i -> ///a (back to a ) means the longest substring length is 4?\\n\\nWhat am I missing.."
                    },
                    {
                        "username": "Jia_Bao",
                        "content": "anvi is a substring without repeating character.\\nBut how about nviaj is also without repeating character but it\\'s longer\\n"
                    },
                    {
                        "username": "user0322FJ",
                        "content": "case 986 is really crazy) 56seconds to find result"
                    },
                    {
                        "username": "luckyltk9",
                        "content": "anyone know how to deal with the time limit exceeded error?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@luckyltk9](/luckyltk9)\nFor TLE, dont return to check s[i] again, using two pointers, first pointer move to the last repeated character s[i_1+1], for example one pointer at string-th s[j+1] and another move forward till s[k], with k>j+1, if s[k] in s[j+1:k+1] stop and check if length > k-i-1? if no update length, then continue. "
                    },
                    {
                        "username": "vs153698",
                        "content": "Given \"anviaj\" longest substring without repeating characters  should be of length 4 i.e anvi but it is expecting 5  IDK why, do anyone has any explanation for this please let me know."
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@vs153698](/vs153698) The longest substring without repeating characters is \"nviaj\" not \"\"anvi\". Your algorithm should keep move pointer forward 1 after found \"a\" is repeated. "
                    },
                    {
                        "username": "Rahulx01",
                        "content": "on given input dvdf my output is 2, but expected output is 3, i littreally don\\'t understand it\\n"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Rahul Goyal](/Rahulx01)\\nThe longest substring without repeating characters is \"vdf\" not \"\"dv\". Your algorithm should keep move pointer forward 1 after found \"d\" is repeated."
                    },
                    {
                        "username": "Azid-ops",
                        "content": "I have a doubt, my question is to find longest substring without repeating characters and my string is: \\'pwwkew\\', the answer should be \\'pwke\\' because we have to eliminate duplicate characters but they showing that \\'wke\\' is the right answer ,i don\\'t understand where did \\'p\\' go, answer should be \\'pwke\\' after eliminating w "
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Mahad Ali](/Azid-ops)Substring is continuous string in string, it is not a subsequence, then pwke is not correct.\\n"
                    }
                ]
            },
            {
                "id": 1720663,
                "content": [
                    {
                        "username": "jyzeeg",
                        "content": "Stuck at 985/987..input is just a space s= \" \\u201C\\uFF0C  and my output is 0 and expected a 1... not sure how to fix this. anyone please help.. please"
                    },
                    {
                        "username": "nikhilsom2008",
                        "content": "if len(s)==1:\\n    return 1\\n\\nThis will fix it"
                    },
                    {
                        "username": "nyck33",
                        "content": "Where can I get a bunch of test cases?"
                    },
                    {
                        "username": "mukeshk92578",
                        "content": "class Solution {\\n\\n    \\n    public int lengthOfLongestSubstring(String str) {\\n       HashMap<Character,Integer> hm = new HashMap<>();\\n       int maxLength = 0, left = 0;\\n        if(str.isEmpty()){\\n            return 0;\\n        }\\n        else if(str.length() == 1){\\n            return 1;\\n        }\\n        for(int right = 0; right < str.length();right++){\\n            char ch = str.charAt(right);\\n            hm.put(ch,hm.getOrDefault(ch,0)+1);\\n\\n            while(hm.get(ch)> 1){\\n                char chl = str.charAt(left);\\n                hm.put(chl,hm.get(chl) -1);\\n                left++;\\n            }\\n            maxLength = Math.max(maxLength, right-left +1);\\n        }\\n        return maxLength;\\n    }\\n}"
                    },
                    {
                        "username": "akhilpan",
                        "content": "I\\'m getting ==30==ERROR: AddressSanitizer: heap-buffer-overflow error. What could be wrong with my solution?\\n"
                    },
                    {
                        "username": "mktek009",
                        "content": "Hi,\\nWhy is the expected output of  \"anviaj\" 5 and not 4 like my output?\\nAs far as I understand \"a ->n ->v -> i -> ///a (back to a ) means the longest substring length is 4?\\n\\nWhat am I missing.."
                    },
                    {
                        "username": "Jia_Bao",
                        "content": "anvi is a substring without repeating character.\\nBut how about nviaj is also without repeating character but it\\'s longer\\n"
                    },
                    {
                        "username": "user0322FJ",
                        "content": "case 986 is really crazy) 56seconds to find result"
                    },
                    {
                        "username": "luckyltk9",
                        "content": "anyone know how to deal with the time limit exceeded error?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@luckyltk9](/luckyltk9)\nFor TLE, dont return to check s[i] again, using two pointers, first pointer move to the last repeated character s[i_1+1], for example one pointer at string-th s[j+1] and another move forward till s[k], with k>j+1, if s[k] in s[j+1:k+1] stop and check if length > k-i-1? if no update length, then continue. "
                    },
                    {
                        "username": "vs153698",
                        "content": "Given \"anviaj\" longest substring without repeating characters  should be of length 4 i.e anvi but it is expecting 5  IDK why, do anyone has any explanation for this please let me know."
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@vs153698](/vs153698) The longest substring without repeating characters is \"nviaj\" not \"\"anvi\". Your algorithm should keep move pointer forward 1 after found \"a\" is repeated. "
                    },
                    {
                        "username": "Rahulx01",
                        "content": "on given input dvdf my output is 2, but expected output is 3, i littreally don\\'t understand it\\n"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Rahul Goyal](/Rahulx01)\\nThe longest substring without repeating characters is \"vdf\" not \"\"dv\". Your algorithm should keep move pointer forward 1 after found \"d\" is repeated."
                    },
                    {
                        "username": "Azid-ops",
                        "content": "I have a doubt, my question is to find longest substring without repeating characters and my string is: \\'pwwkew\\', the answer should be \\'pwke\\' because we have to eliminate duplicate characters but they showing that \\'wke\\' is the right answer ,i don\\'t understand where did \\'p\\' go, answer should be \\'pwke\\' after eliminating w "
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@Mahad Ali](/Azid-ops)Substring is continuous string in string, it is not a subsequence, then pwke is not correct.\\n"
                    }
                ]
            },
            {
                "id": 1720173,
                "content": [
                    {
                        "username": "1_not_8",
                        "content": "This is my solution\\n```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        list_ = list()\\n\\n        for i in range(len(s)):\\n            count = 0\\n            for j in range(i+1, len(s)):\\n                count += 1\\n                if s[i] == s[j]:\\n                    list_.append(count)\\n                    break\\n\\n        return max(list_)\\n```\\nit is passing all the test cases, but when I try to submit I am getting an error like this, please help.\\n```\\nValueError: max() arg is an empty sequence\\n    return max(list_)\\nLine 13 in lengthOfLongestSubstring (Solution.py)\\n    ret = Solution().lengthOfLongestSubstring(param_1)\\nLine 33 in _driver (Solution.py)\\n    _driver()\\nLine 44 in <module> (Solution.py)\\n```"
                    },
                    {
                        "username": "jyzeeg",
                        "content": "it means there is case when list_ is complete empty, and nothing to return for max"
                    },
                    {
                        "username": "user1517f",
                        "content": "Unable to understand this \\nInput: s = \"pwwkew\"\\nOutput: 3\\nExplanation: The answer is \"wke\", with the length of 3.\\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring."
                    },
                    {
                        "username": "aknownymous",
                        "content": "I have solved the complete question in vs code, test case was \"abcabcbb\", in vs code I got the expected output (i.e. 3) , I don\\'t understand then why am I getting different output (i.e. 1) when I paste the code here and click on \"run\". "
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@aknownymous](/aknownymous) Change the testcase, and perform a dry run, then change another testcase, to see what\\'s happen?"
                    },
                    {
                        "username": "Mayank_Sardana",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) \\n    {\\n        if(s.length()==0)\\n        {\\n            return 0;\\n        }\\n        HashMap<Character , Integer> map = new HashMap<>();\\n        map.put(s.charAt(0) , 1);\\n        int k = 0; \\n        int maxl = 1;\\n         for(int i = 1;i<s.length();i++)\\n         {\\n              char ch = s.charAt(i);\\n              if(map.containsKey(ch)==false)\\n              {\\n                  map.put(ch , 1);\\n                  if(maxl<map.size())\\n                  {\\n                      maxl = map.size();\\n                  }\\n              }\\n              else\\n              {\\n                  if(maxl<map.size())\\n                  {\\n                      maxl = map.size();\\n                  }\\n                  while(true)\\n                {\\n                  if(s.charAt(k)!=ch)\\n                  {\\n                       map.remove(s.charAt(k));\\n                       k++;\\n                  }\\n                  else\\n                  {\\n                      k++;\\n                      break;\\n                  }\\n                }\\n              }\\n         }\\n         return maxl;\\n    }\\n}"
                    },
                    {
                        "username": "meetfarhanali",
                        "content": "Whats the problem in this code. Showing run time error\\n\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        count=int(0)\\n        fcount=int(0)\\n        for i in range(0,len(s)):\\n            for j in range(i+1,len(s)):\\n                if s[i]==s[j]:\\n                    count=j-i\\n                    break\\n            if count>fcount:\\n                fcount=count\\n        print(int(fcount))"
                    },
                    {
                        "username": "bhogalamansingh22",
                        "content": "Hey, One way to solve this problem is by using a hash map and sliding window technique, it will help you keep track of the character that has already appeared and at what index it has appeared so that you can move searching with the next window. \n\nHere's my solution it takes 14 ms time to execute in C++, for better understanding I suggest you copy it take it to your local IDE and run it with uncommenting the comments for a proper understanding of how its working, I guess that would help you understand the approach.\n\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string input) {\n        unordered_map<char,int> hash;\n        int i=0, count=0,maxlen=-100,start=0;\n        hash[input[0]] = 0;\n        if(input.size() == 0)\n            return 0;\n        for(i=1;i<input.size();i++)\n        {\n            // cout<<\"i is: \"<<i<<\" count is: \"<<count<<\" window String is: \";\n            // for(int j=start; j<=i;j++)\n            //     cout<<input[j];\n            // cout<<endl;\n            if(hash.find(input[i]) == hash.end())\n                hash[input[i]] = i;\n            else\n            {\n                count = i-start;\n                // cout<<\"\\tCount after Update: \"<<count<<endl;\n                if(count > maxlen)\n                    maxlen = count;\n                if(hash[input[i]] >= start)\n                    start = hash[input[i]]+1;\n                hash[input[i]] = i;\n            }\n        }\n        count = i - start;\n        if(count > maxlen)\n            maxlen = count;\n        return maxlen;\n    }\n};"
                    },
                    {
                        "username": "tsamawi",
                        "content": "Can I get some help on the Second Solution's runtime? I implemented a sliding window (I think) but didn't score that much higher on run time than the original brute force. Unless you guys are really kicking ass in runtimes and you're all 80% better than the LC solution...\n\n `\n\n\nfrom collections import defaultdict\n\n\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        if len(s) == 0:\n            return 0\n        seenChars = defaultdict(bool)\n\n        overallMax = 1\n        currMax = 0\n        i = j = 0\n        seenChars[s[j]] = True      \n        \n        while j < len(s) - 1:\n            j += 1\n            if not seenChars[s[j]]:\n                print(f\"Not seen: {i},{j}\")                \n                currMax = (j - i) + 1\n                if overallMax < currMax:\n                    overallMax = currMax\n                seenChars[s[j]] = True\n            else:\n                print(f\"Seen: {i},{j}\")\n                while i <= j:\n                    if s[i] == s[j]:\n                        i += 1                           \n                        break\n                    seenChars[s[i]] = False                \n                    i += 1     \n\n\n        return overallMax\n                    `"
                    },
                    {
                        "username": "Aggie123",
                        "content": "\n方法1:普通双指针 - 左右指针 初始位置 0 1\n 用set记录出现的字母，当右指针出现set里的字母，则左指针+1，右指针回到左指针+2\n\n方法2: 改进双指针 - 左右指针 初始位置 0 1\n关键改进点：用map记录出现的字母的最新的位置，再次出现的字母，如果该字母之前出现的位置大于左指针，则移动左指针到改字母之前位置的后边。\n\n方法1: 普通双层循环\n`var lengthOfLongestSubstring = function(s) {\n    let len=s.length;\n    if(len<=1) return len;\n\n    let maxLen=0;\n    for(let i=0;i<len;i++){\n        let temp=1;\n        let set=new Set();\n        set.add(s.charAt(i));\n        for(let j=i+1;j<len;j++){\n            if(!set.has(s.charAt(j))){\n                temp++;\n                set.add(s.charAt(j));\n            }else{\n                break;\n            }\n        }\n        maxLen=temp>maxLen?temp:maxLen;\n    }\n    return maxLen;\n};`\n\n方法2: 双指针 - 左右指针\n`var lengthOfLongestSubstring = function(s) {\n    let len=s.length;\n    if(len<=1) return len;\n\n    let maxLen=0, temp=0;\n    let map=new Map();\n    let l=0,r=0;\n    while(l<len&&r<len&&l<=r){\n        let item=s.charAt(r);\n        if(!map.has(item)){\n            temp++;\n        }else{\n            if(map.get(item)>=l){\n                l=map.get(item)+1;\n                maxLen=temp>maxLen?temp:maxLen;\n                temp=r-l+1;\n            }else{\n                temp++;\n            }\n        }\n        map.set(s.charAt(r),r);\n        r++;\n    }\n    maxLen=temp>maxLen?temp:maxLen;\n\n    return maxLen;\n};`"
                    },
                    {
                        "username": "NikhilMalhotraa",
                        "content": "Recursive ( Max testcases passed ), Stack overflow err though.\\n\\n `class Solution {\\n    int i = 0;\\n    public int lengthOfLongestSubstring(String s) {  \\n        String temp = \"\";      \\n        int ans = longestSubstring(s,s.length(),temp,0);\\n        return ans;\\n    }\\n\\n    public int longestSubstring(String str, int n,String temp,int count){\\n        if(n==0){            \\n            return count;\\n        }\\n        \\n        if(temp.contains(\"\"+str.charAt(n-1))==false){            \\n            count++;\\n           return longestSubstring(str,n-1,temp+str.charAt(n-1),count);\\n        }\\n        else{\\n            i++;\\n            return Math.max(count,longestSubstring(str,str.length()-i,\"\",0));\\n        }\\n        \\n    }\\n    \\n}`"
                    },
                    {
                        "username": "DamanKrMishra",
                        "content": "Use two pointer right and left.\\nUse a HashMap to store the frequency of every Character in the string if at any point the frequency of character exceeds 1, the  remove the character and increase the left pointer"
                    }
                ]
            },
            {
                "id": 1716873,
                "content": [
                    {
                        "username": "1_not_8",
                        "content": "This is my solution\\n```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        list_ = list()\\n\\n        for i in range(len(s)):\\n            count = 0\\n            for j in range(i+1, len(s)):\\n                count += 1\\n                if s[i] == s[j]:\\n                    list_.append(count)\\n                    break\\n\\n        return max(list_)\\n```\\nit is passing all the test cases, but when I try to submit I am getting an error like this, please help.\\n```\\nValueError: max() arg is an empty sequence\\n    return max(list_)\\nLine 13 in lengthOfLongestSubstring (Solution.py)\\n    ret = Solution().lengthOfLongestSubstring(param_1)\\nLine 33 in _driver (Solution.py)\\n    _driver()\\nLine 44 in <module> (Solution.py)\\n```"
                    },
                    {
                        "username": "jyzeeg",
                        "content": "it means there is case when list_ is complete empty, and nothing to return for max"
                    },
                    {
                        "username": "user1517f",
                        "content": "Unable to understand this \\nInput: s = \"pwwkew\"\\nOutput: 3\\nExplanation: The answer is \"wke\", with the length of 3.\\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring."
                    },
                    {
                        "username": "aknownymous",
                        "content": "I have solved the complete question in vs code, test case was \"abcabcbb\", in vs code I got the expected output (i.e. 3) , I don\\'t understand then why am I getting different output (i.e. 1) when I paste the code here and click on \"run\". "
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@aknownymous](/aknownymous) Change the testcase, and perform a dry run, then change another testcase, to see what\\'s happen?"
                    },
                    {
                        "username": "Mayank_Sardana",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) \\n    {\\n        if(s.length()==0)\\n        {\\n            return 0;\\n        }\\n        HashMap<Character , Integer> map = new HashMap<>();\\n        map.put(s.charAt(0) , 1);\\n        int k = 0; \\n        int maxl = 1;\\n         for(int i = 1;i<s.length();i++)\\n         {\\n              char ch = s.charAt(i);\\n              if(map.containsKey(ch)==false)\\n              {\\n                  map.put(ch , 1);\\n                  if(maxl<map.size())\\n                  {\\n                      maxl = map.size();\\n                  }\\n              }\\n              else\\n              {\\n                  if(maxl<map.size())\\n                  {\\n                      maxl = map.size();\\n                  }\\n                  while(true)\\n                {\\n                  if(s.charAt(k)!=ch)\\n                  {\\n                       map.remove(s.charAt(k));\\n                       k++;\\n                  }\\n                  else\\n                  {\\n                      k++;\\n                      break;\\n                  }\\n                }\\n              }\\n         }\\n         return maxl;\\n    }\\n}"
                    },
                    {
                        "username": "meetfarhanali",
                        "content": "Whats the problem in this code. Showing run time error\\n\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        count=int(0)\\n        fcount=int(0)\\n        for i in range(0,len(s)):\\n            for j in range(i+1,len(s)):\\n                if s[i]==s[j]:\\n                    count=j-i\\n                    break\\n            if count>fcount:\\n                fcount=count\\n        print(int(fcount))"
                    },
                    {
                        "username": "bhogalamansingh22",
                        "content": "Hey, One way to solve this problem is by using a hash map and sliding window technique, it will help you keep track of the character that has already appeared and at what index it has appeared so that you can move searching with the next window. \n\nHere's my solution it takes 14 ms time to execute in C++, for better understanding I suggest you copy it take it to your local IDE and run it with uncommenting the comments for a proper understanding of how its working, I guess that would help you understand the approach.\n\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string input) {\n        unordered_map<char,int> hash;\n        int i=0, count=0,maxlen=-100,start=0;\n        hash[input[0]] = 0;\n        if(input.size() == 0)\n            return 0;\n        for(i=1;i<input.size();i++)\n        {\n            // cout<<\"i is: \"<<i<<\" count is: \"<<count<<\" window String is: \";\n            // for(int j=start; j<=i;j++)\n            //     cout<<input[j];\n            // cout<<endl;\n            if(hash.find(input[i]) == hash.end())\n                hash[input[i]] = i;\n            else\n            {\n                count = i-start;\n                // cout<<\"\\tCount after Update: \"<<count<<endl;\n                if(count > maxlen)\n                    maxlen = count;\n                if(hash[input[i]] >= start)\n                    start = hash[input[i]]+1;\n                hash[input[i]] = i;\n            }\n        }\n        count = i - start;\n        if(count > maxlen)\n            maxlen = count;\n        return maxlen;\n    }\n};"
                    },
                    {
                        "username": "tsamawi",
                        "content": "Can I get some help on the Second Solution's runtime? I implemented a sliding window (I think) but didn't score that much higher on run time than the original brute force. Unless you guys are really kicking ass in runtimes and you're all 80% better than the LC solution...\n\n `\n\n\nfrom collections import defaultdict\n\n\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        if len(s) == 0:\n            return 0\n        seenChars = defaultdict(bool)\n\n        overallMax = 1\n        currMax = 0\n        i = j = 0\n        seenChars[s[j]] = True      \n        \n        while j < len(s) - 1:\n            j += 1\n            if not seenChars[s[j]]:\n                print(f\"Not seen: {i},{j}\")                \n                currMax = (j - i) + 1\n                if overallMax < currMax:\n                    overallMax = currMax\n                seenChars[s[j]] = True\n            else:\n                print(f\"Seen: {i},{j}\")\n                while i <= j:\n                    if s[i] == s[j]:\n                        i += 1                           \n                        break\n                    seenChars[s[i]] = False                \n                    i += 1     \n\n\n        return overallMax\n                    `"
                    },
                    {
                        "username": "Aggie123",
                        "content": "\n方法1:普通双指针 - 左右指针 初始位置 0 1\n 用set记录出现的字母，当右指针出现set里的字母，则左指针+1，右指针回到左指针+2\n\n方法2: 改进双指针 - 左右指针 初始位置 0 1\n关键改进点：用map记录出现的字母的最新的位置，再次出现的字母，如果该字母之前出现的位置大于左指针，则移动左指针到改字母之前位置的后边。\n\n方法1: 普通双层循环\n`var lengthOfLongestSubstring = function(s) {\n    let len=s.length;\n    if(len<=1) return len;\n\n    let maxLen=0;\n    for(let i=0;i<len;i++){\n        let temp=1;\n        let set=new Set();\n        set.add(s.charAt(i));\n        for(let j=i+1;j<len;j++){\n            if(!set.has(s.charAt(j))){\n                temp++;\n                set.add(s.charAt(j));\n            }else{\n                break;\n            }\n        }\n        maxLen=temp>maxLen?temp:maxLen;\n    }\n    return maxLen;\n};`\n\n方法2: 双指针 - 左右指针\n`var lengthOfLongestSubstring = function(s) {\n    let len=s.length;\n    if(len<=1) return len;\n\n    let maxLen=0, temp=0;\n    let map=new Map();\n    let l=0,r=0;\n    while(l<len&&r<len&&l<=r){\n        let item=s.charAt(r);\n        if(!map.has(item)){\n            temp++;\n        }else{\n            if(map.get(item)>=l){\n                l=map.get(item)+1;\n                maxLen=temp>maxLen?temp:maxLen;\n                temp=r-l+1;\n            }else{\n                temp++;\n            }\n        }\n        map.set(s.charAt(r),r);\n        r++;\n    }\n    maxLen=temp>maxLen?temp:maxLen;\n\n    return maxLen;\n};`"
                    },
                    {
                        "username": "NikhilMalhotraa",
                        "content": "Recursive ( Max testcases passed ), Stack overflow err though.\\n\\n `class Solution {\\n    int i = 0;\\n    public int lengthOfLongestSubstring(String s) {  \\n        String temp = \"\";      \\n        int ans = longestSubstring(s,s.length(),temp,0);\\n        return ans;\\n    }\\n\\n    public int longestSubstring(String str, int n,String temp,int count){\\n        if(n==0){            \\n            return count;\\n        }\\n        \\n        if(temp.contains(\"\"+str.charAt(n-1))==false){            \\n            count++;\\n           return longestSubstring(str,n-1,temp+str.charAt(n-1),count);\\n        }\\n        else{\\n            i++;\\n            return Math.max(count,longestSubstring(str,str.length()-i,\"\",0));\\n        }\\n        \\n    }\\n    \\n}`"
                    },
                    {
                        "username": "DamanKrMishra",
                        "content": "Use two pointer right and left.\\nUse a HashMap to store the frequency of every Character in the string if at any point the frequency of character exceeds 1, the  remove the character and increase the left pointer"
                    }
                ]
            },
            {
                "id": 1715934,
                "content": [
                    {
                        "username": "1_not_8",
                        "content": "This is my solution\\n```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        list_ = list()\\n\\n        for i in range(len(s)):\\n            count = 0\\n            for j in range(i+1, len(s)):\\n                count += 1\\n                if s[i] == s[j]:\\n                    list_.append(count)\\n                    break\\n\\n        return max(list_)\\n```\\nit is passing all the test cases, but when I try to submit I am getting an error like this, please help.\\n```\\nValueError: max() arg is an empty sequence\\n    return max(list_)\\nLine 13 in lengthOfLongestSubstring (Solution.py)\\n    ret = Solution().lengthOfLongestSubstring(param_1)\\nLine 33 in _driver (Solution.py)\\n    _driver()\\nLine 44 in <module> (Solution.py)\\n```"
                    },
                    {
                        "username": "jyzeeg",
                        "content": "it means there is case when list_ is complete empty, and nothing to return for max"
                    },
                    {
                        "username": "user1517f",
                        "content": "Unable to understand this \\nInput: s = \"pwwkew\"\\nOutput: 3\\nExplanation: The answer is \"wke\", with the length of 3.\\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring."
                    },
                    {
                        "username": "aknownymous",
                        "content": "I have solved the complete question in vs code, test case was \"abcabcbb\", in vs code I got the expected output (i.e. 3) , I don\\'t understand then why am I getting different output (i.e. 1) when I paste the code here and click on \"run\". "
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@aknownymous](/aknownymous) Change the testcase, and perform a dry run, then change another testcase, to see what\\'s happen?"
                    },
                    {
                        "username": "Mayank_Sardana",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) \\n    {\\n        if(s.length()==0)\\n        {\\n            return 0;\\n        }\\n        HashMap<Character , Integer> map = new HashMap<>();\\n        map.put(s.charAt(0) , 1);\\n        int k = 0; \\n        int maxl = 1;\\n         for(int i = 1;i<s.length();i++)\\n         {\\n              char ch = s.charAt(i);\\n              if(map.containsKey(ch)==false)\\n              {\\n                  map.put(ch , 1);\\n                  if(maxl<map.size())\\n                  {\\n                      maxl = map.size();\\n                  }\\n              }\\n              else\\n              {\\n                  if(maxl<map.size())\\n                  {\\n                      maxl = map.size();\\n                  }\\n                  while(true)\\n                {\\n                  if(s.charAt(k)!=ch)\\n                  {\\n                       map.remove(s.charAt(k));\\n                       k++;\\n                  }\\n                  else\\n                  {\\n                      k++;\\n                      break;\\n                  }\\n                }\\n              }\\n         }\\n         return maxl;\\n    }\\n}"
                    },
                    {
                        "username": "meetfarhanali",
                        "content": "Whats the problem in this code. Showing run time error\\n\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        count=int(0)\\n        fcount=int(0)\\n        for i in range(0,len(s)):\\n            for j in range(i+1,len(s)):\\n                if s[i]==s[j]:\\n                    count=j-i\\n                    break\\n            if count>fcount:\\n                fcount=count\\n        print(int(fcount))"
                    },
                    {
                        "username": "bhogalamansingh22",
                        "content": "Hey, One way to solve this problem is by using a hash map and sliding window technique, it will help you keep track of the character that has already appeared and at what index it has appeared so that you can move searching with the next window. \n\nHere's my solution it takes 14 ms time to execute in C++, for better understanding I suggest you copy it take it to your local IDE and run it with uncommenting the comments for a proper understanding of how its working, I guess that would help you understand the approach.\n\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string input) {\n        unordered_map<char,int> hash;\n        int i=0, count=0,maxlen=-100,start=0;\n        hash[input[0]] = 0;\n        if(input.size() == 0)\n            return 0;\n        for(i=1;i<input.size();i++)\n        {\n            // cout<<\"i is: \"<<i<<\" count is: \"<<count<<\" window String is: \";\n            // for(int j=start; j<=i;j++)\n            //     cout<<input[j];\n            // cout<<endl;\n            if(hash.find(input[i]) == hash.end())\n                hash[input[i]] = i;\n            else\n            {\n                count = i-start;\n                // cout<<\"\\tCount after Update: \"<<count<<endl;\n                if(count > maxlen)\n                    maxlen = count;\n                if(hash[input[i]] >= start)\n                    start = hash[input[i]]+1;\n                hash[input[i]] = i;\n            }\n        }\n        count = i - start;\n        if(count > maxlen)\n            maxlen = count;\n        return maxlen;\n    }\n};"
                    },
                    {
                        "username": "tsamawi",
                        "content": "Can I get some help on the Second Solution's runtime? I implemented a sliding window (I think) but didn't score that much higher on run time than the original brute force. Unless you guys are really kicking ass in runtimes and you're all 80% better than the LC solution...\n\n `\n\n\nfrom collections import defaultdict\n\n\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        if len(s) == 0:\n            return 0\n        seenChars = defaultdict(bool)\n\n        overallMax = 1\n        currMax = 0\n        i = j = 0\n        seenChars[s[j]] = True      \n        \n        while j < len(s) - 1:\n            j += 1\n            if not seenChars[s[j]]:\n                print(f\"Not seen: {i},{j}\")                \n                currMax = (j - i) + 1\n                if overallMax < currMax:\n                    overallMax = currMax\n                seenChars[s[j]] = True\n            else:\n                print(f\"Seen: {i},{j}\")\n                while i <= j:\n                    if s[i] == s[j]:\n                        i += 1                           \n                        break\n                    seenChars[s[i]] = False                \n                    i += 1     \n\n\n        return overallMax\n                    `"
                    },
                    {
                        "username": "Aggie123",
                        "content": "\n方法1:普通双指针 - 左右指针 初始位置 0 1\n 用set记录出现的字母，当右指针出现set里的字母，则左指针+1，右指针回到左指针+2\n\n方法2: 改进双指针 - 左右指针 初始位置 0 1\n关键改进点：用map记录出现的字母的最新的位置，再次出现的字母，如果该字母之前出现的位置大于左指针，则移动左指针到改字母之前位置的后边。\n\n方法1: 普通双层循环\n`var lengthOfLongestSubstring = function(s) {\n    let len=s.length;\n    if(len<=1) return len;\n\n    let maxLen=0;\n    for(let i=0;i<len;i++){\n        let temp=1;\n        let set=new Set();\n        set.add(s.charAt(i));\n        for(let j=i+1;j<len;j++){\n            if(!set.has(s.charAt(j))){\n                temp++;\n                set.add(s.charAt(j));\n            }else{\n                break;\n            }\n        }\n        maxLen=temp>maxLen?temp:maxLen;\n    }\n    return maxLen;\n};`\n\n方法2: 双指针 - 左右指针\n`var lengthOfLongestSubstring = function(s) {\n    let len=s.length;\n    if(len<=1) return len;\n\n    let maxLen=0, temp=0;\n    let map=new Map();\n    let l=0,r=0;\n    while(l<len&&r<len&&l<=r){\n        let item=s.charAt(r);\n        if(!map.has(item)){\n            temp++;\n        }else{\n            if(map.get(item)>=l){\n                l=map.get(item)+1;\n                maxLen=temp>maxLen?temp:maxLen;\n                temp=r-l+1;\n            }else{\n                temp++;\n            }\n        }\n        map.set(s.charAt(r),r);\n        r++;\n    }\n    maxLen=temp>maxLen?temp:maxLen;\n\n    return maxLen;\n};`"
                    },
                    {
                        "username": "NikhilMalhotraa",
                        "content": "Recursive ( Max testcases passed ), Stack overflow err though.\\n\\n `class Solution {\\n    int i = 0;\\n    public int lengthOfLongestSubstring(String s) {  \\n        String temp = \"\";      \\n        int ans = longestSubstring(s,s.length(),temp,0);\\n        return ans;\\n    }\\n\\n    public int longestSubstring(String str, int n,String temp,int count){\\n        if(n==0){            \\n            return count;\\n        }\\n        \\n        if(temp.contains(\"\"+str.charAt(n-1))==false){            \\n            count++;\\n           return longestSubstring(str,n-1,temp+str.charAt(n-1),count);\\n        }\\n        else{\\n            i++;\\n            return Math.max(count,longestSubstring(str,str.length()-i,\"\",0));\\n        }\\n        \\n    }\\n    \\n}`"
                    },
                    {
                        "username": "DamanKrMishra",
                        "content": "Use two pointer right and left.\\nUse a HashMap to store the frequency of every Character in the string if at any point the frequency of character exceeds 1, the  remove the character and increase the left pointer"
                    }
                ]
            },
            {
                "id": 1715231,
                "content": [
                    {
                        "username": "1_not_8",
                        "content": "This is my solution\\n```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        list_ = list()\\n\\n        for i in range(len(s)):\\n            count = 0\\n            for j in range(i+1, len(s)):\\n                count += 1\\n                if s[i] == s[j]:\\n                    list_.append(count)\\n                    break\\n\\n        return max(list_)\\n```\\nit is passing all the test cases, but when I try to submit I am getting an error like this, please help.\\n```\\nValueError: max() arg is an empty sequence\\n    return max(list_)\\nLine 13 in lengthOfLongestSubstring (Solution.py)\\n    ret = Solution().lengthOfLongestSubstring(param_1)\\nLine 33 in _driver (Solution.py)\\n    _driver()\\nLine 44 in <module> (Solution.py)\\n```"
                    },
                    {
                        "username": "jyzeeg",
                        "content": "it means there is case when list_ is complete empty, and nothing to return for max"
                    },
                    {
                        "username": "user1517f",
                        "content": "Unable to understand this \\nInput: s = \"pwwkew\"\\nOutput: 3\\nExplanation: The answer is \"wke\", with the length of 3.\\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring."
                    },
                    {
                        "username": "aknownymous",
                        "content": "I have solved the complete question in vs code, test case was \"abcabcbb\", in vs code I got the expected output (i.e. 3) , I don\\'t understand then why am I getting different output (i.e. 1) when I paste the code here and click on \"run\". "
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@aknownymous](/aknownymous) Change the testcase, and perform a dry run, then change another testcase, to see what\\'s happen?"
                    },
                    {
                        "username": "Mayank_Sardana",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) \\n    {\\n        if(s.length()==0)\\n        {\\n            return 0;\\n        }\\n        HashMap<Character , Integer> map = new HashMap<>();\\n        map.put(s.charAt(0) , 1);\\n        int k = 0; \\n        int maxl = 1;\\n         for(int i = 1;i<s.length();i++)\\n         {\\n              char ch = s.charAt(i);\\n              if(map.containsKey(ch)==false)\\n              {\\n                  map.put(ch , 1);\\n                  if(maxl<map.size())\\n                  {\\n                      maxl = map.size();\\n                  }\\n              }\\n              else\\n              {\\n                  if(maxl<map.size())\\n                  {\\n                      maxl = map.size();\\n                  }\\n                  while(true)\\n                {\\n                  if(s.charAt(k)!=ch)\\n                  {\\n                       map.remove(s.charAt(k));\\n                       k++;\\n                  }\\n                  else\\n                  {\\n                      k++;\\n                      break;\\n                  }\\n                }\\n              }\\n         }\\n         return maxl;\\n    }\\n}"
                    },
                    {
                        "username": "meetfarhanali",
                        "content": "Whats the problem in this code. Showing run time error\\n\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        count=int(0)\\n        fcount=int(0)\\n        for i in range(0,len(s)):\\n            for j in range(i+1,len(s)):\\n                if s[i]==s[j]:\\n                    count=j-i\\n                    break\\n            if count>fcount:\\n                fcount=count\\n        print(int(fcount))"
                    },
                    {
                        "username": "bhogalamansingh22",
                        "content": "Hey, One way to solve this problem is by using a hash map and sliding window technique, it will help you keep track of the character that has already appeared and at what index it has appeared so that you can move searching with the next window. \n\nHere's my solution it takes 14 ms time to execute in C++, for better understanding I suggest you copy it take it to your local IDE and run it with uncommenting the comments for a proper understanding of how its working, I guess that would help you understand the approach.\n\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string input) {\n        unordered_map<char,int> hash;\n        int i=0, count=0,maxlen=-100,start=0;\n        hash[input[0]] = 0;\n        if(input.size() == 0)\n            return 0;\n        for(i=1;i<input.size();i++)\n        {\n            // cout<<\"i is: \"<<i<<\" count is: \"<<count<<\" window String is: \";\n            // for(int j=start; j<=i;j++)\n            //     cout<<input[j];\n            // cout<<endl;\n            if(hash.find(input[i]) == hash.end())\n                hash[input[i]] = i;\n            else\n            {\n                count = i-start;\n                // cout<<\"\\tCount after Update: \"<<count<<endl;\n                if(count > maxlen)\n                    maxlen = count;\n                if(hash[input[i]] >= start)\n                    start = hash[input[i]]+1;\n                hash[input[i]] = i;\n            }\n        }\n        count = i - start;\n        if(count > maxlen)\n            maxlen = count;\n        return maxlen;\n    }\n};"
                    },
                    {
                        "username": "tsamawi",
                        "content": "Can I get some help on the Second Solution's runtime? I implemented a sliding window (I think) but didn't score that much higher on run time than the original brute force. Unless you guys are really kicking ass in runtimes and you're all 80% better than the LC solution...\n\n `\n\n\nfrom collections import defaultdict\n\n\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        if len(s) == 0:\n            return 0\n        seenChars = defaultdict(bool)\n\n        overallMax = 1\n        currMax = 0\n        i = j = 0\n        seenChars[s[j]] = True      \n        \n        while j < len(s) - 1:\n            j += 1\n            if not seenChars[s[j]]:\n                print(f\"Not seen: {i},{j}\")                \n                currMax = (j - i) + 1\n                if overallMax < currMax:\n                    overallMax = currMax\n                seenChars[s[j]] = True\n            else:\n                print(f\"Seen: {i},{j}\")\n                while i <= j:\n                    if s[i] == s[j]:\n                        i += 1                           \n                        break\n                    seenChars[s[i]] = False                \n                    i += 1     \n\n\n        return overallMax\n                    `"
                    },
                    {
                        "username": "Aggie123",
                        "content": "\n方法1:普通双指针 - 左右指针 初始位置 0 1\n 用set记录出现的字母，当右指针出现set里的字母，则左指针+1，右指针回到左指针+2\n\n方法2: 改进双指针 - 左右指针 初始位置 0 1\n关键改进点：用map记录出现的字母的最新的位置，再次出现的字母，如果该字母之前出现的位置大于左指针，则移动左指针到改字母之前位置的后边。\n\n方法1: 普通双层循环\n`var lengthOfLongestSubstring = function(s) {\n    let len=s.length;\n    if(len<=1) return len;\n\n    let maxLen=0;\n    for(let i=0;i<len;i++){\n        let temp=1;\n        let set=new Set();\n        set.add(s.charAt(i));\n        for(let j=i+1;j<len;j++){\n            if(!set.has(s.charAt(j))){\n                temp++;\n                set.add(s.charAt(j));\n            }else{\n                break;\n            }\n        }\n        maxLen=temp>maxLen?temp:maxLen;\n    }\n    return maxLen;\n};`\n\n方法2: 双指针 - 左右指针\n`var lengthOfLongestSubstring = function(s) {\n    let len=s.length;\n    if(len<=1) return len;\n\n    let maxLen=0, temp=0;\n    let map=new Map();\n    let l=0,r=0;\n    while(l<len&&r<len&&l<=r){\n        let item=s.charAt(r);\n        if(!map.has(item)){\n            temp++;\n        }else{\n            if(map.get(item)>=l){\n                l=map.get(item)+1;\n                maxLen=temp>maxLen?temp:maxLen;\n                temp=r-l+1;\n            }else{\n                temp++;\n            }\n        }\n        map.set(s.charAt(r),r);\n        r++;\n    }\n    maxLen=temp>maxLen?temp:maxLen;\n\n    return maxLen;\n};`"
                    },
                    {
                        "username": "NikhilMalhotraa",
                        "content": "Recursive ( Max testcases passed ), Stack overflow err though.\\n\\n `class Solution {\\n    int i = 0;\\n    public int lengthOfLongestSubstring(String s) {  \\n        String temp = \"\";      \\n        int ans = longestSubstring(s,s.length(),temp,0);\\n        return ans;\\n    }\\n\\n    public int longestSubstring(String str, int n,String temp,int count){\\n        if(n==0){            \\n            return count;\\n        }\\n        \\n        if(temp.contains(\"\"+str.charAt(n-1))==false){            \\n            count++;\\n           return longestSubstring(str,n-1,temp+str.charAt(n-1),count);\\n        }\\n        else{\\n            i++;\\n            return Math.max(count,longestSubstring(str,str.length()-i,\"\",0));\\n        }\\n        \\n    }\\n    \\n}`"
                    },
                    {
                        "username": "DamanKrMishra",
                        "content": "Use two pointer right and left.\\nUse a HashMap to store the frequency of every Character in the string if at any point the frequency of character exceeds 1, the  remove the character and increase the left pointer"
                    }
                ]
            },
            {
                "id": 1710263,
                "content": [
                    {
                        "username": "1_not_8",
                        "content": "This is my solution\\n```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        list_ = list()\\n\\n        for i in range(len(s)):\\n            count = 0\\n            for j in range(i+1, len(s)):\\n                count += 1\\n                if s[i] == s[j]:\\n                    list_.append(count)\\n                    break\\n\\n        return max(list_)\\n```\\nit is passing all the test cases, but when I try to submit I am getting an error like this, please help.\\n```\\nValueError: max() arg is an empty sequence\\n    return max(list_)\\nLine 13 in lengthOfLongestSubstring (Solution.py)\\n    ret = Solution().lengthOfLongestSubstring(param_1)\\nLine 33 in _driver (Solution.py)\\n    _driver()\\nLine 44 in <module> (Solution.py)\\n```"
                    },
                    {
                        "username": "jyzeeg",
                        "content": "it means there is case when list_ is complete empty, and nothing to return for max"
                    },
                    {
                        "username": "user1517f",
                        "content": "Unable to understand this \\nInput: s = \"pwwkew\"\\nOutput: 3\\nExplanation: The answer is \"wke\", with the length of 3.\\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring."
                    },
                    {
                        "username": "aknownymous",
                        "content": "I have solved the complete question in vs code, test case was \"abcabcbb\", in vs code I got the expected output (i.e. 3) , I don\\'t understand then why am I getting different output (i.e. 1) when I paste the code here and click on \"run\". "
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@aknownymous](/aknownymous) Change the testcase, and perform a dry run, then change another testcase, to see what\\'s happen?"
                    },
                    {
                        "username": "Mayank_Sardana",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) \\n    {\\n        if(s.length()==0)\\n        {\\n            return 0;\\n        }\\n        HashMap<Character , Integer> map = new HashMap<>();\\n        map.put(s.charAt(0) , 1);\\n        int k = 0; \\n        int maxl = 1;\\n         for(int i = 1;i<s.length();i++)\\n         {\\n              char ch = s.charAt(i);\\n              if(map.containsKey(ch)==false)\\n              {\\n                  map.put(ch , 1);\\n                  if(maxl<map.size())\\n                  {\\n                      maxl = map.size();\\n                  }\\n              }\\n              else\\n              {\\n                  if(maxl<map.size())\\n                  {\\n                      maxl = map.size();\\n                  }\\n                  while(true)\\n                {\\n                  if(s.charAt(k)!=ch)\\n                  {\\n                       map.remove(s.charAt(k));\\n                       k++;\\n                  }\\n                  else\\n                  {\\n                      k++;\\n                      break;\\n                  }\\n                }\\n              }\\n         }\\n         return maxl;\\n    }\\n}"
                    },
                    {
                        "username": "meetfarhanali",
                        "content": "Whats the problem in this code. Showing run time error\\n\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        count=int(0)\\n        fcount=int(0)\\n        for i in range(0,len(s)):\\n            for j in range(i+1,len(s)):\\n                if s[i]==s[j]:\\n                    count=j-i\\n                    break\\n            if count>fcount:\\n                fcount=count\\n        print(int(fcount))"
                    },
                    {
                        "username": "bhogalamansingh22",
                        "content": "Hey, One way to solve this problem is by using a hash map and sliding window technique, it will help you keep track of the character that has already appeared and at what index it has appeared so that you can move searching with the next window. \n\nHere's my solution it takes 14 ms time to execute in C++, for better understanding I suggest you copy it take it to your local IDE and run it with uncommenting the comments for a proper understanding of how its working, I guess that would help you understand the approach.\n\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string input) {\n        unordered_map<char,int> hash;\n        int i=0, count=0,maxlen=-100,start=0;\n        hash[input[0]] = 0;\n        if(input.size() == 0)\n            return 0;\n        for(i=1;i<input.size();i++)\n        {\n            // cout<<\"i is: \"<<i<<\" count is: \"<<count<<\" window String is: \";\n            // for(int j=start; j<=i;j++)\n            //     cout<<input[j];\n            // cout<<endl;\n            if(hash.find(input[i]) == hash.end())\n                hash[input[i]] = i;\n            else\n            {\n                count = i-start;\n                // cout<<\"\\tCount after Update: \"<<count<<endl;\n                if(count > maxlen)\n                    maxlen = count;\n                if(hash[input[i]] >= start)\n                    start = hash[input[i]]+1;\n                hash[input[i]] = i;\n            }\n        }\n        count = i - start;\n        if(count > maxlen)\n            maxlen = count;\n        return maxlen;\n    }\n};"
                    },
                    {
                        "username": "tsamawi",
                        "content": "Can I get some help on the Second Solution's runtime? I implemented a sliding window (I think) but didn't score that much higher on run time than the original brute force. Unless you guys are really kicking ass in runtimes and you're all 80% better than the LC solution...\n\n `\n\n\nfrom collections import defaultdict\n\n\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        if len(s) == 0:\n            return 0\n        seenChars = defaultdict(bool)\n\n        overallMax = 1\n        currMax = 0\n        i = j = 0\n        seenChars[s[j]] = True      \n        \n        while j < len(s) - 1:\n            j += 1\n            if not seenChars[s[j]]:\n                print(f\"Not seen: {i},{j}\")                \n                currMax = (j - i) + 1\n                if overallMax < currMax:\n                    overallMax = currMax\n                seenChars[s[j]] = True\n            else:\n                print(f\"Seen: {i},{j}\")\n                while i <= j:\n                    if s[i] == s[j]:\n                        i += 1                           \n                        break\n                    seenChars[s[i]] = False                \n                    i += 1     \n\n\n        return overallMax\n                    `"
                    },
                    {
                        "username": "Aggie123",
                        "content": "\n方法1:普通双指针 - 左右指针 初始位置 0 1\n 用set记录出现的字母，当右指针出现set里的字母，则左指针+1，右指针回到左指针+2\n\n方法2: 改进双指针 - 左右指针 初始位置 0 1\n关键改进点：用map记录出现的字母的最新的位置，再次出现的字母，如果该字母之前出现的位置大于左指针，则移动左指针到改字母之前位置的后边。\n\n方法1: 普通双层循环\n`var lengthOfLongestSubstring = function(s) {\n    let len=s.length;\n    if(len<=1) return len;\n\n    let maxLen=0;\n    for(let i=0;i<len;i++){\n        let temp=1;\n        let set=new Set();\n        set.add(s.charAt(i));\n        for(let j=i+1;j<len;j++){\n            if(!set.has(s.charAt(j))){\n                temp++;\n                set.add(s.charAt(j));\n            }else{\n                break;\n            }\n        }\n        maxLen=temp>maxLen?temp:maxLen;\n    }\n    return maxLen;\n};`\n\n方法2: 双指针 - 左右指针\n`var lengthOfLongestSubstring = function(s) {\n    let len=s.length;\n    if(len<=1) return len;\n\n    let maxLen=0, temp=0;\n    let map=new Map();\n    let l=0,r=0;\n    while(l<len&&r<len&&l<=r){\n        let item=s.charAt(r);\n        if(!map.has(item)){\n            temp++;\n        }else{\n            if(map.get(item)>=l){\n                l=map.get(item)+1;\n                maxLen=temp>maxLen?temp:maxLen;\n                temp=r-l+1;\n            }else{\n                temp++;\n            }\n        }\n        map.set(s.charAt(r),r);\n        r++;\n    }\n    maxLen=temp>maxLen?temp:maxLen;\n\n    return maxLen;\n};`"
                    },
                    {
                        "username": "NikhilMalhotraa",
                        "content": "Recursive ( Max testcases passed ), Stack overflow err though.\\n\\n `class Solution {\\n    int i = 0;\\n    public int lengthOfLongestSubstring(String s) {  \\n        String temp = \"\";      \\n        int ans = longestSubstring(s,s.length(),temp,0);\\n        return ans;\\n    }\\n\\n    public int longestSubstring(String str, int n,String temp,int count){\\n        if(n==0){            \\n            return count;\\n        }\\n        \\n        if(temp.contains(\"\"+str.charAt(n-1))==false){            \\n            count++;\\n           return longestSubstring(str,n-1,temp+str.charAt(n-1),count);\\n        }\\n        else{\\n            i++;\\n            return Math.max(count,longestSubstring(str,str.length()-i,\"\",0));\\n        }\\n        \\n    }\\n    \\n}`"
                    },
                    {
                        "username": "DamanKrMishra",
                        "content": "Use two pointer right and left.\\nUse a HashMap to store the frequency of every Character in the string if at any point the frequency of character exceeds 1, the  remove the character and increase the left pointer"
                    }
                ]
            },
            {
                "id": 1709651,
                "content": [
                    {
                        "username": "1_not_8",
                        "content": "This is my solution\\n```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        list_ = list()\\n\\n        for i in range(len(s)):\\n            count = 0\\n            for j in range(i+1, len(s)):\\n                count += 1\\n                if s[i] == s[j]:\\n                    list_.append(count)\\n                    break\\n\\n        return max(list_)\\n```\\nit is passing all the test cases, but when I try to submit I am getting an error like this, please help.\\n```\\nValueError: max() arg is an empty sequence\\n    return max(list_)\\nLine 13 in lengthOfLongestSubstring (Solution.py)\\n    ret = Solution().lengthOfLongestSubstring(param_1)\\nLine 33 in _driver (Solution.py)\\n    _driver()\\nLine 44 in <module> (Solution.py)\\n```"
                    },
                    {
                        "username": "jyzeeg",
                        "content": "it means there is case when list_ is complete empty, and nothing to return for max"
                    },
                    {
                        "username": "user1517f",
                        "content": "Unable to understand this \\nInput: s = \"pwwkew\"\\nOutput: 3\\nExplanation: The answer is \"wke\", with the length of 3.\\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring."
                    },
                    {
                        "username": "aknownymous",
                        "content": "I have solved the complete question in vs code, test case was \"abcabcbb\", in vs code I got the expected output (i.e. 3) , I don\\'t understand then why am I getting different output (i.e. 1) when I paste the code here and click on \"run\". "
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@aknownymous](/aknownymous) Change the testcase, and perform a dry run, then change another testcase, to see what\\'s happen?"
                    },
                    {
                        "username": "Mayank_Sardana",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) \\n    {\\n        if(s.length()==0)\\n        {\\n            return 0;\\n        }\\n        HashMap<Character , Integer> map = new HashMap<>();\\n        map.put(s.charAt(0) , 1);\\n        int k = 0; \\n        int maxl = 1;\\n         for(int i = 1;i<s.length();i++)\\n         {\\n              char ch = s.charAt(i);\\n              if(map.containsKey(ch)==false)\\n              {\\n                  map.put(ch , 1);\\n                  if(maxl<map.size())\\n                  {\\n                      maxl = map.size();\\n                  }\\n              }\\n              else\\n              {\\n                  if(maxl<map.size())\\n                  {\\n                      maxl = map.size();\\n                  }\\n                  while(true)\\n                {\\n                  if(s.charAt(k)!=ch)\\n                  {\\n                       map.remove(s.charAt(k));\\n                       k++;\\n                  }\\n                  else\\n                  {\\n                      k++;\\n                      break;\\n                  }\\n                }\\n              }\\n         }\\n         return maxl;\\n    }\\n}"
                    },
                    {
                        "username": "meetfarhanali",
                        "content": "Whats the problem in this code. Showing run time error\\n\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        count=int(0)\\n        fcount=int(0)\\n        for i in range(0,len(s)):\\n            for j in range(i+1,len(s)):\\n                if s[i]==s[j]:\\n                    count=j-i\\n                    break\\n            if count>fcount:\\n                fcount=count\\n        print(int(fcount))"
                    },
                    {
                        "username": "bhogalamansingh22",
                        "content": "Hey, One way to solve this problem is by using a hash map and sliding window technique, it will help you keep track of the character that has already appeared and at what index it has appeared so that you can move searching with the next window. \n\nHere's my solution it takes 14 ms time to execute in C++, for better understanding I suggest you copy it take it to your local IDE and run it with uncommenting the comments for a proper understanding of how its working, I guess that would help you understand the approach.\n\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string input) {\n        unordered_map<char,int> hash;\n        int i=0, count=0,maxlen=-100,start=0;\n        hash[input[0]] = 0;\n        if(input.size() == 0)\n            return 0;\n        for(i=1;i<input.size();i++)\n        {\n            // cout<<\"i is: \"<<i<<\" count is: \"<<count<<\" window String is: \";\n            // for(int j=start; j<=i;j++)\n            //     cout<<input[j];\n            // cout<<endl;\n            if(hash.find(input[i]) == hash.end())\n                hash[input[i]] = i;\n            else\n            {\n                count = i-start;\n                // cout<<\"\\tCount after Update: \"<<count<<endl;\n                if(count > maxlen)\n                    maxlen = count;\n                if(hash[input[i]] >= start)\n                    start = hash[input[i]]+1;\n                hash[input[i]] = i;\n            }\n        }\n        count = i - start;\n        if(count > maxlen)\n            maxlen = count;\n        return maxlen;\n    }\n};"
                    },
                    {
                        "username": "tsamawi",
                        "content": "Can I get some help on the Second Solution's runtime? I implemented a sliding window (I think) but didn't score that much higher on run time than the original brute force. Unless you guys are really kicking ass in runtimes and you're all 80% better than the LC solution...\n\n `\n\n\nfrom collections import defaultdict\n\n\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        if len(s) == 0:\n            return 0\n        seenChars = defaultdict(bool)\n\n        overallMax = 1\n        currMax = 0\n        i = j = 0\n        seenChars[s[j]] = True      \n        \n        while j < len(s) - 1:\n            j += 1\n            if not seenChars[s[j]]:\n                print(f\"Not seen: {i},{j}\")                \n                currMax = (j - i) + 1\n                if overallMax < currMax:\n                    overallMax = currMax\n                seenChars[s[j]] = True\n            else:\n                print(f\"Seen: {i},{j}\")\n                while i <= j:\n                    if s[i] == s[j]:\n                        i += 1                           \n                        break\n                    seenChars[s[i]] = False                \n                    i += 1     \n\n\n        return overallMax\n                    `"
                    },
                    {
                        "username": "Aggie123",
                        "content": "\n方法1:普通双指针 - 左右指针 初始位置 0 1\n 用set记录出现的字母，当右指针出现set里的字母，则左指针+1，右指针回到左指针+2\n\n方法2: 改进双指针 - 左右指针 初始位置 0 1\n关键改进点：用map记录出现的字母的最新的位置，再次出现的字母，如果该字母之前出现的位置大于左指针，则移动左指针到改字母之前位置的后边。\n\n方法1: 普通双层循环\n`var lengthOfLongestSubstring = function(s) {\n    let len=s.length;\n    if(len<=1) return len;\n\n    let maxLen=0;\n    for(let i=0;i<len;i++){\n        let temp=1;\n        let set=new Set();\n        set.add(s.charAt(i));\n        for(let j=i+1;j<len;j++){\n            if(!set.has(s.charAt(j))){\n                temp++;\n                set.add(s.charAt(j));\n            }else{\n                break;\n            }\n        }\n        maxLen=temp>maxLen?temp:maxLen;\n    }\n    return maxLen;\n};`\n\n方法2: 双指针 - 左右指针\n`var lengthOfLongestSubstring = function(s) {\n    let len=s.length;\n    if(len<=1) return len;\n\n    let maxLen=0, temp=0;\n    let map=new Map();\n    let l=0,r=0;\n    while(l<len&&r<len&&l<=r){\n        let item=s.charAt(r);\n        if(!map.has(item)){\n            temp++;\n        }else{\n            if(map.get(item)>=l){\n                l=map.get(item)+1;\n                maxLen=temp>maxLen?temp:maxLen;\n                temp=r-l+1;\n            }else{\n                temp++;\n            }\n        }\n        map.set(s.charAt(r),r);\n        r++;\n    }\n    maxLen=temp>maxLen?temp:maxLen;\n\n    return maxLen;\n};`"
                    },
                    {
                        "username": "NikhilMalhotraa",
                        "content": "Recursive ( Max testcases passed ), Stack overflow err though.\\n\\n `class Solution {\\n    int i = 0;\\n    public int lengthOfLongestSubstring(String s) {  \\n        String temp = \"\";      \\n        int ans = longestSubstring(s,s.length(),temp,0);\\n        return ans;\\n    }\\n\\n    public int longestSubstring(String str, int n,String temp,int count){\\n        if(n==0){            \\n            return count;\\n        }\\n        \\n        if(temp.contains(\"\"+str.charAt(n-1))==false){            \\n            count++;\\n           return longestSubstring(str,n-1,temp+str.charAt(n-1),count);\\n        }\\n        else{\\n            i++;\\n            return Math.max(count,longestSubstring(str,str.length()-i,\"\",0));\\n        }\\n        \\n    }\\n    \\n}`"
                    },
                    {
                        "username": "DamanKrMishra",
                        "content": "Use two pointer right and left.\\nUse a HashMap to store the frequency of every Character in the string if at any point the frequency of character exceeds 1, the  remove the character and increase the left pointer"
                    }
                ]
            },
            {
                "id": 1708763,
                "content": [
                    {
                        "username": "1_not_8",
                        "content": "This is my solution\\n```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        list_ = list()\\n\\n        for i in range(len(s)):\\n            count = 0\\n            for j in range(i+1, len(s)):\\n                count += 1\\n                if s[i] == s[j]:\\n                    list_.append(count)\\n                    break\\n\\n        return max(list_)\\n```\\nit is passing all the test cases, but when I try to submit I am getting an error like this, please help.\\n```\\nValueError: max() arg is an empty sequence\\n    return max(list_)\\nLine 13 in lengthOfLongestSubstring (Solution.py)\\n    ret = Solution().lengthOfLongestSubstring(param_1)\\nLine 33 in _driver (Solution.py)\\n    _driver()\\nLine 44 in <module> (Solution.py)\\n```"
                    },
                    {
                        "username": "jyzeeg",
                        "content": "it means there is case when list_ is complete empty, and nothing to return for max"
                    },
                    {
                        "username": "user1517f",
                        "content": "Unable to understand this \\nInput: s = \"pwwkew\"\\nOutput: 3\\nExplanation: The answer is \"wke\", with the length of 3.\\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring."
                    },
                    {
                        "username": "aknownymous",
                        "content": "I have solved the complete question in vs code, test case was \"abcabcbb\", in vs code I got the expected output (i.e. 3) , I don\\'t understand then why am I getting different output (i.e. 1) when I paste the code here and click on \"run\". "
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@aknownymous](/aknownymous) Change the testcase, and perform a dry run, then change another testcase, to see what\\'s happen?"
                    },
                    {
                        "username": "Mayank_Sardana",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) \\n    {\\n        if(s.length()==0)\\n        {\\n            return 0;\\n        }\\n        HashMap<Character , Integer> map = new HashMap<>();\\n        map.put(s.charAt(0) , 1);\\n        int k = 0; \\n        int maxl = 1;\\n         for(int i = 1;i<s.length();i++)\\n         {\\n              char ch = s.charAt(i);\\n              if(map.containsKey(ch)==false)\\n              {\\n                  map.put(ch , 1);\\n                  if(maxl<map.size())\\n                  {\\n                      maxl = map.size();\\n                  }\\n              }\\n              else\\n              {\\n                  if(maxl<map.size())\\n                  {\\n                      maxl = map.size();\\n                  }\\n                  while(true)\\n                {\\n                  if(s.charAt(k)!=ch)\\n                  {\\n                       map.remove(s.charAt(k));\\n                       k++;\\n                  }\\n                  else\\n                  {\\n                      k++;\\n                      break;\\n                  }\\n                }\\n              }\\n         }\\n         return maxl;\\n    }\\n}"
                    },
                    {
                        "username": "meetfarhanali",
                        "content": "Whats the problem in this code. Showing run time error\\n\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        count=int(0)\\n        fcount=int(0)\\n        for i in range(0,len(s)):\\n            for j in range(i+1,len(s)):\\n                if s[i]==s[j]:\\n                    count=j-i\\n                    break\\n            if count>fcount:\\n                fcount=count\\n        print(int(fcount))"
                    },
                    {
                        "username": "bhogalamansingh22",
                        "content": "Hey, One way to solve this problem is by using a hash map and sliding window technique, it will help you keep track of the character that has already appeared and at what index it has appeared so that you can move searching with the next window. \n\nHere's my solution it takes 14 ms time to execute in C++, for better understanding I suggest you copy it take it to your local IDE and run it with uncommenting the comments for a proper understanding of how its working, I guess that would help you understand the approach.\n\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string input) {\n        unordered_map<char,int> hash;\n        int i=0, count=0,maxlen=-100,start=0;\n        hash[input[0]] = 0;\n        if(input.size() == 0)\n            return 0;\n        for(i=1;i<input.size();i++)\n        {\n            // cout<<\"i is: \"<<i<<\" count is: \"<<count<<\" window String is: \";\n            // for(int j=start; j<=i;j++)\n            //     cout<<input[j];\n            // cout<<endl;\n            if(hash.find(input[i]) == hash.end())\n                hash[input[i]] = i;\n            else\n            {\n                count = i-start;\n                // cout<<\"\\tCount after Update: \"<<count<<endl;\n                if(count > maxlen)\n                    maxlen = count;\n                if(hash[input[i]] >= start)\n                    start = hash[input[i]]+1;\n                hash[input[i]] = i;\n            }\n        }\n        count = i - start;\n        if(count > maxlen)\n            maxlen = count;\n        return maxlen;\n    }\n};"
                    },
                    {
                        "username": "tsamawi",
                        "content": "Can I get some help on the Second Solution's runtime? I implemented a sliding window (I think) but didn't score that much higher on run time than the original brute force. Unless you guys are really kicking ass in runtimes and you're all 80% better than the LC solution...\n\n `\n\n\nfrom collections import defaultdict\n\n\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        if len(s) == 0:\n            return 0\n        seenChars = defaultdict(bool)\n\n        overallMax = 1\n        currMax = 0\n        i = j = 0\n        seenChars[s[j]] = True      \n        \n        while j < len(s) - 1:\n            j += 1\n            if not seenChars[s[j]]:\n                print(f\"Not seen: {i},{j}\")                \n                currMax = (j - i) + 1\n                if overallMax < currMax:\n                    overallMax = currMax\n                seenChars[s[j]] = True\n            else:\n                print(f\"Seen: {i},{j}\")\n                while i <= j:\n                    if s[i] == s[j]:\n                        i += 1                           \n                        break\n                    seenChars[s[i]] = False                \n                    i += 1     \n\n\n        return overallMax\n                    `"
                    },
                    {
                        "username": "Aggie123",
                        "content": "\n方法1:普通双指针 - 左右指针 初始位置 0 1\n 用set记录出现的字母，当右指针出现set里的字母，则左指针+1，右指针回到左指针+2\n\n方法2: 改进双指针 - 左右指针 初始位置 0 1\n关键改进点：用map记录出现的字母的最新的位置，再次出现的字母，如果该字母之前出现的位置大于左指针，则移动左指针到改字母之前位置的后边。\n\n方法1: 普通双层循环\n`var lengthOfLongestSubstring = function(s) {\n    let len=s.length;\n    if(len<=1) return len;\n\n    let maxLen=0;\n    for(let i=0;i<len;i++){\n        let temp=1;\n        let set=new Set();\n        set.add(s.charAt(i));\n        for(let j=i+1;j<len;j++){\n            if(!set.has(s.charAt(j))){\n                temp++;\n                set.add(s.charAt(j));\n            }else{\n                break;\n            }\n        }\n        maxLen=temp>maxLen?temp:maxLen;\n    }\n    return maxLen;\n};`\n\n方法2: 双指针 - 左右指针\n`var lengthOfLongestSubstring = function(s) {\n    let len=s.length;\n    if(len<=1) return len;\n\n    let maxLen=0, temp=0;\n    let map=new Map();\n    let l=0,r=0;\n    while(l<len&&r<len&&l<=r){\n        let item=s.charAt(r);\n        if(!map.has(item)){\n            temp++;\n        }else{\n            if(map.get(item)>=l){\n                l=map.get(item)+1;\n                maxLen=temp>maxLen?temp:maxLen;\n                temp=r-l+1;\n            }else{\n                temp++;\n            }\n        }\n        map.set(s.charAt(r),r);\n        r++;\n    }\n    maxLen=temp>maxLen?temp:maxLen;\n\n    return maxLen;\n};`"
                    },
                    {
                        "username": "NikhilMalhotraa",
                        "content": "Recursive ( Max testcases passed ), Stack overflow err though.\\n\\n `class Solution {\\n    int i = 0;\\n    public int lengthOfLongestSubstring(String s) {  \\n        String temp = \"\";      \\n        int ans = longestSubstring(s,s.length(),temp,0);\\n        return ans;\\n    }\\n\\n    public int longestSubstring(String str, int n,String temp,int count){\\n        if(n==0){            \\n            return count;\\n        }\\n        \\n        if(temp.contains(\"\"+str.charAt(n-1))==false){            \\n            count++;\\n           return longestSubstring(str,n-1,temp+str.charAt(n-1),count);\\n        }\\n        else{\\n            i++;\\n            return Math.max(count,longestSubstring(str,str.length()-i,\"\",0));\\n        }\\n        \\n    }\\n    \\n}`"
                    },
                    {
                        "username": "DamanKrMishra",
                        "content": "Use two pointer right and left.\\nUse a HashMap to store the frequency of every Character in the string if at any point the frequency of character exceeds 1, the  remove the character and increase the left pointer"
                    }
                ]
            },
            {
                "id": 1702330,
                "content": [
                    {
                        "username": "1_not_8",
                        "content": "This is my solution\\n```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        list_ = list()\\n\\n        for i in range(len(s)):\\n            count = 0\\n            for j in range(i+1, len(s)):\\n                count += 1\\n                if s[i] == s[j]:\\n                    list_.append(count)\\n                    break\\n\\n        return max(list_)\\n```\\nit is passing all the test cases, but when I try to submit I am getting an error like this, please help.\\n```\\nValueError: max() arg is an empty sequence\\n    return max(list_)\\nLine 13 in lengthOfLongestSubstring (Solution.py)\\n    ret = Solution().lengthOfLongestSubstring(param_1)\\nLine 33 in _driver (Solution.py)\\n    _driver()\\nLine 44 in <module> (Solution.py)\\n```"
                    },
                    {
                        "username": "jyzeeg",
                        "content": "it means there is case when list_ is complete empty, and nothing to return for max"
                    },
                    {
                        "username": "user1517f",
                        "content": "Unable to understand this \\nInput: s = \"pwwkew\"\\nOutput: 3\\nExplanation: The answer is \"wke\", with the length of 3.\\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring."
                    },
                    {
                        "username": "aknownymous",
                        "content": "I have solved the complete question in vs code, test case was \"abcabcbb\", in vs code I got the expected output (i.e. 3) , I don\\'t understand then why am I getting different output (i.e. 1) when I paste the code here and click on \"run\". "
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@aknownymous](/aknownymous) Change the testcase, and perform a dry run, then change another testcase, to see what\\'s happen?"
                    },
                    {
                        "username": "Mayank_Sardana",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) \\n    {\\n        if(s.length()==0)\\n        {\\n            return 0;\\n        }\\n        HashMap<Character , Integer> map = new HashMap<>();\\n        map.put(s.charAt(0) , 1);\\n        int k = 0; \\n        int maxl = 1;\\n         for(int i = 1;i<s.length();i++)\\n         {\\n              char ch = s.charAt(i);\\n              if(map.containsKey(ch)==false)\\n              {\\n                  map.put(ch , 1);\\n                  if(maxl<map.size())\\n                  {\\n                      maxl = map.size();\\n                  }\\n              }\\n              else\\n              {\\n                  if(maxl<map.size())\\n                  {\\n                      maxl = map.size();\\n                  }\\n                  while(true)\\n                {\\n                  if(s.charAt(k)!=ch)\\n                  {\\n                       map.remove(s.charAt(k));\\n                       k++;\\n                  }\\n                  else\\n                  {\\n                      k++;\\n                      break;\\n                  }\\n                }\\n              }\\n         }\\n         return maxl;\\n    }\\n}"
                    },
                    {
                        "username": "meetfarhanali",
                        "content": "Whats the problem in this code. Showing run time error\\n\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        count=int(0)\\n        fcount=int(0)\\n        for i in range(0,len(s)):\\n            for j in range(i+1,len(s)):\\n                if s[i]==s[j]:\\n                    count=j-i\\n                    break\\n            if count>fcount:\\n                fcount=count\\n        print(int(fcount))"
                    },
                    {
                        "username": "bhogalamansingh22",
                        "content": "Hey, One way to solve this problem is by using a hash map and sliding window technique, it will help you keep track of the character that has already appeared and at what index it has appeared so that you can move searching with the next window. \n\nHere's my solution it takes 14 ms time to execute in C++, for better understanding I suggest you copy it take it to your local IDE and run it with uncommenting the comments for a proper understanding of how its working, I guess that would help you understand the approach.\n\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string input) {\n        unordered_map<char,int> hash;\n        int i=0, count=0,maxlen=-100,start=0;\n        hash[input[0]] = 0;\n        if(input.size() == 0)\n            return 0;\n        for(i=1;i<input.size();i++)\n        {\n            // cout<<\"i is: \"<<i<<\" count is: \"<<count<<\" window String is: \";\n            // for(int j=start; j<=i;j++)\n            //     cout<<input[j];\n            // cout<<endl;\n            if(hash.find(input[i]) == hash.end())\n                hash[input[i]] = i;\n            else\n            {\n                count = i-start;\n                // cout<<\"\\tCount after Update: \"<<count<<endl;\n                if(count > maxlen)\n                    maxlen = count;\n                if(hash[input[i]] >= start)\n                    start = hash[input[i]]+1;\n                hash[input[i]] = i;\n            }\n        }\n        count = i - start;\n        if(count > maxlen)\n            maxlen = count;\n        return maxlen;\n    }\n};"
                    },
                    {
                        "username": "tsamawi",
                        "content": "Can I get some help on the Second Solution's runtime? I implemented a sliding window (I think) but didn't score that much higher on run time than the original brute force. Unless you guys are really kicking ass in runtimes and you're all 80% better than the LC solution...\n\n `\n\n\nfrom collections import defaultdict\n\n\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        if len(s) == 0:\n            return 0\n        seenChars = defaultdict(bool)\n\n        overallMax = 1\n        currMax = 0\n        i = j = 0\n        seenChars[s[j]] = True      \n        \n        while j < len(s) - 1:\n            j += 1\n            if not seenChars[s[j]]:\n                print(f\"Not seen: {i},{j}\")                \n                currMax = (j - i) + 1\n                if overallMax < currMax:\n                    overallMax = currMax\n                seenChars[s[j]] = True\n            else:\n                print(f\"Seen: {i},{j}\")\n                while i <= j:\n                    if s[i] == s[j]:\n                        i += 1                           \n                        break\n                    seenChars[s[i]] = False                \n                    i += 1     \n\n\n        return overallMax\n                    `"
                    },
                    {
                        "username": "Aggie123",
                        "content": "\n方法1:普通双指针 - 左右指针 初始位置 0 1\n 用set记录出现的字母，当右指针出现set里的字母，则左指针+1，右指针回到左指针+2\n\n方法2: 改进双指针 - 左右指针 初始位置 0 1\n关键改进点：用map记录出现的字母的最新的位置，再次出现的字母，如果该字母之前出现的位置大于左指针，则移动左指针到改字母之前位置的后边。\n\n方法1: 普通双层循环\n`var lengthOfLongestSubstring = function(s) {\n    let len=s.length;\n    if(len<=1) return len;\n\n    let maxLen=0;\n    for(let i=0;i<len;i++){\n        let temp=1;\n        let set=new Set();\n        set.add(s.charAt(i));\n        for(let j=i+1;j<len;j++){\n            if(!set.has(s.charAt(j))){\n                temp++;\n                set.add(s.charAt(j));\n            }else{\n                break;\n            }\n        }\n        maxLen=temp>maxLen?temp:maxLen;\n    }\n    return maxLen;\n};`\n\n方法2: 双指针 - 左右指针\n`var lengthOfLongestSubstring = function(s) {\n    let len=s.length;\n    if(len<=1) return len;\n\n    let maxLen=0, temp=0;\n    let map=new Map();\n    let l=0,r=0;\n    while(l<len&&r<len&&l<=r){\n        let item=s.charAt(r);\n        if(!map.has(item)){\n            temp++;\n        }else{\n            if(map.get(item)>=l){\n                l=map.get(item)+1;\n                maxLen=temp>maxLen?temp:maxLen;\n                temp=r-l+1;\n            }else{\n                temp++;\n            }\n        }\n        map.set(s.charAt(r),r);\n        r++;\n    }\n    maxLen=temp>maxLen?temp:maxLen;\n\n    return maxLen;\n};`"
                    },
                    {
                        "username": "NikhilMalhotraa",
                        "content": "Recursive ( Max testcases passed ), Stack overflow err though.\\n\\n `class Solution {\\n    int i = 0;\\n    public int lengthOfLongestSubstring(String s) {  \\n        String temp = \"\";      \\n        int ans = longestSubstring(s,s.length(),temp,0);\\n        return ans;\\n    }\\n\\n    public int longestSubstring(String str, int n,String temp,int count){\\n        if(n==0){            \\n            return count;\\n        }\\n        \\n        if(temp.contains(\"\"+str.charAt(n-1))==false){            \\n            count++;\\n           return longestSubstring(str,n-1,temp+str.charAt(n-1),count);\\n        }\\n        else{\\n            i++;\\n            return Math.max(count,longestSubstring(str,str.length()-i,\"\",0));\\n        }\\n        \\n    }\\n    \\n}`"
                    },
                    {
                        "username": "DamanKrMishra",
                        "content": "Use two pointer right and left.\\nUse a HashMap to store the frequency of every Character in the string if at any point the frequency of character exceeds 1, the  remove the character and increase the left pointer"
                    }
                ]
            },
            {
                "id": 1697138,
                "content": [
                    {
                        "username": "1_not_8",
                        "content": "This is my solution\\n```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        list_ = list()\\n\\n        for i in range(len(s)):\\n            count = 0\\n            for j in range(i+1, len(s)):\\n                count += 1\\n                if s[i] == s[j]:\\n                    list_.append(count)\\n                    break\\n\\n        return max(list_)\\n```\\nit is passing all the test cases, but when I try to submit I am getting an error like this, please help.\\n```\\nValueError: max() arg is an empty sequence\\n    return max(list_)\\nLine 13 in lengthOfLongestSubstring (Solution.py)\\n    ret = Solution().lengthOfLongestSubstring(param_1)\\nLine 33 in _driver (Solution.py)\\n    _driver()\\nLine 44 in <module> (Solution.py)\\n```"
                    },
                    {
                        "username": "jyzeeg",
                        "content": "it means there is case when list_ is complete empty, and nothing to return for max"
                    },
                    {
                        "username": "user1517f",
                        "content": "Unable to understand this \\nInput: s = \"pwwkew\"\\nOutput: 3\\nExplanation: The answer is \"wke\", with the length of 3.\\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring."
                    },
                    {
                        "username": "aknownymous",
                        "content": "I have solved the complete question in vs code, test case was \"abcabcbb\", in vs code I got the expected output (i.e. 3) , I don\\'t understand then why am I getting different output (i.e. 1) when I paste the code here and click on \"run\". "
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@aknownymous](/aknownymous) Change the testcase, and perform a dry run, then change another testcase, to see what\\'s happen?"
                    },
                    {
                        "username": "Mayank_Sardana",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) \\n    {\\n        if(s.length()==0)\\n        {\\n            return 0;\\n        }\\n        HashMap<Character , Integer> map = new HashMap<>();\\n        map.put(s.charAt(0) , 1);\\n        int k = 0; \\n        int maxl = 1;\\n         for(int i = 1;i<s.length();i++)\\n         {\\n              char ch = s.charAt(i);\\n              if(map.containsKey(ch)==false)\\n              {\\n                  map.put(ch , 1);\\n                  if(maxl<map.size())\\n                  {\\n                      maxl = map.size();\\n                  }\\n              }\\n              else\\n              {\\n                  if(maxl<map.size())\\n                  {\\n                      maxl = map.size();\\n                  }\\n                  while(true)\\n                {\\n                  if(s.charAt(k)!=ch)\\n                  {\\n                       map.remove(s.charAt(k));\\n                       k++;\\n                  }\\n                  else\\n                  {\\n                      k++;\\n                      break;\\n                  }\\n                }\\n              }\\n         }\\n         return maxl;\\n    }\\n}"
                    },
                    {
                        "username": "meetfarhanali",
                        "content": "Whats the problem in this code. Showing run time error\\n\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        count=int(0)\\n        fcount=int(0)\\n        for i in range(0,len(s)):\\n            for j in range(i+1,len(s)):\\n                if s[i]==s[j]:\\n                    count=j-i\\n                    break\\n            if count>fcount:\\n                fcount=count\\n        print(int(fcount))"
                    },
                    {
                        "username": "bhogalamansingh22",
                        "content": "Hey, One way to solve this problem is by using a hash map and sliding window technique, it will help you keep track of the character that has already appeared and at what index it has appeared so that you can move searching with the next window. \n\nHere's my solution it takes 14 ms time to execute in C++, for better understanding I suggest you copy it take it to your local IDE and run it with uncommenting the comments for a proper understanding of how its working, I guess that would help you understand the approach.\n\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string input) {\n        unordered_map<char,int> hash;\n        int i=0, count=0,maxlen=-100,start=0;\n        hash[input[0]] = 0;\n        if(input.size() == 0)\n            return 0;\n        for(i=1;i<input.size();i++)\n        {\n            // cout<<\"i is: \"<<i<<\" count is: \"<<count<<\" window String is: \";\n            // for(int j=start; j<=i;j++)\n            //     cout<<input[j];\n            // cout<<endl;\n            if(hash.find(input[i]) == hash.end())\n                hash[input[i]] = i;\n            else\n            {\n                count = i-start;\n                // cout<<\"\\tCount after Update: \"<<count<<endl;\n                if(count > maxlen)\n                    maxlen = count;\n                if(hash[input[i]] >= start)\n                    start = hash[input[i]]+1;\n                hash[input[i]] = i;\n            }\n        }\n        count = i - start;\n        if(count > maxlen)\n            maxlen = count;\n        return maxlen;\n    }\n};"
                    },
                    {
                        "username": "tsamawi",
                        "content": "Can I get some help on the Second Solution's runtime? I implemented a sliding window (I think) but didn't score that much higher on run time than the original brute force. Unless you guys are really kicking ass in runtimes and you're all 80% better than the LC solution...\n\n `\n\n\nfrom collections import defaultdict\n\n\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        if len(s) == 0:\n            return 0\n        seenChars = defaultdict(bool)\n\n        overallMax = 1\n        currMax = 0\n        i = j = 0\n        seenChars[s[j]] = True      \n        \n        while j < len(s) - 1:\n            j += 1\n            if not seenChars[s[j]]:\n                print(f\"Not seen: {i},{j}\")                \n                currMax = (j - i) + 1\n                if overallMax < currMax:\n                    overallMax = currMax\n                seenChars[s[j]] = True\n            else:\n                print(f\"Seen: {i},{j}\")\n                while i <= j:\n                    if s[i] == s[j]:\n                        i += 1                           \n                        break\n                    seenChars[s[i]] = False                \n                    i += 1     \n\n\n        return overallMax\n                    `"
                    },
                    {
                        "username": "Aggie123",
                        "content": "\n方法1:普通双指针 - 左右指针 初始位置 0 1\n 用set记录出现的字母，当右指针出现set里的字母，则左指针+1，右指针回到左指针+2\n\n方法2: 改进双指针 - 左右指针 初始位置 0 1\n关键改进点：用map记录出现的字母的最新的位置，再次出现的字母，如果该字母之前出现的位置大于左指针，则移动左指针到改字母之前位置的后边。\n\n方法1: 普通双层循环\n`var lengthOfLongestSubstring = function(s) {\n    let len=s.length;\n    if(len<=1) return len;\n\n    let maxLen=0;\n    for(let i=0;i<len;i++){\n        let temp=1;\n        let set=new Set();\n        set.add(s.charAt(i));\n        for(let j=i+1;j<len;j++){\n            if(!set.has(s.charAt(j))){\n                temp++;\n                set.add(s.charAt(j));\n            }else{\n                break;\n            }\n        }\n        maxLen=temp>maxLen?temp:maxLen;\n    }\n    return maxLen;\n};`\n\n方法2: 双指针 - 左右指针\n`var lengthOfLongestSubstring = function(s) {\n    let len=s.length;\n    if(len<=1) return len;\n\n    let maxLen=0, temp=0;\n    let map=new Map();\n    let l=0,r=0;\n    while(l<len&&r<len&&l<=r){\n        let item=s.charAt(r);\n        if(!map.has(item)){\n            temp++;\n        }else{\n            if(map.get(item)>=l){\n                l=map.get(item)+1;\n                maxLen=temp>maxLen?temp:maxLen;\n                temp=r-l+1;\n            }else{\n                temp++;\n            }\n        }\n        map.set(s.charAt(r),r);\n        r++;\n    }\n    maxLen=temp>maxLen?temp:maxLen;\n\n    return maxLen;\n};`"
                    },
                    {
                        "username": "NikhilMalhotraa",
                        "content": "Recursive ( Max testcases passed ), Stack overflow err though.\\n\\n `class Solution {\\n    int i = 0;\\n    public int lengthOfLongestSubstring(String s) {  \\n        String temp = \"\";      \\n        int ans = longestSubstring(s,s.length(),temp,0);\\n        return ans;\\n    }\\n\\n    public int longestSubstring(String str, int n,String temp,int count){\\n        if(n==0){            \\n            return count;\\n        }\\n        \\n        if(temp.contains(\"\"+str.charAt(n-1))==false){            \\n            count++;\\n           return longestSubstring(str,n-1,temp+str.charAt(n-1),count);\\n        }\\n        else{\\n            i++;\\n            return Math.max(count,longestSubstring(str,str.length()-i,\"\",0));\\n        }\\n        \\n    }\\n    \\n}`"
                    },
                    {
                        "username": "DamanKrMishra",
                        "content": "Use two pointer right and left.\\nUse a HashMap to store the frequency of every Character in the string if at any point the frequency of character exceeds 1, the  remove the character and increase the left pointer"
                    }
                ]
            },
            {
                "id": 1696395,
                "content": [
                    {
                        "username": "1_not_8",
                        "content": "This is my solution\\n```\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        list_ = list()\\n\\n        for i in range(len(s)):\\n            count = 0\\n            for j in range(i+1, len(s)):\\n                count += 1\\n                if s[i] == s[j]:\\n                    list_.append(count)\\n                    break\\n\\n        return max(list_)\\n```\\nit is passing all the test cases, but when I try to submit I am getting an error like this, please help.\\n```\\nValueError: max() arg is an empty sequence\\n    return max(list_)\\nLine 13 in lengthOfLongestSubstring (Solution.py)\\n    ret = Solution().lengthOfLongestSubstring(param_1)\\nLine 33 in _driver (Solution.py)\\n    _driver()\\nLine 44 in <module> (Solution.py)\\n```"
                    },
                    {
                        "username": "jyzeeg",
                        "content": "it means there is case when list_ is complete empty, and nothing to return for max"
                    },
                    {
                        "username": "user1517f",
                        "content": "Unable to understand this \\nInput: s = \"pwwkew\"\\nOutput: 3\\nExplanation: The answer is \"wke\", with the length of 3.\\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring."
                    },
                    {
                        "username": "aknownymous",
                        "content": "I have solved the complete question in vs code, test case was \"abcabcbb\", in vs code I got the expected output (i.e. 3) , I don\\'t understand then why am I getting different output (i.e. 1) when I paste the code here and click on \"run\". "
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@aknownymous](/aknownymous) Change the testcase, and perform a dry run, then change another testcase, to see what\\'s happen?"
                    },
                    {
                        "username": "Mayank_Sardana",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String s) \\n    {\\n        if(s.length()==0)\\n        {\\n            return 0;\\n        }\\n        HashMap<Character , Integer> map = new HashMap<>();\\n        map.put(s.charAt(0) , 1);\\n        int k = 0; \\n        int maxl = 1;\\n         for(int i = 1;i<s.length();i++)\\n         {\\n              char ch = s.charAt(i);\\n              if(map.containsKey(ch)==false)\\n              {\\n                  map.put(ch , 1);\\n                  if(maxl<map.size())\\n                  {\\n                      maxl = map.size();\\n                  }\\n              }\\n              else\\n              {\\n                  if(maxl<map.size())\\n                  {\\n                      maxl = map.size();\\n                  }\\n                  while(true)\\n                {\\n                  if(s.charAt(k)!=ch)\\n                  {\\n                       map.remove(s.charAt(k));\\n                       k++;\\n                  }\\n                  else\\n                  {\\n                      k++;\\n                      break;\\n                  }\\n                }\\n              }\\n         }\\n         return maxl;\\n    }\\n}"
                    },
                    {
                        "username": "meetfarhanali",
                        "content": "Whats the problem in this code. Showing run time error\\n\\nclass Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        count=int(0)\\n        fcount=int(0)\\n        for i in range(0,len(s)):\\n            for j in range(i+1,len(s)):\\n                if s[i]==s[j]:\\n                    count=j-i\\n                    break\\n            if count>fcount:\\n                fcount=count\\n        print(int(fcount))"
                    },
                    {
                        "username": "bhogalamansingh22",
                        "content": "Hey, One way to solve this problem is by using a hash map and sliding window technique, it will help you keep track of the character that has already appeared and at what index it has appeared so that you can move searching with the next window. \n\nHere's my solution it takes 14 ms time to execute in C++, for better understanding I suggest you copy it take it to your local IDE and run it with uncommenting the comments for a proper understanding of how its working, I guess that would help you understand the approach.\n\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string input) {\n        unordered_map<char,int> hash;\n        int i=0, count=0,maxlen=-100,start=0;\n        hash[input[0]] = 0;\n        if(input.size() == 0)\n            return 0;\n        for(i=1;i<input.size();i++)\n        {\n            // cout<<\"i is: \"<<i<<\" count is: \"<<count<<\" window String is: \";\n            // for(int j=start; j<=i;j++)\n            //     cout<<input[j];\n            // cout<<endl;\n            if(hash.find(input[i]) == hash.end())\n                hash[input[i]] = i;\n            else\n            {\n                count = i-start;\n                // cout<<\"\\tCount after Update: \"<<count<<endl;\n                if(count > maxlen)\n                    maxlen = count;\n                if(hash[input[i]] >= start)\n                    start = hash[input[i]]+1;\n                hash[input[i]] = i;\n            }\n        }\n        count = i - start;\n        if(count > maxlen)\n            maxlen = count;\n        return maxlen;\n    }\n};"
                    },
                    {
                        "username": "tsamawi",
                        "content": "Can I get some help on the Second Solution's runtime? I implemented a sliding window (I think) but didn't score that much higher on run time than the original brute force. Unless you guys are really kicking ass in runtimes and you're all 80% better than the LC solution...\n\n `\n\n\nfrom collections import defaultdict\n\n\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        if len(s) == 0:\n            return 0\n        seenChars = defaultdict(bool)\n\n        overallMax = 1\n        currMax = 0\n        i = j = 0\n        seenChars[s[j]] = True      \n        \n        while j < len(s) - 1:\n            j += 1\n            if not seenChars[s[j]]:\n                print(f\"Not seen: {i},{j}\")                \n                currMax = (j - i) + 1\n                if overallMax < currMax:\n                    overallMax = currMax\n                seenChars[s[j]] = True\n            else:\n                print(f\"Seen: {i},{j}\")\n                while i <= j:\n                    if s[i] == s[j]:\n                        i += 1                           \n                        break\n                    seenChars[s[i]] = False                \n                    i += 1     \n\n\n        return overallMax\n                    `"
                    },
                    {
                        "username": "Aggie123",
                        "content": "\n方法1:普通双指针 - 左右指针 初始位置 0 1\n 用set记录出现的字母，当右指针出现set里的字母，则左指针+1，右指针回到左指针+2\n\n方法2: 改进双指针 - 左右指针 初始位置 0 1\n关键改进点：用map记录出现的字母的最新的位置，再次出现的字母，如果该字母之前出现的位置大于左指针，则移动左指针到改字母之前位置的后边。\n\n方法1: 普通双层循环\n`var lengthOfLongestSubstring = function(s) {\n    let len=s.length;\n    if(len<=1) return len;\n\n    let maxLen=0;\n    for(let i=0;i<len;i++){\n        let temp=1;\n        let set=new Set();\n        set.add(s.charAt(i));\n        for(let j=i+1;j<len;j++){\n            if(!set.has(s.charAt(j))){\n                temp++;\n                set.add(s.charAt(j));\n            }else{\n                break;\n            }\n        }\n        maxLen=temp>maxLen?temp:maxLen;\n    }\n    return maxLen;\n};`\n\n方法2: 双指针 - 左右指针\n`var lengthOfLongestSubstring = function(s) {\n    let len=s.length;\n    if(len<=1) return len;\n\n    let maxLen=0, temp=0;\n    let map=new Map();\n    let l=0,r=0;\n    while(l<len&&r<len&&l<=r){\n        let item=s.charAt(r);\n        if(!map.has(item)){\n            temp++;\n        }else{\n            if(map.get(item)>=l){\n                l=map.get(item)+1;\n                maxLen=temp>maxLen?temp:maxLen;\n                temp=r-l+1;\n            }else{\n                temp++;\n            }\n        }\n        map.set(s.charAt(r),r);\n        r++;\n    }\n    maxLen=temp>maxLen?temp:maxLen;\n\n    return maxLen;\n};`"
                    },
                    {
                        "username": "NikhilMalhotraa",
                        "content": "Recursive ( Max testcases passed ), Stack overflow err though.\\n\\n `class Solution {\\n    int i = 0;\\n    public int lengthOfLongestSubstring(String s) {  \\n        String temp = \"\";      \\n        int ans = longestSubstring(s,s.length(),temp,0);\\n        return ans;\\n    }\\n\\n    public int longestSubstring(String str, int n,String temp,int count){\\n        if(n==0){            \\n            return count;\\n        }\\n        \\n        if(temp.contains(\"\"+str.charAt(n-1))==false){            \\n            count++;\\n           return longestSubstring(str,n-1,temp+str.charAt(n-1),count);\\n        }\\n        else{\\n            i++;\\n            return Math.max(count,longestSubstring(str,str.length()-i,\"\",0));\\n        }\\n        \\n    }\\n    \\n}`"
                    },
                    {
                        "username": "DamanKrMishra",
                        "content": "Use two pointer right and left.\\nUse a HashMap to store the frequency of every Character in the string if at any point the frequency of character exceeds 1, the  remove the character and increase the left pointer"
                    }
                ]
            },
            {
                "id": 1695684,
                "content": [
                    {
                        "username": "nylime",
                        "content": "The sliding window algorithm can be used to approach this problem, using two pointers to indicate the start and end of a window. If the character after the end of the window does not repeat any character that already exists in the window (can use a separate variable as an iterator), the end of the window can increase by one. If the character is a repeat, the start of the window can be adjusted to the point after the first instance of the repetitive character. The window can continue to be adjusted, according to the characters the window encounters, to keep track of and return the maximum length of a substring window with non-repetitive characters."
                    },
                    {
                        "username": "Dev_Johri",
                        "content": "set should be known to you else it will take 1week like to me even to understand what is going on in the problem\\uD83E\\uDD79\\uD83E\\uDD79\\uD83E\\uDD79. #happyCoding"
                    },
                    {
                        "username": "Tullazyy17",
                        "content": "I solved the problem number 3, i ran it, it passed the test, but when i submit it, it gives me an index out of range error.\nHere is the code:\nNevermind i just noticed the discussion rules, and i can't post my code apparently hahaha.\n\nHere is the error message: \nIndexError: list index out of range\n    return counter_of_length[-1]\nLine 16 in lengthOfLongestSubstring (Solution.py)\n    ret = Solution().lengthOfLongestSubstring(param_1)\nLine 35 in _driver (Solution.py)\n    _driver()\nLine 45 in <module> (Solution.py)"
                    },
                    {
                        "username": "fanhoman123",
                        "content": "This question is not easy. The final time test is critical.."
                    },
                    {
                        "username": "Zeeshan_Hasan_Khan",
                        "content": " class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        unordered_map<char,int> map;\n        int i=0;\n        int max_len=INT_MIN;\n        for(int j=0;j<s.length();j++)\n        {\n            if(map.find(s[j])==map.end())\n            {\n                map[s[j]]++;\n                max_len=max(max_len,j-i+1);\n            }\n            else\n            {\n                while(map[s[j]])\n                {\n                    map[s[i]]--;\n                    i++;\n                }\n                map[s[j]]++;\n            }\n        }\n        return max_len==INT_MIN?0:max_len;\n    }\n};\nCan Someone tell where the code goes wrong?\nIt passes 670 test case "
                    },
                    {
                        "username": "Nadhir_Hasan",
                        "content": "``class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        if len(s) <= 1:\\n            return len(s)\\n\\n        out = \"\"\\n        while True:\\n            result = \"\"\\n            re_do = False\\n            for i in range(len(s)):\\n                if s[i] not in result:\\n                    result += s[i]\\n                    \\n                else:\\n                    re_do = True\\n                    if len(result) > len(out):\\n                        out = result\\n                    first_c_idx = s.find(s[i])\\n                    s = s[first_c_idx+1:]\\n                    break\\n                        \\n            if not re_do:\\n                break\\n\\n        if len(result) > len(out):\\n            out = result\\n        return len(out)``\\n            \\n\\nCan anyone tell me what is the time complexity of this code?\\n"
                    },
                    {
                        "username": "jirayaboy05",
                        "content": "can anyone tell me brute force approach"
                    },
                    {
                        "username": "pritideo",
                        "content": "error: non-void function does not return a value in all control paths [-Werror,-Wreturn-type]\\n    }\\n    ^\\n1 error generated.\\nwhat does this error mean?"
                    },
                    {
                        "username": "Krishna_786933",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string str) {\\n        \\n           int m = str.length(), ans = 0,n = 0;\\n    unordered_set<int> st;\\n    for (int i = 0; i < m; i++)\\n    {\\n        if (st.find(str[i]) == st.end())\\n        {\\n            st.insert(str[i]);\\n            int a = st.size();\\n            ans = max(ans, a);\\n        }\\n        else\\n        {\\n            while (st.find(str[i]) != st.end())\\n            {\\n                st.erase(str[n]);\\n                n++;\\n            }\\n            \\n            st.insert(str[i]);\\n        }\\n    }\\n    return ans;\\n        }\\n     \\n};"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Python Java C++ and C Programming.\\n[https://www.gyangav.com/2022/11/leetcode-longest-substring-without-repeating-characters-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-longest-substring-without-repeating-characters-problem-solution.html)"
                    }
                ]
            },
            {
                "id": 1691036,
                "content": [
                    {
                        "username": "nylime",
                        "content": "The sliding window algorithm can be used to approach this problem, using two pointers to indicate the start and end of a window. If the character after the end of the window does not repeat any character that already exists in the window (can use a separate variable as an iterator), the end of the window can increase by one. If the character is a repeat, the start of the window can be adjusted to the point after the first instance of the repetitive character. The window can continue to be adjusted, according to the characters the window encounters, to keep track of and return the maximum length of a substring window with non-repetitive characters."
                    },
                    {
                        "username": "Dev_Johri",
                        "content": "set should be known to you else it will take 1week like to me even to understand what is going on in the problem\\uD83E\\uDD79\\uD83E\\uDD79\\uD83E\\uDD79. #happyCoding"
                    },
                    {
                        "username": "Tullazyy17",
                        "content": "I solved the problem number 3, i ran it, it passed the test, but when i submit it, it gives me an index out of range error.\nHere is the code:\nNevermind i just noticed the discussion rules, and i can't post my code apparently hahaha.\n\nHere is the error message: \nIndexError: list index out of range\n    return counter_of_length[-1]\nLine 16 in lengthOfLongestSubstring (Solution.py)\n    ret = Solution().lengthOfLongestSubstring(param_1)\nLine 35 in _driver (Solution.py)\n    _driver()\nLine 45 in <module> (Solution.py)"
                    },
                    {
                        "username": "fanhoman123",
                        "content": "This question is not easy. The final time test is critical.."
                    },
                    {
                        "username": "Zeeshan_Hasan_Khan",
                        "content": " class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        unordered_map<char,int> map;\n        int i=0;\n        int max_len=INT_MIN;\n        for(int j=0;j<s.length();j++)\n        {\n            if(map.find(s[j])==map.end())\n            {\n                map[s[j]]++;\n                max_len=max(max_len,j-i+1);\n            }\n            else\n            {\n                while(map[s[j]])\n                {\n                    map[s[i]]--;\n                    i++;\n                }\n                map[s[j]]++;\n            }\n        }\n        return max_len==INT_MIN?0:max_len;\n    }\n};\nCan Someone tell where the code goes wrong?\nIt passes 670 test case "
                    },
                    {
                        "username": "Nadhir_Hasan",
                        "content": "``class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        if len(s) <= 1:\\n            return len(s)\\n\\n        out = \"\"\\n        while True:\\n            result = \"\"\\n            re_do = False\\n            for i in range(len(s)):\\n                if s[i] not in result:\\n                    result += s[i]\\n                    \\n                else:\\n                    re_do = True\\n                    if len(result) > len(out):\\n                        out = result\\n                    first_c_idx = s.find(s[i])\\n                    s = s[first_c_idx+1:]\\n                    break\\n                        \\n            if not re_do:\\n                break\\n\\n        if len(result) > len(out):\\n            out = result\\n        return len(out)``\\n            \\n\\nCan anyone tell me what is the time complexity of this code?\\n"
                    },
                    {
                        "username": "jirayaboy05",
                        "content": "can anyone tell me brute force approach"
                    },
                    {
                        "username": "pritideo",
                        "content": "error: non-void function does not return a value in all control paths [-Werror,-Wreturn-type]\\n    }\\n    ^\\n1 error generated.\\nwhat does this error mean?"
                    },
                    {
                        "username": "Krishna_786933",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string str) {\\n        \\n           int m = str.length(), ans = 0,n = 0;\\n    unordered_set<int> st;\\n    for (int i = 0; i < m; i++)\\n    {\\n        if (st.find(str[i]) == st.end())\\n        {\\n            st.insert(str[i]);\\n            int a = st.size();\\n            ans = max(ans, a);\\n        }\\n        else\\n        {\\n            while (st.find(str[i]) != st.end())\\n            {\\n                st.erase(str[n]);\\n                n++;\\n            }\\n            \\n            st.insert(str[i]);\\n        }\\n    }\\n    return ans;\\n        }\\n     \\n};"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Python Java C++ and C Programming.\\n[https://www.gyangav.com/2022/11/leetcode-longest-substring-without-repeating-characters-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-longest-substring-without-repeating-characters-problem-solution.html)"
                    }
                ]
            },
            {
                "id": 1690690,
                "content": [
                    {
                        "username": "nylime",
                        "content": "The sliding window algorithm can be used to approach this problem, using two pointers to indicate the start and end of a window. If the character after the end of the window does not repeat any character that already exists in the window (can use a separate variable as an iterator), the end of the window can increase by one. If the character is a repeat, the start of the window can be adjusted to the point after the first instance of the repetitive character. The window can continue to be adjusted, according to the characters the window encounters, to keep track of and return the maximum length of a substring window with non-repetitive characters."
                    },
                    {
                        "username": "Dev_Johri",
                        "content": "set should be known to you else it will take 1week like to me even to understand what is going on in the problem\\uD83E\\uDD79\\uD83E\\uDD79\\uD83E\\uDD79. #happyCoding"
                    },
                    {
                        "username": "Tullazyy17",
                        "content": "I solved the problem number 3, i ran it, it passed the test, but when i submit it, it gives me an index out of range error.\nHere is the code:\nNevermind i just noticed the discussion rules, and i can't post my code apparently hahaha.\n\nHere is the error message: \nIndexError: list index out of range\n    return counter_of_length[-1]\nLine 16 in lengthOfLongestSubstring (Solution.py)\n    ret = Solution().lengthOfLongestSubstring(param_1)\nLine 35 in _driver (Solution.py)\n    _driver()\nLine 45 in <module> (Solution.py)"
                    },
                    {
                        "username": "fanhoman123",
                        "content": "This question is not easy. The final time test is critical.."
                    },
                    {
                        "username": "Zeeshan_Hasan_Khan",
                        "content": " class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        unordered_map<char,int> map;\n        int i=0;\n        int max_len=INT_MIN;\n        for(int j=0;j<s.length();j++)\n        {\n            if(map.find(s[j])==map.end())\n            {\n                map[s[j]]++;\n                max_len=max(max_len,j-i+1);\n            }\n            else\n            {\n                while(map[s[j]])\n                {\n                    map[s[i]]--;\n                    i++;\n                }\n                map[s[j]]++;\n            }\n        }\n        return max_len==INT_MIN?0:max_len;\n    }\n};\nCan Someone tell where the code goes wrong?\nIt passes 670 test case "
                    },
                    {
                        "username": "Nadhir_Hasan",
                        "content": "``class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        if len(s) <= 1:\\n            return len(s)\\n\\n        out = \"\"\\n        while True:\\n            result = \"\"\\n            re_do = False\\n            for i in range(len(s)):\\n                if s[i] not in result:\\n                    result += s[i]\\n                    \\n                else:\\n                    re_do = True\\n                    if len(result) > len(out):\\n                        out = result\\n                    first_c_idx = s.find(s[i])\\n                    s = s[first_c_idx+1:]\\n                    break\\n                        \\n            if not re_do:\\n                break\\n\\n        if len(result) > len(out):\\n            out = result\\n        return len(out)``\\n            \\n\\nCan anyone tell me what is the time complexity of this code?\\n"
                    },
                    {
                        "username": "jirayaboy05",
                        "content": "can anyone tell me brute force approach"
                    },
                    {
                        "username": "pritideo",
                        "content": "error: non-void function does not return a value in all control paths [-Werror,-Wreturn-type]\\n    }\\n    ^\\n1 error generated.\\nwhat does this error mean?"
                    },
                    {
                        "username": "Krishna_786933",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string str) {\\n        \\n           int m = str.length(), ans = 0,n = 0;\\n    unordered_set<int> st;\\n    for (int i = 0; i < m; i++)\\n    {\\n        if (st.find(str[i]) == st.end())\\n        {\\n            st.insert(str[i]);\\n            int a = st.size();\\n            ans = max(ans, a);\\n        }\\n        else\\n        {\\n            while (st.find(str[i]) != st.end())\\n            {\\n                st.erase(str[n]);\\n                n++;\\n            }\\n            \\n            st.insert(str[i]);\\n        }\\n    }\\n    return ans;\\n        }\\n     \\n};"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Python Java C++ and C Programming.\\n[https://www.gyangav.com/2022/11/leetcode-longest-substring-without-repeating-characters-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-longest-substring-without-repeating-characters-problem-solution.html)"
                    }
                ]
            },
            {
                "id": 1686031,
                "content": [
                    {
                        "username": "nylime",
                        "content": "The sliding window algorithm can be used to approach this problem, using two pointers to indicate the start and end of a window. If the character after the end of the window does not repeat any character that already exists in the window (can use a separate variable as an iterator), the end of the window can increase by one. If the character is a repeat, the start of the window can be adjusted to the point after the first instance of the repetitive character. The window can continue to be adjusted, according to the characters the window encounters, to keep track of and return the maximum length of a substring window with non-repetitive characters."
                    },
                    {
                        "username": "Dev_Johri",
                        "content": "set should be known to you else it will take 1week like to me even to understand what is going on in the problem\\uD83E\\uDD79\\uD83E\\uDD79\\uD83E\\uDD79. #happyCoding"
                    },
                    {
                        "username": "Tullazyy17",
                        "content": "I solved the problem number 3, i ran it, it passed the test, but when i submit it, it gives me an index out of range error.\nHere is the code:\nNevermind i just noticed the discussion rules, and i can't post my code apparently hahaha.\n\nHere is the error message: \nIndexError: list index out of range\n    return counter_of_length[-1]\nLine 16 in lengthOfLongestSubstring (Solution.py)\n    ret = Solution().lengthOfLongestSubstring(param_1)\nLine 35 in _driver (Solution.py)\n    _driver()\nLine 45 in <module> (Solution.py)"
                    },
                    {
                        "username": "fanhoman123",
                        "content": "This question is not easy. The final time test is critical.."
                    },
                    {
                        "username": "Zeeshan_Hasan_Khan",
                        "content": " class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        unordered_map<char,int> map;\n        int i=0;\n        int max_len=INT_MIN;\n        for(int j=0;j<s.length();j++)\n        {\n            if(map.find(s[j])==map.end())\n            {\n                map[s[j]]++;\n                max_len=max(max_len,j-i+1);\n            }\n            else\n            {\n                while(map[s[j]])\n                {\n                    map[s[i]]--;\n                    i++;\n                }\n                map[s[j]]++;\n            }\n        }\n        return max_len==INT_MIN?0:max_len;\n    }\n};\nCan Someone tell where the code goes wrong?\nIt passes 670 test case "
                    },
                    {
                        "username": "Nadhir_Hasan",
                        "content": "``class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        if len(s) <= 1:\\n            return len(s)\\n\\n        out = \"\"\\n        while True:\\n            result = \"\"\\n            re_do = False\\n            for i in range(len(s)):\\n                if s[i] not in result:\\n                    result += s[i]\\n                    \\n                else:\\n                    re_do = True\\n                    if len(result) > len(out):\\n                        out = result\\n                    first_c_idx = s.find(s[i])\\n                    s = s[first_c_idx+1:]\\n                    break\\n                        \\n            if not re_do:\\n                break\\n\\n        if len(result) > len(out):\\n            out = result\\n        return len(out)``\\n            \\n\\nCan anyone tell me what is the time complexity of this code?\\n"
                    },
                    {
                        "username": "jirayaboy05",
                        "content": "can anyone tell me brute force approach"
                    },
                    {
                        "username": "pritideo",
                        "content": "error: non-void function does not return a value in all control paths [-Werror,-Wreturn-type]\\n    }\\n    ^\\n1 error generated.\\nwhat does this error mean?"
                    },
                    {
                        "username": "Krishna_786933",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string str) {\\n        \\n           int m = str.length(), ans = 0,n = 0;\\n    unordered_set<int> st;\\n    for (int i = 0; i < m; i++)\\n    {\\n        if (st.find(str[i]) == st.end())\\n        {\\n            st.insert(str[i]);\\n            int a = st.size();\\n            ans = max(ans, a);\\n        }\\n        else\\n        {\\n            while (st.find(str[i]) != st.end())\\n            {\\n                st.erase(str[n]);\\n                n++;\\n            }\\n            \\n            st.insert(str[i]);\\n        }\\n    }\\n    return ans;\\n        }\\n     \\n};"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Python Java C++ and C Programming.\\n[https://www.gyangav.com/2022/11/leetcode-longest-substring-without-repeating-characters-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-longest-substring-without-repeating-characters-problem-solution.html)"
                    }
                ]
            },
            {
                "id": 1685107,
                "content": [
                    {
                        "username": "nylime",
                        "content": "The sliding window algorithm can be used to approach this problem, using two pointers to indicate the start and end of a window. If the character after the end of the window does not repeat any character that already exists in the window (can use a separate variable as an iterator), the end of the window can increase by one. If the character is a repeat, the start of the window can be adjusted to the point after the first instance of the repetitive character. The window can continue to be adjusted, according to the characters the window encounters, to keep track of and return the maximum length of a substring window with non-repetitive characters."
                    },
                    {
                        "username": "Dev_Johri",
                        "content": "set should be known to you else it will take 1week like to me even to understand what is going on in the problem\\uD83E\\uDD79\\uD83E\\uDD79\\uD83E\\uDD79. #happyCoding"
                    },
                    {
                        "username": "Tullazyy17",
                        "content": "I solved the problem number 3, i ran it, it passed the test, but when i submit it, it gives me an index out of range error.\nHere is the code:\nNevermind i just noticed the discussion rules, and i can't post my code apparently hahaha.\n\nHere is the error message: \nIndexError: list index out of range\n    return counter_of_length[-1]\nLine 16 in lengthOfLongestSubstring (Solution.py)\n    ret = Solution().lengthOfLongestSubstring(param_1)\nLine 35 in _driver (Solution.py)\n    _driver()\nLine 45 in <module> (Solution.py)"
                    },
                    {
                        "username": "fanhoman123",
                        "content": "This question is not easy. The final time test is critical.."
                    },
                    {
                        "username": "Zeeshan_Hasan_Khan",
                        "content": " class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        unordered_map<char,int> map;\n        int i=0;\n        int max_len=INT_MIN;\n        for(int j=0;j<s.length();j++)\n        {\n            if(map.find(s[j])==map.end())\n            {\n                map[s[j]]++;\n                max_len=max(max_len,j-i+1);\n            }\n            else\n            {\n                while(map[s[j]])\n                {\n                    map[s[i]]--;\n                    i++;\n                }\n                map[s[j]]++;\n            }\n        }\n        return max_len==INT_MIN?0:max_len;\n    }\n};\nCan Someone tell where the code goes wrong?\nIt passes 670 test case "
                    },
                    {
                        "username": "Nadhir_Hasan",
                        "content": "``class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        if len(s) <= 1:\\n            return len(s)\\n\\n        out = \"\"\\n        while True:\\n            result = \"\"\\n            re_do = False\\n            for i in range(len(s)):\\n                if s[i] not in result:\\n                    result += s[i]\\n                    \\n                else:\\n                    re_do = True\\n                    if len(result) > len(out):\\n                        out = result\\n                    first_c_idx = s.find(s[i])\\n                    s = s[first_c_idx+1:]\\n                    break\\n                        \\n            if not re_do:\\n                break\\n\\n        if len(result) > len(out):\\n            out = result\\n        return len(out)``\\n            \\n\\nCan anyone tell me what is the time complexity of this code?\\n"
                    },
                    {
                        "username": "jirayaboy05",
                        "content": "can anyone tell me brute force approach"
                    },
                    {
                        "username": "pritideo",
                        "content": "error: non-void function does not return a value in all control paths [-Werror,-Wreturn-type]\\n    }\\n    ^\\n1 error generated.\\nwhat does this error mean?"
                    },
                    {
                        "username": "Krishna_786933",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string str) {\\n        \\n           int m = str.length(), ans = 0,n = 0;\\n    unordered_set<int> st;\\n    for (int i = 0; i < m; i++)\\n    {\\n        if (st.find(str[i]) == st.end())\\n        {\\n            st.insert(str[i]);\\n            int a = st.size();\\n            ans = max(ans, a);\\n        }\\n        else\\n        {\\n            while (st.find(str[i]) != st.end())\\n            {\\n                st.erase(str[n]);\\n                n++;\\n            }\\n            \\n            st.insert(str[i]);\\n        }\\n    }\\n    return ans;\\n        }\\n     \\n};"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Python Java C++ and C Programming.\\n[https://www.gyangav.com/2022/11/leetcode-longest-substring-without-repeating-characters-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-longest-substring-without-repeating-characters-problem-solution.html)"
                    }
                ]
            },
            {
                "id": 1683572,
                "content": [
                    {
                        "username": "nylime",
                        "content": "The sliding window algorithm can be used to approach this problem, using two pointers to indicate the start and end of a window. If the character after the end of the window does not repeat any character that already exists in the window (can use a separate variable as an iterator), the end of the window can increase by one. If the character is a repeat, the start of the window can be adjusted to the point after the first instance of the repetitive character. The window can continue to be adjusted, according to the characters the window encounters, to keep track of and return the maximum length of a substring window with non-repetitive characters."
                    },
                    {
                        "username": "Dev_Johri",
                        "content": "set should be known to you else it will take 1week like to me even to understand what is going on in the problem\\uD83E\\uDD79\\uD83E\\uDD79\\uD83E\\uDD79. #happyCoding"
                    },
                    {
                        "username": "Tullazyy17",
                        "content": "I solved the problem number 3, i ran it, it passed the test, but when i submit it, it gives me an index out of range error.\nHere is the code:\nNevermind i just noticed the discussion rules, and i can't post my code apparently hahaha.\n\nHere is the error message: \nIndexError: list index out of range\n    return counter_of_length[-1]\nLine 16 in lengthOfLongestSubstring (Solution.py)\n    ret = Solution().lengthOfLongestSubstring(param_1)\nLine 35 in _driver (Solution.py)\n    _driver()\nLine 45 in <module> (Solution.py)"
                    },
                    {
                        "username": "fanhoman123",
                        "content": "This question is not easy. The final time test is critical.."
                    },
                    {
                        "username": "Zeeshan_Hasan_Khan",
                        "content": " class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        unordered_map<char,int> map;\n        int i=0;\n        int max_len=INT_MIN;\n        for(int j=0;j<s.length();j++)\n        {\n            if(map.find(s[j])==map.end())\n            {\n                map[s[j]]++;\n                max_len=max(max_len,j-i+1);\n            }\n            else\n            {\n                while(map[s[j]])\n                {\n                    map[s[i]]--;\n                    i++;\n                }\n                map[s[j]]++;\n            }\n        }\n        return max_len==INT_MIN?0:max_len;\n    }\n};\nCan Someone tell where the code goes wrong?\nIt passes 670 test case "
                    },
                    {
                        "username": "Nadhir_Hasan",
                        "content": "``class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        if len(s) <= 1:\\n            return len(s)\\n\\n        out = \"\"\\n        while True:\\n            result = \"\"\\n            re_do = False\\n            for i in range(len(s)):\\n                if s[i] not in result:\\n                    result += s[i]\\n                    \\n                else:\\n                    re_do = True\\n                    if len(result) > len(out):\\n                        out = result\\n                    first_c_idx = s.find(s[i])\\n                    s = s[first_c_idx+1:]\\n                    break\\n                        \\n            if not re_do:\\n                break\\n\\n        if len(result) > len(out):\\n            out = result\\n        return len(out)``\\n            \\n\\nCan anyone tell me what is the time complexity of this code?\\n"
                    },
                    {
                        "username": "jirayaboy05",
                        "content": "can anyone tell me brute force approach"
                    },
                    {
                        "username": "pritideo",
                        "content": "error: non-void function does not return a value in all control paths [-Werror,-Wreturn-type]\\n    }\\n    ^\\n1 error generated.\\nwhat does this error mean?"
                    },
                    {
                        "username": "Krishna_786933",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string str) {\\n        \\n           int m = str.length(), ans = 0,n = 0;\\n    unordered_set<int> st;\\n    for (int i = 0; i < m; i++)\\n    {\\n        if (st.find(str[i]) == st.end())\\n        {\\n            st.insert(str[i]);\\n            int a = st.size();\\n            ans = max(ans, a);\\n        }\\n        else\\n        {\\n            while (st.find(str[i]) != st.end())\\n            {\\n                st.erase(str[n]);\\n                n++;\\n            }\\n            \\n            st.insert(str[i]);\\n        }\\n    }\\n    return ans;\\n        }\\n     \\n};"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Python Java C++ and C Programming.\\n[https://www.gyangav.com/2022/11/leetcode-longest-substring-without-repeating-characters-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-longest-substring-without-repeating-characters-problem-solution.html)"
                    }
                ]
            },
            {
                "id": 1679549,
                "content": [
                    {
                        "username": "nylime",
                        "content": "The sliding window algorithm can be used to approach this problem, using two pointers to indicate the start and end of a window. If the character after the end of the window does not repeat any character that already exists in the window (can use a separate variable as an iterator), the end of the window can increase by one. If the character is a repeat, the start of the window can be adjusted to the point after the first instance of the repetitive character. The window can continue to be adjusted, according to the characters the window encounters, to keep track of and return the maximum length of a substring window with non-repetitive characters."
                    },
                    {
                        "username": "Dev_Johri",
                        "content": "set should be known to you else it will take 1week like to me even to understand what is going on in the problem\\uD83E\\uDD79\\uD83E\\uDD79\\uD83E\\uDD79. #happyCoding"
                    },
                    {
                        "username": "Tullazyy17",
                        "content": "I solved the problem number 3, i ran it, it passed the test, but when i submit it, it gives me an index out of range error.\nHere is the code:\nNevermind i just noticed the discussion rules, and i can't post my code apparently hahaha.\n\nHere is the error message: \nIndexError: list index out of range\n    return counter_of_length[-1]\nLine 16 in lengthOfLongestSubstring (Solution.py)\n    ret = Solution().lengthOfLongestSubstring(param_1)\nLine 35 in _driver (Solution.py)\n    _driver()\nLine 45 in <module> (Solution.py)"
                    },
                    {
                        "username": "fanhoman123",
                        "content": "This question is not easy. The final time test is critical.."
                    },
                    {
                        "username": "Zeeshan_Hasan_Khan",
                        "content": " class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        unordered_map<char,int> map;\n        int i=0;\n        int max_len=INT_MIN;\n        for(int j=0;j<s.length();j++)\n        {\n            if(map.find(s[j])==map.end())\n            {\n                map[s[j]]++;\n                max_len=max(max_len,j-i+1);\n            }\n            else\n            {\n                while(map[s[j]])\n                {\n                    map[s[i]]--;\n                    i++;\n                }\n                map[s[j]]++;\n            }\n        }\n        return max_len==INT_MIN?0:max_len;\n    }\n};\nCan Someone tell where the code goes wrong?\nIt passes 670 test case "
                    },
                    {
                        "username": "Nadhir_Hasan",
                        "content": "``class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        if len(s) <= 1:\\n            return len(s)\\n\\n        out = \"\"\\n        while True:\\n            result = \"\"\\n            re_do = False\\n            for i in range(len(s)):\\n                if s[i] not in result:\\n                    result += s[i]\\n                    \\n                else:\\n                    re_do = True\\n                    if len(result) > len(out):\\n                        out = result\\n                    first_c_idx = s.find(s[i])\\n                    s = s[first_c_idx+1:]\\n                    break\\n                        \\n            if not re_do:\\n                break\\n\\n        if len(result) > len(out):\\n            out = result\\n        return len(out)``\\n            \\n\\nCan anyone tell me what is the time complexity of this code?\\n"
                    },
                    {
                        "username": "jirayaboy05",
                        "content": "can anyone tell me brute force approach"
                    },
                    {
                        "username": "pritideo",
                        "content": "error: non-void function does not return a value in all control paths [-Werror,-Wreturn-type]\\n    }\\n    ^\\n1 error generated.\\nwhat does this error mean?"
                    },
                    {
                        "username": "Krishna_786933",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string str) {\\n        \\n           int m = str.length(), ans = 0,n = 0;\\n    unordered_set<int> st;\\n    for (int i = 0; i < m; i++)\\n    {\\n        if (st.find(str[i]) == st.end())\\n        {\\n            st.insert(str[i]);\\n            int a = st.size();\\n            ans = max(ans, a);\\n        }\\n        else\\n        {\\n            while (st.find(str[i]) != st.end())\\n            {\\n                st.erase(str[n]);\\n                n++;\\n            }\\n            \\n            st.insert(str[i]);\\n        }\\n    }\\n    return ans;\\n        }\\n     \\n};"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Python Java C++ and C Programming.\\n[https://www.gyangav.com/2022/11/leetcode-longest-substring-without-repeating-characters-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-longest-substring-without-repeating-characters-problem-solution.html)"
                    }
                ]
            },
            {
                "id": 1677734,
                "content": [
                    {
                        "username": "nylime",
                        "content": "The sliding window algorithm can be used to approach this problem, using two pointers to indicate the start and end of a window. If the character after the end of the window does not repeat any character that already exists in the window (can use a separate variable as an iterator), the end of the window can increase by one. If the character is a repeat, the start of the window can be adjusted to the point after the first instance of the repetitive character. The window can continue to be adjusted, according to the characters the window encounters, to keep track of and return the maximum length of a substring window with non-repetitive characters."
                    },
                    {
                        "username": "Dev_Johri",
                        "content": "set should be known to you else it will take 1week like to me even to understand what is going on in the problem\\uD83E\\uDD79\\uD83E\\uDD79\\uD83E\\uDD79. #happyCoding"
                    },
                    {
                        "username": "Tullazyy17",
                        "content": "I solved the problem number 3, i ran it, it passed the test, but when i submit it, it gives me an index out of range error.\nHere is the code:\nNevermind i just noticed the discussion rules, and i can't post my code apparently hahaha.\n\nHere is the error message: \nIndexError: list index out of range\n    return counter_of_length[-1]\nLine 16 in lengthOfLongestSubstring (Solution.py)\n    ret = Solution().lengthOfLongestSubstring(param_1)\nLine 35 in _driver (Solution.py)\n    _driver()\nLine 45 in <module> (Solution.py)"
                    },
                    {
                        "username": "fanhoman123",
                        "content": "This question is not easy. The final time test is critical.."
                    },
                    {
                        "username": "Zeeshan_Hasan_Khan",
                        "content": " class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        unordered_map<char,int> map;\n        int i=0;\n        int max_len=INT_MIN;\n        for(int j=0;j<s.length();j++)\n        {\n            if(map.find(s[j])==map.end())\n            {\n                map[s[j]]++;\n                max_len=max(max_len,j-i+1);\n            }\n            else\n            {\n                while(map[s[j]])\n                {\n                    map[s[i]]--;\n                    i++;\n                }\n                map[s[j]]++;\n            }\n        }\n        return max_len==INT_MIN?0:max_len;\n    }\n};\nCan Someone tell where the code goes wrong?\nIt passes 670 test case "
                    },
                    {
                        "username": "Nadhir_Hasan",
                        "content": "``class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        if len(s) <= 1:\\n            return len(s)\\n\\n        out = \"\"\\n        while True:\\n            result = \"\"\\n            re_do = False\\n            for i in range(len(s)):\\n                if s[i] not in result:\\n                    result += s[i]\\n                    \\n                else:\\n                    re_do = True\\n                    if len(result) > len(out):\\n                        out = result\\n                    first_c_idx = s.find(s[i])\\n                    s = s[first_c_idx+1:]\\n                    break\\n                        \\n            if not re_do:\\n                break\\n\\n        if len(result) > len(out):\\n            out = result\\n        return len(out)``\\n            \\n\\nCan anyone tell me what is the time complexity of this code?\\n"
                    },
                    {
                        "username": "jirayaboy05",
                        "content": "can anyone tell me brute force approach"
                    },
                    {
                        "username": "pritideo",
                        "content": "error: non-void function does not return a value in all control paths [-Werror,-Wreturn-type]\\n    }\\n    ^\\n1 error generated.\\nwhat does this error mean?"
                    },
                    {
                        "username": "Krishna_786933",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string str) {\\n        \\n           int m = str.length(), ans = 0,n = 0;\\n    unordered_set<int> st;\\n    for (int i = 0; i < m; i++)\\n    {\\n        if (st.find(str[i]) == st.end())\\n        {\\n            st.insert(str[i]);\\n            int a = st.size();\\n            ans = max(ans, a);\\n        }\\n        else\\n        {\\n            while (st.find(str[i]) != st.end())\\n            {\\n                st.erase(str[n]);\\n                n++;\\n            }\\n            \\n            st.insert(str[i]);\\n        }\\n    }\\n    return ans;\\n        }\\n     \\n};"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Python Java C++ and C Programming.\\n[https://www.gyangav.com/2022/11/leetcode-longest-substring-without-repeating-characters-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-longest-substring-without-repeating-characters-problem-solution.html)"
                    }
                ]
            },
            {
                "id": 1677669,
                "content": [
                    {
                        "username": "nylime",
                        "content": "The sliding window algorithm can be used to approach this problem, using two pointers to indicate the start and end of a window. If the character after the end of the window does not repeat any character that already exists in the window (can use a separate variable as an iterator), the end of the window can increase by one. If the character is a repeat, the start of the window can be adjusted to the point after the first instance of the repetitive character. The window can continue to be adjusted, according to the characters the window encounters, to keep track of and return the maximum length of a substring window with non-repetitive characters."
                    },
                    {
                        "username": "Dev_Johri",
                        "content": "set should be known to you else it will take 1week like to me even to understand what is going on in the problem\\uD83E\\uDD79\\uD83E\\uDD79\\uD83E\\uDD79. #happyCoding"
                    },
                    {
                        "username": "Tullazyy17",
                        "content": "I solved the problem number 3, i ran it, it passed the test, but when i submit it, it gives me an index out of range error.\nHere is the code:\nNevermind i just noticed the discussion rules, and i can't post my code apparently hahaha.\n\nHere is the error message: \nIndexError: list index out of range\n    return counter_of_length[-1]\nLine 16 in lengthOfLongestSubstring (Solution.py)\n    ret = Solution().lengthOfLongestSubstring(param_1)\nLine 35 in _driver (Solution.py)\n    _driver()\nLine 45 in <module> (Solution.py)"
                    },
                    {
                        "username": "fanhoman123",
                        "content": "This question is not easy. The final time test is critical.."
                    },
                    {
                        "username": "Zeeshan_Hasan_Khan",
                        "content": " class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        unordered_map<char,int> map;\n        int i=0;\n        int max_len=INT_MIN;\n        for(int j=0;j<s.length();j++)\n        {\n            if(map.find(s[j])==map.end())\n            {\n                map[s[j]]++;\n                max_len=max(max_len,j-i+1);\n            }\n            else\n            {\n                while(map[s[j]])\n                {\n                    map[s[i]]--;\n                    i++;\n                }\n                map[s[j]]++;\n            }\n        }\n        return max_len==INT_MIN?0:max_len;\n    }\n};\nCan Someone tell where the code goes wrong?\nIt passes 670 test case "
                    },
                    {
                        "username": "Nadhir_Hasan",
                        "content": "``class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        if len(s) <= 1:\\n            return len(s)\\n\\n        out = \"\"\\n        while True:\\n            result = \"\"\\n            re_do = False\\n            for i in range(len(s)):\\n                if s[i] not in result:\\n                    result += s[i]\\n                    \\n                else:\\n                    re_do = True\\n                    if len(result) > len(out):\\n                        out = result\\n                    first_c_idx = s.find(s[i])\\n                    s = s[first_c_idx+1:]\\n                    break\\n                        \\n            if not re_do:\\n                break\\n\\n        if len(result) > len(out):\\n            out = result\\n        return len(out)``\\n            \\n\\nCan anyone tell me what is the time complexity of this code?\\n"
                    },
                    {
                        "username": "jirayaboy05",
                        "content": "can anyone tell me brute force approach"
                    },
                    {
                        "username": "pritideo",
                        "content": "error: non-void function does not return a value in all control paths [-Werror,-Wreturn-type]\\n    }\\n    ^\\n1 error generated.\\nwhat does this error mean?"
                    },
                    {
                        "username": "Krishna_786933",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string str) {\\n        \\n           int m = str.length(), ans = 0,n = 0;\\n    unordered_set<int> st;\\n    for (int i = 0; i < m; i++)\\n    {\\n        if (st.find(str[i]) == st.end())\\n        {\\n            st.insert(str[i]);\\n            int a = st.size();\\n            ans = max(ans, a);\\n        }\\n        else\\n        {\\n            while (st.find(str[i]) != st.end())\\n            {\\n                st.erase(str[n]);\\n                n++;\\n            }\\n            \\n            st.insert(str[i]);\\n        }\\n    }\\n    return ans;\\n        }\\n     \\n};"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Python Java C++ and C Programming.\\n[https://www.gyangav.com/2022/11/leetcode-longest-substring-without-repeating-characters-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-longest-substring-without-repeating-characters-problem-solution.html)"
                    }
                ]
            },
            {
                "id": 1671222,
                "content": [
                    {
                        "username": "nylime",
                        "content": "The sliding window algorithm can be used to approach this problem, using two pointers to indicate the start and end of a window. If the character after the end of the window does not repeat any character that already exists in the window (can use a separate variable as an iterator), the end of the window can increase by one. If the character is a repeat, the start of the window can be adjusted to the point after the first instance of the repetitive character. The window can continue to be adjusted, according to the characters the window encounters, to keep track of and return the maximum length of a substring window with non-repetitive characters."
                    },
                    {
                        "username": "Dev_Johri",
                        "content": "set should be known to you else it will take 1week like to me even to understand what is going on in the problem\\uD83E\\uDD79\\uD83E\\uDD79\\uD83E\\uDD79. #happyCoding"
                    },
                    {
                        "username": "Tullazyy17",
                        "content": "I solved the problem number 3, i ran it, it passed the test, but when i submit it, it gives me an index out of range error.\nHere is the code:\nNevermind i just noticed the discussion rules, and i can't post my code apparently hahaha.\n\nHere is the error message: \nIndexError: list index out of range\n    return counter_of_length[-1]\nLine 16 in lengthOfLongestSubstring (Solution.py)\n    ret = Solution().lengthOfLongestSubstring(param_1)\nLine 35 in _driver (Solution.py)\n    _driver()\nLine 45 in <module> (Solution.py)"
                    },
                    {
                        "username": "fanhoman123",
                        "content": "This question is not easy. The final time test is critical.."
                    },
                    {
                        "username": "Zeeshan_Hasan_Khan",
                        "content": " class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        unordered_map<char,int> map;\n        int i=0;\n        int max_len=INT_MIN;\n        for(int j=0;j<s.length();j++)\n        {\n            if(map.find(s[j])==map.end())\n            {\n                map[s[j]]++;\n                max_len=max(max_len,j-i+1);\n            }\n            else\n            {\n                while(map[s[j]])\n                {\n                    map[s[i]]--;\n                    i++;\n                }\n                map[s[j]]++;\n            }\n        }\n        return max_len==INT_MIN?0:max_len;\n    }\n};\nCan Someone tell where the code goes wrong?\nIt passes 670 test case "
                    },
                    {
                        "username": "Nadhir_Hasan",
                        "content": "``class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        if len(s) <= 1:\\n            return len(s)\\n\\n        out = \"\"\\n        while True:\\n            result = \"\"\\n            re_do = False\\n            for i in range(len(s)):\\n                if s[i] not in result:\\n                    result += s[i]\\n                    \\n                else:\\n                    re_do = True\\n                    if len(result) > len(out):\\n                        out = result\\n                    first_c_idx = s.find(s[i])\\n                    s = s[first_c_idx+1:]\\n                    break\\n                        \\n            if not re_do:\\n                break\\n\\n        if len(result) > len(out):\\n            out = result\\n        return len(out)``\\n            \\n\\nCan anyone tell me what is the time complexity of this code?\\n"
                    },
                    {
                        "username": "jirayaboy05",
                        "content": "can anyone tell me brute force approach"
                    },
                    {
                        "username": "pritideo",
                        "content": "error: non-void function does not return a value in all control paths [-Werror,-Wreturn-type]\\n    }\\n    ^\\n1 error generated.\\nwhat does this error mean?"
                    },
                    {
                        "username": "Krishna_786933",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string str) {\\n        \\n           int m = str.length(), ans = 0,n = 0;\\n    unordered_set<int> st;\\n    for (int i = 0; i < m; i++)\\n    {\\n        if (st.find(str[i]) == st.end())\\n        {\\n            st.insert(str[i]);\\n            int a = st.size();\\n            ans = max(ans, a);\\n        }\\n        else\\n        {\\n            while (st.find(str[i]) != st.end())\\n            {\\n                st.erase(str[n]);\\n                n++;\\n            }\\n            \\n            st.insert(str[i]);\\n        }\\n    }\\n    return ans;\\n        }\\n     \\n};"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Python Java C++ and C Programming.\\n[https://www.gyangav.com/2022/11/leetcode-longest-substring-without-repeating-characters-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-longest-substring-without-repeating-characters-problem-solution.html)"
                    }
                ]
            },
            {
                "id": 1671004,
                "content": [
                    {
                        "username": "ashish_bhadauriya__",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String str) {\\n        int i=0,j=0,ans=0;\\n        HashSet<Character>hs=new HashSet<>();\\n        while(j<str.length()){\\n            if(!hs.contains(str.charAt(j))){\\n              hs.add(str.charAt(j));\\n              ans=Math.max(ans,hs.size());\\n              j++;\\n            }else{\\n                hs.remove(str.charAt(i));\\n                i++;\\n            }\\n        }\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "sahilmjain03",
                        "content": "Why my code is getting output limit exceeded?\\nI tried to search the meaning of Output limit but could not relate to my code....my code returns an int, how can it exceed the limit?\\n\\n class Solution {\\n    public int lengthOfLongestSubstring(String s) \\n    {\\n        int i=0;\\n        int max=0;\\n        int n = s.length();\\n        if(n==0 || n==1)\\n        {\\n            return n;\\n        }\\n        int res[] = new int[2];\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        map.put(s.charAt(0),0);\\n        for(int j=i+1;j<n;j++)\\n        {\\n            if(map.containsKey(s.charAt(j)))\\n            {\\n                int temp = map.get(s.charAt(j)) + 1; \\n                for(i=i;i<temp;i++)\\n                {\\n                    map.remove(s.charAt(i));\\n                }\\n                System.out.println(i);\\n            }\\n            map.put(s.charAt(j),j);\\n            System.out.println(map);\\n            if(j-i+1 > max)\\n            {\\n                max = j-i+1;\\n                // System.out.println(i);\\n                // System.out.println(j);\\n                // System.out.println(max);\\n            }\\n        }\\n        return max; \\n    }\\n}  "
                    },
                    {
                        "username": "sahilmjain03",
                        "content": "Why my code is getting output limit exceeded?\\nI tried to search the meaning of Output limit but could not relate to my code....my code returns an int, how can it exceed the limit?\\n\\n class Solution {\\n    public int lengthOfLongestSubstring(String s) \\n    {\\n        int i=0;\\n        int max=0;\\n        int n = s.length();\\n        if(n==0 || n==1)\\n        {\\n            return n;\\n        }\\n        int res[] = new int[2];\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        map.put(s.charAt(0),0);\\n        for(int j=i+1;j<n;j++)\\n        {\\n            if(map.containsKey(s.charAt(j)))\\n            {\\n                int temp = map.get(s.charAt(j)) + 1; \\n                for(i=i;i<temp;i++)\\n                {\\n                    map.remove(s.charAt(i));\\n                }\\n                System.out.println(i);\\n            }\\n            map.put(s.charAt(j),j);\\n            System.out.println(map);\\n            if(j-i+1 > max)\\n            {\\n                max = j-i+1;\\n                // System.out.println(i);\\n                // System.out.println(j);\\n                // System.out.println(max);\\n            }\\n        }\\n        return max; \\n    }\\n}  "
                    },
                    {
                        "username": "Omar211",
                        "content": "i don\\'t understand the 3rd  Example any help ?"
                    },
                    {
                        "username": "shikhargupta925",
                        "content": "why a empty String is considered 1 not 0"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "Best c++ approach + solution. check it out here \\n\\nhttps://www.instagram.com/reel/CkIWkWDsicx/?igshid=YmMyMTA2M2Y="
                    },
                    {
                        "username": "guo6",
                        "content": "no sliding win, just track where the char seen last time:\n  ```\nclass Solution {\n    public int lengthOfLongestSubstring(String s) {\n\n        int re = 0;\n        int end = 0;\n        int[] cm = new int[256];\n        for(int i = 1; i<=s.length(); i++) {\n            char c = s.charAt(i-1);\n            int ci = (int) c;\n            if (cm[ci] > 0) {\n                end = Math.max(end, cm[ci]);\n            }\n            cm[ci] = i;           \n            re = Math.max(re, i - end);\n        }        \n        return re;\n    }\n}\n```"
                    },
                    {
                        "username": "captain7426",
                        "content": "An interesting problem I faced. Any clue?\n\n-> Solution that works very well:\n```\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        vector<int> count(128,0);\n        int l=0,r=0,n=s.size();\n        int ans=0;\n        while (r<n) {\n            while (count[s[r]] >= 1) {\n                count[s[l]]--;\n                l++;\n            }\n\n            count[s[r]]++;\n\n            ans = max(ans, r-l+1);\n            r++;\n        }\n        return ans;\n    }\n};\n```\n\n-> Now, if I just replace the vector with an array it gives undefined behaviour.\n```\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        int count[128];\n        int l=0,r=0,n=s.size();\n        int ans=0;\n        while (r<n) {\n            while (count[s[r]] >= 1) {\n                count[s[l]]--;\n                l++;\n            }\n\n            count[s[r]]++;\n\n            ans = max(ans, r-l+1);\n            r++;\n        }\n        return ans;\n    }\n};\n```\n\nAnd the error would be like:\n```\nLine 9: Char 17: runtime error: index -13 out of bounds for type 'int [128]' (solution.cpp)\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:18:17\n```"
                    },
                    {
                        "username": "janis__",
                        "content": "You didn\\'t initialize the values of the array count to zero, leading to undefined behavior; add memset(count, 0, sizeof(count)); at the beginning of your function to initialize all elements to zero."
                    },
                    {
                        "username": "Omar211",
                        "content": "s =\\n\"pwwkew\"\\n88 / 987 testcases passed\\nOutput\\n4\\nExpected\\n3\\n\\nthe answer is \"pwke\" length 4  \\nthere is wrong in the test right?\\n\\nhere is my code \\n\\n\\n public int lengthOfLongestSubstring(String s) {\\n\\n     int result = 0;\\n        String hold = \" \";\\n        for (int i = 0; i < s.length(); i++) {\\n         for (int j = 0; j < hold.length()+1; j++) {\\n            if ((hold.indexOf(s.charAt(i)))== -1) {\\n                hold = hold+ s.substring(i, i+1);\\n                result++;\\n            }\\n         }\\n        }\\n        return result;    \\n    }"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Nick989",
                        "content": "Done in Python, let me know your suggestions on this code (Time Complexity is O(N)) \\n\\ndef lengthOfLongestSubstring(self, s: str) -> int:\\n\\n        resStr = \\'\\'\\n        maxLen = -1\\n        if len(s) == 0: return 0\\n        if len(s) == 1: return 1\\n        for i in range(len(s)):\\n            \\n            if s[i] not in resStr:\\n                resStr+=s[i]\\n            else:\\n                maxLen = max(len(resStr), maxLen)\\n                ind = resStr.index(s[i])\\n                resStr = resStr[ind+1:]\\n                resStr+=s[i]\\n        maxLen = max(maxLen, len(resStr))\\n        return maxLen"
                    },
                    {
                        "username": "ranbir7",
                        "content": "I did the same thing but with a deque."
                    }
                ]
            },
            {
                "id": 1668227,
                "content": [
                    {
                        "username": "ashish_bhadauriya__",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String str) {\\n        int i=0,j=0,ans=0;\\n        HashSet<Character>hs=new HashSet<>();\\n        while(j<str.length()){\\n            if(!hs.contains(str.charAt(j))){\\n              hs.add(str.charAt(j));\\n              ans=Math.max(ans,hs.size());\\n              j++;\\n            }else{\\n                hs.remove(str.charAt(i));\\n                i++;\\n            }\\n        }\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "sahilmjain03",
                        "content": "Why my code is getting output limit exceeded?\\nI tried to search the meaning of Output limit but could not relate to my code....my code returns an int, how can it exceed the limit?\\n\\n class Solution {\\n    public int lengthOfLongestSubstring(String s) \\n    {\\n        int i=0;\\n        int max=0;\\n        int n = s.length();\\n        if(n==0 || n==1)\\n        {\\n            return n;\\n        }\\n        int res[] = new int[2];\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        map.put(s.charAt(0),0);\\n        for(int j=i+1;j<n;j++)\\n        {\\n            if(map.containsKey(s.charAt(j)))\\n            {\\n                int temp = map.get(s.charAt(j)) + 1; \\n                for(i=i;i<temp;i++)\\n                {\\n                    map.remove(s.charAt(i));\\n                }\\n                System.out.println(i);\\n            }\\n            map.put(s.charAt(j),j);\\n            System.out.println(map);\\n            if(j-i+1 > max)\\n            {\\n                max = j-i+1;\\n                // System.out.println(i);\\n                // System.out.println(j);\\n                // System.out.println(max);\\n            }\\n        }\\n        return max; \\n    }\\n}  "
                    },
                    {
                        "username": "sahilmjain03",
                        "content": "Why my code is getting output limit exceeded?\\nI tried to search the meaning of Output limit but could not relate to my code....my code returns an int, how can it exceed the limit?\\n\\n class Solution {\\n    public int lengthOfLongestSubstring(String s) \\n    {\\n        int i=0;\\n        int max=0;\\n        int n = s.length();\\n        if(n==0 || n==1)\\n        {\\n            return n;\\n        }\\n        int res[] = new int[2];\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        map.put(s.charAt(0),0);\\n        for(int j=i+1;j<n;j++)\\n        {\\n            if(map.containsKey(s.charAt(j)))\\n            {\\n                int temp = map.get(s.charAt(j)) + 1; \\n                for(i=i;i<temp;i++)\\n                {\\n                    map.remove(s.charAt(i));\\n                }\\n                System.out.println(i);\\n            }\\n            map.put(s.charAt(j),j);\\n            System.out.println(map);\\n            if(j-i+1 > max)\\n            {\\n                max = j-i+1;\\n                // System.out.println(i);\\n                // System.out.println(j);\\n                // System.out.println(max);\\n            }\\n        }\\n        return max; \\n    }\\n}  "
                    },
                    {
                        "username": "Omar211",
                        "content": "i don\\'t understand the 3rd  Example any help ?"
                    },
                    {
                        "username": "shikhargupta925",
                        "content": "why a empty String is considered 1 not 0"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "Best c++ approach + solution. check it out here \\n\\nhttps://www.instagram.com/reel/CkIWkWDsicx/?igshid=YmMyMTA2M2Y="
                    },
                    {
                        "username": "guo6",
                        "content": "no sliding win, just track where the char seen last time:\n  ```\nclass Solution {\n    public int lengthOfLongestSubstring(String s) {\n\n        int re = 0;\n        int end = 0;\n        int[] cm = new int[256];\n        for(int i = 1; i<=s.length(); i++) {\n            char c = s.charAt(i-1);\n            int ci = (int) c;\n            if (cm[ci] > 0) {\n                end = Math.max(end, cm[ci]);\n            }\n            cm[ci] = i;           \n            re = Math.max(re, i - end);\n        }        \n        return re;\n    }\n}\n```"
                    },
                    {
                        "username": "captain7426",
                        "content": "An interesting problem I faced. Any clue?\n\n-> Solution that works very well:\n```\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        vector<int> count(128,0);\n        int l=0,r=0,n=s.size();\n        int ans=0;\n        while (r<n) {\n            while (count[s[r]] >= 1) {\n                count[s[l]]--;\n                l++;\n            }\n\n            count[s[r]]++;\n\n            ans = max(ans, r-l+1);\n            r++;\n        }\n        return ans;\n    }\n};\n```\n\n-> Now, if I just replace the vector with an array it gives undefined behaviour.\n```\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        int count[128];\n        int l=0,r=0,n=s.size();\n        int ans=0;\n        while (r<n) {\n            while (count[s[r]] >= 1) {\n                count[s[l]]--;\n                l++;\n            }\n\n            count[s[r]]++;\n\n            ans = max(ans, r-l+1);\n            r++;\n        }\n        return ans;\n    }\n};\n```\n\nAnd the error would be like:\n```\nLine 9: Char 17: runtime error: index -13 out of bounds for type 'int [128]' (solution.cpp)\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:18:17\n```"
                    },
                    {
                        "username": "janis__",
                        "content": "You didn\\'t initialize the values of the array count to zero, leading to undefined behavior; add memset(count, 0, sizeof(count)); at the beginning of your function to initialize all elements to zero."
                    },
                    {
                        "username": "Omar211",
                        "content": "s =\\n\"pwwkew\"\\n88 / 987 testcases passed\\nOutput\\n4\\nExpected\\n3\\n\\nthe answer is \"pwke\" length 4  \\nthere is wrong in the test right?\\n\\nhere is my code \\n\\n\\n public int lengthOfLongestSubstring(String s) {\\n\\n     int result = 0;\\n        String hold = \" \";\\n        for (int i = 0; i < s.length(); i++) {\\n         for (int j = 0; j < hold.length()+1; j++) {\\n            if ((hold.indexOf(s.charAt(i)))== -1) {\\n                hold = hold+ s.substring(i, i+1);\\n                result++;\\n            }\\n         }\\n        }\\n        return result;    \\n    }"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Nick989",
                        "content": "Done in Python, let me know your suggestions on this code (Time Complexity is O(N)) \\n\\ndef lengthOfLongestSubstring(self, s: str) -> int:\\n\\n        resStr = \\'\\'\\n        maxLen = -1\\n        if len(s) == 0: return 0\\n        if len(s) == 1: return 1\\n        for i in range(len(s)):\\n            \\n            if s[i] not in resStr:\\n                resStr+=s[i]\\n            else:\\n                maxLen = max(len(resStr), maxLen)\\n                ind = resStr.index(s[i])\\n                resStr = resStr[ind+1:]\\n                resStr+=s[i]\\n        maxLen = max(maxLen, len(resStr))\\n        return maxLen"
                    },
                    {
                        "username": "ranbir7",
                        "content": "I did the same thing but with a deque."
                    }
                ]
            },
            {
                "id": 1668226,
                "content": [
                    {
                        "username": "ashish_bhadauriya__",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String str) {\\n        int i=0,j=0,ans=0;\\n        HashSet<Character>hs=new HashSet<>();\\n        while(j<str.length()){\\n            if(!hs.contains(str.charAt(j))){\\n              hs.add(str.charAt(j));\\n              ans=Math.max(ans,hs.size());\\n              j++;\\n            }else{\\n                hs.remove(str.charAt(i));\\n                i++;\\n            }\\n        }\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "sahilmjain03",
                        "content": "Why my code is getting output limit exceeded?\\nI tried to search the meaning of Output limit but could not relate to my code....my code returns an int, how can it exceed the limit?\\n\\n class Solution {\\n    public int lengthOfLongestSubstring(String s) \\n    {\\n        int i=0;\\n        int max=0;\\n        int n = s.length();\\n        if(n==0 || n==1)\\n        {\\n            return n;\\n        }\\n        int res[] = new int[2];\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        map.put(s.charAt(0),0);\\n        for(int j=i+1;j<n;j++)\\n        {\\n            if(map.containsKey(s.charAt(j)))\\n            {\\n                int temp = map.get(s.charAt(j)) + 1; \\n                for(i=i;i<temp;i++)\\n                {\\n                    map.remove(s.charAt(i));\\n                }\\n                System.out.println(i);\\n            }\\n            map.put(s.charAt(j),j);\\n            System.out.println(map);\\n            if(j-i+1 > max)\\n            {\\n                max = j-i+1;\\n                // System.out.println(i);\\n                // System.out.println(j);\\n                // System.out.println(max);\\n            }\\n        }\\n        return max; \\n    }\\n}  "
                    },
                    {
                        "username": "sahilmjain03",
                        "content": "Why my code is getting output limit exceeded?\\nI tried to search the meaning of Output limit but could not relate to my code....my code returns an int, how can it exceed the limit?\\n\\n class Solution {\\n    public int lengthOfLongestSubstring(String s) \\n    {\\n        int i=0;\\n        int max=0;\\n        int n = s.length();\\n        if(n==0 || n==1)\\n        {\\n            return n;\\n        }\\n        int res[] = new int[2];\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        map.put(s.charAt(0),0);\\n        for(int j=i+1;j<n;j++)\\n        {\\n            if(map.containsKey(s.charAt(j)))\\n            {\\n                int temp = map.get(s.charAt(j)) + 1; \\n                for(i=i;i<temp;i++)\\n                {\\n                    map.remove(s.charAt(i));\\n                }\\n                System.out.println(i);\\n            }\\n            map.put(s.charAt(j),j);\\n            System.out.println(map);\\n            if(j-i+1 > max)\\n            {\\n                max = j-i+1;\\n                // System.out.println(i);\\n                // System.out.println(j);\\n                // System.out.println(max);\\n            }\\n        }\\n        return max; \\n    }\\n}  "
                    },
                    {
                        "username": "Omar211",
                        "content": "i don\\'t understand the 3rd  Example any help ?"
                    },
                    {
                        "username": "shikhargupta925",
                        "content": "why a empty String is considered 1 not 0"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "Best c++ approach + solution. check it out here \\n\\nhttps://www.instagram.com/reel/CkIWkWDsicx/?igshid=YmMyMTA2M2Y="
                    },
                    {
                        "username": "guo6",
                        "content": "no sliding win, just track where the char seen last time:\n  ```\nclass Solution {\n    public int lengthOfLongestSubstring(String s) {\n\n        int re = 0;\n        int end = 0;\n        int[] cm = new int[256];\n        for(int i = 1; i<=s.length(); i++) {\n            char c = s.charAt(i-1);\n            int ci = (int) c;\n            if (cm[ci] > 0) {\n                end = Math.max(end, cm[ci]);\n            }\n            cm[ci] = i;           \n            re = Math.max(re, i - end);\n        }        \n        return re;\n    }\n}\n```"
                    },
                    {
                        "username": "captain7426",
                        "content": "An interesting problem I faced. Any clue?\n\n-> Solution that works very well:\n```\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        vector<int> count(128,0);\n        int l=0,r=0,n=s.size();\n        int ans=0;\n        while (r<n) {\n            while (count[s[r]] >= 1) {\n                count[s[l]]--;\n                l++;\n            }\n\n            count[s[r]]++;\n\n            ans = max(ans, r-l+1);\n            r++;\n        }\n        return ans;\n    }\n};\n```\n\n-> Now, if I just replace the vector with an array it gives undefined behaviour.\n```\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        int count[128];\n        int l=0,r=0,n=s.size();\n        int ans=0;\n        while (r<n) {\n            while (count[s[r]] >= 1) {\n                count[s[l]]--;\n                l++;\n            }\n\n            count[s[r]]++;\n\n            ans = max(ans, r-l+1);\n            r++;\n        }\n        return ans;\n    }\n};\n```\n\nAnd the error would be like:\n```\nLine 9: Char 17: runtime error: index -13 out of bounds for type 'int [128]' (solution.cpp)\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:18:17\n```"
                    },
                    {
                        "username": "janis__",
                        "content": "You didn\\'t initialize the values of the array count to zero, leading to undefined behavior; add memset(count, 0, sizeof(count)); at the beginning of your function to initialize all elements to zero."
                    },
                    {
                        "username": "Omar211",
                        "content": "s =\\n\"pwwkew\"\\n88 / 987 testcases passed\\nOutput\\n4\\nExpected\\n3\\n\\nthe answer is \"pwke\" length 4  \\nthere is wrong in the test right?\\n\\nhere is my code \\n\\n\\n public int lengthOfLongestSubstring(String s) {\\n\\n     int result = 0;\\n        String hold = \" \";\\n        for (int i = 0; i < s.length(); i++) {\\n         for (int j = 0; j < hold.length()+1; j++) {\\n            if ((hold.indexOf(s.charAt(i)))== -1) {\\n                hold = hold+ s.substring(i, i+1);\\n                result++;\\n            }\\n         }\\n        }\\n        return result;    \\n    }"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Nick989",
                        "content": "Done in Python, let me know your suggestions on this code (Time Complexity is O(N)) \\n\\ndef lengthOfLongestSubstring(self, s: str) -> int:\\n\\n        resStr = \\'\\'\\n        maxLen = -1\\n        if len(s) == 0: return 0\\n        if len(s) == 1: return 1\\n        for i in range(len(s)):\\n            \\n            if s[i] not in resStr:\\n                resStr+=s[i]\\n            else:\\n                maxLen = max(len(resStr), maxLen)\\n                ind = resStr.index(s[i])\\n                resStr = resStr[ind+1:]\\n                resStr+=s[i]\\n        maxLen = max(maxLen, len(resStr))\\n        return maxLen"
                    },
                    {
                        "username": "ranbir7",
                        "content": "I did the same thing but with a deque."
                    }
                ]
            },
            {
                "id": 1664828,
                "content": [
                    {
                        "username": "ashish_bhadauriya__",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String str) {\\n        int i=0,j=0,ans=0;\\n        HashSet<Character>hs=new HashSet<>();\\n        while(j<str.length()){\\n            if(!hs.contains(str.charAt(j))){\\n              hs.add(str.charAt(j));\\n              ans=Math.max(ans,hs.size());\\n              j++;\\n            }else{\\n                hs.remove(str.charAt(i));\\n                i++;\\n            }\\n        }\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "sahilmjain03",
                        "content": "Why my code is getting output limit exceeded?\\nI tried to search the meaning of Output limit but could not relate to my code....my code returns an int, how can it exceed the limit?\\n\\n class Solution {\\n    public int lengthOfLongestSubstring(String s) \\n    {\\n        int i=0;\\n        int max=0;\\n        int n = s.length();\\n        if(n==0 || n==1)\\n        {\\n            return n;\\n        }\\n        int res[] = new int[2];\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        map.put(s.charAt(0),0);\\n        for(int j=i+1;j<n;j++)\\n        {\\n            if(map.containsKey(s.charAt(j)))\\n            {\\n                int temp = map.get(s.charAt(j)) + 1; \\n                for(i=i;i<temp;i++)\\n                {\\n                    map.remove(s.charAt(i));\\n                }\\n                System.out.println(i);\\n            }\\n            map.put(s.charAt(j),j);\\n            System.out.println(map);\\n            if(j-i+1 > max)\\n            {\\n                max = j-i+1;\\n                // System.out.println(i);\\n                // System.out.println(j);\\n                // System.out.println(max);\\n            }\\n        }\\n        return max; \\n    }\\n}  "
                    },
                    {
                        "username": "sahilmjain03",
                        "content": "Why my code is getting output limit exceeded?\\nI tried to search the meaning of Output limit but could not relate to my code....my code returns an int, how can it exceed the limit?\\n\\n class Solution {\\n    public int lengthOfLongestSubstring(String s) \\n    {\\n        int i=0;\\n        int max=0;\\n        int n = s.length();\\n        if(n==0 || n==1)\\n        {\\n            return n;\\n        }\\n        int res[] = new int[2];\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        map.put(s.charAt(0),0);\\n        for(int j=i+1;j<n;j++)\\n        {\\n            if(map.containsKey(s.charAt(j)))\\n            {\\n                int temp = map.get(s.charAt(j)) + 1; \\n                for(i=i;i<temp;i++)\\n                {\\n                    map.remove(s.charAt(i));\\n                }\\n                System.out.println(i);\\n            }\\n            map.put(s.charAt(j),j);\\n            System.out.println(map);\\n            if(j-i+1 > max)\\n            {\\n                max = j-i+1;\\n                // System.out.println(i);\\n                // System.out.println(j);\\n                // System.out.println(max);\\n            }\\n        }\\n        return max; \\n    }\\n}  "
                    },
                    {
                        "username": "Omar211",
                        "content": "i don\\'t understand the 3rd  Example any help ?"
                    },
                    {
                        "username": "shikhargupta925",
                        "content": "why a empty String is considered 1 not 0"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "Best c++ approach + solution. check it out here \\n\\nhttps://www.instagram.com/reel/CkIWkWDsicx/?igshid=YmMyMTA2M2Y="
                    },
                    {
                        "username": "guo6",
                        "content": "no sliding win, just track where the char seen last time:\n  ```\nclass Solution {\n    public int lengthOfLongestSubstring(String s) {\n\n        int re = 0;\n        int end = 0;\n        int[] cm = new int[256];\n        for(int i = 1; i<=s.length(); i++) {\n            char c = s.charAt(i-1);\n            int ci = (int) c;\n            if (cm[ci] > 0) {\n                end = Math.max(end, cm[ci]);\n            }\n            cm[ci] = i;           \n            re = Math.max(re, i - end);\n        }        \n        return re;\n    }\n}\n```"
                    },
                    {
                        "username": "captain7426",
                        "content": "An interesting problem I faced. Any clue?\n\n-> Solution that works very well:\n```\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        vector<int> count(128,0);\n        int l=0,r=0,n=s.size();\n        int ans=0;\n        while (r<n) {\n            while (count[s[r]] >= 1) {\n                count[s[l]]--;\n                l++;\n            }\n\n            count[s[r]]++;\n\n            ans = max(ans, r-l+1);\n            r++;\n        }\n        return ans;\n    }\n};\n```\n\n-> Now, if I just replace the vector with an array it gives undefined behaviour.\n```\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        int count[128];\n        int l=0,r=0,n=s.size();\n        int ans=0;\n        while (r<n) {\n            while (count[s[r]] >= 1) {\n                count[s[l]]--;\n                l++;\n            }\n\n            count[s[r]]++;\n\n            ans = max(ans, r-l+1);\n            r++;\n        }\n        return ans;\n    }\n};\n```\n\nAnd the error would be like:\n```\nLine 9: Char 17: runtime error: index -13 out of bounds for type 'int [128]' (solution.cpp)\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:18:17\n```"
                    },
                    {
                        "username": "janis__",
                        "content": "You didn\\'t initialize the values of the array count to zero, leading to undefined behavior; add memset(count, 0, sizeof(count)); at the beginning of your function to initialize all elements to zero."
                    },
                    {
                        "username": "Omar211",
                        "content": "s =\\n\"pwwkew\"\\n88 / 987 testcases passed\\nOutput\\n4\\nExpected\\n3\\n\\nthe answer is \"pwke\" length 4  \\nthere is wrong in the test right?\\n\\nhere is my code \\n\\n\\n public int lengthOfLongestSubstring(String s) {\\n\\n     int result = 0;\\n        String hold = \" \";\\n        for (int i = 0; i < s.length(); i++) {\\n         for (int j = 0; j < hold.length()+1; j++) {\\n            if ((hold.indexOf(s.charAt(i)))== -1) {\\n                hold = hold+ s.substring(i, i+1);\\n                result++;\\n            }\\n         }\\n        }\\n        return result;    \\n    }"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Nick989",
                        "content": "Done in Python, let me know your suggestions on this code (Time Complexity is O(N)) \\n\\ndef lengthOfLongestSubstring(self, s: str) -> int:\\n\\n        resStr = \\'\\'\\n        maxLen = -1\\n        if len(s) == 0: return 0\\n        if len(s) == 1: return 1\\n        for i in range(len(s)):\\n            \\n            if s[i] not in resStr:\\n                resStr+=s[i]\\n            else:\\n                maxLen = max(len(resStr), maxLen)\\n                ind = resStr.index(s[i])\\n                resStr = resStr[ind+1:]\\n                resStr+=s[i]\\n        maxLen = max(maxLen, len(resStr))\\n        return maxLen"
                    },
                    {
                        "username": "ranbir7",
                        "content": "I did the same thing but with a deque."
                    }
                ]
            },
            {
                "id": 1658680,
                "content": [
                    {
                        "username": "ashish_bhadauriya__",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String str) {\\n        int i=0,j=0,ans=0;\\n        HashSet<Character>hs=new HashSet<>();\\n        while(j<str.length()){\\n            if(!hs.contains(str.charAt(j))){\\n              hs.add(str.charAt(j));\\n              ans=Math.max(ans,hs.size());\\n              j++;\\n            }else{\\n                hs.remove(str.charAt(i));\\n                i++;\\n            }\\n        }\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "sahilmjain03",
                        "content": "Why my code is getting output limit exceeded?\\nI tried to search the meaning of Output limit but could not relate to my code....my code returns an int, how can it exceed the limit?\\n\\n class Solution {\\n    public int lengthOfLongestSubstring(String s) \\n    {\\n        int i=0;\\n        int max=0;\\n        int n = s.length();\\n        if(n==0 || n==1)\\n        {\\n            return n;\\n        }\\n        int res[] = new int[2];\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        map.put(s.charAt(0),0);\\n        for(int j=i+1;j<n;j++)\\n        {\\n            if(map.containsKey(s.charAt(j)))\\n            {\\n                int temp = map.get(s.charAt(j)) + 1; \\n                for(i=i;i<temp;i++)\\n                {\\n                    map.remove(s.charAt(i));\\n                }\\n                System.out.println(i);\\n            }\\n            map.put(s.charAt(j),j);\\n            System.out.println(map);\\n            if(j-i+1 > max)\\n            {\\n                max = j-i+1;\\n                // System.out.println(i);\\n                // System.out.println(j);\\n                // System.out.println(max);\\n            }\\n        }\\n        return max; \\n    }\\n}  "
                    },
                    {
                        "username": "sahilmjain03",
                        "content": "Why my code is getting output limit exceeded?\\nI tried to search the meaning of Output limit but could not relate to my code....my code returns an int, how can it exceed the limit?\\n\\n class Solution {\\n    public int lengthOfLongestSubstring(String s) \\n    {\\n        int i=0;\\n        int max=0;\\n        int n = s.length();\\n        if(n==0 || n==1)\\n        {\\n            return n;\\n        }\\n        int res[] = new int[2];\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        map.put(s.charAt(0),0);\\n        for(int j=i+1;j<n;j++)\\n        {\\n            if(map.containsKey(s.charAt(j)))\\n            {\\n                int temp = map.get(s.charAt(j)) + 1; \\n                for(i=i;i<temp;i++)\\n                {\\n                    map.remove(s.charAt(i));\\n                }\\n                System.out.println(i);\\n            }\\n            map.put(s.charAt(j),j);\\n            System.out.println(map);\\n            if(j-i+1 > max)\\n            {\\n                max = j-i+1;\\n                // System.out.println(i);\\n                // System.out.println(j);\\n                // System.out.println(max);\\n            }\\n        }\\n        return max; \\n    }\\n}  "
                    },
                    {
                        "username": "Omar211",
                        "content": "i don\\'t understand the 3rd  Example any help ?"
                    },
                    {
                        "username": "shikhargupta925",
                        "content": "why a empty String is considered 1 not 0"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "Best c++ approach + solution. check it out here \\n\\nhttps://www.instagram.com/reel/CkIWkWDsicx/?igshid=YmMyMTA2M2Y="
                    },
                    {
                        "username": "guo6",
                        "content": "no sliding win, just track where the char seen last time:\n  ```\nclass Solution {\n    public int lengthOfLongestSubstring(String s) {\n\n        int re = 0;\n        int end = 0;\n        int[] cm = new int[256];\n        for(int i = 1; i<=s.length(); i++) {\n            char c = s.charAt(i-1);\n            int ci = (int) c;\n            if (cm[ci] > 0) {\n                end = Math.max(end, cm[ci]);\n            }\n            cm[ci] = i;           \n            re = Math.max(re, i - end);\n        }        \n        return re;\n    }\n}\n```"
                    },
                    {
                        "username": "captain7426",
                        "content": "An interesting problem I faced. Any clue?\n\n-> Solution that works very well:\n```\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        vector<int> count(128,0);\n        int l=0,r=0,n=s.size();\n        int ans=0;\n        while (r<n) {\n            while (count[s[r]] >= 1) {\n                count[s[l]]--;\n                l++;\n            }\n\n            count[s[r]]++;\n\n            ans = max(ans, r-l+1);\n            r++;\n        }\n        return ans;\n    }\n};\n```\n\n-> Now, if I just replace the vector with an array it gives undefined behaviour.\n```\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        int count[128];\n        int l=0,r=0,n=s.size();\n        int ans=0;\n        while (r<n) {\n            while (count[s[r]] >= 1) {\n                count[s[l]]--;\n                l++;\n            }\n\n            count[s[r]]++;\n\n            ans = max(ans, r-l+1);\n            r++;\n        }\n        return ans;\n    }\n};\n```\n\nAnd the error would be like:\n```\nLine 9: Char 17: runtime error: index -13 out of bounds for type 'int [128]' (solution.cpp)\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:18:17\n```"
                    },
                    {
                        "username": "janis__",
                        "content": "You didn\\'t initialize the values of the array count to zero, leading to undefined behavior; add memset(count, 0, sizeof(count)); at the beginning of your function to initialize all elements to zero."
                    },
                    {
                        "username": "Omar211",
                        "content": "s =\\n\"pwwkew\"\\n88 / 987 testcases passed\\nOutput\\n4\\nExpected\\n3\\n\\nthe answer is \"pwke\" length 4  \\nthere is wrong in the test right?\\n\\nhere is my code \\n\\n\\n public int lengthOfLongestSubstring(String s) {\\n\\n     int result = 0;\\n        String hold = \" \";\\n        for (int i = 0; i < s.length(); i++) {\\n         for (int j = 0; j < hold.length()+1; j++) {\\n            if ((hold.indexOf(s.charAt(i)))== -1) {\\n                hold = hold+ s.substring(i, i+1);\\n                result++;\\n            }\\n         }\\n        }\\n        return result;    \\n    }"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Nick989",
                        "content": "Done in Python, let me know your suggestions on this code (Time Complexity is O(N)) \\n\\ndef lengthOfLongestSubstring(self, s: str) -> int:\\n\\n        resStr = \\'\\'\\n        maxLen = -1\\n        if len(s) == 0: return 0\\n        if len(s) == 1: return 1\\n        for i in range(len(s)):\\n            \\n            if s[i] not in resStr:\\n                resStr+=s[i]\\n            else:\\n                maxLen = max(len(resStr), maxLen)\\n                ind = resStr.index(s[i])\\n                resStr = resStr[ind+1:]\\n                resStr+=s[i]\\n        maxLen = max(maxLen, len(resStr))\\n        return maxLen"
                    },
                    {
                        "username": "ranbir7",
                        "content": "I did the same thing but with a deque."
                    }
                ]
            },
            {
                "id": 1658056,
                "content": [
                    {
                        "username": "ashish_bhadauriya__",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String str) {\\n        int i=0,j=0,ans=0;\\n        HashSet<Character>hs=new HashSet<>();\\n        while(j<str.length()){\\n            if(!hs.contains(str.charAt(j))){\\n              hs.add(str.charAt(j));\\n              ans=Math.max(ans,hs.size());\\n              j++;\\n            }else{\\n                hs.remove(str.charAt(i));\\n                i++;\\n            }\\n        }\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "sahilmjain03",
                        "content": "Why my code is getting output limit exceeded?\\nI tried to search the meaning of Output limit but could not relate to my code....my code returns an int, how can it exceed the limit?\\n\\n class Solution {\\n    public int lengthOfLongestSubstring(String s) \\n    {\\n        int i=0;\\n        int max=0;\\n        int n = s.length();\\n        if(n==0 || n==1)\\n        {\\n            return n;\\n        }\\n        int res[] = new int[2];\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        map.put(s.charAt(0),0);\\n        for(int j=i+1;j<n;j++)\\n        {\\n            if(map.containsKey(s.charAt(j)))\\n            {\\n                int temp = map.get(s.charAt(j)) + 1; \\n                for(i=i;i<temp;i++)\\n                {\\n                    map.remove(s.charAt(i));\\n                }\\n                System.out.println(i);\\n            }\\n            map.put(s.charAt(j),j);\\n            System.out.println(map);\\n            if(j-i+1 > max)\\n            {\\n                max = j-i+1;\\n                // System.out.println(i);\\n                // System.out.println(j);\\n                // System.out.println(max);\\n            }\\n        }\\n        return max; \\n    }\\n}  "
                    },
                    {
                        "username": "sahilmjain03",
                        "content": "Why my code is getting output limit exceeded?\\nI tried to search the meaning of Output limit but could not relate to my code....my code returns an int, how can it exceed the limit?\\n\\n class Solution {\\n    public int lengthOfLongestSubstring(String s) \\n    {\\n        int i=0;\\n        int max=0;\\n        int n = s.length();\\n        if(n==0 || n==1)\\n        {\\n            return n;\\n        }\\n        int res[] = new int[2];\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        map.put(s.charAt(0),0);\\n        for(int j=i+1;j<n;j++)\\n        {\\n            if(map.containsKey(s.charAt(j)))\\n            {\\n                int temp = map.get(s.charAt(j)) + 1; \\n                for(i=i;i<temp;i++)\\n                {\\n                    map.remove(s.charAt(i));\\n                }\\n                System.out.println(i);\\n            }\\n            map.put(s.charAt(j),j);\\n            System.out.println(map);\\n            if(j-i+1 > max)\\n            {\\n                max = j-i+1;\\n                // System.out.println(i);\\n                // System.out.println(j);\\n                // System.out.println(max);\\n            }\\n        }\\n        return max; \\n    }\\n}  "
                    },
                    {
                        "username": "Omar211",
                        "content": "i don\\'t understand the 3rd  Example any help ?"
                    },
                    {
                        "username": "shikhargupta925",
                        "content": "why a empty String is considered 1 not 0"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "Best c++ approach + solution. check it out here \\n\\nhttps://www.instagram.com/reel/CkIWkWDsicx/?igshid=YmMyMTA2M2Y="
                    },
                    {
                        "username": "guo6",
                        "content": "no sliding win, just track where the char seen last time:\n  ```\nclass Solution {\n    public int lengthOfLongestSubstring(String s) {\n\n        int re = 0;\n        int end = 0;\n        int[] cm = new int[256];\n        for(int i = 1; i<=s.length(); i++) {\n            char c = s.charAt(i-1);\n            int ci = (int) c;\n            if (cm[ci] > 0) {\n                end = Math.max(end, cm[ci]);\n            }\n            cm[ci] = i;           \n            re = Math.max(re, i - end);\n        }        \n        return re;\n    }\n}\n```"
                    },
                    {
                        "username": "captain7426",
                        "content": "An interesting problem I faced. Any clue?\n\n-> Solution that works very well:\n```\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        vector<int> count(128,0);\n        int l=0,r=0,n=s.size();\n        int ans=0;\n        while (r<n) {\n            while (count[s[r]] >= 1) {\n                count[s[l]]--;\n                l++;\n            }\n\n            count[s[r]]++;\n\n            ans = max(ans, r-l+1);\n            r++;\n        }\n        return ans;\n    }\n};\n```\n\n-> Now, if I just replace the vector with an array it gives undefined behaviour.\n```\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        int count[128];\n        int l=0,r=0,n=s.size();\n        int ans=0;\n        while (r<n) {\n            while (count[s[r]] >= 1) {\n                count[s[l]]--;\n                l++;\n            }\n\n            count[s[r]]++;\n\n            ans = max(ans, r-l+1);\n            r++;\n        }\n        return ans;\n    }\n};\n```\n\nAnd the error would be like:\n```\nLine 9: Char 17: runtime error: index -13 out of bounds for type 'int [128]' (solution.cpp)\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:18:17\n```"
                    },
                    {
                        "username": "janis__",
                        "content": "You didn\\'t initialize the values of the array count to zero, leading to undefined behavior; add memset(count, 0, sizeof(count)); at the beginning of your function to initialize all elements to zero."
                    },
                    {
                        "username": "Omar211",
                        "content": "s =\\n\"pwwkew\"\\n88 / 987 testcases passed\\nOutput\\n4\\nExpected\\n3\\n\\nthe answer is \"pwke\" length 4  \\nthere is wrong in the test right?\\n\\nhere is my code \\n\\n\\n public int lengthOfLongestSubstring(String s) {\\n\\n     int result = 0;\\n        String hold = \" \";\\n        for (int i = 0; i < s.length(); i++) {\\n         for (int j = 0; j < hold.length()+1; j++) {\\n            if ((hold.indexOf(s.charAt(i)))== -1) {\\n                hold = hold+ s.substring(i, i+1);\\n                result++;\\n            }\\n         }\\n        }\\n        return result;    \\n    }"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Nick989",
                        "content": "Done in Python, let me know your suggestions on this code (Time Complexity is O(N)) \\n\\ndef lengthOfLongestSubstring(self, s: str) -> int:\\n\\n        resStr = \\'\\'\\n        maxLen = -1\\n        if len(s) == 0: return 0\\n        if len(s) == 1: return 1\\n        for i in range(len(s)):\\n            \\n            if s[i] not in resStr:\\n                resStr+=s[i]\\n            else:\\n                maxLen = max(len(resStr), maxLen)\\n                ind = resStr.index(s[i])\\n                resStr = resStr[ind+1:]\\n                resStr+=s[i]\\n        maxLen = max(maxLen, len(resStr))\\n        return maxLen"
                    },
                    {
                        "username": "ranbir7",
                        "content": "I did the same thing but with a deque."
                    }
                ]
            },
            {
                "id": 1657181,
                "content": [
                    {
                        "username": "ashish_bhadauriya__",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String str) {\\n        int i=0,j=0,ans=0;\\n        HashSet<Character>hs=new HashSet<>();\\n        while(j<str.length()){\\n            if(!hs.contains(str.charAt(j))){\\n              hs.add(str.charAt(j));\\n              ans=Math.max(ans,hs.size());\\n              j++;\\n            }else{\\n                hs.remove(str.charAt(i));\\n                i++;\\n            }\\n        }\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "sahilmjain03",
                        "content": "Why my code is getting output limit exceeded?\\nI tried to search the meaning of Output limit but could not relate to my code....my code returns an int, how can it exceed the limit?\\n\\n class Solution {\\n    public int lengthOfLongestSubstring(String s) \\n    {\\n        int i=0;\\n        int max=0;\\n        int n = s.length();\\n        if(n==0 || n==1)\\n        {\\n            return n;\\n        }\\n        int res[] = new int[2];\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        map.put(s.charAt(0),0);\\n        for(int j=i+1;j<n;j++)\\n        {\\n            if(map.containsKey(s.charAt(j)))\\n            {\\n                int temp = map.get(s.charAt(j)) + 1; \\n                for(i=i;i<temp;i++)\\n                {\\n                    map.remove(s.charAt(i));\\n                }\\n                System.out.println(i);\\n            }\\n            map.put(s.charAt(j),j);\\n            System.out.println(map);\\n            if(j-i+1 > max)\\n            {\\n                max = j-i+1;\\n                // System.out.println(i);\\n                // System.out.println(j);\\n                // System.out.println(max);\\n            }\\n        }\\n        return max; \\n    }\\n}  "
                    },
                    {
                        "username": "sahilmjain03",
                        "content": "Why my code is getting output limit exceeded?\\nI tried to search the meaning of Output limit but could not relate to my code....my code returns an int, how can it exceed the limit?\\n\\n class Solution {\\n    public int lengthOfLongestSubstring(String s) \\n    {\\n        int i=0;\\n        int max=0;\\n        int n = s.length();\\n        if(n==0 || n==1)\\n        {\\n            return n;\\n        }\\n        int res[] = new int[2];\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        map.put(s.charAt(0),0);\\n        for(int j=i+1;j<n;j++)\\n        {\\n            if(map.containsKey(s.charAt(j)))\\n            {\\n                int temp = map.get(s.charAt(j)) + 1; \\n                for(i=i;i<temp;i++)\\n                {\\n                    map.remove(s.charAt(i));\\n                }\\n                System.out.println(i);\\n            }\\n            map.put(s.charAt(j),j);\\n            System.out.println(map);\\n            if(j-i+1 > max)\\n            {\\n                max = j-i+1;\\n                // System.out.println(i);\\n                // System.out.println(j);\\n                // System.out.println(max);\\n            }\\n        }\\n        return max; \\n    }\\n}  "
                    },
                    {
                        "username": "Omar211",
                        "content": "i don\\'t understand the 3rd  Example any help ?"
                    },
                    {
                        "username": "shikhargupta925",
                        "content": "why a empty String is considered 1 not 0"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "Best c++ approach + solution. check it out here \\n\\nhttps://www.instagram.com/reel/CkIWkWDsicx/?igshid=YmMyMTA2M2Y="
                    },
                    {
                        "username": "guo6",
                        "content": "no sliding win, just track where the char seen last time:\n  ```\nclass Solution {\n    public int lengthOfLongestSubstring(String s) {\n\n        int re = 0;\n        int end = 0;\n        int[] cm = new int[256];\n        for(int i = 1; i<=s.length(); i++) {\n            char c = s.charAt(i-1);\n            int ci = (int) c;\n            if (cm[ci] > 0) {\n                end = Math.max(end, cm[ci]);\n            }\n            cm[ci] = i;           \n            re = Math.max(re, i - end);\n        }        \n        return re;\n    }\n}\n```"
                    },
                    {
                        "username": "captain7426",
                        "content": "An interesting problem I faced. Any clue?\n\n-> Solution that works very well:\n```\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        vector<int> count(128,0);\n        int l=0,r=0,n=s.size();\n        int ans=0;\n        while (r<n) {\n            while (count[s[r]] >= 1) {\n                count[s[l]]--;\n                l++;\n            }\n\n            count[s[r]]++;\n\n            ans = max(ans, r-l+1);\n            r++;\n        }\n        return ans;\n    }\n};\n```\n\n-> Now, if I just replace the vector with an array it gives undefined behaviour.\n```\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        int count[128];\n        int l=0,r=0,n=s.size();\n        int ans=0;\n        while (r<n) {\n            while (count[s[r]] >= 1) {\n                count[s[l]]--;\n                l++;\n            }\n\n            count[s[r]]++;\n\n            ans = max(ans, r-l+1);\n            r++;\n        }\n        return ans;\n    }\n};\n```\n\nAnd the error would be like:\n```\nLine 9: Char 17: runtime error: index -13 out of bounds for type 'int [128]' (solution.cpp)\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:18:17\n```"
                    },
                    {
                        "username": "janis__",
                        "content": "You didn\\'t initialize the values of the array count to zero, leading to undefined behavior; add memset(count, 0, sizeof(count)); at the beginning of your function to initialize all elements to zero."
                    },
                    {
                        "username": "Omar211",
                        "content": "s =\\n\"pwwkew\"\\n88 / 987 testcases passed\\nOutput\\n4\\nExpected\\n3\\n\\nthe answer is \"pwke\" length 4  \\nthere is wrong in the test right?\\n\\nhere is my code \\n\\n\\n public int lengthOfLongestSubstring(String s) {\\n\\n     int result = 0;\\n        String hold = \" \";\\n        for (int i = 0; i < s.length(); i++) {\\n         for (int j = 0; j < hold.length()+1; j++) {\\n            if ((hold.indexOf(s.charAt(i)))== -1) {\\n                hold = hold+ s.substring(i, i+1);\\n                result++;\\n            }\\n         }\\n        }\\n        return result;    \\n    }"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Nick989",
                        "content": "Done in Python, let me know your suggestions on this code (Time Complexity is O(N)) \\n\\ndef lengthOfLongestSubstring(self, s: str) -> int:\\n\\n        resStr = \\'\\'\\n        maxLen = -1\\n        if len(s) == 0: return 0\\n        if len(s) == 1: return 1\\n        for i in range(len(s)):\\n            \\n            if s[i] not in resStr:\\n                resStr+=s[i]\\n            else:\\n                maxLen = max(len(resStr), maxLen)\\n                ind = resStr.index(s[i])\\n                resStr = resStr[ind+1:]\\n                resStr+=s[i]\\n        maxLen = max(maxLen, len(resStr))\\n        return maxLen"
                    },
                    {
                        "username": "ranbir7",
                        "content": "I did the same thing but with a deque."
                    }
                ]
            },
            {
                "id": 1644797,
                "content": [
                    {
                        "username": "ashish_bhadauriya__",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String str) {\\n        int i=0,j=0,ans=0;\\n        HashSet<Character>hs=new HashSet<>();\\n        while(j<str.length()){\\n            if(!hs.contains(str.charAt(j))){\\n              hs.add(str.charAt(j));\\n              ans=Math.max(ans,hs.size());\\n              j++;\\n            }else{\\n                hs.remove(str.charAt(i));\\n                i++;\\n            }\\n        }\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "sahilmjain03",
                        "content": "Why my code is getting output limit exceeded?\\nI tried to search the meaning of Output limit but could not relate to my code....my code returns an int, how can it exceed the limit?\\n\\n class Solution {\\n    public int lengthOfLongestSubstring(String s) \\n    {\\n        int i=0;\\n        int max=0;\\n        int n = s.length();\\n        if(n==0 || n==1)\\n        {\\n            return n;\\n        }\\n        int res[] = new int[2];\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        map.put(s.charAt(0),0);\\n        for(int j=i+1;j<n;j++)\\n        {\\n            if(map.containsKey(s.charAt(j)))\\n            {\\n                int temp = map.get(s.charAt(j)) + 1; \\n                for(i=i;i<temp;i++)\\n                {\\n                    map.remove(s.charAt(i));\\n                }\\n                System.out.println(i);\\n            }\\n            map.put(s.charAt(j),j);\\n            System.out.println(map);\\n            if(j-i+1 > max)\\n            {\\n                max = j-i+1;\\n                // System.out.println(i);\\n                // System.out.println(j);\\n                // System.out.println(max);\\n            }\\n        }\\n        return max; \\n    }\\n}  "
                    },
                    {
                        "username": "sahilmjain03",
                        "content": "Why my code is getting output limit exceeded?\\nI tried to search the meaning of Output limit but could not relate to my code....my code returns an int, how can it exceed the limit?\\n\\n class Solution {\\n    public int lengthOfLongestSubstring(String s) \\n    {\\n        int i=0;\\n        int max=0;\\n        int n = s.length();\\n        if(n==0 || n==1)\\n        {\\n            return n;\\n        }\\n        int res[] = new int[2];\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        map.put(s.charAt(0),0);\\n        for(int j=i+1;j<n;j++)\\n        {\\n            if(map.containsKey(s.charAt(j)))\\n            {\\n                int temp = map.get(s.charAt(j)) + 1; \\n                for(i=i;i<temp;i++)\\n                {\\n                    map.remove(s.charAt(i));\\n                }\\n                System.out.println(i);\\n            }\\n            map.put(s.charAt(j),j);\\n            System.out.println(map);\\n            if(j-i+1 > max)\\n            {\\n                max = j-i+1;\\n                // System.out.println(i);\\n                // System.out.println(j);\\n                // System.out.println(max);\\n            }\\n        }\\n        return max; \\n    }\\n}  "
                    },
                    {
                        "username": "Omar211",
                        "content": "i don\\'t understand the 3rd  Example any help ?"
                    },
                    {
                        "username": "shikhargupta925",
                        "content": "why a empty String is considered 1 not 0"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "Best c++ approach + solution. check it out here \\n\\nhttps://www.instagram.com/reel/CkIWkWDsicx/?igshid=YmMyMTA2M2Y="
                    },
                    {
                        "username": "guo6",
                        "content": "no sliding win, just track where the char seen last time:\n  ```\nclass Solution {\n    public int lengthOfLongestSubstring(String s) {\n\n        int re = 0;\n        int end = 0;\n        int[] cm = new int[256];\n        for(int i = 1; i<=s.length(); i++) {\n            char c = s.charAt(i-1);\n            int ci = (int) c;\n            if (cm[ci] > 0) {\n                end = Math.max(end, cm[ci]);\n            }\n            cm[ci] = i;           \n            re = Math.max(re, i - end);\n        }        \n        return re;\n    }\n}\n```"
                    },
                    {
                        "username": "captain7426",
                        "content": "An interesting problem I faced. Any clue?\n\n-> Solution that works very well:\n```\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        vector<int> count(128,0);\n        int l=0,r=0,n=s.size();\n        int ans=0;\n        while (r<n) {\n            while (count[s[r]] >= 1) {\n                count[s[l]]--;\n                l++;\n            }\n\n            count[s[r]]++;\n\n            ans = max(ans, r-l+1);\n            r++;\n        }\n        return ans;\n    }\n};\n```\n\n-> Now, if I just replace the vector with an array it gives undefined behaviour.\n```\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        int count[128];\n        int l=0,r=0,n=s.size();\n        int ans=0;\n        while (r<n) {\n            while (count[s[r]] >= 1) {\n                count[s[l]]--;\n                l++;\n            }\n\n            count[s[r]]++;\n\n            ans = max(ans, r-l+1);\n            r++;\n        }\n        return ans;\n    }\n};\n```\n\nAnd the error would be like:\n```\nLine 9: Char 17: runtime error: index -13 out of bounds for type 'int [128]' (solution.cpp)\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:18:17\n```"
                    },
                    {
                        "username": "janis__",
                        "content": "You didn\\'t initialize the values of the array count to zero, leading to undefined behavior; add memset(count, 0, sizeof(count)); at the beginning of your function to initialize all elements to zero."
                    },
                    {
                        "username": "Omar211",
                        "content": "s =\\n\"pwwkew\"\\n88 / 987 testcases passed\\nOutput\\n4\\nExpected\\n3\\n\\nthe answer is \"pwke\" length 4  \\nthere is wrong in the test right?\\n\\nhere is my code \\n\\n\\n public int lengthOfLongestSubstring(String s) {\\n\\n     int result = 0;\\n        String hold = \" \";\\n        for (int i = 0; i < s.length(); i++) {\\n         for (int j = 0; j < hold.length()+1; j++) {\\n            if ((hold.indexOf(s.charAt(i)))== -1) {\\n                hold = hold+ s.substring(i, i+1);\\n                result++;\\n            }\\n         }\\n        }\\n        return result;    \\n    }"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Nick989",
                        "content": "Done in Python, let me know your suggestions on this code (Time Complexity is O(N)) \\n\\ndef lengthOfLongestSubstring(self, s: str) -> int:\\n\\n        resStr = \\'\\'\\n        maxLen = -1\\n        if len(s) == 0: return 0\\n        if len(s) == 1: return 1\\n        for i in range(len(s)):\\n            \\n            if s[i] not in resStr:\\n                resStr+=s[i]\\n            else:\\n                maxLen = max(len(resStr), maxLen)\\n                ind = resStr.index(s[i])\\n                resStr = resStr[ind+1:]\\n                resStr+=s[i]\\n        maxLen = max(maxLen, len(resStr))\\n        return maxLen"
                    },
                    {
                        "username": "ranbir7",
                        "content": "I did the same thing but with a deque."
                    }
                ]
            },
            {
                "id": 1641988,
                "content": [
                    {
                        "username": "ashish_bhadauriya__",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String str) {\\n        int i=0,j=0,ans=0;\\n        HashSet<Character>hs=new HashSet<>();\\n        while(j<str.length()){\\n            if(!hs.contains(str.charAt(j))){\\n              hs.add(str.charAt(j));\\n              ans=Math.max(ans,hs.size());\\n              j++;\\n            }else{\\n                hs.remove(str.charAt(i));\\n                i++;\\n            }\\n        }\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "sahilmjain03",
                        "content": "Why my code is getting output limit exceeded?\\nI tried to search the meaning of Output limit but could not relate to my code....my code returns an int, how can it exceed the limit?\\n\\n class Solution {\\n    public int lengthOfLongestSubstring(String s) \\n    {\\n        int i=0;\\n        int max=0;\\n        int n = s.length();\\n        if(n==0 || n==1)\\n        {\\n            return n;\\n        }\\n        int res[] = new int[2];\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        map.put(s.charAt(0),0);\\n        for(int j=i+1;j<n;j++)\\n        {\\n            if(map.containsKey(s.charAt(j)))\\n            {\\n                int temp = map.get(s.charAt(j)) + 1; \\n                for(i=i;i<temp;i++)\\n                {\\n                    map.remove(s.charAt(i));\\n                }\\n                System.out.println(i);\\n            }\\n            map.put(s.charAt(j),j);\\n            System.out.println(map);\\n            if(j-i+1 > max)\\n            {\\n                max = j-i+1;\\n                // System.out.println(i);\\n                // System.out.println(j);\\n                // System.out.println(max);\\n            }\\n        }\\n        return max; \\n    }\\n}  "
                    },
                    {
                        "username": "sahilmjain03",
                        "content": "Why my code is getting output limit exceeded?\\nI tried to search the meaning of Output limit but could not relate to my code....my code returns an int, how can it exceed the limit?\\n\\n class Solution {\\n    public int lengthOfLongestSubstring(String s) \\n    {\\n        int i=0;\\n        int max=0;\\n        int n = s.length();\\n        if(n==0 || n==1)\\n        {\\n            return n;\\n        }\\n        int res[] = new int[2];\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        map.put(s.charAt(0),0);\\n        for(int j=i+1;j<n;j++)\\n        {\\n            if(map.containsKey(s.charAt(j)))\\n            {\\n                int temp = map.get(s.charAt(j)) + 1; \\n                for(i=i;i<temp;i++)\\n                {\\n                    map.remove(s.charAt(i));\\n                }\\n                System.out.println(i);\\n            }\\n            map.put(s.charAt(j),j);\\n            System.out.println(map);\\n            if(j-i+1 > max)\\n            {\\n                max = j-i+1;\\n                // System.out.println(i);\\n                // System.out.println(j);\\n                // System.out.println(max);\\n            }\\n        }\\n        return max; \\n    }\\n}  "
                    },
                    {
                        "username": "Omar211",
                        "content": "i don\\'t understand the 3rd  Example any help ?"
                    },
                    {
                        "username": "shikhargupta925",
                        "content": "why a empty String is considered 1 not 0"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "Best c++ approach + solution. check it out here \\n\\nhttps://www.instagram.com/reel/CkIWkWDsicx/?igshid=YmMyMTA2M2Y="
                    },
                    {
                        "username": "guo6",
                        "content": "no sliding win, just track where the char seen last time:\n  ```\nclass Solution {\n    public int lengthOfLongestSubstring(String s) {\n\n        int re = 0;\n        int end = 0;\n        int[] cm = new int[256];\n        for(int i = 1; i<=s.length(); i++) {\n            char c = s.charAt(i-1);\n            int ci = (int) c;\n            if (cm[ci] > 0) {\n                end = Math.max(end, cm[ci]);\n            }\n            cm[ci] = i;           \n            re = Math.max(re, i - end);\n        }        \n        return re;\n    }\n}\n```"
                    },
                    {
                        "username": "captain7426",
                        "content": "An interesting problem I faced. Any clue?\n\n-> Solution that works very well:\n```\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        vector<int> count(128,0);\n        int l=0,r=0,n=s.size();\n        int ans=0;\n        while (r<n) {\n            while (count[s[r]] >= 1) {\n                count[s[l]]--;\n                l++;\n            }\n\n            count[s[r]]++;\n\n            ans = max(ans, r-l+1);\n            r++;\n        }\n        return ans;\n    }\n};\n```\n\n-> Now, if I just replace the vector with an array it gives undefined behaviour.\n```\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        int count[128];\n        int l=0,r=0,n=s.size();\n        int ans=0;\n        while (r<n) {\n            while (count[s[r]] >= 1) {\n                count[s[l]]--;\n                l++;\n            }\n\n            count[s[r]]++;\n\n            ans = max(ans, r-l+1);\n            r++;\n        }\n        return ans;\n    }\n};\n```\n\nAnd the error would be like:\n```\nLine 9: Char 17: runtime error: index -13 out of bounds for type 'int [128]' (solution.cpp)\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:18:17\n```"
                    },
                    {
                        "username": "janis__",
                        "content": "You didn\\'t initialize the values of the array count to zero, leading to undefined behavior; add memset(count, 0, sizeof(count)); at the beginning of your function to initialize all elements to zero."
                    },
                    {
                        "username": "Omar211",
                        "content": "s =\\n\"pwwkew\"\\n88 / 987 testcases passed\\nOutput\\n4\\nExpected\\n3\\n\\nthe answer is \"pwke\" length 4  \\nthere is wrong in the test right?\\n\\nhere is my code \\n\\n\\n public int lengthOfLongestSubstring(String s) {\\n\\n     int result = 0;\\n        String hold = \" \";\\n        for (int i = 0; i < s.length(); i++) {\\n         for (int j = 0; j < hold.length()+1; j++) {\\n            if ((hold.indexOf(s.charAt(i)))== -1) {\\n                hold = hold+ s.substring(i, i+1);\\n                result++;\\n            }\\n         }\\n        }\\n        return result;    \\n    }"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Nick989",
                        "content": "Done in Python, let me know your suggestions on this code (Time Complexity is O(N)) \\n\\ndef lengthOfLongestSubstring(self, s: str) -> int:\\n\\n        resStr = \\'\\'\\n        maxLen = -1\\n        if len(s) == 0: return 0\\n        if len(s) == 1: return 1\\n        for i in range(len(s)):\\n            \\n            if s[i] not in resStr:\\n                resStr+=s[i]\\n            else:\\n                maxLen = max(len(resStr), maxLen)\\n                ind = resStr.index(s[i])\\n                resStr = resStr[ind+1:]\\n                resStr+=s[i]\\n        maxLen = max(maxLen, len(resStr))\\n        return maxLen"
                    },
                    {
                        "username": "ranbir7",
                        "content": "I did the same thing but with a deque."
                    }
                ]
            },
            {
                "id": 1639659,
                "content": [
                    {
                        "username": "ashish_bhadauriya__",
                        "content": "class Solution {\\n    public int lengthOfLongestSubstring(String str) {\\n        int i=0,j=0,ans=0;\\n        HashSet<Character>hs=new HashSet<>();\\n        while(j<str.length()){\\n            if(!hs.contains(str.charAt(j))){\\n              hs.add(str.charAt(j));\\n              ans=Math.max(ans,hs.size());\\n              j++;\\n            }else{\\n                hs.remove(str.charAt(i));\\n                i++;\\n            }\\n        }\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "sahilmjain03",
                        "content": "Why my code is getting output limit exceeded?\\nI tried to search the meaning of Output limit but could not relate to my code....my code returns an int, how can it exceed the limit?\\n\\n class Solution {\\n    public int lengthOfLongestSubstring(String s) \\n    {\\n        int i=0;\\n        int max=0;\\n        int n = s.length();\\n        if(n==0 || n==1)\\n        {\\n            return n;\\n        }\\n        int res[] = new int[2];\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        map.put(s.charAt(0),0);\\n        for(int j=i+1;j<n;j++)\\n        {\\n            if(map.containsKey(s.charAt(j)))\\n            {\\n                int temp = map.get(s.charAt(j)) + 1; \\n                for(i=i;i<temp;i++)\\n                {\\n                    map.remove(s.charAt(i));\\n                }\\n                System.out.println(i);\\n            }\\n            map.put(s.charAt(j),j);\\n            System.out.println(map);\\n            if(j-i+1 > max)\\n            {\\n                max = j-i+1;\\n                // System.out.println(i);\\n                // System.out.println(j);\\n                // System.out.println(max);\\n            }\\n        }\\n        return max; \\n    }\\n}  "
                    },
                    {
                        "username": "sahilmjain03",
                        "content": "Why my code is getting output limit exceeded?\\nI tried to search the meaning of Output limit but could not relate to my code....my code returns an int, how can it exceed the limit?\\n\\n class Solution {\\n    public int lengthOfLongestSubstring(String s) \\n    {\\n        int i=0;\\n        int max=0;\\n        int n = s.length();\\n        if(n==0 || n==1)\\n        {\\n            return n;\\n        }\\n        int res[] = new int[2];\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        map.put(s.charAt(0),0);\\n        for(int j=i+1;j<n;j++)\\n        {\\n            if(map.containsKey(s.charAt(j)))\\n            {\\n                int temp = map.get(s.charAt(j)) + 1; \\n                for(i=i;i<temp;i++)\\n                {\\n                    map.remove(s.charAt(i));\\n                }\\n                System.out.println(i);\\n            }\\n            map.put(s.charAt(j),j);\\n            System.out.println(map);\\n            if(j-i+1 > max)\\n            {\\n                max = j-i+1;\\n                // System.out.println(i);\\n                // System.out.println(j);\\n                // System.out.println(max);\\n            }\\n        }\\n        return max; \\n    }\\n}  "
                    },
                    {
                        "username": "Omar211",
                        "content": "i don\\'t understand the 3rd  Example any help ?"
                    },
                    {
                        "username": "shikhargupta925",
                        "content": "why a empty String is considered 1 not 0"
                    },
                    {
                        "username": "Vishal_Bairagi",
                        "content": "Best c++ approach + solution. check it out here \\n\\nhttps://www.instagram.com/reel/CkIWkWDsicx/?igshid=YmMyMTA2M2Y="
                    },
                    {
                        "username": "guo6",
                        "content": "no sliding win, just track where the char seen last time:\n  ```\nclass Solution {\n    public int lengthOfLongestSubstring(String s) {\n\n        int re = 0;\n        int end = 0;\n        int[] cm = new int[256];\n        for(int i = 1; i<=s.length(); i++) {\n            char c = s.charAt(i-1);\n            int ci = (int) c;\n            if (cm[ci] > 0) {\n                end = Math.max(end, cm[ci]);\n            }\n            cm[ci] = i;           \n            re = Math.max(re, i - end);\n        }        \n        return re;\n    }\n}\n```"
                    },
                    {
                        "username": "captain7426",
                        "content": "An interesting problem I faced. Any clue?\n\n-> Solution that works very well:\n```\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        vector<int> count(128,0);\n        int l=0,r=0,n=s.size();\n        int ans=0;\n        while (r<n) {\n            while (count[s[r]] >= 1) {\n                count[s[l]]--;\n                l++;\n            }\n\n            count[s[r]]++;\n\n            ans = max(ans, r-l+1);\n            r++;\n        }\n        return ans;\n    }\n};\n```\n\n-> Now, if I just replace the vector with an array it gives undefined behaviour.\n```\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        int count[128];\n        int l=0,r=0,n=s.size();\n        int ans=0;\n        while (r<n) {\n            while (count[s[r]] >= 1) {\n                count[s[l]]--;\n                l++;\n            }\n\n            count[s[r]]++;\n\n            ans = max(ans, r-l+1);\n            r++;\n        }\n        return ans;\n    }\n};\n```\n\nAnd the error would be like:\n```\nLine 9: Char 17: runtime error: index -13 out of bounds for type 'int [128]' (solution.cpp)\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:18:17\n```"
                    },
                    {
                        "username": "janis__",
                        "content": "You didn\\'t initialize the values of the array count to zero, leading to undefined behavior; add memset(count, 0, sizeof(count)); at the beginning of your function to initialize all elements to zero."
                    },
                    {
                        "username": "Omar211",
                        "content": "s =\\n\"pwwkew\"\\n88 / 987 testcases passed\\nOutput\\n4\\nExpected\\n3\\n\\nthe answer is \"pwke\" length 4  \\nthere is wrong in the test right?\\n\\nhere is my code \\n\\n\\n public int lengthOfLongestSubstring(String s) {\\n\\n     int result = 0;\\n        String hold = \" \";\\n        for (int i = 0; i < s.length(); i++) {\\n         for (int j = 0; j < hold.length()+1; j++) {\\n            if ((hold.indexOf(s.charAt(i)))== -1) {\\n                hold = hold+ s.substring(i, i+1);\\n                result++;\\n            }\\n         }\\n        }\\n        return result;    \\n    }"
                    },
                    {
                        "username": "ranbir7",
                        "content": "The main crux of the question is : \"when encountered a repeating character, clear the substring till the next index of repeated character \""
                    },
                    {
                        "username": "Nick989",
                        "content": "Done in Python, let me know your suggestions on this code (Time Complexity is O(N)) \\n\\ndef lengthOfLongestSubstring(self, s: str) -> int:\\n\\n        resStr = \\'\\'\\n        maxLen = -1\\n        if len(s) == 0: return 0\\n        if len(s) == 1: return 1\\n        for i in range(len(s)):\\n            \\n            if s[i] not in resStr:\\n                resStr+=s[i]\\n            else:\\n                maxLen = max(len(resStr), maxLen)\\n                ind = resStr.index(s[i])\\n                resStr = resStr[ind+1:]\\n                resStr+=s[i]\\n        maxLen = max(maxLen, len(resStr))\\n        return maxLen"
                    },
                    {
                        "username": "ranbir7",
                        "content": "I did the same thing but with a deque."
                    }
                ]
            }
        ]
    }
]