[
    {
        "title": "Length of Last Word",
        "question_content": "Given a string s consisting of words and spaces, return the length of the last word in the string.\nA word is a maximal substring consisting of non-space characters only.\n&nbsp;\nExample 1:\n\nInput: s = \"Hello World\"\nOutput: 5\nExplanation: The last word is \"World\" with length 5.\n\nExample 2:\n\nInput: s = \"   fly me   to   the moon  \"\nOutput: 4\nExplanation: The last word is \"moon\" with length 4.\n\nExample 3:\n\nInput: s = \"luffy is still joyboy\"\nOutput: 6\nExplanation: The last word is \"joyboy\" with length 6.\n\n&nbsp;\nConstraints:\n\n\t1 <= s.length <= 104\n\ts consists of only English letters and spaces ' '.\n\tThere will be at least one word in s.",
        "solutions": [
            {
                "id": 21892,
                "title": "7-lines-4ms-c-solution",
                "content": "Well, the basic idea is very simple. Start from the tail of `s` and move backwards to find the first non-space character. Then from this character, move backwards and count the number of non-space characters until we pass over the head of `s` or meet a space character. The count will then be the length of the last word.\\n\\n    class Solution {\\n    public:\\n        int lengthOfLastWord(string s) { \\n            int len = 0, tail = s.length() - 1;\\n            while (tail >= 0 && s[tail] == ' ') tail--;\\n            while (tail >= 0 && s[tail] != ' ') {\\n                len++;\\n                tail--;\\n            }\\n            return len;\\n        }\\n    };",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "class Solution {\\n    public:\\n        int lengthOfLastWord(string s) { \\n            int len = 0, tail = s.length() - 1;\\n            while (tail >= 0 && s[tail] == ' ') tail--;\\n            while (tail >= 0 && s[tail] != ' ') {\\n                len++;\\n                tail--;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 370636,
                "title": "java-0ms-100-100-single-reverse-loop-with-explanation",
                "content": "``` Java\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int length = 0;\\n\\t\\t\\n\\t\\t// We are looking for the last word so let\\'s go backward\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) != \\' \\') { // a letter is found so count\\n                length++;\\n            } else {  // it\\'s a white space instead\\n\\t\\t\\t\\t//  Did we already started to count a word ? Yes so we found the last word\\n                if (length > 0) return length;\\n            }\\n        }\\n        return length;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "``` Java\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int length = 0;\\n\\t\\t\\n\\t\\t// We are looking for the last word so let\\'s go backward\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) != \\' \\') { // a letter is found so count\\n                length++;\\n            } else {  // it\\'s a white space instead\\n\\t\\t\\t\\t//  Did we already started to count a word ? Yes so we found the last word\\n                if (length > 0) return length;\\n            }\\n        }\\n        return length;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 21878,
                "title": "a-single-line-of-code-in-java",
                "content": "    public int lengthOfLastWord(String s) {\\n        return s.trim().length()-s.trim().lastIndexOf(\" \")-1;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "    public int lengthOfLastWord(String s) {\\n        return s.trim().length()-s.trim().lastIndexOf(\" \")-1;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 847535,
                "title": "python-solution-without-split-explained",
                "content": "We can just split our string, remove all extra spaces and return length of the last word, however we need to spend `O(n)` time for this, where `n` is length of our string. There is a simple optimization: let us traverse string from the end and:\\n1. find the last element of last word: traverse from the end and find first non-space symbol.\\n2. continue traverse and find first space symbol (or beginning of string)\\n3. return `end` - `beg`.\\n\\n**Complexity**: is `O(m)`, where `m` is length of part from first symbol of last word to the end. Space complexity is `O(1)`.\\n\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s):\\n        end = len(s) - 1\\n        while end > 0 and s[end] == \" \": end -= 1\\n        beg = end\\n        while beg >= 0 and s[beg] != \" \": beg -= 1\\n        return end - beg\\n```\\n\\nIf you have any questions, feel free to ask. If you like solution and explanations, please **Upvote!**",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def lengthOfLastWord(self, s):\\n        end = len(s) - 1\\n        while end > 0 and s[end] == \" \": end -= 1\\n        beg = end\\n        while beg >= 0 and s[beg] != \" \": beg -= 1\\n        return end - beg\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3632478,
                "title": "c-solution-beats-100",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nStart searching from finish to start. Keep adding 1 as long as a letter is found. Keeping a flag to determine if we have found a letter or not. So, if we find a blank space after getting a letter we should get out of the loop.\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int siz=s.size(),kount=0,flag=0;\\n        for(int i=siz-1;i>=0;i--){\\n            if(s[i]==\\' \\'&&flag)break;\\n            if(s[i]!=\\' \\'){\\n                flag=1;\\n                kount++;\\n            }\\n        }\\n        return kount;\\n    }\\n};\\n\\n```\\n![da40578e-3278-4fca-a939-3861f2644e15_1679154045.78228.png](https://assets.leetcode.com/users/images/fc626f73-c07e-4a16-88f2-99293774ffd1_1686646782.1594946.png)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int siz=s.size(),kount=0,flag=0;\\n        for(int i=siz-1;i>=0;i--){\\n            if(s[i]==\\' \\'&&flag)break;\\n            if(s[i]!=\\' \\'){\\n                flag=1;\\n                kount++;\\n            }\\n        }\\n        return kount;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 21955,
                "title": "my-simple-solution-in-c",
                "content": "I've noticed that a lot of solutions use available library functions that return directly the positions of certain characters or do other operations like \"split\". I personally don't think that's a good idea. Firstly, these functions take some time and usually involve with iteration through the whole string. Secondly, questions like this one is intended to be a practice of detail implementation, not calling other functions. My solution like below uses only the most basic string operations and probably beats many other solutions which call other existing functions.\\n\\n     int lengthOfLastWord(const char* s) {\\n            int len = 0;\\n            while (*s) {\\n                if (*s++ != ' ')\\n                    ++len;\\n                else if (*s && *s != ' ')\\n                    len = 0;\\n        \\n            }\\n            return len;\\n        }",
                "solutionTags": [],
                "code": "I've noticed that a lot of solutions use available library functions that return directly the positions of certain characters or do other operations like \"split\". I personally don't think that's a good idea. Firstly, these functions take some time and usually involve with iteration through the whole string. Secondly, questions like this one is intended to be a practice of detail implementation, not calling other functions. My solution like below uses only the most basic string operations and probably beats many other solutions which call other existing functions.\\n\\n     int lengthOfLastWord(const char* s) {\\n            int len = 0;\\n            while (*s) {\\n                if (*s++ != ' ')\\n                    ++len;\\n                else if (*s && *s != ' ')\\n                    len = 0;\\n        \\n            }\\n            return len;\\n        }",
                "codeTag": "Unknown"
            },
            {
                "id": 22133,
                "title": "javascript-one-line-answer",
                "content": "    /**\\n     * @param {string} s\\n     * @return {number}\\n     */\\n    var lengthOfLastWord = function(s) {\\n        return s.trim().split(\" \").pop().length;\\n    };",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "    /**\\n     * @param {string} s\\n     * @return {number}\\n     */\\n    var lengthOfLastWord = function(s) {\\n        return s.trim().split(\" \").pop().length;\\n    };",
                "codeTag": "Unknown"
            },
            {
                "id": 21901,
                "title": "one-line-python-solution",
                "content": "    def lengthOfLastWord(self, s):\\n        return len(s.rstrip(' ').split(' ')[-1])\\n\\nI know this is not the solution that the question wants. Just for fun.",
                "solutionTags": [],
                "code": "    def lengthOfLastWord(self, s):\\n        return len(s.rstrip(' ').split(' ')[-1])\\n\\nI know this is not the solution that the question wants. Just for fun.",
                "codeTag": "Python3"
            },
            {
                "id": 848550,
                "title": "c-very-simple-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int ans = 0;\\n        for(int i=s.size()-1;i>=0;--i){\\n            if(s[i] == \\' \\' && ans > 0) return ans;\\n            if(s[i] != \\' \\') ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int ans = 0;\\n        for(int i=s.size()-1;i>=0;--i){\\n            if(s[i] == \\' \\' && ans > 0) return ans;\\n            if(s[i] != \\' \\') ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2757379,
                "title": "js-99-with-explanation",
                "content": "![image](https://assets.leetcode.com/users/images/2e7f99b2-50fe-47b1-8567-a16683917d6f_1667073344.9251451.png)\\n\\nTo solve this problem, you can use the **trim**() method.\\n\\nThe **trim**() method **removes** **whitespace** from both ends of a string and returns a new string, without modifying the original string.\\n\\nAfter that, we find the index of the last space (i.e., the space before the last word) and subtract this index from the total length of the string, adjusted for the index (\"-1\").\\n\\n```\\nvar lengthOfLastWord = function(s) {\\n    let trimmedString = s.trim();\\n    \\n    return trimmedString.length - trimmedString.lastIndexOf(\\' \\') - 1;\\n};\\n```\\n\\nI hope I was able to explain clearly.\\n**Happy coding!** \\uD83D\\uDE43",
                "solutionTags": [
                    "JavaScript",
                    "String"
                ],
                "code": "```\\nvar lengthOfLastWord = function(s) {\\n    let trimmedString = s.trim();\\n    \\n    return trimmedString.length - trimmedString.lastIndexOf(\\' \\') - 1;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 21927,
                "title": "my-3-line-0-ms-java-solution",
                "content": "        public int lengthOfLastWord(String s) {\\n    \\ts = s.trim();\\n        int lastIndex = s.lastIndexOf(' ') + 1;\\n        return s.length() - lastIndex;        \\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "        public int lengthOfLastWord(String s) {\\n    \\ts = s.trim();\\n        int lastIndex = s.lastIndexOf(' ') + 1;\\n        return s.length() - lastIndex;        \\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 544780,
                "title": "python-simple-solution-12-ms-11-8mb",
                "content": "```\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        wordlist = s.split()\\n        if wordlist:\\n            return len(wordlist[-1])\\n        return 0\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        wordlist = s.split()\\n        if wordlist:\\n            return len(wordlist[-1])\\n        return 0\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 21961,
                "title": "my-36-ms-python-solution",
                "content": "\\n    def lengthOfLastWord(self, s):\\n        ls = len(s)\\n        # slow and fast pointers\\n        slow = -1\\n        # iterate over trailing spaces\\n        while slow >= -ls and s[slow] == ' ':\\n            slow-=1\\n        fast = slow\\n        # iterate over last word\\n        while fast >= -ls and s[fast] != ' ':\\n            fast-=1\\n        return slow - fast",
                "solutionTags": [
                    "Python",
                    "Two Pointers"
                ],
                "code": "\\n    def lengthOfLastWord(self, s):\\n        ls = len(s)\\n        # slow and fast pointers\\n        slow = -1\\n        # iterate over trailing spaces\\n        while slow >= -ls and s[slow] == ' ':\\n            slow-=1\\n        fast = slow\\n        # iterate over last word\\n        while fast >= -ls and s[fast] != ' ':\\n            fast-=1\\n        return slow - fast",
                "codeTag": "Python3"
            },
            {
                "id": 507498,
                "title": "clean-non-cheating-python-solution",
                "content": "No splits, no len() calls, just a simple loop and two variables. This is what I would expect as an interviewer.\\n\\n```\\n# IDEA: scan from the end, increment the length counter if non-space found, otherwise keep skipping spaces\\n#       break and return the counter if space encountered AFTER we found any non-space\\n#\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        lenLast = 0\\n        for i in range(len(s)-1, -1, -1):\\n            if s[i] != \\' \\':\\n                lenLast += 1\\n            elif lenLast > 0:\\n                break\\n        return lenLast\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n# IDEA: scan from the end, increment the length counter if non-space found, otherwise keep skipping spaces\\n#       break and return the counter if space encountered AFTER we found any non-space\\n#\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        lenLast = 0\\n        for i in range(len(s)-1, -1, -1):\\n            if s[i] != \\' \\':\\n                lenLast += 1\\n            elif lenLast > 0:\\n                break\\n        return lenLast\\n```",
                "codeTag": "Java"
            },
            {
                "id": 21941,
                "title": "a-few-ways-in-javascript",
                "content": "The long way:\\n```\\nvar lengthOfLastWord = function(s) {\\n    let len = 0;\\n    let hasStarted = false;\\n    for (let i = s.length - 1; i >= 0; i--) {\\n        if (s[i] !== ' ') hasStarted = true;\\n        if (hasStarted) {\\n            if (s[i] === ' ') break;\\n            len++;\\n        }\\n    }\\n    return len;\\n};\\n```\\nShorter with `trim` and `lastIndexOf`:\\n```\\nvar lengthOfLastWord = function(s) {\\n    s = ' ' + s.trim();\\n    return s.length - s.lastIndexOf(' ') - 1;\\n};\\n```\\nAnd with `trim` and `split`:\\n```\\nvar lengthOfLastWord = function(s) {\\n    const arr = s.trim().split(' ');\\n    return arr[arr.length - 1].length;\\n};\\n```\\nShortest with regex:\\n```\\nvar lengthOfLastWord = function(s) {\\n    return (s.match(/(\\\\w+)\\\\s*$/) || [, ''])[1].length;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar lengthOfLastWord = function(s) {\\n    let len = 0;\\n    let hasStarted = false;\\n    for (let i = s.length - 1; i >= 0; i--) {\\n        if (s[i] !== ' ') hasStarted = true;\\n        if (hasStarted) {\\n            if (s[i] === ' ') break;\\n            len++;\\n        }\\n    }\\n    return len;\\n};\\n```\n```\\nvar lengthOfLastWord = function(s) {\\n    s = ' ' + s.trim();\\n    return s.length - s.lastIndexOf(' ') - 1;\\n};\\n```\n```\\nvar lengthOfLastWord = function(s) {\\n    const arr = s.trim().split(' ');\\n    return arr[arr.length - 1].length;\\n};\\n```\n```\\nvar lengthOfLastWord = function(s) {\\n    return (s.match(/(\\\\w+)\\\\s*$/) || [, ''])[1].length;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 847635,
                "title": "c-6-lines-without-using-stringstream-beats-100-0ms",
                "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int A = 0;\\n        for (int i=s.size()-1; i>=0; --i) {\\n            if (s[i] != \\' \\') ++A;\\n            else if (A) return A;\\n        }\\n        return A;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int A = 0;\\n        for (int i=s.size()-1; i>=0; --i) {\\n            if (s[i] != \\' \\') ++A;\\n            else if (A) return A;\\n        }\\n        return A;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 566499,
                "title": "right-to-left-iteration-python-o-n-time-o-1-space",
                "content": "Hi there \\uD83D\\uDC4B\\nHere is my simple solution to this problem.\\n\\n**Explanation**\\n- iterate throughout the list from right to left\\n- ignore all whitespaces\\n- when reaching the alphabet character count all adjacent non-whitespace elements and return the result when reaching a whitespace element\\n\\n**Code:**\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        result = 0\\n        for i in range(len(s)-1, -1, -1):\\n            if s[i] != \" \":\\n                result += 1\\n            elif result:\\n                return result\\n\\n        return result\\n```\\n\\n**Algorithm complexity:**\\n*Time complexity: O(n).*\\n*Space complexity: O(1).*\\n\\nIf you like my solution, I will really appreciate your upvoting. It will help other python-developers to find it faster. And as always, I wish you an enjoyable time on LeetCode. \\uD83D\\uDE0A",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        result = 0\\n        for i in range(len(s)-1, -1, -1):\\n            if s[i] != \" \":\\n                result += 1\\n            elif result:\\n                return result\\n\\n        return result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3358713,
                "title": "easy-c-solution-with-explanation-in-o-1-space-and-o-n-tc",
                "content": "**Step 1 :** From last, traverse the string till you find a starting character instead of a space(Keep Decreasing the variable i ).\\n\\n\\nFrom step 1 , we will get the starting position index of character(non-space character) from last .\\n\\n\\n**Step 2 :** Then traverse again until you find the space and increment the counter variable to get the length.\\n\\n//    Time Complexity: O(n)\\n//    Space Complexity: O(1)\\n\\n```\\nclass Solution {\\npublic:\\nint lengthOfLastWord(string s) {\\n    int count = 0;\\n    int i = s.length() - 1;\\n    while (i >= 0 && s[i] == \\' \\') {\\n        i--;\\n    }\\n    while (i >= 0 && s[i] != \\' \\') {\\n        count++;\\n        i--;\\n    }\\n    return count;\\n\\n}\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\nint lengthOfLastWord(string s) {\\n    int count = 0;\\n    int i = s.length() - 1;\\n    while (i >= 0 && s[i] == \\' \\') {\\n        i--;\\n    }\\n    while (i >= 0 && s[i] != \\' \\') {\\n        count++;\\n        i--;\\n    }\\n    return count;\\n\\n}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3753439,
                "title": "easy-explanation-beats-100",
                "content": "# Please Upvote if you feel it easy\\uD83D\\uDE0A\\n# Code\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int lenthOfLastWord = 0;\\n\\n        // we need last word so let traverse from last to first\\n        for(int i=s.length()-1;i>=0;i--) {\\n            // if our char is not space then it will defenately a word\\n            if(s.charAt(i)!=\\' \\') {\\n                //counting the length\\n                lenthOfLastWord++;\\n            }else{\\n                // if \" \" space comes after word we only need to return the length of the word\\n                if(lenthOfLastWord>0) return lenthOfLastWord;\\n            }\\n        }\\n        // if string contains only single word then this return works...\\n        return lenthOfLastWord;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int lenthOfLastWord = 0;\\n\\n        // we need last word so let traverse from last to first\\n        for(int i=s.length()-1;i>=0;i--) {\\n            // if our char is not space then it will defenately a word\\n            if(s.charAt(i)!=\\' \\') {\\n                //counting the length\\n                lenthOfLastWord++;\\n            }else{\\n                // if \" \" space comes after word we only need to return the length of the word\\n                if(lenthOfLastWord>0) return lenthOfLastWord;\\n            }\\n        }\\n        // if string contains only single word then this return works...\\n        return lenthOfLastWord;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 22061,
                "title": "simple-java-solution",
                "content": "\\n    public int lengthOfLastWord(String s) {\\n        String use = s.trim();\\n        int count = 0;\\n        for (int i = use.length() - 1; i >= 0; i--) {\\n            if (use.charAt(i) != ' ') count++;\\n            else break;\\n        }\\n        return count;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "\\n    public int lengthOfLastWord(String s) {\\n        String use = s.trim();\\n        int count = 0;\\n        for (int i = use.length() - 1; i >= 0; i--) {\\n            if (use.charAt(i) != ' ') count++;\\n            else break;\\n        }\\n        return count;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3169609,
                "title": "100-beat-0ms-run-time-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n      stack<char> s1;\\n      int count=0;\\n      for(int i=0;i<s.size();i++){\\n          s1.push(s[i]);\\n      }\\n//here we push all the element of the string to stack\\n\\n/*\\nnow we will pop() all the blank spaces from the top of stack so \\nthat we reach the last later of the last word.\\n*/\\n\\n    while(s1.top()==\\' \\')s1.pop();\\n\\n/*\\nnow we run the while loop util the stack is empty in the case of \\nonly one word is there or the blank space comes which seperate the two words.\\n\\n*/\\n\\n      while(!s1.empty()&&s1.top()!=\\' \\'){\\n        count++;\\n        s1.pop();\\n          \\n    }\\n// now we itterate the count to count the length of the last word and return  it.\\n\\n    return count;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n      stack<char> s1;\\n      int count=0;\\n      for(int i=0;i<s.size();i++){\\n          s1.push(s[i]);\\n      }\\n//here we push all the element of the string to stack\\n\\n/*\\nnow we will pop() all the blank spaces from the top of stack so \\nthat we reach the last later of the last word.\\n*/\\n\\n    while(s1.top()==\\' \\')s1.pop();\\n\\n/*\\nnow we run the while loop util the stack is empty in the case of \\nonly one word is there or the blank space comes which seperate the two words.\\n\\n*/\\n\\n      while(!s1.empty()&&s1.top()!=\\' \\'){\\n        count++;\\n        s1.pop();\\n          \\n    }\\n// now we itterate the count to count the length of the last word and return  it.\\n\\n    return count;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 847461,
                "title": "c-super-simple-3-line-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        istringstream ss(s); string word; \\n        while (ss) ss >> word; \\n        return word.length();\\n    }\\n};\\n```\\n**Like it? please upvote...**",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        istringstream ss(s); string word; \\n        while (ss) ss >> word; \\n        return word.length();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 22201,
                "title": "228ms-java-solution",
                "content": "1 - Use 2 loops. One to locate the last non-space character, one to count.\\n\\n\\n    public int lengthOfLastWord(String s) {\\n        //228ms\\n        int lenIndex = s.length()-1;\\n        int len = 0;\\n\\n        /*can also use while here, resulting in 264ms\\n        while (lenIndex>=0 && s.charAt(lenIndex)==' ') lenIndex--;*/\\n        \\n        /*or use trim - 324ms\\n        s = s.trim();*/\\n\\n        for (int i=lenIndex; i>=0 && s.charAt(i)==' '; i--) \\n            lenIndex--;\\n        \\n        for (int i=lenIndex; i>=0 && s.charAt(i)!=' '; i--) \\n            len++;\\n        return len;\\n    }\\n\\n\\n\\n\\n2 - Use split\\n\\n        //292ms\\n        String[] words = s.split(\" \");\\n        if (words.length==0) return 0;\\n        else return words[words.length-1].length();\\n \\n\\n3 - use lastIndexOf\\n       \\n        //308ms\\n        return s.trim().length() - s.trim().lastIndexOf(\" \") - 1;",
                "solutionTags": [
                    "Java"
                ],
                "code": "1 - Use 2 loops. One to locate the last non-space character, one to count.\\n\\n\\n    public int lengthOfLastWord(String s) {\\n        //228ms\\n        int lenIndex = s.length()-1;\\n        int len = 0;\\n\\n        /*can also use while here, resulting in 264ms\\n        while (lenIndex>=0 && s.charAt(lenIndex)==' ') lenIndex--;*/\\n        \\n        /*or use trim - 324ms\\n        s = s.trim();*/\\n\\n        for (int i=lenIndex; i>=0 && s.charAt(i)==' '; i--) \\n            lenIndex--;\\n        \\n        for (int i=lenIndex; i>=0 && s.charAt(i)!=' '; i--) \\n            len++;\\n        return len;\\n    }\\n\\n\\n\\n\\n2 - Use split\\n\\n        //292ms\\n        String[] words = s.split(\" \");\\n        if (words.length==0) return 0;\\n        else return words[words.length-1].length();\\n \\n\\n3 - use lastIndexOf\\n       \\n        //308ms\\n        return s.trim().length() - s.trim().lastIndexOf(\" \") - 1;",
                "codeTag": "Unknown"
            },
            {
                "id": 2656099,
                "title": "python-one-liner-easy-to-understand",
                "content": "# Explanation:\\n- The `strip()` function removes the spaces\\n- The `split()` function splits the string into a list seperated by their spaces\\n- `[-1]` gets the last element of the list\\n- The `len()` function returns the length of the string\\n\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.strip().split(\" \")[-1])\\n\\t\\t",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "# Explanation:\\n- The `strip()` function removes the spaces\\n- The `split()` function splits the string into a list seperated by their spaces\\n- `[-1]` gets the last element of the list\\n- The `len()` function returns the length of the string\\n\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.strip().split(\" \")[-1])\\n\\t\\t",
                "codeTag": "Java"
            },
            {
                "id": 1912548,
                "title": "100-fastest-swift-solution-time-o-n-space-o-1",
                "content": "```\\nclass Solution {\\n    // - Complexity:\\n    //   - time: O(n), where n is the length of s.\\n    //   - space: O(1), only constant space is used.\\n\\n    func lengthOfLastWord(_ s: String) -> Int {\\n        var ans = 0\\n\\n        for c in s.reversed() {\\n            if c != \" \" {\\n                ans += 1\\n            } else if ans > 0 {\\n                return ans\\n            }\\n        }\\n\\n        return ans\\n    }\\n\\n}\\n```\\n\\nLet me know in comments if you have any doubts. I will be happy to answer.\\n\\nPlease upvote if you found the solution useful.",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    // - Complexity:\\n    //   - time: O(n), where n is the length of s.\\n    //   - space: O(1), only constant space is used.\\n\\n    func lengthOfLastWord(_ s: String) -> Int {\\n        var ans = 0\\n\\n        for c in s.reversed() {\\n            if c != \" \" {\\n                ans += 1\\n            } else if ans > 0 {\\n                return ans\\n            }\\n        }\\n\\n        return ans\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1320947,
                "title": "rust-one-liner",
                "content": "```\\nimpl Solution {\\n    pub fn length_of_last_word(s: String) -> i32 {\\n        s.trim_end()\\n            .chars()\\n            .rev()\\n            .take_while(|c| c.is_alphabetic())\\n            .count() as i32\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn length_of_last_word(s: String) -> i32 {\\n        s.trim_end()\\n            .chars()\\n            .rev()\\n            .take_while(|c| c.is_alphabetic())\\n            .count() as i32\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3948738,
                "title": "java-runtime-0-ms-beats-100",
                "content": "# Intuition\\nMy initial approach to solving this problem involves finding the length of the last word in a given string. I plan to iterate through the string in reverse and look for the first non-space character that is preceded by a space character. This will help me identify the beginning of the last word.\\n\\n# Approach\\nI will iterate through the given string in reverse and look for the first non-space character that is preceded by a space character. Once I find such a character, I will calculate the length of the last word by counting the characters until the end of the string or until another space character is encountered. I\\'ll return the length of the last word as the result.\\n\\n# Complexity\\n- Time complexity: O(n)\\n  The algorithm iterates through the string once in the worst case, where \\'n\\' is the length of the string.\\n\\n- Space complexity: O(1)\\n  The algorithm uses a constant amount of extra space for variables\\n\\n# Code\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n\\n        int first = 0;\\n        for(int i = s.length()-1 ; i>0;i--){\\n\\n\\n            if(s.charAt(i)!=\\' \\' && s.charAt(i-1) == \\' \\' ){\\n\\n                 first = i;\\n\\n                break;\\n\\n\\n            }\\n\\n\\n        }\\n\\n        String temp  = s.substring(first).trim();\\n\\n        return temp.length();\\n    }\\n        \\n    }\\n\\n```\\n![c0504eaf-5fb8-4a1d-a769-833262d1b86e_1674433591.3836212.webp](https://assets.leetcode.com/users/images/8a3b41d1-f0ca-472f-a9f7-8346b34a824e_1693297402.2918687.webp)",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n\\n        int first = 0;\\n        for(int i = s.length()-1 ; i>0;i--){\\n\\n\\n            if(s.charAt(i)!=\\' \\' && s.charAt(i-1) == \\' \\' ){\\n\\n                 first = i;\\n\\n                break;\\n\\n\\n            }\\n\\n\\n        }\\n\\n        String temp  = s.substring(first).trim();\\n\\n        return temp.length();\\n    }\\n        \\n    }\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2028722,
                "title": "c-java-c-python-javascript-typescript-easy-solutions-clean-code-with-comment",
                "content": "# Frequently encountered in technical interviews\\n```\\nstd::vector<std::pair<std::string, int>> interview_frequency= {\\n    {\"Amazon\", 3},\\n    {\"Microsoft\", 2}\\n};\\n```\\n\\n# Solution\\n\\nThe problem \"Length of Last Word\" asks us to find the length of the last word in a given string. A word in this context is defined as a maximal substring consisting of non-space characters only.\\n\\nFor example, consider the string \"Hello World\". The last word in this string is \"World\", and its length is 5.\\n\\n**Time complexity :** **O(n)**\\n**Space complexity :** **O(1)**\\n```C++ []\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int res = 0;\\n        for (int i = s.length()-1; i >= 0;) {\\n            // Check if the current character is not a space\\n            if (s[i--] != \\' \\')\\n                res++; // Increment the length of the last word\\n            else if (res > 0)\\n                return res; // Return the length if a space is encountered after counting some characters\\n        }\\n        return res; // Return the length of the last word\\n    }\\n};\\n```\\n```java []\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int res = 0;\\n        for (int i = s.length()-1;i>=0;) {\\n            if (s.charAt(i--) != \\' \\') res++;\\n            else if(res>0) return res;\\n        }\\n        return res;\\n    }\\n}\\n```\\n```csharp []\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        int res = 0;\\n        for (int i = s.Length-1;i>=0;) {\\n            if (s[i--] != \\' \\') res++;\\n            else if(res>0) return res;\\n        }\\n        return res;\\n    }\\n}\\n```\\n```javascript []\\nvar lengthOfLastWord = function(s) {\\n    var res = 0;\\n    for (var i = s.length-1;i>=0;) {\\n        if (s.charAt(i--) != \\' \\') res++;\\n        else if(res>0) return res;\\n    }\\n    return res;\\n};\\n```\\n```TypeScript []\\nfunction lengthOfLastWord(s: string): number {\\n    var res = 0;\\n    for (var i = s.length-1;i>=0;) {\\n        if (s.charAt(i--) != \\' \\') res++;\\n        else if(res>0) return res;\\n    }\\n    return res;\\n};\\n```\\nSome other solutions\\n```C++ []\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n      int res = 0; // Initialize the variable to store the length of the last word\\n      int tail = s.length() - 1; // Initialize the variable to track the index of the last character\\n      \\n      // Skip trailing spaces by moving the tail index backwards\\n      while (tail >= 0 && s[tail] == \\' \\')\\n          tail--;\\n      // Count the characters of the last word by moving the tail index backwards\\n      while (tail >= 0 && s[tail] != \\' \\') {\\n          res++; // Increment the length of the last word\\n          tail--; // Move the tail index to the previous character\\n      }\\n      return res; // Return the length of the last word\\n  }\\n};\\n```\\n```csharp []\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {            \\n        return (s.TrimEnd()).Split(\\' \\').Last().Length;\\n    }\\n}\\n```\\n```python []\\ndef lengthOfLastWord(self, s):\\n    return len(s.rstrip(\\' \\').split(\\' \\')[-1])\\n```\\nC#/Python Solution:\\n\\n**Time Complexity: O(n)\\nSpace Complexity: O(n)**\\nThe solution trims the input string to remove trailing whitespace characters, splits the trimmed string into an array of words, and returns the length of the last word.\\n\\nC++ Solution:\\n\\n**Time Complexity: O(n)\\nSpace Complexity: O(1)**\\nThe solution iterates through the string to find the last non-space character, then counts the length of the last word by iterating backwards from that character.\\n\\nBoth solutions have linear time complexity, but the C#/Python solution has additional space complexity due to creating new strings and arrays, while the C++ solution uses only a few integer variables.",
                "solutionTags": [
                    "Java",
                    "C#",
                    "JavaScript",
                    "TypeScript",
                    "String"
                ],
                "code": "```\\nstd::vector<std::pair<std::string, int>> interview_frequency= {\\n    {\"Amazon\", 3},\\n    {\"Microsoft\", 2}\\n};\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int res = 0;\\n        for (int i = s.length()-1; i >= 0;) {\\n            // Check if the current character is not a space\\n            if (s[i--] != \\' \\')\\n                res++; // Increment the length of the last word\\n            else if (res > 0)\\n                return res; // Return the length if a space is encountered after counting some characters\\n        }\\n        return res; // Return the length of the last word\\n    }\\n};\\n```\n```java []\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int res = 0;\\n        for (int i = s.length()-1;i>=0;) {\\n            if (s.charAt(i--) != \\' \\') res++;\\n            else if(res>0) return res;\\n        }\\n        return res;\\n    }\\n}\\n```\n```csharp []\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        int res = 0;\\n        for (int i = s.Length-1;i>=0;) {\\n            if (s[i--] != \\' \\') res++;\\n            else if(res>0) return res;\\n        }\\n        return res;\\n    }\\n}\\n```\n```javascript []\\nvar lengthOfLastWord = function(s) {\\n    var res = 0;\\n    for (var i = s.length-1;i>=0;) {\\n        if (s.charAt(i--) != \\' \\') res++;\\n        else if(res>0) return res;\\n    }\\n    return res;\\n};\\n```\n```TypeScript []\\nfunction lengthOfLastWord(s: string): number {\\n    var res = 0;\\n    for (var i = s.length-1;i>=0;) {\\n        if (s.charAt(i--) != \\' \\') res++;\\n        else if(res>0) return res;\\n    }\\n    return res;\\n};\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n      int res = 0; // Initialize the variable to store the length of the last word\\n      int tail = s.length() - 1; // Initialize the variable to track the index of the last character\\n      \\n      // Skip trailing spaces by moving the tail index backwards\\n      while (tail >= 0 && s[tail] == \\' \\')\\n          tail--;\\n      // Count the characters of the last word by moving the tail index backwards\\n      while (tail >= 0 && s[tail] != \\' \\') {\\n          res++; // Increment the length of the last word\\n          tail--; // Move the tail index to the previous character\\n      }\\n      return res; // Return the length of the last word\\n  }\\n};\\n```\n```csharp []\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {            \\n        return (s.TrimEnd()).Split(\\' \\').Last().Length;\\n    }\\n}\\n```\n```python []\\ndef lengthOfLastWord(self, s):\\n    return len(s.rstrip(\\' \\').split(\\' \\')[-1])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3778635,
                "title": "c-java-python3-javascript-solutions-iteration-or-trim",
                "content": "The easist way may be iterate from the end of the string, can we do that with a different way?\\n**Of course !**\\n\\n\\u2B50**See more Code and Explanation : [https://zyrastory.com/en/coding-en/leetcode-en/leetcode-58-length-of-last-word-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-58-length-of-last-word-solution-and-explanation-en/)**\\n\\n##### C# Examples\\n**1. Iteration**\\n```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        \\n        int cnt = 0;\\n        \\n        for(int i = s.Length-1;i>=0;i--)\\n        {\\n            if(Char.IsWhiteSpace(s[i]))\\n            {\\n                if(cnt>0)\\n                {\\n                    return cnt;    \\n                }\\n                continue;\\n            }\\n            \\n            cnt+=1;\\n        }\\n        return cnt;\\n    }\\n}\\n```\\n\\n**2. Split + Trim**\\n```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        s = s.TrimEnd();                 //or you can use Trim()\\n        string[] tmp = s.Split(\\' \\');\\n        return tmp[tmp.Length-1].Length; \\n    }\\n}\\n```\\nIs there an easier way in C#? Yes!\\n\\n---\\n\\n\\n##### Java Solution\\n**1. Iteration**\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int cnt = 0;\\n        \\n        for(int i = s.length()-1;i>=0;i--)\\n        {\\n            if(s.charAt(i)==\\' \\')\\n            {\\n                if(cnt>0)\\n                {\\n                    return cnt;    \\n                }\\n                continue;\\n            }\\n            \\n            cnt+=1;\\n        }\\n        return cnt;\\n    }\\n}\\n```\\n\\n\\n**2.**\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        s = s.trim();\\n        String[] arr =  s.split(\"\\\\\\\\s+\");\\n        \\n        return arr[arr.length-1].length();\\n    }\\n}\\n```\\n\\n---\\n\\n\\n\\n##### Python3 Solution\\n**1. Iteration**\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        cnt = 0;\\n        for i in range(len(s)-1,-1,-1):\\n            if(s[i]== \\' \\'):\\n                if cnt>0 :\\n                    return cnt\\n                continue\\n            cnt+=1;\\n        return cnt\\n```\\n\\n**2.**\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        s = s.rstrip()  #or strip\\n        return len(s.split()[-1])\\n```\\n\\n---\\n\\n\\n##### JavaScript Solution\\n**1. Iteration**\\n```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLastWord = function(s) {\\n    var cnt = 0;\\n\\n    for(var i = s.length-1;i>=0;i--)\\n    {\\n        if(s[i]==\\' \\')\\n        {\\n            if(cnt>0)\\n            {\\n                return cnt;    \\n            }\\n            continue;\\n        }\\n\\n        cnt+=1;\\n    }\\n    return cnt;\\n};\\n```\\n\\n\\n**2.**\\n```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLastWord = function(s) {\\n    s = s.trim();\\n    var arr = s.split(\\' \\');\\n    return arr[arr.length-1].length;\\n};\\n```\\n\\n\\n\\nIf you got any problem about the explanation or you need other programming language solution, please feel free to leave your comment.\\n\\n\\uD83E\\uDDE1See more problems solutions - **[Zyrastory - LeetCode Solution](https://zyrastory.com/en/category/coding-en/leetcode-en/)**\\n\\nThanks!",
                "solutionTags": [
                    "Java",
                    "Python3",
                    "C#",
                    "JavaScript"
                ],
                "code": "```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        \\n        int cnt = 0;\\n        \\n        for(int i = s.Length-1;i>=0;i--)\\n        {\\n            if(Char.IsWhiteSpace(s[i]))\\n            {\\n                if(cnt>0)\\n                {\\n                    return cnt;    \\n                }\\n                continue;\\n            }\\n            \\n            cnt+=1;\\n        }\\n        return cnt;\\n    }\\n}\\n```\n```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        s = s.TrimEnd();                 //or you can use Trim()\\n        string[] tmp = s.Split(\\' \\');\\n        return tmp[tmp.Length-1].Length; \\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int cnt = 0;\\n        \\n        for(int i = s.length()-1;i>=0;i--)\\n        {\\n            if(s.charAt(i)==\\' \\')\\n            {\\n                if(cnt>0)\\n                {\\n                    return cnt;    \\n                }\\n                continue;\\n            }\\n            \\n            cnt+=1;\\n        }\\n        return cnt;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        s = s.trim();\\n        String[] arr =  s.split(\"\\\\\\\\s+\");\\n        \\n        return arr[arr.length-1].length();\\n    }\\n}\\n```\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        cnt = 0;\\n        for i in range(len(s)-1,-1,-1):\\n            if(s[i]== \\' \\'):\\n                if cnt>0 :\\n                    return cnt\\n                continue\\n            cnt+=1;\\n        return cnt\\n```\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        s = s.rstrip()  #or strip\\n        return len(s.split()[-1])\\n```\n```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLastWord = function(s) {\\n    var cnt = 0;\\n\\n    for(var i = s.length-1;i>=0;i--)\\n    {\\n        if(s[i]==\\' \\')\\n        {\\n            if(cnt>0)\\n            {\\n                return cnt;    \\n            }\\n            continue;\\n        }\\n\\n        cnt+=1;\\n    }\\n    return cnt;\\n};\\n```\n```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLastWord = function(s) {\\n    s = s.trim();\\n    var arr = s.split(\\' \\');\\n    return arr[arr.length-1].length;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2750961,
                "title": "java-runtime-0ms-faster-than-100-memory-usage-less-than-95-91",
                "content": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        String trim = s.trim();\\n        int afterLastSpaceIndex = trim.lastIndexOf(\\' \\') + 1;\\n        return trim.length() - afterLastSpaceIndex;\\n    }\\n}\\n```\\n\\n![image](https://assets.leetcode.com/users/images/b10a2d94-59cd-4b63-9ec1-f0de3561c30b_1666931066.870219.png)\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        String trim = s.trim();\\n        int afterLastSpaceIndex = trim.lastIndexOf(\\' \\') + 1;\\n        return trim.length() - afterLastSpaceIndex;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1738796,
                "title": "solution-swift-length-of-last-word-test-cases",
                "content": "```swift\\nclass Solution {\\n    func lengthOfLastWord(_ s: String) -> Int {\\n        guard let word = s.split(separator: \" \").last else { return 0 }\\n        return word.count\\n    }\\n}\\n```\\n\\n---\\n\\n<p>\\n<details>\\n<summary>\\n<img src=\"https://git.io/JDblm\" height=\"24\">\\n<b>TEST CASES</b>\\n</summary>\\n\\n<p><pre>\\n<b>Result:</b> Executed 3 tests, with 0 failures (0 unexpected) in 0.010 (0.012) seconds\\n</pre></p>\\n\\n```swift\\nimport XCTest\\n\\nclass Tests: XCTestCase {\\n    \\n    private let solution = Solution()\\n    \\n    // The last word is \"World\" with length 5.\\n    func test0() {\\n        let value = solution.lengthOfLastWord(\"Hello World\")\\n        XCTAssertEqual(value, 5)\\n    }\\n    \\n    // The last word is \"moon\" with length 4.\\n    func test1() {\\n        let value = solution.lengthOfLastWord(\"   fly me   to   the moon  \")\\n        XCTAssertEqual(value, 4)\\n    }\\n    \\n    // The last word is \"joyboy\" with length 6.\\n    func test2() {\\n        let value = solution.lengthOfLastWord(\"luffy is still joyboy\")\\n        XCTAssertEqual(value, 6)\\n    }\\n}\\n\\nTests.defaultTestSuite.run()\\n```\\n\\n</details>\\n</p>",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```swift\\nclass Solution {\\n    func lengthOfLastWord(_ s: String) -> Int {\\n        guard let word = s.split(separator: \" \").last else { return 0 }\\n        return word.count\\n    }\\n}\\n```\n```swift\\nimport XCTest\\n\\nclass Tests: XCTestCase {\\n    \\n    private let solution = Solution()\\n    \\n    // The last word is \"World\" with length 5.\\n    func test0() {\\n        let value = solution.lengthOfLastWord(\"Hello World\")\\n        XCTAssertEqual(value, 5)\\n    }\\n    \\n    // The last word is \"moon\" with length 4.\\n    func test1() {\\n        let value = solution.lengthOfLastWord(\"   fly me   to   the moon  \")\\n        XCTAssertEqual(value, 4)\\n    }\\n    \\n    // The last word is \"joyboy\" with length 6.\\n    func test2() {\\n        let value = solution.lengthOfLastWord(\"luffy is still joyboy\")\\n        XCTAssertEqual(value, 6)\\n    }\\n}\\n\\nTests.defaultTestSuite.run()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 22003,
                "title": "java-0ms-solution",
                "content": "Java simple 0ms solution:\\n\\n    public int lengthOfLastWord(String s) {\\n        if (null == s || s.trim().length() == 0) return 0;\\n        \\n        s = s.trim();\\n        String lastWord = s.substring(s.lastIndexOf(\" \") + 1);\\n        return lastWord.length();\\n    }",
                "solutionTags": [],
                "code": "Java simple 0ms solution:\\n\\n    public int lengthOfLastWord(String s) {\\n        if (null == s || s.trim().length() == 0) return 0;\\n        \\n        s = s.trim();\\n        String lastWord = s.substring(s.lastIndexOf(\" \") + 1);\\n        return lastWord.length();\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3676418,
                "title": "fastest-optimum-solution-java-python-c",
                "content": "## ***Please Upvote my solution, if you find it helpful ;)***\\n\\n# Intuition\\nThe intuition behind the solution is to iterate through the given string and keep track of the length of the last word encountered. By considering spaces as separators between words, we can determine the length of the last word by counting the characters until the next space or the end of the string.\\n# Approach\\n1. Initialize a count variable to 0. This variable will keep track of the length of the last word.\\n1. Create a boolean variable called space and set it to false. This variable will help identify when a space character is encountered.\\n1. Iterate through each character of the string using a for loop.\\n1. Check if the current character is a space character by comparing it to \\' \\'. If it is, set the space variable to true.\\n1. If the current character is not a space character and the space variable is true, it means we have encountered the first character of a new word. In this case, set the count to 1 and reset the space variable to false.\\n1. If the current character is not a space character and the space variable is false, it means we are still in the middle of a word. In this case, increment the count by 1.\\n1. After iterating through all the characters, the count will hold the length of the last word in the string.\\n1. Return the count as the result.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of this approach is $$O(n)$$, where n is the length of the input string. We iterate through the string once to determine the length of the last word.\\n\\n- Space complexity:\\nThe space complexity of this approach is $$O(1)$$ since we are using a constant amount of additional space to store the count and the space flag, regardless of the size of the input string.\\n\\n# Code\\n\\n```java []\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n\\n        int count = 0;          // variable to store the length of the last word\\n        boolean space = false;  // flag to track if a space has been encountered\\n\\n        for (int i = 0; i < s.length(); i++) {\\n            if (s.charAt(i) == \\' \\') {\\n                space = true;  // mark that a space has been encountered\\n            } else if (s.charAt(i) != \\' \\' && space == true) {\\n                count = 1;    // start counting a new word, set count to 1\\n                space = false; // reset the space flag\\n            } else {\\n                count++;      // increment the count for the current word\\n            }\\n        }\\n        return count;  // return the length of the last word\\n    }\\n}\\n```\\n```python []\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        count = 0  # Variable to store the length of the last word\\n        space = False  # Boolean variable to track if a space is encountered\\n        \\n        # Iterate through each character in the string\\n        for i in xrange(len(s)):\\n            if s[i] == \\' \\':  # If a space character is encountered\\n                space = True\\n            elif s[i] != \\' \\' and space:  # If a non-space character is encountered after a space\\n                count = 1  # Start counting a new word\\n                space = False\\n            else:\\n                count += 1  # Increment the count for non-space characters\\n            \\n        return count\\n\\n```\\n```C++ []\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count = 0;  // Variable to store the length of the last word\\n        bool space = false;  // Boolean variable to track if a space is encountered\\n        \\n        // Iterate through each character in the string\\n        for (int i = 0; i < s.length(); i++) {\\n            if (s[i] == \\' \\') {  // If a space character is encountered\\n                space = true;\\n            } else if (s[i] != \\' \\' && space) {  // If a non-space character is encountered after a space\\n                count = 1;  // Start counting a new word\\n                space = false;\\n            } else {\\n                count++;  // Increment the count for non-space characters\\n            }\\n        }\\n        \\n        return count;\\n    }\\n};\\n\\n```\\n\\n***Please Upvote my solution, if you find it helpful ;)***\\n![6a87bc25-d70b-424f-9e60-7da6f345b82a_1673875931.8933976.jpeg](https://assets.leetcode.com/users/images/7e6e91bb-0e02-4048-9094-8660e8448efe_1687595694.1561787.jpeg)\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Two Pointers",
                    "String"
                ],
                "code": "```java []\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n\\n        int count = 0;          // variable to store the length of the last word\\n        boolean space = false;  // flag to track if a space has been encountered\\n\\n        for (int i = 0; i < s.length(); i++) {\\n            if (s.charAt(i) == \\' \\') {\\n                space = true;  // mark that a space has been encountered\\n            } else if (s.charAt(i) != \\' \\' && space == true) {\\n                count = 1;    // start counting a new word, set count to 1\\n                space = false; // reset the space flag\\n            } else {\\n                count++;      // increment the count for the current word\\n            }\\n        }\\n        return count;  // return the length of the last word\\n    }\\n}\\n```\n```python []\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        count = 0  # Variable to store the length of the last word\\n        space = False  # Boolean variable to track if a space is encountered\\n        \\n        # Iterate through each character in the string\\n        for i in xrange(len(s)):\\n            if s[i] == \\' \\':  # If a space character is encountered\\n                space = True\\n            elif s[i] != \\' \\' and space:  # If a non-space character is encountered after a space\\n                count = 1  # Start counting a new word\\n                space = False\\n            else:\\n                count += 1  # Increment the count for non-space characters\\n            \\n        return count\\n\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count = 0;  // Variable to store the length of the last word\\n        bool space = false;  // Boolean variable to track if a space is encountered\\n        \\n        // Iterate through each character in the string\\n        for (int i = 0; i < s.length(); i++) {\\n            if (s[i] == \\' \\') {  // If a space character is encountered\\n                space = true;\\n            } else if (s[i] != \\' \\' && space) {  // If a non-space character is encountered after a space\\n                count = 1;  // Start counting a new word\\n                space = false;\\n            } else {\\n                count++;  // Increment the count for non-space characters\\n            }\\n        }\\n        \\n        return count;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3624986,
                "title": "code-whithout-using-split-beginner-friendly-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe given code is an implementation of a method named lengthOfLastWord in a class named Solution. This method takes a string s as input and returns the length of the last word in the string.\\n\\nHere\\'s a step-by-step explanation of how the code works:\\n\\nThe input string s is trimmed using the trim() method. This removes any leading or trailing whitespace from the string.\\n\\nThe variable op is initialized to 0. This variable will store the length of the last word.\\n\\nA for loop is used to iterate over the characters of the string s starting from the end (i.e., from s.length()-1 to 0).\\n\\nInside the loop, it checks if the current character is a space (\\' \\'). If it is, it means that the last word has ended, so the loop is exited using the break statement.\\n\\nIf the current character is not a space, the op variable is incremented by 1, indicating that another character has been encountered in the last word.\\n\\nFinally, the method returns the value of op, which represents the length of the last word in the input string.\\n\\nThe code assumes that the input string contains words separated by a single space and there are no leading or trailing spaces within the last word.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe approach used in the given code is quite straightforward and intuitive. Here\\'s a breakdown of the approach:\\n\\nThe first step is to remove any leading or trailing whitespace from the input string. This is done using the trim() method. This ensures that any spaces before or after the last word are ignored.\\n\\nAfter trimming the string, the variable op is initialized to 0. This variable will store the length of the last word.\\n\\nThe for loop iterates over the characters of the string starting from the end (i.e., from s.length()-1 to 0). This is done to find the last word in the string.\\n\\nInside the loop, it checks if the current character is a space (\\' \\'). If it is, it means that the last word has ended. Therefore, the loop is exited using the break statement.\\n\\nIf the current character is not a space, it means that another character is a part of the last word. In that case, the op variable is incremented by 1.\\n\\nOnce the loop finishes, the value of op represents the length of the last word in the input string.\\n\\nThe overall approach is to trim the string, then start from the end and iterate backwards until a space is encountered, counting the characters in the last word. The loop breaks as soon as a space is found, assuming there are no trailing spaces within the last word. The final count of characters in the last word is returned as the result.\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        s=s.trim();\\n        int op=0;\\n        for(int i=s.length()-1;i>=0;i--){\\n            \\n            if(s.charAt(i)==\\' \\'){\\n                break;\\n            }\\n            op++;\\n        }\\n        return op;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        s=s.trim();\\n        int op=0;\\n        for(int i=s.length()-1;i>=0;i--){\\n            \\n            if(s.charAt(i)==\\' \\'){\\n                break;\\n            }\\n            op++;\\n        }\\n        return op;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3276701,
                "title": "easy-java-solution-runtime-0ms-reverse-loop",
                "content": "\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe will put our iterator on last index of string and will go through the string in reverse. \\nAs we move behind we will update our length till the point we get a blank space. \\nAs soon as we get a blank space we will check if length>0, if yes then we will return the length.\\n\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int length = 0;\\n\\n        for(int i=s.length()-1 ; i>=0 ; i--)\\n        {\\n            if(s.charAt(i)!= \\' \\')\\n                length++;\\n            else\\n                if(length>0) return length;\\n        }\\n        return length;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int length = 0;\\n\\n        for(int i=s.length()-1 ; i>=0 ; i--)\\n        {\\n            if(s.charAt(i)!= \\' \\')\\n                length++;\\n            else\\n                if(length>0) return length;\\n        }\\n        return length;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3228879,
                "title": "java-0ms-100-faster-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe main goal is to find the length of the last word in the string.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe direct and easy approach is to split the string using split() function and storing it in an array. Giving the length of the last string in the array will provide you the result but its not as fast as this approach. Traversing from the last until you find the \\' \\' and then returning lengthOfString-1-i where i\\'th character is your \\' \\'.\\n\\n \\n![image.png](https://assets.leetcode.com/users/images/66b5f707-7b7d-4fcb-a79a-01fc65f45404_1677332141.8436842.png)\\n\\nOthers are the exceptions that are covered in the test cases.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        if(s.length()==1 && s.charAt(0)!=\\' \\'){\\n            return 1;\\n        }\\n        int n=s.length()-1;\\n        for(int i=s.length()-1;i>=0;i--){\\n            if(s.charAt(i)==\\' \\'){\\n                if(n-i!=0 && s.charAt(i+1)!=\\' \\'){\\n                    \\n                    return n-i;\\n                } \\n                else n=i-1;    \\n            }\\n        }\\n        if(s.charAt(0)!=\\' \\'){\\n            \\n            return n+1;\\n        }\\n        return 0;\\n    }\\n    \\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        if(s.length()==1 && s.charAt(0)!=\\' \\'){\\n            return 1;\\n        }\\n        int n=s.length()-1;\\n        for(int i=s.length()-1;i>=0;i--){\\n            if(s.charAt(i)==\\' \\'){\\n                if(n-i!=0 && s.charAt(i+1)!=\\' \\'){\\n                    \\n                    return n-i;\\n                } \\n                else n=i-1;    \\n            }\\n        }\\n        if(s.charAt(0)!=\\' \\'){\\n            \\n            return n+1;\\n        }\\n        return 0;\\n    }\\n    \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1015471,
                "title": "java-faster-than-100-o-n-reverse-iteration",
                "content": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        var len = 0;\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) != \\' \\') {\\n                len++;\\n            } else if (len > 0) {\\n                return len;\\n            }\\n        }\\n        return len;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        var len = 0;\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) != \\' \\') {\\n                len++;\\n            } else if (len > 0) {\\n                return len;\\n            }\\n        }\\n        return len;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4032891,
                "title": "easy-python-solution-with-briefly-explanation",
                "content": "# Approach\\nThis code defines a class `Solution` with a method `lengthOfLastWord` that calculates the length of the last word in a given input string `s`. Here\\'s a brief explanation of each part of the code:\\n\\n1. `stripped = s.strip()`: This line removes leading and trailing whitespace from the input string `s` using the `strip` method. This is done to handle cases where there might be spaces at the beginning or end of the string.\\n\\n2. `strList = stripped.split(\" \")`: This line splits the stripped string `stripped` into a list of words using a space as the delimiter. It uses the `split` method, which separates the string into a list of substrings wherever it encounters a space character.\\n\\n3. `lastWord = strList[-1]`: This line extracts the last element (which is the last word) from the `strList` by using the index `-1`. This assumes that words in the string are separated by spaces.\\n\\n4. `return len(lastWord)`: Finally, the code returns the length of the `lastWord` using the `len` function. This length represents the number of characters in the last word of the input string.\\n\\nIn summary, the code takes a string as input, removes leading and trailing spaces, splits the string into words, extracts the last word, and returns the length of that last word.\\n\\n# Code\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        stripped = s.strip()\\n        strList = stripped.split(\" \")\\n        lastWord = strList[-1]\\n        return len(lastWord)\\n```\\n\\n**Please upvote if you like the solution.\\nHappy Coding! \\uD83D\\uDE0A**",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        stripped = s.strip()\\n        strList = stripped.split(\" \")\\n        lastWord = strList[-1]\\n        return len(lastWord)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 380627,
                "title": "easy-c-solution-0ms-beats-100",
                "content": "Runtime: 0 ms, faster than 100.00% of C++ online submissions for Length of Last Word.\\nMemory Usage: 8.6 MB, less than 100.00% of C++ online submissions for Length of Last Word.\\n\\n```\\nint lengthOfLastWord(string s) {\\n        \\n        int len = 0;\\n        \\n        for(int i = s.length()-1; i>=0; i--)\\n        {\\n            if(s[i] != \\' \\')\\n                len++;\\n            else if(len > 0)\\n                return len;\\n        }\\n        \\n        return len;\\n    }",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "Runtime: 0 ms, faster than 100.00% of C++ online submissions for Length of Last Word.\\nMemory Usage: 8.6 MB, less than 100.00% of C++ online submissions for Length of Last Word.\\n\\n```\\nint lengthOfLastWord(string s) {\\n        \\n        int len = 0;\\n        \\n        for(int i = s.length()-1; i>=0; i--)\\n        {\\n            if(s[i] != \\' \\')\\n                len++;\\n            else if(len > 0)\\n                return len;\\n        }\\n        \\n        return len;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 22018,
                "title": "5-lines-c-solution-0ms",
                "content": "    int lengthOfLastWord(char* s) {\\n      int lastLen = 0;\\n      char* p = s + strlen(s) -1;\\n      while(p>=s && isspace(*p)) p--;\\n      while(p>=s && !isspace(*(p--))) lastLen++;\\n      return lastLen;\\n    }",
                "solutionTags": [
                    "String"
                ],
                "code": "    int lengthOfLastWord(char* s) {\\n      int lastLen = 0;\\n      char* p = s + strlen(s) -1;\\n      while(p>=s && isspace(*p)) p--;\\n      while(p>=s && !isspace(*(p--))) lastLen++;\\n      return lastLen;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3336427,
                "title": "c-easy-solution-using-stack",
                "content": "# Intuition\\nWe had to find the length of the last word, something like ***LIFO***. So, we used Stack. \\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n1. Store the string into the stack.\\n2. Remove all the spaces from the end.\\n3. Find the length of the last word by increasing count till you reach another space or the stack gets empty.\\n\\n\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:$$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        // need to find length of LAST word. So, we use stack \\n        stack<char> st ; \\n        int cnt = 0 ; \\n        // store the string into the stack\\n        for (int i = 0 ; i < s.length() ; i ++)\\n        {\\n            st.push(s[i]) ; \\n        }\\n\\n        // pop the string till the top element of stack is a space \\' \\'\\n        // remove all the spaces in the end \\n        while (st.top() == \\' \\')\\n        {\\n            st.pop() ; \\n        }\\n\\n        // increase cnt of characters till you find another space \\' \\' or stack gets empty \\n        while (!st.empty() && st.top() != \\' \\')\\n        {\\n            cnt ++ ; \\n            st.pop() ; \\n        }\\n\\n        return cnt ; \\n    }\\n};\\n```\\n![815a317f-9cdf-46e2-a397-af8869dafa2e_1673498197.3721023.png](https://assets.leetcode.com/users/images/e7865b2c-397a-4d71-9670-5495c9262313_1679673611.8770292.png)\\n",
                "solutionTags": [
                    "C++",
                    "String",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        // need to find length of LAST word. So, we use stack \\n        stack<char> st ; \\n        int cnt = 0 ; \\n        // store the string into the stack\\n        for (int i = 0 ; i < s.length() ; i ++)\\n        {\\n            st.push(s[i]) ; \\n        }\\n\\n        // pop the string till the top element of stack is a space \\' \\'\\n        // remove all the spaces in the end \\n        while (st.top() == \\' \\')\\n        {\\n            st.pop() ; \\n        }\\n\\n        // increase cnt of characters till you find another space \\' \\' or stack gets empty \\n        while (!st.empty() && st.top() != \\' \\')\\n        {\\n            cnt ++ ; \\n            st.pop() ; \\n        }\\n\\n        return cnt ; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3164391,
                "title": "java-1ms-o-1-clean-and-concise",
                "content": "**TC -- > O(N)\\nSC --> O(N)**\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        \\n        int ans = 0;\\n        String[] arr = s.split(\" \");\\n        \\n        for (int i = 0; i < arr.length; i++) {\\n            ans = arr[i].length();\\n        }\\n        return ans;\\n    }\\n}\\n```\\n\\n**TC -- > O(N) \\nSC --> O(N)**\\n\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        \\n        int ans = 0;\\n        String[] arr = s.split(\" \");\\n\\t\\t\\n\\t\\treturn arr[arr.length - 1].length();\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        \\n        int ans = 0;\\n        String[] arr = s.split(\" \");\\n        \\n        for (int i = 0; i < arr.length; i++) {\\n            ans = arr[i].length();\\n        }\\n        return ans;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        \\n        int ans = 0;\\n        String[] arr = s.split(\" \");\\n\\t\\t\\n\\t\\treturn arr[arr.length - 1].length();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1294477,
                "title": "length-of-last-word-100-faster-solution-c-easy-code",
                "content": "int lengthOfLastWord(string s) {\\n        reverse(s.begin(),s.end());\\n        int count=0;\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]==\\' \\'){\\n                if(count==0){\\n                    count=0;\\n                }\\n                else\\n                    break;\\n            }\\n            else{\\n                count++;\\n            }\\n        }\\n        return count;\\n    }",
                "solutionTags": [],
                "code": "int lengthOfLastWord(string s) {\\n        reverse(s.begin(),s.end());\\n        int count=0;\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]==\\' \\'){\\n                if(count==0){\\n                    count=0;\\n                }\\n                else\\n                    break;\\n            }\\n            else{\\n                count++;\\n            }\\n        }\\n        return count;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 847455,
                "title": "python-sooo-simple-one-line-solution",
                "content": "```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n\\t\\treturn 0 if len(s.split())==0 else len(s.split()[-1])\\n```\\n**Like it? please upvote...**",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n\\t\\treturn 0 if len(s.split())==0 else len(s.split()[-1])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 21981,
                "title": "4-lines-java-solution-without-using-trim",
                "content": "    \\nUsing trim is not fun at all, so....\\n\\n    public int lengthOfLastWord(String s) {\\n        int count = -1, i = s.length();\\n        while (--i >= 0 && s.charAt(i) == ' ');\\n        while (i - ++count >= 0 && s.charAt(i - count) != ' ');\\n        return count;\\n    }",
                "solutionTags": [],
                "code": "    \\nUsing trim is not fun at all, so....\\n\\n    public int lengthOfLastWord(String s) {\\n        int count = -1, i = s.length();\\n        while (--i >= 0 && s.charAt(i) == ' ');\\n        while (i - ++count >= 0 && s.charAt(i - count) != ' ');\\n        return count;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3517215,
                "title": "c-easy-solution-beats-100",
                "content": "![image.png](https://assets.leetcode.com/users/images/69f3795f-d600-462c-9ed4-adcb7f1b7891_1683915799.0136898.png)\\n\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(N)\\n\\n# Code\\n```\\nclass Solution\\n{\\npublic:\\n    int lengthOfLastWord(string s)\\n    {\\n        int count = 0;\\n        for (int c = s.size() - 1; c >= 0; c--)\\n        {\\n            if (s[c] != \\' \\')\\n            {\\n                count++;\\n            }\\n            // if we already found a word and then encounter\\n            // a space that means the word is over.\\n            else if (count != 0 && s[c] == \\' \\')\\n            {\\n                return count;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution\\n{\\npublic:\\n    int lengthOfLastWord(string s)\\n    {\\n        int count = 0;\\n        for (int c = s.size() - 1; c >= 0; c--)\\n        {\\n            if (s[c] != \\' \\')\\n            {\\n                count++;\\n            }\\n            // if we already found a word and then encounter\\n            // a space that means the word is over.\\n            else if (count != 0 && s[c] == \\' \\')\\n            {\\n                return count;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3448309,
                "title": "python3-two-liner-beats-97-14-with-explanation",
                "content": "# Approach\\n- First we will convert given String of words into array of strings on basis of white spaces using python\\'s `.split()` which converts the string into Array \\n\\n- for example:\\n```\\nstr = \"Hello World\"\\narr = str.split()\\n\\n# arr will be\\narr = [\"Hello\" , \"World\"]\\n```\\n- So we will just return the length of last string from the array \\n\\n# Code\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        arr = s.split()\\n        return len(arr[-1])\\n```\\n# proof \\n\\n![Screenshot 2023-04-24 at 12.17.38 AM.png](https://assets.leetcode.com/users/images/14e685af-c36e-4c88-a2cb-b293b534fd88_1682275680.4227784.png)\\n",
                "solutionTags": [
                    "Python3",
                    "String"
                ],
                "code": "```\\nstr = \"Hello World\"\\narr = str.split()\\n\\n# arr will be\\narr = [\"Hello\" , \"World\"]\\n```\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        arr = s.split()\\n        return len(arr[-1])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3436545,
                "title": "best-solution-in-java-runtime-1-ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n         String [] str = s.split(\" \");\\n\\n\\n        return str[str.length-1].length() ;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n         String [] str = s.split(\" \");\\n\\n\\n        return str[str.length-1].length() ;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3337666,
                "title": "most-jugadu-solution-by-trippy-the-codder",
                "content": "# Intuition\\nSIMPLE CRISPY SOL\\nEASIEST JAVA SOL EVER EXSISTED\\n\\n# Approach\\nJUST SMILE AND SOLVE\\n\\n# Complexity\\nNO COMPLEXITY HERE\\n\\n# HUMBLE REQUEST\\nPLEASE UPVOTE\\n\\n# Code\\n```\\nimport java.util.StringTokenizer;\\nclass Solution {//PLEASE UPVOTE\\n    public int lengthOfLastWord(String s) {\\n       String str[]=s.split(\" \");\\n       return str[str.length-1].length();\\n    }//PLEASE UPVOTE\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Math",
                    "String",
                    "String Matching"
                ],
                "code": "```\\nimport java.util.StringTokenizer;\\nclass Solution {//PLEASE UPVOTE\\n    public int lengthOfLastWord(String s) {\\n       String str[]=s.split(\" \");\\n       return str[str.length-1].length();\\n    }//PLEASE UPVOTE\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3095742,
                "title": "simple-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nint lengthOfLastWord(char * s){\\n    int c=0;\\n    for(int i=strlen(s)-1;i>=0;i--){\\n        if(s[i]==\\' \\'){\\n            c++;\\n        }\\n        else{\\n            break;\\n        }\\n    }\\n    int c1=0;\\n    for(int i=strlen(s)-c-1;i>=0;i--){\\n        if(s[i]!=\\' \\'){\\n            c1++;\\n        }\\n        else{\\n            break;\\n        }\\n    }\\n    return c1;\\n\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint lengthOfLastWord(char * s){\\n    int c=0;\\n    for(int i=strlen(s)-1;i>=0;i--){\\n        if(s[i]==\\' \\'){\\n            c++;\\n        }\\n        else{\\n            break;\\n        }\\n    }\\n    int c1=0;\\n    for(int i=strlen(s)-c-1;i>=0;i--){\\n        if(s[i]!=\\' \\'){\\n            c1++;\\n        }\\n        else{\\n            break;\\n        }\\n    }\\n    return c1;\\n\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2765334,
                "title": "linear-time-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        if(s.size()==1){\\n            if(s[0]==\\' \\') return 0;\\n            else return 1;\\n        }\\n        int i=s.size()-1;\\n        int j=i;\\n        while(i>0){\\n            if(s[i]==\\' \\') \\n            while(s[i]==\\' \\' && i>0) i--;\\n            if(i==0) return !(s[i]==\\' \\');\\n            j=i;\\n            while(s[i]!=\\' \\' && i>0) i--;\\n            if(i!=0 || s[i]==\\' \\') i++;\\n            break;\\n        }\\n        return j-i+1;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        if(s.size()==1){\\n            if(s[0]==\\' \\') return 0;\\n            else return 1;\\n        }\\n        int i=s.size()-1;\\n        int j=i;\\n        while(i>0){\\n            if(s[i]==\\' \\') \\n            while(s[i]==\\' \\' && i>0) i--;\\n            if(i==0) return !(s[i]==\\' \\');\\n            j=i;\\n            while(s[i]!=\\' \\' && i>0) i--;\\n            if(i!=0 || s[i]==\\' \\') i++;\\n            break;\\n        }\\n        return j-i+1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 894131,
                "title": "golang-3-solutions",
                "content": "3 Approaches in Golang\\n\\nRuntime: 0 ms, faster than 100.00% of Go online submissions for Length of Last Word.\\nMemory Usage: 2.1 MB, less than 100.00% of Go online submissions for Length of Last Word.\\n\\n```\\n// import \"strings\"\\n\\nfunc lengthOfLastWord(s string) int {\\n    \\n    if len(s) < 1 {\\n        return 0\\n    }\\n//*******************Approach 1*******************\\n    \\n//     s = strings.TrimSpace(s)\\n//     result := strings.Split(s, \" \")\\n//     return len(result[len(result)-1])\\n    \\n//*******************Approach 2*******************\\n    \\n//     count := 0\\n//     for i := 0; i < len(s); i++ {\\n//         if string(s[i]) != \" \"{\\n//             count ++\\n//         } else if i != len(s)-1 && string(s[i+1]) != \" \" {\\n//             count = 0\\n//         }\\n//     }\\n    \\n//     return count\\n    \\n//*******************Approach 3*******************\\n    \\n    count := 0\\n    for i := len(s)-1; i > -1; i-- {\\n        if string(s[i]) != \" \" {\\n            count++\\n        } else if count > 0 {\\n            return count \\n        }\\n    }\\n    return count\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\n// import \"strings\"\\n\\nfunc lengthOfLastWord(s string) int {\\n    \\n    if len(s) < 1 {\\n        return 0\\n    }\\n//*******************Approach 1*******************\\n    \\n//     s = strings.TrimSpace(s)\\n//     result := strings.Split(s, \" \")\\n//     return len(result[len(result)-1])\\n    \\n//*******************Approach 2*******************\\n    \\n//     count := 0\\n//     for i := 0; i < len(s); i++ {\\n//         if string(s[i]) != \" \"{\\n//             count ++\\n//         } else if i != len(s)-1 && string(s[i+1]) != \" \" {\\n//             count = 0\\n//         }\\n//     }\\n    \\n//     return count\\n    \\n//*******************Approach 3*******************\\n    \\n    count := 0\\n    for i := len(s)-1; i > -1; i-- {\\n        if string(s[i]) != \" \" {\\n            count++\\n        } else if count > 0 {\\n            return count \\n        }\\n    }\\n    return count\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 22049,
                "title": "my-c-solution",
                "content": "    class Solution {\\n    public:\\n        int lengthOfLastWord(const char *s) {\\n            int len = strlen(s);\\n    \\t\\tif (!len) return 0;\\n    \\t\\tint n=0,  i = len-1;\\n    \\t\\twhile (s[i] == ' ') i--;\\n    \\t\\tfor (; i >= 0; i--,n++)\\n    \\t\\t\\tif (s[i] == ' ')\\n    \\t\\t\\t\\treturn n;\\n    \\t\\treturn n;\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        int lengthOfLastWord(const char *s) {\\n            int len = strlen(s);\\n    \\t\\tif (!len) return 0;\\n    \\t\\tint n=0,  i = len-1;\\n    \\t\\twhile (s[i] == ' ') i--;\\n    \\t\\tfor (; i >= 0; i--,n++)\\n    \\t\\t\\tif (s[i] == ' ')\\n    \\t\\t\\t\\treturn n;\\n    \\t\\treturn n;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 22280,
                "title": "it-was-accepted",
                "content": "`public class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String ss = s.trim();\\n        return ss.length() - 1 - ss.lastIndexOf(' ');\\n    }\\n}`",
                "solutionTags": [],
                "code": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String ss = s.trim();\\n        return ss.length() - 1 - ss.lastIndexOf(' ');\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 3984399,
                "title": "java-solution-super-easy-approach-video-solution",
                "content": "# Please watch this solution video for clear understanding :-\\nhttps://youtu.be/wC9Va0jj2gg?si=CYUGjmKvR_sT9bSR\\n\\n# Approach\\nwill initialize an counter variable = 0 .\\nwill start an pointer from last index \\nwill keep decreasing it untill we will find any blank space and keep increasing counter \\nonce blank space found ,  break and come out of loop\\nat last return counter value .\\nfor better understanding and solution watch given video. \\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n# Code\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        String str = s.trim();\\n        int count = 0 ;\\n        // for loop from last index to first\\n        for(int i = str.length()-1 ;i>=0;i--){\\n            // keep increasing the counter untill we find any blank space\\n            if(str.charAt(i) != \\' \\' ){\\n                count++ ;\\n            }\\n            // once the blank space is found break the loop\\n            else {\\n                break ;\\n            }\\n        }\\n        return count ;  // return the count , now it will give the no. of actual characters in last word .   \\n    }\\n}\\n```\\n# If you found my solution helpful, I would greatly appreciate your upvote, as it would motivate me to continue sharing more solutions.\\n# wish you the best  !",
                "solutionTags": [
                    "Java",
                    "String",
                    "String Matching"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        String str = s.trim();\\n        int count = 0 ;\\n        // for loop from last index to first\\n        for(int i = str.length()-1 ;i>=0;i--){\\n            // keep increasing the counter untill we find any blank space\\n            if(str.charAt(i) != \\' \\' ){\\n                count++ ;\\n            }\\n            // once the blank space is found break the loop\\n            else {\\n                break ;\\n            }\\n        }\\n        return count ;  // return the count , now it will give the no. of actual characters in last word .   \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3500625,
                "title": "java-easy-to-understand-100-faster",
                "content": "# Complexity\\nL = lenght of Array\\n- Time complexity: O(L)\\n\\n- Space complexity: O(L)\\n\\n# Code\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        boolean vis=false;\\n        int ans=0;\\n        for(int i=s.length()-1; i>=0; i--){\\n            if(s.charAt(i)==\\' \\'){\\n                if(vis){\\n                    break;\\n                }\\n            }\\n            else{\\n                vis=true;\\n                ans++;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        boolean vis=false;\\n        int ans=0;\\n        for(int i=s.length()-1; i>=0; i--){\\n            if(s.charAt(i)==\\' \\'){\\n                if(vis){\\n                    break;\\n                }\\n            }\\n            else{\\n                vis=true;\\n                ans++;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3498877,
                "title": "very-easy-c-solution-please-upvote",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i,j,k,c=0;\\n        i=s.size()-1;\\n        while(i>=0 and s[i]==\\' \\')\\n        i--;\\n        for(;i>=0;i--){\\n            if(s[i]==\\' \\' and c!=0)\\n            return c;\\n            c++;\\n        }\\n        return c;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i,j,k,c=0;\\n        i=s.size()-1;\\n        while(i>=0 and s[i]==\\' \\')\\n        i--;\\n        for(;i>=0;i--){\\n            if(s[i]==\\' \\' and c!=0)\\n            return c;\\n            c++;\\n        }\\n        return c;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3492560,
                "title": "c-solution-using-stack",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n      stack<char> s1;\\n      int count=0;\\n      for(int i=0;i<s.size();i++){\\n          s1.push(s[i]);\\n      }\\n\\n    while(s1.top()==\\' \\')s1.pop();\\n      while(!s1.empty()&&s1.top()!=\\' \\'){\\n        count++;\\n        s1.pop();\\n          \\n    }\\n    return count;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n      stack<char> s1;\\n      int count=0;\\n      for(int i=0;i<s.size();i++){\\n          s1.push(s[i]);\\n      }\\n\\n    while(s1.top()==\\' \\')s1.pop();\\n      while(!s1.empty()&&s1.top()!=\\' \\'){\\n        count++;\\n        s1.pop();\\n          \\n    }\\n    return count;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3014559,
                "title": "c-solution-easy-and-simple-using-for-loop",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count=0;\\n        for(int i=s.size()-1;i>=0;i--){\\n            if(s[i]!=\\' \\'){\\n            count++;\\n            }\\n            if(s[i]==\\' \\'){\\n                if (count>0){\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count=0;\\n        for(int i=s.size()-1;i>=0;i--){\\n            if(s[i]!=\\' \\'){\\n            count++;\\n            }\\n            if(s[i]==\\' \\'){\\n                if (count>0){\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1506939,
                "title": "4-lines-of-code-only-in-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        stringstream ss;ss<<s;\\n        string temp;\\n        while(ss>>temp){}\\n        return temp.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        stringstream ss;ss<<s;\\n        string temp;\\n        while(ss>>temp){}\\n        return temp.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1346861,
                "title": "java-0ms-100-fast-and-easy-to-understand-solution",
                "content": "```\\npublic int lengthOfLastWord(String s) {\\n        int length = 0;\\n        s = s.trim();\\n        int start = s.length() - 1;\\n        while (start >= 0 && s.charAt(start) != \\' \\') {\\n            length++;\\n            start--;\\n        }\\n        return length;\\n }\\n```\\nPlease do upvote if you liked the solution or comment incase any doubt :)",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int lengthOfLastWord(String s) {\\n        int length = 0;\\n        s = s.trim();\\n        int start = s.length() - 1;\\n        while (start >= 0 && s.charAt(start) != \\' \\') {\\n            length++;\\n            start--;\\n        }\\n        return length;\\n }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 559757,
                "title": "javascript",
                "content": "```\\nvar lengthOfLastWord = function(s) {\\n    if (!s.length) {\\n        return 0;\\n    };\\n    let arr = s.trim().split(\\' \\');\\n    return arr[arr.length - 1].length;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar lengthOfLastWord = function(s) {\\n    if (!s.length) {\\n        return 0;\\n    };\\n    let arr = s.trim().split(\\' \\');\\n    return arr[arr.length - 1].length;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 509411,
                "title": "javascript-solution-o-n-left-to-right",
                "content": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLastWord = function(s) {\\n    let length = 0, max = 0;\\n    for (let i = 0; i < s.length; i++)\\n        if (s[i] !== \\' \\')\\n            length++, max = length;\\n        else\\n            length = 0;\\n    return max;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLastWord = function(s) {\\n    let length = 0, max = 0;\\n    for (let i = 0; i < s.length; i++)\\n        if (s[i] !== \\' \\')\\n            length++, max = length;\\n        else\\n            length = 0;\\n    return max;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 21985,
                "title": "short-java-solution",
                "content": "    public class Solution {\\n        public int lengthOfLastWord(String s) {\\n            String[] parts = s.split(\" \");\\n            if (parts.length == 0) return 0;\\n            return parts[parts.length - 1].length();\\n        }\\n    }",
                "solutionTags": [],
                "code": "class Solution {\\n        public int lengthOfLastWord(String s) {\\n            String[] parts = s.split(\" \");\\n            if (parts.length == 0) return 0;\\n            return parts[parts.length - 1].length();\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3887562,
                "title": "in-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        s = s.trim(); // Trim leading and trailing spaces\\n        int count = 0;\\n        \\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) != \\' \\') {\\n                count++;\\n            } else {\\n                break; // Stop counting as soon as a space is encountered\\n            }\\n        }\\n        \\n        return count;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        s = s.trim(); // Trim leading and trailing spaces\\n        int count = 0;\\n        \\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) != \\' \\') {\\n                count++;\\n            } else {\\n                break; // Stop counting as soon as a space is encountered\\n            }\\n        }\\n        \\n        return count;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3792192,
                "title": "2-methods-explanation-clean-easy-code-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- First direction of thinking was in direction of using a stack, since it will give the words of string in reverse manner.\\n- That is also a feasible solution, but this is quite easy approach.\\n- To have variables to store number of spaces and count of the words.\\n- And after that just return the absolute of difference.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Iterate over the string from the back, if its space, space_variable++, count++.\\n- else flag=1 (encountered character) count++;\\n- if s[i]==space and flag=1 means this is starting of another word, which is useless for us so break the iteration.\\n- return absolute difference b/w space and count. \\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Method 1\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int n=s.length();\\n        int count=0;\\n        int space=0;\\n        int flag=0;\\n        for(int i=n-1;i>=0;i--)\\n        {\\n            if(s[i]==\\' \\' && flag==0)\\n            {\\n                space++;\\n            }\\n            else if(s[i]!=\\' \\')\\n            {\\n                flag=1;\\n            }\\n            else if(s[i]==\\' \\' && flag==1){\\n                break;\\n            }\\n            count++;\\n        }\\n        return abs(space-count);  \\n    }\\n};\\n```\\n\\n# Method 2\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n      stack<char> s1;\\n      int count=0;\\n      for(int i=0;i<s.size();i++){\\n          s1.push(s[i]);\\n      }\\n\\n    while(s1.top()==\\' \\')s1.pop();\\n      while(!s1.empty()&&s1.top()!=\\' \\'){\\n        count++;\\n        s1.pop();\\n          \\n    }\\n    return count;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int n=s.length();\\n        int count=0;\\n        int space=0;\\n        int flag=0;\\n        for(int i=n-1;i>=0;i--)\\n        {\\n            if(s[i]==\\' \\' && flag==0)\\n            {\\n                space++;\\n            }\\n            else if(s[i]!=\\' \\')\\n            {\\n                flag=1;\\n            }\\n            else if(s[i]==\\' \\' && flag==1){\\n                break;\\n            }\\n            count++;\\n        }\\n        return abs(space-count);  \\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n      stack<char> s1;\\n      int count=0;\\n      for(int i=0;i<s.size();i++){\\n          s1.push(s[i]);\\n      }\\n\\n    while(s1.top()==\\' \\')s1.pop();\\n      while(!s1.empty()&&s1.top()!=\\' \\'){\\n        count++;\\n        s1.pop();\\n          \\n    }\\n    return count;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3375471,
                "title": "99-42-runtime-97-66-memory-beats-with-explanation",
                "content": "# Intuition\\nThis code is written to find the length of the last word in a given string. The intuition behind this code is to start from the end of the string and count the number of characters in the last word until a space is encountered.\\n\\n\\n# Approach\\nThe approach taken in this code is to first initialize an index variable to the length of the string minus one. Then, the code enters a while loop that checks if the character at the current index is a space. If it is, the index is decremented by 1 until a non-space character is encountered.\\n\\nAfter this, another while loop is entered that checks if the character at the current index is a space or not. If it is not a space, the count variable is incremented. If it is a space or the index becomes 0, the loop is broken and the count is returned.\\n\\n\\n\\n# Complexity\\n- Time complexity O(n):\\nThe time complexity of this code is O(n) where n is the length of the string. This is because the code iterates through the string twice, once to find the last non-space character and then to count the length of the last word.\\n\\n\\n- Space complexity O(1):\\nThe space complexity of this code is O(1) because the only extra space used is for two integer variables, index and count.\\n\\n\\n# Code\\n```\\nclass Solution {\\n  int lengthOfLastWord(String s) {\\n    // Initialize the index variable to the last index of the string\\n    int index = s.length - 1;\\n    // Loop through any trailing spaces at the end of the string\\n    while (s[index] == \" \"){\\n      index--;\\n    }\\n    // Initialize the count variable to 0\\n    int count = 0;\\n    // Loop through the last word in the string\\n    while(s[index] != \" \"){\\n      // Increment the count variable for each character in the last word\\n      count++;\\n      // Check if the previous character was a space or if we have reached the beginning of the string\\n      if (s[index] == \" \" || index == 0){\\n        // Break out of the loop if the previous character was a space or if we have reached the beginning of the string\\n        break;\\n      } \\n      // Move the index to the previous character in the string\\n      index--;\\n    }\\n    // Return the count variable which contains the length of the last word in the string\\n    return count;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Dart",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n  int lengthOfLastWord(String s) {\\n    // Initialize the index variable to the last index of the string\\n    int index = s.length - 1;\\n    // Loop through any trailing spaces at the end of the string\\n    while (s[index] == \" \"){\\n      index--;\\n    }\\n    // Initialize the count variable to 0\\n    int count = 0;\\n    // Loop through the last word in the string\\n    while(s[index] != \" \"){\\n      // Increment the count variable for each character in the last word\\n      count++;\\n      // Check if the previous character was a space or if we have reached the beginning of the string\\n      if (s[index] == \" \" || index == 0){\\n        // Break out of the loop if the previous character was a space or if we have reached the beginning of the string\\n        break;\\n      } \\n      // Move the index to the previous character in the string\\n      index--;\\n    }\\n    // Return the count variable which contains the length of the last word in the string\\n    return count;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3362846,
                "title": "c-solution",
                "content": "# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nint lengthOfLastWord(char * s){\\n    int lastSize = 0;\\n    int i = strlen(s) - 1;\\n    \\n    if (s[i] == \\' \\') {\\n        while (i >= 0 && s[i] == \\' \\') {\\n            i--;\\n        }\\n    }\\n\\n    while (i >= 0) {\\n        if (s[i] == \\' \\') {\\n            break;\\n        }\\n        if ((s[i] >= 97 && s[i] <= 122) || (s[i] >= 65 && s[i] <= 90)) {\\n            lastSize++;\\n        }\\n        i--;\\n    }\\n\\n    return lastSize;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint lengthOfLastWord(char * s){\\n    int lastSize = 0;\\n    int i = strlen(s) - 1;\\n    \\n    if (s[i] == \\' \\') {\\n        while (i >= 0 && s[i] == \\' \\') {\\n            i--;\\n        }\\n    }\\n\\n    while (i >= 0) {\\n        if (s[i] == \\' \\') {\\n            break;\\n        }\\n        if ((s[i] >= 97 && s[i] <= 122) || (s[i] >= 65 && s[i] <= 90)) {\\n            lastSize++;\\n        }\\n        i--;\\n    }\\n\\n    return lastSize;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3048547,
                "title": "c-easy-approach",
                "content": "Here is my c++ code for this problem.\\n\\n# Complexity\\n- Time complexity:$$O(n)$$\\n\\n- Space complexity:$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int ans=0, i=s.size()-1;\\n        while(i>=0 && s[i]==\\' \\'){\\n            i--;\\n        }\\n        while(i>=0 && s[i]!=\\' \\'){\\n            i--; ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int ans=0, i=s.size()-1;\\n        while(i>=0 && s[i]==\\' \\'){\\n            i--;\\n        }\\n        while(i>=0 && s[i]!=\\' \\'){\\n            i--; ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3004177,
                "title": "simple-javascript-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLastWord = function(s) {\\n    return s.trim().split(\\' \\').at(-1).length\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "String"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLastWord = function(s) {\\n    return s.trim().split(\\' \\').at(-1).length\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2941731,
                "title": "easy-simple-c-solution",
                "content": "### Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int j= s.size()-1;\\n        while (j>=0 &&s[j]==\\' \\')j--;\\n        int ans=0;\\n        while (j>=0 && s[j]!=\\' \\'){\\n            j--;\\n            ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int j= s.size()-1;\\n        while (j>=0 &&s[j]==\\' \\')j--;\\n        int ans=0;\\n        while (j>=0 && s[j]!=\\' \\'){\\n            j--;\\n            ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2676044,
                "title": "c-3ms-using-stack",
                "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        stack<char>st;\\n        st.push(\\'9\\');\\n        for(auto it: s){\\n            st.push(it);\\n        }\\n        int c =0;\\n        while(true){\\n            if(st.top()==\\' \\' && c>0){\\n                break;\\n            }\\n            \\n            if(st.top()==\\'9\\'){\\n                break;\\n            }\\n            else if(st.top()!=\\' \\'){\\n                c++;\\n                st.pop();\\n            }\\n            \\n            else{\\n                st.pop();\\n            }\\n        }\\n        return c;\\n    }\\n};\\n```\\n\\n```\\nif(st.top()==\\'9\\'){\\n                break;\\n            }\\n \\'9\\' has been intentionally inserted in the stack in the beginning. It helps us when there is only a single word in the string and continously popping will give us a stack underflow error as there is no blank space.",
                "solutionTags": [
                    "C++",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        stack<char>st;\\n        st.push(\\'9\\');\\n        for(auto it: s){\\n            st.push(it);\\n        }\\n        int c =0;\\n        while(true){\\n            if(st.top()==\\' \\' && c>0){\\n                break;\\n            }\\n            \\n            if(st.top()==\\'9\\'){\\n                break;\\n            }\\n            else if(st.top()!=\\' \\'){\\n                c++;\\n                st.pop();\\n            }\\n            \\n            else{\\n                st.pop();\\n            }\\n        }\\n        return c;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2497494,
                "title": "python-c-java-beginner-level-100-faster-as-simple-as-u-think-simple-short-solution",
                "content": "***Please upvote to motivate me in my quest of documenting all leetcode solutions. HAPPY CODING:)\\nAny suggestions and improvements are always welcome*.**\\n___________________\\n_________________\\n***Q58. Length of Last Word***\\nGiven a string `s` consisting of words and spaces, return the length of the  word **last** the string.\\n\\nA **word** is a maximal substring consisting of non-space characters only.\\n____________________________________________________________________________________________________________________\\n____________________________________________________________________________________________________________________\\n\\u2705 **Python  Code** :\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        s=s.strip().split(\" \")\\n        lst=[ i for i in s if i!=\"\"]\\n        a=lst[-1]\\n        return len(a)\\n```\\n**Runtime:**  50 ms\\t\\n**Memory Usage:**  13.9 MB\\n____________________________________________________________________________________________________________________\\n____________________________________________________________________________________________________________________\\n\\n\\u2705 **Java Code** :\\nRuntime: 0 ms, faster than 100.00% of java online submissions for Length of Last Word.\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n       int len=0;\\n        for(int i=s.length()-1;i>=0;i--)\\n        {\\n            if(s.charAt(i)!=\\' \\')\\n                len++;\\n            else if(len>0)\\n                return len;\\n        }\\n        return len;\\n    }\\n}\\n```\\n**Runtime:**  0 ms\\t\\t\\n**Memory Usage:**  43..8 MB\\t\\n____________________________________________________________________________________________________________________\\n____________________________________________________________________________________________________________________\\n\\u2705 **C++  Code** :\\n**Runtime**: 0 ms, faster than 100.00% of C++ online submissions for Length of Last Word.\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int len=0;\\n        for(int i=s.size()-1;i>=0;i--)\\n        {\\n            if(s[i]!=\\' \\')   len++;\\n            else if(len>0)  return len;\\n        }\\n        return len;\\n    }\\n};\\n```\\n**Runtime:** 0 ms\\t\\n**Memory Usage:**  5.3 MB\\t\\t\\n____________________________________________________________________________________________________________________\\n____________________________________________________________________________________________________________________\\nIf you like the solution, please upvote \\uD83D\\uDD3C\\nFor any questions, or discussions, comment below. \\uD83D\\uDC47\\uFE0F\\n",
                "solutionTags": [
                    "Java",
                    "Python",
                    "C"
                ],
                "code": "```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        s=s.strip().split(\" \")\\n        lst=[ i for i in s if i!=\"\"]\\n        a=lst[-1]\\n        return len(a)\\n```\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n       int len=0;\\n        for(int i=s.length()-1;i>=0;i--)\\n        {\\n            if(s.charAt(i)!=\\' \\')\\n                len++;\\n            else if(len>0)\\n                return len;\\n        }\\n        return len;\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int len=0;\\n        for(int i=s.size()-1;i>=0;i--)\\n        {\\n            if(s[i]!=\\' \\')   len++;\\n            else if(len>0)  return len;\\n        }\\n        return len;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2341612,
                "title": "very-easy-100-fully-explained-java-c-python-js-c-python3",
                "content": "# **Java Solution:**\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        // Initialize length...\\n        int length = 0;\\n        // Create a loop starting from last character...\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            // If the character is not a space...\\n            if (s.charAt(i) != \\' \\') {\\n                length++;\\n            }\\n            // Here it is the end of last word...\\n            else if(length != 0) {\\n                break;\\n            }\\n        }\\n        return length;\\n    }\\n}\\n```\\n\\n# **C++ Solution:**\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        // base case...\\n        if(s.length()<1)\\n            return 0;\\n        int end = s.length() - 1;\\n        // Find first character from the end\\n        while (end >= 0 && s[end] == \\' \\')\\n            --end;\\n        const int beg = end;\\n        // Find first space from the last character\\n        while (end >= 0 && s[end] != \\' \\')\\n            --end;\\n        return beg - end;     //return the length...\\n    }\\n};\\n```\\n\\n# **Python Solution:**\\n```\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        s = s.strip()       # Remove the spaces at the beginning and end\\n        length = 0\\n        for i in range(len(s)):\\n            # Waiting for the next word...\\n            if s[i] == \" \":\\n                length = 0\\n            else:\\n                length += 1    # Inside one word\\n        return length\\n```\\n        \\n# **Javascript Solution:**\\n```\\nvar lengthOfLastWord = function(s) {\\n    // Initialize length...\\n    let length = 0;\\n    // Create a loop starting from last character...\\n    for (let i = s.length - 1; i >= 0; i--) {\\n        // If the character is not a space...\\n        if (s.charAt(i) != \\' \\') {\\n            length++;\\n        }\\n        // Here it is the end of last word...\\n        else if(length != 0) {\\n            break;\\n        }\\n    }\\n    return length;\\n};\\n```\\n\\n# **C Language:**\\n```\\nint lengthOfLastWord(char * s){\\n    int count  = 0;\\n    int length = 0;\\n    for (int i = 0; i < strlen(s); i++) {\\n        if (s[i] != \\' \\') {\\n            count++;\\n            length = count;\\n        }\\n        else {\\n            count = 0;\\n            if (length < count) {\\n                length = count;\\n            }\\n        }\\n    }\\n    return length;\\n}\\n```\\n\\n# **Python3 Solution:**\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        s = s.strip()       # Remove the spaces at the beginning and end\\n        length = 0\\n        for i in range(len(s)):\\n            # Waiting for the next word...\\n            if s[i] == \" \":\\n                length = 0\\n            else:\\n                length += 1    # Inside one word\\n        return length\\n```\\n**I am working hard for you guys...\\nPlease upvote if you find any help with this code...**",
                "solutionTags": [
                    "Java",
                    "Python",
                    "Python3",
                    "C",
                    "JavaScript"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        // Initialize length...\\n        int length = 0;\\n        // Create a loop starting from last character...\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            // If the character is not a space...\\n            if (s.charAt(i) != \\' \\') {\\n                length++;\\n            }\\n            // Here it is the end of last word...\\n            else if(length != 0) {\\n                break;\\n            }\\n        }\\n        return length;\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        // base case...\\n        if(s.length()<1)\\n            return 0;\\n        int end = s.length() - 1;\\n        // Find first character from the end\\n        while (end >= 0 && s[end] == \\' \\')\\n            --end;\\n        const int beg = end;\\n        // Find first space from the last character\\n        while (end >= 0 && s[end] != \\' \\')\\n            --end;\\n        return beg - end;     //return the length...\\n    }\\n};\\n```\n```\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        s = s.strip()       # Remove the spaces at the beginning and end\\n        length = 0\\n        for i in range(len(s)):\\n            # Waiting for the next word...\\n            if s[i] == \" \":\\n                length = 0\\n            else:\\n                length += 1    # Inside one word\\n        return length\\n```\n```\\nvar lengthOfLastWord = function(s) {\\n    // Initialize length...\\n    let length = 0;\\n    // Create a loop starting from last character...\\n    for (let i = s.length - 1; i >= 0; i--) {\\n        // If the character is not a space...\\n        if (s.charAt(i) != \\' \\') {\\n            length++;\\n        }\\n        // Here it is the end of last word...\\n        else if(length != 0) {\\n            break;\\n        }\\n    }\\n    return length;\\n};\\n```\n```\\nint lengthOfLastWord(char * s){\\n    int count  = 0;\\n    int length = 0;\\n    for (int i = 0; i < strlen(s); i++) {\\n        if (s[i] != \\' \\') {\\n            count++;\\n            length = count;\\n        }\\n        else {\\n            count = 0;\\n            if (length < count) {\\n                length = count;\\n            }\\n        }\\n    }\\n    return length;\\n}\\n```\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        s = s.strip()       # Remove the spaces at the beginning and end\\n        length = 0\\n        for i in range(len(s)):\\n            # Waiting for the next word...\\n            if s[i] == \" \":\\n                length = 0\\n            else:\\n                length += 1    # Inside one word\\n        return length\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2339607,
                "title": "c-java-python3-solutions-iteration-or-trim",
                "content": "The easist way may be iterate from the end of the string, can we do that with a different way?\\n**Of course !**\\n\\n\\n### C# Examples  (Java and Python version please visit my blog)\\n**1. Iteration**\\n```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        \\n        int cnt = 0;\\n        \\n        for(int i = s.Length-1;i>=0;i--)\\n        {\\n            if(Char.IsWhiteSpace(s[i]))\\n            {\\n                if(cnt>0)\\n                {\\n                    return cnt;    \\n                }\\n                continue;\\n            }\\n            \\n            cnt+=1;\\n        }\\n        return cnt;\\n    }\\n}\\n```\\n\\n**2. Split + Trim**\\n```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        s = s.TrimEnd();                 //or you can use Trim()\\n        string[] tmp = s.Split(\\' \\');\\n        return tmp[tmp.Length-1].Length; \\n    }\\n}\\n```\\nIs there an easier way in C#? Yes!\\n\\n\\u2B50**See more Code and Explanation : [https://zyrastory.com/en/coding-en/leetcode-en/leetcode-58-length-of-last-word-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-58-length-of-last-word-solution-and-explanation-en/)**\\n\\n\\nIf you got any problem about the explanation or you need other programming language solution, please feel free to leave your comment.\\n\\n\\uD83E\\uDDE1See more problems solutions - **[Zyrastory - LeetCode Solution](https://zyrastory.com/en/category/coding-en/leetcode-en/)**\\n\\nThanks!",
                "solutionTags": [
                    "Java",
                    "Python3"
                ],
                "code": "```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        \\n        int cnt = 0;\\n        \\n        for(int i = s.Length-1;i>=0;i--)\\n        {\\n            if(Char.IsWhiteSpace(s[i]))\\n            {\\n                if(cnt>0)\\n                {\\n                    return cnt;    \\n                }\\n                continue;\\n            }\\n            \\n            cnt+=1;\\n        }\\n        return cnt;\\n    }\\n}\\n```\n```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        s = s.TrimEnd();                 //or you can use Trim()\\n        string[] tmp = s.Split(\\' \\');\\n        return tmp[tmp.Length-1].Length; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3354740,
                "title": "c-solution",
                "content": "# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nint lengthOfLastWord(char * s){\\n    int len = 0;\\n    int i = strlen(s) - 1;\\n    \\n    while (s[i] == \\' \\' && i >= 0) i--;\\n    while (i >= 0 && s[i--] != \\' \\') len++;\\n\\n    return len;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint lengthOfLastWord(char * s){\\n    int len = 0;\\n    int i = strlen(s) - 1;\\n    \\n    while (s[i] == \\' \\' && i >= 0) i--;\\n    while (i >= 0 && s[i--] != \\' \\') len++;\\n\\n    return len;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3073777,
                "title": "python-one-liner-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe are just split a string using \"split()\" function and as we know that it will split all the words into list and we are accessing the last element by using[-1] and return a length of last word using \"len()\" function.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])\\n```",
                "solutionTags": [
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3046740,
                "title": "java-easy-and-short-solution",
                "content": "# Approach\\n\\n1. Split array by space\\n2. Count the length of last element from splitted array\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        \\n        String[] splittedArr = s.split(\" \"); // Split array by space (\" \")\\n\\n        String lastWord = splittedArr[splittedArr.length -1] ; // Getting the last element\\n\\n        return lastWord.length(); count the length\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        \\n        String[] splittedArr = s.split(\" \"); // Split array by space (\" \")\\n\\n        String lastWord = splittedArr[splittedArr.length -1] ; // Getting the last element\\n\\n        return lastWord.length(); count the length\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2682756,
                "title": "c",
                "content": "class Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        \\n        int temp=0;\\n        reverse(s.begin(),s.end());\\n        for(int i=0;i<s.size();i++){\\n            if(s[i]!=\\' \\'){\\n                temp++;\\n            }\\n\\t\\t\\telse{\\n                if(temp!=0){\\n                    break;\\n                }\\n            }\\n        }\\n        return temp;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "class Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        \\n        int temp=0;\\n        reverse(s.begin(),s.end());\\n        for(int i=0;i<s.size();i++){\\n            if(s[i]!=\\' \\'){\\n                temp++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1669061,
                "title": "c-faster-than-100-easy",
                "content": "A very simple solution where we iterate from the end and check if the space is found. If not found we just add 1 to the result. And as soon as the result becomes non-zero, and we encounter a space, we return the result.\\n\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int result = 0;\\n        for(int i = s.length()-1;i >= 0;i--){\\n            if(s[i] != \\' \\'){\\n                result += 1;\\n            } else if(result){\\n                return result;\\n            }\\n        }\\n        return result;\\n    }\\n};\\n```\\n\\n![image](https://assets.leetcode.com/users/images/3e163076-a04e-4481-8e76-5177527482cf_1641403834.8469174.png)",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int result = 0;\\n        for(int i = s.length()-1;i >= 0;i--){\\n            if(s[i] != \\' \\'){\\n                result += 1;\\n            } else if(result){\\n                return result;\\n            }\\n        }\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1463506,
                "title": "using-stringstream-4-liner-simple-c-solution",
                "content": "***[Using stringstream : 4 liner , Simple C++ solution]***\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        \\n        stringstream ss(s);\\n        string st = \"\", word;\\n        while(ss >> word)  st = word;\\n        return st.length();\\n    }\\n}; //please upvote :)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        \\n        stringstream ss(s);\\n        string st = \"\", word;\\n        while(ss >> word)  st = word;\\n        return st.length();\\n    }\\n}; //please upvote :)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1378770,
                "title": "c-logic-explained-for-beginners-100-fast-0ms-runtime",
                "content": "lets see some possible critical cases.\\n1. s=\"Hello Beautiful\"\\nThis is the simplest input. We just have to iterate from the last and count how many characters are until we find a space. \\n2. s=\"  hello   \"\\nIn this case, if we stop when we find a space, the answer will be wrong. We\\'ve to skip the last two spaces and then count how many characters until we find next space.\\n* So the final logic is, we start counting characters from the last. we count if the chracter isn\\'t a space and we will stop the counting loop if we\\'ve counted some characters and find a space.\\nSee, for s=\" hello  \" . \\n* At first, we find a space. We dont count here. And we dont stop the loop as count_of_characters=0. \\n* Then we find a space again. We dont count here. And we dont stop the loop as count_of_characters=0. \\n* then we find \\'o\\', count_of_characters=1. when we reach to \\'h\\', count_of_characters=5.\\n* then we find a space. we dont count here. but we stop the loop as count_of_characters is not 0 here and we find a space.\\nMy code is given below:\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n     int count=0;\\n     for(int i=s.length()-1;i>=0;i--)\\n     {\\n         if(s[i]==\\' \\' and count!=0) break; //stop if it\\'s a space and we\\'ve counted some characters\\n         if(s[i]!=\\' \\') count++;//count if it\\'s not a space\\n     }\\n        return count;\\n    }\\n};\\n```\\nThanks for reading. Comment if you have any question.",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n     int count=0;\\n     for(int i=s.length()-1;i>=0;i--)\\n     {\\n         if(s[i]==\\' \\' and count!=0) break; //stop if it\\'s a space and we\\'ve counted some characters\\n         if(s[i]!=\\' \\') count++;//count if it\\'s not a space\\n     }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 848121,
                "title": "c-o-n-solutions",
                "content": "**Solution 1**\\n```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        \\n        if(s == null || s.Length == 0)\\n            return 0;\\n        \\n        string[] arr = s.Split(\" \", StringSplitOptions.RemoveEmptyEntries);\\n        \\n        return arr.Length == 0? 0 : arr[arr.Length - 1].Length;\\n    }\\n}\\n```\\n\\n**Solution 2**\\n```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        \\n        if(s == null || s.Length == 0)\\n            return 0;\\n        \\n        int tail = s.Length - 1;\\n        int len = 0;\\n        \\n        while(tail >= 0 && s[tail] == \\' \\')\\n            tail--;\\n        \\n        while(tail >= 0 && s[tail] != \\' \\')\\n        {\\n            len++;\\n            tail--;\\n        }\\n        \\n        return len;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        \\n        if(s == null || s.Length == 0)\\n            return 0;\\n        \\n        string[] arr = s.Split(\" \", StringSplitOptions.RemoveEmptyEntries);\\n        \\n        return arr.Length == 0? 0 : arr[arr.Length - 1].Length;\\n    }\\n}\\n```\n```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        \\n        if(s == null || s.Length == 0)\\n            return 0;\\n        \\n        int tail = s.Length - 1;\\n        int len = 0;\\n        \\n        while(tail >= 0 && s[tail] == \\' \\')\\n            tail--;\\n        \\n        while(tail >= 0 && s[tail] != \\' \\')\\n        {\\n            len++;\\n            tail--;\\n        }\\n        \\n        return len;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 847641,
                "title": "c-2-pointers-solution-explained-100-time-98-space",
                "content": "Initially I went for a simple left to right approach, using 4 variables:\\n* `len` stores the length of `s`;\\n* `tmp`, that starts at index `0` and then gets moved to the beginning of the next word with an initialy loop;\\n* `start` that stores the position of beginning of that word;\\n* `finish` that gets moved to the end of the word and stores that position;\\n\\nThen I would use a `while` loop to routinely update this values as long as `tmp` is less than `len`.\\n\\nOnce I am done, I will have the coordinates of the last word and then just return `finish - start` :)\\n\\nThe code:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int start = 0, finish = 0, tmp = 0, len = s.size();\\n        // moving tmp to the beginning of the next word and storing it in tmp\\n        while (tmp < len && s[tmp] == \\' \\') tmp++;\\n        while (tmp < len) {\\n            // updating start\\n            start = tmp;\\n            // moving finish to the end of the next word\\n            finish = start + 1;\\n            while (finish < len && s[finish] != \\' \\') finish++;\\n            // preparing the next loop\\n            tmp = finish + 1;\\n            while (tmp < len && s[tmp] == \\' \\') tmp++;\\n        }\\n        return finish - start;\\n    }\\n};\\n```\\n\\nThen it occurred to me that I was just being silly, moving left to right and that it would make much more sense go the other way around. Lesson lernt and came up with this:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        // edge case out\\n        if (!s.size()) return 0;\\n        int start, finish = s.size() - 1;\\n        // moving finish to the end of the last word\\n        while (finish && s[finish] == \\' \\') finish--;\\n        // moving start to the end of the last word\\n        start = finish;\\n        while (start > -1 && s[start] != \\' \\') start--;\\n        return finish - start;\\n    }\\n};\\n```\\n\\nSurprisingly, the code does not run much better on average - probably because the test strings are with too few words; memory consumption is a bit lower.",
                "solutionTags": [
                    "C++",
                    "C",
                    "Two Pointers",
                    "String"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int start = 0, finish = 0, tmp = 0, len = s.size();\\n        // moving tmp to the beginning of the next word and storing it in tmp\\n        while (tmp < len && s[tmp] == \\' \\') tmp++;\\n        while (tmp < len) {\\n            // updating start\\n            start = tmp;\\n            // moving finish to the end of the next word\\n            finish = start + 1;\\n            while (finish < len && s[finish] != \\' \\') finish++;\\n            // preparing the next loop\\n            tmp = finish + 1;\\n            while (tmp < len && s[tmp] == \\' \\') tmp++;\\n        }\\n        return finish - start;\\n    }\\n};\\n```\n```cpp\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        // edge case out\\n        if (!s.size()) return 0;\\n        int start, finish = s.size() - 1;\\n        // moving finish to the end of the last word\\n        while (finish && s[finish] == \\' \\') finish--;\\n        // moving start to the end of the last word\\n        start = finish;\\n        while (start > -1 && s[start] != \\' \\') start--;\\n        return finish - start;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 804768,
                "title": "javascript-1-line-and-5-line",
                "content": "Here are two different single line solutions. The first gets the starting and ending index of the last word, the second splits the array and pops off the last item.\\n\\n```\\nvar lengthOfLastWord = function(s) {\\n    return s.trimEnd().length - s.trimEnd().lastIndexOf(\" \") - 1\\n};\\n```\\n\\n```\\nvar lengthOfLastWord = function(s) {    \\n    return s.trimEnd().split(\" \").pop().length\\n};\\n```\\n\\nAnd here is a 5 Line solution. The idea is to cycle to the end of the first word, and then cycle to the start of the word. This was just a bonus challenge if you don\\'t want to use javascript functions.\\n```\\nvar lengthOfLastWord2 = function(s) {    \\n    let end = s.length - 1\\n    while (s[end] == \" \") end--\\n    let start = end\\n    while (s[start] != \" \" && start > -1) start--\\n    return end - start\\n};\\n```\\n\\nHappy Coding!\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar lengthOfLastWord = function(s) {\\n    return s.trimEnd().length - s.trimEnd().lastIndexOf(\" \") - 1\\n};\\n```\n```\\nvar lengthOfLastWord = function(s) {    \\n    return s.trimEnd().split(\" \").pop().length\\n};\\n```\n```\\nvar lengthOfLastWord2 = function(s) {    \\n    let end = s.length - 1\\n    while (s[end] == \" \") end--\\n    let start = end\\n    while (s[start] != \" \" && start > -1) start--\\n    return end - start\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 221983,
                "title": "javascript",
                "content": "```\\nvar lengthOfLastWord = function(s) {\\n    s = s.replace(/^\\\\s+|\\\\s+$/g,\\'\\');\\n    var arr = s.split(\\' \\');\\n    return arr[arr.length-1].length;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar lengthOfLastWord = function(s) {\\n    s = s.replace(/^\\\\s+|\\\\s+$/g,\\'\\');\\n    var arr = s.split(\\' \\');\\n    return arr[arr.length-1].length;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 22272,
                "title": "another-simple-solution",
                "content": "         int lengthOfLastWord(const char *s) {\\n            int len  = strlen(s);\\n            int i=len-1;\\n    \\n            while(s[i]==' ')   //remove the spaces from end\\n             i--;\\n          \\n            int j; \\n            for( j= i; j>=0; j--)   //u got a word\\n            {\\n               if(s[j]==' ')       /break before hitting second last word\\n                 break;\\n            }\\n            return i-j;     //return length\\n    }",
                "solutionTags": [],
                "code": "         int lengthOfLastWord(const char *s) {\\n            int len  = strlen(s);\\n            int i=len-1;\\n    \\n            while(s[i]==' ')   //remove the spaces from end\\n             i--;\\n          \\n            int j; \\n            for( j= i; j>=0; j--)   //u got a word\\n            {\\n               if(s[j]==' ')       /break before hitting second last word\\n                 break;\\n            }\\n            return i-j;     //return length\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3922676,
                "title": "easy-c-for-beginner-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nFirst we try to remove the spaces form the back. Then we try to find the first space starting from the last letter or if there is only one word, we go to the start of the string.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. There is an **i** which eliminates the spaces from behind. If there aren\\'t any, **i** stays in last position.\\n2. The pointer **j** finds the first space starting from pointer **i** or goes till the string\\'s beginning if there is only one word.\\n3. We return **(i-j)**.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n_O(n)_\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n_O(1)_\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int n = s.length();\\n        int i;\\n        for(i = n-1;i>=0;i--){\\n            if(s[i] != \\' \\')\\n                break;\\n        }\\n        int j;\\n        for(j=i;j>=0;j--){\\n            if(s[j] == \\' \\')\\n                break;\\n        }\\n        return (i-j);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int n = s.length();\\n        int i;\\n        for(i = n-1;i>=0;i--){\\n            if(s[i] != \\' \\')\\n                break;\\n        }\\n        int j;\\n        for(j=i;j>=0;j--){\\n            if(s[j] == \\' \\')\\n                break;\\n        }\\n        return (i-j);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3274390,
                "title": "java-short-and-sweet-beats-100",
                "content": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int i = s.length()-1;\\n        int l =0;\\n        while (s.charAt(i)==\\' \\')\\n        {\\n            i--;\\n        }\\n        while (i>=0&&s.charAt(i)!=\\' \\')\\n        {\\n            i--;\\n            l++;\\n        }\\n        return l;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int i = s.length()-1;\\n        int l =0;\\n        while (s.charAt(i)==\\' \\')\\n        {\\n            i--;\\n        }\\n        while (i>=0&&s.charAt(i)!=\\' \\')\\n        {\\n            i--;\\n            l++;\\n        }\\n        return l;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3272940,
                "title": "simple-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n       return len(s.split()[-1])\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n       return len(s.split()[-1])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3142122,
                "title": "starting-from-the-last",
                "content": "\\n\\n# Code\\n```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        var lWord = s.Length;\\n        var output =0;\\n        var foundWord = false;\\n\\n        for (int i = lWord -1; i >=0; i-- ){\\n            if(s[i] != \\' \\'){\\n                foundWord = true;\\n                output++;\\n                continue;\\n            } else if(foundWord){\\n                break;    \\n            }\\n        }\\n        return output;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        var lWord = s.Length;\\n        var output =0;\\n        var foundWord = false;\\n\\n        for (int i = lWord -1; i >=0; i-- ){\\n            if(s[i] != \\' \\'){\\n                foundWord = true;\\n                output++;\\n                continue;\\n            } else if(foundWord){\\n                break;    \\n            }\\n        }\\n        return output;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3110648,
                "title": "lenght-of-last-word",
                "content": "# Intuition\\nTo find the length of the last word in a string, we first need to remove any trailing spaces from the input string.\\nAfter that, we can split the string into an array of words using the \\' \\' (space) as the delimiter.\\nThe last word in the array can be accessed using the last property.\\nThe length of the last word can be found by using the length property.\\n# Approach\\nWe use the trim() method to remove any trailing spaces from the input string.\\nWe check if the input string is empty, if yes return 0.\\nUse the split() method to split the string into an array of words using the \\' \\' (space) as the delimiter.\\nAccess the last word in the array using the last property.\\nReturn the length of the last word using the length property.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  int lengthOfLastWord(String s) {\\n    s = s.trim(); // remove trailing spaces\\n    if (s.isEmpty) return 0;\\n    return s.split(\\' \\').last.length;\\n}\\n}\\n```",
                "solutionTags": [
                    "Dart",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n  int lengthOfLastWord(String s) {\\n    s = s.trim(); // remove trailing spaces\\n    if (s.isEmpty) return 0;\\n    return s.split(\\' \\').last.length;\\n}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3100715,
                "title": "java-easy-solution-3-approaches-0ms-100-fastest-solution",
                "content": "Please guys UpVote to get more solution like this...\\n\\n# Java First Approach\\n```\\n// Runtime 1 ms, Beats 47.40%\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] str = s.split(\" \");\\n        int n = str.length;\\n        int len = str[n-1].length();\\n        return len;\\n    }\\n}\\n```\\n\\n# Java Second Approach\\n```\\n//Runtime 1 ms, Beats 47.40%\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] str = s.split(\" \");\\n        String lastWord = str[str.length-1];\\n        return lastWord.length();\\n    }\\n}\\n```\\n# Java Optimised Approach\\n```\\n// Runtime 0 ms, Beats 100%\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        String trim = s.trim();\\n        char[] ch = trim.toCharArray();\\n        int cnt =0;\\n        for(int i = ch.length-1;i>=0;i--) {\\n            cnt++;\\n            if(ch[i]==\\' \\') {\\n                return cnt-1;\\n            }\\n        }\\n        return cnt;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n// Runtime 1 ms, Beats 47.40%\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] str = s.split(\" \");\\n        int n = str.length;\\n        int len = str[n-1].length();\\n        return len;\\n    }\\n}\\n```\n```\\n//Runtime 1 ms, Beats 47.40%\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] str = s.split(\" \");\\n        String lastWord = str[str.length-1];\\n        return lastWord.length();\\n    }\\n}\\n```\n```\\n// Runtime 0 ms, Beats 100%\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        String trim = s.trim();\\n        char[] ch = trim.toCharArray();\\n        int cnt =0;\\n        for(int i = ch.length-1;i>=0;i--) {\\n            cnt++;\\n            if(ch[i]==\\' \\') {\\n                return cnt-1;\\n            }\\n        }\\n        return cnt;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3035639,
                "title": "c-solution-without-using-built-in-functions",
                "content": "# Approach\\nThe approach is simple. First, we skip all spaces from the right side and save the last non-space character index as the last word\\'s character index (`endIndex`). Then we skip all non-space characters to find the index of the first word\\'s character (`startIndex`). As a result, the length of the last word equals the difference between `endIndex` and `startIndex`.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        var endIndex = s.Length - 1;\\n        while (endIndex >= 0 && s[endIndex] == \\' \\')\\n            endIndex--;\\n        var startIndex = endIndex;\\n        while (startIndex >= 0 && s[startIndex] != \\' \\')\\n            startIndex--;\\n        return endIndex - startIndex;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        var endIndex = s.Length - 1;\\n        while (endIndex >= 0 && s[endIndex] == \\' \\')\\n            endIndex--;\\n        var startIndex = endIndex;\\n        while (startIndex >= 0 && s[startIndex] != \\' \\')\\n            startIndex--;\\n        return endIndex - startIndex;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2592273,
                "title": "python-solution-easy-explained",
                "content": "If you like the solution, your upvote is appreciated! \\uD83E\\uDD1D\\n\\nExplanation:\\n\\nFirst we remove all spaces from end. To do that, we change s to contain all the characters but the last one if it is \" \".\\n\\nThen we count from the end of s s, the number of characters until there is a space.\\n\\nAnd that is it!\\n\\nIf you did not yet, upvote to make my day \\uD83C\\uDF1E\\n\\n```\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        \\n        while s[-1] == \" \":\\n            s = s[:-1]\\n        \\n        index = -1\\n        char = s[index]\\n        res = 0\\n        \\n        while char != \" \":\\n            print(char)\\n            res += 1\\n            index -= 1\\n            if abs(index) == len(s) + 1:\\n                return res\\n            char = s[index]\\n        \\n        return res\\n```\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        \\n        while s[-1] == \" \":\\n            s = s[:-1]\\n        \\n        index = -1\\n        char = s[index]\\n        res = 0\\n        \\n        while char != \" \":\\n            print(char)\\n            res += 1\\n            index -= 1\\n            if abs(index) == len(s) + 1:\\n                return res\\n            char = s[index]\\n        \\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2418071,
                "title": "python-easy-solution",
                "content": "```\\ndef lengthOfLastWord(self, s: str) -> int:\\n        array = s.split() \\n        return len(array[-1])\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef lengthOfLastWord(self, s: str) -> int:\\n        array = s.split() \\n        return len(array[-1])\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2379617,
                "title": "c-solution-0ms-5-lines-fast-than-100",
                "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i=s.length()-1;\\n        while(s[i]==\\' \\')    i--;\\n        int word_start = i;\\n        for(; i>=0; i--)\\n            if(s[i]==\\' \\')        break;            \\n        return word_start-i;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i=s.length()-1;\\n        while(s[i]==\\' \\')    i--;\\n        int word_start = i;\\n        for(; i>=0; i--)\\n            if(s[i]==\\' \\')        break;            \\n        return word_start-i;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1863802,
                "title": "golang-go-0ms-100-faster",
                "content": "```\\nfunc lengthOfLastWord(s string) int {\\n    n := len(s)\\n    count := 0\\n    \\n    for i:=n-1; i>=0; i-- {\\n        if count == 0 && s[i] == \\' \\' {\\n            continue\\n        }else {\\n            if s[i] == \\' \\' {\\n                break\\n            }\\n            \\n            count++\\n        }\\n    }\\n    \\n    return count\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc lengthOfLastWord(s string) int {\\n    n := len(s)\\n    count := 0\\n    \\n    for i:=n-1; i>=0; i-- {\\n        if count == 0 && s[i] == \\' \\' {\\n            continue\\n        }else {\\n            if s[i] == \\' \\' {\\n                break\\n            }\\n            \\n            count++\\n        }\\n    }\\n    \\n    return count\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1739447,
                "title": "lengthoflastword",
                "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] spilt=s.split(\" \");\\n        int num = spilt[spilt.length-1].length();\\n        return num;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] spilt=s.split(\" \");\\n        int num = spilt[spilt.length-1].length();\\n        return num;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1451896,
                "title": "loved-the-one-piece-reference",
                "content": "#this is my code:\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        word= s.split()\\n        return len(word[-1])",
                "solutionTags": [],
                "code": "#this is my code:\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        word= s.split()\\n        return len(word[-1])",
                "codeTag": "Java"
            },
            {
                "id": 1417517,
                "title": "2-lines-0-ms-solution-in-java",
                "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        s = s.trim();\\n        return s.length() - s.lastIndexOf(\" \") - 1;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        s = s.trim();\\n        return s.length() - s.lastIndexOf(\" \") - 1;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1069639,
                "title": "swift-0ms",
                "content": "```\\n    func lengthOfLastWord(_ s: String) -> Int {\\n        var res = 0\\n        for c in s.reversed() {\\n            if c == \" \" {\\n                if res > 0 {\\n                    return res\\n                }\\n            } else {\\n                res += 1\\n            }\\n        }\\n        return res\\n    }\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\n    func lengthOfLastWord(_ s: String) -> Int {\\n        var res = 0\\n        for c in s.reversed() {\\n            if c == \" \" {\\n                if res > 0 {\\n                    return res\\n                }\\n            } else {\\n                res += 1\\n            }\\n        }\\n        return res\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1018728,
                "title": "golang-0-ms-2-1-mb",
                "content": "```\\nfunc lengthOfLastWord(s string) int {  \\n    s = strings.TrimRight(s, \" \")\\n        \\n    return len(s) -1 - strings.LastIndex(s, \" \")\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc lengthOfLastWord(s string) int {  \\n    s = strings.TrimRight(s, \" \")\\n        \\n    return len(s) -1 - strings.LastIndex(s, \" \")\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 847631,
                "title": "c-a-simple-and-comprehensive-solution-in-linear-time",
                "content": "\\tclass Solution {\\n\\tpublic:\\n\\t\\tint lengthOfLastWord(string s) {\\n\\t\\t\\tint realEnd = s.size() - 1;\\n\\t\\t\\twhile(realEnd >= 0 && s[realEnd] == \\' \\')\\n\\t\\t\\t{\\n\\t\\t\\t\\t--realEnd;\\n\\t\\t\\t}\\n\\t\\t\\tfor (int startLastWord = realEnd; startLastWord >= 0; --startLastWord)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif (s[startLastWord] == \\' \\')\\n\\t\\t\\t\\t\\treturn realEnd - startLastWord;\\n        \\n\\t\\t\\t}\\n\\t\\t\\t return realEnd + 1; \\n\\t\\t}\\n};\\n\\'\\'\\'",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tint lengthOfLastWord(string s) {\\n\\t\\t\\tint realEnd = s.size() - 1;\\n\\t\\t\\twhile(realEnd >= 0 && s[realEnd] == \\' \\')\\n\\t\\t\\t{\\n\\t\\t\\t\\t--realEnd;\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 847546,
                "title": "length-of-last-word-java-beats-100-simple-and-explained",
                "content": "This problem is real simple when we start to iterate from end to beginning of the given string.\\n1. First while loop, iterates over all the empty spaces at the end\\nExample String: ```s = \"Hello \"``` Last word is \\'Hello\\', but there is an extra space, thus we are removing all such spaces from consideration in this loop.\\n2. Second loop iterates over the last word and count number of characters in it\\n```\\npublic int lengthOfLastWord(String s) {\\n\\tint i = s.length() - 1, len = 0;\\n\\twhile (i >= 0 && s.charAt(i) == \\' \\') {i--;};\\n\\twhile (i >= 0 && s.charAt(i) != \\' \\'){ len++; i--;}\\n\\treturn len;\\n}\\n```",
                "solutionTags": [
                    "String"
                ],
                "code": "```s = \"Hello \"```\n```\\npublic int lengthOfLastWord(String s) {\\n\\tint i = s.length() - 1, len = 0;\\n\\twhile (i >= 0 && s.charAt(i) == \\' \\') {i--;};\\n\\twhile (i >= 0 && s.charAt(i) != \\' \\'){ len++; i--;}\\n\\treturn len;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 847478,
                "title": "java-super-simple-two-line-easy-solution",
                "content": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] words = s.split(\"\\\\\\\\s+\");\\n        return words.length == 0 ? 0 : words[words.length-1].length();\\n    }\\n}\\n```\\n**Like it? please upvote...**",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] words = s.split(\"\\\\\\\\s+\");\\n        return words.length == 0 ? 0 : words[words.length-1].length();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 741936,
                "title": "rust-solution-0ms-2-1mb",
                "content": "```rust\\nimpl Solution {\\n    pub fn length_of_last_word(s: String) -> i32 {\\n        match s.split_whitespace().last() {\\n            Some(word) => word.len() as i32,\\n            None => 0\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```rust\\nimpl Solution {\\n    pub fn length_of_last_word(s: String) -> i32 {\\n        match s.split_whitespace().last() {\\n            Some(word) => word.len() as i32,\\n            None => 0\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 309026,
                "title": "c-0-ms-100-beat-straight-forward-o-n-solution-megahax-torrent-freak",
                "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        \\n        if (s.size() <= 0) { return 0; }\\n        \\n        int aIndex = s.size() - 1;\\n        \\n        //Skip leading spaces.\\n        while (aIndex >= 0 && s[aIndex] == \\' \\') { aIndex--; }\\n        \\n        //If it\\'s all spaces, there\\'s no word.\\n        if (aIndex == -1) { return 0; }\\n        \\n        //Here\\'s where our word started.\\n        int aEnd = aIndex;\\n        while (aIndex >= 0 && s[aIndex] != \\' \\') {\\n            aIndex--;\\n        }\\n\\n        //The length of your big long word. (It\\'s not so big and long)\\n        return (aEnd - aIndex);\\n    }\\n};\\n```\\n\\nGG",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        \\n        if (s.size() <= 0) { return 0; }\\n        \\n        int aIndex = s.size() - 1;\\n        \\n        //Skip leading spaces.\\n        while (aIndex >= 0 && s[aIndex] == \\' \\') { aIndex--; }\\n        \\n        //If it\\'s all spaces, there\\'s no word.\\n        if (aIndex == -1) { return 0; }\\n        \\n        //Here\\'s where our word started.\\n        int aEnd = aIndex;\\n        while (aIndex >= 0 && s[aIndex] != \\' \\') {\\n            aIndex--;\\n        }\\n\\n        //The length of your big long word. (It\\'s not so big and long)\\n        return (aEnd - aIndex);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 293401,
                "title": "c-1-liner",
                "content": "```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        return s.Trim().Split().LastOrDefault().Length;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        return s.Trim().Split().LastOrDefault().Length;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 22024,
                "title": "my-simple-c-nice-solution",
                "content": "```\\nint lengthOfLastWord(string s) {\\n      int count = 0;\\n      for(int i=s.size()-1;i>=0;--i)\\n      {\\n          if(s[i]==' '&& count != 0) break;\\n          if(s[i]!=' ') ++count;\\n      }\\n      return count;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nint lengthOfLastWord(string s) {\\n      int count = 0;\\n      for(int i=s.size()-1;i>=0;--i)\\n      {\\n          if(s[i]==' '&& count != 0) break;\\n          if(s[i]!=' ') ++count;\\n      }\\n      return count;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 22050,
                "title": "c-0ms",
                "content": "```\\nint lengthOfLastWord(char* s) {\\n    int len = strlen(s), wordLen = 0;\\n    while (len--) {\\n        if (s[len] == ' ' && wordLen) {\\n            break;\\n        } else if (s[len] != ' ') {\\n            wordLen++;\\n        }\\n    }\\n    return wordLen;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nint lengthOfLastWord(char* s) {\\n    int len = strlen(s), wordLen = 0;\\n    while (len--) {\\n        if (s[len] == ' ' && wordLen) {\\n            break;\\n        } else if (s[len] != ' ') {\\n            wordLen++;\\n        }\\n    }\\n    return wordLen;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 22153,
                "title": "two-python-solutions-two-pointers-and-split",
                "content": "Using split is simple in python, but two pointer solution saves memory.\\n\\nSplit Version\\n   \\n\\n    class Solution(object):\\n        def lengthOfLastWord(self, s):\\n            \"\"\"\\n            :type s: str\\n            :rtype: int\\n            \"\"\"\\n            l = s.split()\\n            if len(l) == 0: return 0\\n            else: return len(l[-1])\\n        \\n\\nTwo Pointer Version (use a boolean variable to indicate whether we should update the length)\\n\\n    class Solution(object):\\n        def lengthOfLastWord(self, s):\\n            \"\"\"\\n            :type s: str\\n            :rtype: int\\n            \"\"\"\\n            start, res = 0, 0\\n            calc = True\\n            s += \" \"\\n            for i in xrange(len(s)):\\n                cur = s[i]\\n                if cur == ' ' and calc: \\n                    res = i-start\\n                    calc = False\\n                elif cur != ' ' and not calc:\\n                    start = i\\n                    calc = True\\n            return res",
                "solutionTags": [
                    "Python"
                ],
                "code": "Using split is simple in python, but two pointer solution saves memory.\\n\\nSplit Version\\n   \\n\\n    class Solution(object):\\n        def lengthOfLastWord(self, s):\\n            \"\"\"\\n            :type s: str\\n            :rtype: int\\n            \"\"\"\\n            l = s.split()\\n            if len(l) == 0: return 0\\n            else: return len(l[-1])\\n        \\n\\nTwo Pointer Version (use a boolean variable to indicate whether we should update the length)\\n\\n    class Solution(object):\\n        def lengthOfLastWord(self, s):\\n            \"\"\"\\n            :type s: str\\n            :rtype: int\\n            \"\"\"\\n            start, res = 0, 0\\n            calc = True\\n            s += \" \"\\n            for i in xrange(len(s)):\\n                cur = s[i]\\n                if cur == ' ' and calc: \\n                    res = i-start\\n                    calc = False\\n                elif cur != ' ' and not calc:\\n                    start = i\\n                    calc = True\\n            return res",
                "codeTag": "Java"
            },
            {
                "id": 21897,
                "title": "simple-c-solution",
                "content": "    int lengthOfLastWord(char* s) {\\n    int last_len= 0;\\n    while (*s) {\\n        while (*s==' ') ++s; // skip spaces\\n        if (*s) {   \\n            last_len=0; // new word, reset last word length\\n            while (*s && *s !=' ') { ++s; ++last_len; }\\n        }\\n    }\\n    return last_len;\\n}",
                "solutionTags": [],
                "code": "    int lengthOfLastWord(char* s) {\\n    int last_len= 0;\\n    while (*s) {\\n        while (*s==' ') ++s; // skip spaces\\n        if (*s) {   \\n            last_len=0; // new word, reset last word length\\n            while (*s && *s !=' ') { ++s; ++last_len; }\\n        }\\n    }\\n    return last_len;\\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 4074061,
                "title": "c-easy-to-understand-100-beats",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count=0;\\n        bool flag= false;\\n        for(int i=s.length()-1; i>=0; i--){\\n            if(s[i]>=\\'a\\' && s[i]<=\\'z\\' || s[i]>=\\'A\\' && s[i]<=\\'Z\\'){\\n                flag= true;\\n                count++;\\n            }else{\\n                if(flag==true)\\n                    return count;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count=0;\\n        bool flag= false;\\n        for(int i=s.length()-1; i>=0; i--){\\n            if(s[i]>=\\'a\\' && s[i]<=\\'z\\' || s[i]>=\\'A\\' && s[i]<=\\'Z\\'){\\n                flag= true;\\n                count++;\\n            }else{\\n                if(flag==true)\\n                    return count;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3629944,
                "title": "java-simple-code-easy-understandable-100-beats",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- We can start iterating the characters of the string from the end and count the length of the last word.\\n- We skip any leading spaces and start counting when we encounter a non-space character.\\n- We stop counting when we encounter a space character after counting at least one non-space character.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Initialize two variables: ans to store the length of the last word and found to keep track of whether any non-space character has been found.\\n2. Iterate through the characters of the input string s in reverse order, starting from the last character.\\n3. If the current character is a space and no non-space character has been found yet (i.e., found == 0), continue to the next iteration.\\n4. If the current character is not a space, increment the ans variable to count the length of the last word and set found = 1 to indicate that a non-space character has been found.\\n5. If the current character is a space and at least one non-space character has been found, break the loop since we have counted the last word.\\n6.Finally, return the value of ans, which represents the length of the last word in the string\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int ans=0;\\n        int found=0;\\n        char gap=\\' \\';\\n        for(int i=s.length()-1;i>=0;i--){\\n            if(s.charAt(i)==gap && found==0){\\n                continue;\\n            }else if(s.charAt(i)!=gap){\\n                ans++;\\n                found++;\\n            }else{\\n                break;\\n            }\\n        }return ans;        \\n    }\\n}\\n```\\n\\n\\nGuys please upvote if you like the code and feel it worth!!",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int ans=0;\\n        int found=0;\\n        char gap=\\' \\';\\n        for(int i=s.length()-1;i>=0;i--){\\n            if(s.charAt(i)==gap && found==0){\\n                continue;\\n            }else if(s.charAt(i)!=gap){\\n                ans++;\\n                found++;\\n            }else{\\n                break;\\n            }\\n        }return ans;        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3513142,
                "title": "simple-java-solution-with-o-n-time-complexity-and-o-1-space-complexity",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int count = 0;\\n        boolean b = false;\\n        \\n        for(int i = s.length()-1;i>=0;i--){\\n            if(s.charAt(i) != \\' \\'){\\n                b = true;\\n                count++;\\n            }else{\\n                if(b){\\n                    return count;\\n                    }\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int count = 0;\\n        boolean b = false;\\n        \\n        for(int i = s.length()-1;i>=0;i--){\\n            if(s.charAt(i) != \\' \\'){\\n                b = true;\\n                count++;\\n            }else{\\n                if(b){\\n                    return count;\\n                    }\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3483883,
                "title": "simple-js-ts-hack",
                "content": "# Code\\n```\\nfunction lengthOfLastWord(s: string): number {\\n    const splitted = s.trim().split(\\' \\')\\n\\n    return splitted[splitted.length - 1].length\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript",
                    "String"
                ],
                "code": "```\\nfunction lengthOfLastWord(s: string): number {\\n    const splitted = s.trim().split(\\' \\')\\n\\n    return splitted[splitted.length - 1].length\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3397873,
                "title": "58-length-of-last-word-simple-easy",
                "content": "\\n# Code\\n```\\nint lengthOfLastWord(char * s){\\n    int len=strlen(s); \\n    int count=0;\\n    int i=len-1;\\n\\n    while(s[i]==\\' \\') i--;\\n    for(;i>=0;i--){\\n        if(s[i]==\\' \\')\\n            break;\\n        count++;\\n    }\\n    return count;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint lengthOfLastWord(char * s){\\n    int len=strlen(s); \\n    int count=0;\\n    int i=len-1;\\n\\n    while(s[i]==\\' \\') i--;\\n    for(;i>=0;i--){\\n        if(s[i]==\\' \\')\\n            break;\\n        count++;\\n    }\\n    return count;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3378227,
                "title": "c-solution-kindly-upvote-please",
                "content": "# *******APPROACH*******\\n2. 1. starting from the back of the string\\n2. declare a variable ans=0\\n3. start a for loop which starts with i being s.length()-1 and then keep decrementing till it becomes equal to 0\\n4. then two conditiond will be applied where if the s[i] is blank space and the ans>0 then return the ans\\n5. and if the s[i] is not equal to blank spac then add 1 to answer\\nreturn ans\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int ans =0;\\n        for(int i=s.size()-1;i>=0;i--){\\n          if(s[i]==\\' \\' && ans>0) break;\\n          if(s[i]!=\\' \\') ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int ans =0;\\n        for(int i=s.size()-1;i>=0;i--){\\n          if(s[i]==\\' \\' && ans>0) break;\\n          if(s[i]!=\\' \\') ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3374853,
                "title": "python3-o-n-using-loop-easy-93-beats",
                "content": "\\n\\n# Complexity\\n- Time complexity:\\no(n) 93% beats\\n\\n- Space complexity:\\n98% beats\\n\\n\\n# Code\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        l,n=0,0\\n        s+=\\' \\'\\n        for i in range(len(s)):\\n            if s[i]!=\\' \\':\\n                n+=1\\n            else:\\n                if n>0:\\n                    l=n   \\n                n=0\\n        return l         \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        l,n=0,0\\n        s+=\\' \\'\\n        for i in range(len(s)):\\n            if s[i]!=\\' \\':\\n                n+=1\\n            else:\\n                if n>0:\\n                    l=n   \\n                n=0\\n        return l         \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3183905,
                "title": "kotlin-simple-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    fun lengthOfLastWord(s: String) = s.split(\\' \\')\\n        .filter { it.isNotEmpty() }\\n        .last()\\n        .length\\n}\\n```",
                "solutionTags": [
                    "Kotlin",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    fun lengthOfLastWord(s: String) = s.split(\\' \\')\\n        .filter { it.isNotEmpty() }\\n        .last()\\n        .length\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3140751,
                "title": "c-easy",
                "content": "# Intuition\\nAs length of last word is asked , so we will traverse from the back and check for two conditions:\\n1. if we wncounter a space and count is greater than zero.\\nmeans , we have already traversed one word(last word). So break the loop and return count\\n2. if we encounter a space but count is still zero (base case 2). here we will continue as we haven\\'t found length of last word.\\n3. At last , return count\\n# Approach\\n--same as above--\\n# Complexity\\n- Time complexity:\\nO(n) ... where \\'n\\' is lenght of string\\n- Space complexity:\\nO(1)... as we haven\\'t used any additional DS here\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string string) {\\n        int n=string.size();\\n        int cnt=0;\\n        for(int i=n-1;i>=0;i--)\\n        {\\n            if (isspace(string.at(i)) && cnt>0) break;\\n            else\\n            {\\n                if (isspace(string.at(i)) && cnt==0) continue;\\n                else cnt++;\\n            }\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string string) {\\n        int n=string.size();\\n        int cnt=0;\\n        for(int i=n-1;i>=0;i--)\\n        {\\n            if (isspace(string.at(i)) && cnt>0) break;\\n            else\\n            {\\n                if (isspace(string.at(i)) && cnt==0) continue;\\n                else cnt++;\\n            }\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3070324,
                "title": "easiest-solution-c-with-0ms-beats-100-of-solutions",
                "content": "# Complexity\\n- Time complexity:\\n$O(n)$\\n\\n- Space complexity:\\n$O(n)$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int length=0, index=0;\\n        for(int i {(int)s.size()-1};i>=0;i--){\\n            if(isalpha(s[i])){\\n                index = i;\\n                break;\\n            }\\n        }\\n        for(int i = index; i>=0;i--){\\n            if(!isalpha(s[i])) break;\\n            length++;\\n        }\\n        return length;\\n    }\\n    \\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int length=0, index=0;\\n        for(int i {(int)s.size()-1};i>=0;i--){\\n            if(isalpha(s[i])){\\n                index = i;\\n                break;\\n            }\\n        }\\n        for(int i = index; i>=0;i--){\\n            if(!isalpha(s[i])) break;\\n            length++;\\n        }\\n        return length;\\n    }\\n    \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3046667,
                "title": "java-easy-and-simple-using-loop",
                "content": "![cat-kitten.gif](https://assets.leetcode.com/users/images/ed554976-6041-4c6b-9d1a-45069b7934e1_1673600851.7632859.gif)\\n\\n# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIntution should be always based on simple logical thinking ->\\n1. we can say every word is seperated by space [ \" \" ]\\n \\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n our approach is preety simple we are making a char array and traversing it form backward and thus we will get last word as first and then we will take it\\'s length \\n    \\n      but there is a catch we can get space at the last so we need to\\n      exactly detect the first word after reversing ..\\nso we use a flag to detect if we reached the first letter of our word.\\nwhen ever we get a first letter we make our flag ture otherwise it will be false \\n    \\n      intuitive right ? \\n# Complexity\\n- Time complexity:$$O(N)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(N)$$ as we have used an another array but it can be done without taking another array \\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Additionals\\n-  connect with me - https://linktr.ee/_soumya\\n\\n# Code\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        char[] arr=s.toCharArray();\\n        int len=0;\\n        boolean flag=false;\\n        for(int i=arr.length-1; i>=0;i--)\\n        {\\n           if(arr[i] != \\' \\' && flag != true)\\n           {\\n               flag= true;\\n           }\\n           if(flag && arr[i] != \\' \\') len++;\\n           else if (flag && arr[i] == \\' \\') break;\\n        }\\n        return len;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Interactive"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        char[] arr=s.toCharArray();\\n        int len=0;\\n        boolean flag=false;\\n        for(int i=arr.length-1; i>=0;i--)\\n        {\\n           if(arr[i] != \\' \\' && flag != true)\\n           {\\n               flag= true;\\n           }\\n           if(flag && arr[i] != \\' \\') len++;\\n           else if (flag && arr[i] == \\' \\') break;\\n        }\\n        return len;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3037636,
                "title": "2-line-approach-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        words = s.split()\\n        return len(words[-1])\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        words = s.split()\\n        return len(words[-1])\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2937890,
                "title": "1-liner-code-of-last-word-count-without-funtion",
                "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n       s= s.trim();\\n//         System.out.println(s);\\n       int sum=0;\\n       int i=s.length();\\n        while (i>0){\\n            if(s.charAt(i-1)!=\\' \\'){\\n                sum+=1;\\n                i--;\\n            }\\n           else break;\\n        }\\n        return sum;\\n       \\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n       s= s.trim();\\n//         System.out.println(s);\\n       int sum=0;\\n       int i=s.length();\\n        while (i>0){\\n            if(s.charAt(i-1)!=\\' \\'){\\n                sum+=1;\\n                i--;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2936214,
                "title": "javascript-one-liner",
                "content": "# Approach\\n\\nThis approach uses a simple series of chained functions. First I trimmed the input string which removes extra and trailing spaces. This is necessary so we don\\'t add empty strings to the array. I then split the string by single white space, moving the separated strings into an array. Then we simply return the length of the last string in the array. \\n\\n# Complexity\\n- Time complexity:\\nlinear (we need to loop through the input string)\\n\\n- Space complexity:\\nlinear (we are using an array to store the split strings which is (roughly) linearly related to the size of the input string)\\n\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLastWord = function(s) {\\n    return s.trim().split(\" \").at(-1).length;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLastWord = function(s) {\\n    return s.trim().split(\" \").at(-1).length;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2894610,
                "title": "no-functions-only-for-and-if",
                "content": "\\n# Code\\n```\\nclass Solution \\n{\\n    fun lengthOfLastWord(s: String): Int \\n    {\\n        val n=s.length-1\\n        var count=0\\n\\n        for(i in n downTo 0 )\\n        {\\n          if(s[i]!=\\' \\') count++\\n        \\n          if(s[i]==\\' \\' && count != 0) break\\n        }\\n            return count\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution \\n{\\n    fun lengthOfLastWord(s: String): Int \\n    {\\n        val n=s.length-1\\n        var count=0\\n\\n        for(i in n downTo 0 )\\n        {\\n          if(s[i]!=\\' \\') count++\\n        \\n          if(s[i]==\\' \\' && count != 0) break\\n        }\\n            return count\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2806703,
                "title": "c-easy-simple",
                "content": "```\\nint lengthOfLastWord(string s) {\\n\\t\\t//counts length of last word\\n        int count=0;          \\n\\t\\t//flag helps to understand when last word start and ends\\n        bool flag=false;\\n        for(int i=s.length()-1;i>=0;i--)\\n        {\\n            if(s[i]!=\\' \\')\\n            {\\n                flag=true;\\n                count++;\\n            }\\n            if(flag && s[i]==\\' \\')break;\\n        }\\n        return count;\\n    }\\n\\n```\\nUpvote if you like :)",
                "solutionTags": [],
                "code": "```\\nint lengthOfLastWord(string s) {\\n\\t\\t//counts length of last word\\n        int count=0;          \\n\\t\\t//flag helps to understand when last word start and ends\\n        bool flag=false;\\n        for(int i=s.length()-1;i>=0;i--)\\n        {\\n            if(s[i]!=\\' \\')\\n            {\\n                flag=true;\\n                count++;\\n            }\\n            if(flag && s[i]==\\' \\')break;\\n        }\\n        return count;\\n    }\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2787546,
                "title": "c-easiest-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int n = s.size();\\n        int count = 0;\\n        bool flag = 0;\\n        for(int i = n-1 ;i>=0;i--){\\n            if(s[i]!=\\' \\'){\\n            count++;\\n            flag = 1;\\n            }\\n           else {\\n               if(flag==1)\\n                   break;\\n         }\\n\\n        }\\n\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int n = s.size();\\n        int count = 0;\\n        bool flag = 0;\\n        for(int i = n-1 ;i>=0;i--){\\n            if(s[i]!=\\' \\'){\\n            count++;\\n            flag = 1;\\n            }\\n           else {\\n               if(flag==1)\\n                   break;\\n         }\\n\\n        }\\n\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2787545,
                "title": "very-very-easy-solution-in-cpp",
                "content": "\\n\\n# Complexity\\n- Time complexity:o(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:o(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int n=s.size();\\n        int c=0,f=0;\\n    for(int i=n-1;i>=0;i--)\\n    {\\n        if(s[i]!=\\' \\')\\n        {\\n         c++;\\n         f=1;\\n        }\\n        else if(f==1)\\n        break;\\n\\n    }\\n        return c;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int n=s.size();\\n        int c=0,f=0;\\n    for(int i=n-1;i>=0;i--)\\n    {\\n        if(s[i]!=\\' \\')\\n        {\\n         c++;\\n         f=1;\\n        }\\n        else if(f==1)\\n        break;\\n\\n    }\\n        return c;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2757355,
                "title": "java-easy-fast-and-beauty-100",
                "content": "All extra whitespace characters must be removed. Then, from the new line, we get its length and get the value of the index of the last space character.\\nWe subtract the index of the space character from the length and add minus 1. The last step will remove the space from the length.\\n```java\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        String trimmerString = s.trim();\\n\\n        return trimmerString.length() - trimmerString.lastIndexOf(\\' \\') - 1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```java\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        String trimmerString = s.trim();\\n\\n        return trimmerString.length() - trimmerString.lastIndexOf(\\' \\') - 1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2745253,
                "title": "c-solution-easy-to-understand",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nMaintaining a counter \\'sz\\' for finding the size of each word and updating it to 1 if a space followed by a character is encountered.\\n\\n# Complexity\\n- Time complexity:\\nO(lenght of string)\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int sz=0;\\n        char prev=\\'@\\';\\n        for (int i=0;i<s.size();i++){\\n            if (prev==\\' \\' && s[i]!=\\' \\') sz=1;\\n            else if (s[i]!=\\' \\') sz++;\\n            prev=s[i];\\n        }\\n        return sz;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int sz=0;\\n        char prev=\\'@\\';\\n        for (int i=0;i<s.size();i++){\\n            if (prev==\\' \\' && s[i]!=\\' \\') sz=1;\\n            else if (s[i]!=\\' \\') sz++;\\n            prev=s[i];\\n        }\\n        return sz;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2674142,
                "title": "100-faster-c-solution",
                "content": "**Upvote if it helps!**\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int b=0,m=0;\\n        for(int i=s.length()-1; i>-1; i--) {\\n            if(isalpha(s[i])) {\\n                if(!b) b=1;\\n                m++;\\n            }\\n            if(b && s[i]==\\' \\') {\\n                break;\\n            }\\n        }\\n        return m;\\n    }\\n};\\n```\\n**Upvote if it helps!**",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int b=0,m=0;\\n        for(int i=s.length()-1; i>-1; i--) {\\n            if(isalpha(s[i])) {\\n                if(!b) b=1;\\n                m++;\\n            }\\n            if(b && s[i]==\\' \\') {\\n                break;\\n            }\\n        }\\n        return m;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2650319,
                "title": "simple-java-solution",
                "content": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int ans = 0;\\n        s = s.trim();//Trims the whitespaces present in the beginning and the end\\n        for (int i = s.length()-1; i >=0 ; i--) {\\n            if (s.charAt(i) != \\' \\') ans++;\\n            else break;\\n        }\\n        return ans;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        int ans = 0;\\n        s = s.trim();//Trims the whitespaces present in the beginning and the end\\n        for (int i = s.length()-1; i >=0 ; i--) {\\n            if (s.charAt(i) != \\' \\') ans++;\\n            else break;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2510092,
                "title": "simple-java-solution",
                "content": "```\\nclass Solution {\\n  public int lengthOfLastWord(String s) {\\n    int i = s.length() - 1;\\n\\n    while (i >= 0 && s.charAt(i) == \\' \\')\\n      i--;\\n    final int lastIndex = i;\\n    while (i >= 0 && s.charAt(i) != \\' \\')\\n      i--;\\n\\n    return lastIndex - i;\\n  }\\n}\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n  public int lengthOfLastWord(String s) {\\n    int i = s.length() - 1;\\n\\n    while (i >= 0 && s.charAt(i) == \\' \\')\\n      i--;\\n    final int lastIndex = i;\\n    while (i >= 0 && s.charAt(i) != \\' \\')\\n      i--;\\n\\n    return lastIndex - i;\\n  }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2499108,
                "title": "go-0ms-100-simple",
                "content": "1. Using `strings` package\\n```\\nfunc lengthOfLastWord(s string) int {\\n    str := strings.Fields(s) //tokenize\\n    return len(str[len(str)-1])\\n}\\n```\\n\\n2. Reverse Loop\\n\\n```\\nfunc lengthOfLastWord(s string) (res int) {\\n    i := len(s) - 1\\n    \\n    // Skip trailing space char if any\\n    for i >= 0 {\\n        if s[i] == \\' \\' {\\n            i--\\n            continue\\n        }\\n        break\\n    }\\n    \\n    // Search for end of word i.e space char\\n    for i >= 0 {\\n        if s[i] == \\' \\' {\\n            break\\n        }\\n        i--\\n        res++\\n    }\\n    \\n    return res\\n}\\n```\\n\\n",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc lengthOfLastWord(s string) int {\\n    str := strings.Fields(s) //tokenize\\n    return len(str[len(str)-1])\\n}\\n```\n```\\nfunc lengthOfLastWord(s string) (res int) {\\n    i := len(s) - 1\\n    \\n    // Skip trailing space char if any\\n    for i >= 0 {\\n        if s[i] == \\' \\' {\\n            i--\\n            continue\\n        }\\n        break\\n    }\\n    \\n    // Search for end of word i.e space char\\n    for i >= 0 {\\n        if s[i] == \\' \\' {\\n            break\\n        }\\n        i--\\n        res++\\n    }\\n    \\n    return res\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2399031,
                "title": "python",
                "content": "Runtime: 25 ms, faster than 57.09% of Python online submissions for Length of Last Word.\\nMemory Usage: 13.4 MB, less than 92.84% of Python online submissions for Length of Last Word.\\n\\n```\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        return len(s.strip().split(\\' \\')[-1])\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        return len(s.strip().split(\\' \\')[-1])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2383726,
                "title": "2-strings-of-code-java",
                "content": "```\\npublic int lengthOfLastWord(String s) {\\n\\tString[] words = s.split(\" \");\\n    return (words[words.length - 1]).length();\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int lengthOfLastWord(String s) {\\n\\tString[] words = s.split(\" \");\\n    return (words[words.length - 1]).length();\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2373737,
                "title": "one-liner-javascript-solution",
                "content": "```\\n\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLastWord = function(s) {\\n   return s.trim().split(\" \")[s.trim().split(\" \").length -1 ].length;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLastWord = function(s) {\\n   return s.trim().split(\" \")[s.trim().split(\" \").length -1 ].length;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2272069,
                "title": "c-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int n=s.length() ;\\n        int count=0 ;\\n        int c=0 ;\\n        if(n==1)\\n        {\\n            return 1 ;\\n        }\\n      while(s[n-1]==\\' \\')\\n      {\\n          count++ ;\\n          n-- ;\\n      }\\n        for(int i=n-1 ;i>=0 ;i--)\\n        {\\n            if(s[i]==\\' \\')\\n            {\\n                break ;\\n            }\\n            c++ ;\\n        }\\n        return c ;\\n         }\\n};\\n```\\n**Please upvote if it is helpful !!!!**",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int n=s.length() ;\\n        int count=0 ;\\n        int c=0 ;\\n        if(n==1)\\n        {\\n            return 1 ;\\n        }\\n      while(s[n-1]==\\' \\')\\n      {\\n          count++ ;\\n          n-- ;\\n      }\\n        for(int i=n-1 ;i>=0 ;i--)\\n        {\\n            if(s[i]==\\' \\')\\n            {\\n                break ;\\n            }\\n            c++ ;\\n        }\\n        return c ;\\n         }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2241010,
                "title": "c-beginner-friendly-solution-0ms-100-faster",
                "content": "class Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n\\t\\n        int i = s.length() - 1 , count = 0;\\n        while(s[i] == \\' \\')\\n\\t\\t\\ti--;\\n        \\n        while(i>=0 && s[i] != \\' \\'){  \\n\\t\\t\\tcount++;\\n\\t\\t\\ti--;\\n        }\\n            \\n        return count;\\n    }\\n};`****`",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n\\t\\n        int i = s.length() - 1 , count = 0;\\n        while(s[i] == \\' \\')\\n\\t\\t\\ti--;\\n        \\n        while(i>=0 && s[i] != \\' \\'){  \\n\\t\\t\\tcount++;\\n\\t\\t\\ti--;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1933549,
                "title": "solution-in-c",
                "content": "**Runtime: 0 ms, faster than 100.00% of C online submissions for Length of Last Word.\\nMemory Usage: 5.6 MB, less than 72.92% of C online submissions for Length of Last Word.**\\n```\\nint lengthOfLastWord(char * s){\\n    int length = 0,i=1;\\n    if(s[0]!=\\' \\')length++;\\n    while(s[i]!=\\'\\\\0\\'){\\n        if(s[i]!=\\' \\'){\\n            if(s[i-1]==\\' \\'){\\n                length = 1;\\n            }\\n            else{\\n                length++;\\n            }\\n        }\\n        i++;\\n    }\\n    return length;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint lengthOfLastWord(char * s){\\n    int length = 0,i=1;\\n    if(s[0]!=\\' \\')length++;\\n    while(s[i]!=\\'\\\\0\\'){\\n        if(s[i]!=\\' \\'){\\n            if(s[i-1]==\\' \\'){\\n                length = 1;\\n            }\\n            else{\\n                length++;\\n            }\\n        }\\n        i++;\\n    }\\n    return length;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1898435,
                "title": "100-faster-easy-solution-reverse-loop-traverse",
                "content": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int len = 0;\\n            for(int i=s.length()-1; i>=0; i--){\\n                    if(s.charAt(i) != \\' \\'){\\n                            len++;\\n                    }else if(len>0){\\n                            return len;\\n                    }\\n            }\\n            return len;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int len = 0;\\n            for(int i=s.length()-1; i>=0; i--){\\n                    if(s.charAt(i) != \\' \\'){\\n                            len++;\\n                    }else if(len>0){\\n                            return len;\\n                    }\\n            }\\n            return len;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1395871,
                "title": "javascript-typescript-98-faster-explained",
                "content": "Rather than the simple one-liner of `s.trim().split(\\' \\').pop().length` you can use much less resources and not split the string into an array at all...\\n\\n1. Get the length of the string\\n2. Set a `count` at 0\\n3. Run a while loop that will decrement `i` by one each interation to look through the string from back to front\\n\\t4. If we see a space...\\n\\t\\t5. ...and the count is still at zero then continue we have not gotten to the last word yet ...OR the count is not zero we have reached the end of the word and we need to break out of our while loop\\n\\t6. Else we see a charecter we can increment our counter as it is a charecter in the last word of the string\\n7. Finally return our counter\\n\\n```\\nfunction lengthOfLastWord(s: string): number {\\n  let i = s.length;\\n  let count = 0;\\n  \\n  while (i--) {\\n    if (s[i] === \\' \\') {\\n      if (count === 0) { continue; } else { break; }\\n    } else {\\n      count += 1;\\n    }\\n  }\\n  \\n  return count;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nfunction lengthOfLastWord(s: string): number {\\n  let i = s.length;\\n  let count = 0;\\n  \\n  while (i--) {\\n    if (s[i] === \\' \\') {\\n      if (count === 0) { continue; } else { break; }\\n    } else {\\n      count += 1;\\n    }\\n  }\\n  \\n  return count;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1166349,
                "title": "c-simple-logic-faster-than-100",
                "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count = 0;\\n        for(int i = s.length()-1; i >= 0; i--){\\n            if(s[i] == \\' \\' && count > 0){\\n                break;\\n            }\\n            if(s[i] != \\' \\')\\n                count++;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count = 0;\\n        for(int i = s.length()-1; i >= 0; i--){\\n            if(s[i] == \\' \\' && count > 0){\\n                break;\\n            }\\n            if(s[i] != \\' \\')\\n                count++;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 847514,
                "title": "simple-java-solution-with-explaination-and-without-in-built-function-0ms-100-faster-o-1-space",
                "content": "1. to save time start counting from right to left and as soon as space reaches break the loop and return count.\\n2. to avoid special case where string might end with space. just check if we have already started counting length (i.e character other then space has occurred) . if yes and space is found break the loop.\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int length = 0;\\n        for(int i=s.length()-1;i>=0;i--) {\\n            if(s.charAt(i)==\\' \\') {\\n                if(length>0) {\\n                    break;                    \\n                }\\n            } else {\\n                length++;            \\n            }\\n        }\\n        return length;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int length = 0;\\n        for(int i=s.length()-1;i>=0;i--) {\\n            if(s.charAt(i)==\\' \\') {\\n                if(length>0) {\\n                    break;                    \\n                }\\n            } else {\\n                length++;            \\n            }\\n        }\\n        return length;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 798206,
                "title": "python-2-line-simplest-solution",
                "content": "```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        s = \" \".join(s.split())\\n        return 0 if len(s)==0 else len(s.split(\" \")[-1])\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        s = \" \".join(s.split())\\n        return 0 if len(s)==0 else len(s.split(\" \")[-1])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 628478,
                "title": "kotlin-very-simple-solution-1-loop-only-no-trim-no-split",
                "content": "```\\nclass Solution {\\n    fun lengthOfLastWord(s: String): Int {\\n        if (s.isEmpty()) return 0\\n        var i = s.length - 1\\n        var sum = 0\\n        while (i >= 0) {\\n            if (s[i] != \\' \\') sum++\\n            if (s[i] == \\' \\' && sum != 0) break\\n            i--\\n        }\\n        return sum\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun lengthOfLastWord(s: String): Int {\\n        if (s.isEmpty()) return 0\\n        var i = s.length - 1\\n        var sum = 0\\n        while (i >= 0) {\\n            if (s[i] != \\' \\') sum++\\n            if (s[i] == \\' \\' && sum != 0) break\\n            i--\\n        }\\n        return sum\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 476409,
                "title": "python3-20ms-faster-than-96-75-commented",
                "content": "```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n\\t\\t# Since we are going to search last word,\\n\\t\\t# it\\'s easier to work with reversed string\\n\\t\\t# We could just iterate from end in reverse order,\\n\\t\\t# but we want to use function find(\\' \\'), cause it\\'s going to be faster\\n        s = s[::-1]\\n\\t\\t\\n\\t\\t# Count how many spaces there are in the beginning of the reversed string\\n\\t\\t# This is going to be our `start` argument for find(\\' \\', start) function\\n        start = 0\\n        for c in s:\\n            if c != \\' \\':\\n                break\\n            start += 1\\n\\t\\t\\n\\t\\t# Search next whitespace after start position\\n        pos = s.find(\\' \\', start)\\n\\t\\t\\n        if pos < 0:\\n\\t\\t\\t# If we didn\\'t find whitespace anymore then:\\n\\t\\t\\t# 1) Either string consists only from whitespaces then start == len(s) and we return 0\\n\\t\\t\\t# 2) Last word is also a first word, so we return len(s) - start\\n            return len(s) - start if start < len(s) else 0\\n\\t\\t\\n\\t\\t# Otherwise return found position of whitespace - start position\\n        return pos - start\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n\\t\\t# Since we are going to search last word,\\n\\t\\t# it\\'s easier to work with reversed string\\n\\t\\t# We could just iterate from end in reverse order,\\n\\t\\t# but we want to use function find(\\' \\'), cause it\\'s going to be faster\\n        s = s[::-1]\\n\\t\\t\\n\\t\\t# Count how many spaces there are in the beginning of the reversed string\\n\\t\\t# This is going to be our `start` argument for find(\\' \\', start) function\\n        start = 0\\n        for c in s:\\n            if c != \\' \\':\\n                break\\n            start += 1\\n\\t\\t\\n\\t\\t# Search next whitespace after start position\\n        pos = s.find(\\' \\', start)\\n\\t\\t\\n        if pos < 0:\\n\\t\\t\\t# If we didn\\'t find whitespace anymore then:\\n\\t\\t\\t# 1) Either string consists only from whitespaces then start == len(s) and we return 0\\n\\t\\t\\t# 2) Last word is also a first word, so we return len(s) - start\\n            return len(s) - start if start < len(s) else 0\\n\\t\\t\\n\\t\\t# Otherwise return found position of whitespace - start position\\n        return pos - start\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1566430,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1674675,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1736793,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1564551,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1742686,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1654077,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1575675,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1569682,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1575875,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1574202,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1566430,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1674675,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1736793,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1564551,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1742686,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1654077,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1575675,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1569682,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1575875,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1574202,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 2002393,
                "content": [
                    {
                        "username": "AnkitModak",
                        "content": "Example 3 made me happy.\\n"
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Today is 6-Aug-2023. \\nJoyBoy has Returned and Gear 5 Luffy has come."
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Where can I watch the episodes as I am not able to watch them on zoro anime. Also, I dont want to use telegram."
                    },
                    {
                        "username": "TajPotato",
                        "content": "This question contains spoiler, please approach with caution."
                    },
                    {
                        "username": "pavansai0813",
                        "content": "[@Manish033](/Manish033) \\nexample 3, its related to One Piece anime, this episode was released today."
                    },
                    {
                        "username": "Manish033",
                        "content": "what spoiler bro?"
                    },
                    {
                        "username": "Sanu000",
                        "content": "// c++  soln\\n// use bool flag\\n//all tsc passes\\n\\nint lengthOfLastWord(string s) {\\n       bool flag=false;\\n       int n=s.length();\\n       int count=0;\\n      \\n       for(int i=n-1; i>=0; i--){\\n        if(s[i]!=\\' \\' ){\\n            flag=true;\\n            count++;\\n        }else if(s[i]==\\' \\' && flag==true){\\n            break;\\n            \\n        }    \\n       }\\n       \\n           return count;\\n       \\n    }"
                    },
                    {
                        "username": "vmaryada",
                        "content": "var lengthOfLastWord = function(s) {\\n    var splitString = s.trim().split(\" \");\\n\\n return splitString[splitString.length-1].length;\\n};"
                    },
                    {
                        "username": "codingOz",
                        "content": "chill with the spoilers bro!!! I didn\\'t expect to get spoiled on leetcode of all places."
                    },
                    {
                        "username": "wagzap",
                        "content": "🎁 Since you want the __last__ word, it makes sense to look for it from the end of the string.\n🚀 Both for speed, and for a simpler solution.\nYou can:\n1. Find the largest position of a character that is allowed in a word (non-space).\n1. Decide what to do when there's no such position\n1. Find the smallest position of a character allowed in a word, going from the position found before.\n1. Calculate the length from those positions\n\nLinear time, but constant space, unlike the splitting approach.\nPiece of cake 🍰"
                    },
                    {
                        "username": "Mayank1020",
                        "content": "trim_right(s) and trim_left(s) functions are not working thus causing lot of trouble ."
                    },
                    {
                        "username": "Kirbie_ma",
                        "content": "`class Solution {\\n    public int lengthOfLastWord(String s) {\\n\\n        StringBuilder result = new StringBuilder();\\n        s = s.trim()\\n        int i = s.length()-1;\\n\\n        while(i < s.length() && i >= 0){\\n           if(s.charAt(i) == \\' \\')break;\\n           result.append(s.charAt(i));\\n           i--;\\n        }\\n        return result.toString().length();\\n    }\\n}`\\n \\nJava strings are immutable and as far as I understand trim() would return a copy of original, how am I able to assign result back to us and it is working??\\n"
                    },
                    {
                        "username": "anubhav9287",
                        "content": "len(s.strip().split()[-1])"
                    }
                ]
            },
            {
                "id": 2002398,
                "content": [
                    {
                        "username": "AnkitModak",
                        "content": "Example 3 made me happy.\\n"
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Today is 6-Aug-2023. \\nJoyBoy has Returned and Gear 5 Luffy has come."
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Where can I watch the episodes as I am not able to watch them on zoro anime. Also, I dont want to use telegram."
                    },
                    {
                        "username": "TajPotato",
                        "content": "This question contains spoiler, please approach with caution."
                    },
                    {
                        "username": "pavansai0813",
                        "content": "[@Manish033](/Manish033) \\nexample 3, its related to One Piece anime, this episode was released today."
                    },
                    {
                        "username": "Manish033",
                        "content": "what spoiler bro?"
                    },
                    {
                        "username": "Sanu000",
                        "content": "// c++  soln\\n// use bool flag\\n//all tsc passes\\n\\nint lengthOfLastWord(string s) {\\n       bool flag=false;\\n       int n=s.length();\\n       int count=0;\\n      \\n       for(int i=n-1; i>=0; i--){\\n        if(s[i]!=\\' \\' ){\\n            flag=true;\\n            count++;\\n        }else if(s[i]==\\' \\' && flag==true){\\n            break;\\n            \\n        }    \\n       }\\n       \\n           return count;\\n       \\n    }"
                    },
                    {
                        "username": "vmaryada",
                        "content": "var lengthOfLastWord = function(s) {\\n    var splitString = s.trim().split(\" \");\\n\\n return splitString[splitString.length-1].length;\\n};"
                    },
                    {
                        "username": "codingOz",
                        "content": "chill with the spoilers bro!!! I didn\\'t expect to get spoiled on leetcode of all places."
                    },
                    {
                        "username": "wagzap",
                        "content": "🎁 Since you want the __last__ word, it makes sense to look for it from the end of the string.\n🚀 Both for speed, and for a simpler solution.\nYou can:\n1. Find the largest position of a character that is allowed in a word (non-space).\n1. Decide what to do when there's no such position\n1. Find the smallest position of a character allowed in a word, going from the position found before.\n1. Calculate the length from those positions\n\nLinear time, but constant space, unlike the splitting approach.\nPiece of cake 🍰"
                    },
                    {
                        "username": "Mayank1020",
                        "content": "trim_right(s) and trim_left(s) functions are not working thus causing lot of trouble ."
                    },
                    {
                        "username": "Kirbie_ma",
                        "content": "`class Solution {\\n    public int lengthOfLastWord(String s) {\\n\\n        StringBuilder result = new StringBuilder();\\n        s = s.trim()\\n        int i = s.length()-1;\\n\\n        while(i < s.length() && i >= 0){\\n           if(s.charAt(i) == \\' \\')break;\\n           result.append(s.charAt(i));\\n           i--;\\n        }\\n        return result.toString().length();\\n    }\\n}`\\n \\nJava strings are immutable and as far as I understand trim() would return a copy of original, how am I able to assign result back to us and it is working??\\n"
                    },
                    {
                        "username": "anubhav9287",
                        "content": "len(s.strip().split()[-1])"
                    }
                ]
            },
            {
                "id": 1834926,
                "content": [
                    {
                        "username": "AnkitModak",
                        "content": "Example 3 made me happy.\\n"
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Today is 6-Aug-2023. \\nJoyBoy has Returned and Gear 5 Luffy has come."
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Where can I watch the episodes as I am not able to watch them on zoro anime. Also, I dont want to use telegram."
                    },
                    {
                        "username": "TajPotato",
                        "content": "This question contains spoiler, please approach with caution."
                    },
                    {
                        "username": "pavansai0813",
                        "content": "[@Manish033](/Manish033) \\nexample 3, its related to One Piece anime, this episode was released today."
                    },
                    {
                        "username": "Manish033",
                        "content": "what spoiler bro?"
                    },
                    {
                        "username": "Sanu000",
                        "content": "// c++  soln\\n// use bool flag\\n//all tsc passes\\n\\nint lengthOfLastWord(string s) {\\n       bool flag=false;\\n       int n=s.length();\\n       int count=0;\\n      \\n       for(int i=n-1; i>=0; i--){\\n        if(s[i]!=\\' \\' ){\\n            flag=true;\\n            count++;\\n        }else if(s[i]==\\' \\' && flag==true){\\n            break;\\n            \\n        }    \\n       }\\n       \\n           return count;\\n       \\n    }"
                    },
                    {
                        "username": "vmaryada",
                        "content": "var lengthOfLastWord = function(s) {\\n    var splitString = s.trim().split(\" \");\\n\\n return splitString[splitString.length-1].length;\\n};"
                    },
                    {
                        "username": "codingOz",
                        "content": "chill with the spoilers bro!!! I didn\\'t expect to get spoiled on leetcode of all places."
                    },
                    {
                        "username": "wagzap",
                        "content": "🎁 Since you want the __last__ word, it makes sense to look for it from the end of the string.\n🚀 Both for speed, and for a simpler solution.\nYou can:\n1. Find the largest position of a character that is allowed in a word (non-space).\n1. Decide what to do when there's no such position\n1. Find the smallest position of a character allowed in a word, going from the position found before.\n1. Calculate the length from those positions\n\nLinear time, but constant space, unlike the splitting approach.\nPiece of cake 🍰"
                    },
                    {
                        "username": "Mayank1020",
                        "content": "trim_right(s) and trim_left(s) functions are not working thus causing lot of trouble ."
                    },
                    {
                        "username": "Kirbie_ma",
                        "content": "`class Solution {\\n    public int lengthOfLastWord(String s) {\\n\\n        StringBuilder result = new StringBuilder();\\n        s = s.trim()\\n        int i = s.length()-1;\\n\\n        while(i < s.length() && i >= 0){\\n           if(s.charAt(i) == \\' \\')break;\\n           result.append(s.charAt(i));\\n           i--;\\n        }\\n        return result.toString().length();\\n    }\\n}`\\n \\nJava strings are immutable and as far as I understand trim() would return a copy of original, how am I able to assign result back to us and it is working??\\n"
                    },
                    {
                        "username": "anubhav9287",
                        "content": "len(s.strip().split()[-1])"
                    }
                ]
            },
            {
                "id": 1722641,
                "content": [
                    {
                        "username": "AnkitModak",
                        "content": "Example 3 made me happy.\\n"
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Today is 6-Aug-2023. \\nJoyBoy has Returned and Gear 5 Luffy has come."
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Where can I watch the episodes as I am not able to watch them on zoro anime. Also, I dont want to use telegram."
                    },
                    {
                        "username": "TajPotato",
                        "content": "This question contains spoiler, please approach with caution."
                    },
                    {
                        "username": "pavansai0813",
                        "content": "[@Manish033](/Manish033) \\nexample 3, its related to One Piece anime, this episode was released today."
                    },
                    {
                        "username": "Manish033",
                        "content": "what spoiler bro?"
                    },
                    {
                        "username": "Sanu000",
                        "content": "// c++  soln\\n// use bool flag\\n//all tsc passes\\n\\nint lengthOfLastWord(string s) {\\n       bool flag=false;\\n       int n=s.length();\\n       int count=0;\\n      \\n       for(int i=n-1; i>=0; i--){\\n        if(s[i]!=\\' \\' ){\\n            flag=true;\\n            count++;\\n        }else if(s[i]==\\' \\' && flag==true){\\n            break;\\n            \\n        }    \\n       }\\n       \\n           return count;\\n       \\n    }"
                    },
                    {
                        "username": "vmaryada",
                        "content": "var lengthOfLastWord = function(s) {\\n    var splitString = s.trim().split(\" \");\\n\\n return splitString[splitString.length-1].length;\\n};"
                    },
                    {
                        "username": "codingOz",
                        "content": "chill with the spoilers bro!!! I didn\\'t expect to get spoiled on leetcode of all places."
                    },
                    {
                        "username": "wagzap",
                        "content": "🎁 Since you want the __last__ word, it makes sense to look for it from the end of the string.\n🚀 Both for speed, and for a simpler solution.\nYou can:\n1. Find the largest position of a character that is allowed in a word (non-space).\n1. Decide what to do when there's no such position\n1. Find the smallest position of a character allowed in a word, going from the position found before.\n1. Calculate the length from those positions\n\nLinear time, but constant space, unlike the splitting approach.\nPiece of cake 🍰"
                    },
                    {
                        "username": "Mayank1020",
                        "content": "trim_right(s) and trim_left(s) functions are not working thus causing lot of trouble ."
                    },
                    {
                        "username": "Kirbie_ma",
                        "content": "`class Solution {\\n    public int lengthOfLastWord(String s) {\\n\\n        StringBuilder result = new StringBuilder();\\n        s = s.trim()\\n        int i = s.length()-1;\\n\\n        while(i < s.length() && i >= 0){\\n           if(s.charAt(i) == \\' \\')break;\\n           result.append(s.charAt(i));\\n           i--;\\n        }\\n        return result.toString().length();\\n    }\\n}`\\n \\nJava strings are immutable and as far as I understand trim() would return a copy of original, how am I able to assign result back to us and it is working??\\n"
                    },
                    {
                        "username": "anubhav9287",
                        "content": "len(s.strip().split()[-1])"
                    }
                ]
            },
            {
                "id": 1575041,
                "content": [
                    {
                        "username": "AnkitModak",
                        "content": "Example 3 made me happy.\\n"
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Today is 6-Aug-2023. \\nJoyBoy has Returned and Gear 5 Luffy has come."
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Where can I watch the episodes as I am not able to watch them on zoro anime. Also, I dont want to use telegram."
                    },
                    {
                        "username": "TajPotato",
                        "content": "This question contains spoiler, please approach with caution."
                    },
                    {
                        "username": "pavansai0813",
                        "content": "[@Manish033](/Manish033) \\nexample 3, its related to One Piece anime, this episode was released today."
                    },
                    {
                        "username": "Manish033",
                        "content": "what spoiler bro?"
                    },
                    {
                        "username": "Sanu000",
                        "content": "// c++  soln\\n// use bool flag\\n//all tsc passes\\n\\nint lengthOfLastWord(string s) {\\n       bool flag=false;\\n       int n=s.length();\\n       int count=0;\\n      \\n       for(int i=n-1; i>=0; i--){\\n        if(s[i]!=\\' \\' ){\\n            flag=true;\\n            count++;\\n        }else if(s[i]==\\' \\' && flag==true){\\n            break;\\n            \\n        }    \\n       }\\n       \\n           return count;\\n       \\n    }"
                    },
                    {
                        "username": "vmaryada",
                        "content": "var lengthOfLastWord = function(s) {\\n    var splitString = s.trim().split(\" \");\\n\\n return splitString[splitString.length-1].length;\\n};"
                    },
                    {
                        "username": "codingOz",
                        "content": "chill with the spoilers bro!!! I didn\\'t expect to get spoiled on leetcode of all places."
                    },
                    {
                        "username": "wagzap",
                        "content": "🎁 Since you want the __last__ word, it makes sense to look for it from the end of the string.\n🚀 Both for speed, and for a simpler solution.\nYou can:\n1. Find the largest position of a character that is allowed in a word (non-space).\n1. Decide what to do when there's no such position\n1. Find the smallest position of a character allowed in a word, going from the position found before.\n1. Calculate the length from those positions\n\nLinear time, but constant space, unlike the splitting approach.\nPiece of cake 🍰"
                    },
                    {
                        "username": "Mayank1020",
                        "content": "trim_right(s) and trim_left(s) functions are not working thus causing lot of trouble ."
                    },
                    {
                        "username": "Kirbie_ma",
                        "content": "`class Solution {\\n    public int lengthOfLastWord(String s) {\\n\\n        StringBuilder result = new StringBuilder();\\n        s = s.trim()\\n        int i = s.length()-1;\\n\\n        while(i < s.length() && i >= 0){\\n           if(s.charAt(i) == \\' \\')break;\\n           result.append(s.charAt(i));\\n           i--;\\n        }\\n        return result.toString().length();\\n    }\\n}`\\n \\nJava strings are immutable and as far as I understand trim() would return a copy of original, how am I able to assign result back to us and it is working??\\n"
                    },
                    {
                        "username": "anubhav9287",
                        "content": "len(s.strip().split()[-1])"
                    }
                ]
            },
            {
                "id": 1861695,
                "content": [
                    {
                        "username": "AnkitModak",
                        "content": "Example 3 made me happy.\\n"
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Today is 6-Aug-2023. \\nJoyBoy has Returned and Gear 5 Luffy has come."
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Where can I watch the episodes as I am not able to watch them on zoro anime. Also, I dont want to use telegram."
                    },
                    {
                        "username": "TajPotato",
                        "content": "This question contains spoiler, please approach with caution."
                    },
                    {
                        "username": "pavansai0813",
                        "content": "[@Manish033](/Manish033) \\nexample 3, its related to One Piece anime, this episode was released today."
                    },
                    {
                        "username": "Manish033",
                        "content": "what spoiler bro?"
                    },
                    {
                        "username": "Sanu000",
                        "content": "// c++  soln\\n// use bool flag\\n//all tsc passes\\n\\nint lengthOfLastWord(string s) {\\n       bool flag=false;\\n       int n=s.length();\\n       int count=0;\\n      \\n       for(int i=n-1; i>=0; i--){\\n        if(s[i]!=\\' \\' ){\\n            flag=true;\\n            count++;\\n        }else if(s[i]==\\' \\' && flag==true){\\n            break;\\n            \\n        }    \\n       }\\n       \\n           return count;\\n       \\n    }"
                    },
                    {
                        "username": "vmaryada",
                        "content": "var lengthOfLastWord = function(s) {\\n    var splitString = s.trim().split(\" \");\\n\\n return splitString[splitString.length-1].length;\\n};"
                    },
                    {
                        "username": "codingOz",
                        "content": "chill with the spoilers bro!!! I didn\\'t expect to get spoiled on leetcode of all places."
                    },
                    {
                        "username": "wagzap",
                        "content": "🎁 Since you want the __last__ word, it makes sense to look for it from the end of the string.\n🚀 Both for speed, and for a simpler solution.\nYou can:\n1. Find the largest position of a character that is allowed in a word (non-space).\n1. Decide what to do when there's no such position\n1. Find the smallest position of a character allowed in a word, going from the position found before.\n1. Calculate the length from those positions\n\nLinear time, but constant space, unlike the splitting approach.\nPiece of cake 🍰"
                    },
                    {
                        "username": "Mayank1020",
                        "content": "trim_right(s) and trim_left(s) functions are not working thus causing lot of trouble ."
                    },
                    {
                        "username": "Kirbie_ma",
                        "content": "`class Solution {\\n    public int lengthOfLastWord(String s) {\\n\\n        StringBuilder result = new StringBuilder();\\n        s = s.trim()\\n        int i = s.length()-1;\\n\\n        while(i < s.length() && i >= 0){\\n           if(s.charAt(i) == \\' \\')break;\\n           result.append(s.charAt(i));\\n           i--;\\n        }\\n        return result.toString().length();\\n    }\\n}`\\n \\nJava strings are immutable and as far as I understand trim() would return a copy of original, how am I able to assign result back to us and it is working??\\n"
                    },
                    {
                        "username": "anubhav9287",
                        "content": "len(s.strip().split()[-1])"
                    }
                ]
            },
            {
                "id": 1793568,
                "content": [
                    {
                        "username": "AnkitModak",
                        "content": "Example 3 made me happy.\\n"
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Today is 6-Aug-2023. \\nJoyBoy has Returned and Gear 5 Luffy has come."
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Where can I watch the episodes as I am not able to watch them on zoro anime. Also, I dont want to use telegram."
                    },
                    {
                        "username": "TajPotato",
                        "content": "This question contains spoiler, please approach with caution."
                    },
                    {
                        "username": "pavansai0813",
                        "content": "[@Manish033](/Manish033) \\nexample 3, its related to One Piece anime, this episode was released today."
                    },
                    {
                        "username": "Manish033",
                        "content": "what spoiler bro?"
                    },
                    {
                        "username": "Sanu000",
                        "content": "// c++  soln\\n// use bool flag\\n//all tsc passes\\n\\nint lengthOfLastWord(string s) {\\n       bool flag=false;\\n       int n=s.length();\\n       int count=0;\\n      \\n       for(int i=n-1; i>=0; i--){\\n        if(s[i]!=\\' \\' ){\\n            flag=true;\\n            count++;\\n        }else if(s[i]==\\' \\' && flag==true){\\n            break;\\n            \\n        }    \\n       }\\n       \\n           return count;\\n       \\n    }"
                    },
                    {
                        "username": "vmaryada",
                        "content": "var lengthOfLastWord = function(s) {\\n    var splitString = s.trim().split(\" \");\\n\\n return splitString[splitString.length-1].length;\\n};"
                    },
                    {
                        "username": "codingOz",
                        "content": "chill with the spoilers bro!!! I didn\\'t expect to get spoiled on leetcode of all places."
                    },
                    {
                        "username": "wagzap",
                        "content": "🎁 Since you want the __last__ word, it makes sense to look for it from the end of the string.\n🚀 Both for speed, and for a simpler solution.\nYou can:\n1. Find the largest position of a character that is allowed in a word (non-space).\n1. Decide what to do when there's no such position\n1. Find the smallest position of a character allowed in a word, going from the position found before.\n1. Calculate the length from those positions\n\nLinear time, but constant space, unlike the splitting approach.\nPiece of cake 🍰"
                    },
                    {
                        "username": "Mayank1020",
                        "content": "trim_right(s) and trim_left(s) functions are not working thus causing lot of trouble ."
                    },
                    {
                        "username": "Kirbie_ma",
                        "content": "`class Solution {\\n    public int lengthOfLastWord(String s) {\\n\\n        StringBuilder result = new StringBuilder();\\n        s = s.trim()\\n        int i = s.length()-1;\\n\\n        while(i < s.length() && i >= 0){\\n           if(s.charAt(i) == \\' \\')break;\\n           result.append(s.charAt(i));\\n           i--;\\n        }\\n        return result.toString().length();\\n    }\\n}`\\n \\nJava strings are immutable and as far as I understand trim() would return a copy of original, how am I able to assign result back to us and it is working??\\n"
                    },
                    {
                        "username": "anubhav9287",
                        "content": "len(s.strip().split()[-1])"
                    }
                ]
            },
            {
                "id": 1774472,
                "content": [
                    {
                        "username": "AnkitModak",
                        "content": "Example 3 made me happy.\\n"
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Today is 6-Aug-2023. \\nJoyBoy has Returned and Gear 5 Luffy has come."
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Where can I watch the episodes as I am not able to watch them on zoro anime. Also, I dont want to use telegram."
                    },
                    {
                        "username": "TajPotato",
                        "content": "This question contains spoiler, please approach with caution."
                    },
                    {
                        "username": "pavansai0813",
                        "content": "[@Manish033](/Manish033) \\nexample 3, its related to One Piece anime, this episode was released today."
                    },
                    {
                        "username": "Manish033",
                        "content": "what spoiler bro?"
                    },
                    {
                        "username": "Sanu000",
                        "content": "// c++  soln\\n// use bool flag\\n//all tsc passes\\n\\nint lengthOfLastWord(string s) {\\n       bool flag=false;\\n       int n=s.length();\\n       int count=0;\\n      \\n       for(int i=n-1; i>=0; i--){\\n        if(s[i]!=\\' \\' ){\\n            flag=true;\\n            count++;\\n        }else if(s[i]==\\' \\' && flag==true){\\n            break;\\n            \\n        }    \\n       }\\n       \\n           return count;\\n       \\n    }"
                    },
                    {
                        "username": "vmaryada",
                        "content": "var lengthOfLastWord = function(s) {\\n    var splitString = s.trim().split(\" \");\\n\\n return splitString[splitString.length-1].length;\\n};"
                    },
                    {
                        "username": "codingOz",
                        "content": "chill with the spoilers bro!!! I didn\\'t expect to get spoiled on leetcode of all places."
                    },
                    {
                        "username": "wagzap",
                        "content": "🎁 Since you want the __last__ word, it makes sense to look for it from the end of the string.\n🚀 Both for speed, and for a simpler solution.\nYou can:\n1. Find the largest position of a character that is allowed in a word (non-space).\n1. Decide what to do when there's no such position\n1. Find the smallest position of a character allowed in a word, going from the position found before.\n1. Calculate the length from those positions\n\nLinear time, but constant space, unlike the splitting approach.\nPiece of cake 🍰"
                    },
                    {
                        "username": "Mayank1020",
                        "content": "trim_right(s) and trim_left(s) functions are not working thus causing lot of trouble ."
                    },
                    {
                        "username": "Kirbie_ma",
                        "content": "`class Solution {\\n    public int lengthOfLastWord(String s) {\\n\\n        StringBuilder result = new StringBuilder();\\n        s = s.trim()\\n        int i = s.length()-1;\\n\\n        while(i < s.length() && i >= 0){\\n           if(s.charAt(i) == \\' \\')break;\\n           result.append(s.charAt(i));\\n           i--;\\n        }\\n        return result.toString().length();\\n    }\\n}`\\n \\nJava strings are immutable and as far as I understand trim() would return a copy of original, how am I able to assign result back to us and it is working??\\n"
                    },
                    {
                        "username": "anubhav9287",
                        "content": "len(s.strip().split()[-1])"
                    }
                ]
            },
            {
                "id": 1744888,
                "content": [
                    {
                        "username": "AnkitModak",
                        "content": "Example 3 made me happy.\\n"
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Today is 6-Aug-2023. \\nJoyBoy has Returned and Gear 5 Luffy has come."
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Where can I watch the episodes as I am not able to watch them on zoro anime. Also, I dont want to use telegram."
                    },
                    {
                        "username": "TajPotato",
                        "content": "This question contains spoiler, please approach with caution."
                    },
                    {
                        "username": "pavansai0813",
                        "content": "[@Manish033](/Manish033) \\nexample 3, its related to One Piece anime, this episode was released today."
                    },
                    {
                        "username": "Manish033",
                        "content": "what spoiler bro?"
                    },
                    {
                        "username": "Sanu000",
                        "content": "// c++  soln\\n// use bool flag\\n//all tsc passes\\n\\nint lengthOfLastWord(string s) {\\n       bool flag=false;\\n       int n=s.length();\\n       int count=0;\\n      \\n       for(int i=n-1; i>=0; i--){\\n        if(s[i]!=\\' \\' ){\\n            flag=true;\\n            count++;\\n        }else if(s[i]==\\' \\' && flag==true){\\n            break;\\n            \\n        }    \\n       }\\n       \\n           return count;\\n       \\n    }"
                    },
                    {
                        "username": "vmaryada",
                        "content": "var lengthOfLastWord = function(s) {\\n    var splitString = s.trim().split(\" \");\\n\\n return splitString[splitString.length-1].length;\\n};"
                    },
                    {
                        "username": "codingOz",
                        "content": "chill with the spoilers bro!!! I didn\\'t expect to get spoiled on leetcode of all places."
                    },
                    {
                        "username": "wagzap",
                        "content": "🎁 Since you want the __last__ word, it makes sense to look for it from the end of the string.\n🚀 Both for speed, and for a simpler solution.\nYou can:\n1. Find the largest position of a character that is allowed in a word (non-space).\n1. Decide what to do when there's no such position\n1. Find the smallest position of a character allowed in a word, going from the position found before.\n1. Calculate the length from those positions\n\nLinear time, but constant space, unlike the splitting approach.\nPiece of cake 🍰"
                    },
                    {
                        "username": "Mayank1020",
                        "content": "trim_right(s) and trim_left(s) functions are not working thus causing lot of trouble ."
                    },
                    {
                        "username": "Kirbie_ma",
                        "content": "`class Solution {\\n    public int lengthOfLastWord(String s) {\\n\\n        StringBuilder result = new StringBuilder();\\n        s = s.trim()\\n        int i = s.length()-1;\\n\\n        while(i < s.length() && i >= 0){\\n           if(s.charAt(i) == \\' \\')break;\\n           result.append(s.charAt(i));\\n           i--;\\n        }\\n        return result.toString().length();\\n    }\\n}`\\n \\nJava strings are immutable and as far as I understand trim() would return a copy of original, how am I able to assign result back to us and it is working??\\n"
                    },
                    {
                        "username": "anubhav9287",
                        "content": "len(s.strip().split()[-1])"
                    }
                ]
            },
            {
                "id": 1575977,
                "content": [
                    {
                        "username": "AnkitModak",
                        "content": "Example 3 made me happy.\\n"
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Today is 6-Aug-2023. \\nJoyBoy has Returned and Gear 5 Luffy has come."
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Where can I watch the episodes as I am not able to watch them on zoro anime. Also, I dont want to use telegram."
                    },
                    {
                        "username": "TajPotato",
                        "content": "This question contains spoiler, please approach with caution."
                    },
                    {
                        "username": "pavansai0813",
                        "content": "[@Manish033](/Manish033) \\nexample 3, its related to One Piece anime, this episode was released today."
                    },
                    {
                        "username": "Manish033",
                        "content": "what spoiler bro?"
                    },
                    {
                        "username": "Sanu000",
                        "content": "// c++  soln\\n// use bool flag\\n//all tsc passes\\n\\nint lengthOfLastWord(string s) {\\n       bool flag=false;\\n       int n=s.length();\\n       int count=0;\\n      \\n       for(int i=n-1; i>=0; i--){\\n        if(s[i]!=\\' \\' ){\\n            flag=true;\\n            count++;\\n        }else if(s[i]==\\' \\' && flag==true){\\n            break;\\n            \\n        }    \\n       }\\n       \\n           return count;\\n       \\n    }"
                    },
                    {
                        "username": "vmaryada",
                        "content": "var lengthOfLastWord = function(s) {\\n    var splitString = s.trim().split(\" \");\\n\\n return splitString[splitString.length-1].length;\\n};"
                    },
                    {
                        "username": "codingOz",
                        "content": "chill with the spoilers bro!!! I didn\\'t expect to get spoiled on leetcode of all places."
                    },
                    {
                        "username": "wagzap",
                        "content": "🎁 Since you want the __last__ word, it makes sense to look for it from the end of the string.\n🚀 Both for speed, and for a simpler solution.\nYou can:\n1. Find the largest position of a character that is allowed in a word (non-space).\n1. Decide what to do when there's no such position\n1. Find the smallest position of a character allowed in a word, going from the position found before.\n1. Calculate the length from those positions\n\nLinear time, but constant space, unlike the splitting approach.\nPiece of cake 🍰"
                    },
                    {
                        "username": "Mayank1020",
                        "content": "trim_right(s) and trim_left(s) functions are not working thus causing lot of trouble ."
                    },
                    {
                        "username": "Kirbie_ma",
                        "content": "`class Solution {\\n    public int lengthOfLastWord(String s) {\\n\\n        StringBuilder result = new StringBuilder();\\n        s = s.trim()\\n        int i = s.length()-1;\\n\\n        while(i < s.length() && i >= 0){\\n           if(s.charAt(i) == \\' \\')break;\\n           result.append(s.charAt(i));\\n           i--;\\n        }\\n        return result.toString().length();\\n    }\\n}`\\n \\nJava strings are immutable and as far as I understand trim() would return a copy of original, how am I able to assign result back to us and it is working??\\n"
                    },
                    {
                        "username": "anubhav9287",
                        "content": "len(s.strip().split()[-1])"
                    }
                ]
            },
            {
                "id": 1574403,
                "content": [
                    {
                        "username": "greenlogan",
                        "content": "return len(s.strip().split(\" \")[-1])"
                    },
                    {
                        "username": "simonnchong",
                        "content": "you don\\'t need the strip() actually, split() will split the word only without the space contains in it"
                    },
                    {
                        "username": "shubhamparad19",
                        "content": "Today is the day, everyone heard the drums of liberation. Joyboy has returned\\uD83E\\uDD0D"
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nreturn len(s.split()[-1])\\n```"
                    },
                    {
                        "username": "varshini-S",
                        "content": "why can't we just reverse the string and count the character till the whitespace arrives?\nclear my doubt, please."
                    },
                    {
                        "username": "HarshitUpadhyay",
                        "content": "We can\\'t do this because we have some string which contains whitespace at first like \"   fly me   to   the moon  \" this gives 0 as result "
                    },
                    {
                        "username": "wagzap",
                        "content": "And splitting the string between spaces and taking the length of the last piece works too. \\nIt just takes more time to go through the whole string to split it \\u23F3\\nAnd more space for each piece of the string, as much as the input \\u27BF"
                    },
                    {
                        "username": "wagzap",
                        "content": "We can do that.\n💡And we can do better. 💡\n\nIf we reverse the string ⏭ and only then count the consecutive word characters from the front 0️⃣1️⃣2️⃣... , we always go through the __entire__ string, no matter how short the last word is.\nAnd we use up memory for the reversed string, if the language has immutable strings.\n\nBut if we just go from the end to the first word character ◀, then we count consecutive word characters 0️⃣1️⃣2️⃣... , we only go through `suffix_spaces + last_word_length` characters.\n\nHere's an imperfect analogy.\nThe first approach is like going through an entire book from the first to the last page, to find the last chapter. While also putting the sheets in reverse order.\n\nWhile the second one is like going through the book from the last page towards the beginning.\n\nIn practice, the second approach is faster, and uses at most the same amount of memory, probably less.\n\nEspecially when the input text is human language, where the text length might be much longer than the last word,\nso the last word is much closer to the end than to the beginning.\n"
                    },
                    {
                        "username": "sifatfahimul",
                        "content": "first count the empty space of the string from last index.\nthen minus the space count form string and count charter from last. and return charter count."
                    },
                    {
                        "username": "MengjieQian",
                        "content": "s = \\'hello world \\'\\ns.split()  # [\\'hello, \\'world\\']\\ns.plit(\\' \\') # [\\'hello\\', \\'world\\', \\' \\']"
                    },
                    {
                        "username": "arjunvasu",
                        "content": "I am trying to submit a solution and it says \"String is not declared in this scope\" compilation error.\\ncan anyone please assist on this.\\n\\nthanks."
                    },
                    {
                        "username": "haoyangfan",
                        "content": "I am confused by the time complexity of this question, should it be `O(1)` or `O(n)`?\\n\\nFor most of solutions I\\'ve seen for this problem, they use some language build-in methods such as `trim`, `lastIndexOf` or `split`. Although the solution code itself does not scan through the entire string, if those methods that the solution relies on internally will traverse through the string, will that also make those solutions actually be `O(n)` time complexity?"
                    },
                    {
                        "username": "aakash_chandhoke",
                        "content": "Isnt the solution set ambiguous as for this input the output should be zero but here it is giving 1 \n\n**INPUT**- \"a \"\n**OUTPUT**- 1\n\nAs the space is comming after the character nd after the space there is no word so output should be zero i guess..\nPlease correct me if i am wrong."
                    },
                    {
                        "username": "gilgoliada",
                        "content": "What are the chances my friend will see this leetcode question the day after he started watching one piece?"
                    }
                ]
            },
            {
                "id": 2002810,
                "content": [
                    {
                        "username": "greenlogan",
                        "content": "return len(s.strip().split(\" \")[-1])"
                    },
                    {
                        "username": "simonnchong",
                        "content": "you don\\'t need the strip() actually, split() will split the word only without the space contains in it"
                    },
                    {
                        "username": "shubhamparad19",
                        "content": "Today is the day, everyone heard the drums of liberation. Joyboy has returned\\uD83E\\uDD0D"
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nreturn len(s.split()[-1])\\n```"
                    },
                    {
                        "username": "varshini-S",
                        "content": "why can't we just reverse the string and count the character till the whitespace arrives?\nclear my doubt, please."
                    },
                    {
                        "username": "HarshitUpadhyay",
                        "content": "We can\\'t do this because we have some string which contains whitespace at first like \"   fly me   to   the moon  \" this gives 0 as result "
                    },
                    {
                        "username": "wagzap",
                        "content": "And splitting the string between spaces and taking the length of the last piece works too. \\nIt just takes more time to go through the whole string to split it \\u23F3\\nAnd more space for each piece of the string, as much as the input \\u27BF"
                    },
                    {
                        "username": "wagzap",
                        "content": "We can do that.\n💡And we can do better. 💡\n\nIf we reverse the string ⏭ and only then count the consecutive word characters from the front 0️⃣1️⃣2️⃣... , we always go through the __entire__ string, no matter how short the last word is.\nAnd we use up memory for the reversed string, if the language has immutable strings.\n\nBut if we just go from the end to the first word character ◀, then we count consecutive word characters 0️⃣1️⃣2️⃣... , we only go through `suffix_spaces + last_word_length` characters.\n\nHere's an imperfect analogy.\nThe first approach is like going through an entire book from the first to the last page, to find the last chapter. While also putting the sheets in reverse order.\n\nWhile the second one is like going through the book from the last page towards the beginning.\n\nIn practice, the second approach is faster, and uses at most the same amount of memory, probably less.\n\nEspecially when the input text is human language, where the text length might be much longer than the last word,\nso the last word is much closer to the end than to the beginning.\n"
                    },
                    {
                        "username": "sifatfahimul",
                        "content": "first count the empty space of the string from last index.\nthen minus the space count form string and count charter from last. and return charter count."
                    },
                    {
                        "username": "MengjieQian",
                        "content": "s = \\'hello world \\'\\ns.split()  # [\\'hello, \\'world\\']\\ns.plit(\\' \\') # [\\'hello\\', \\'world\\', \\' \\']"
                    },
                    {
                        "username": "arjunvasu",
                        "content": "I am trying to submit a solution and it says \"String is not declared in this scope\" compilation error.\\ncan anyone please assist on this.\\n\\nthanks."
                    },
                    {
                        "username": "haoyangfan",
                        "content": "I am confused by the time complexity of this question, should it be `O(1)` or `O(n)`?\\n\\nFor most of solutions I\\'ve seen for this problem, they use some language build-in methods such as `trim`, `lastIndexOf` or `split`. Although the solution code itself does not scan through the entire string, if those methods that the solution relies on internally will traverse through the string, will that also make those solutions actually be `O(n)` time complexity?"
                    },
                    {
                        "username": "aakash_chandhoke",
                        "content": "Isnt the solution set ambiguous as for this input the output should be zero but here it is giving 1 \n\n**INPUT**- \"a \"\n**OUTPUT**- 1\n\nAs the space is comming after the character nd after the space there is no word so output should be zero i guess..\nPlease correct me if i am wrong."
                    },
                    {
                        "username": "gilgoliada",
                        "content": "What are the chances my friend will see this leetcode question the day after he started watching one piece?"
                    }
                ]
            },
            {
                "id": 1858246,
                "content": [
                    {
                        "username": "greenlogan",
                        "content": "return len(s.strip().split(\" \")[-1])"
                    },
                    {
                        "username": "simonnchong",
                        "content": "you don\\'t need the strip() actually, split() will split the word only without the space contains in it"
                    },
                    {
                        "username": "shubhamparad19",
                        "content": "Today is the day, everyone heard the drums of liberation. Joyboy has returned\\uD83E\\uDD0D"
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nreturn len(s.split()[-1])\\n```"
                    },
                    {
                        "username": "varshini-S",
                        "content": "why can't we just reverse the string and count the character till the whitespace arrives?\nclear my doubt, please."
                    },
                    {
                        "username": "HarshitUpadhyay",
                        "content": "We can\\'t do this because we have some string which contains whitespace at first like \"   fly me   to   the moon  \" this gives 0 as result "
                    },
                    {
                        "username": "wagzap",
                        "content": "And splitting the string between spaces and taking the length of the last piece works too. \\nIt just takes more time to go through the whole string to split it \\u23F3\\nAnd more space for each piece of the string, as much as the input \\u27BF"
                    },
                    {
                        "username": "wagzap",
                        "content": "We can do that.\n💡And we can do better. 💡\n\nIf we reverse the string ⏭ and only then count the consecutive word characters from the front 0️⃣1️⃣2️⃣... , we always go through the __entire__ string, no matter how short the last word is.\nAnd we use up memory for the reversed string, if the language has immutable strings.\n\nBut if we just go from the end to the first word character ◀, then we count consecutive word characters 0️⃣1️⃣2️⃣... , we only go through `suffix_spaces + last_word_length` characters.\n\nHere's an imperfect analogy.\nThe first approach is like going through an entire book from the first to the last page, to find the last chapter. While also putting the sheets in reverse order.\n\nWhile the second one is like going through the book from the last page towards the beginning.\n\nIn practice, the second approach is faster, and uses at most the same amount of memory, probably less.\n\nEspecially when the input text is human language, where the text length might be much longer than the last word,\nso the last word is much closer to the end than to the beginning.\n"
                    },
                    {
                        "username": "sifatfahimul",
                        "content": "first count the empty space of the string from last index.\nthen minus the space count form string and count charter from last. and return charter count."
                    },
                    {
                        "username": "MengjieQian",
                        "content": "s = \\'hello world \\'\\ns.split()  # [\\'hello, \\'world\\']\\ns.plit(\\' \\') # [\\'hello\\', \\'world\\', \\' \\']"
                    },
                    {
                        "username": "arjunvasu",
                        "content": "I am trying to submit a solution and it says \"String is not declared in this scope\" compilation error.\\ncan anyone please assist on this.\\n\\nthanks."
                    },
                    {
                        "username": "haoyangfan",
                        "content": "I am confused by the time complexity of this question, should it be `O(1)` or `O(n)`?\\n\\nFor most of solutions I\\'ve seen for this problem, they use some language build-in methods such as `trim`, `lastIndexOf` or `split`. Although the solution code itself does not scan through the entire string, if those methods that the solution relies on internally will traverse through the string, will that also make those solutions actually be `O(n)` time complexity?"
                    },
                    {
                        "username": "aakash_chandhoke",
                        "content": "Isnt the solution set ambiguous as for this input the output should be zero but here it is giving 1 \n\n**INPUT**- \"a \"\n**OUTPUT**- 1\n\nAs the space is comming after the character nd after the space there is no word so output should be zero i guess..\nPlease correct me if i am wrong."
                    },
                    {
                        "username": "gilgoliada",
                        "content": "What are the chances my friend will see this leetcode question the day after he started watching one piece?"
                    }
                ]
            },
            {
                "id": 1789840,
                "content": [
                    {
                        "username": "greenlogan",
                        "content": "return len(s.strip().split(\" \")[-1])"
                    },
                    {
                        "username": "simonnchong",
                        "content": "you don\\'t need the strip() actually, split() will split the word only without the space contains in it"
                    },
                    {
                        "username": "shubhamparad19",
                        "content": "Today is the day, everyone heard the drums of liberation. Joyboy has returned\\uD83E\\uDD0D"
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nreturn len(s.split()[-1])\\n```"
                    },
                    {
                        "username": "varshini-S",
                        "content": "why can't we just reverse the string and count the character till the whitespace arrives?\nclear my doubt, please."
                    },
                    {
                        "username": "HarshitUpadhyay",
                        "content": "We can\\'t do this because we have some string which contains whitespace at first like \"   fly me   to   the moon  \" this gives 0 as result "
                    },
                    {
                        "username": "wagzap",
                        "content": "And splitting the string between spaces and taking the length of the last piece works too. \\nIt just takes more time to go through the whole string to split it \\u23F3\\nAnd more space for each piece of the string, as much as the input \\u27BF"
                    },
                    {
                        "username": "wagzap",
                        "content": "We can do that.\n💡And we can do better. 💡\n\nIf we reverse the string ⏭ and only then count the consecutive word characters from the front 0️⃣1️⃣2️⃣... , we always go through the __entire__ string, no matter how short the last word is.\nAnd we use up memory for the reversed string, if the language has immutable strings.\n\nBut if we just go from the end to the first word character ◀, then we count consecutive word characters 0️⃣1️⃣2️⃣... , we only go through `suffix_spaces + last_word_length` characters.\n\nHere's an imperfect analogy.\nThe first approach is like going through an entire book from the first to the last page, to find the last chapter. While also putting the sheets in reverse order.\n\nWhile the second one is like going through the book from the last page towards the beginning.\n\nIn practice, the second approach is faster, and uses at most the same amount of memory, probably less.\n\nEspecially when the input text is human language, where the text length might be much longer than the last word,\nso the last word is much closer to the end than to the beginning.\n"
                    },
                    {
                        "username": "sifatfahimul",
                        "content": "first count the empty space of the string from last index.\nthen minus the space count form string and count charter from last. and return charter count."
                    },
                    {
                        "username": "MengjieQian",
                        "content": "s = \\'hello world \\'\\ns.split()  # [\\'hello, \\'world\\']\\ns.plit(\\' \\') # [\\'hello\\', \\'world\\', \\' \\']"
                    },
                    {
                        "username": "arjunvasu",
                        "content": "I am trying to submit a solution and it says \"String is not declared in this scope\" compilation error.\\ncan anyone please assist on this.\\n\\nthanks."
                    },
                    {
                        "username": "haoyangfan",
                        "content": "I am confused by the time complexity of this question, should it be `O(1)` or `O(n)`?\\n\\nFor most of solutions I\\'ve seen for this problem, they use some language build-in methods such as `trim`, `lastIndexOf` or `split`. Although the solution code itself does not scan through the entire string, if those methods that the solution relies on internally will traverse through the string, will that also make those solutions actually be `O(n)` time complexity?"
                    },
                    {
                        "username": "aakash_chandhoke",
                        "content": "Isnt the solution set ambiguous as for this input the output should be zero but here it is giving 1 \n\n**INPUT**- \"a \"\n**OUTPUT**- 1\n\nAs the space is comming after the character nd after the space there is no word so output should be zero i guess..\nPlease correct me if i am wrong."
                    },
                    {
                        "username": "gilgoliada",
                        "content": "What are the chances my friend will see this leetcode question the day after he started watching one piece?"
                    }
                ]
            },
            {
                "id": 1778980,
                "content": [
                    {
                        "username": "greenlogan",
                        "content": "return len(s.strip().split(\" \")[-1])"
                    },
                    {
                        "username": "simonnchong",
                        "content": "you don\\'t need the strip() actually, split() will split the word only without the space contains in it"
                    },
                    {
                        "username": "shubhamparad19",
                        "content": "Today is the day, everyone heard the drums of liberation. Joyboy has returned\\uD83E\\uDD0D"
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nreturn len(s.split()[-1])\\n```"
                    },
                    {
                        "username": "varshini-S",
                        "content": "why can't we just reverse the string and count the character till the whitespace arrives?\nclear my doubt, please."
                    },
                    {
                        "username": "HarshitUpadhyay",
                        "content": "We can\\'t do this because we have some string which contains whitespace at first like \"   fly me   to   the moon  \" this gives 0 as result "
                    },
                    {
                        "username": "wagzap",
                        "content": "And splitting the string between spaces and taking the length of the last piece works too. \\nIt just takes more time to go through the whole string to split it \\u23F3\\nAnd more space for each piece of the string, as much as the input \\u27BF"
                    },
                    {
                        "username": "wagzap",
                        "content": "We can do that.\n💡And we can do better. 💡\n\nIf we reverse the string ⏭ and only then count the consecutive word characters from the front 0️⃣1️⃣2️⃣... , we always go through the __entire__ string, no matter how short the last word is.\nAnd we use up memory for the reversed string, if the language has immutable strings.\n\nBut if we just go from the end to the first word character ◀, then we count consecutive word characters 0️⃣1️⃣2️⃣... , we only go through `suffix_spaces + last_word_length` characters.\n\nHere's an imperfect analogy.\nThe first approach is like going through an entire book from the first to the last page, to find the last chapter. While also putting the sheets in reverse order.\n\nWhile the second one is like going through the book from the last page towards the beginning.\n\nIn practice, the second approach is faster, and uses at most the same amount of memory, probably less.\n\nEspecially when the input text is human language, where the text length might be much longer than the last word,\nso the last word is much closer to the end than to the beginning.\n"
                    },
                    {
                        "username": "sifatfahimul",
                        "content": "first count the empty space of the string from last index.\nthen minus the space count form string and count charter from last. and return charter count."
                    },
                    {
                        "username": "MengjieQian",
                        "content": "s = \\'hello world \\'\\ns.split()  # [\\'hello, \\'world\\']\\ns.plit(\\' \\') # [\\'hello\\', \\'world\\', \\' \\']"
                    },
                    {
                        "username": "arjunvasu",
                        "content": "I am trying to submit a solution and it says \"String is not declared in this scope\" compilation error.\\ncan anyone please assist on this.\\n\\nthanks."
                    },
                    {
                        "username": "haoyangfan",
                        "content": "I am confused by the time complexity of this question, should it be `O(1)` or `O(n)`?\\n\\nFor most of solutions I\\'ve seen for this problem, they use some language build-in methods such as `trim`, `lastIndexOf` or `split`. Although the solution code itself does not scan through the entire string, if those methods that the solution relies on internally will traverse through the string, will that also make those solutions actually be `O(n)` time complexity?"
                    },
                    {
                        "username": "aakash_chandhoke",
                        "content": "Isnt the solution set ambiguous as for this input the output should be zero but here it is giving 1 \n\n**INPUT**- \"a \"\n**OUTPUT**- 1\n\nAs the space is comming after the character nd after the space there is no word so output should be zero i guess..\nPlease correct me if i am wrong."
                    },
                    {
                        "username": "gilgoliada",
                        "content": "What are the chances my friend will see this leetcode question the day after he started watching one piece?"
                    }
                ]
            },
            {
                "id": 1573141,
                "content": [
                    {
                        "username": "greenlogan",
                        "content": "return len(s.strip().split(\" \")[-1])"
                    },
                    {
                        "username": "simonnchong",
                        "content": "you don\\'t need the strip() actually, split() will split the word only without the space contains in it"
                    },
                    {
                        "username": "shubhamparad19",
                        "content": "Today is the day, everyone heard the drums of liberation. Joyboy has returned\\uD83E\\uDD0D"
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nreturn len(s.split()[-1])\\n```"
                    },
                    {
                        "username": "varshini-S",
                        "content": "why can't we just reverse the string and count the character till the whitespace arrives?\nclear my doubt, please."
                    },
                    {
                        "username": "HarshitUpadhyay",
                        "content": "We can\\'t do this because we have some string which contains whitespace at first like \"   fly me   to   the moon  \" this gives 0 as result "
                    },
                    {
                        "username": "wagzap",
                        "content": "And splitting the string between spaces and taking the length of the last piece works too. \\nIt just takes more time to go through the whole string to split it \\u23F3\\nAnd more space for each piece of the string, as much as the input \\u27BF"
                    },
                    {
                        "username": "wagzap",
                        "content": "We can do that.\n💡And we can do better. 💡\n\nIf we reverse the string ⏭ and only then count the consecutive word characters from the front 0️⃣1️⃣2️⃣... , we always go through the __entire__ string, no matter how short the last word is.\nAnd we use up memory for the reversed string, if the language has immutable strings.\n\nBut if we just go from the end to the first word character ◀, then we count consecutive word characters 0️⃣1️⃣2️⃣... , we only go through `suffix_spaces + last_word_length` characters.\n\nHere's an imperfect analogy.\nThe first approach is like going through an entire book from the first to the last page, to find the last chapter. While also putting the sheets in reverse order.\n\nWhile the second one is like going through the book from the last page towards the beginning.\n\nIn practice, the second approach is faster, and uses at most the same amount of memory, probably less.\n\nEspecially when the input text is human language, where the text length might be much longer than the last word,\nso the last word is much closer to the end than to the beginning.\n"
                    },
                    {
                        "username": "sifatfahimul",
                        "content": "first count the empty space of the string from last index.\nthen minus the space count form string and count charter from last. and return charter count."
                    },
                    {
                        "username": "MengjieQian",
                        "content": "s = \\'hello world \\'\\ns.split()  # [\\'hello, \\'world\\']\\ns.plit(\\' \\') # [\\'hello\\', \\'world\\', \\' \\']"
                    },
                    {
                        "username": "arjunvasu",
                        "content": "I am trying to submit a solution and it says \"String is not declared in this scope\" compilation error.\\ncan anyone please assist on this.\\n\\nthanks."
                    },
                    {
                        "username": "haoyangfan",
                        "content": "I am confused by the time complexity of this question, should it be `O(1)` or `O(n)`?\\n\\nFor most of solutions I\\'ve seen for this problem, they use some language build-in methods such as `trim`, `lastIndexOf` or `split`. Although the solution code itself does not scan through the entire string, if those methods that the solution relies on internally will traverse through the string, will that also make those solutions actually be `O(n)` time complexity?"
                    },
                    {
                        "username": "aakash_chandhoke",
                        "content": "Isnt the solution set ambiguous as for this input the output should be zero but here it is giving 1 \n\n**INPUT**- \"a \"\n**OUTPUT**- 1\n\nAs the space is comming after the character nd after the space there is no word so output should be zero i guess..\nPlease correct me if i am wrong."
                    },
                    {
                        "username": "gilgoliada",
                        "content": "What are the chances my friend will see this leetcode question the day after he started watching one piece?"
                    }
                ]
            },
            {
                "id": 1572822,
                "content": [
                    {
                        "username": "greenlogan",
                        "content": "return len(s.strip().split(\" \")[-1])"
                    },
                    {
                        "username": "simonnchong",
                        "content": "you don\\'t need the strip() actually, split() will split the word only without the space contains in it"
                    },
                    {
                        "username": "shubhamparad19",
                        "content": "Today is the day, everyone heard the drums of liberation. Joyboy has returned\\uD83E\\uDD0D"
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nreturn len(s.split()[-1])\\n```"
                    },
                    {
                        "username": "varshini-S",
                        "content": "why can't we just reverse the string and count the character till the whitespace arrives?\nclear my doubt, please."
                    },
                    {
                        "username": "HarshitUpadhyay",
                        "content": "We can\\'t do this because we have some string which contains whitespace at first like \"   fly me   to   the moon  \" this gives 0 as result "
                    },
                    {
                        "username": "wagzap",
                        "content": "And splitting the string between spaces and taking the length of the last piece works too. \\nIt just takes more time to go through the whole string to split it \\u23F3\\nAnd more space for each piece of the string, as much as the input \\u27BF"
                    },
                    {
                        "username": "wagzap",
                        "content": "We can do that.\n💡And we can do better. 💡\n\nIf we reverse the string ⏭ and only then count the consecutive word characters from the front 0️⃣1️⃣2️⃣... , we always go through the __entire__ string, no matter how short the last word is.\nAnd we use up memory for the reversed string, if the language has immutable strings.\n\nBut if we just go from the end to the first word character ◀, then we count consecutive word characters 0️⃣1️⃣2️⃣... , we only go through `suffix_spaces + last_word_length` characters.\n\nHere's an imperfect analogy.\nThe first approach is like going through an entire book from the first to the last page, to find the last chapter. While also putting the sheets in reverse order.\n\nWhile the second one is like going through the book from the last page towards the beginning.\n\nIn practice, the second approach is faster, and uses at most the same amount of memory, probably less.\n\nEspecially when the input text is human language, where the text length might be much longer than the last word,\nso the last word is much closer to the end than to the beginning.\n"
                    },
                    {
                        "username": "sifatfahimul",
                        "content": "first count the empty space of the string from last index.\nthen minus the space count form string and count charter from last. and return charter count."
                    },
                    {
                        "username": "MengjieQian",
                        "content": "s = \\'hello world \\'\\ns.split()  # [\\'hello, \\'world\\']\\ns.plit(\\' \\') # [\\'hello\\', \\'world\\', \\' \\']"
                    },
                    {
                        "username": "arjunvasu",
                        "content": "I am trying to submit a solution and it says \"String is not declared in this scope\" compilation error.\\ncan anyone please assist on this.\\n\\nthanks."
                    },
                    {
                        "username": "haoyangfan",
                        "content": "I am confused by the time complexity of this question, should it be `O(1)` or `O(n)`?\\n\\nFor most of solutions I\\'ve seen for this problem, they use some language build-in methods such as `trim`, `lastIndexOf` or `split`. Although the solution code itself does not scan through the entire string, if those methods that the solution relies on internally will traverse through the string, will that also make those solutions actually be `O(n)` time complexity?"
                    },
                    {
                        "username": "aakash_chandhoke",
                        "content": "Isnt the solution set ambiguous as for this input the output should be zero but here it is giving 1 \n\n**INPUT**- \"a \"\n**OUTPUT**- 1\n\nAs the space is comming after the character nd after the space there is no word so output should be zero i guess..\nPlease correct me if i am wrong."
                    },
                    {
                        "username": "gilgoliada",
                        "content": "What are the chances my friend will see this leetcode question the day after he started watching one piece?"
                    }
                ]
            },
            {
                "id": 1572177,
                "content": [
                    {
                        "username": "greenlogan",
                        "content": "return len(s.strip().split(\" \")[-1])"
                    },
                    {
                        "username": "simonnchong",
                        "content": "you don\\'t need the strip() actually, split() will split the word only without the space contains in it"
                    },
                    {
                        "username": "shubhamparad19",
                        "content": "Today is the day, everyone heard the drums of liberation. Joyboy has returned\\uD83E\\uDD0D"
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nreturn len(s.split()[-1])\\n```"
                    },
                    {
                        "username": "varshini-S",
                        "content": "why can't we just reverse the string and count the character till the whitespace arrives?\nclear my doubt, please."
                    },
                    {
                        "username": "HarshitUpadhyay",
                        "content": "We can\\'t do this because we have some string which contains whitespace at first like \"   fly me   to   the moon  \" this gives 0 as result "
                    },
                    {
                        "username": "wagzap",
                        "content": "And splitting the string between spaces and taking the length of the last piece works too. \\nIt just takes more time to go through the whole string to split it \\u23F3\\nAnd more space for each piece of the string, as much as the input \\u27BF"
                    },
                    {
                        "username": "wagzap",
                        "content": "We can do that.\n💡And we can do better. 💡\n\nIf we reverse the string ⏭ and only then count the consecutive word characters from the front 0️⃣1️⃣2️⃣... , we always go through the __entire__ string, no matter how short the last word is.\nAnd we use up memory for the reversed string, if the language has immutable strings.\n\nBut if we just go from the end to the first word character ◀, then we count consecutive word characters 0️⃣1️⃣2️⃣... , we only go through `suffix_spaces + last_word_length` characters.\n\nHere's an imperfect analogy.\nThe first approach is like going through an entire book from the first to the last page, to find the last chapter. While also putting the sheets in reverse order.\n\nWhile the second one is like going through the book from the last page towards the beginning.\n\nIn practice, the second approach is faster, and uses at most the same amount of memory, probably less.\n\nEspecially when the input text is human language, where the text length might be much longer than the last word,\nso the last word is much closer to the end than to the beginning.\n"
                    },
                    {
                        "username": "sifatfahimul",
                        "content": "first count the empty space of the string from last index.\nthen minus the space count form string and count charter from last. and return charter count."
                    },
                    {
                        "username": "MengjieQian",
                        "content": "s = \\'hello world \\'\\ns.split()  # [\\'hello, \\'world\\']\\ns.plit(\\' \\') # [\\'hello\\', \\'world\\', \\' \\']"
                    },
                    {
                        "username": "arjunvasu",
                        "content": "I am trying to submit a solution and it says \"String is not declared in this scope\" compilation error.\\ncan anyone please assist on this.\\n\\nthanks."
                    },
                    {
                        "username": "haoyangfan",
                        "content": "I am confused by the time complexity of this question, should it be `O(1)` or `O(n)`?\\n\\nFor most of solutions I\\'ve seen for this problem, they use some language build-in methods such as `trim`, `lastIndexOf` or `split`. Although the solution code itself does not scan through the entire string, if those methods that the solution relies on internally will traverse through the string, will that also make those solutions actually be `O(n)` time complexity?"
                    },
                    {
                        "username": "aakash_chandhoke",
                        "content": "Isnt the solution set ambiguous as for this input the output should be zero but here it is giving 1 \n\n**INPUT**- \"a \"\n**OUTPUT**- 1\n\nAs the space is comming after the character nd after the space there is no word so output should be zero i guess..\nPlease correct me if i am wrong."
                    },
                    {
                        "username": "gilgoliada",
                        "content": "What are the chances my friend will see this leetcode question the day after he started watching one piece?"
                    }
                ]
            },
            {
                "id": 1571873,
                "content": [
                    {
                        "username": "greenlogan",
                        "content": "return len(s.strip().split(\" \")[-1])"
                    },
                    {
                        "username": "simonnchong",
                        "content": "you don\\'t need the strip() actually, split() will split the word only without the space contains in it"
                    },
                    {
                        "username": "shubhamparad19",
                        "content": "Today is the day, everyone heard the drums of liberation. Joyboy has returned\\uD83E\\uDD0D"
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nreturn len(s.split()[-1])\\n```"
                    },
                    {
                        "username": "varshini-S",
                        "content": "why can't we just reverse the string and count the character till the whitespace arrives?\nclear my doubt, please."
                    },
                    {
                        "username": "HarshitUpadhyay",
                        "content": "We can\\'t do this because we have some string which contains whitespace at first like \"   fly me   to   the moon  \" this gives 0 as result "
                    },
                    {
                        "username": "wagzap",
                        "content": "And splitting the string between spaces and taking the length of the last piece works too. \\nIt just takes more time to go through the whole string to split it \\u23F3\\nAnd more space for each piece of the string, as much as the input \\u27BF"
                    },
                    {
                        "username": "wagzap",
                        "content": "We can do that.\n💡And we can do better. 💡\n\nIf we reverse the string ⏭ and only then count the consecutive word characters from the front 0️⃣1️⃣2️⃣... , we always go through the __entire__ string, no matter how short the last word is.\nAnd we use up memory for the reversed string, if the language has immutable strings.\n\nBut if we just go from the end to the first word character ◀, then we count consecutive word characters 0️⃣1️⃣2️⃣... , we only go through `suffix_spaces + last_word_length` characters.\n\nHere's an imperfect analogy.\nThe first approach is like going through an entire book from the first to the last page, to find the last chapter. While also putting the sheets in reverse order.\n\nWhile the second one is like going through the book from the last page towards the beginning.\n\nIn practice, the second approach is faster, and uses at most the same amount of memory, probably less.\n\nEspecially when the input text is human language, where the text length might be much longer than the last word,\nso the last word is much closer to the end than to the beginning.\n"
                    },
                    {
                        "username": "sifatfahimul",
                        "content": "first count the empty space of the string from last index.\nthen minus the space count form string and count charter from last. and return charter count."
                    },
                    {
                        "username": "MengjieQian",
                        "content": "s = \\'hello world \\'\\ns.split()  # [\\'hello, \\'world\\']\\ns.plit(\\' \\') # [\\'hello\\', \\'world\\', \\' \\']"
                    },
                    {
                        "username": "arjunvasu",
                        "content": "I am trying to submit a solution and it says \"String is not declared in this scope\" compilation error.\\ncan anyone please assist on this.\\n\\nthanks."
                    },
                    {
                        "username": "haoyangfan",
                        "content": "I am confused by the time complexity of this question, should it be `O(1)` or `O(n)`?\\n\\nFor most of solutions I\\'ve seen for this problem, they use some language build-in methods such as `trim`, `lastIndexOf` or `split`. Although the solution code itself does not scan through the entire string, if those methods that the solution relies on internally will traverse through the string, will that also make those solutions actually be `O(n)` time complexity?"
                    },
                    {
                        "username": "aakash_chandhoke",
                        "content": "Isnt the solution set ambiguous as for this input the output should be zero but here it is giving 1 \n\n**INPUT**- \"a \"\n**OUTPUT**- 1\n\nAs the space is comming after the character nd after the space there is no word so output should be zero i guess..\nPlease correct me if i am wrong."
                    },
                    {
                        "username": "gilgoliada",
                        "content": "What are the chances my friend will see this leetcode question the day after he started watching one piece?"
                    }
                ]
            },
            {
                "id": 2074473,
                "content": [
                    {
                        "username": "greenlogan",
                        "content": "return len(s.strip().split(\" \")[-1])"
                    },
                    {
                        "username": "simonnchong",
                        "content": "you don\\'t need the strip() actually, split() will split the word only without the space contains in it"
                    },
                    {
                        "username": "shubhamparad19",
                        "content": "Today is the day, everyone heard the drums of liberation. Joyboy has returned\\uD83E\\uDD0D"
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nreturn len(s.split()[-1])\\n```"
                    },
                    {
                        "username": "varshini-S",
                        "content": "why can't we just reverse the string and count the character till the whitespace arrives?\nclear my doubt, please."
                    },
                    {
                        "username": "HarshitUpadhyay",
                        "content": "We can\\'t do this because we have some string which contains whitespace at first like \"   fly me   to   the moon  \" this gives 0 as result "
                    },
                    {
                        "username": "wagzap",
                        "content": "And splitting the string between spaces and taking the length of the last piece works too. \\nIt just takes more time to go through the whole string to split it \\u23F3\\nAnd more space for each piece of the string, as much as the input \\u27BF"
                    },
                    {
                        "username": "wagzap",
                        "content": "We can do that.\n💡And we can do better. 💡\n\nIf we reverse the string ⏭ and only then count the consecutive word characters from the front 0️⃣1️⃣2️⃣... , we always go through the __entire__ string, no matter how short the last word is.\nAnd we use up memory for the reversed string, if the language has immutable strings.\n\nBut if we just go from the end to the first word character ◀, then we count consecutive word characters 0️⃣1️⃣2️⃣... , we only go through `suffix_spaces + last_word_length` characters.\n\nHere's an imperfect analogy.\nThe first approach is like going through an entire book from the first to the last page, to find the last chapter. While also putting the sheets in reverse order.\n\nWhile the second one is like going through the book from the last page towards the beginning.\n\nIn practice, the second approach is faster, and uses at most the same amount of memory, probably less.\n\nEspecially when the input text is human language, where the text length might be much longer than the last word,\nso the last word is much closer to the end than to the beginning.\n"
                    },
                    {
                        "username": "sifatfahimul",
                        "content": "first count the empty space of the string from last index.\nthen minus the space count form string and count charter from last. and return charter count."
                    },
                    {
                        "username": "MengjieQian",
                        "content": "s = \\'hello world \\'\\ns.split()  # [\\'hello, \\'world\\']\\ns.plit(\\' \\') # [\\'hello\\', \\'world\\', \\' \\']"
                    },
                    {
                        "username": "arjunvasu",
                        "content": "I am trying to submit a solution and it says \"String is not declared in this scope\" compilation error.\\ncan anyone please assist on this.\\n\\nthanks."
                    },
                    {
                        "username": "haoyangfan",
                        "content": "I am confused by the time complexity of this question, should it be `O(1)` or `O(n)`?\\n\\nFor most of solutions I\\'ve seen for this problem, they use some language build-in methods such as `trim`, `lastIndexOf` or `split`. Although the solution code itself does not scan through the entire string, if those methods that the solution relies on internally will traverse through the string, will that also make those solutions actually be `O(n)` time complexity?"
                    },
                    {
                        "username": "aakash_chandhoke",
                        "content": "Isnt the solution set ambiguous as for this input the output should be zero but here it is giving 1 \n\n**INPUT**- \"a \"\n**OUTPUT**- 1\n\nAs the space is comming after the character nd after the space there is no word so output should be zero i guess..\nPlease correct me if i am wrong."
                    },
                    {
                        "username": "gilgoliada",
                        "content": "What are the chances my friend will see this leetcode question the day after he started watching one piece?"
                    }
                ]
            },
            {
                "id": 2069821,
                "content": [
                    {
                        "username": "underdogsrijan",
                        "content": "i can see an one piece fan here\\uD83D\\uDE02\\uD83D\\uDE0D"
                    },
                    {
                        "username": "midhilesh1979",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i=s.size()-1,k=0;\\n        while(i>=0){\\n            if(int(s[i])==32&&k!=0){\\n                return k;\\n            }else if(int(s[i])!=32){\\n                k++;\\n            }\\n            i--;\\n        }\\n       return k;\\n    }\\n};"
                    },
                    {
                        "username": "bhargav2520",
                        "content": "  class Solution {\\n    public int lengthOfLastWord(String s) {\\n        // trim the trailing spaces\\n        int p = s.length()-1;\\n        int length=0;\\n       for(int i=p;i>=0;i--){\\n         if(s.charAt(i)!=\\' \\'){\\n           length=length+1;\\n         }\\n         if(s.charAt(i)==\\' \\' && length!=0){\\n            return length;\\n         }\\n\\n       }\\n    return length;\\n    }\\n}"
                    },
                    {
                        "username": "Satya_959",
                        "content": "Zoro in parallel universe is a programmer....spreading joy with joyboy..Gear5thhh"
                    },
                    {
                        "username": "CORE_KING",
                        "content": "One piece is real!!!!!"
                    },
                    {
                        "username": "adityaa_gupta",
                        "content": "Okay so I used strip method which removed spaces from the end. Then traversed the list from backward while incrementing a count variable, as soon as I am encountering a space, I am returning the count.\n"
                    },
                    {
                        "username": "sujaltangde",
                        "content": "The One Piece is Real \\n"
                    },
                    {
                        "username": "TheTrueLeetCoder",
                        "content": "Can someone please point out what I did wrong; I keep getting runtime errors because the indexing is out of bounds. It\\'s probably something small but I just can\\'t see it.\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int i = s.length()-1;\\n        int count = 0;\\n        s = s.trim();\\n        String arr[] = s.split(\" \", -1);\\n        \\n        for(int j = i; j>= 0; j--)\\n        {\\n            if(arr[j] == \" \")\\n            {\\n                break;\\n            }\\n            else {\\n                count = arr[j].length();\\n            }\\n        }\\n        return count;\\n\\n    }\\n}"
                    },
                    {
                        "username": "ahrix268",
                        "content": "`int i = s.length()-1;`\\n\\n`i` , now, definitely is greater than arr.len. therefore it will throw an exception when you read arr[j] (which equals to `i` at the first loop)\\n\\nalso, you don\\'t have to run a for-loop. \\nsince you used `trim()` to remove trailing blank, just return the length of the last element of the `arr`"
                    },
                    {
                        "username": "aiyappa18",
                        "content": "Java and Python users would find this very easy lol"
                    },
                    {
                        "username": "steady_we_ride",
                        "content": "Why the hell there is a spoiler to OP? Just WTF"
                    }
                ]
            },
            {
                "id": 2069791,
                "content": [
                    {
                        "username": "underdogsrijan",
                        "content": "i can see an one piece fan here\\uD83D\\uDE02\\uD83D\\uDE0D"
                    },
                    {
                        "username": "midhilesh1979",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i=s.size()-1,k=0;\\n        while(i>=0){\\n            if(int(s[i])==32&&k!=0){\\n                return k;\\n            }else if(int(s[i])!=32){\\n                k++;\\n            }\\n            i--;\\n        }\\n       return k;\\n    }\\n};"
                    },
                    {
                        "username": "bhargav2520",
                        "content": "  class Solution {\\n    public int lengthOfLastWord(String s) {\\n        // trim the trailing spaces\\n        int p = s.length()-1;\\n        int length=0;\\n       for(int i=p;i>=0;i--){\\n         if(s.charAt(i)!=\\' \\'){\\n           length=length+1;\\n         }\\n         if(s.charAt(i)==\\' \\' && length!=0){\\n            return length;\\n         }\\n\\n       }\\n    return length;\\n    }\\n}"
                    },
                    {
                        "username": "Satya_959",
                        "content": "Zoro in parallel universe is a programmer....spreading joy with joyboy..Gear5thhh"
                    },
                    {
                        "username": "CORE_KING",
                        "content": "One piece is real!!!!!"
                    },
                    {
                        "username": "adityaa_gupta",
                        "content": "Okay so I used strip method which removed spaces from the end. Then traversed the list from backward while incrementing a count variable, as soon as I am encountering a space, I am returning the count.\n"
                    },
                    {
                        "username": "sujaltangde",
                        "content": "The One Piece is Real \\n"
                    },
                    {
                        "username": "TheTrueLeetCoder",
                        "content": "Can someone please point out what I did wrong; I keep getting runtime errors because the indexing is out of bounds. It\\'s probably something small but I just can\\'t see it.\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int i = s.length()-1;\\n        int count = 0;\\n        s = s.trim();\\n        String arr[] = s.split(\" \", -1);\\n        \\n        for(int j = i; j>= 0; j--)\\n        {\\n            if(arr[j] == \" \")\\n            {\\n                break;\\n            }\\n            else {\\n                count = arr[j].length();\\n            }\\n        }\\n        return count;\\n\\n    }\\n}"
                    },
                    {
                        "username": "ahrix268",
                        "content": "`int i = s.length()-1;`\\n\\n`i` , now, definitely is greater than arr.len. therefore it will throw an exception when you read arr[j] (which equals to `i` at the first loop)\\n\\nalso, you don\\'t have to run a for-loop. \\nsince you used `trim()` to remove trailing blank, just return the length of the last element of the `arr`"
                    },
                    {
                        "username": "aiyappa18",
                        "content": "Java and Python users would find this very easy lol"
                    },
                    {
                        "username": "steady_we_ride",
                        "content": "Why the hell there is a spoiler to OP? Just WTF"
                    }
                ]
            },
            {
                "id": 2060839,
                "content": [
                    {
                        "username": "underdogsrijan",
                        "content": "i can see an one piece fan here\\uD83D\\uDE02\\uD83D\\uDE0D"
                    },
                    {
                        "username": "midhilesh1979",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i=s.size()-1,k=0;\\n        while(i>=0){\\n            if(int(s[i])==32&&k!=0){\\n                return k;\\n            }else if(int(s[i])!=32){\\n                k++;\\n            }\\n            i--;\\n        }\\n       return k;\\n    }\\n};"
                    },
                    {
                        "username": "bhargav2520",
                        "content": "  class Solution {\\n    public int lengthOfLastWord(String s) {\\n        // trim the trailing spaces\\n        int p = s.length()-1;\\n        int length=0;\\n       for(int i=p;i>=0;i--){\\n         if(s.charAt(i)!=\\' \\'){\\n           length=length+1;\\n         }\\n         if(s.charAt(i)==\\' \\' && length!=0){\\n            return length;\\n         }\\n\\n       }\\n    return length;\\n    }\\n}"
                    },
                    {
                        "username": "Satya_959",
                        "content": "Zoro in parallel universe is a programmer....spreading joy with joyboy..Gear5thhh"
                    },
                    {
                        "username": "CORE_KING",
                        "content": "One piece is real!!!!!"
                    },
                    {
                        "username": "adityaa_gupta",
                        "content": "Okay so I used strip method which removed spaces from the end. Then traversed the list from backward while incrementing a count variable, as soon as I am encountering a space, I am returning the count.\n"
                    },
                    {
                        "username": "sujaltangde",
                        "content": "The One Piece is Real \\n"
                    },
                    {
                        "username": "TheTrueLeetCoder",
                        "content": "Can someone please point out what I did wrong; I keep getting runtime errors because the indexing is out of bounds. It\\'s probably something small but I just can\\'t see it.\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int i = s.length()-1;\\n        int count = 0;\\n        s = s.trim();\\n        String arr[] = s.split(\" \", -1);\\n        \\n        for(int j = i; j>= 0; j--)\\n        {\\n            if(arr[j] == \" \")\\n            {\\n                break;\\n            }\\n            else {\\n                count = arr[j].length();\\n            }\\n        }\\n        return count;\\n\\n    }\\n}"
                    },
                    {
                        "username": "ahrix268",
                        "content": "`int i = s.length()-1;`\\n\\n`i` , now, definitely is greater than arr.len. therefore it will throw an exception when you read arr[j] (which equals to `i` at the first loop)\\n\\nalso, you don\\'t have to run a for-loop. \\nsince you used `trim()` to remove trailing blank, just return the length of the last element of the `arr`"
                    },
                    {
                        "username": "aiyappa18",
                        "content": "Java and Python users would find this very easy lol"
                    },
                    {
                        "username": "steady_we_ride",
                        "content": "Why the hell there is a spoiler to OP? Just WTF"
                    }
                ]
            },
            {
                "id": 2056347,
                "content": [
                    {
                        "username": "underdogsrijan",
                        "content": "i can see an one piece fan here\\uD83D\\uDE02\\uD83D\\uDE0D"
                    },
                    {
                        "username": "midhilesh1979",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i=s.size()-1,k=0;\\n        while(i>=0){\\n            if(int(s[i])==32&&k!=0){\\n                return k;\\n            }else if(int(s[i])!=32){\\n                k++;\\n            }\\n            i--;\\n        }\\n       return k;\\n    }\\n};"
                    },
                    {
                        "username": "bhargav2520",
                        "content": "  class Solution {\\n    public int lengthOfLastWord(String s) {\\n        // trim the trailing spaces\\n        int p = s.length()-1;\\n        int length=0;\\n       for(int i=p;i>=0;i--){\\n         if(s.charAt(i)!=\\' \\'){\\n           length=length+1;\\n         }\\n         if(s.charAt(i)==\\' \\' && length!=0){\\n            return length;\\n         }\\n\\n       }\\n    return length;\\n    }\\n}"
                    },
                    {
                        "username": "Satya_959",
                        "content": "Zoro in parallel universe is a programmer....spreading joy with joyboy..Gear5thhh"
                    },
                    {
                        "username": "CORE_KING",
                        "content": "One piece is real!!!!!"
                    },
                    {
                        "username": "adityaa_gupta",
                        "content": "Okay so I used strip method which removed spaces from the end. Then traversed the list from backward while incrementing a count variable, as soon as I am encountering a space, I am returning the count.\n"
                    },
                    {
                        "username": "sujaltangde",
                        "content": "The One Piece is Real \\n"
                    },
                    {
                        "username": "TheTrueLeetCoder",
                        "content": "Can someone please point out what I did wrong; I keep getting runtime errors because the indexing is out of bounds. It\\'s probably something small but I just can\\'t see it.\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int i = s.length()-1;\\n        int count = 0;\\n        s = s.trim();\\n        String arr[] = s.split(\" \", -1);\\n        \\n        for(int j = i; j>= 0; j--)\\n        {\\n            if(arr[j] == \" \")\\n            {\\n                break;\\n            }\\n            else {\\n                count = arr[j].length();\\n            }\\n        }\\n        return count;\\n\\n    }\\n}"
                    },
                    {
                        "username": "ahrix268",
                        "content": "`int i = s.length()-1;`\\n\\n`i` , now, definitely is greater than arr.len. therefore it will throw an exception when you read arr[j] (which equals to `i` at the first loop)\\n\\nalso, you don\\'t have to run a for-loop. \\nsince you used `trim()` to remove trailing blank, just return the length of the last element of the `arr`"
                    },
                    {
                        "username": "aiyappa18",
                        "content": "Java and Python users would find this very easy lol"
                    },
                    {
                        "username": "steady_we_ride",
                        "content": "Why the hell there is a spoiler to OP? Just WTF"
                    }
                ]
            },
            {
                "id": 2056340,
                "content": [
                    {
                        "username": "underdogsrijan",
                        "content": "i can see an one piece fan here\\uD83D\\uDE02\\uD83D\\uDE0D"
                    },
                    {
                        "username": "midhilesh1979",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i=s.size()-1,k=0;\\n        while(i>=0){\\n            if(int(s[i])==32&&k!=0){\\n                return k;\\n            }else if(int(s[i])!=32){\\n                k++;\\n            }\\n            i--;\\n        }\\n       return k;\\n    }\\n};"
                    },
                    {
                        "username": "bhargav2520",
                        "content": "  class Solution {\\n    public int lengthOfLastWord(String s) {\\n        // trim the trailing spaces\\n        int p = s.length()-1;\\n        int length=0;\\n       for(int i=p;i>=0;i--){\\n         if(s.charAt(i)!=\\' \\'){\\n           length=length+1;\\n         }\\n         if(s.charAt(i)==\\' \\' && length!=0){\\n            return length;\\n         }\\n\\n       }\\n    return length;\\n    }\\n}"
                    },
                    {
                        "username": "Satya_959",
                        "content": "Zoro in parallel universe is a programmer....spreading joy with joyboy..Gear5thhh"
                    },
                    {
                        "username": "CORE_KING",
                        "content": "One piece is real!!!!!"
                    },
                    {
                        "username": "adityaa_gupta",
                        "content": "Okay so I used strip method which removed spaces from the end. Then traversed the list from backward while incrementing a count variable, as soon as I am encountering a space, I am returning the count.\n"
                    },
                    {
                        "username": "sujaltangde",
                        "content": "The One Piece is Real \\n"
                    },
                    {
                        "username": "TheTrueLeetCoder",
                        "content": "Can someone please point out what I did wrong; I keep getting runtime errors because the indexing is out of bounds. It\\'s probably something small but I just can\\'t see it.\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int i = s.length()-1;\\n        int count = 0;\\n        s = s.trim();\\n        String arr[] = s.split(\" \", -1);\\n        \\n        for(int j = i; j>= 0; j--)\\n        {\\n            if(arr[j] == \" \")\\n            {\\n                break;\\n            }\\n            else {\\n                count = arr[j].length();\\n            }\\n        }\\n        return count;\\n\\n    }\\n}"
                    },
                    {
                        "username": "ahrix268",
                        "content": "`int i = s.length()-1;`\\n\\n`i` , now, definitely is greater than arr.len. therefore it will throw an exception when you read arr[j] (which equals to `i` at the first loop)\\n\\nalso, you don\\'t have to run a for-loop. \\nsince you used `trim()` to remove trailing blank, just return the length of the last element of the `arr`"
                    },
                    {
                        "username": "aiyappa18",
                        "content": "Java and Python users would find this very easy lol"
                    },
                    {
                        "username": "steady_we_ride",
                        "content": "Why the hell there is a spoiler to OP? Just WTF"
                    }
                ]
            },
            {
                "id": 2055654,
                "content": [
                    {
                        "username": "underdogsrijan",
                        "content": "i can see an one piece fan here\\uD83D\\uDE02\\uD83D\\uDE0D"
                    },
                    {
                        "username": "midhilesh1979",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i=s.size()-1,k=0;\\n        while(i>=0){\\n            if(int(s[i])==32&&k!=0){\\n                return k;\\n            }else if(int(s[i])!=32){\\n                k++;\\n            }\\n            i--;\\n        }\\n       return k;\\n    }\\n};"
                    },
                    {
                        "username": "bhargav2520",
                        "content": "  class Solution {\\n    public int lengthOfLastWord(String s) {\\n        // trim the trailing spaces\\n        int p = s.length()-1;\\n        int length=0;\\n       for(int i=p;i>=0;i--){\\n         if(s.charAt(i)!=\\' \\'){\\n           length=length+1;\\n         }\\n         if(s.charAt(i)==\\' \\' && length!=0){\\n            return length;\\n         }\\n\\n       }\\n    return length;\\n    }\\n}"
                    },
                    {
                        "username": "Satya_959",
                        "content": "Zoro in parallel universe is a programmer....spreading joy with joyboy..Gear5thhh"
                    },
                    {
                        "username": "CORE_KING",
                        "content": "One piece is real!!!!!"
                    },
                    {
                        "username": "adityaa_gupta",
                        "content": "Okay so I used strip method which removed spaces from the end. Then traversed the list from backward while incrementing a count variable, as soon as I am encountering a space, I am returning the count.\n"
                    },
                    {
                        "username": "sujaltangde",
                        "content": "The One Piece is Real \\n"
                    },
                    {
                        "username": "TheTrueLeetCoder",
                        "content": "Can someone please point out what I did wrong; I keep getting runtime errors because the indexing is out of bounds. It\\'s probably something small but I just can\\'t see it.\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int i = s.length()-1;\\n        int count = 0;\\n        s = s.trim();\\n        String arr[] = s.split(\" \", -1);\\n        \\n        for(int j = i; j>= 0; j--)\\n        {\\n            if(arr[j] == \" \")\\n            {\\n                break;\\n            }\\n            else {\\n                count = arr[j].length();\\n            }\\n        }\\n        return count;\\n\\n    }\\n}"
                    },
                    {
                        "username": "ahrix268",
                        "content": "`int i = s.length()-1;`\\n\\n`i` , now, definitely is greater than arr.len. therefore it will throw an exception when you read arr[j] (which equals to `i` at the first loop)\\n\\nalso, you don\\'t have to run a for-loop. \\nsince you used `trim()` to remove trailing blank, just return the length of the last element of the `arr`"
                    },
                    {
                        "username": "aiyappa18",
                        "content": "Java and Python users would find this very easy lol"
                    },
                    {
                        "username": "steady_we_ride",
                        "content": "Why the hell there is a spoiler to OP? Just WTF"
                    }
                ]
            },
            {
                "id": 2053403,
                "content": [
                    {
                        "username": "underdogsrijan",
                        "content": "i can see an one piece fan here\\uD83D\\uDE02\\uD83D\\uDE0D"
                    },
                    {
                        "username": "midhilesh1979",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i=s.size()-1,k=0;\\n        while(i>=0){\\n            if(int(s[i])==32&&k!=0){\\n                return k;\\n            }else if(int(s[i])!=32){\\n                k++;\\n            }\\n            i--;\\n        }\\n       return k;\\n    }\\n};"
                    },
                    {
                        "username": "bhargav2520",
                        "content": "  class Solution {\\n    public int lengthOfLastWord(String s) {\\n        // trim the trailing spaces\\n        int p = s.length()-1;\\n        int length=0;\\n       for(int i=p;i>=0;i--){\\n         if(s.charAt(i)!=\\' \\'){\\n           length=length+1;\\n         }\\n         if(s.charAt(i)==\\' \\' && length!=0){\\n            return length;\\n         }\\n\\n       }\\n    return length;\\n    }\\n}"
                    },
                    {
                        "username": "Satya_959",
                        "content": "Zoro in parallel universe is a programmer....spreading joy with joyboy..Gear5thhh"
                    },
                    {
                        "username": "CORE_KING",
                        "content": "One piece is real!!!!!"
                    },
                    {
                        "username": "adityaa_gupta",
                        "content": "Okay so I used strip method which removed spaces from the end. Then traversed the list from backward while incrementing a count variable, as soon as I am encountering a space, I am returning the count.\n"
                    },
                    {
                        "username": "sujaltangde",
                        "content": "The One Piece is Real \\n"
                    },
                    {
                        "username": "TheTrueLeetCoder",
                        "content": "Can someone please point out what I did wrong; I keep getting runtime errors because the indexing is out of bounds. It\\'s probably something small but I just can\\'t see it.\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int i = s.length()-1;\\n        int count = 0;\\n        s = s.trim();\\n        String arr[] = s.split(\" \", -1);\\n        \\n        for(int j = i; j>= 0; j--)\\n        {\\n            if(arr[j] == \" \")\\n            {\\n                break;\\n            }\\n            else {\\n                count = arr[j].length();\\n            }\\n        }\\n        return count;\\n\\n    }\\n}"
                    },
                    {
                        "username": "ahrix268",
                        "content": "`int i = s.length()-1;`\\n\\n`i` , now, definitely is greater than arr.len. therefore it will throw an exception when you read arr[j] (which equals to `i` at the first loop)\\n\\nalso, you don\\'t have to run a for-loop. \\nsince you used `trim()` to remove trailing blank, just return the length of the last element of the `arr`"
                    },
                    {
                        "username": "aiyappa18",
                        "content": "Java and Python users would find this very easy lol"
                    },
                    {
                        "username": "steady_we_ride",
                        "content": "Why the hell there is a spoiler to OP? Just WTF"
                    }
                ]
            },
            {
                "id": 2052468,
                "content": [
                    {
                        "username": "underdogsrijan",
                        "content": "i can see an one piece fan here\\uD83D\\uDE02\\uD83D\\uDE0D"
                    },
                    {
                        "username": "midhilesh1979",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i=s.size()-1,k=0;\\n        while(i>=0){\\n            if(int(s[i])==32&&k!=0){\\n                return k;\\n            }else if(int(s[i])!=32){\\n                k++;\\n            }\\n            i--;\\n        }\\n       return k;\\n    }\\n};"
                    },
                    {
                        "username": "bhargav2520",
                        "content": "  class Solution {\\n    public int lengthOfLastWord(String s) {\\n        // trim the trailing spaces\\n        int p = s.length()-1;\\n        int length=0;\\n       for(int i=p;i>=0;i--){\\n         if(s.charAt(i)!=\\' \\'){\\n           length=length+1;\\n         }\\n         if(s.charAt(i)==\\' \\' && length!=0){\\n            return length;\\n         }\\n\\n       }\\n    return length;\\n    }\\n}"
                    },
                    {
                        "username": "Satya_959",
                        "content": "Zoro in parallel universe is a programmer....spreading joy with joyboy..Gear5thhh"
                    },
                    {
                        "username": "CORE_KING",
                        "content": "One piece is real!!!!!"
                    },
                    {
                        "username": "adityaa_gupta",
                        "content": "Okay so I used strip method which removed spaces from the end. Then traversed the list from backward while incrementing a count variable, as soon as I am encountering a space, I am returning the count.\n"
                    },
                    {
                        "username": "sujaltangde",
                        "content": "The One Piece is Real \\n"
                    },
                    {
                        "username": "TheTrueLeetCoder",
                        "content": "Can someone please point out what I did wrong; I keep getting runtime errors because the indexing is out of bounds. It\\'s probably something small but I just can\\'t see it.\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int i = s.length()-1;\\n        int count = 0;\\n        s = s.trim();\\n        String arr[] = s.split(\" \", -1);\\n        \\n        for(int j = i; j>= 0; j--)\\n        {\\n            if(arr[j] == \" \")\\n            {\\n                break;\\n            }\\n            else {\\n                count = arr[j].length();\\n            }\\n        }\\n        return count;\\n\\n    }\\n}"
                    },
                    {
                        "username": "ahrix268",
                        "content": "`int i = s.length()-1;`\\n\\n`i` , now, definitely is greater than arr.len. therefore it will throw an exception when you read arr[j] (which equals to `i` at the first loop)\\n\\nalso, you don\\'t have to run a for-loop. \\nsince you used `trim()` to remove trailing blank, just return the length of the last element of the `arr`"
                    },
                    {
                        "username": "aiyappa18",
                        "content": "Java and Python users would find this very easy lol"
                    },
                    {
                        "username": "steady_we_ride",
                        "content": "Why the hell there is a spoiler to OP? Just WTF"
                    }
                ]
            },
            {
                "id": 2044108,
                "content": [
                    {
                        "username": "underdogsrijan",
                        "content": "i can see an one piece fan here\\uD83D\\uDE02\\uD83D\\uDE0D"
                    },
                    {
                        "username": "midhilesh1979",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i=s.size()-1,k=0;\\n        while(i>=0){\\n            if(int(s[i])==32&&k!=0){\\n                return k;\\n            }else if(int(s[i])!=32){\\n                k++;\\n            }\\n            i--;\\n        }\\n       return k;\\n    }\\n};"
                    },
                    {
                        "username": "bhargav2520",
                        "content": "  class Solution {\\n    public int lengthOfLastWord(String s) {\\n        // trim the trailing spaces\\n        int p = s.length()-1;\\n        int length=0;\\n       for(int i=p;i>=0;i--){\\n         if(s.charAt(i)!=\\' \\'){\\n           length=length+1;\\n         }\\n         if(s.charAt(i)==\\' \\' && length!=0){\\n            return length;\\n         }\\n\\n       }\\n    return length;\\n    }\\n}"
                    },
                    {
                        "username": "Satya_959",
                        "content": "Zoro in parallel universe is a programmer....spreading joy with joyboy..Gear5thhh"
                    },
                    {
                        "username": "CORE_KING",
                        "content": "One piece is real!!!!!"
                    },
                    {
                        "username": "adityaa_gupta",
                        "content": "Okay so I used strip method which removed spaces from the end. Then traversed the list from backward while incrementing a count variable, as soon as I am encountering a space, I am returning the count.\n"
                    },
                    {
                        "username": "sujaltangde",
                        "content": "The One Piece is Real \\n"
                    },
                    {
                        "username": "TheTrueLeetCoder",
                        "content": "Can someone please point out what I did wrong; I keep getting runtime errors because the indexing is out of bounds. It\\'s probably something small but I just can\\'t see it.\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int i = s.length()-1;\\n        int count = 0;\\n        s = s.trim();\\n        String arr[] = s.split(\" \", -1);\\n        \\n        for(int j = i; j>= 0; j--)\\n        {\\n            if(arr[j] == \" \")\\n            {\\n                break;\\n            }\\n            else {\\n                count = arr[j].length();\\n            }\\n        }\\n        return count;\\n\\n    }\\n}"
                    },
                    {
                        "username": "ahrix268",
                        "content": "`int i = s.length()-1;`\\n\\n`i` , now, definitely is greater than arr.len. therefore it will throw an exception when you read arr[j] (which equals to `i` at the first loop)\\n\\nalso, you don\\'t have to run a for-loop. \\nsince you used `trim()` to remove trailing blank, just return the length of the last element of the `arr`"
                    },
                    {
                        "username": "aiyappa18",
                        "content": "Java and Python users would find this very easy lol"
                    },
                    {
                        "username": "steady_we_ride",
                        "content": "Why the hell there is a spoiler to OP? Just WTF"
                    }
                ]
            },
            {
                "id": 2043797,
                "content": [
                    {
                        "username": "underdogsrijan",
                        "content": "i can see an one piece fan here\\uD83D\\uDE02\\uD83D\\uDE0D"
                    },
                    {
                        "username": "midhilesh1979",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i=s.size()-1,k=0;\\n        while(i>=0){\\n            if(int(s[i])==32&&k!=0){\\n                return k;\\n            }else if(int(s[i])!=32){\\n                k++;\\n            }\\n            i--;\\n        }\\n       return k;\\n    }\\n};"
                    },
                    {
                        "username": "bhargav2520",
                        "content": "  class Solution {\\n    public int lengthOfLastWord(String s) {\\n        // trim the trailing spaces\\n        int p = s.length()-1;\\n        int length=0;\\n       for(int i=p;i>=0;i--){\\n         if(s.charAt(i)!=\\' \\'){\\n           length=length+1;\\n         }\\n         if(s.charAt(i)==\\' \\' && length!=0){\\n            return length;\\n         }\\n\\n       }\\n    return length;\\n    }\\n}"
                    },
                    {
                        "username": "Satya_959",
                        "content": "Zoro in parallel universe is a programmer....spreading joy with joyboy..Gear5thhh"
                    },
                    {
                        "username": "CORE_KING",
                        "content": "One piece is real!!!!!"
                    },
                    {
                        "username": "adityaa_gupta",
                        "content": "Okay so I used strip method which removed spaces from the end. Then traversed the list from backward while incrementing a count variable, as soon as I am encountering a space, I am returning the count.\n"
                    },
                    {
                        "username": "sujaltangde",
                        "content": "The One Piece is Real \\n"
                    },
                    {
                        "username": "TheTrueLeetCoder",
                        "content": "Can someone please point out what I did wrong; I keep getting runtime errors because the indexing is out of bounds. It\\'s probably something small but I just can\\'t see it.\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int i = s.length()-1;\\n        int count = 0;\\n        s = s.trim();\\n        String arr[] = s.split(\" \", -1);\\n        \\n        for(int j = i; j>= 0; j--)\\n        {\\n            if(arr[j] == \" \")\\n            {\\n                break;\\n            }\\n            else {\\n                count = arr[j].length();\\n            }\\n        }\\n        return count;\\n\\n    }\\n}"
                    },
                    {
                        "username": "ahrix268",
                        "content": "`int i = s.length()-1;`\\n\\n`i` , now, definitely is greater than arr.len. therefore it will throw an exception when you read arr[j] (which equals to `i` at the first loop)\\n\\nalso, you don\\'t have to run a for-loop. \\nsince you used `trim()` to remove trailing blank, just return the length of the last element of the `arr`"
                    },
                    {
                        "username": "aiyappa18",
                        "content": "Java and Python users would find this very easy lol"
                    },
                    {
                        "username": "steady_we_ride",
                        "content": "Why the hell there is a spoiler to OP? Just WTF"
                    }
                ]
            },
            {
                "id": 2039918,
                "content": [
                    {
                        "username": "jdenstnt",
                        "content": "Manga readers not getting spoiled\\n"
                    },
                    {
                        "username": "manasi0401",
                        "content": "I am getting runtime error on my code, can somoene explain the issue?\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count=0;\\n        int i=s.size()-1;\\n        while(s[i]==\\' \\'&& i>=0){\\n            i--;\\n        } \\nfor(i; s[i]!=\\' \\'&& i>=0; i-- ){\\n         count+=1;\\n        }\\nreturn count;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "EvilGriffith",
                        "content": "luffy stronger joyboy"
                    },
                    {
                        "username": "SyamTheCoder",
                        "content": "Test case no: 37 \"Today is a nice day\". Expected :3 instead of 5 (Today). "
                    },
                    {
                        "username": "hot_zoro2003",
                        "content": "why tf I\\'m being spoil on leetcode? "
                    },
                    {
                        "username": "t3nsor98",
                        "content": "I didn\\'t expect a one-piece reference."
                    },
                    {
                        "username": "ankitz013",
                        "content": "1. **Remove Extra Spaces:** Get rid of any spaces at the beginning and end of the string.\\n\\n2. **Find Last Word:** Starting from the end of the string, move backwards until you find the first non-space character. This will be the last word\\'s end.\\n\\n3. **Count Characters:** Count the characters from the last word\\'s end until you encounter a space or reach the start of the string. That\\'s the length of the last word.\\n\\n4. **Return Length:** Return the length you\\'ve counted.\\n\\nRemember, the goal is to find the length of the last word in the given string by looking at its characters, excluding any leading or trailing spaces."
                    },
                    {
                        "username": "anuragmahadik56",
                        "content": "This is the most simple solution you can use to solve this in GOLANG \\n`func lengthOfLastWord(s string) int {\\n\\n    str := strings.TrimRight(regexp.MustCompile(`\\\\s+`).ReplaceAllString(s, \" \"), \" \")\\n\\n    strarray := strings.Split(str, \" \")\\n    \\n    return len(strarray[len(strarray)-1])\\n}`"
                    },
                    {
                        "username": "Ninjabdul",
                        "content": "wtf why is there a One Piece spoiler "
                    },
                    {
                        "username": "amarprakash065",
                        "content": "        int count = 0;\\n        bool flag = false;\\n        for(int i = s.size()-1 ; i >= 0 ; i--)\\n        {\\n            if(s[i] != \\' \\')\\n            {\\n                flag = true ;\\n                count+= 1;\\n            }\\n\\n            else if(s[i] == \\' \\' && flag == true)\\n            {\\n                break;\\n            }\\n        }\\n\\n        return count ;"
                    }
                ]
            },
            {
                "id": 2039278,
                "content": [
                    {
                        "username": "jdenstnt",
                        "content": "Manga readers not getting spoiled\\n"
                    },
                    {
                        "username": "manasi0401",
                        "content": "I am getting runtime error on my code, can somoene explain the issue?\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count=0;\\n        int i=s.size()-1;\\n        while(s[i]==\\' \\'&& i>=0){\\n            i--;\\n        } \\nfor(i; s[i]!=\\' \\'&& i>=0; i-- ){\\n         count+=1;\\n        }\\nreturn count;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "EvilGriffith",
                        "content": "luffy stronger joyboy"
                    },
                    {
                        "username": "SyamTheCoder",
                        "content": "Test case no: 37 \"Today is a nice day\". Expected :3 instead of 5 (Today). "
                    },
                    {
                        "username": "hot_zoro2003",
                        "content": "why tf I\\'m being spoil on leetcode? "
                    },
                    {
                        "username": "t3nsor98",
                        "content": "I didn\\'t expect a one-piece reference."
                    },
                    {
                        "username": "ankitz013",
                        "content": "1. **Remove Extra Spaces:** Get rid of any spaces at the beginning and end of the string.\\n\\n2. **Find Last Word:** Starting from the end of the string, move backwards until you find the first non-space character. This will be the last word\\'s end.\\n\\n3. **Count Characters:** Count the characters from the last word\\'s end until you encounter a space or reach the start of the string. That\\'s the length of the last word.\\n\\n4. **Return Length:** Return the length you\\'ve counted.\\n\\nRemember, the goal is to find the length of the last word in the given string by looking at its characters, excluding any leading or trailing spaces."
                    },
                    {
                        "username": "anuragmahadik56",
                        "content": "This is the most simple solution you can use to solve this in GOLANG \\n`func lengthOfLastWord(s string) int {\\n\\n    str := strings.TrimRight(regexp.MustCompile(`\\\\s+`).ReplaceAllString(s, \" \"), \" \")\\n\\n    strarray := strings.Split(str, \" \")\\n    \\n    return len(strarray[len(strarray)-1])\\n}`"
                    },
                    {
                        "username": "Ninjabdul",
                        "content": "wtf why is there a One Piece spoiler "
                    },
                    {
                        "username": "amarprakash065",
                        "content": "        int count = 0;\\n        bool flag = false;\\n        for(int i = s.size()-1 ; i >= 0 ; i--)\\n        {\\n            if(s[i] != \\' \\')\\n            {\\n                flag = true ;\\n                count+= 1;\\n            }\\n\\n            else if(s[i] == \\' \\' && flag == true)\\n            {\\n                break;\\n            }\\n        }\\n\\n        return count ;"
                    }
                ]
            },
            {
                "id": 2037340,
                "content": [
                    {
                        "username": "jdenstnt",
                        "content": "Manga readers not getting spoiled\\n"
                    },
                    {
                        "username": "manasi0401",
                        "content": "I am getting runtime error on my code, can somoene explain the issue?\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count=0;\\n        int i=s.size()-1;\\n        while(s[i]==\\' \\'&& i>=0){\\n            i--;\\n        } \\nfor(i; s[i]!=\\' \\'&& i>=0; i-- ){\\n         count+=1;\\n        }\\nreturn count;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "EvilGriffith",
                        "content": "luffy stronger joyboy"
                    },
                    {
                        "username": "SyamTheCoder",
                        "content": "Test case no: 37 \"Today is a nice day\". Expected :3 instead of 5 (Today). "
                    },
                    {
                        "username": "hot_zoro2003",
                        "content": "why tf I\\'m being spoil on leetcode? "
                    },
                    {
                        "username": "t3nsor98",
                        "content": "I didn\\'t expect a one-piece reference."
                    },
                    {
                        "username": "ankitz013",
                        "content": "1. **Remove Extra Spaces:** Get rid of any spaces at the beginning and end of the string.\\n\\n2. **Find Last Word:** Starting from the end of the string, move backwards until you find the first non-space character. This will be the last word\\'s end.\\n\\n3. **Count Characters:** Count the characters from the last word\\'s end until you encounter a space or reach the start of the string. That\\'s the length of the last word.\\n\\n4. **Return Length:** Return the length you\\'ve counted.\\n\\nRemember, the goal is to find the length of the last word in the given string by looking at its characters, excluding any leading or trailing spaces."
                    },
                    {
                        "username": "anuragmahadik56",
                        "content": "This is the most simple solution you can use to solve this in GOLANG \\n`func lengthOfLastWord(s string) int {\\n\\n    str := strings.TrimRight(regexp.MustCompile(`\\\\s+`).ReplaceAllString(s, \" \"), \" \")\\n\\n    strarray := strings.Split(str, \" \")\\n    \\n    return len(strarray[len(strarray)-1])\\n}`"
                    },
                    {
                        "username": "Ninjabdul",
                        "content": "wtf why is there a One Piece spoiler "
                    },
                    {
                        "username": "amarprakash065",
                        "content": "        int count = 0;\\n        bool flag = false;\\n        for(int i = s.size()-1 ; i >= 0 ; i--)\\n        {\\n            if(s[i] != \\' \\')\\n            {\\n                flag = true ;\\n                count+= 1;\\n            }\\n\\n            else if(s[i] == \\' \\' && flag == true)\\n            {\\n                break;\\n            }\\n        }\\n\\n        return count ;"
                    }
                ]
            },
            {
                "id": 2032843,
                "content": [
                    {
                        "username": "jdenstnt",
                        "content": "Manga readers not getting spoiled\\n"
                    },
                    {
                        "username": "manasi0401",
                        "content": "I am getting runtime error on my code, can somoene explain the issue?\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count=0;\\n        int i=s.size()-1;\\n        while(s[i]==\\' \\'&& i>=0){\\n            i--;\\n        } \\nfor(i; s[i]!=\\' \\'&& i>=0; i-- ){\\n         count+=1;\\n        }\\nreturn count;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "EvilGriffith",
                        "content": "luffy stronger joyboy"
                    },
                    {
                        "username": "SyamTheCoder",
                        "content": "Test case no: 37 \"Today is a nice day\". Expected :3 instead of 5 (Today). "
                    },
                    {
                        "username": "hot_zoro2003",
                        "content": "why tf I\\'m being spoil on leetcode? "
                    },
                    {
                        "username": "t3nsor98",
                        "content": "I didn\\'t expect a one-piece reference."
                    },
                    {
                        "username": "ankitz013",
                        "content": "1. **Remove Extra Spaces:** Get rid of any spaces at the beginning and end of the string.\\n\\n2. **Find Last Word:** Starting from the end of the string, move backwards until you find the first non-space character. This will be the last word\\'s end.\\n\\n3. **Count Characters:** Count the characters from the last word\\'s end until you encounter a space or reach the start of the string. That\\'s the length of the last word.\\n\\n4. **Return Length:** Return the length you\\'ve counted.\\n\\nRemember, the goal is to find the length of the last word in the given string by looking at its characters, excluding any leading or trailing spaces."
                    },
                    {
                        "username": "anuragmahadik56",
                        "content": "This is the most simple solution you can use to solve this in GOLANG \\n`func lengthOfLastWord(s string) int {\\n\\n    str := strings.TrimRight(regexp.MustCompile(`\\\\s+`).ReplaceAllString(s, \" \"), \" \")\\n\\n    strarray := strings.Split(str, \" \")\\n    \\n    return len(strarray[len(strarray)-1])\\n}`"
                    },
                    {
                        "username": "Ninjabdul",
                        "content": "wtf why is there a One Piece spoiler "
                    },
                    {
                        "username": "amarprakash065",
                        "content": "        int count = 0;\\n        bool flag = false;\\n        for(int i = s.size()-1 ; i >= 0 ; i--)\\n        {\\n            if(s[i] != \\' \\')\\n            {\\n                flag = true ;\\n                count+= 1;\\n            }\\n\\n            else if(s[i] == \\' \\' && flag == true)\\n            {\\n                break;\\n            }\\n        }\\n\\n        return count ;"
                    }
                ]
            },
            {
                "id": 2027606,
                "content": [
                    {
                        "username": "jdenstnt",
                        "content": "Manga readers not getting spoiled\\n"
                    },
                    {
                        "username": "manasi0401",
                        "content": "I am getting runtime error on my code, can somoene explain the issue?\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count=0;\\n        int i=s.size()-1;\\n        while(s[i]==\\' \\'&& i>=0){\\n            i--;\\n        } \\nfor(i; s[i]!=\\' \\'&& i>=0; i-- ){\\n         count+=1;\\n        }\\nreturn count;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "EvilGriffith",
                        "content": "luffy stronger joyboy"
                    },
                    {
                        "username": "SyamTheCoder",
                        "content": "Test case no: 37 \"Today is a nice day\". Expected :3 instead of 5 (Today). "
                    },
                    {
                        "username": "hot_zoro2003",
                        "content": "why tf I\\'m being spoil on leetcode? "
                    },
                    {
                        "username": "t3nsor98",
                        "content": "I didn\\'t expect a one-piece reference."
                    },
                    {
                        "username": "ankitz013",
                        "content": "1. **Remove Extra Spaces:** Get rid of any spaces at the beginning and end of the string.\\n\\n2. **Find Last Word:** Starting from the end of the string, move backwards until you find the first non-space character. This will be the last word\\'s end.\\n\\n3. **Count Characters:** Count the characters from the last word\\'s end until you encounter a space or reach the start of the string. That\\'s the length of the last word.\\n\\n4. **Return Length:** Return the length you\\'ve counted.\\n\\nRemember, the goal is to find the length of the last word in the given string by looking at its characters, excluding any leading or trailing spaces."
                    },
                    {
                        "username": "anuragmahadik56",
                        "content": "This is the most simple solution you can use to solve this in GOLANG \\n`func lengthOfLastWord(s string) int {\\n\\n    str := strings.TrimRight(regexp.MustCompile(`\\\\s+`).ReplaceAllString(s, \" \"), \" \")\\n\\n    strarray := strings.Split(str, \" \")\\n    \\n    return len(strarray[len(strarray)-1])\\n}`"
                    },
                    {
                        "username": "Ninjabdul",
                        "content": "wtf why is there a One Piece spoiler "
                    },
                    {
                        "username": "amarprakash065",
                        "content": "        int count = 0;\\n        bool flag = false;\\n        for(int i = s.size()-1 ; i >= 0 ; i--)\\n        {\\n            if(s[i] != \\' \\')\\n            {\\n                flag = true ;\\n                count+= 1;\\n            }\\n\\n            else if(s[i] == \\' \\' && flag == true)\\n            {\\n                break;\\n            }\\n        }\\n\\n        return count ;"
                    }
                ]
            },
            {
                "id": 2024660,
                "content": [
                    {
                        "username": "jdenstnt",
                        "content": "Manga readers not getting spoiled\\n"
                    },
                    {
                        "username": "manasi0401",
                        "content": "I am getting runtime error on my code, can somoene explain the issue?\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count=0;\\n        int i=s.size()-1;\\n        while(s[i]==\\' \\'&& i>=0){\\n            i--;\\n        } \\nfor(i; s[i]!=\\' \\'&& i>=0; i-- ){\\n         count+=1;\\n        }\\nreturn count;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "EvilGriffith",
                        "content": "luffy stronger joyboy"
                    },
                    {
                        "username": "SyamTheCoder",
                        "content": "Test case no: 37 \"Today is a nice day\". Expected :3 instead of 5 (Today). "
                    },
                    {
                        "username": "hot_zoro2003",
                        "content": "why tf I\\'m being spoil on leetcode? "
                    },
                    {
                        "username": "t3nsor98",
                        "content": "I didn\\'t expect a one-piece reference."
                    },
                    {
                        "username": "ankitz013",
                        "content": "1. **Remove Extra Spaces:** Get rid of any spaces at the beginning and end of the string.\\n\\n2. **Find Last Word:** Starting from the end of the string, move backwards until you find the first non-space character. This will be the last word\\'s end.\\n\\n3. **Count Characters:** Count the characters from the last word\\'s end until you encounter a space or reach the start of the string. That\\'s the length of the last word.\\n\\n4. **Return Length:** Return the length you\\'ve counted.\\n\\nRemember, the goal is to find the length of the last word in the given string by looking at its characters, excluding any leading or trailing spaces."
                    },
                    {
                        "username": "anuragmahadik56",
                        "content": "This is the most simple solution you can use to solve this in GOLANG \\n`func lengthOfLastWord(s string) int {\\n\\n    str := strings.TrimRight(regexp.MustCompile(`\\\\s+`).ReplaceAllString(s, \" \"), \" \")\\n\\n    strarray := strings.Split(str, \" \")\\n    \\n    return len(strarray[len(strarray)-1])\\n}`"
                    },
                    {
                        "username": "Ninjabdul",
                        "content": "wtf why is there a One Piece spoiler "
                    },
                    {
                        "username": "amarprakash065",
                        "content": "        int count = 0;\\n        bool flag = false;\\n        for(int i = s.size()-1 ; i >= 0 ; i--)\\n        {\\n            if(s[i] != \\' \\')\\n            {\\n                flag = true ;\\n                count+= 1;\\n            }\\n\\n            else if(s[i] == \\' \\' && flag == true)\\n            {\\n                break;\\n            }\\n        }\\n\\n        return count ;"
                    }
                ]
            },
            {
                "id": 2020435,
                "content": [
                    {
                        "username": "jdenstnt",
                        "content": "Manga readers not getting spoiled\\n"
                    },
                    {
                        "username": "manasi0401",
                        "content": "I am getting runtime error on my code, can somoene explain the issue?\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count=0;\\n        int i=s.size()-1;\\n        while(s[i]==\\' \\'&& i>=0){\\n            i--;\\n        } \\nfor(i; s[i]!=\\' \\'&& i>=0; i-- ){\\n         count+=1;\\n        }\\nreturn count;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "EvilGriffith",
                        "content": "luffy stronger joyboy"
                    },
                    {
                        "username": "SyamTheCoder",
                        "content": "Test case no: 37 \"Today is a nice day\". Expected :3 instead of 5 (Today). "
                    },
                    {
                        "username": "hot_zoro2003",
                        "content": "why tf I\\'m being spoil on leetcode? "
                    },
                    {
                        "username": "t3nsor98",
                        "content": "I didn\\'t expect a one-piece reference."
                    },
                    {
                        "username": "ankitz013",
                        "content": "1. **Remove Extra Spaces:** Get rid of any spaces at the beginning and end of the string.\\n\\n2. **Find Last Word:** Starting from the end of the string, move backwards until you find the first non-space character. This will be the last word\\'s end.\\n\\n3. **Count Characters:** Count the characters from the last word\\'s end until you encounter a space or reach the start of the string. That\\'s the length of the last word.\\n\\n4. **Return Length:** Return the length you\\'ve counted.\\n\\nRemember, the goal is to find the length of the last word in the given string by looking at its characters, excluding any leading or trailing spaces."
                    },
                    {
                        "username": "anuragmahadik56",
                        "content": "This is the most simple solution you can use to solve this in GOLANG \\n`func lengthOfLastWord(s string) int {\\n\\n    str := strings.TrimRight(regexp.MustCompile(`\\\\s+`).ReplaceAllString(s, \" \"), \" \")\\n\\n    strarray := strings.Split(str, \" \")\\n    \\n    return len(strarray[len(strarray)-1])\\n}`"
                    },
                    {
                        "username": "Ninjabdul",
                        "content": "wtf why is there a One Piece spoiler "
                    },
                    {
                        "username": "amarprakash065",
                        "content": "        int count = 0;\\n        bool flag = false;\\n        for(int i = s.size()-1 ; i >= 0 ; i--)\\n        {\\n            if(s[i] != \\' \\')\\n            {\\n                flag = true ;\\n                count+= 1;\\n            }\\n\\n            else if(s[i] == \\' \\' && flag == true)\\n            {\\n                break;\\n            }\\n        }\\n\\n        return count ;"
                    }
                ]
            },
            {
                "id": 2015882,
                "content": [
                    {
                        "username": "jdenstnt",
                        "content": "Manga readers not getting spoiled\\n"
                    },
                    {
                        "username": "manasi0401",
                        "content": "I am getting runtime error on my code, can somoene explain the issue?\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count=0;\\n        int i=s.size()-1;\\n        while(s[i]==\\' \\'&& i>=0){\\n            i--;\\n        } \\nfor(i; s[i]!=\\' \\'&& i>=0; i-- ){\\n         count+=1;\\n        }\\nreturn count;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "EvilGriffith",
                        "content": "luffy stronger joyboy"
                    },
                    {
                        "username": "SyamTheCoder",
                        "content": "Test case no: 37 \"Today is a nice day\". Expected :3 instead of 5 (Today). "
                    },
                    {
                        "username": "hot_zoro2003",
                        "content": "why tf I\\'m being spoil on leetcode? "
                    },
                    {
                        "username": "t3nsor98",
                        "content": "I didn\\'t expect a one-piece reference."
                    },
                    {
                        "username": "ankitz013",
                        "content": "1. **Remove Extra Spaces:** Get rid of any spaces at the beginning and end of the string.\\n\\n2. **Find Last Word:** Starting from the end of the string, move backwards until you find the first non-space character. This will be the last word\\'s end.\\n\\n3. **Count Characters:** Count the characters from the last word\\'s end until you encounter a space or reach the start of the string. That\\'s the length of the last word.\\n\\n4. **Return Length:** Return the length you\\'ve counted.\\n\\nRemember, the goal is to find the length of the last word in the given string by looking at its characters, excluding any leading or trailing spaces."
                    },
                    {
                        "username": "anuragmahadik56",
                        "content": "This is the most simple solution you can use to solve this in GOLANG \\n`func lengthOfLastWord(s string) int {\\n\\n    str := strings.TrimRight(regexp.MustCompile(`\\\\s+`).ReplaceAllString(s, \" \"), \" \")\\n\\n    strarray := strings.Split(str, \" \")\\n    \\n    return len(strarray[len(strarray)-1])\\n}`"
                    },
                    {
                        "username": "Ninjabdul",
                        "content": "wtf why is there a One Piece spoiler "
                    },
                    {
                        "username": "amarprakash065",
                        "content": "        int count = 0;\\n        bool flag = false;\\n        for(int i = s.size()-1 ; i >= 0 ; i--)\\n        {\\n            if(s[i] != \\' \\')\\n            {\\n                flag = true ;\\n                count+= 1;\\n            }\\n\\n            else if(s[i] == \\' \\' && flag == true)\\n            {\\n                break;\\n            }\\n        }\\n\\n        return count ;"
                    }
                ]
            },
            {
                "id": 2012949,
                "content": [
                    {
                        "username": "jdenstnt",
                        "content": "Manga readers not getting spoiled\\n"
                    },
                    {
                        "username": "manasi0401",
                        "content": "I am getting runtime error on my code, can somoene explain the issue?\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count=0;\\n        int i=s.size()-1;\\n        while(s[i]==\\' \\'&& i>=0){\\n            i--;\\n        } \\nfor(i; s[i]!=\\' \\'&& i>=0; i-- ){\\n         count+=1;\\n        }\\nreturn count;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "EvilGriffith",
                        "content": "luffy stronger joyboy"
                    },
                    {
                        "username": "SyamTheCoder",
                        "content": "Test case no: 37 \"Today is a nice day\". Expected :3 instead of 5 (Today). "
                    },
                    {
                        "username": "hot_zoro2003",
                        "content": "why tf I\\'m being spoil on leetcode? "
                    },
                    {
                        "username": "t3nsor98",
                        "content": "I didn\\'t expect a one-piece reference."
                    },
                    {
                        "username": "ankitz013",
                        "content": "1. **Remove Extra Spaces:** Get rid of any spaces at the beginning and end of the string.\\n\\n2. **Find Last Word:** Starting from the end of the string, move backwards until you find the first non-space character. This will be the last word\\'s end.\\n\\n3. **Count Characters:** Count the characters from the last word\\'s end until you encounter a space or reach the start of the string. That\\'s the length of the last word.\\n\\n4. **Return Length:** Return the length you\\'ve counted.\\n\\nRemember, the goal is to find the length of the last word in the given string by looking at its characters, excluding any leading or trailing spaces."
                    },
                    {
                        "username": "anuragmahadik56",
                        "content": "This is the most simple solution you can use to solve this in GOLANG \\n`func lengthOfLastWord(s string) int {\\n\\n    str := strings.TrimRight(regexp.MustCompile(`\\\\s+`).ReplaceAllString(s, \" \"), \" \")\\n\\n    strarray := strings.Split(str, \" \")\\n    \\n    return len(strarray[len(strarray)-1])\\n}`"
                    },
                    {
                        "username": "Ninjabdul",
                        "content": "wtf why is there a One Piece spoiler "
                    },
                    {
                        "username": "amarprakash065",
                        "content": "        int count = 0;\\n        bool flag = false;\\n        for(int i = s.size()-1 ; i >= 0 ; i--)\\n        {\\n            if(s[i] != \\' \\')\\n            {\\n                flag = true ;\\n                count+= 1;\\n            }\\n\\n            else if(s[i] == \\' \\' && flag == true)\\n            {\\n                break;\\n            }\\n        }\\n\\n        return count ;"
                    }
                ]
            },
            {
                "id": 2012690,
                "content": [
                    {
                        "username": "jdenstnt",
                        "content": "Manga readers not getting spoiled\\n"
                    },
                    {
                        "username": "manasi0401",
                        "content": "I am getting runtime error on my code, can somoene explain the issue?\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count=0;\\n        int i=s.size()-1;\\n        while(s[i]==\\' \\'&& i>=0){\\n            i--;\\n        } \\nfor(i; s[i]!=\\' \\'&& i>=0; i-- ){\\n         count+=1;\\n        }\\nreturn count;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "EvilGriffith",
                        "content": "luffy stronger joyboy"
                    },
                    {
                        "username": "SyamTheCoder",
                        "content": "Test case no: 37 \"Today is a nice day\". Expected :3 instead of 5 (Today). "
                    },
                    {
                        "username": "hot_zoro2003",
                        "content": "why tf I\\'m being spoil on leetcode? "
                    },
                    {
                        "username": "t3nsor98",
                        "content": "I didn\\'t expect a one-piece reference."
                    },
                    {
                        "username": "ankitz013",
                        "content": "1. **Remove Extra Spaces:** Get rid of any spaces at the beginning and end of the string.\\n\\n2. **Find Last Word:** Starting from the end of the string, move backwards until you find the first non-space character. This will be the last word\\'s end.\\n\\n3. **Count Characters:** Count the characters from the last word\\'s end until you encounter a space or reach the start of the string. That\\'s the length of the last word.\\n\\n4. **Return Length:** Return the length you\\'ve counted.\\n\\nRemember, the goal is to find the length of the last word in the given string by looking at its characters, excluding any leading or trailing spaces."
                    },
                    {
                        "username": "anuragmahadik56",
                        "content": "This is the most simple solution you can use to solve this in GOLANG \\n`func lengthOfLastWord(s string) int {\\n\\n    str := strings.TrimRight(regexp.MustCompile(`\\\\s+`).ReplaceAllString(s, \" \"), \" \")\\n\\n    strarray := strings.Split(str, \" \")\\n    \\n    return len(strarray[len(strarray)-1])\\n}`"
                    },
                    {
                        "username": "Ninjabdul",
                        "content": "wtf why is there a One Piece spoiler "
                    },
                    {
                        "username": "amarprakash065",
                        "content": "        int count = 0;\\n        bool flag = false;\\n        for(int i = s.size()-1 ; i >= 0 ; i--)\\n        {\\n            if(s[i] != \\' \\')\\n            {\\n                flag = true ;\\n                count+= 1;\\n            }\\n\\n            else if(s[i] == \\' \\' && flag == true)\\n            {\\n                break;\\n            }\\n        }\\n\\n        return count ;"
                    }
                ]
            },
            {
                "id": 2004640,
                "content": [
                    {
                        "username": "ravithemorree",
                        "content": "Simple Count the last word length"
                    },
                    {
                        "username": "Jahongir_Doniyarov",
                        "content": "var lengthOfLastWord = function(s) {\\n    let String = s.trim()\\n    let newString = String.split(\\' \\')\\n    let lastWords  = newString.length - 1\\n    return (newString[lastWords].length)\\n};"
                    },
                    {
                        "username": "HaifonixHDx",
                        "content": "Report the spoiler "
                    },
                    {
                        "username": "vaibhav2112",
                        "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i = s.length()-1;\\n        while(s[i] == \\' \\'){\\n            i--;\\n        }\\n\\n        int ans = 0;\\n        while(i >= 0 && s[i] != \\' \\'){\\n            i--;\\n            ans++;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "This problem is excellent for practicing basic string manipulation and traversal techniques, including working with substrings and understanding string indices."
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question is easy and can be done with the help of string functions"
                    },
                    {
                        "username": "yajasarora",
                        "content": "below is my code and it\\'s NOT WORKING!!\\ncan anyone help me with whats the issue here?\\n\\n `class Solution {`\\n`    public int lengthOfLastWord(String s) {`\\n`        int j=0;`\\n`        char[] ss=s.toCharArray();`\\n`        for (int i=ss.length-1;i<=0;i--) {`\\n`                if (ss[i]==\\' \\') {`\\n`                    continue;`\\n`                }`\\n`                while (ss[i]!=\\' \\') {`\\n`                    j++;`\\n`                    i--;`\\n`                }`\\n`                if(j>0) {`\\n`                    break;`\\n`                }`\\n`        }`\\n`        return j;`\\n`    }`\\n`}`"
                    },
                    {
                        "username": "dworkinfromchaos",
                        "content": "The One Piece Is Real :)"
                    },
                    {
                        "username": "tejasbhoyar19",
                        "content": "wow, i certainly didn\\'t expect to get a Brawl Stars reference while solving a freaking leetcode problem,lol."
                    },
                    {
                        "username": "rishabh_101",
                        "content": "Tip : Use Single Quote operator to compare a empty space instead of double space. "
                    }
                ]
            },
            {
                "id": 2002761,
                "content": [
                    {
                        "username": "ravithemorree",
                        "content": "Simple Count the last word length"
                    },
                    {
                        "username": "Jahongir_Doniyarov",
                        "content": "var lengthOfLastWord = function(s) {\\n    let String = s.trim()\\n    let newString = String.split(\\' \\')\\n    let lastWords  = newString.length - 1\\n    return (newString[lastWords].length)\\n};"
                    },
                    {
                        "username": "HaifonixHDx",
                        "content": "Report the spoiler "
                    },
                    {
                        "username": "vaibhav2112",
                        "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i = s.length()-1;\\n        while(s[i] == \\' \\'){\\n            i--;\\n        }\\n\\n        int ans = 0;\\n        while(i >= 0 && s[i] != \\' \\'){\\n            i--;\\n            ans++;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "This problem is excellent for practicing basic string manipulation and traversal techniques, including working with substrings and understanding string indices."
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question is easy and can be done with the help of string functions"
                    },
                    {
                        "username": "yajasarora",
                        "content": "below is my code and it\\'s NOT WORKING!!\\ncan anyone help me with whats the issue here?\\n\\n `class Solution {`\\n`    public int lengthOfLastWord(String s) {`\\n`        int j=0;`\\n`        char[] ss=s.toCharArray();`\\n`        for (int i=ss.length-1;i<=0;i--) {`\\n`                if (ss[i]==\\' \\') {`\\n`                    continue;`\\n`                }`\\n`                while (ss[i]!=\\' \\') {`\\n`                    j++;`\\n`                    i--;`\\n`                }`\\n`                if(j>0) {`\\n`                    break;`\\n`                }`\\n`        }`\\n`        return j;`\\n`    }`\\n`}`"
                    },
                    {
                        "username": "dworkinfromchaos",
                        "content": "The One Piece Is Real :)"
                    },
                    {
                        "username": "tejasbhoyar19",
                        "content": "wow, i certainly didn\\'t expect to get a Brawl Stars reference while solving a freaking leetcode problem,lol."
                    },
                    {
                        "username": "rishabh_101",
                        "content": "Tip : Use Single Quote operator to compare a empty space instead of double space. "
                    }
                ]
            },
            {
                "id": 1997641,
                "content": [
                    {
                        "username": "ravithemorree",
                        "content": "Simple Count the last word length"
                    },
                    {
                        "username": "Jahongir_Doniyarov",
                        "content": "var lengthOfLastWord = function(s) {\\n    let String = s.trim()\\n    let newString = String.split(\\' \\')\\n    let lastWords  = newString.length - 1\\n    return (newString[lastWords].length)\\n};"
                    },
                    {
                        "username": "HaifonixHDx",
                        "content": "Report the spoiler "
                    },
                    {
                        "username": "vaibhav2112",
                        "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i = s.length()-1;\\n        while(s[i] == \\' \\'){\\n            i--;\\n        }\\n\\n        int ans = 0;\\n        while(i >= 0 && s[i] != \\' \\'){\\n            i--;\\n            ans++;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "This problem is excellent for practicing basic string manipulation and traversal techniques, including working with substrings and understanding string indices."
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question is easy and can be done with the help of string functions"
                    },
                    {
                        "username": "yajasarora",
                        "content": "below is my code and it\\'s NOT WORKING!!\\ncan anyone help me with whats the issue here?\\n\\n `class Solution {`\\n`    public int lengthOfLastWord(String s) {`\\n`        int j=0;`\\n`        char[] ss=s.toCharArray();`\\n`        for (int i=ss.length-1;i<=0;i--) {`\\n`                if (ss[i]==\\' \\') {`\\n`                    continue;`\\n`                }`\\n`                while (ss[i]!=\\' \\') {`\\n`                    j++;`\\n`                    i--;`\\n`                }`\\n`                if(j>0) {`\\n`                    break;`\\n`                }`\\n`        }`\\n`        return j;`\\n`    }`\\n`}`"
                    },
                    {
                        "username": "dworkinfromchaos",
                        "content": "The One Piece Is Real :)"
                    },
                    {
                        "username": "tejasbhoyar19",
                        "content": "wow, i certainly didn\\'t expect to get a Brawl Stars reference while solving a freaking leetcode problem,lol."
                    },
                    {
                        "username": "rishabh_101",
                        "content": "Tip : Use Single Quote operator to compare a empty space instead of double space. "
                    }
                ]
            },
            {
                "id": 1995022,
                "content": [
                    {
                        "username": "ravithemorree",
                        "content": "Simple Count the last word length"
                    },
                    {
                        "username": "Jahongir_Doniyarov",
                        "content": "var lengthOfLastWord = function(s) {\\n    let String = s.trim()\\n    let newString = String.split(\\' \\')\\n    let lastWords  = newString.length - 1\\n    return (newString[lastWords].length)\\n};"
                    },
                    {
                        "username": "HaifonixHDx",
                        "content": "Report the spoiler "
                    },
                    {
                        "username": "vaibhav2112",
                        "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i = s.length()-1;\\n        while(s[i] == \\' \\'){\\n            i--;\\n        }\\n\\n        int ans = 0;\\n        while(i >= 0 && s[i] != \\' \\'){\\n            i--;\\n            ans++;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "This problem is excellent for practicing basic string manipulation and traversal techniques, including working with substrings and understanding string indices."
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question is easy and can be done with the help of string functions"
                    },
                    {
                        "username": "yajasarora",
                        "content": "below is my code and it\\'s NOT WORKING!!\\ncan anyone help me with whats the issue here?\\n\\n `class Solution {`\\n`    public int lengthOfLastWord(String s) {`\\n`        int j=0;`\\n`        char[] ss=s.toCharArray();`\\n`        for (int i=ss.length-1;i<=0;i--) {`\\n`                if (ss[i]==\\' \\') {`\\n`                    continue;`\\n`                }`\\n`                while (ss[i]!=\\' \\') {`\\n`                    j++;`\\n`                    i--;`\\n`                }`\\n`                if(j>0) {`\\n`                    break;`\\n`                }`\\n`        }`\\n`        return j;`\\n`    }`\\n`}`"
                    },
                    {
                        "username": "dworkinfromchaos",
                        "content": "The One Piece Is Real :)"
                    },
                    {
                        "username": "tejasbhoyar19",
                        "content": "wow, i certainly didn\\'t expect to get a Brawl Stars reference while solving a freaking leetcode problem,lol."
                    },
                    {
                        "username": "rishabh_101",
                        "content": "Tip : Use Single Quote operator to compare a empty space instead of double space. "
                    }
                ]
            },
            {
                "id": 1994928,
                "content": [
                    {
                        "username": "ravithemorree",
                        "content": "Simple Count the last word length"
                    },
                    {
                        "username": "Jahongir_Doniyarov",
                        "content": "var lengthOfLastWord = function(s) {\\n    let String = s.trim()\\n    let newString = String.split(\\' \\')\\n    let lastWords  = newString.length - 1\\n    return (newString[lastWords].length)\\n};"
                    },
                    {
                        "username": "HaifonixHDx",
                        "content": "Report the spoiler "
                    },
                    {
                        "username": "vaibhav2112",
                        "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i = s.length()-1;\\n        while(s[i] == \\' \\'){\\n            i--;\\n        }\\n\\n        int ans = 0;\\n        while(i >= 0 && s[i] != \\' \\'){\\n            i--;\\n            ans++;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "This problem is excellent for practicing basic string manipulation and traversal techniques, including working with substrings and understanding string indices."
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question is easy and can be done with the help of string functions"
                    },
                    {
                        "username": "yajasarora",
                        "content": "below is my code and it\\'s NOT WORKING!!\\ncan anyone help me with whats the issue here?\\n\\n `class Solution {`\\n`    public int lengthOfLastWord(String s) {`\\n`        int j=0;`\\n`        char[] ss=s.toCharArray();`\\n`        for (int i=ss.length-1;i<=0;i--) {`\\n`                if (ss[i]==\\' \\') {`\\n`                    continue;`\\n`                }`\\n`                while (ss[i]!=\\' \\') {`\\n`                    j++;`\\n`                    i--;`\\n`                }`\\n`                if(j>0) {`\\n`                    break;`\\n`                }`\\n`        }`\\n`        return j;`\\n`    }`\\n`}`"
                    },
                    {
                        "username": "dworkinfromchaos",
                        "content": "The One Piece Is Real :)"
                    },
                    {
                        "username": "tejasbhoyar19",
                        "content": "wow, i certainly didn\\'t expect to get a Brawl Stars reference while solving a freaking leetcode problem,lol."
                    },
                    {
                        "username": "rishabh_101",
                        "content": "Tip : Use Single Quote operator to compare a empty space instead of double space. "
                    }
                ]
            },
            {
                "id": 1990731,
                "content": [
                    {
                        "username": "ravithemorree",
                        "content": "Simple Count the last word length"
                    },
                    {
                        "username": "Jahongir_Doniyarov",
                        "content": "var lengthOfLastWord = function(s) {\\n    let String = s.trim()\\n    let newString = String.split(\\' \\')\\n    let lastWords  = newString.length - 1\\n    return (newString[lastWords].length)\\n};"
                    },
                    {
                        "username": "HaifonixHDx",
                        "content": "Report the spoiler "
                    },
                    {
                        "username": "vaibhav2112",
                        "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i = s.length()-1;\\n        while(s[i] == \\' \\'){\\n            i--;\\n        }\\n\\n        int ans = 0;\\n        while(i >= 0 && s[i] != \\' \\'){\\n            i--;\\n            ans++;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "This problem is excellent for practicing basic string manipulation and traversal techniques, including working with substrings and understanding string indices."
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question is easy and can be done with the help of string functions"
                    },
                    {
                        "username": "yajasarora",
                        "content": "below is my code and it\\'s NOT WORKING!!\\ncan anyone help me with whats the issue here?\\n\\n `class Solution {`\\n`    public int lengthOfLastWord(String s) {`\\n`        int j=0;`\\n`        char[] ss=s.toCharArray();`\\n`        for (int i=ss.length-1;i<=0;i--) {`\\n`                if (ss[i]==\\' \\') {`\\n`                    continue;`\\n`                }`\\n`                while (ss[i]!=\\' \\') {`\\n`                    j++;`\\n`                    i--;`\\n`                }`\\n`                if(j>0) {`\\n`                    break;`\\n`                }`\\n`        }`\\n`        return j;`\\n`    }`\\n`}`"
                    },
                    {
                        "username": "dworkinfromchaos",
                        "content": "The One Piece Is Real :)"
                    },
                    {
                        "username": "tejasbhoyar19",
                        "content": "wow, i certainly didn\\'t expect to get a Brawl Stars reference while solving a freaking leetcode problem,lol."
                    },
                    {
                        "username": "rishabh_101",
                        "content": "Tip : Use Single Quote operator to compare a empty space instead of double space. "
                    }
                ]
            },
            {
                "id": 1989036,
                "content": [
                    {
                        "username": "ravithemorree",
                        "content": "Simple Count the last word length"
                    },
                    {
                        "username": "Jahongir_Doniyarov",
                        "content": "var lengthOfLastWord = function(s) {\\n    let String = s.trim()\\n    let newString = String.split(\\' \\')\\n    let lastWords  = newString.length - 1\\n    return (newString[lastWords].length)\\n};"
                    },
                    {
                        "username": "HaifonixHDx",
                        "content": "Report the spoiler "
                    },
                    {
                        "username": "vaibhav2112",
                        "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i = s.length()-1;\\n        while(s[i] == \\' \\'){\\n            i--;\\n        }\\n\\n        int ans = 0;\\n        while(i >= 0 && s[i] != \\' \\'){\\n            i--;\\n            ans++;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "This problem is excellent for practicing basic string manipulation and traversal techniques, including working with substrings and understanding string indices."
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question is easy and can be done with the help of string functions"
                    },
                    {
                        "username": "yajasarora",
                        "content": "below is my code and it\\'s NOT WORKING!!\\ncan anyone help me with whats the issue here?\\n\\n `class Solution {`\\n`    public int lengthOfLastWord(String s) {`\\n`        int j=0;`\\n`        char[] ss=s.toCharArray();`\\n`        for (int i=ss.length-1;i<=0;i--) {`\\n`                if (ss[i]==\\' \\') {`\\n`                    continue;`\\n`                }`\\n`                while (ss[i]!=\\' \\') {`\\n`                    j++;`\\n`                    i--;`\\n`                }`\\n`                if(j>0) {`\\n`                    break;`\\n`                }`\\n`        }`\\n`        return j;`\\n`    }`\\n`}`"
                    },
                    {
                        "username": "dworkinfromchaos",
                        "content": "The One Piece Is Real :)"
                    },
                    {
                        "username": "tejasbhoyar19",
                        "content": "wow, i certainly didn\\'t expect to get a Brawl Stars reference while solving a freaking leetcode problem,lol."
                    },
                    {
                        "username": "rishabh_101",
                        "content": "Tip : Use Single Quote operator to compare a empty space instead of double space. "
                    }
                ]
            },
            {
                "id": 1984304,
                "content": [
                    {
                        "username": "ravithemorree",
                        "content": "Simple Count the last word length"
                    },
                    {
                        "username": "Jahongir_Doniyarov",
                        "content": "var lengthOfLastWord = function(s) {\\n    let String = s.trim()\\n    let newString = String.split(\\' \\')\\n    let lastWords  = newString.length - 1\\n    return (newString[lastWords].length)\\n};"
                    },
                    {
                        "username": "HaifonixHDx",
                        "content": "Report the spoiler "
                    },
                    {
                        "username": "vaibhav2112",
                        "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i = s.length()-1;\\n        while(s[i] == \\' \\'){\\n            i--;\\n        }\\n\\n        int ans = 0;\\n        while(i >= 0 && s[i] != \\' \\'){\\n            i--;\\n            ans++;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "This problem is excellent for practicing basic string manipulation and traversal techniques, including working with substrings and understanding string indices."
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question is easy and can be done with the help of string functions"
                    },
                    {
                        "username": "yajasarora",
                        "content": "below is my code and it\\'s NOT WORKING!!\\ncan anyone help me with whats the issue here?\\n\\n `class Solution {`\\n`    public int lengthOfLastWord(String s) {`\\n`        int j=0;`\\n`        char[] ss=s.toCharArray();`\\n`        for (int i=ss.length-1;i<=0;i--) {`\\n`                if (ss[i]==\\' \\') {`\\n`                    continue;`\\n`                }`\\n`                while (ss[i]!=\\' \\') {`\\n`                    j++;`\\n`                    i--;`\\n`                }`\\n`                if(j>0) {`\\n`                    break;`\\n`                }`\\n`        }`\\n`        return j;`\\n`    }`\\n`}`"
                    },
                    {
                        "username": "dworkinfromchaos",
                        "content": "The One Piece Is Real :)"
                    },
                    {
                        "username": "tejasbhoyar19",
                        "content": "wow, i certainly didn\\'t expect to get a Brawl Stars reference while solving a freaking leetcode problem,lol."
                    },
                    {
                        "username": "rishabh_101",
                        "content": "Tip : Use Single Quote operator to compare a empty space instead of double space. "
                    }
                ]
            },
            {
                "id": 1980834,
                "content": [
                    {
                        "username": "ravithemorree",
                        "content": "Simple Count the last word length"
                    },
                    {
                        "username": "Jahongir_Doniyarov",
                        "content": "var lengthOfLastWord = function(s) {\\n    let String = s.trim()\\n    let newString = String.split(\\' \\')\\n    let lastWords  = newString.length - 1\\n    return (newString[lastWords].length)\\n};"
                    },
                    {
                        "username": "HaifonixHDx",
                        "content": "Report the spoiler "
                    },
                    {
                        "username": "vaibhav2112",
                        "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i = s.length()-1;\\n        while(s[i] == \\' \\'){\\n            i--;\\n        }\\n\\n        int ans = 0;\\n        while(i >= 0 && s[i] != \\' \\'){\\n            i--;\\n            ans++;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "This problem is excellent for practicing basic string manipulation and traversal techniques, including working with substrings and understanding string indices."
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question is easy and can be done with the help of string functions"
                    },
                    {
                        "username": "yajasarora",
                        "content": "below is my code and it\\'s NOT WORKING!!\\ncan anyone help me with whats the issue here?\\n\\n `class Solution {`\\n`    public int lengthOfLastWord(String s) {`\\n`        int j=0;`\\n`        char[] ss=s.toCharArray();`\\n`        for (int i=ss.length-1;i<=0;i--) {`\\n`                if (ss[i]==\\' \\') {`\\n`                    continue;`\\n`                }`\\n`                while (ss[i]!=\\' \\') {`\\n`                    j++;`\\n`                    i--;`\\n`                }`\\n`                if(j>0) {`\\n`                    break;`\\n`                }`\\n`        }`\\n`        return j;`\\n`    }`\\n`}`"
                    },
                    {
                        "username": "dworkinfromchaos",
                        "content": "The One Piece Is Real :)"
                    },
                    {
                        "username": "tejasbhoyar19",
                        "content": "wow, i certainly didn\\'t expect to get a Brawl Stars reference while solving a freaking leetcode problem,lol."
                    },
                    {
                        "username": "rishabh_101",
                        "content": "Tip : Use Single Quote operator to compare a empty space instead of double space. "
                    }
                ]
            },
            {
                "id": 1979754,
                "content": [
                    {
                        "username": "ravithemorree",
                        "content": "Simple Count the last word length"
                    },
                    {
                        "username": "Jahongir_Doniyarov",
                        "content": "var lengthOfLastWord = function(s) {\\n    let String = s.trim()\\n    let newString = String.split(\\' \\')\\n    let lastWords  = newString.length - 1\\n    return (newString[lastWords].length)\\n};"
                    },
                    {
                        "username": "HaifonixHDx",
                        "content": "Report the spoiler "
                    },
                    {
                        "username": "vaibhav2112",
                        "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i = s.length()-1;\\n        while(s[i] == \\' \\'){\\n            i--;\\n        }\\n\\n        int ans = 0;\\n        while(i >= 0 && s[i] != \\' \\'){\\n            i--;\\n            ans++;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "This problem is excellent for practicing basic string manipulation and traversal techniques, including working with substrings and understanding string indices."
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question is easy and can be done with the help of string functions"
                    },
                    {
                        "username": "yajasarora",
                        "content": "below is my code and it\\'s NOT WORKING!!\\ncan anyone help me with whats the issue here?\\n\\n `class Solution {`\\n`    public int lengthOfLastWord(String s) {`\\n`        int j=0;`\\n`        char[] ss=s.toCharArray();`\\n`        for (int i=ss.length-1;i<=0;i--) {`\\n`                if (ss[i]==\\' \\') {`\\n`                    continue;`\\n`                }`\\n`                while (ss[i]!=\\' \\') {`\\n`                    j++;`\\n`                    i--;`\\n`                }`\\n`                if(j>0) {`\\n`                    break;`\\n`                }`\\n`        }`\\n`        return j;`\\n`    }`\\n`}`"
                    },
                    {
                        "username": "dworkinfromchaos",
                        "content": "The One Piece Is Real :)"
                    },
                    {
                        "username": "tejasbhoyar19",
                        "content": "wow, i certainly didn\\'t expect to get a Brawl Stars reference while solving a freaking leetcode problem,lol."
                    },
                    {
                        "username": "rishabh_101",
                        "content": "Tip : Use Single Quote operator to compare a empty space instead of double space. "
                    }
                ]
            },
            {
                "id": 1979554,
                "content": [
                    {
                        "username": "shubhamparad19",
                        "content": "Just few days to go guys on 6th of August this leetcode string will return as true"
                    },
                    {
                        "username": "mihirbhatkar",
                        "content": "Abey chutiye One Piece ka hi spoiler dena tha kya"
                    },
                    {
                        "username": "hendraeffendi96",
                        "content": "i have a question how long is this problem has the spoiler test case?"
                    },
                    {
                        "username": "pierreharbin",
                        "content": "Getting spoiled by LeetCode is crazy lolol"
                    },
                    {
                        "username": "belepod",
                        "content": "convet string to array, convert last element of array to character array. use for loop and \"str.chatAt\", then return the length of character array"
                    },
                    {
                        "username": "belepod",
                        "content": "heyyy, thats major spoiler right there."
                    },
                    {
                        "username": "LoganWhite26",
                        "content": "THE ONE PIECE IS REAL! while loop until the last item in list isn\\'t empty."
                    },
                    {
                        "username": "abhishek2124",
                        "content": "why this code is not working \\nint c=0;\\nfor(int i=s.size()-1;i>=0;i--){\\n    if(s[i] != \\' \\') c++;\\n}\\nreturn c;\\n\\nwhereas this is working\\nint count = 0;\\n    int i = s.length() - 1;\\n    while (i >= 0 && s[i] == \\' \\') i--;\\n    while (i >= 0 && s[i] != \\' \\') count++, i--;\\n    \\n    return count;"
                    },
                    {
                        "username": "Kromydas",
                        "content": "Pretty sure the difference is that one of them (namely the first one) has only one loop, while the second one as 2 loops. Note that the second while loop in the second code is different that the first while loop. The `s[i] != \\' \\'` and `s[i] == \\' \\'`are different."
                    },
                    {
                        "username": "sevanix",
                        "content": "I created a solution with function int , not class. "
                    },
                    {
                        "username": "pimping_Jeep03",
                        "content": "Hello, I am a beginner and I can\\'t seem to figure out where im going wrong. I would appreciate any help thank you in advance. \\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n    String s = \"luffy is still joyboy\";\\n    int lenghtOfLastWord = 0;\\n    String[] words = s.split(\" \");\\n    if (words.lenght>0)\\n    {\\n        lenghtOfLastWord = words[words-1].lenght();\\n    }    \\n    else \\n    {\\n        lenghtOfLastWord=0;\\n    }\\n    return lenghtOfLastWord;\\n    }\\n}"
                    },
                    {
                        "username": "Kromydas",
                        "content": "you don't need to redefine string s, it is given. When you do, your code only considers the case \"luffy is still joyboy\". \n\nAlso, is this code python or c++ or some other language? It does not look like python, as you are defining strings. It looks like c++ based off of the top of your code. If it is c++, the public int part should be `public: int lengthOfLastWord(string s) {` \n\nAlso, when defining a `string`, you cannot do `String`. There also is no `split()` function that I know of in c++. This is a python function. (That I know of). when using `words.lenght`, you forgot the `()` as well as spelled \"length\" wrong. You do this further on in the if statement. as well. I don't see anything else wrong with your code (other than the logic of using split being wrong). \n\nAnd another thing, you can't do `words[words - 1]`. `words` is an array. You can't subtract a number from it. "
                    }
                ]
            },
            {
                "id": 1969745,
                "content": [
                    {
                        "username": "shubhamparad19",
                        "content": "Just few days to go guys on 6th of August this leetcode string will return as true"
                    },
                    {
                        "username": "mihirbhatkar",
                        "content": "Abey chutiye One Piece ka hi spoiler dena tha kya"
                    },
                    {
                        "username": "hendraeffendi96",
                        "content": "i have a question how long is this problem has the spoiler test case?"
                    },
                    {
                        "username": "pierreharbin",
                        "content": "Getting spoiled by LeetCode is crazy lolol"
                    },
                    {
                        "username": "belepod",
                        "content": "convet string to array, convert last element of array to character array. use for loop and \"str.chatAt\", then return the length of character array"
                    },
                    {
                        "username": "belepod",
                        "content": "heyyy, thats major spoiler right there."
                    },
                    {
                        "username": "LoganWhite26",
                        "content": "THE ONE PIECE IS REAL! while loop until the last item in list isn\\'t empty."
                    },
                    {
                        "username": "abhishek2124",
                        "content": "why this code is not working \\nint c=0;\\nfor(int i=s.size()-1;i>=0;i--){\\n    if(s[i] != \\' \\') c++;\\n}\\nreturn c;\\n\\nwhereas this is working\\nint count = 0;\\n    int i = s.length() - 1;\\n    while (i >= 0 && s[i] == \\' \\') i--;\\n    while (i >= 0 && s[i] != \\' \\') count++, i--;\\n    \\n    return count;"
                    },
                    {
                        "username": "Kromydas",
                        "content": "Pretty sure the difference is that one of them (namely the first one) has only one loop, while the second one as 2 loops. Note that the second while loop in the second code is different that the first while loop. The `s[i] != \\' \\'` and `s[i] == \\' \\'`are different."
                    },
                    {
                        "username": "sevanix",
                        "content": "I created a solution with function int , not class. "
                    },
                    {
                        "username": "pimping_Jeep03",
                        "content": "Hello, I am a beginner and I can\\'t seem to figure out where im going wrong. I would appreciate any help thank you in advance. \\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n    String s = \"luffy is still joyboy\";\\n    int lenghtOfLastWord = 0;\\n    String[] words = s.split(\" \");\\n    if (words.lenght>0)\\n    {\\n        lenghtOfLastWord = words[words-1].lenght();\\n    }    \\n    else \\n    {\\n        lenghtOfLastWord=0;\\n    }\\n    return lenghtOfLastWord;\\n    }\\n}"
                    },
                    {
                        "username": "Kromydas",
                        "content": "you don't need to redefine string s, it is given. When you do, your code only considers the case \"luffy is still joyboy\". \n\nAlso, is this code python or c++ or some other language? It does not look like python, as you are defining strings. It looks like c++ based off of the top of your code. If it is c++, the public int part should be `public: int lengthOfLastWord(string s) {` \n\nAlso, when defining a `string`, you cannot do `String`. There also is no `split()` function that I know of in c++. This is a python function. (That I know of). when using `words.lenght`, you forgot the `()` as well as spelled \"length\" wrong. You do this further on in the if statement. as well. I don't see anything else wrong with your code (other than the logic of using split being wrong). \n\nAnd another thing, you can't do `words[words - 1]`. `words` is an array. You can't subtract a number from it. "
                    }
                ]
            },
            {
                "id": 1950302,
                "content": [
                    {
                        "username": "shubhamparad19",
                        "content": "Just few days to go guys on 6th of August this leetcode string will return as true"
                    },
                    {
                        "username": "mihirbhatkar",
                        "content": "Abey chutiye One Piece ka hi spoiler dena tha kya"
                    },
                    {
                        "username": "hendraeffendi96",
                        "content": "i have a question how long is this problem has the spoiler test case?"
                    },
                    {
                        "username": "pierreharbin",
                        "content": "Getting spoiled by LeetCode is crazy lolol"
                    },
                    {
                        "username": "belepod",
                        "content": "convet string to array, convert last element of array to character array. use for loop and \"str.chatAt\", then return the length of character array"
                    },
                    {
                        "username": "belepod",
                        "content": "heyyy, thats major spoiler right there."
                    },
                    {
                        "username": "LoganWhite26",
                        "content": "THE ONE PIECE IS REAL! while loop until the last item in list isn\\'t empty."
                    },
                    {
                        "username": "abhishek2124",
                        "content": "why this code is not working \\nint c=0;\\nfor(int i=s.size()-1;i>=0;i--){\\n    if(s[i] != \\' \\') c++;\\n}\\nreturn c;\\n\\nwhereas this is working\\nint count = 0;\\n    int i = s.length() - 1;\\n    while (i >= 0 && s[i] == \\' \\') i--;\\n    while (i >= 0 && s[i] != \\' \\') count++, i--;\\n    \\n    return count;"
                    },
                    {
                        "username": "Kromydas",
                        "content": "Pretty sure the difference is that one of them (namely the first one) has only one loop, while the second one as 2 loops. Note that the second while loop in the second code is different that the first while loop. The `s[i] != \\' \\'` and `s[i] == \\' \\'`are different."
                    },
                    {
                        "username": "sevanix",
                        "content": "I created a solution with function int , not class. "
                    },
                    {
                        "username": "pimping_Jeep03",
                        "content": "Hello, I am a beginner and I can\\'t seem to figure out where im going wrong. I would appreciate any help thank you in advance. \\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n    String s = \"luffy is still joyboy\";\\n    int lenghtOfLastWord = 0;\\n    String[] words = s.split(\" \");\\n    if (words.lenght>0)\\n    {\\n        lenghtOfLastWord = words[words-1].lenght();\\n    }    \\n    else \\n    {\\n        lenghtOfLastWord=0;\\n    }\\n    return lenghtOfLastWord;\\n    }\\n}"
                    },
                    {
                        "username": "Kromydas",
                        "content": "you don't need to redefine string s, it is given. When you do, your code only considers the case \"luffy is still joyboy\". \n\nAlso, is this code python or c++ or some other language? It does not look like python, as you are defining strings. It looks like c++ based off of the top of your code. If it is c++, the public int part should be `public: int lengthOfLastWord(string s) {` \n\nAlso, when defining a `string`, you cannot do `String`. There also is no `split()` function that I know of in c++. This is a python function. (That I know of). when using `words.lenght`, you forgot the `()` as well as spelled \"length\" wrong. You do this further on in the if statement. as well. I don't see anything else wrong with your code (other than the logic of using split being wrong). \n\nAnd another thing, you can't do `words[words - 1]`. `words` is an array. You can't subtract a number from it. "
                    }
                ]
            },
            {
                "id": 1947294,
                "content": [
                    {
                        "username": "shubhamparad19",
                        "content": "Just few days to go guys on 6th of August this leetcode string will return as true"
                    },
                    {
                        "username": "mihirbhatkar",
                        "content": "Abey chutiye One Piece ka hi spoiler dena tha kya"
                    },
                    {
                        "username": "hendraeffendi96",
                        "content": "i have a question how long is this problem has the spoiler test case?"
                    },
                    {
                        "username": "pierreharbin",
                        "content": "Getting spoiled by LeetCode is crazy lolol"
                    },
                    {
                        "username": "belepod",
                        "content": "convet string to array, convert last element of array to character array. use for loop and \"str.chatAt\", then return the length of character array"
                    },
                    {
                        "username": "belepod",
                        "content": "heyyy, thats major spoiler right there."
                    },
                    {
                        "username": "LoganWhite26",
                        "content": "THE ONE PIECE IS REAL! while loop until the last item in list isn\\'t empty."
                    },
                    {
                        "username": "abhishek2124",
                        "content": "why this code is not working \\nint c=0;\\nfor(int i=s.size()-1;i>=0;i--){\\n    if(s[i] != \\' \\') c++;\\n}\\nreturn c;\\n\\nwhereas this is working\\nint count = 0;\\n    int i = s.length() - 1;\\n    while (i >= 0 && s[i] == \\' \\') i--;\\n    while (i >= 0 && s[i] != \\' \\') count++, i--;\\n    \\n    return count;"
                    },
                    {
                        "username": "Kromydas",
                        "content": "Pretty sure the difference is that one of them (namely the first one) has only one loop, while the second one as 2 loops. Note that the second while loop in the second code is different that the first while loop. The `s[i] != \\' \\'` and `s[i] == \\' \\'`are different."
                    },
                    {
                        "username": "sevanix",
                        "content": "I created a solution with function int , not class. "
                    },
                    {
                        "username": "pimping_Jeep03",
                        "content": "Hello, I am a beginner and I can\\'t seem to figure out where im going wrong. I would appreciate any help thank you in advance. \\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n    String s = \"luffy is still joyboy\";\\n    int lenghtOfLastWord = 0;\\n    String[] words = s.split(\" \");\\n    if (words.lenght>0)\\n    {\\n        lenghtOfLastWord = words[words-1].lenght();\\n    }    \\n    else \\n    {\\n        lenghtOfLastWord=0;\\n    }\\n    return lenghtOfLastWord;\\n    }\\n}"
                    },
                    {
                        "username": "Kromydas",
                        "content": "you don't need to redefine string s, it is given. When you do, your code only considers the case \"luffy is still joyboy\". \n\nAlso, is this code python or c++ or some other language? It does not look like python, as you are defining strings. It looks like c++ based off of the top of your code. If it is c++, the public int part should be `public: int lengthOfLastWord(string s) {` \n\nAlso, when defining a `string`, you cannot do `String`. There also is no `split()` function that I know of in c++. This is a python function. (That I know of). when using `words.lenght`, you forgot the `()` as well as spelled \"length\" wrong. You do this further on in the if statement. as well. I don't see anything else wrong with your code (other than the logic of using split being wrong). \n\nAnd another thing, you can't do `words[words - 1]`. `words` is an array. You can't subtract a number from it. "
                    }
                ]
            },
            {
                "id": 1938922,
                "content": [
                    {
                        "username": "shubhamparad19",
                        "content": "Just few days to go guys on 6th of August this leetcode string will return as true"
                    },
                    {
                        "username": "mihirbhatkar",
                        "content": "Abey chutiye One Piece ka hi spoiler dena tha kya"
                    },
                    {
                        "username": "hendraeffendi96",
                        "content": "i have a question how long is this problem has the spoiler test case?"
                    },
                    {
                        "username": "pierreharbin",
                        "content": "Getting spoiled by LeetCode is crazy lolol"
                    },
                    {
                        "username": "belepod",
                        "content": "convet string to array, convert last element of array to character array. use for loop and \"str.chatAt\", then return the length of character array"
                    },
                    {
                        "username": "belepod",
                        "content": "heyyy, thats major spoiler right there."
                    },
                    {
                        "username": "LoganWhite26",
                        "content": "THE ONE PIECE IS REAL! while loop until the last item in list isn\\'t empty."
                    },
                    {
                        "username": "abhishek2124",
                        "content": "why this code is not working \\nint c=0;\\nfor(int i=s.size()-1;i>=0;i--){\\n    if(s[i] != \\' \\') c++;\\n}\\nreturn c;\\n\\nwhereas this is working\\nint count = 0;\\n    int i = s.length() - 1;\\n    while (i >= 0 && s[i] == \\' \\') i--;\\n    while (i >= 0 && s[i] != \\' \\') count++, i--;\\n    \\n    return count;"
                    },
                    {
                        "username": "Kromydas",
                        "content": "Pretty sure the difference is that one of them (namely the first one) has only one loop, while the second one as 2 loops. Note that the second while loop in the second code is different that the first while loop. The `s[i] != \\' \\'` and `s[i] == \\' \\'`are different."
                    },
                    {
                        "username": "sevanix",
                        "content": "I created a solution with function int , not class. "
                    },
                    {
                        "username": "pimping_Jeep03",
                        "content": "Hello, I am a beginner and I can\\'t seem to figure out where im going wrong. I would appreciate any help thank you in advance. \\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n    String s = \"luffy is still joyboy\";\\n    int lenghtOfLastWord = 0;\\n    String[] words = s.split(\" \");\\n    if (words.lenght>0)\\n    {\\n        lenghtOfLastWord = words[words-1].lenght();\\n    }    \\n    else \\n    {\\n        lenghtOfLastWord=0;\\n    }\\n    return lenghtOfLastWord;\\n    }\\n}"
                    },
                    {
                        "username": "Kromydas",
                        "content": "you don't need to redefine string s, it is given. When you do, your code only considers the case \"luffy is still joyboy\". \n\nAlso, is this code python or c++ or some other language? It does not look like python, as you are defining strings. It looks like c++ based off of the top of your code. If it is c++, the public int part should be `public: int lengthOfLastWord(string s) {` \n\nAlso, when defining a `string`, you cannot do `String`. There also is no `split()` function that I know of in c++. This is a python function. (That I know of). when using `words.lenght`, you forgot the `()` as well as spelled \"length\" wrong. You do this further on in the if statement. as well. I don't see anything else wrong with your code (other than the logic of using split being wrong). \n\nAnd another thing, you can't do `words[words - 1]`. `words` is an array. You can't subtract a number from it. "
                    }
                ]
            },
            {
                "id": 1938885,
                "content": [
                    {
                        "username": "shubhamparad19",
                        "content": "Just few days to go guys on 6th of August this leetcode string will return as true"
                    },
                    {
                        "username": "mihirbhatkar",
                        "content": "Abey chutiye One Piece ka hi spoiler dena tha kya"
                    },
                    {
                        "username": "hendraeffendi96",
                        "content": "i have a question how long is this problem has the spoiler test case?"
                    },
                    {
                        "username": "pierreharbin",
                        "content": "Getting spoiled by LeetCode is crazy lolol"
                    },
                    {
                        "username": "belepod",
                        "content": "convet string to array, convert last element of array to character array. use for loop and \"str.chatAt\", then return the length of character array"
                    },
                    {
                        "username": "belepod",
                        "content": "heyyy, thats major spoiler right there."
                    },
                    {
                        "username": "LoganWhite26",
                        "content": "THE ONE PIECE IS REAL! while loop until the last item in list isn\\'t empty."
                    },
                    {
                        "username": "abhishek2124",
                        "content": "why this code is not working \\nint c=0;\\nfor(int i=s.size()-1;i>=0;i--){\\n    if(s[i] != \\' \\') c++;\\n}\\nreturn c;\\n\\nwhereas this is working\\nint count = 0;\\n    int i = s.length() - 1;\\n    while (i >= 0 && s[i] == \\' \\') i--;\\n    while (i >= 0 && s[i] != \\' \\') count++, i--;\\n    \\n    return count;"
                    },
                    {
                        "username": "Kromydas",
                        "content": "Pretty sure the difference is that one of them (namely the first one) has only one loop, while the second one as 2 loops. Note that the second while loop in the second code is different that the first while loop. The `s[i] != \\' \\'` and `s[i] == \\' \\'`are different."
                    },
                    {
                        "username": "sevanix",
                        "content": "I created a solution with function int , not class. "
                    },
                    {
                        "username": "pimping_Jeep03",
                        "content": "Hello, I am a beginner and I can\\'t seem to figure out where im going wrong. I would appreciate any help thank you in advance. \\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n    String s = \"luffy is still joyboy\";\\n    int lenghtOfLastWord = 0;\\n    String[] words = s.split(\" \");\\n    if (words.lenght>0)\\n    {\\n        lenghtOfLastWord = words[words-1].lenght();\\n    }    \\n    else \\n    {\\n        lenghtOfLastWord=0;\\n    }\\n    return lenghtOfLastWord;\\n    }\\n}"
                    },
                    {
                        "username": "Kromydas",
                        "content": "you don't need to redefine string s, it is given. When you do, your code only considers the case \"luffy is still joyboy\". \n\nAlso, is this code python or c++ or some other language? It does not look like python, as you are defining strings. It looks like c++ based off of the top of your code. If it is c++, the public int part should be `public: int lengthOfLastWord(string s) {` \n\nAlso, when defining a `string`, you cannot do `String`. There also is no `split()` function that I know of in c++. This is a python function. (That I know of). when using `words.lenght`, you forgot the `()` as well as spelled \"length\" wrong. You do this further on in the if statement. as well. I don't see anything else wrong with your code (other than the logic of using split being wrong). \n\nAnd another thing, you can't do `words[words - 1]`. `words` is an array. You can't subtract a number from it. "
                    }
                ]
            },
            {
                "id": 1920721,
                "content": [
                    {
                        "username": "shubhamparad19",
                        "content": "Just few days to go guys on 6th of August this leetcode string will return as true"
                    },
                    {
                        "username": "mihirbhatkar",
                        "content": "Abey chutiye One Piece ka hi spoiler dena tha kya"
                    },
                    {
                        "username": "hendraeffendi96",
                        "content": "i have a question how long is this problem has the spoiler test case?"
                    },
                    {
                        "username": "pierreharbin",
                        "content": "Getting spoiled by LeetCode is crazy lolol"
                    },
                    {
                        "username": "belepod",
                        "content": "convet string to array, convert last element of array to character array. use for loop and \"str.chatAt\", then return the length of character array"
                    },
                    {
                        "username": "belepod",
                        "content": "heyyy, thats major spoiler right there."
                    },
                    {
                        "username": "LoganWhite26",
                        "content": "THE ONE PIECE IS REAL! while loop until the last item in list isn\\'t empty."
                    },
                    {
                        "username": "abhishek2124",
                        "content": "why this code is not working \\nint c=0;\\nfor(int i=s.size()-1;i>=0;i--){\\n    if(s[i] != \\' \\') c++;\\n}\\nreturn c;\\n\\nwhereas this is working\\nint count = 0;\\n    int i = s.length() - 1;\\n    while (i >= 0 && s[i] == \\' \\') i--;\\n    while (i >= 0 && s[i] != \\' \\') count++, i--;\\n    \\n    return count;"
                    },
                    {
                        "username": "Kromydas",
                        "content": "Pretty sure the difference is that one of them (namely the first one) has only one loop, while the second one as 2 loops. Note that the second while loop in the second code is different that the first while loop. The `s[i] != \\' \\'` and `s[i] == \\' \\'`are different."
                    },
                    {
                        "username": "sevanix",
                        "content": "I created a solution with function int , not class. "
                    },
                    {
                        "username": "pimping_Jeep03",
                        "content": "Hello, I am a beginner and I can\\'t seem to figure out where im going wrong. I would appreciate any help thank you in advance. \\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n    String s = \"luffy is still joyboy\";\\n    int lenghtOfLastWord = 0;\\n    String[] words = s.split(\" \");\\n    if (words.lenght>0)\\n    {\\n        lenghtOfLastWord = words[words-1].lenght();\\n    }    \\n    else \\n    {\\n        lenghtOfLastWord=0;\\n    }\\n    return lenghtOfLastWord;\\n    }\\n}"
                    },
                    {
                        "username": "Kromydas",
                        "content": "you don't need to redefine string s, it is given. When you do, your code only considers the case \"luffy is still joyboy\". \n\nAlso, is this code python or c++ or some other language? It does not look like python, as you are defining strings. It looks like c++ based off of the top of your code. If it is c++, the public int part should be `public: int lengthOfLastWord(string s) {` \n\nAlso, when defining a `string`, you cannot do `String`. There also is no `split()` function that I know of in c++. This is a python function. (That I know of). when using `words.lenght`, you forgot the `()` as well as spelled \"length\" wrong. You do this further on in the if statement. as well. I don't see anything else wrong with your code (other than the logic of using split being wrong). \n\nAnd another thing, you can't do `words[words - 1]`. `words` is an array. You can't subtract a number from it. "
                    }
                ]
            },
            {
                "id": 1920449,
                "content": [
                    {
                        "username": "shubhamparad19",
                        "content": "Just few days to go guys on 6th of August this leetcode string will return as true"
                    },
                    {
                        "username": "mihirbhatkar",
                        "content": "Abey chutiye One Piece ka hi spoiler dena tha kya"
                    },
                    {
                        "username": "hendraeffendi96",
                        "content": "i have a question how long is this problem has the spoiler test case?"
                    },
                    {
                        "username": "pierreharbin",
                        "content": "Getting spoiled by LeetCode is crazy lolol"
                    },
                    {
                        "username": "belepod",
                        "content": "convet string to array, convert last element of array to character array. use for loop and \"str.chatAt\", then return the length of character array"
                    },
                    {
                        "username": "belepod",
                        "content": "heyyy, thats major spoiler right there."
                    },
                    {
                        "username": "LoganWhite26",
                        "content": "THE ONE PIECE IS REAL! while loop until the last item in list isn\\'t empty."
                    },
                    {
                        "username": "abhishek2124",
                        "content": "why this code is not working \\nint c=0;\\nfor(int i=s.size()-1;i>=0;i--){\\n    if(s[i] != \\' \\') c++;\\n}\\nreturn c;\\n\\nwhereas this is working\\nint count = 0;\\n    int i = s.length() - 1;\\n    while (i >= 0 && s[i] == \\' \\') i--;\\n    while (i >= 0 && s[i] != \\' \\') count++, i--;\\n    \\n    return count;"
                    },
                    {
                        "username": "Kromydas",
                        "content": "Pretty sure the difference is that one of them (namely the first one) has only one loop, while the second one as 2 loops. Note that the second while loop in the second code is different that the first while loop. The `s[i] != \\' \\'` and `s[i] == \\' \\'`are different."
                    },
                    {
                        "username": "sevanix",
                        "content": "I created a solution with function int , not class. "
                    },
                    {
                        "username": "pimping_Jeep03",
                        "content": "Hello, I am a beginner and I can\\'t seem to figure out where im going wrong. I would appreciate any help thank you in advance. \\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n    String s = \"luffy is still joyboy\";\\n    int lenghtOfLastWord = 0;\\n    String[] words = s.split(\" \");\\n    if (words.lenght>0)\\n    {\\n        lenghtOfLastWord = words[words-1].lenght();\\n    }    \\n    else \\n    {\\n        lenghtOfLastWord=0;\\n    }\\n    return lenghtOfLastWord;\\n    }\\n}"
                    },
                    {
                        "username": "Kromydas",
                        "content": "you don't need to redefine string s, it is given. When you do, your code only considers the case \"luffy is still joyboy\". \n\nAlso, is this code python or c++ or some other language? It does not look like python, as you are defining strings. It looks like c++ based off of the top of your code. If it is c++, the public int part should be `public: int lengthOfLastWord(string s) {` \n\nAlso, when defining a `string`, you cannot do `String`. There also is no `split()` function that I know of in c++. This is a python function. (That I know of). when using `words.lenght`, you forgot the `()` as well as spelled \"length\" wrong. You do this further on in the if statement. as well. I don't see anything else wrong with your code (other than the logic of using split being wrong). \n\nAnd another thing, you can't do `words[words - 1]`. `words` is an array. You can't subtract a number from it. "
                    }
                ]
            },
            {
                "id": 1919233,
                "content": [
                    {
                        "username": "shubhamparad19",
                        "content": "Just few days to go guys on 6th of August this leetcode string will return as true"
                    },
                    {
                        "username": "mihirbhatkar",
                        "content": "Abey chutiye One Piece ka hi spoiler dena tha kya"
                    },
                    {
                        "username": "hendraeffendi96",
                        "content": "i have a question how long is this problem has the spoiler test case?"
                    },
                    {
                        "username": "pierreharbin",
                        "content": "Getting spoiled by LeetCode is crazy lolol"
                    },
                    {
                        "username": "belepod",
                        "content": "convet string to array, convert last element of array to character array. use for loop and \"str.chatAt\", then return the length of character array"
                    },
                    {
                        "username": "belepod",
                        "content": "heyyy, thats major spoiler right there."
                    },
                    {
                        "username": "LoganWhite26",
                        "content": "THE ONE PIECE IS REAL! while loop until the last item in list isn\\'t empty."
                    },
                    {
                        "username": "abhishek2124",
                        "content": "why this code is not working \\nint c=0;\\nfor(int i=s.size()-1;i>=0;i--){\\n    if(s[i] != \\' \\') c++;\\n}\\nreturn c;\\n\\nwhereas this is working\\nint count = 0;\\n    int i = s.length() - 1;\\n    while (i >= 0 && s[i] == \\' \\') i--;\\n    while (i >= 0 && s[i] != \\' \\') count++, i--;\\n    \\n    return count;"
                    },
                    {
                        "username": "Kromydas",
                        "content": "Pretty sure the difference is that one of them (namely the first one) has only one loop, while the second one as 2 loops. Note that the second while loop in the second code is different that the first while loop. The `s[i] != \\' \\'` and `s[i] == \\' \\'`are different."
                    },
                    {
                        "username": "sevanix",
                        "content": "I created a solution with function int , not class. "
                    },
                    {
                        "username": "pimping_Jeep03",
                        "content": "Hello, I am a beginner and I can\\'t seem to figure out where im going wrong. I would appreciate any help thank you in advance. \\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n    String s = \"luffy is still joyboy\";\\n    int lenghtOfLastWord = 0;\\n    String[] words = s.split(\" \");\\n    if (words.lenght>0)\\n    {\\n        lenghtOfLastWord = words[words-1].lenght();\\n    }    \\n    else \\n    {\\n        lenghtOfLastWord=0;\\n    }\\n    return lenghtOfLastWord;\\n    }\\n}"
                    },
                    {
                        "username": "Kromydas",
                        "content": "you don't need to redefine string s, it is given. When you do, your code only considers the case \"luffy is still joyboy\". \n\nAlso, is this code python or c++ or some other language? It does not look like python, as you are defining strings. It looks like c++ based off of the top of your code. If it is c++, the public int part should be `public: int lengthOfLastWord(string s) {` \n\nAlso, when defining a `string`, you cannot do `String`. There also is no `split()` function that I know of in c++. This is a python function. (That I know of). when using `words.lenght`, you forgot the `()` as well as spelled \"length\" wrong. You do this further on in the if statement. as well. I don't see anything else wrong with your code (other than the logic of using split being wrong). \n\nAnd another thing, you can't do `words[words - 1]`. `words` is an array. You can't subtract a number from it. "
                    }
                ]
            },
            {
                "id": 1904447,
                "content": [
                    {
                        "username": "shubhamparad19",
                        "content": "Just few days to go guys on 6th of August this leetcode string will return as true"
                    },
                    {
                        "username": "mihirbhatkar",
                        "content": "Abey chutiye One Piece ka hi spoiler dena tha kya"
                    },
                    {
                        "username": "hendraeffendi96",
                        "content": "i have a question how long is this problem has the spoiler test case?"
                    },
                    {
                        "username": "pierreharbin",
                        "content": "Getting spoiled by LeetCode is crazy lolol"
                    },
                    {
                        "username": "belepod",
                        "content": "convet string to array, convert last element of array to character array. use for loop and \"str.chatAt\", then return the length of character array"
                    },
                    {
                        "username": "belepod",
                        "content": "heyyy, thats major spoiler right there."
                    },
                    {
                        "username": "LoganWhite26",
                        "content": "THE ONE PIECE IS REAL! while loop until the last item in list isn\\'t empty."
                    },
                    {
                        "username": "abhishek2124",
                        "content": "why this code is not working \\nint c=0;\\nfor(int i=s.size()-1;i>=0;i--){\\n    if(s[i] != \\' \\') c++;\\n}\\nreturn c;\\n\\nwhereas this is working\\nint count = 0;\\n    int i = s.length() - 1;\\n    while (i >= 0 && s[i] == \\' \\') i--;\\n    while (i >= 0 && s[i] != \\' \\') count++, i--;\\n    \\n    return count;"
                    },
                    {
                        "username": "Kromydas",
                        "content": "Pretty sure the difference is that one of them (namely the first one) has only one loop, while the second one as 2 loops. Note that the second while loop in the second code is different that the first while loop. The `s[i] != \\' \\'` and `s[i] == \\' \\'`are different."
                    },
                    {
                        "username": "sevanix",
                        "content": "I created a solution with function int , not class. "
                    },
                    {
                        "username": "pimping_Jeep03",
                        "content": "Hello, I am a beginner and I can\\'t seem to figure out where im going wrong. I would appreciate any help thank you in advance. \\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n    String s = \"luffy is still joyboy\";\\n    int lenghtOfLastWord = 0;\\n    String[] words = s.split(\" \");\\n    if (words.lenght>0)\\n    {\\n        lenghtOfLastWord = words[words-1].lenght();\\n    }    \\n    else \\n    {\\n        lenghtOfLastWord=0;\\n    }\\n    return lenghtOfLastWord;\\n    }\\n}"
                    },
                    {
                        "username": "Kromydas",
                        "content": "you don't need to redefine string s, it is given. When you do, your code only considers the case \"luffy is still joyboy\". \n\nAlso, is this code python or c++ or some other language? It does not look like python, as you are defining strings. It looks like c++ based off of the top of your code. If it is c++, the public int part should be `public: int lengthOfLastWord(string s) {` \n\nAlso, when defining a `string`, you cannot do `String`. There also is no `split()` function that I know of in c++. This is a python function. (That I know of). when using `words.lenght`, you forgot the `()` as well as spelled \"length\" wrong. You do this further on in the if statement. as well. I don't see anything else wrong with your code (other than the logic of using split being wrong). \n\nAnd another thing, you can't do `words[words - 1]`. `words` is an array. You can't subtract a number from it. "
                    }
                ]
            },
            {
                "id": 1900049,
                "content": [
                    {
                        "username": "learningstuffs513",
                        "content": "Should have been a bit harder by considering \\\\r \\\\t \\\\n as well"
                    },
                    {
                        "username": "ylee078",
                        "content": "what the actual f*ck. DONT SPOIL ONE PIECE"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Hi All,\n\nPlease check the below working code and do suggest how I can improve this,\n\nclass Solution {\n    public int lengthOfLastWord(String s) {\n     String[] str=s.trim().split(\"\\\\s+\");\n     //System.out.println(str.length+\" \"+str[1]);\n     //int i=str.length-1;\n     String ss=str[str.length-1];\n     int stringLength = ss.replace(\" \", \"\").length();\n     return stringLength;\n    }\n} "
                    },
                    {
                        "username": "MenaiAla",
                        "content": "Why this code don\\'t pass the case of `s=\\'a\\'`?\\n\\n```\\n\\n    let count = 0\\n    let i = s.length - 1\\n    while (i >= 0 && s[i] === \" \") {\\n        i--\\n    }\\n\\n    for (let j = i; j >= 0; j--) {\\n        let e = s[j]\\n        if (e !== \" \") {\\n            count = count + 1\\n        } else {\\n            return count\\n        }\\n    }\\n\\n```"
                    },
                    {
                        "username": "PentaMa",
                        "content": "We need something that is slightly more complex even for the \"Easy\" difficulties because a multitude of the programming languages allows for easy string split (strtok() in C/C++, String.split() in Java, str.split() in Python, string.Split() in C#, etc.) \\n\\nIf you really wants us to think about the algorithm, then scan the submissions, and fail those who use the \"split\" kind methods"
                    },
                    {
                        "username": "treejumperfinny",
                        "content": "LOL The One Piece reference. Nice."
                    },
                    {
                        "username": "googglob",
                        "content": "C# -  `return s.Trim().Split(new char[] { ' ' }).Last().Length;.`"
                    },
                    {
                        "username": "ryde6",
                        "content": "How do I fix this? Char 5: error: expected member name or \\';\\' after declaration specifiers  while (i<=len) {\\n\\nThis is my code:\\nwhile (i<=len) {\\n        if (count != 0){\\n            if (s[len-i] != \" \")\\n                count++;\\n            else\\n                break;\\n        }\\n        i++;\\n    }"
                    },
                    {
                        "username": "codeguy186",
                        "content": "Who expected One Piece spoilers in a sample testcase?"
                    },
                    {
                        "username": "devanshhexe",
                        "content": "sauce "
                    }
                ]
            },
            {
                "id": 1899753,
                "content": [
                    {
                        "username": "learningstuffs513",
                        "content": "Should have been a bit harder by considering \\\\r \\\\t \\\\n as well"
                    },
                    {
                        "username": "ylee078",
                        "content": "what the actual f*ck. DONT SPOIL ONE PIECE"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Hi All,\n\nPlease check the below working code and do suggest how I can improve this,\n\nclass Solution {\n    public int lengthOfLastWord(String s) {\n     String[] str=s.trim().split(\"\\\\s+\");\n     //System.out.println(str.length+\" \"+str[1]);\n     //int i=str.length-1;\n     String ss=str[str.length-1];\n     int stringLength = ss.replace(\" \", \"\").length();\n     return stringLength;\n    }\n} "
                    },
                    {
                        "username": "MenaiAla",
                        "content": "Why this code don\\'t pass the case of `s=\\'a\\'`?\\n\\n```\\n\\n    let count = 0\\n    let i = s.length - 1\\n    while (i >= 0 && s[i] === \" \") {\\n        i--\\n    }\\n\\n    for (let j = i; j >= 0; j--) {\\n        let e = s[j]\\n        if (e !== \" \") {\\n            count = count + 1\\n        } else {\\n            return count\\n        }\\n    }\\n\\n```"
                    },
                    {
                        "username": "PentaMa",
                        "content": "We need something that is slightly more complex even for the \"Easy\" difficulties because a multitude of the programming languages allows for easy string split (strtok() in C/C++, String.split() in Java, str.split() in Python, string.Split() in C#, etc.) \\n\\nIf you really wants us to think about the algorithm, then scan the submissions, and fail those who use the \"split\" kind methods"
                    },
                    {
                        "username": "treejumperfinny",
                        "content": "LOL The One Piece reference. Nice."
                    },
                    {
                        "username": "googglob",
                        "content": "C# -  `return s.Trim().Split(new char[] { ' ' }).Last().Length;.`"
                    },
                    {
                        "username": "ryde6",
                        "content": "How do I fix this? Char 5: error: expected member name or \\';\\' after declaration specifiers  while (i<=len) {\\n\\nThis is my code:\\nwhile (i<=len) {\\n        if (count != 0){\\n            if (s[len-i] != \" \")\\n                count++;\\n            else\\n                break;\\n        }\\n        i++;\\n    }"
                    },
                    {
                        "username": "codeguy186",
                        "content": "Who expected One Piece spoilers in a sample testcase?"
                    },
                    {
                        "username": "devanshhexe",
                        "content": "sauce "
                    }
                ]
            },
            {
                "id": 1879127,
                "content": [
                    {
                        "username": "learningstuffs513",
                        "content": "Should have been a bit harder by considering \\\\r \\\\t \\\\n as well"
                    },
                    {
                        "username": "ylee078",
                        "content": "what the actual f*ck. DONT SPOIL ONE PIECE"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Hi All,\n\nPlease check the below working code and do suggest how I can improve this,\n\nclass Solution {\n    public int lengthOfLastWord(String s) {\n     String[] str=s.trim().split(\"\\\\s+\");\n     //System.out.println(str.length+\" \"+str[1]);\n     //int i=str.length-1;\n     String ss=str[str.length-1];\n     int stringLength = ss.replace(\" \", \"\").length();\n     return stringLength;\n    }\n} "
                    },
                    {
                        "username": "MenaiAla",
                        "content": "Why this code don\\'t pass the case of `s=\\'a\\'`?\\n\\n```\\n\\n    let count = 0\\n    let i = s.length - 1\\n    while (i >= 0 && s[i] === \" \") {\\n        i--\\n    }\\n\\n    for (let j = i; j >= 0; j--) {\\n        let e = s[j]\\n        if (e !== \" \") {\\n            count = count + 1\\n        } else {\\n            return count\\n        }\\n    }\\n\\n```"
                    },
                    {
                        "username": "PentaMa",
                        "content": "We need something that is slightly more complex even for the \"Easy\" difficulties because a multitude of the programming languages allows for easy string split (strtok() in C/C++, String.split() in Java, str.split() in Python, string.Split() in C#, etc.) \\n\\nIf you really wants us to think about the algorithm, then scan the submissions, and fail those who use the \"split\" kind methods"
                    },
                    {
                        "username": "treejumperfinny",
                        "content": "LOL The One Piece reference. Nice."
                    },
                    {
                        "username": "googglob",
                        "content": "C# -  `return s.Trim().Split(new char[] { ' ' }).Last().Length;.`"
                    },
                    {
                        "username": "ryde6",
                        "content": "How do I fix this? Char 5: error: expected member name or \\';\\' after declaration specifiers  while (i<=len) {\\n\\nThis is my code:\\nwhile (i<=len) {\\n        if (count != 0){\\n            if (s[len-i] != \" \")\\n                count++;\\n            else\\n                break;\\n        }\\n        i++;\\n    }"
                    },
                    {
                        "username": "codeguy186",
                        "content": "Who expected One Piece spoilers in a sample testcase?"
                    },
                    {
                        "username": "devanshhexe",
                        "content": "sauce "
                    }
                ]
            },
            {
                "id": 1854934,
                "content": [
                    {
                        "username": "learningstuffs513",
                        "content": "Should have been a bit harder by considering \\\\r \\\\t \\\\n as well"
                    },
                    {
                        "username": "ylee078",
                        "content": "what the actual f*ck. DONT SPOIL ONE PIECE"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Hi All,\n\nPlease check the below working code and do suggest how I can improve this,\n\nclass Solution {\n    public int lengthOfLastWord(String s) {\n     String[] str=s.trim().split(\"\\\\s+\");\n     //System.out.println(str.length+\" \"+str[1]);\n     //int i=str.length-1;\n     String ss=str[str.length-1];\n     int stringLength = ss.replace(\" \", \"\").length();\n     return stringLength;\n    }\n} "
                    },
                    {
                        "username": "MenaiAla",
                        "content": "Why this code don\\'t pass the case of `s=\\'a\\'`?\\n\\n```\\n\\n    let count = 0\\n    let i = s.length - 1\\n    while (i >= 0 && s[i] === \" \") {\\n        i--\\n    }\\n\\n    for (let j = i; j >= 0; j--) {\\n        let e = s[j]\\n        if (e !== \" \") {\\n            count = count + 1\\n        } else {\\n            return count\\n        }\\n    }\\n\\n```"
                    },
                    {
                        "username": "PentaMa",
                        "content": "We need something that is slightly more complex even for the \"Easy\" difficulties because a multitude of the programming languages allows for easy string split (strtok() in C/C++, String.split() in Java, str.split() in Python, string.Split() in C#, etc.) \\n\\nIf you really wants us to think about the algorithm, then scan the submissions, and fail those who use the \"split\" kind methods"
                    },
                    {
                        "username": "treejumperfinny",
                        "content": "LOL The One Piece reference. Nice."
                    },
                    {
                        "username": "googglob",
                        "content": "C# -  `return s.Trim().Split(new char[] { ' ' }).Last().Length;.`"
                    },
                    {
                        "username": "ryde6",
                        "content": "How do I fix this? Char 5: error: expected member name or \\';\\' after declaration specifiers  while (i<=len) {\\n\\nThis is my code:\\nwhile (i<=len) {\\n        if (count != 0){\\n            if (s[len-i] != \" \")\\n                count++;\\n            else\\n                break;\\n        }\\n        i++;\\n    }"
                    },
                    {
                        "username": "codeguy186",
                        "content": "Who expected One Piece spoilers in a sample testcase?"
                    },
                    {
                        "username": "devanshhexe",
                        "content": "sauce "
                    }
                ]
            },
            {
                "id": 1854010,
                "content": [
                    {
                        "username": "learningstuffs513",
                        "content": "Should have been a bit harder by considering \\\\r \\\\t \\\\n as well"
                    },
                    {
                        "username": "ylee078",
                        "content": "what the actual f*ck. DONT SPOIL ONE PIECE"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Hi All,\n\nPlease check the below working code and do suggest how I can improve this,\n\nclass Solution {\n    public int lengthOfLastWord(String s) {\n     String[] str=s.trim().split(\"\\\\s+\");\n     //System.out.println(str.length+\" \"+str[1]);\n     //int i=str.length-1;\n     String ss=str[str.length-1];\n     int stringLength = ss.replace(\" \", \"\").length();\n     return stringLength;\n    }\n} "
                    },
                    {
                        "username": "MenaiAla",
                        "content": "Why this code don\\'t pass the case of `s=\\'a\\'`?\\n\\n```\\n\\n    let count = 0\\n    let i = s.length - 1\\n    while (i >= 0 && s[i] === \" \") {\\n        i--\\n    }\\n\\n    for (let j = i; j >= 0; j--) {\\n        let e = s[j]\\n        if (e !== \" \") {\\n            count = count + 1\\n        } else {\\n            return count\\n        }\\n    }\\n\\n```"
                    },
                    {
                        "username": "PentaMa",
                        "content": "We need something that is slightly more complex even for the \"Easy\" difficulties because a multitude of the programming languages allows for easy string split (strtok() in C/C++, String.split() in Java, str.split() in Python, string.Split() in C#, etc.) \\n\\nIf you really wants us to think about the algorithm, then scan the submissions, and fail those who use the \"split\" kind methods"
                    },
                    {
                        "username": "treejumperfinny",
                        "content": "LOL The One Piece reference. Nice."
                    },
                    {
                        "username": "googglob",
                        "content": "C# -  `return s.Trim().Split(new char[] { ' ' }).Last().Length;.`"
                    },
                    {
                        "username": "ryde6",
                        "content": "How do I fix this? Char 5: error: expected member name or \\';\\' after declaration specifiers  while (i<=len) {\\n\\nThis is my code:\\nwhile (i<=len) {\\n        if (count != 0){\\n            if (s[len-i] != \" \")\\n                count++;\\n            else\\n                break;\\n        }\\n        i++;\\n    }"
                    },
                    {
                        "username": "codeguy186",
                        "content": "Who expected One Piece spoilers in a sample testcase?"
                    },
                    {
                        "username": "devanshhexe",
                        "content": "sauce "
                    }
                ]
            },
            {
                "id": 1853794,
                "content": [
                    {
                        "username": "learningstuffs513",
                        "content": "Should have been a bit harder by considering \\\\r \\\\t \\\\n as well"
                    },
                    {
                        "username": "ylee078",
                        "content": "what the actual f*ck. DONT SPOIL ONE PIECE"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Hi All,\n\nPlease check the below working code and do suggest how I can improve this,\n\nclass Solution {\n    public int lengthOfLastWord(String s) {\n     String[] str=s.trim().split(\"\\\\s+\");\n     //System.out.println(str.length+\" \"+str[1]);\n     //int i=str.length-1;\n     String ss=str[str.length-1];\n     int stringLength = ss.replace(\" \", \"\").length();\n     return stringLength;\n    }\n} "
                    },
                    {
                        "username": "MenaiAla",
                        "content": "Why this code don\\'t pass the case of `s=\\'a\\'`?\\n\\n```\\n\\n    let count = 0\\n    let i = s.length - 1\\n    while (i >= 0 && s[i] === \" \") {\\n        i--\\n    }\\n\\n    for (let j = i; j >= 0; j--) {\\n        let e = s[j]\\n        if (e !== \" \") {\\n            count = count + 1\\n        } else {\\n            return count\\n        }\\n    }\\n\\n```"
                    },
                    {
                        "username": "PentaMa",
                        "content": "We need something that is slightly more complex even for the \"Easy\" difficulties because a multitude of the programming languages allows for easy string split (strtok() in C/C++, String.split() in Java, str.split() in Python, string.Split() in C#, etc.) \\n\\nIf you really wants us to think about the algorithm, then scan the submissions, and fail those who use the \"split\" kind methods"
                    },
                    {
                        "username": "treejumperfinny",
                        "content": "LOL The One Piece reference. Nice."
                    },
                    {
                        "username": "googglob",
                        "content": "C# -  `return s.Trim().Split(new char[] { ' ' }).Last().Length;.`"
                    },
                    {
                        "username": "ryde6",
                        "content": "How do I fix this? Char 5: error: expected member name or \\';\\' after declaration specifiers  while (i<=len) {\\n\\nThis is my code:\\nwhile (i<=len) {\\n        if (count != 0){\\n            if (s[len-i] != \" \")\\n                count++;\\n            else\\n                break;\\n        }\\n        i++;\\n    }"
                    },
                    {
                        "username": "codeguy186",
                        "content": "Who expected One Piece spoilers in a sample testcase?"
                    },
                    {
                        "username": "devanshhexe",
                        "content": "sauce "
                    }
                ]
            },
            {
                "id": 1841442,
                "content": [
                    {
                        "username": "learningstuffs513",
                        "content": "Should have been a bit harder by considering \\\\r \\\\t \\\\n as well"
                    },
                    {
                        "username": "ylee078",
                        "content": "what the actual f*ck. DONT SPOIL ONE PIECE"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Hi All,\n\nPlease check the below working code and do suggest how I can improve this,\n\nclass Solution {\n    public int lengthOfLastWord(String s) {\n     String[] str=s.trim().split(\"\\\\s+\");\n     //System.out.println(str.length+\" \"+str[1]);\n     //int i=str.length-1;\n     String ss=str[str.length-1];\n     int stringLength = ss.replace(\" \", \"\").length();\n     return stringLength;\n    }\n} "
                    },
                    {
                        "username": "MenaiAla",
                        "content": "Why this code don\\'t pass the case of `s=\\'a\\'`?\\n\\n```\\n\\n    let count = 0\\n    let i = s.length - 1\\n    while (i >= 0 && s[i] === \" \") {\\n        i--\\n    }\\n\\n    for (let j = i; j >= 0; j--) {\\n        let e = s[j]\\n        if (e !== \" \") {\\n            count = count + 1\\n        } else {\\n            return count\\n        }\\n    }\\n\\n```"
                    },
                    {
                        "username": "PentaMa",
                        "content": "We need something that is slightly more complex even for the \"Easy\" difficulties because a multitude of the programming languages allows for easy string split (strtok() in C/C++, String.split() in Java, str.split() in Python, string.Split() in C#, etc.) \\n\\nIf you really wants us to think about the algorithm, then scan the submissions, and fail those who use the \"split\" kind methods"
                    },
                    {
                        "username": "treejumperfinny",
                        "content": "LOL The One Piece reference. Nice."
                    },
                    {
                        "username": "googglob",
                        "content": "C# -  `return s.Trim().Split(new char[] { ' ' }).Last().Length;.`"
                    },
                    {
                        "username": "ryde6",
                        "content": "How do I fix this? Char 5: error: expected member name or \\';\\' after declaration specifiers  while (i<=len) {\\n\\nThis is my code:\\nwhile (i<=len) {\\n        if (count != 0){\\n            if (s[len-i] != \" \")\\n                count++;\\n            else\\n                break;\\n        }\\n        i++;\\n    }"
                    },
                    {
                        "username": "codeguy186",
                        "content": "Who expected One Piece spoilers in a sample testcase?"
                    },
                    {
                        "username": "devanshhexe",
                        "content": "sauce "
                    }
                ]
            },
            {
                "id": 1825420,
                "content": [
                    {
                        "username": "learningstuffs513",
                        "content": "Should have been a bit harder by considering \\\\r \\\\t \\\\n as well"
                    },
                    {
                        "username": "ylee078",
                        "content": "what the actual f*ck. DONT SPOIL ONE PIECE"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Hi All,\n\nPlease check the below working code and do suggest how I can improve this,\n\nclass Solution {\n    public int lengthOfLastWord(String s) {\n     String[] str=s.trim().split(\"\\\\s+\");\n     //System.out.println(str.length+\" \"+str[1]);\n     //int i=str.length-1;\n     String ss=str[str.length-1];\n     int stringLength = ss.replace(\" \", \"\").length();\n     return stringLength;\n    }\n} "
                    },
                    {
                        "username": "MenaiAla",
                        "content": "Why this code don\\'t pass the case of `s=\\'a\\'`?\\n\\n```\\n\\n    let count = 0\\n    let i = s.length - 1\\n    while (i >= 0 && s[i] === \" \") {\\n        i--\\n    }\\n\\n    for (let j = i; j >= 0; j--) {\\n        let e = s[j]\\n        if (e !== \" \") {\\n            count = count + 1\\n        } else {\\n            return count\\n        }\\n    }\\n\\n```"
                    },
                    {
                        "username": "PentaMa",
                        "content": "We need something that is slightly more complex even for the \"Easy\" difficulties because a multitude of the programming languages allows for easy string split (strtok() in C/C++, String.split() in Java, str.split() in Python, string.Split() in C#, etc.) \\n\\nIf you really wants us to think about the algorithm, then scan the submissions, and fail those who use the \"split\" kind methods"
                    },
                    {
                        "username": "treejumperfinny",
                        "content": "LOL The One Piece reference. Nice."
                    },
                    {
                        "username": "googglob",
                        "content": "C# -  `return s.Trim().Split(new char[] { ' ' }).Last().Length;.`"
                    },
                    {
                        "username": "ryde6",
                        "content": "How do I fix this? Char 5: error: expected member name or \\';\\' after declaration specifiers  while (i<=len) {\\n\\nThis is my code:\\nwhile (i<=len) {\\n        if (count != 0){\\n            if (s[len-i] != \" \")\\n                count++;\\n            else\\n                break;\\n        }\\n        i++;\\n    }"
                    },
                    {
                        "username": "codeguy186",
                        "content": "Who expected One Piece spoilers in a sample testcase?"
                    },
                    {
                        "username": "devanshhexe",
                        "content": "sauce "
                    }
                ]
            },
            {
                "id": 1812005,
                "content": [
                    {
                        "username": "learningstuffs513",
                        "content": "Should have been a bit harder by considering \\\\r \\\\t \\\\n as well"
                    },
                    {
                        "username": "ylee078",
                        "content": "what the actual f*ck. DONT SPOIL ONE PIECE"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Hi All,\n\nPlease check the below working code and do suggest how I can improve this,\n\nclass Solution {\n    public int lengthOfLastWord(String s) {\n     String[] str=s.trim().split(\"\\\\s+\");\n     //System.out.println(str.length+\" \"+str[1]);\n     //int i=str.length-1;\n     String ss=str[str.length-1];\n     int stringLength = ss.replace(\" \", \"\").length();\n     return stringLength;\n    }\n} "
                    },
                    {
                        "username": "MenaiAla",
                        "content": "Why this code don\\'t pass the case of `s=\\'a\\'`?\\n\\n```\\n\\n    let count = 0\\n    let i = s.length - 1\\n    while (i >= 0 && s[i] === \" \") {\\n        i--\\n    }\\n\\n    for (let j = i; j >= 0; j--) {\\n        let e = s[j]\\n        if (e !== \" \") {\\n            count = count + 1\\n        } else {\\n            return count\\n        }\\n    }\\n\\n```"
                    },
                    {
                        "username": "PentaMa",
                        "content": "We need something that is slightly more complex even for the \"Easy\" difficulties because a multitude of the programming languages allows for easy string split (strtok() in C/C++, String.split() in Java, str.split() in Python, string.Split() in C#, etc.) \\n\\nIf you really wants us to think about the algorithm, then scan the submissions, and fail those who use the \"split\" kind methods"
                    },
                    {
                        "username": "treejumperfinny",
                        "content": "LOL The One Piece reference. Nice."
                    },
                    {
                        "username": "googglob",
                        "content": "C# -  `return s.Trim().Split(new char[] { ' ' }).Last().Length;.`"
                    },
                    {
                        "username": "ryde6",
                        "content": "How do I fix this? Char 5: error: expected member name or \\';\\' after declaration specifiers  while (i<=len) {\\n\\nThis is my code:\\nwhile (i<=len) {\\n        if (count != 0){\\n            if (s[len-i] != \" \")\\n                count++;\\n            else\\n                break;\\n        }\\n        i++;\\n    }"
                    },
                    {
                        "username": "codeguy186",
                        "content": "Who expected One Piece spoilers in a sample testcase?"
                    },
                    {
                        "username": "devanshhexe",
                        "content": "sauce "
                    }
                ]
            },
            {
                "id": 1804261,
                "content": [
                    {
                        "username": "learningstuffs513",
                        "content": "Should have been a bit harder by considering \\\\r \\\\t \\\\n as well"
                    },
                    {
                        "username": "ylee078",
                        "content": "what the actual f*ck. DONT SPOIL ONE PIECE"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Hi All,\n\nPlease check the below working code and do suggest how I can improve this,\n\nclass Solution {\n    public int lengthOfLastWord(String s) {\n     String[] str=s.trim().split(\"\\\\s+\");\n     //System.out.println(str.length+\" \"+str[1]);\n     //int i=str.length-1;\n     String ss=str[str.length-1];\n     int stringLength = ss.replace(\" \", \"\").length();\n     return stringLength;\n    }\n} "
                    },
                    {
                        "username": "MenaiAla",
                        "content": "Why this code don\\'t pass the case of `s=\\'a\\'`?\\n\\n```\\n\\n    let count = 0\\n    let i = s.length - 1\\n    while (i >= 0 && s[i] === \" \") {\\n        i--\\n    }\\n\\n    for (let j = i; j >= 0; j--) {\\n        let e = s[j]\\n        if (e !== \" \") {\\n            count = count + 1\\n        } else {\\n            return count\\n        }\\n    }\\n\\n```"
                    },
                    {
                        "username": "PentaMa",
                        "content": "We need something that is slightly more complex even for the \"Easy\" difficulties because a multitude of the programming languages allows for easy string split (strtok() in C/C++, String.split() in Java, str.split() in Python, string.Split() in C#, etc.) \\n\\nIf you really wants us to think about the algorithm, then scan the submissions, and fail those who use the \"split\" kind methods"
                    },
                    {
                        "username": "treejumperfinny",
                        "content": "LOL The One Piece reference. Nice."
                    },
                    {
                        "username": "googglob",
                        "content": "C# -  `return s.Trim().Split(new char[] { ' ' }).Last().Length;.`"
                    },
                    {
                        "username": "ryde6",
                        "content": "How do I fix this? Char 5: error: expected member name or \\';\\' after declaration specifiers  while (i<=len) {\\n\\nThis is my code:\\nwhile (i<=len) {\\n        if (count != 0){\\n            if (s[len-i] != \" \")\\n                count++;\\n            else\\n                break;\\n        }\\n        i++;\\n    }"
                    },
                    {
                        "username": "codeguy186",
                        "content": "Who expected One Piece spoilers in a sample testcase?"
                    },
                    {
                        "username": "devanshhexe",
                        "content": "sauce "
                    }
                ]
            },
            {
                "id": 1799449,
                "content": [
                    {
                        "username": "yorkltesting",
                        "content": "I've got test cases running with correct output, but when I submit and it shows Runtime error per below. Where the None comes from?\nTypeError: None is not valid value for the expected return type integer\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\n\nmy code:\ndef lengthOfLastWord(self, s: str) -> int:\n        pointer = 0\n        last_word = []\n        for i in s[::-1]:\n            if i == \" \" and len(last_word) == 0:\n                pass\n            elif i == \" \" and len(last_word) > 0:\n                return len(last_word)\n            else: \n                last_word.append(i)"
                    },
                    {
                        "username": "anujp99",
                        "content": "Never expected to get one piece spoilers on leet code"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "using python 3 \\nx = (lambda s: s.strip().split(\" \")[::-1][0])\\n        return len(x(s))\\n      "
                    },
                    {
                        "username": "FlamegiserMKA",
                        "content": "PEAK PIECE!!!\\n"
                    },
                    {
                        "username": "tia09",
                        "content": "thank you, this one made me think i was smart"
                    },
                    {
                        "username": "Rishabh_Patel_",
                        "content": "kaizoku ore wa naru"
                    },
                    {
                        "username": "ijj92",
                        "content": "        x = s.split()\\n        return len(x[-1])"
                    },
                    {
                        "username": "primeayush6",
                        "content": "yes, that\\'s why I\\'m in discussions too."
                    },
                    {
                        "username": "BishantRaj18",
                        "content": "String a[]=s.split(\" \");\\nreturn a[a.length-1].length();\\n"
                    },
                    {
                        "username": "rez---",
                        "content": "bruh i never expected a one piece spoiler on leetcode lmaoo"
                    }
                ]
            },
            {
                "id": 1796055,
                "content": [
                    {
                        "username": "yorkltesting",
                        "content": "I've got test cases running with correct output, but when I submit and it shows Runtime error per below. Where the None comes from?\nTypeError: None is not valid value for the expected return type integer\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\n\nmy code:\ndef lengthOfLastWord(self, s: str) -> int:\n        pointer = 0\n        last_word = []\n        for i in s[::-1]:\n            if i == \" \" and len(last_word) == 0:\n                pass\n            elif i == \" \" and len(last_word) > 0:\n                return len(last_word)\n            else: \n                last_word.append(i)"
                    },
                    {
                        "username": "anujp99",
                        "content": "Never expected to get one piece spoilers on leet code"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "using python 3 \\nx = (lambda s: s.strip().split(\" \")[::-1][0])\\n        return len(x(s))\\n      "
                    },
                    {
                        "username": "FlamegiserMKA",
                        "content": "PEAK PIECE!!!\\n"
                    },
                    {
                        "username": "tia09",
                        "content": "thank you, this one made me think i was smart"
                    },
                    {
                        "username": "Rishabh_Patel_",
                        "content": "kaizoku ore wa naru"
                    },
                    {
                        "username": "ijj92",
                        "content": "        x = s.split()\\n        return len(x[-1])"
                    },
                    {
                        "username": "primeayush6",
                        "content": "yes, that\\'s why I\\'m in discussions too."
                    },
                    {
                        "username": "BishantRaj18",
                        "content": "String a[]=s.split(\" \");\\nreturn a[a.length-1].length();\\n"
                    },
                    {
                        "username": "rez---",
                        "content": "bruh i never expected a one piece spoiler on leetcode lmaoo"
                    }
                ]
            },
            {
                "id": 1795791,
                "content": [
                    {
                        "username": "yorkltesting",
                        "content": "I've got test cases running with correct output, but when I submit and it shows Runtime error per below. Where the None comes from?\nTypeError: None is not valid value for the expected return type integer\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\n\nmy code:\ndef lengthOfLastWord(self, s: str) -> int:\n        pointer = 0\n        last_word = []\n        for i in s[::-1]:\n            if i == \" \" and len(last_word) == 0:\n                pass\n            elif i == \" \" and len(last_word) > 0:\n                return len(last_word)\n            else: \n                last_word.append(i)"
                    },
                    {
                        "username": "anujp99",
                        "content": "Never expected to get one piece spoilers on leet code"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "using python 3 \\nx = (lambda s: s.strip().split(\" \")[::-1][0])\\n        return len(x(s))\\n      "
                    },
                    {
                        "username": "FlamegiserMKA",
                        "content": "PEAK PIECE!!!\\n"
                    },
                    {
                        "username": "tia09",
                        "content": "thank you, this one made me think i was smart"
                    },
                    {
                        "username": "Rishabh_Patel_",
                        "content": "kaizoku ore wa naru"
                    },
                    {
                        "username": "ijj92",
                        "content": "        x = s.split()\\n        return len(x[-1])"
                    },
                    {
                        "username": "primeayush6",
                        "content": "yes, that\\'s why I\\'m in discussions too."
                    },
                    {
                        "username": "BishantRaj18",
                        "content": "String a[]=s.split(\" \");\\nreturn a[a.length-1].length();\\n"
                    },
                    {
                        "username": "rez---",
                        "content": "bruh i never expected a one piece spoiler on leetcode lmaoo"
                    }
                ]
            },
            {
                "id": 1795693,
                "content": [
                    {
                        "username": "yorkltesting",
                        "content": "I've got test cases running with correct output, but when I submit and it shows Runtime error per below. Where the None comes from?\nTypeError: None is not valid value for the expected return type integer\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\n\nmy code:\ndef lengthOfLastWord(self, s: str) -> int:\n        pointer = 0\n        last_word = []\n        for i in s[::-1]:\n            if i == \" \" and len(last_word) == 0:\n                pass\n            elif i == \" \" and len(last_word) > 0:\n                return len(last_word)\n            else: \n                last_word.append(i)"
                    },
                    {
                        "username": "anujp99",
                        "content": "Never expected to get one piece spoilers on leet code"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "using python 3 \\nx = (lambda s: s.strip().split(\" \")[::-1][0])\\n        return len(x(s))\\n      "
                    },
                    {
                        "username": "FlamegiserMKA",
                        "content": "PEAK PIECE!!!\\n"
                    },
                    {
                        "username": "tia09",
                        "content": "thank you, this one made me think i was smart"
                    },
                    {
                        "username": "Rishabh_Patel_",
                        "content": "kaizoku ore wa naru"
                    },
                    {
                        "username": "ijj92",
                        "content": "        x = s.split()\\n        return len(x[-1])"
                    },
                    {
                        "username": "primeayush6",
                        "content": "yes, that\\'s why I\\'m in discussions too."
                    },
                    {
                        "username": "BishantRaj18",
                        "content": "String a[]=s.split(\" \");\\nreturn a[a.length-1].length();\\n"
                    },
                    {
                        "username": "rez---",
                        "content": "bruh i never expected a one piece spoiler on leetcode lmaoo"
                    }
                ]
            },
            {
                "id": 1787789,
                "content": [
                    {
                        "username": "yorkltesting",
                        "content": "I've got test cases running with correct output, but when I submit and it shows Runtime error per below. Where the None comes from?\nTypeError: None is not valid value for the expected return type integer\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\n\nmy code:\ndef lengthOfLastWord(self, s: str) -> int:\n        pointer = 0\n        last_word = []\n        for i in s[::-1]:\n            if i == \" \" and len(last_word) == 0:\n                pass\n            elif i == \" \" and len(last_word) > 0:\n                return len(last_word)\n            else: \n                last_word.append(i)"
                    },
                    {
                        "username": "anujp99",
                        "content": "Never expected to get one piece spoilers on leet code"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "using python 3 \\nx = (lambda s: s.strip().split(\" \")[::-1][0])\\n        return len(x(s))\\n      "
                    },
                    {
                        "username": "FlamegiserMKA",
                        "content": "PEAK PIECE!!!\\n"
                    },
                    {
                        "username": "tia09",
                        "content": "thank you, this one made me think i was smart"
                    },
                    {
                        "username": "Rishabh_Patel_",
                        "content": "kaizoku ore wa naru"
                    },
                    {
                        "username": "ijj92",
                        "content": "        x = s.split()\\n        return len(x[-1])"
                    },
                    {
                        "username": "primeayush6",
                        "content": "yes, that\\'s why I\\'m in discussions too."
                    },
                    {
                        "username": "BishantRaj18",
                        "content": "String a[]=s.split(\" \");\\nreturn a[a.length-1].length();\\n"
                    },
                    {
                        "username": "rez---",
                        "content": "bruh i never expected a one piece spoiler on leetcode lmaoo"
                    }
                ]
            },
            {
                "id": 1787244,
                "content": [
                    {
                        "username": "yorkltesting",
                        "content": "I've got test cases running with correct output, but when I submit and it shows Runtime error per below. Where the None comes from?\nTypeError: None is not valid value for the expected return type integer\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\n\nmy code:\ndef lengthOfLastWord(self, s: str) -> int:\n        pointer = 0\n        last_word = []\n        for i in s[::-1]:\n            if i == \" \" and len(last_word) == 0:\n                pass\n            elif i == \" \" and len(last_word) > 0:\n                return len(last_word)\n            else: \n                last_word.append(i)"
                    },
                    {
                        "username": "anujp99",
                        "content": "Never expected to get one piece spoilers on leet code"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "using python 3 \\nx = (lambda s: s.strip().split(\" \")[::-1][0])\\n        return len(x(s))\\n      "
                    },
                    {
                        "username": "FlamegiserMKA",
                        "content": "PEAK PIECE!!!\\n"
                    },
                    {
                        "username": "tia09",
                        "content": "thank you, this one made me think i was smart"
                    },
                    {
                        "username": "Rishabh_Patel_",
                        "content": "kaizoku ore wa naru"
                    },
                    {
                        "username": "ijj92",
                        "content": "        x = s.split()\\n        return len(x[-1])"
                    },
                    {
                        "username": "primeayush6",
                        "content": "yes, that\\'s why I\\'m in discussions too."
                    },
                    {
                        "username": "BishantRaj18",
                        "content": "String a[]=s.split(\" \");\\nreturn a[a.length-1].length();\\n"
                    },
                    {
                        "username": "rez---",
                        "content": "bruh i never expected a one piece spoiler on leetcode lmaoo"
                    }
                ]
            },
            {
                "id": 1786566,
                "content": [
                    {
                        "username": "yorkltesting",
                        "content": "I've got test cases running with correct output, but when I submit and it shows Runtime error per below. Where the None comes from?\nTypeError: None is not valid value for the expected return type integer\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\n\nmy code:\ndef lengthOfLastWord(self, s: str) -> int:\n        pointer = 0\n        last_word = []\n        for i in s[::-1]:\n            if i == \" \" and len(last_word) == 0:\n                pass\n            elif i == \" \" and len(last_word) > 0:\n                return len(last_word)\n            else: \n                last_word.append(i)"
                    },
                    {
                        "username": "anujp99",
                        "content": "Never expected to get one piece spoilers on leet code"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "using python 3 \\nx = (lambda s: s.strip().split(\" \")[::-1][0])\\n        return len(x(s))\\n      "
                    },
                    {
                        "username": "FlamegiserMKA",
                        "content": "PEAK PIECE!!!\\n"
                    },
                    {
                        "username": "tia09",
                        "content": "thank you, this one made me think i was smart"
                    },
                    {
                        "username": "Rishabh_Patel_",
                        "content": "kaizoku ore wa naru"
                    },
                    {
                        "username": "ijj92",
                        "content": "        x = s.split()\\n        return len(x[-1])"
                    },
                    {
                        "username": "primeayush6",
                        "content": "yes, that\\'s why I\\'m in discussions too."
                    },
                    {
                        "username": "BishantRaj18",
                        "content": "String a[]=s.split(\" \");\\nreturn a[a.length-1].length();\\n"
                    },
                    {
                        "username": "rez---",
                        "content": "bruh i never expected a one piece spoiler on leetcode lmaoo"
                    }
                ]
            },
            {
                "id": 1784963,
                "content": [
                    {
                        "username": "yorkltesting",
                        "content": "I've got test cases running with correct output, but when I submit and it shows Runtime error per below. Where the None comes from?\nTypeError: None is not valid value for the expected return type integer\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\n\nmy code:\ndef lengthOfLastWord(self, s: str) -> int:\n        pointer = 0\n        last_word = []\n        for i in s[::-1]:\n            if i == \" \" and len(last_word) == 0:\n                pass\n            elif i == \" \" and len(last_word) > 0:\n                return len(last_word)\n            else: \n                last_word.append(i)"
                    },
                    {
                        "username": "anujp99",
                        "content": "Never expected to get one piece spoilers on leet code"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "using python 3 \\nx = (lambda s: s.strip().split(\" \")[::-1][0])\\n        return len(x(s))\\n      "
                    },
                    {
                        "username": "FlamegiserMKA",
                        "content": "PEAK PIECE!!!\\n"
                    },
                    {
                        "username": "tia09",
                        "content": "thank you, this one made me think i was smart"
                    },
                    {
                        "username": "Rishabh_Patel_",
                        "content": "kaizoku ore wa naru"
                    },
                    {
                        "username": "ijj92",
                        "content": "        x = s.split()\\n        return len(x[-1])"
                    },
                    {
                        "username": "primeayush6",
                        "content": "yes, that\\'s why I\\'m in discussions too."
                    },
                    {
                        "username": "BishantRaj18",
                        "content": "String a[]=s.split(\" \");\\nreturn a[a.length-1].length();\\n"
                    },
                    {
                        "username": "rez---",
                        "content": "bruh i never expected a one piece spoiler on leetcode lmaoo"
                    }
                ]
            },
            {
                "id": 1779866,
                "content": [
                    {
                        "username": "yorkltesting",
                        "content": "I've got test cases running with correct output, but when I submit and it shows Runtime error per below. Where the None comes from?\nTypeError: None is not valid value for the expected return type integer\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\n\nmy code:\ndef lengthOfLastWord(self, s: str) -> int:\n        pointer = 0\n        last_word = []\n        for i in s[::-1]:\n            if i == \" \" and len(last_word) == 0:\n                pass\n            elif i == \" \" and len(last_word) > 0:\n                return len(last_word)\n            else: \n                last_word.append(i)"
                    },
                    {
                        "username": "anujp99",
                        "content": "Never expected to get one piece spoilers on leet code"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "using python 3 \\nx = (lambda s: s.strip().split(\" \")[::-1][0])\\n        return len(x(s))\\n      "
                    },
                    {
                        "username": "FlamegiserMKA",
                        "content": "PEAK PIECE!!!\\n"
                    },
                    {
                        "username": "tia09",
                        "content": "thank you, this one made me think i was smart"
                    },
                    {
                        "username": "Rishabh_Patel_",
                        "content": "kaizoku ore wa naru"
                    },
                    {
                        "username": "ijj92",
                        "content": "        x = s.split()\\n        return len(x[-1])"
                    },
                    {
                        "username": "primeayush6",
                        "content": "yes, that\\'s why I\\'m in discussions too."
                    },
                    {
                        "username": "BishantRaj18",
                        "content": "String a[]=s.split(\" \");\\nreturn a[a.length-1].length();\\n"
                    },
                    {
                        "username": "rez---",
                        "content": "bruh i never expected a one piece spoiler on leetcode lmaoo"
                    }
                ]
            },
            {
                "id": 1779226,
                "content": [
                    {
                        "username": "yorkltesting",
                        "content": "I've got test cases running with correct output, but when I submit and it shows Runtime error per below. Where the None comes from?\nTypeError: None is not valid value for the expected return type integer\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\n\nmy code:\ndef lengthOfLastWord(self, s: str) -> int:\n        pointer = 0\n        last_word = []\n        for i in s[::-1]:\n            if i == \" \" and len(last_word) == 0:\n                pass\n            elif i == \" \" and len(last_word) > 0:\n                return len(last_word)\n            else: \n                last_word.append(i)"
                    },
                    {
                        "username": "anujp99",
                        "content": "Never expected to get one piece spoilers on leet code"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "using python 3 \\nx = (lambda s: s.strip().split(\" \")[::-1][0])\\n        return len(x(s))\\n      "
                    },
                    {
                        "username": "FlamegiserMKA",
                        "content": "PEAK PIECE!!!\\n"
                    },
                    {
                        "username": "tia09",
                        "content": "thank you, this one made me think i was smart"
                    },
                    {
                        "username": "Rishabh_Patel_",
                        "content": "kaizoku ore wa naru"
                    },
                    {
                        "username": "ijj92",
                        "content": "        x = s.split()\\n        return len(x[-1])"
                    },
                    {
                        "username": "primeayush6",
                        "content": "yes, that\\'s why I\\'m in discussions too."
                    },
                    {
                        "username": "BishantRaj18",
                        "content": "String a[]=s.split(\" \");\\nreturn a[a.length-1].length();\\n"
                    },
                    {
                        "username": "rez---",
                        "content": "bruh i never expected a one piece spoiler on leetcode lmaoo"
                    }
                ]
            },
            {
                "id": 1779187,
                "content": [
                    {
                        "username": "hedch",
                        "content": "Single Line Python solution \nhttps://leetcode.com/problems/length-of-last-word/solutions/3112937/single-line-python-solution/"
                    },
                    {
                        "username": "abdumajidabdullatipov1",
                        "content": "      public int lengthOfLastWord(String s) {\\n        boolean hasLetter = false;\\n        int spaceCount = 0;\\n\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) == \\' \\' && hasLetter) {\\n                return s.length() - i - spaceCount - 1;\\n            }\\n\\n            if (s.charAt(i) != \\' \\' && !hasLetter) {\\n                hasLetter = true;\\n            }\\n\\n            if (!hasLetter) {\\n                spaceCount++;\\n            }\\n        }\\n\\n        return s.length() - spaceCount;\\n    }"
                    },
                    {
                        "username": "crova27",
                        "content": "just commented to say that I appreciate seeing a one piece reference <3"
                    },
                    {
                        "username": "utkarsh_verma",
                        "content": "can anyone tell what\\'s wrong with this code\\n\\nfor the testcase \"a\" i kept getting the error \" addition of unsigned offset\"\\n\\nint i=s.length()-1,j=s.length()-1,k=0;\\n        if(s.length()==1){\\n            return 1;\\n        }\\n        if(s[i]==\\' \\'){\\n            while(s[i]==\\' \\'){\\n                i--;\\n                k++;\\n            }\\n        }\\n        while(s[i]!=\\' \\'){\\n            i--;\\n        }\\n        return j-i-k;\\n\\n\\n"
                    },
                    {
                        "username": "prameshkumarsaha",
                        "content": "Python:\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        l=[]\\n        listOfWord = list(s.split(\" \"))\\n        for i in range(len(listOfWord)):\\n            if len(listOfWord[i]) != 0:\\n                l.append(listOfWord[i])\\n        lengthOfList = len(l)\\n        lastWord = l[lengthOfList-1]\\n        return len(lastWord)"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "In JavaScript, you can use string methods to get the last word of a string. Here are a few ways you can do this\\n\\nNote that in JavaScript the split() method returns an array, so you can use the filter method and regex to get the filtered element of the array.\\n `lengthOfLastWord = function(s) {\\nconst str = s.split(\" \");\\nconst filteredList = str.filter((a) => { if (!(/\\\\s/g.test(a))){\\n    return a;\\n}})\\nreturn filteredList[filteredList.length - 1].length;\\n};`\\n "
                    },
                    {
                        "username": "krishnadev7",
                        "content": "we can solve this question in C++ using while loop. we need to traverse the string array from backwards.\\n\\nstep1: start from the n-1 of the array.\\n           if i >=0 and s[i] == \\' \\'  are true\\n           then we need to decrement i.\\n\\nstep2: if i<0 then we return 0.\\n\\nstep3: if i>=0 and s[i] != \\' \\'. then we need to increment count. dont forget to intialize count with 0. after that we need to decrement i.\\n"
                    },
                    {
                        "username": "mushroom001",
                        "content": "when did they post this question? or changed the example 3?"
                    },
                    {
                        "username": "deleted_user",
                        "content": "I also want to add new spoilers as a testcase:\\n\"Momonosuke has grown into a big dragon\""
                    },
                    {
                        "username": "elnaznasiri",
                        "content": "It is Sooo very easy\\n\\nI use this solution:\\ndef lenghtOfLastWord(s):\\n    verb = s.split()\\n    return len(verb[-1])"
                    }
                ]
            },
            {
                "id": 1774855,
                "content": [
                    {
                        "username": "hedch",
                        "content": "Single Line Python solution \nhttps://leetcode.com/problems/length-of-last-word/solutions/3112937/single-line-python-solution/"
                    },
                    {
                        "username": "abdumajidabdullatipov1",
                        "content": "      public int lengthOfLastWord(String s) {\\n        boolean hasLetter = false;\\n        int spaceCount = 0;\\n\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) == \\' \\' && hasLetter) {\\n                return s.length() - i - spaceCount - 1;\\n            }\\n\\n            if (s.charAt(i) != \\' \\' && !hasLetter) {\\n                hasLetter = true;\\n            }\\n\\n            if (!hasLetter) {\\n                spaceCount++;\\n            }\\n        }\\n\\n        return s.length() - spaceCount;\\n    }"
                    },
                    {
                        "username": "crova27",
                        "content": "just commented to say that I appreciate seeing a one piece reference <3"
                    },
                    {
                        "username": "utkarsh_verma",
                        "content": "can anyone tell what\\'s wrong with this code\\n\\nfor the testcase \"a\" i kept getting the error \" addition of unsigned offset\"\\n\\nint i=s.length()-1,j=s.length()-1,k=0;\\n        if(s.length()==1){\\n            return 1;\\n        }\\n        if(s[i]==\\' \\'){\\n            while(s[i]==\\' \\'){\\n                i--;\\n                k++;\\n            }\\n        }\\n        while(s[i]!=\\' \\'){\\n            i--;\\n        }\\n        return j-i-k;\\n\\n\\n"
                    },
                    {
                        "username": "prameshkumarsaha",
                        "content": "Python:\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        l=[]\\n        listOfWord = list(s.split(\" \"))\\n        for i in range(len(listOfWord)):\\n            if len(listOfWord[i]) != 0:\\n                l.append(listOfWord[i])\\n        lengthOfList = len(l)\\n        lastWord = l[lengthOfList-1]\\n        return len(lastWord)"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "In JavaScript, you can use string methods to get the last word of a string. Here are a few ways you can do this\\n\\nNote that in JavaScript the split() method returns an array, so you can use the filter method and regex to get the filtered element of the array.\\n `lengthOfLastWord = function(s) {\\nconst str = s.split(\" \");\\nconst filteredList = str.filter((a) => { if (!(/\\\\s/g.test(a))){\\n    return a;\\n}})\\nreturn filteredList[filteredList.length - 1].length;\\n};`\\n "
                    },
                    {
                        "username": "krishnadev7",
                        "content": "we can solve this question in C++ using while loop. we need to traverse the string array from backwards.\\n\\nstep1: start from the n-1 of the array.\\n           if i >=0 and s[i] == \\' \\'  are true\\n           then we need to decrement i.\\n\\nstep2: if i<0 then we return 0.\\n\\nstep3: if i>=0 and s[i] != \\' \\'. then we need to increment count. dont forget to intialize count with 0. after that we need to decrement i.\\n"
                    },
                    {
                        "username": "mushroom001",
                        "content": "when did they post this question? or changed the example 3?"
                    },
                    {
                        "username": "deleted_user",
                        "content": "I also want to add new spoilers as a testcase:\\n\"Momonosuke has grown into a big dragon\""
                    },
                    {
                        "username": "elnaznasiri",
                        "content": "It is Sooo very easy\\n\\nI use this solution:\\ndef lenghtOfLastWord(s):\\n    verb = s.split()\\n    return len(verb[-1])"
                    }
                ]
            },
            {
                "id": 1772729,
                "content": [
                    {
                        "username": "hedch",
                        "content": "Single Line Python solution \nhttps://leetcode.com/problems/length-of-last-word/solutions/3112937/single-line-python-solution/"
                    },
                    {
                        "username": "abdumajidabdullatipov1",
                        "content": "      public int lengthOfLastWord(String s) {\\n        boolean hasLetter = false;\\n        int spaceCount = 0;\\n\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) == \\' \\' && hasLetter) {\\n                return s.length() - i - spaceCount - 1;\\n            }\\n\\n            if (s.charAt(i) != \\' \\' && !hasLetter) {\\n                hasLetter = true;\\n            }\\n\\n            if (!hasLetter) {\\n                spaceCount++;\\n            }\\n        }\\n\\n        return s.length() - spaceCount;\\n    }"
                    },
                    {
                        "username": "crova27",
                        "content": "just commented to say that I appreciate seeing a one piece reference <3"
                    },
                    {
                        "username": "utkarsh_verma",
                        "content": "can anyone tell what\\'s wrong with this code\\n\\nfor the testcase \"a\" i kept getting the error \" addition of unsigned offset\"\\n\\nint i=s.length()-1,j=s.length()-1,k=0;\\n        if(s.length()==1){\\n            return 1;\\n        }\\n        if(s[i]==\\' \\'){\\n            while(s[i]==\\' \\'){\\n                i--;\\n                k++;\\n            }\\n        }\\n        while(s[i]!=\\' \\'){\\n            i--;\\n        }\\n        return j-i-k;\\n\\n\\n"
                    },
                    {
                        "username": "prameshkumarsaha",
                        "content": "Python:\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        l=[]\\n        listOfWord = list(s.split(\" \"))\\n        for i in range(len(listOfWord)):\\n            if len(listOfWord[i]) != 0:\\n                l.append(listOfWord[i])\\n        lengthOfList = len(l)\\n        lastWord = l[lengthOfList-1]\\n        return len(lastWord)"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "In JavaScript, you can use string methods to get the last word of a string. Here are a few ways you can do this\\n\\nNote that in JavaScript the split() method returns an array, so you can use the filter method and regex to get the filtered element of the array.\\n `lengthOfLastWord = function(s) {\\nconst str = s.split(\" \");\\nconst filteredList = str.filter((a) => { if (!(/\\\\s/g.test(a))){\\n    return a;\\n}})\\nreturn filteredList[filteredList.length - 1].length;\\n};`\\n "
                    },
                    {
                        "username": "krishnadev7",
                        "content": "we can solve this question in C++ using while loop. we need to traverse the string array from backwards.\\n\\nstep1: start from the n-1 of the array.\\n           if i >=0 and s[i] == \\' \\'  are true\\n           then we need to decrement i.\\n\\nstep2: if i<0 then we return 0.\\n\\nstep3: if i>=0 and s[i] != \\' \\'. then we need to increment count. dont forget to intialize count with 0. after that we need to decrement i.\\n"
                    },
                    {
                        "username": "mushroom001",
                        "content": "when did they post this question? or changed the example 3?"
                    },
                    {
                        "username": "deleted_user",
                        "content": "I also want to add new spoilers as a testcase:\\n\"Momonosuke has grown into a big dragon\""
                    },
                    {
                        "username": "elnaznasiri",
                        "content": "It is Sooo very easy\\n\\nI use this solution:\\ndef lenghtOfLastWord(s):\\n    verb = s.split()\\n    return len(verb[-1])"
                    }
                ]
            },
            {
                "id": 1771590,
                "content": [
                    {
                        "username": "hedch",
                        "content": "Single Line Python solution \nhttps://leetcode.com/problems/length-of-last-word/solutions/3112937/single-line-python-solution/"
                    },
                    {
                        "username": "abdumajidabdullatipov1",
                        "content": "      public int lengthOfLastWord(String s) {\\n        boolean hasLetter = false;\\n        int spaceCount = 0;\\n\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) == \\' \\' && hasLetter) {\\n                return s.length() - i - spaceCount - 1;\\n            }\\n\\n            if (s.charAt(i) != \\' \\' && !hasLetter) {\\n                hasLetter = true;\\n            }\\n\\n            if (!hasLetter) {\\n                spaceCount++;\\n            }\\n        }\\n\\n        return s.length() - spaceCount;\\n    }"
                    },
                    {
                        "username": "crova27",
                        "content": "just commented to say that I appreciate seeing a one piece reference <3"
                    },
                    {
                        "username": "utkarsh_verma",
                        "content": "can anyone tell what\\'s wrong with this code\\n\\nfor the testcase \"a\" i kept getting the error \" addition of unsigned offset\"\\n\\nint i=s.length()-1,j=s.length()-1,k=0;\\n        if(s.length()==1){\\n            return 1;\\n        }\\n        if(s[i]==\\' \\'){\\n            while(s[i]==\\' \\'){\\n                i--;\\n                k++;\\n            }\\n        }\\n        while(s[i]!=\\' \\'){\\n            i--;\\n        }\\n        return j-i-k;\\n\\n\\n"
                    },
                    {
                        "username": "prameshkumarsaha",
                        "content": "Python:\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        l=[]\\n        listOfWord = list(s.split(\" \"))\\n        for i in range(len(listOfWord)):\\n            if len(listOfWord[i]) != 0:\\n                l.append(listOfWord[i])\\n        lengthOfList = len(l)\\n        lastWord = l[lengthOfList-1]\\n        return len(lastWord)"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "In JavaScript, you can use string methods to get the last word of a string. Here are a few ways you can do this\\n\\nNote that in JavaScript the split() method returns an array, so you can use the filter method and regex to get the filtered element of the array.\\n `lengthOfLastWord = function(s) {\\nconst str = s.split(\" \");\\nconst filteredList = str.filter((a) => { if (!(/\\\\s/g.test(a))){\\n    return a;\\n}})\\nreturn filteredList[filteredList.length - 1].length;\\n};`\\n "
                    },
                    {
                        "username": "krishnadev7",
                        "content": "we can solve this question in C++ using while loop. we need to traverse the string array from backwards.\\n\\nstep1: start from the n-1 of the array.\\n           if i >=0 and s[i] == \\' \\'  are true\\n           then we need to decrement i.\\n\\nstep2: if i<0 then we return 0.\\n\\nstep3: if i>=0 and s[i] != \\' \\'. then we need to increment count. dont forget to intialize count with 0. after that we need to decrement i.\\n"
                    },
                    {
                        "username": "mushroom001",
                        "content": "when did they post this question? or changed the example 3?"
                    },
                    {
                        "username": "deleted_user",
                        "content": "I also want to add new spoilers as a testcase:\\n\"Momonosuke has grown into a big dragon\""
                    },
                    {
                        "username": "elnaznasiri",
                        "content": "It is Sooo very easy\\n\\nI use this solution:\\ndef lenghtOfLastWord(s):\\n    verb = s.split()\\n    return len(verb[-1])"
                    }
                ]
            },
            {
                "id": 1771263,
                "content": [
                    {
                        "username": "hedch",
                        "content": "Single Line Python solution \nhttps://leetcode.com/problems/length-of-last-word/solutions/3112937/single-line-python-solution/"
                    },
                    {
                        "username": "abdumajidabdullatipov1",
                        "content": "      public int lengthOfLastWord(String s) {\\n        boolean hasLetter = false;\\n        int spaceCount = 0;\\n\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) == \\' \\' && hasLetter) {\\n                return s.length() - i - spaceCount - 1;\\n            }\\n\\n            if (s.charAt(i) != \\' \\' && !hasLetter) {\\n                hasLetter = true;\\n            }\\n\\n            if (!hasLetter) {\\n                spaceCount++;\\n            }\\n        }\\n\\n        return s.length() - spaceCount;\\n    }"
                    },
                    {
                        "username": "crova27",
                        "content": "just commented to say that I appreciate seeing a one piece reference <3"
                    },
                    {
                        "username": "utkarsh_verma",
                        "content": "can anyone tell what\\'s wrong with this code\\n\\nfor the testcase \"a\" i kept getting the error \" addition of unsigned offset\"\\n\\nint i=s.length()-1,j=s.length()-1,k=0;\\n        if(s.length()==1){\\n            return 1;\\n        }\\n        if(s[i]==\\' \\'){\\n            while(s[i]==\\' \\'){\\n                i--;\\n                k++;\\n            }\\n        }\\n        while(s[i]!=\\' \\'){\\n            i--;\\n        }\\n        return j-i-k;\\n\\n\\n"
                    },
                    {
                        "username": "prameshkumarsaha",
                        "content": "Python:\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        l=[]\\n        listOfWord = list(s.split(\" \"))\\n        for i in range(len(listOfWord)):\\n            if len(listOfWord[i]) != 0:\\n                l.append(listOfWord[i])\\n        lengthOfList = len(l)\\n        lastWord = l[lengthOfList-1]\\n        return len(lastWord)"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "In JavaScript, you can use string methods to get the last word of a string. Here are a few ways you can do this\\n\\nNote that in JavaScript the split() method returns an array, so you can use the filter method and regex to get the filtered element of the array.\\n `lengthOfLastWord = function(s) {\\nconst str = s.split(\" \");\\nconst filteredList = str.filter((a) => { if (!(/\\\\s/g.test(a))){\\n    return a;\\n}})\\nreturn filteredList[filteredList.length - 1].length;\\n};`\\n "
                    },
                    {
                        "username": "krishnadev7",
                        "content": "we can solve this question in C++ using while loop. we need to traverse the string array from backwards.\\n\\nstep1: start from the n-1 of the array.\\n           if i >=0 and s[i] == \\' \\'  are true\\n           then we need to decrement i.\\n\\nstep2: if i<0 then we return 0.\\n\\nstep3: if i>=0 and s[i] != \\' \\'. then we need to increment count. dont forget to intialize count with 0. after that we need to decrement i.\\n"
                    },
                    {
                        "username": "mushroom001",
                        "content": "when did they post this question? or changed the example 3?"
                    },
                    {
                        "username": "deleted_user",
                        "content": "I also want to add new spoilers as a testcase:\\n\"Momonosuke has grown into a big dragon\""
                    },
                    {
                        "username": "elnaznasiri",
                        "content": "It is Sooo very easy\\n\\nI use this solution:\\ndef lenghtOfLastWord(s):\\n    verb = s.split()\\n    return len(verb[-1])"
                    }
                ]
            },
            {
                "id": 1769746,
                "content": [
                    {
                        "username": "hedch",
                        "content": "Single Line Python solution \nhttps://leetcode.com/problems/length-of-last-word/solutions/3112937/single-line-python-solution/"
                    },
                    {
                        "username": "abdumajidabdullatipov1",
                        "content": "      public int lengthOfLastWord(String s) {\\n        boolean hasLetter = false;\\n        int spaceCount = 0;\\n\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) == \\' \\' && hasLetter) {\\n                return s.length() - i - spaceCount - 1;\\n            }\\n\\n            if (s.charAt(i) != \\' \\' && !hasLetter) {\\n                hasLetter = true;\\n            }\\n\\n            if (!hasLetter) {\\n                spaceCount++;\\n            }\\n        }\\n\\n        return s.length() - spaceCount;\\n    }"
                    },
                    {
                        "username": "crova27",
                        "content": "just commented to say that I appreciate seeing a one piece reference <3"
                    },
                    {
                        "username": "utkarsh_verma",
                        "content": "can anyone tell what\\'s wrong with this code\\n\\nfor the testcase \"a\" i kept getting the error \" addition of unsigned offset\"\\n\\nint i=s.length()-1,j=s.length()-1,k=0;\\n        if(s.length()==1){\\n            return 1;\\n        }\\n        if(s[i]==\\' \\'){\\n            while(s[i]==\\' \\'){\\n                i--;\\n                k++;\\n            }\\n        }\\n        while(s[i]!=\\' \\'){\\n            i--;\\n        }\\n        return j-i-k;\\n\\n\\n"
                    },
                    {
                        "username": "prameshkumarsaha",
                        "content": "Python:\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        l=[]\\n        listOfWord = list(s.split(\" \"))\\n        for i in range(len(listOfWord)):\\n            if len(listOfWord[i]) != 0:\\n                l.append(listOfWord[i])\\n        lengthOfList = len(l)\\n        lastWord = l[lengthOfList-1]\\n        return len(lastWord)"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "In JavaScript, you can use string methods to get the last word of a string. Here are a few ways you can do this\\n\\nNote that in JavaScript the split() method returns an array, so you can use the filter method and regex to get the filtered element of the array.\\n `lengthOfLastWord = function(s) {\\nconst str = s.split(\" \");\\nconst filteredList = str.filter((a) => { if (!(/\\\\s/g.test(a))){\\n    return a;\\n}})\\nreturn filteredList[filteredList.length - 1].length;\\n};`\\n "
                    },
                    {
                        "username": "krishnadev7",
                        "content": "we can solve this question in C++ using while loop. we need to traverse the string array from backwards.\\n\\nstep1: start from the n-1 of the array.\\n           if i >=0 and s[i] == \\' \\'  are true\\n           then we need to decrement i.\\n\\nstep2: if i<0 then we return 0.\\n\\nstep3: if i>=0 and s[i] != \\' \\'. then we need to increment count. dont forget to intialize count with 0. after that we need to decrement i.\\n"
                    },
                    {
                        "username": "mushroom001",
                        "content": "when did they post this question? or changed the example 3?"
                    },
                    {
                        "username": "deleted_user",
                        "content": "I also want to add new spoilers as a testcase:\\n\"Momonosuke has grown into a big dragon\""
                    },
                    {
                        "username": "elnaznasiri",
                        "content": "It is Sooo very easy\\n\\nI use this solution:\\ndef lenghtOfLastWord(s):\\n    verb = s.split()\\n    return len(verb[-1])"
                    }
                ]
            },
            {
                "id": 1769715,
                "content": [
                    {
                        "username": "hedch",
                        "content": "Single Line Python solution \nhttps://leetcode.com/problems/length-of-last-word/solutions/3112937/single-line-python-solution/"
                    },
                    {
                        "username": "abdumajidabdullatipov1",
                        "content": "      public int lengthOfLastWord(String s) {\\n        boolean hasLetter = false;\\n        int spaceCount = 0;\\n\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) == \\' \\' && hasLetter) {\\n                return s.length() - i - spaceCount - 1;\\n            }\\n\\n            if (s.charAt(i) != \\' \\' && !hasLetter) {\\n                hasLetter = true;\\n            }\\n\\n            if (!hasLetter) {\\n                spaceCount++;\\n            }\\n        }\\n\\n        return s.length() - spaceCount;\\n    }"
                    },
                    {
                        "username": "crova27",
                        "content": "just commented to say that I appreciate seeing a one piece reference <3"
                    },
                    {
                        "username": "utkarsh_verma",
                        "content": "can anyone tell what\\'s wrong with this code\\n\\nfor the testcase \"a\" i kept getting the error \" addition of unsigned offset\"\\n\\nint i=s.length()-1,j=s.length()-1,k=0;\\n        if(s.length()==1){\\n            return 1;\\n        }\\n        if(s[i]==\\' \\'){\\n            while(s[i]==\\' \\'){\\n                i--;\\n                k++;\\n            }\\n        }\\n        while(s[i]!=\\' \\'){\\n            i--;\\n        }\\n        return j-i-k;\\n\\n\\n"
                    },
                    {
                        "username": "prameshkumarsaha",
                        "content": "Python:\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        l=[]\\n        listOfWord = list(s.split(\" \"))\\n        for i in range(len(listOfWord)):\\n            if len(listOfWord[i]) != 0:\\n                l.append(listOfWord[i])\\n        lengthOfList = len(l)\\n        lastWord = l[lengthOfList-1]\\n        return len(lastWord)"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "In JavaScript, you can use string methods to get the last word of a string. Here are a few ways you can do this\\n\\nNote that in JavaScript the split() method returns an array, so you can use the filter method and regex to get the filtered element of the array.\\n `lengthOfLastWord = function(s) {\\nconst str = s.split(\" \");\\nconst filteredList = str.filter((a) => { if (!(/\\\\s/g.test(a))){\\n    return a;\\n}})\\nreturn filteredList[filteredList.length - 1].length;\\n};`\\n "
                    },
                    {
                        "username": "krishnadev7",
                        "content": "we can solve this question in C++ using while loop. we need to traverse the string array from backwards.\\n\\nstep1: start from the n-1 of the array.\\n           if i >=0 and s[i] == \\' \\'  are true\\n           then we need to decrement i.\\n\\nstep2: if i<0 then we return 0.\\n\\nstep3: if i>=0 and s[i] != \\' \\'. then we need to increment count. dont forget to intialize count with 0. after that we need to decrement i.\\n"
                    },
                    {
                        "username": "mushroom001",
                        "content": "when did they post this question? or changed the example 3?"
                    },
                    {
                        "username": "deleted_user",
                        "content": "I also want to add new spoilers as a testcase:\\n\"Momonosuke has grown into a big dragon\""
                    },
                    {
                        "username": "elnaznasiri",
                        "content": "It is Sooo very easy\\n\\nI use this solution:\\ndef lenghtOfLastWord(s):\\n    verb = s.split()\\n    return len(verb[-1])"
                    }
                ]
            },
            {
                "id": 1763895,
                "content": [
                    {
                        "username": "hedch",
                        "content": "Single Line Python solution \nhttps://leetcode.com/problems/length-of-last-word/solutions/3112937/single-line-python-solution/"
                    },
                    {
                        "username": "abdumajidabdullatipov1",
                        "content": "      public int lengthOfLastWord(String s) {\\n        boolean hasLetter = false;\\n        int spaceCount = 0;\\n\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) == \\' \\' && hasLetter) {\\n                return s.length() - i - spaceCount - 1;\\n            }\\n\\n            if (s.charAt(i) != \\' \\' && !hasLetter) {\\n                hasLetter = true;\\n            }\\n\\n            if (!hasLetter) {\\n                spaceCount++;\\n            }\\n        }\\n\\n        return s.length() - spaceCount;\\n    }"
                    },
                    {
                        "username": "crova27",
                        "content": "just commented to say that I appreciate seeing a one piece reference <3"
                    },
                    {
                        "username": "utkarsh_verma",
                        "content": "can anyone tell what\\'s wrong with this code\\n\\nfor the testcase \"a\" i kept getting the error \" addition of unsigned offset\"\\n\\nint i=s.length()-1,j=s.length()-1,k=0;\\n        if(s.length()==1){\\n            return 1;\\n        }\\n        if(s[i]==\\' \\'){\\n            while(s[i]==\\' \\'){\\n                i--;\\n                k++;\\n            }\\n        }\\n        while(s[i]!=\\' \\'){\\n            i--;\\n        }\\n        return j-i-k;\\n\\n\\n"
                    },
                    {
                        "username": "prameshkumarsaha",
                        "content": "Python:\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        l=[]\\n        listOfWord = list(s.split(\" \"))\\n        for i in range(len(listOfWord)):\\n            if len(listOfWord[i]) != 0:\\n                l.append(listOfWord[i])\\n        lengthOfList = len(l)\\n        lastWord = l[lengthOfList-1]\\n        return len(lastWord)"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "In JavaScript, you can use string methods to get the last word of a string. Here are a few ways you can do this\\n\\nNote that in JavaScript the split() method returns an array, so you can use the filter method and regex to get the filtered element of the array.\\n `lengthOfLastWord = function(s) {\\nconst str = s.split(\" \");\\nconst filteredList = str.filter((a) => { if (!(/\\\\s/g.test(a))){\\n    return a;\\n}})\\nreturn filteredList[filteredList.length - 1].length;\\n};`\\n "
                    },
                    {
                        "username": "krishnadev7",
                        "content": "we can solve this question in C++ using while loop. we need to traverse the string array from backwards.\\n\\nstep1: start from the n-1 of the array.\\n           if i >=0 and s[i] == \\' \\'  are true\\n           then we need to decrement i.\\n\\nstep2: if i<0 then we return 0.\\n\\nstep3: if i>=0 and s[i] != \\' \\'. then we need to increment count. dont forget to intialize count with 0. after that we need to decrement i.\\n"
                    },
                    {
                        "username": "mushroom001",
                        "content": "when did they post this question? or changed the example 3?"
                    },
                    {
                        "username": "deleted_user",
                        "content": "I also want to add new spoilers as a testcase:\\n\"Momonosuke has grown into a big dragon\""
                    },
                    {
                        "username": "elnaznasiri",
                        "content": "It is Sooo very easy\\n\\nI use this solution:\\ndef lenghtOfLastWord(s):\\n    verb = s.split()\\n    return len(verb[-1])"
                    }
                ]
            },
            {
                "id": 1762348,
                "content": [
                    {
                        "username": "hedch",
                        "content": "Single Line Python solution \nhttps://leetcode.com/problems/length-of-last-word/solutions/3112937/single-line-python-solution/"
                    },
                    {
                        "username": "abdumajidabdullatipov1",
                        "content": "      public int lengthOfLastWord(String s) {\\n        boolean hasLetter = false;\\n        int spaceCount = 0;\\n\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) == \\' \\' && hasLetter) {\\n                return s.length() - i - spaceCount - 1;\\n            }\\n\\n            if (s.charAt(i) != \\' \\' && !hasLetter) {\\n                hasLetter = true;\\n            }\\n\\n            if (!hasLetter) {\\n                spaceCount++;\\n            }\\n        }\\n\\n        return s.length() - spaceCount;\\n    }"
                    },
                    {
                        "username": "crova27",
                        "content": "just commented to say that I appreciate seeing a one piece reference <3"
                    },
                    {
                        "username": "utkarsh_verma",
                        "content": "can anyone tell what\\'s wrong with this code\\n\\nfor the testcase \"a\" i kept getting the error \" addition of unsigned offset\"\\n\\nint i=s.length()-1,j=s.length()-1,k=0;\\n        if(s.length()==1){\\n            return 1;\\n        }\\n        if(s[i]==\\' \\'){\\n            while(s[i]==\\' \\'){\\n                i--;\\n                k++;\\n            }\\n        }\\n        while(s[i]!=\\' \\'){\\n            i--;\\n        }\\n        return j-i-k;\\n\\n\\n"
                    },
                    {
                        "username": "prameshkumarsaha",
                        "content": "Python:\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        l=[]\\n        listOfWord = list(s.split(\" \"))\\n        for i in range(len(listOfWord)):\\n            if len(listOfWord[i]) != 0:\\n                l.append(listOfWord[i])\\n        lengthOfList = len(l)\\n        lastWord = l[lengthOfList-1]\\n        return len(lastWord)"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "In JavaScript, you can use string methods to get the last word of a string. Here are a few ways you can do this\\n\\nNote that in JavaScript the split() method returns an array, so you can use the filter method and regex to get the filtered element of the array.\\n `lengthOfLastWord = function(s) {\\nconst str = s.split(\" \");\\nconst filteredList = str.filter((a) => { if (!(/\\\\s/g.test(a))){\\n    return a;\\n}})\\nreturn filteredList[filteredList.length - 1].length;\\n};`\\n "
                    },
                    {
                        "username": "krishnadev7",
                        "content": "we can solve this question in C++ using while loop. we need to traverse the string array from backwards.\\n\\nstep1: start from the n-1 of the array.\\n           if i >=0 and s[i] == \\' \\'  are true\\n           then we need to decrement i.\\n\\nstep2: if i<0 then we return 0.\\n\\nstep3: if i>=0 and s[i] != \\' \\'. then we need to increment count. dont forget to intialize count with 0. after that we need to decrement i.\\n"
                    },
                    {
                        "username": "mushroom001",
                        "content": "when did they post this question? or changed the example 3?"
                    },
                    {
                        "username": "deleted_user",
                        "content": "I also want to add new spoilers as a testcase:\\n\"Momonosuke has grown into a big dragon\""
                    },
                    {
                        "username": "elnaznasiri",
                        "content": "It is Sooo very easy\\n\\nI use this solution:\\ndef lenghtOfLastWord(s):\\n    verb = s.split()\\n    return len(verb[-1])"
                    }
                ]
            },
            {
                "id": 1760190,
                "content": [
                    {
                        "username": "hedch",
                        "content": "Single Line Python solution \nhttps://leetcode.com/problems/length-of-last-word/solutions/3112937/single-line-python-solution/"
                    },
                    {
                        "username": "abdumajidabdullatipov1",
                        "content": "      public int lengthOfLastWord(String s) {\\n        boolean hasLetter = false;\\n        int spaceCount = 0;\\n\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) == \\' \\' && hasLetter) {\\n                return s.length() - i - spaceCount - 1;\\n            }\\n\\n            if (s.charAt(i) != \\' \\' && !hasLetter) {\\n                hasLetter = true;\\n            }\\n\\n            if (!hasLetter) {\\n                spaceCount++;\\n            }\\n        }\\n\\n        return s.length() - spaceCount;\\n    }"
                    },
                    {
                        "username": "crova27",
                        "content": "just commented to say that I appreciate seeing a one piece reference <3"
                    },
                    {
                        "username": "utkarsh_verma",
                        "content": "can anyone tell what\\'s wrong with this code\\n\\nfor the testcase \"a\" i kept getting the error \" addition of unsigned offset\"\\n\\nint i=s.length()-1,j=s.length()-1,k=0;\\n        if(s.length()==1){\\n            return 1;\\n        }\\n        if(s[i]==\\' \\'){\\n            while(s[i]==\\' \\'){\\n                i--;\\n                k++;\\n            }\\n        }\\n        while(s[i]!=\\' \\'){\\n            i--;\\n        }\\n        return j-i-k;\\n\\n\\n"
                    },
                    {
                        "username": "prameshkumarsaha",
                        "content": "Python:\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        l=[]\\n        listOfWord = list(s.split(\" \"))\\n        for i in range(len(listOfWord)):\\n            if len(listOfWord[i]) != 0:\\n                l.append(listOfWord[i])\\n        lengthOfList = len(l)\\n        lastWord = l[lengthOfList-1]\\n        return len(lastWord)"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "In JavaScript, you can use string methods to get the last word of a string. Here are a few ways you can do this\\n\\nNote that in JavaScript the split() method returns an array, so you can use the filter method and regex to get the filtered element of the array.\\n `lengthOfLastWord = function(s) {\\nconst str = s.split(\" \");\\nconst filteredList = str.filter((a) => { if (!(/\\\\s/g.test(a))){\\n    return a;\\n}})\\nreturn filteredList[filteredList.length - 1].length;\\n};`\\n "
                    },
                    {
                        "username": "krishnadev7",
                        "content": "we can solve this question in C++ using while loop. we need to traverse the string array from backwards.\\n\\nstep1: start from the n-1 of the array.\\n           if i >=0 and s[i] == \\' \\'  are true\\n           then we need to decrement i.\\n\\nstep2: if i<0 then we return 0.\\n\\nstep3: if i>=0 and s[i] != \\' \\'. then we need to increment count. dont forget to intialize count with 0. after that we need to decrement i.\\n"
                    },
                    {
                        "username": "mushroom001",
                        "content": "when did they post this question? or changed the example 3?"
                    },
                    {
                        "username": "deleted_user",
                        "content": "I also want to add new spoilers as a testcase:\\n\"Momonosuke has grown into a big dragon\""
                    },
                    {
                        "username": "elnaznasiri",
                        "content": "It is Sooo very easy\\n\\nI use this solution:\\ndef lenghtOfLastWord(s):\\n    verb = s.split()\\n    return len(verb[-1])"
                    }
                ]
            },
            {
                "id": 1760153,
                "content": [
                    {
                        "username": "Deepak_8811",
                        "content": "100% Acceptance\\n\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        int i=s.size()-1;\\n        while(i>=0&&s[i]==\\' \\'){\\n            i--;\\n        }\\n        while(i>=0&&s[i]!=\\' \\'){\\n            ans++;\\n            i--;\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "with linear time complexity and const space and explanation\\n\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3035442/python-js-linear-time-explanation/"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "In Python3:\\nHow can a solution with \".split()\" be faster than any solution O(n) running only a while counting the last word size? Like:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        for word in s.split(\\' \\')[::-1]:\\n            if word != \\'\\':\\n                return len(word)\\n```\\nFaster than:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        firstLetter = len(s) -1\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] != \\' \\':\\n                firstLetter = i\\n                break\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] == \\' \\':\\n                return firstLetter - i\\n        return firstLetter+1\\n```\\nand \\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        # trim the trailing spaces\\n        p = len(s) - 1\\n        while p >= 0 and s[p] == \\' \\':\\n            p -= 1\\n\\n        # compute the length of last word\\n        length = 0\\n        while p >= 0 and s[p] != \\' \\':\\n            p -= 1\\n            length += 1\\n        return length\\n```"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "[@ControlAltPete](/ControlAltPete) That makes sense, since Python is interpreted, but it is bad from a learning point of view."
                    },
                    {
                        "username": "ControlAltPete",
                        "content": "You are conceptually correct, scanning from the end backwards to the first space separator is much faster than scanning the entire string for spaces and then counting the last word. Yours is O(n) where n=the length of the last word, the split solution is O(n) where n=the length of the entire string. Both are O(n), but in practice the smaller n will be faster. However, the Python built in functions like split() are orders of magnitude faster than Python code manually scanning the string. So a solution using the builtin split() will be faster than manually counting finding the space. You could create a pathological input string \"a bbb...bbb c\" with a million \"b\"s in the middle where your solution would be faster. "
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || 0 ms || Beats 100% runtime || Easy to understand\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3026790/simple-java-0-ms-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "its_sushmita20",
                        "content": "Veryy Easy Used stringstream logic:)))"
                    },
                    {
                        "username": "gauravj_010902",
                        "content": "cant we do without return statement?"
                    },
                    {
                        "username": "AakashSingh28",
                        "content": " public int lengthOfLastWord(String s) {\\n        String str=s.trim();\\n        String[] arr = str.split(\" \");\\n        return arr[arr.length-1].length();\\n    }"
                    },
                    {
                        "username": "rambhawan",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] str = s.split(\" \");\\n        return (str[str.length-1]).length();\\n    }\\n}"
                    },
                    {
                        "username": "stuartYoung_",
                        "content": "This problem seems to be easy, but bruh  just to match \" a\" and \" a \" cases  \\uD83E\\uDEE5"
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] words = s.split(\"\\\\\\\\s+\");\\n\\t    return words[words.length - 1].length();\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1753010,
                "content": [
                    {
                        "username": "Deepak_8811",
                        "content": "100% Acceptance\\n\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        int i=s.size()-1;\\n        while(i>=0&&s[i]==\\' \\'){\\n            i--;\\n        }\\n        while(i>=0&&s[i]!=\\' \\'){\\n            ans++;\\n            i--;\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "with linear time complexity and const space and explanation\\n\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3035442/python-js-linear-time-explanation/"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "In Python3:\\nHow can a solution with \".split()\" be faster than any solution O(n) running only a while counting the last word size? Like:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        for word in s.split(\\' \\')[::-1]:\\n            if word != \\'\\':\\n                return len(word)\\n```\\nFaster than:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        firstLetter = len(s) -1\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] != \\' \\':\\n                firstLetter = i\\n                break\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] == \\' \\':\\n                return firstLetter - i\\n        return firstLetter+1\\n```\\nand \\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        # trim the trailing spaces\\n        p = len(s) - 1\\n        while p >= 0 and s[p] == \\' \\':\\n            p -= 1\\n\\n        # compute the length of last word\\n        length = 0\\n        while p >= 0 and s[p] != \\' \\':\\n            p -= 1\\n            length += 1\\n        return length\\n```"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "[@ControlAltPete](/ControlAltPete) That makes sense, since Python is interpreted, but it is bad from a learning point of view."
                    },
                    {
                        "username": "ControlAltPete",
                        "content": "You are conceptually correct, scanning from the end backwards to the first space separator is much faster than scanning the entire string for spaces and then counting the last word. Yours is O(n) where n=the length of the last word, the split solution is O(n) where n=the length of the entire string. Both are O(n), but in practice the smaller n will be faster. However, the Python built in functions like split() are orders of magnitude faster than Python code manually scanning the string. So a solution using the builtin split() will be faster than manually counting finding the space. You could create a pathological input string \"a bbb...bbb c\" with a million \"b\"s in the middle where your solution would be faster. "
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || 0 ms || Beats 100% runtime || Easy to understand\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3026790/simple-java-0-ms-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "its_sushmita20",
                        "content": "Veryy Easy Used stringstream logic:)))"
                    },
                    {
                        "username": "gauravj_010902",
                        "content": "cant we do without return statement?"
                    },
                    {
                        "username": "AakashSingh28",
                        "content": " public int lengthOfLastWord(String s) {\\n        String str=s.trim();\\n        String[] arr = str.split(\" \");\\n        return arr[arr.length-1].length();\\n    }"
                    },
                    {
                        "username": "rambhawan",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] str = s.split(\" \");\\n        return (str[str.length-1]).length();\\n    }\\n}"
                    },
                    {
                        "username": "stuartYoung_",
                        "content": "This problem seems to be easy, but bruh  just to match \" a\" and \" a \" cases  \\uD83E\\uDEE5"
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] words = s.split(\"\\\\\\\\s+\");\\n\\t    return words[words.length - 1].length();\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1751603,
                "content": [
                    {
                        "username": "Deepak_8811",
                        "content": "100% Acceptance\\n\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        int i=s.size()-1;\\n        while(i>=0&&s[i]==\\' \\'){\\n            i--;\\n        }\\n        while(i>=0&&s[i]!=\\' \\'){\\n            ans++;\\n            i--;\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "with linear time complexity and const space and explanation\\n\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3035442/python-js-linear-time-explanation/"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "In Python3:\\nHow can a solution with \".split()\" be faster than any solution O(n) running only a while counting the last word size? Like:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        for word in s.split(\\' \\')[::-1]:\\n            if word != \\'\\':\\n                return len(word)\\n```\\nFaster than:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        firstLetter = len(s) -1\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] != \\' \\':\\n                firstLetter = i\\n                break\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] == \\' \\':\\n                return firstLetter - i\\n        return firstLetter+1\\n```\\nand \\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        # trim the trailing spaces\\n        p = len(s) - 1\\n        while p >= 0 and s[p] == \\' \\':\\n            p -= 1\\n\\n        # compute the length of last word\\n        length = 0\\n        while p >= 0 and s[p] != \\' \\':\\n            p -= 1\\n            length += 1\\n        return length\\n```"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "[@ControlAltPete](/ControlAltPete) That makes sense, since Python is interpreted, but it is bad from a learning point of view."
                    },
                    {
                        "username": "ControlAltPete",
                        "content": "You are conceptually correct, scanning from the end backwards to the first space separator is much faster than scanning the entire string for spaces and then counting the last word. Yours is O(n) where n=the length of the last word, the split solution is O(n) where n=the length of the entire string. Both are O(n), but in practice the smaller n will be faster. However, the Python built in functions like split() are orders of magnitude faster than Python code manually scanning the string. So a solution using the builtin split() will be faster than manually counting finding the space. You could create a pathological input string \"a bbb...bbb c\" with a million \"b\"s in the middle where your solution would be faster. "
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || 0 ms || Beats 100% runtime || Easy to understand\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3026790/simple-java-0-ms-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "its_sushmita20",
                        "content": "Veryy Easy Used stringstream logic:)))"
                    },
                    {
                        "username": "gauravj_010902",
                        "content": "cant we do without return statement?"
                    },
                    {
                        "username": "AakashSingh28",
                        "content": " public int lengthOfLastWord(String s) {\\n        String str=s.trim();\\n        String[] arr = str.split(\" \");\\n        return arr[arr.length-1].length();\\n    }"
                    },
                    {
                        "username": "rambhawan",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] str = s.split(\" \");\\n        return (str[str.length-1]).length();\\n    }\\n}"
                    },
                    {
                        "username": "stuartYoung_",
                        "content": "This problem seems to be easy, but bruh  just to match \" a\" and \" a \" cases  \\uD83E\\uDEE5"
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] words = s.split(\"\\\\\\\\s+\");\\n\\t    return words[words.length - 1].length();\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1750225,
                "content": [
                    {
                        "username": "Deepak_8811",
                        "content": "100% Acceptance\\n\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        int i=s.size()-1;\\n        while(i>=0&&s[i]==\\' \\'){\\n            i--;\\n        }\\n        while(i>=0&&s[i]!=\\' \\'){\\n            ans++;\\n            i--;\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "with linear time complexity and const space and explanation\\n\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3035442/python-js-linear-time-explanation/"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "In Python3:\\nHow can a solution with \".split()\" be faster than any solution O(n) running only a while counting the last word size? Like:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        for word in s.split(\\' \\')[::-1]:\\n            if word != \\'\\':\\n                return len(word)\\n```\\nFaster than:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        firstLetter = len(s) -1\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] != \\' \\':\\n                firstLetter = i\\n                break\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] == \\' \\':\\n                return firstLetter - i\\n        return firstLetter+1\\n```\\nand \\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        # trim the trailing spaces\\n        p = len(s) - 1\\n        while p >= 0 and s[p] == \\' \\':\\n            p -= 1\\n\\n        # compute the length of last word\\n        length = 0\\n        while p >= 0 and s[p] != \\' \\':\\n            p -= 1\\n            length += 1\\n        return length\\n```"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "[@ControlAltPete](/ControlAltPete) That makes sense, since Python is interpreted, but it is bad from a learning point of view."
                    },
                    {
                        "username": "ControlAltPete",
                        "content": "You are conceptually correct, scanning from the end backwards to the first space separator is much faster than scanning the entire string for spaces and then counting the last word. Yours is O(n) where n=the length of the last word, the split solution is O(n) where n=the length of the entire string. Both are O(n), but in practice the smaller n will be faster. However, the Python built in functions like split() are orders of magnitude faster than Python code manually scanning the string. So a solution using the builtin split() will be faster than manually counting finding the space. You could create a pathological input string \"a bbb...bbb c\" with a million \"b\"s in the middle where your solution would be faster. "
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || 0 ms || Beats 100% runtime || Easy to understand\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3026790/simple-java-0-ms-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "its_sushmita20",
                        "content": "Veryy Easy Used stringstream logic:)))"
                    },
                    {
                        "username": "gauravj_010902",
                        "content": "cant we do without return statement?"
                    },
                    {
                        "username": "AakashSingh28",
                        "content": " public int lengthOfLastWord(String s) {\\n        String str=s.trim();\\n        String[] arr = str.split(\" \");\\n        return arr[arr.length-1].length();\\n    }"
                    },
                    {
                        "username": "rambhawan",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] str = s.split(\" \");\\n        return (str[str.length-1]).length();\\n    }\\n}"
                    },
                    {
                        "username": "stuartYoung_",
                        "content": "This problem seems to be easy, but bruh  just to match \" a\" and \" a \" cases  \\uD83E\\uDEE5"
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] words = s.split(\"\\\\\\\\s+\");\\n\\t    return words[words.length - 1].length();\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1748587,
                "content": [
                    {
                        "username": "Deepak_8811",
                        "content": "100% Acceptance\\n\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        int i=s.size()-1;\\n        while(i>=0&&s[i]==\\' \\'){\\n            i--;\\n        }\\n        while(i>=0&&s[i]!=\\' \\'){\\n            ans++;\\n            i--;\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "with linear time complexity and const space and explanation\\n\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3035442/python-js-linear-time-explanation/"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "In Python3:\\nHow can a solution with \".split()\" be faster than any solution O(n) running only a while counting the last word size? Like:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        for word in s.split(\\' \\')[::-1]:\\n            if word != \\'\\':\\n                return len(word)\\n```\\nFaster than:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        firstLetter = len(s) -1\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] != \\' \\':\\n                firstLetter = i\\n                break\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] == \\' \\':\\n                return firstLetter - i\\n        return firstLetter+1\\n```\\nand \\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        # trim the trailing spaces\\n        p = len(s) - 1\\n        while p >= 0 and s[p] == \\' \\':\\n            p -= 1\\n\\n        # compute the length of last word\\n        length = 0\\n        while p >= 0 and s[p] != \\' \\':\\n            p -= 1\\n            length += 1\\n        return length\\n```"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "[@ControlAltPete](/ControlAltPete) That makes sense, since Python is interpreted, but it is bad from a learning point of view."
                    },
                    {
                        "username": "ControlAltPete",
                        "content": "You are conceptually correct, scanning from the end backwards to the first space separator is much faster than scanning the entire string for spaces and then counting the last word. Yours is O(n) where n=the length of the last word, the split solution is O(n) where n=the length of the entire string. Both are O(n), but in practice the smaller n will be faster. However, the Python built in functions like split() are orders of magnitude faster than Python code manually scanning the string. So a solution using the builtin split() will be faster than manually counting finding the space. You could create a pathological input string \"a bbb...bbb c\" with a million \"b\"s in the middle where your solution would be faster. "
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || 0 ms || Beats 100% runtime || Easy to understand\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3026790/simple-java-0-ms-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "its_sushmita20",
                        "content": "Veryy Easy Used stringstream logic:)))"
                    },
                    {
                        "username": "gauravj_010902",
                        "content": "cant we do without return statement?"
                    },
                    {
                        "username": "AakashSingh28",
                        "content": " public int lengthOfLastWord(String s) {\\n        String str=s.trim();\\n        String[] arr = str.split(\" \");\\n        return arr[arr.length-1].length();\\n    }"
                    },
                    {
                        "username": "rambhawan",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] str = s.split(\" \");\\n        return (str[str.length-1]).length();\\n    }\\n}"
                    },
                    {
                        "username": "stuartYoung_",
                        "content": "This problem seems to be easy, but bruh  just to match \" a\" and \" a \" cases  \\uD83E\\uDEE5"
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] words = s.split(\"\\\\\\\\s+\");\\n\\t    return words[words.length - 1].length();\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1738612,
                "content": [
                    {
                        "username": "Deepak_8811",
                        "content": "100% Acceptance\\n\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        int i=s.size()-1;\\n        while(i>=0&&s[i]==\\' \\'){\\n            i--;\\n        }\\n        while(i>=0&&s[i]!=\\' \\'){\\n            ans++;\\n            i--;\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "with linear time complexity and const space and explanation\\n\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3035442/python-js-linear-time-explanation/"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "In Python3:\\nHow can a solution with \".split()\" be faster than any solution O(n) running only a while counting the last word size? Like:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        for word in s.split(\\' \\')[::-1]:\\n            if word != \\'\\':\\n                return len(word)\\n```\\nFaster than:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        firstLetter = len(s) -1\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] != \\' \\':\\n                firstLetter = i\\n                break\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] == \\' \\':\\n                return firstLetter - i\\n        return firstLetter+1\\n```\\nand \\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        # trim the trailing spaces\\n        p = len(s) - 1\\n        while p >= 0 and s[p] == \\' \\':\\n            p -= 1\\n\\n        # compute the length of last word\\n        length = 0\\n        while p >= 0 and s[p] != \\' \\':\\n            p -= 1\\n            length += 1\\n        return length\\n```"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "[@ControlAltPete](/ControlAltPete) That makes sense, since Python is interpreted, but it is bad from a learning point of view."
                    },
                    {
                        "username": "ControlAltPete",
                        "content": "You are conceptually correct, scanning from the end backwards to the first space separator is much faster than scanning the entire string for spaces and then counting the last word. Yours is O(n) where n=the length of the last word, the split solution is O(n) where n=the length of the entire string. Both are O(n), but in practice the smaller n will be faster. However, the Python built in functions like split() are orders of magnitude faster than Python code manually scanning the string. So a solution using the builtin split() will be faster than manually counting finding the space. You could create a pathological input string \"a bbb...bbb c\" with a million \"b\"s in the middle where your solution would be faster. "
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || 0 ms || Beats 100% runtime || Easy to understand\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3026790/simple-java-0-ms-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "its_sushmita20",
                        "content": "Veryy Easy Used stringstream logic:)))"
                    },
                    {
                        "username": "gauravj_010902",
                        "content": "cant we do without return statement?"
                    },
                    {
                        "username": "AakashSingh28",
                        "content": " public int lengthOfLastWord(String s) {\\n        String str=s.trim();\\n        String[] arr = str.split(\" \");\\n        return arr[arr.length-1].length();\\n    }"
                    },
                    {
                        "username": "rambhawan",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] str = s.split(\" \");\\n        return (str[str.length-1]).length();\\n    }\\n}"
                    },
                    {
                        "username": "stuartYoung_",
                        "content": "This problem seems to be easy, but bruh  just to match \" a\" and \" a \" cases  \\uD83E\\uDEE5"
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] words = s.split(\"\\\\\\\\s+\");\\n\\t    return words[words.length - 1].length();\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1735551,
                "content": [
                    {
                        "username": "Deepak_8811",
                        "content": "100% Acceptance\\n\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        int i=s.size()-1;\\n        while(i>=0&&s[i]==\\' \\'){\\n            i--;\\n        }\\n        while(i>=0&&s[i]!=\\' \\'){\\n            ans++;\\n            i--;\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "with linear time complexity and const space and explanation\\n\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3035442/python-js-linear-time-explanation/"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "In Python3:\\nHow can a solution with \".split()\" be faster than any solution O(n) running only a while counting the last word size? Like:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        for word in s.split(\\' \\')[::-1]:\\n            if word != \\'\\':\\n                return len(word)\\n```\\nFaster than:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        firstLetter = len(s) -1\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] != \\' \\':\\n                firstLetter = i\\n                break\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] == \\' \\':\\n                return firstLetter - i\\n        return firstLetter+1\\n```\\nand \\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        # trim the trailing spaces\\n        p = len(s) - 1\\n        while p >= 0 and s[p] == \\' \\':\\n            p -= 1\\n\\n        # compute the length of last word\\n        length = 0\\n        while p >= 0 and s[p] != \\' \\':\\n            p -= 1\\n            length += 1\\n        return length\\n```"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "[@ControlAltPete](/ControlAltPete) That makes sense, since Python is interpreted, but it is bad from a learning point of view."
                    },
                    {
                        "username": "ControlAltPete",
                        "content": "You are conceptually correct, scanning from the end backwards to the first space separator is much faster than scanning the entire string for spaces and then counting the last word. Yours is O(n) where n=the length of the last word, the split solution is O(n) where n=the length of the entire string. Both are O(n), but in practice the smaller n will be faster. However, the Python built in functions like split() are orders of magnitude faster than Python code manually scanning the string. So a solution using the builtin split() will be faster than manually counting finding the space. You could create a pathological input string \"a bbb...bbb c\" with a million \"b\"s in the middle where your solution would be faster. "
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || 0 ms || Beats 100% runtime || Easy to understand\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3026790/simple-java-0-ms-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "its_sushmita20",
                        "content": "Veryy Easy Used stringstream logic:)))"
                    },
                    {
                        "username": "gauravj_010902",
                        "content": "cant we do without return statement?"
                    },
                    {
                        "username": "AakashSingh28",
                        "content": " public int lengthOfLastWord(String s) {\\n        String str=s.trim();\\n        String[] arr = str.split(\" \");\\n        return arr[arr.length-1].length();\\n    }"
                    },
                    {
                        "username": "rambhawan",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] str = s.split(\" \");\\n        return (str[str.length-1]).length();\\n    }\\n}"
                    },
                    {
                        "username": "stuartYoung_",
                        "content": "This problem seems to be easy, but bruh  just to match \" a\" and \" a \" cases  \\uD83E\\uDEE5"
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] words = s.split(\"\\\\\\\\s+\");\\n\\t    return words[words.length - 1].length();\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1729353,
                "content": [
                    {
                        "username": "Deepak_8811",
                        "content": "100% Acceptance\\n\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        int i=s.size()-1;\\n        while(i>=0&&s[i]==\\' \\'){\\n            i--;\\n        }\\n        while(i>=0&&s[i]!=\\' \\'){\\n            ans++;\\n            i--;\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "with linear time complexity and const space and explanation\\n\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3035442/python-js-linear-time-explanation/"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "In Python3:\\nHow can a solution with \".split()\" be faster than any solution O(n) running only a while counting the last word size? Like:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        for word in s.split(\\' \\')[::-1]:\\n            if word != \\'\\':\\n                return len(word)\\n```\\nFaster than:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        firstLetter = len(s) -1\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] != \\' \\':\\n                firstLetter = i\\n                break\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] == \\' \\':\\n                return firstLetter - i\\n        return firstLetter+1\\n```\\nand \\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        # trim the trailing spaces\\n        p = len(s) - 1\\n        while p >= 0 and s[p] == \\' \\':\\n            p -= 1\\n\\n        # compute the length of last word\\n        length = 0\\n        while p >= 0 and s[p] != \\' \\':\\n            p -= 1\\n            length += 1\\n        return length\\n```"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "[@ControlAltPete](/ControlAltPete) That makes sense, since Python is interpreted, but it is bad from a learning point of view."
                    },
                    {
                        "username": "ControlAltPete",
                        "content": "You are conceptually correct, scanning from the end backwards to the first space separator is much faster than scanning the entire string for spaces and then counting the last word. Yours is O(n) where n=the length of the last word, the split solution is O(n) where n=the length of the entire string. Both are O(n), but in practice the smaller n will be faster. However, the Python built in functions like split() are orders of magnitude faster than Python code manually scanning the string. So a solution using the builtin split() will be faster than manually counting finding the space. You could create a pathological input string \"a bbb...bbb c\" with a million \"b\"s in the middle where your solution would be faster. "
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || 0 ms || Beats 100% runtime || Easy to understand\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3026790/simple-java-0-ms-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "its_sushmita20",
                        "content": "Veryy Easy Used stringstream logic:)))"
                    },
                    {
                        "username": "gauravj_010902",
                        "content": "cant we do without return statement?"
                    },
                    {
                        "username": "AakashSingh28",
                        "content": " public int lengthOfLastWord(String s) {\\n        String str=s.trim();\\n        String[] arr = str.split(\" \");\\n        return arr[arr.length-1].length();\\n    }"
                    },
                    {
                        "username": "rambhawan",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] str = s.split(\" \");\\n        return (str[str.length-1]).length();\\n    }\\n}"
                    },
                    {
                        "username": "stuartYoung_",
                        "content": "This problem seems to be easy, but bruh  just to match \" a\" and \" a \" cases  \\uD83E\\uDEE5"
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] words = s.split(\"\\\\\\\\s+\");\\n\\t    return words[words.length - 1].length();\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1726601,
                "content": [
                    {
                        "username": "Deepak_8811",
                        "content": "100% Acceptance\\n\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        int i=s.size()-1;\\n        while(i>=0&&s[i]==\\' \\'){\\n            i--;\\n        }\\n        while(i>=0&&s[i]!=\\' \\'){\\n            ans++;\\n            i--;\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "with linear time complexity and const space and explanation\\n\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3035442/python-js-linear-time-explanation/"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "In Python3:\\nHow can a solution with \".split()\" be faster than any solution O(n) running only a while counting the last word size? Like:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        for word in s.split(\\' \\')[::-1]:\\n            if word != \\'\\':\\n                return len(word)\\n```\\nFaster than:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        firstLetter = len(s) -1\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] != \\' \\':\\n                firstLetter = i\\n                break\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] == \\' \\':\\n                return firstLetter - i\\n        return firstLetter+1\\n```\\nand \\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        # trim the trailing spaces\\n        p = len(s) - 1\\n        while p >= 0 and s[p] == \\' \\':\\n            p -= 1\\n\\n        # compute the length of last word\\n        length = 0\\n        while p >= 0 and s[p] != \\' \\':\\n            p -= 1\\n            length += 1\\n        return length\\n```"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "[@ControlAltPete](/ControlAltPete) That makes sense, since Python is interpreted, but it is bad from a learning point of view."
                    },
                    {
                        "username": "ControlAltPete",
                        "content": "You are conceptually correct, scanning from the end backwards to the first space separator is much faster than scanning the entire string for spaces and then counting the last word. Yours is O(n) where n=the length of the last word, the split solution is O(n) where n=the length of the entire string. Both are O(n), but in practice the smaller n will be faster. However, the Python built in functions like split() are orders of magnitude faster than Python code manually scanning the string. So a solution using the builtin split() will be faster than manually counting finding the space. You could create a pathological input string \"a bbb...bbb c\" with a million \"b\"s in the middle where your solution would be faster. "
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || 0 ms || Beats 100% runtime || Easy to understand\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3026790/simple-java-0-ms-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "its_sushmita20",
                        "content": "Veryy Easy Used stringstream logic:)))"
                    },
                    {
                        "username": "gauravj_010902",
                        "content": "cant we do without return statement?"
                    },
                    {
                        "username": "AakashSingh28",
                        "content": " public int lengthOfLastWord(String s) {\\n        String str=s.trim();\\n        String[] arr = str.split(\" \");\\n        return arr[arr.length-1].length();\\n    }"
                    },
                    {
                        "username": "rambhawan",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] str = s.split(\" \");\\n        return (str[str.length-1]).length();\\n    }\\n}"
                    },
                    {
                        "username": "stuartYoung_",
                        "content": "This problem seems to be easy, but bruh  just to match \" a\" and \" a \" cases  \\uD83E\\uDEE5"
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] words = s.split(\"\\\\\\\\s+\");\\n\\t    return words[words.length - 1].length();\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1725405,
                "content": [
                    {
                        "username": "Deepak_8811",
                        "content": "100% Acceptance\\n\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        int i=s.size()-1;\\n        while(i>=0&&s[i]==\\' \\'){\\n            i--;\\n        }\\n        while(i>=0&&s[i]!=\\' \\'){\\n            ans++;\\n            i--;\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "with linear time complexity and const space and explanation\\n\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3035442/python-js-linear-time-explanation/"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "In Python3:\\nHow can a solution with \".split()\" be faster than any solution O(n) running only a while counting the last word size? Like:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        for word in s.split(\\' \\')[::-1]:\\n            if word != \\'\\':\\n                return len(word)\\n```\\nFaster than:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        firstLetter = len(s) -1\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] != \\' \\':\\n                firstLetter = i\\n                break\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] == \\' \\':\\n                return firstLetter - i\\n        return firstLetter+1\\n```\\nand \\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        # trim the trailing spaces\\n        p = len(s) - 1\\n        while p >= 0 and s[p] == \\' \\':\\n            p -= 1\\n\\n        # compute the length of last word\\n        length = 0\\n        while p >= 0 and s[p] != \\' \\':\\n            p -= 1\\n            length += 1\\n        return length\\n```"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "[@ControlAltPete](/ControlAltPete) That makes sense, since Python is interpreted, but it is bad from a learning point of view."
                    },
                    {
                        "username": "ControlAltPete",
                        "content": "You are conceptually correct, scanning from the end backwards to the first space separator is much faster than scanning the entire string for spaces and then counting the last word. Yours is O(n) where n=the length of the last word, the split solution is O(n) where n=the length of the entire string. Both are O(n), but in practice the smaller n will be faster. However, the Python built in functions like split() are orders of magnitude faster than Python code manually scanning the string. So a solution using the builtin split() will be faster than manually counting finding the space. You could create a pathological input string \"a bbb...bbb c\" with a million \"b\"s in the middle where your solution would be faster. "
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || 0 ms || Beats 100% runtime || Easy to understand\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3026790/simple-java-0-ms-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "its_sushmita20",
                        "content": "Veryy Easy Used stringstream logic:)))"
                    },
                    {
                        "username": "gauravj_010902",
                        "content": "cant we do without return statement?"
                    },
                    {
                        "username": "AakashSingh28",
                        "content": " public int lengthOfLastWord(String s) {\\n        String str=s.trim();\\n        String[] arr = str.split(\" \");\\n        return arr[arr.length-1].length();\\n    }"
                    },
                    {
                        "username": "rambhawan",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] str = s.split(\" \");\\n        return (str[str.length-1]).length();\\n    }\\n}"
                    },
                    {
                        "username": "stuartYoung_",
                        "content": "This problem seems to be easy, but bruh  just to match \" a\" and \" a \" cases  \\uD83E\\uDEE5"
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] words = s.split(\"\\\\\\\\s+\");\\n\\t    return words[words.length - 1].length();\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1724227,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/58_length_of_last_words.cpp"
                    },
                    {
                        "username": "Draklife",
                        "content": "why this code return 0 :please answer\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        bool ok=false;\\n        int len=s.size()-1;\\n        for(int i=len;i>=0;--i){\\n           if(s[i] != \\' \\'){ ans++;}\\n  }\\n  return ans;\\n    }\\n};\\n"
                    },
                    {
                        "username": "Stuti-Bansal",
                        "content": "because ans is  initialized with 0 and in if condition since ok will be true it is not getting  increamented, their will also be else if condition"
                    },
                    {
                        "username": "poweracoon",
                        "content": "def lengthOfLastWord(self, s: str) -> int:\\n        empty_string = \"\"\\n        empty_list = []\\n\\n        for letters in s:\\n            if letters.isalpha() == True:\\n                empty_string = letters + empty_string\\n            else:\\n                empty_list.append(empty_string)\\n                empty_string = \"\"\\n            continue\\n        return len(empty_list[-1])\\n\\nWHAT IS WRONG WITH THIS CODE?\\n"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "When i write the below code i am getting Runt time error how to resolve it?\\n     \\n    int size = s.size();\\n    if (s.empty())\\n        return 0;\\n    int count=0;\\n    for(int i=size-1;s[i]>0;i--)\\n    {\\n        if(s[i]!=\\' \\'){\\n            count++;\\n            if(s[i-1]==\\' \\'){\\n                break;\\n            }\\n        }\\n    }\\n    return count;"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "[@Last-Autumn-Leaf](/Last-Autumn-Leaf) Thank you i did this way its running in online ide but still getting an error.(run time error)\n int size = s.size();\n    int count=0;\n    \n    for(int i=size-1;i>=0;i--)\n    {\n        if(s[i]!=' '){\n            count++;\n            if(s[i-1]==' '){\n                break;\n            }\n        }\n    }\n\n    return count;\n    }\nCan you please share the code so that i can refer it?"
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Hello your code is really code :\nJust correct this line  :\n   for(int i=size-1;s[i]>0;i--)\nwith :\n   for(int i=size-1;i>0;i--)\nand check corner case for when then input =='a' or \"a \""
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Luffy is still joyboy is a One piece Spoiler "
                    },
                    {
                        "username": "user8798U",
                        "content": "If I do `len(s.split()[-1])`, the code runs really quickly, it comes in at faster than basically everything. If I do something clever, starting at the end of the word and working backwards until I've found the start of the last word, it comes in much slower. But the former is O(n) (in the best case), while the latter is O(m), where m is the length of the last word plus trailing whitespace, which is O(n) in the worst case and O(1) in the best case. So I don't understand why the split method comes out as faster."
                    },
                    {
                        "username": "shoshinsha_coder",
                        "content": "My code is pretty simple I just made a variable for the start of the last word if \"seen\" set to 1, or 0 if not yet seen. Then I set a variable for character count. Then I made a simple for loop starting from the end of the string and worked my way back, continuing the loop if spaces are encountered and breaking out of the loop if the last word count has started and the next character is a space. check it out - > /**\\nvar lengthOfLastWord = function(s) {\\n    let charCnt = 0;\\n    let seen = 0;\\n    for(let i = s.length-1; i > -1; i--) {\\n        if(s[i] !== \" \") {\\n            charCnt++;\\n            seen == 1;\\n             } else if(s[i] == \" \") {\\n                    continue;\\n                }\\n                if(s[i-1] == \" \") {\\n                    break;\\n                }\\n    }\\n        return charCnt;\\n};"
                    },
                    {
                        "username": "Abhishek_Rookie",
                        "content": " public int lengthOfLastWord(String str) {\\n        str = str.trim() ;\\n        Stack <Integer> stk = new Stack<>() ;\\n        for(int i = 0 ; i < str.length() ; i ++) {\\n            if(str.charAt(i) == \\' \\') {\\n                stk.push(i) ;\\n            }\\n        }\\n        if(stk.isEmpty()){\\n            return str.length() ;\\n        }\\n        int k = stk.pop() + 1;\\n        String $str = str.substring(k) ;\\n\\n        return $str.length() ;\\n    }\\n\\nThats\\'it  fellas !"
                    },
                    {
                        "username": "mdmasidulhasan27",
                        "content": "1. get length-1\\n2. move to the last character which is not \\' \\' space traversing from last.\\n3. traverse from last character until you get another space and count \\n4. print the counted value.\\n\\nyou are done :)"
                    },
                    {
                        "username": "msauer22",
                        "content": "Will not work. See the case if the word is \"a\".\n1) length-1 = 0\n2) would end at index 0\n3) would still be at index 0\n4) counting from 0 to 0 is 0 but expected result is 1\n\nYour solution does work in general but you have these edge cases, where it just doesnt add up well. \nYou can however solve that problem by \"if (l == r) { return 1; }\""
                    },
                    {
                        "username": "denniskozevnikoff",
                        "content": "Java: \n\n\n    class Solution {\n        public int lengthOfLastWord(String s) {\n        \n        //trim space at the beginning / end\n        String ss = s.trim();\n        //split the string into an array\n        String[] words = ss.split(\" \");\n        //get the last element in the array\n        String last_word = words[words.length-1];\n        //get the element length\n        int last_word_len = last_word.length();\n\n        return last_word_len;\n        }\n    }"
                    }
                ]
            },
            {
                "id": 1722779,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/58_length_of_last_words.cpp"
                    },
                    {
                        "username": "Draklife",
                        "content": "why this code return 0 :please answer\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        bool ok=false;\\n        int len=s.size()-1;\\n        for(int i=len;i>=0;--i){\\n           if(s[i] != \\' \\'){ ans++;}\\n  }\\n  return ans;\\n    }\\n};\\n"
                    },
                    {
                        "username": "Stuti-Bansal",
                        "content": "because ans is  initialized with 0 and in if condition since ok will be true it is not getting  increamented, their will also be else if condition"
                    },
                    {
                        "username": "poweracoon",
                        "content": "def lengthOfLastWord(self, s: str) -> int:\\n        empty_string = \"\"\\n        empty_list = []\\n\\n        for letters in s:\\n            if letters.isalpha() == True:\\n                empty_string = letters + empty_string\\n            else:\\n                empty_list.append(empty_string)\\n                empty_string = \"\"\\n            continue\\n        return len(empty_list[-1])\\n\\nWHAT IS WRONG WITH THIS CODE?\\n"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "When i write the below code i am getting Runt time error how to resolve it?\\n     \\n    int size = s.size();\\n    if (s.empty())\\n        return 0;\\n    int count=0;\\n    for(int i=size-1;s[i]>0;i--)\\n    {\\n        if(s[i]!=\\' \\'){\\n            count++;\\n            if(s[i-1]==\\' \\'){\\n                break;\\n            }\\n        }\\n    }\\n    return count;"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "[@Last-Autumn-Leaf](/Last-Autumn-Leaf) Thank you i did this way its running in online ide but still getting an error.(run time error)\n int size = s.size();\n    int count=0;\n    \n    for(int i=size-1;i>=0;i--)\n    {\n        if(s[i]!=' '){\n            count++;\n            if(s[i-1]==' '){\n                break;\n            }\n        }\n    }\n\n    return count;\n    }\nCan you please share the code so that i can refer it?"
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Hello your code is really code :\nJust correct this line  :\n   for(int i=size-1;s[i]>0;i--)\nwith :\n   for(int i=size-1;i>0;i--)\nand check corner case for when then input =='a' or \"a \""
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Luffy is still joyboy is a One piece Spoiler "
                    },
                    {
                        "username": "user8798U",
                        "content": "If I do `len(s.split()[-1])`, the code runs really quickly, it comes in at faster than basically everything. If I do something clever, starting at the end of the word and working backwards until I've found the start of the last word, it comes in much slower. But the former is O(n) (in the best case), while the latter is O(m), where m is the length of the last word plus trailing whitespace, which is O(n) in the worst case and O(1) in the best case. So I don't understand why the split method comes out as faster."
                    },
                    {
                        "username": "shoshinsha_coder",
                        "content": "My code is pretty simple I just made a variable for the start of the last word if \"seen\" set to 1, or 0 if not yet seen. Then I set a variable for character count. Then I made a simple for loop starting from the end of the string and worked my way back, continuing the loop if spaces are encountered and breaking out of the loop if the last word count has started and the next character is a space. check it out - > /**\\nvar lengthOfLastWord = function(s) {\\n    let charCnt = 0;\\n    let seen = 0;\\n    for(let i = s.length-1; i > -1; i--) {\\n        if(s[i] !== \" \") {\\n            charCnt++;\\n            seen == 1;\\n             } else if(s[i] == \" \") {\\n                    continue;\\n                }\\n                if(s[i-1] == \" \") {\\n                    break;\\n                }\\n    }\\n        return charCnt;\\n};"
                    },
                    {
                        "username": "Abhishek_Rookie",
                        "content": " public int lengthOfLastWord(String str) {\\n        str = str.trim() ;\\n        Stack <Integer> stk = new Stack<>() ;\\n        for(int i = 0 ; i < str.length() ; i ++) {\\n            if(str.charAt(i) == \\' \\') {\\n                stk.push(i) ;\\n            }\\n        }\\n        if(stk.isEmpty()){\\n            return str.length() ;\\n        }\\n        int k = stk.pop() + 1;\\n        String $str = str.substring(k) ;\\n\\n        return $str.length() ;\\n    }\\n\\nThats\\'it  fellas !"
                    },
                    {
                        "username": "mdmasidulhasan27",
                        "content": "1. get length-1\\n2. move to the last character which is not \\' \\' space traversing from last.\\n3. traverse from last character until you get another space and count \\n4. print the counted value.\\n\\nyou are done :)"
                    },
                    {
                        "username": "msauer22",
                        "content": "Will not work. See the case if the word is \"a\".\n1) length-1 = 0\n2) would end at index 0\n3) would still be at index 0\n4) counting from 0 to 0 is 0 but expected result is 1\n\nYour solution does work in general but you have these edge cases, where it just doesnt add up well. \nYou can however solve that problem by \"if (l == r) { return 1; }\""
                    },
                    {
                        "username": "denniskozevnikoff",
                        "content": "Java: \n\n\n    class Solution {\n        public int lengthOfLastWord(String s) {\n        \n        //trim space at the beginning / end\n        String ss = s.trim();\n        //split the string into an array\n        String[] words = ss.split(\" \");\n        //get the last element in the array\n        String last_word = words[words.length-1];\n        //get the element length\n        int last_word_len = last_word.length();\n\n        return last_word_len;\n        }\n    }"
                    }
                ]
            },
            {
                "id": 1716840,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/58_length_of_last_words.cpp"
                    },
                    {
                        "username": "Draklife",
                        "content": "why this code return 0 :please answer\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        bool ok=false;\\n        int len=s.size()-1;\\n        for(int i=len;i>=0;--i){\\n           if(s[i] != \\' \\'){ ans++;}\\n  }\\n  return ans;\\n    }\\n};\\n"
                    },
                    {
                        "username": "Stuti-Bansal",
                        "content": "because ans is  initialized with 0 and in if condition since ok will be true it is not getting  increamented, their will also be else if condition"
                    },
                    {
                        "username": "poweracoon",
                        "content": "def lengthOfLastWord(self, s: str) -> int:\\n        empty_string = \"\"\\n        empty_list = []\\n\\n        for letters in s:\\n            if letters.isalpha() == True:\\n                empty_string = letters + empty_string\\n            else:\\n                empty_list.append(empty_string)\\n                empty_string = \"\"\\n            continue\\n        return len(empty_list[-1])\\n\\nWHAT IS WRONG WITH THIS CODE?\\n"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "When i write the below code i am getting Runt time error how to resolve it?\\n     \\n    int size = s.size();\\n    if (s.empty())\\n        return 0;\\n    int count=0;\\n    for(int i=size-1;s[i]>0;i--)\\n    {\\n        if(s[i]!=\\' \\'){\\n            count++;\\n            if(s[i-1]==\\' \\'){\\n                break;\\n            }\\n        }\\n    }\\n    return count;"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "[@Last-Autumn-Leaf](/Last-Autumn-Leaf) Thank you i did this way its running in online ide but still getting an error.(run time error)\n int size = s.size();\n    int count=0;\n    \n    for(int i=size-1;i>=0;i--)\n    {\n        if(s[i]!=' '){\n            count++;\n            if(s[i-1]==' '){\n                break;\n            }\n        }\n    }\n\n    return count;\n    }\nCan you please share the code so that i can refer it?"
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Hello your code is really code :\nJust correct this line  :\n   for(int i=size-1;s[i]>0;i--)\nwith :\n   for(int i=size-1;i>0;i--)\nand check corner case for when then input =='a' or \"a \""
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Luffy is still joyboy is a One piece Spoiler "
                    },
                    {
                        "username": "user8798U",
                        "content": "If I do `len(s.split()[-1])`, the code runs really quickly, it comes in at faster than basically everything. If I do something clever, starting at the end of the word and working backwards until I've found the start of the last word, it comes in much slower. But the former is O(n) (in the best case), while the latter is O(m), where m is the length of the last word plus trailing whitespace, which is O(n) in the worst case and O(1) in the best case. So I don't understand why the split method comes out as faster."
                    },
                    {
                        "username": "shoshinsha_coder",
                        "content": "My code is pretty simple I just made a variable for the start of the last word if \"seen\" set to 1, or 0 if not yet seen. Then I set a variable for character count. Then I made a simple for loop starting from the end of the string and worked my way back, continuing the loop if spaces are encountered and breaking out of the loop if the last word count has started and the next character is a space. check it out - > /**\\nvar lengthOfLastWord = function(s) {\\n    let charCnt = 0;\\n    let seen = 0;\\n    for(let i = s.length-1; i > -1; i--) {\\n        if(s[i] !== \" \") {\\n            charCnt++;\\n            seen == 1;\\n             } else if(s[i] == \" \") {\\n                    continue;\\n                }\\n                if(s[i-1] == \" \") {\\n                    break;\\n                }\\n    }\\n        return charCnt;\\n};"
                    },
                    {
                        "username": "Abhishek_Rookie",
                        "content": " public int lengthOfLastWord(String str) {\\n        str = str.trim() ;\\n        Stack <Integer> stk = new Stack<>() ;\\n        for(int i = 0 ; i < str.length() ; i ++) {\\n            if(str.charAt(i) == \\' \\') {\\n                stk.push(i) ;\\n            }\\n        }\\n        if(stk.isEmpty()){\\n            return str.length() ;\\n        }\\n        int k = stk.pop() + 1;\\n        String $str = str.substring(k) ;\\n\\n        return $str.length() ;\\n    }\\n\\nThats\\'it  fellas !"
                    },
                    {
                        "username": "mdmasidulhasan27",
                        "content": "1. get length-1\\n2. move to the last character which is not \\' \\' space traversing from last.\\n3. traverse from last character until you get another space and count \\n4. print the counted value.\\n\\nyou are done :)"
                    },
                    {
                        "username": "msauer22",
                        "content": "Will not work. See the case if the word is \"a\".\n1) length-1 = 0\n2) would end at index 0\n3) would still be at index 0\n4) counting from 0 to 0 is 0 but expected result is 1\n\nYour solution does work in general but you have these edge cases, where it just doesnt add up well. \nYou can however solve that problem by \"if (l == r) { return 1; }\""
                    },
                    {
                        "username": "denniskozevnikoff",
                        "content": "Java: \n\n\n    class Solution {\n        public int lengthOfLastWord(String s) {\n        \n        //trim space at the beginning / end\n        String ss = s.trim();\n        //split the string into an array\n        String[] words = ss.split(\" \");\n        //get the last element in the array\n        String last_word = words[words.length-1];\n        //get the element length\n        int last_word_len = last_word.length();\n\n        return last_word_len;\n        }\n    }"
                    }
                ]
            },
            {
                "id": 1710538,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/58_length_of_last_words.cpp"
                    },
                    {
                        "username": "Draklife",
                        "content": "why this code return 0 :please answer\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        bool ok=false;\\n        int len=s.size()-1;\\n        for(int i=len;i>=0;--i){\\n           if(s[i] != \\' \\'){ ans++;}\\n  }\\n  return ans;\\n    }\\n};\\n"
                    },
                    {
                        "username": "Stuti-Bansal",
                        "content": "because ans is  initialized with 0 and in if condition since ok will be true it is not getting  increamented, their will also be else if condition"
                    },
                    {
                        "username": "poweracoon",
                        "content": "def lengthOfLastWord(self, s: str) -> int:\\n        empty_string = \"\"\\n        empty_list = []\\n\\n        for letters in s:\\n            if letters.isalpha() == True:\\n                empty_string = letters + empty_string\\n            else:\\n                empty_list.append(empty_string)\\n                empty_string = \"\"\\n            continue\\n        return len(empty_list[-1])\\n\\nWHAT IS WRONG WITH THIS CODE?\\n"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "When i write the below code i am getting Runt time error how to resolve it?\\n     \\n    int size = s.size();\\n    if (s.empty())\\n        return 0;\\n    int count=0;\\n    for(int i=size-1;s[i]>0;i--)\\n    {\\n        if(s[i]!=\\' \\'){\\n            count++;\\n            if(s[i-1]==\\' \\'){\\n                break;\\n            }\\n        }\\n    }\\n    return count;"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "[@Last-Autumn-Leaf](/Last-Autumn-Leaf) Thank you i did this way its running in online ide but still getting an error.(run time error)\n int size = s.size();\n    int count=0;\n    \n    for(int i=size-1;i>=0;i--)\n    {\n        if(s[i]!=' '){\n            count++;\n            if(s[i-1]==' '){\n                break;\n            }\n        }\n    }\n\n    return count;\n    }\nCan you please share the code so that i can refer it?"
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Hello your code is really code :\nJust correct this line  :\n   for(int i=size-1;s[i]>0;i--)\nwith :\n   for(int i=size-1;i>0;i--)\nand check corner case for when then input =='a' or \"a \""
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Luffy is still joyboy is a One piece Spoiler "
                    },
                    {
                        "username": "user8798U",
                        "content": "If I do `len(s.split()[-1])`, the code runs really quickly, it comes in at faster than basically everything. If I do something clever, starting at the end of the word and working backwards until I've found the start of the last word, it comes in much slower. But the former is O(n) (in the best case), while the latter is O(m), where m is the length of the last word plus trailing whitespace, which is O(n) in the worst case and O(1) in the best case. So I don't understand why the split method comes out as faster."
                    },
                    {
                        "username": "shoshinsha_coder",
                        "content": "My code is pretty simple I just made a variable for the start of the last word if \"seen\" set to 1, or 0 if not yet seen. Then I set a variable for character count. Then I made a simple for loop starting from the end of the string and worked my way back, continuing the loop if spaces are encountered and breaking out of the loop if the last word count has started and the next character is a space. check it out - > /**\\nvar lengthOfLastWord = function(s) {\\n    let charCnt = 0;\\n    let seen = 0;\\n    for(let i = s.length-1; i > -1; i--) {\\n        if(s[i] !== \" \") {\\n            charCnt++;\\n            seen == 1;\\n             } else if(s[i] == \" \") {\\n                    continue;\\n                }\\n                if(s[i-1] == \" \") {\\n                    break;\\n                }\\n    }\\n        return charCnt;\\n};"
                    },
                    {
                        "username": "Abhishek_Rookie",
                        "content": " public int lengthOfLastWord(String str) {\\n        str = str.trim() ;\\n        Stack <Integer> stk = new Stack<>() ;\\n        for(int i = 0 ; i < str.length() ; i ++) {\\n            if(str.charAt(i) == \\' \\') {\\n                stk.push(i) ;\\n            }\\n        }\\n        if(stk.isEmpty()){\\n            return str.length() ;\\n        }\\n        int k = stk.pop() + 1;\\n        String $str = str.substring(k) ;\\n\\n        return $str.length() ;\\n    }\\n\\nThats\\'it  fellas !"
                    },
                    {
                        "username": "mdmasidulhasan27",
                        "content": "1. get length-1\\n2. move to the last character which is not \\' \\' space traversing from last.\\n3. traverse from last character until you get another space and count \\n4. print the counted value.\\n\\nyou are done :)"
                    },
                    {
                        "username": "msauer22",
                        "content": "Will not work. See the case if the word is \"a\".\n1) length-1 = 0\n2) would end at index 0\n3) would still be at index 0\n4) counting from 0 to 0 is 0 but expected result is 1\n\nYour solution does work in general but you have these edge cases, where it just doesnt add up well. \nYou can however solve that problem by \"if (l == r) { return 1; }\""
                    },
                    {
                        "username": "denniskozevnikoff",
                        "content": "Java: \n\n\n    class Solution {\n        public int lengthOfLastWord(String s) {\n        \n        //trim space at the beginning / end\n        String ss = s.trim();\n        //split the string into an array\n        String[] words = ss.split(\" \");\n        //get the last element in the array\n        String last_word = words[words.length-1];\n        //get the element length\n        int last_word_len = last_word.length();\n\n        return last_word_len;\n        }\n    }"
                    }
                ]
            },
            {
                "id": 1710362,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/58_length_of_last_words.cpp"
                    },
                    {
                        "username": "Draklife",
                        "content": "why this code return 0 :please answer\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        bool ok=false;\\n        int len=s.size()-1;\\n        for(int i=len;i>=0;--i){\\n           if(s[i] != \\' \\'){ ans++;}\\n  }\\n  return ans;\\n    }\\n};\\n"
                    },
                    {
                        "username": "Stuti-Bansal",
                        "content": "because ans is  initialized with 0 and in if condition since ok will be true it is not getting  increamented, their will also be else if condition"
                    },
                    {
                        "username": "poweracoon",
                        "content": "def lengthOfLastWord(self, s: str) -> int:\\n        empty_string = \"\"\\n        empty_list = []\\n\\n        for letters in s:\\n            if letters.isalpha() == True:\\n                empty_string = letters + empty_string\\n            else:\\n                empty_list.append(empty_string)\\n                empty_string = \"\"\\n            continue\\n        return len(empty_list[-1])\\n\\nWHAT IS WRONG WITH THIS CODE?\\n"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "When i write the below code i am getting Runt time error how to resolve it?\\n     \\n    int size = s.size();\\n    if (s.empty())\\n        return 0;\\n    int count=0;\\n    for(int i=size-1;s[i]>0;i--)\\n    {\\n        if(s[i]!=\\' \\'){\\n            count++;\\n            if(s[i-1]==\\' \\'){\\n                break;\\n            }\\n        }\\n    }\\n    return count;"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "[@Last-Autumn-Leaf](/Last-Autumn-Leaf) Thank you i did this way its running in online ide but still getting an error.(run time error)\n int size = s.size();\n    int count=0;\n    \n    for(int i=size-1;i>=0;i--)\n    {\n        if(s[i]!=' '){\n            count++;\n            if(s[i-1]==' '){\n                break;\n            }\n        }\n    }\n\n    return count;\n    }\nCan you please share the code so that i can refer it?"
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Hello your code is really code :\nJust correct this line  :\n   for(int i=size-1;s[i]>0;i--)\nwith :\n   for(int i=size-1;i>0;i--)\nand check corner case for when then input =='a' or \"a \""
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Luffy is still joyboy is a One piece Spoiler "
                    },
                    {
                        "username": "user8798U",
                        "content": "If I do `len(s.split()[-1])`, the code runs really quickly, it comes in at faster than basically everything. If I do something clever, starting at the end of the word and working backwards until I've found the start of the last word, it comes in much slower. But the former is O(n) (in the best case), while the latter is O(m), where m is the length of the last word plus trailing whitespace, which is O(n) in the worst case and O(1) in the best case. So I don't understand why the split method comes out as faster."
                    },
                    {
                        "username": "shoshinsha_coder",
                        "content": "My code is pretty simple I just made a variable for the start of the last word if \"seen\" set to 1, or 0 if not yet seen. Then I set a variable for character count. Then I made a simple for loop starting from the end of the string and worked my way back, continuing the loop if spaces are encountered and breaking out of the loop if the last word count has started and the next character is a space. check it out - > /**\\nvar lengthOfLastWord = function(s) {\\n    let charCnt = 0;\\n    let seen = 0;\\n    for(let i = s.length-1; i > -1; i--) {\\n        if(s[i] !== \" \") {\\n            charCnt++;\\n            seen == 1;\\n             } else if(s[i] == \" \") {\\n                    continue;\\n                }\\n                if(s[i-1] == \" \") {\\n                    break;\\n                }\\n    }\\n        return charCnt;\\n};"
                    },
                    {
                        "username": "Abhishek_Rookie",
                        "content": " public int lengthOfLastWord(String str) {\\n        str = str.trim() ;\\n        Stack <Integer> stk = new Stack<>() ;\\n        for(int i = 0 ; i < str.length() ; i ++) {\\n            if(str.charAt(i) == \\' \\') {\\n                stk.push(i) ;\\n            }\\n        }\\n        if(stk.isEmpty()){\\n            return str.length() ;\\n        }\\n        int k = stk.pop() + 1;\\n        String $str = str.substring(k) ;\\n\\n        return $str.length() ;\\n    }\\n\\nThats\\'it  fellas !"
                    },
                    {
                        "username": "mdmasidulhasan27",
                        "content": "1. get length-1\\n2. move to the last character which is not \\' \\' space traversing from last.\\n3. traverse from last character until you get another space and count \\n4. print the counted value.\\n\\nyou are done :)"
                    },
                    {
                        "username": "msauer22",
                        "content": "Will not work. See the case if the word is \"a\".\n1) length-1 = 0\n2) would end at index 0\n3) would still be at index 0\n4) counting from 0 to 0 is 0 but expected result is 1\n\nYour solution does work in general but you have these edge cases, where it just doesnt add up well. \nYou can however solve that problem by \"if (l == r) { return 1; }\""
                    },
                    {
                        "username": "denniskozevnikoff",
                        "content": "Java: \n\n\n    class Solution {\n        public int lengthOfLastWord(String s) {\n        \n        //trim space at the beginning / end\n        String ss = s.trim();\n        //split the string into an array\n        String[] words = ss.split(\" \");\n        //get the last element in the array\n        String last_word = words[words.length-1];\n        //get the element length\n        int last_word_len = last_word.length();\n\n        return last_word_len;\n        }\n    }"
                    }
                ]
            },
            {
                "id": 1702971,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/58_length_of_last_words.cpp"
                    },
                    {
                        "username": "Draklife",
                        "content": "why this code return 0 :please answer\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        bool ok=false;\\n        int len=s.size()-1;\\n        for(int i=len;i>=0;--i){\\n           if(s[i] != \\' \\'){ ans++;}\\n  }\\n  return ans;\\n    }\\n};\\n"
                    },
                    {
                        "username": "Stuti-Bansal",
                        "content": "because ans is  initialized with 0 and in if condition since ok will be true it is not getting  increamented, their will also be else if condition"
                    },
                    {
                        "username": "poweracoon",
                        "content": "def lengthOfLastWord(self, s: str) -> int:\\n        empty_string = \"\"\\n        empty_list = []\\n\\n        for letters in s:\\n            if letters.isalpha() == True:\\n                empty_string = letters + empty_string\\n            else:\\n                empty_list.append(empty_string)\\n                empty_string = \"\"\\n            continue\\n        return len(empty_list[-1])\\n\\nWHAT IS WRONG WITH THIS CODE?\\n"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "When i write the below code i am getting Runt time error how to resolve it?\\n     \\n    int size = s.size();\\n    if (s.empty())\\n        return 0;\\n    int count=0;\\n    for(int i=size-1;s[i]>0;i--)\\n    {\\n        if(s[i]!=\\' \\'){\\n            count++;\\n            if(s[i-1]==\\' \\'){\\n                break;\\n            }\\n        }\\n    }\\n    return count;"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "[@Last-Autumn-Leaf](/Last-Autumn-Leaf) Thank you i did this way its running in online ide but still getting an error.(run time error)\n int size = s.size();\n    int count=0;\n    \n    for(int i=size-1;i>=0;i--)\n    {\n        if(s[i]!=' '){\n            count++;\n            if(s[i-1]==' '){\n                break;\n            }\n        }\n    }\n\n    return count;\n    }\nCan you please share the code so that i can refer it?"
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Hello your code is really code :\nJust correct this line  :\n   for(int i=size-1;s[i]>0;i--)\nwith :\n   for(int i=size-1;i>0;i--)\nand check corner case for when then input =='a' or \"a \""
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Luffy is still joyboy is a One piece Spoiler "
                    },
                    {
                        "username": "user8798U",
                        "content": "If I do `len(s.split()[-1])`, the code runs really quickly, it comes in at faster than basically everything. If I do something clever, starting at the end of the word and working backwards until I've found the start of the last word, it comes in much slower. But the former is O(n) (in the best case), while the latter is O(m), where m is the length of the last word plus trailing whitespace, which is O(n) in the worst case and O(1) in the best case. So I don't understand why the split method comes out as faster."
                    },
                    {
                        "username": "shoshinsha_coder",
                        "content": "My code is pretty simple I just made a variable for the start of the last word if \"seen\" set to 1, or 0 if not yet seen. Then I set a variable for character count. Then I made a simple for loop starting from the end of the string and worked my way back, continuing the loop if spaces are encountered and breaking out of the loop if the last word count has started and the next character is a space. check it out - > /**\\nvar lengthOfLastWord = function(s) {\\n    let charCnt = 0;\\n    let seen = 0;\\n    for(let i = s.length-1; i > -1; i--) {\\n        if(s[i] !== \" \") {\\n            charCnt++;\\n            seen == 1;\\n             } else if(s[i] == \" \") {\\n                    continue;\\n                }\\n                if(s[i-1] == \" \") {\\n                    break;\\n                }\\n    }\\n        return charCnt;\\n};"
                    },
                    {
                        "username": "Abhishek_Rookie",
                        "content": " public int lengthOfLastWord(String str) {\\n        str = str.trim() ;\\n        Stack <Integer> stk = new Stack<>() ;\\n        for(int i = 0 ; i < str.length() ; i ++) {\\n            if(str.charAt(i) == \\' \\') {\\n                stk.push(i) ;\\n            }\\n        }\\n        if(stk.isEmpty()){\\n            return str.length() ;\\n        }\\n        int k = stk.pop() + 1;\\n        String $str = str.substring(k) ;\\n\\n        return $str.length() ;\\n    }\\n\\nThats\\'it  fellas !"
                    },
                    {
                        "username": "mdmasidulhasan27",
                        "content": "1. get length-1\\n2. move to the last character which is not \\' \\' space traversing from last.\\n3. traverse from last character until you get another space and count \\n4. print the counted value.\\n\\nyou are done :)"
                    },
                    {
                        "username": "msauer22",
                        "content": "Will not work. See the case if the word is \"a\".\n1) length-1 = 0\n2) would end at index 0\n3) would still be at index 0\n4) counting from 0 to 0 is 0 but expected result is 1\n\nYour solution does work in general but you have these edge cases, where it just doesnt add up well. \nYou can however solve that problem by \"if (l == r) { return 1; }\""
                    },
                    {
                        "username": "denniskozevnikoff",
                        "content": "Java: \n\n\n    class Solution {\n        public int lengthOfLastWord(String s) {\n        \n        //trim space at the beginning / end\n        String ss = s.trim();\n        //split the string into an array\n        String[] words = ss.split(\" \");\n        //get the last element in the array\n        String last_word = words[words.length-1];\n        //get the element length\n        int last_word_len = last_word.length();\n\n        return last_word_len;\n        }\n    }"
                    }
                ]
            },
            {
                "id": 1699397,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/58_length_of_last_words.cpp"
                    },
                    {
                        "username": "Draklife",
                        "content": "why this code return 0 :please answer\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        bool ok=false;\\n        int len=s.size()-1;\\n        for(int i=len;i>=0;--i){\\n           if(s[i] != \\' \\'){ ans++;}\\n  }\\n  return ans;\\n    }\\n};\\n"
                    },
                    {
                        "username": "Stuti-Bansal",
                        "content": "because ans is  initialized with 0 and in if condition since ok will be true it is not getting  increamented, their will also be else if condition"
                    },
                    {
                        "username": "poweracoon",
                        "content": "def lengthOfLastWord(self, s: str) -> int:\\n        empty_string = \"\"\\n        empty_list = []\\n\\n        for letters in s:\\n            if letters.isalpha() == True:\\n                empty_string = letters + empty_string\\n            else:\\n                empty_list.append(empty_string)\\n                empty_string = \"\"\\n            continue\\n        return len(empty_list[-1])\\n\\nWHAT IS WRONG WITH THIS CODE?\\n"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "When i write the below code i am getting Runt time error how to resolve it?\\n     \\n    int size = s.size();\\n    if (s.empty())\\n        return 0;\\n    int count=0;\\n    for(int i=size-1;s[i]>0;i--)\\n    {\\n        if(s[i]!=\\' \\'){\\n            count++;\\n            if(s[i-1]==\\' \\'){\\n                break;\\n            }\\n        }\\n    }\\n    return count;"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "[@Last-Autumn-Leaf](/Last-Autumn-Leaf) Thank you i did this way its running in online ide but still getting an error.(run time error)\n int size = s.size();\n    int count=0;\n    \n    for(int i=size-1;i>=0;i--)\n    {\n        if(s[i]!=' '){\n            count++;\n            if(s[i-1]==' '){\n                break;\n            }\n        }\n    }\n\n    return count;\n    }\nCan you please share the code so that i can refer it?"
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Hello your code is really code :\nJust correct this line  :\n   for(int i=size-1;s[i]>0;i--)\nwith :\n   for(int i=size-1;i>0;i--)\nand check corner case for when then input =='a' or \"a \""
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Luffy is still joyboy is a One piece Spoiler "
                    },
                    {
                        "username": "user8798U",
                        "content": "If I do `len(s.split()[-1])`, the code runs really quickly, it comes in at faster than basically everything. If I do something clever, starting at the end of the word and working backwards until I've found the start of the last word, it comes in much slower. But the former is O(n) (in the best case), while the latter is O(m), where m is the length of the last word plus trailing whitespace, which is O(n) in the worst case and O(1) in the best case. So I don't understand why the split method comes out as faster."
                    },
                    {
                        "username": "shoshinsha_coder",
                        "content": "My code is pretty simple I just made a variable for the start of the last word if \"seen\" set to 1, or 0 if not yet seen. Then I set a variable for character count. Then I made a simple for loop starting from the end of the string and worked my way back, continuing the loop if spaces are encountered and breaking out of the loop if the last word count has started and the next character is a space. check it out - > /**\\nvar lengthOfLastWord = function(s) {\\n    let charCnt = 0;\\n    let seen = 0;\\n    for(let i = s.length-1; i > -1; i--) {\\n        if(s[i] !== \" \") {\\n            charCnt++;\\n            seen == 1;\\n             } else if(s[i] == \" \") {\\n                    continue;\\n                }\\n                if(s[i-1] == \" \") {\\n                    break;\\n                }\\n    }\\n        return charCnt;\\n};"
                    },
                    {
                        "username": "Abhishek_Rookie",
                        "content": " public int lengthOfLastWord(String str) {\\n        str = str.trim() ;\\n        Stack <Integer> stk = new Stack<>() ;\\n        for(int i = 0 ; i < str.length() ; i ++) {\\n            if(str.charAt(i) == \\' \\') {\\n                stk.push(i) ;\\n            }\\n        }\\n        if(stk.isEmpty()){\\n            return str.length() ;\\n        }\\n        int k = stk.pop() + 1;\\n        String $str = str.substring(k) ;\\n\\n        return $str.length() ;\\n    }\\n\\nThats\\'it  fellas !"
                    },
                    {
                        "username": "mdmasidulhasan27",
                        "content": "1. get length-1\\n2. move to the last character which is not \\' \\' space traversing from last.\\n3. traverse from last character until you get another space and count \\n4. print the counted value.\\n\\nyou are done :)"
                    },
                    {
                        "username": "msauer22",
                        "content": "Will not work. See the case if the word is \"a\".\n1) length-1 = 0\n2) would end at index 0\n3) would still be at index 0\n4) counting from 0 to 0 is 0 but expected result is 1\n\nYour solution does work in general but you have these edge cases, where it just doesnt add up well. \nYou can however solve that problem by \"if (l == r) { return 1; }\""
                    },
                    {
                        "username": "denniskozevnikoff",
                        "content": "Java: \n\n\n    class Solution {\n        public int lengthOfLastWord(String s) {\n        \n        //trim space at the beginning / end\n        String ss = s.trim();\n        //split the string into an array\n        String[] words = ss.split(\" \");\n        //get the last element in the array\n        String last_word = words[words.length-1];\n        //get the element length\n        int last_word_len = last_word.length();\n\n        return last_word_len;\n        }\n    }"
                    }
                ]
            },
            {
                "id": 1692075,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/58_length_of_last_words.cpp"
                    },
                    {
                        "username": "Draklife",
                        "content": "why this code return 0 :please answer\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        bool ok=false;\\n        int len=s.size()-1;\\n        for(int i=len;i>=0;--i){\\n           if(s[i] != \\' \\'){ ans++;}\\n  }\\n  return ans;\\n    }\\n};\\n"
                    },
                    {
                        "username": "Stuti-Bansal",
                        "content": "because ans is  initialized with 0 and in if condition since ok will be true it is not getting  increamented, their will also be else if condition"
                    },
                    {
                        "username": "poweracoon",
                        "content": "def lengthOfLastWord(self, s: str) -> int:\\n        empty_string = \"\"\\n        empty_list = []\\n\\n        for letters in s:\\n            if letters.isalpha() == True:\\n                empty_string = letters + empty_string\\n            else:\\n                empty_list.append(empty_string)\\n                empty_string = \"\"\\n            continue\\n        return len(empty_list[-1])\\n\\nWHAT IS WRONG WITH THIS CODE?\\n"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "When i write the below code i am getting Runt time error how to resolve it?\\n     \\n    int size = s.size();\\n    if (s.empty())\\n        return 0;\\n    int count=0;\\n    for(int i=size-1;s[i]>0;i--)\\n    {\\n        if(s[i]!=\\' \\'){\\n            count++;\\n            if(s[i-1]==\\' \\'){\\n                break;\\n            }\\n        }\\n    }\\n    return count;"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "[@Last-Autumn-Leaf](/Last-Autumn-Leaf) Thank you i did this way its running in online ide but still getting an error.(run time error)\n int size = s.size();\n    int count=0;\n    \n    for(int i=size-1;i>=0;i--)\n    {\n        if(s[i]!=' '){\n            count++;\n            if(s[i-1]==' '){\n                break;\n            }\n        }\n    }\n\n    return count;\n    }\nCan you please share the code so that i can refer it?"
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Hello your code is really code :\nJust correct this line  :\n   for(int i=size-1;s[i]>0;i--)\nwith :\n   for(int i=size-1;i>0;i--)\nand check corner case for when then input =='a' or \"a \""
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Luffy is still joyboy is a One piece Spoiler "
                    },
                    {
                        "username": "user8798U",
                        "content": "If I do `len(s.split()[-1])`, the code runs really quickly, it comes in at faster than basically everything. If I do something clever, starting at the end of the word and working backwards until I've found the start of the last word, it comes in much slower. But the former is O(n) (in the best case), while the latter is O(m), where m is the length of the last word plus trailing whitespace, which is O(n) in the worst case and O(1) in the best case. So I don't understand why the split method comes out as faster."
                    },
                    {
                        "username": "shoshinsha_coder",
                        "content": "My code is pretty simple I just made a variable for the start of the last word if \"seen\" set to 1, or 0 if not yet seen. Then I set a variable for character count. Then I made a simple for loop starting from the end of the string and worked my way back, continuing the loop if spaces are encountered and breaking out of the loop if the last word count has started and the next character is a space. check it out - > /**\\nvar lengthOfLastWord = function(s) {\\n    let charCnt = 0;\\n    let seen = 0;\\n    for(let i = s.length-1; i > -1; i--) {\\n        if(s[i] !== \" \") {\\n            charCnt++;\\n            seen == 1;\\n             } else if(s[i] == \" \") {\\n                    continue;\\n                }\\n                if(s[i-1] == \" \") {\\n                    break;\\n                }\\n    }\\n        return charCnt;\\n};"
                    },
                    {
                        "username": "Abhishek_Rookie",
                        "content": " public int lengthOfLastWord(String str) {\\n        str = str.trim() ;\\n        Stack <Integer> stk = new Stack<>() ;\\n        for(int i = 0 ; i < str.length() ; i ++) {\\n            if(str.charAt(i) == \\' \\') {\\n                stk.push(i) ;\\n            }\\n        }\\n        if(stk.isEmpty()){\\n            return str.length() ;\\n        }\\n        int k = stk.pop() + 1;\\n        String $str = str.substring(k) ;\\n\\n        return $str.length() ;\\n    }\\n\\nThats\\'it  fellas !"
                    },
                    {
                        "username": "mdmasidulhasan27",
                        "content": "1. get length-1\\n2. move to the last character which is not \\' \\' space traversing from last.\\n3. traverse from last character until you get another space and count \\n4. print the counted value.\\n\\nyou are done :)"
                    },
                    {
                        "username": "msauer22",
                        "content": "Will not work. See the case if the word is \"a\".\n1) length-1 = 0\n2) would end at index 0\n3) would still be at index 0\n4) counting from 0 to 0 is 0 but expected result is 1\n\nYour solution does work in general but you have these edge cases, where it just doesnt add up well. \nYou can however solve that problem by \"if (l == r) { return 1; }\""
                    },
                    {
                        "username": "denniskozevnikoff",
                        "content": "Java: \n\n\n    class Solution {\n        public int lengthOfLastWord(String s) {\n        \n        //trim space at the beginning / end\n        String ss = s.trim();\n        //split the string into an array\n        String[] words = ss.split(\" \");\n        //get the last element in the array\n        String last_word = words[words.length-1];\n        //get the element length\n        int last_word_len = last_word.length();\n\n        return last_word_len;\n        }\n    }"
                    }
                ]
            },
            {
                "id": 1690907,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/58_length_of_last_words.cpp"
                    },
                    {
                        "username": "Draklife",
                        "content": "why this code return 0 :please answer\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        bool ok=false;\\n        int len=s.size()-1;\\n        for(int i=len;i>=0;--i){\\n           if(s[i] != \\' \\'){ ans++;}\\n  }\\n  return ans;\\n    }\\n};\\n"
                    },
                    {
                        "username": "Stuti-Bansal",
                        "content": "because ans is  initialized with 0 and in if condition since ok will be true it is not getting  increamented, their will also be else if condition"
                    },
                    {
                        "username": "poweracoon",
                        "content": "def lengthOfLastWord(self, s: str) -> int:\\n        empty_string = \"\"\\n        empty_list = []\\n\\n        for letters in s:\\n            if letters.isalpha() == True:\\n                empty_string = letters + empty_string\\n            else:\\n                empty_list.append(empty_string)\\n                empty_string = \"\"\\n            continue\\n        return len(empty_list[-1])\\n\\nWHAT IS WRONG WITH THIS CODE?\\n"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "When i write the below code i am getting Runt time error how to resolve it?\\n     \\n    int size = s.size();\\n    if (s.empty())\\n        return 0;\\n    int count=0;\\n    for(int i=size-1;s[i]>0;i--)\\n    {\\n        if(s[i]!=\\' \\'){\\n            count++;\\n            if(s[i-1]==\\' \\'){\\n                break;\\n            }\\n        }\\n    }\\n    return count;"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "[@Last-Autumn-Leaf](/Last-Autumn-Leaf) Thank you i did this way its running in online ide but still getting an error.(run time error)\n int size = s.size();\n    int count=0;\n    \n    for(int i=size-1;i>=0;i--)\n    {\n        if(s[i]!=' '){\n            count++;\n            if(s[i-1]==' '){\n                break;\n            }\n        }\n    }\n\n    return count;\n    }\nCan you please share the code so that i can refer it?"
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Hello your code is really code :\nJust correct this line  :\n   for(int i=size-1;s[i]>0;i--)\nwith :\n   for(int i=size-1;i>0;i--)\nand check corner case for when then input =='a' or \"a \""
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Luffy is still joyboy is a One piece Spoiler "
                    },
                    {
                        "username": "user8798U",
                        "content": "If I do `len(s.split()[-1])`, the code runs really quickly, it comes in at faster than basically everything. If I do something clever, starting at the end of the word and working backwards until I've found the start of the last word, it comes in much slower. But the former is O(n) (in the best case), while the latter is O(m), where m is the length of the last word plus trailing whitespace, which is O(n) in the worst case and O(1) in the best case. So I don't understand why the split method comes out as faster."
                    },
                    {
                        "username": "shoshinsha_coder",
                        "content": "My code is pretty simple I just made a variable for the start of the last word if \"seen\" set to 1, or 0 if not yet seen. Then I set a variable for character count. Then I made a simple for loop starting from the end of the string and worked my way back, continuing the loop if spaces are encountered and breaking out of the loop if the last word count has started and the next character is a space. check it out - > /**\\nvar lengthOfLastWord = function(s) {\\n    let charCnt = 0;\\n    let seen = 0;\\n    for(let i = s.length-1; i > -1; i--) {\\n        if(s[i] !== \" \") {\\n            charCnt++;\\n            seen == 1;\\n             } else if(s[i] == \" \") {\\n                    continue;\\n                }\\n                if(s[i-1] == \" \") {\\n                    break;\\n                }\\n    }\\n        return charCnt;\\n};"
                    },
                    {
                        "username": "Abhishek_Rookie",
                        "content": " public int lengthOfLastWord(String str) {\\n        str = str.trim() ;\\n        Stack <Integer> stk = new Stack<>() ;\\n        for(int i = 0 ; i < str.length() ; i ++) {\\n            if(str.charAt(i) == \\' \\') {\\n                stk.push(i) ;\\n            }\\n        }\\n        if(stk.isEmpty()){\\n            return str.length() ;\\n        }\\n        int k = stk.pop() + 1;\\n        String $str = str.substring(k) ;\\n\\n        return $str.length() ;\\n    }\\n\\nThats\\'it  fellas !"
                    },
                    {
                        "username": "mdmasidulhasan27",
                        "content": "1. get length-1\\n2. move to the last character which is not \\' \\' space traversing from last.\\n3. traverse from last character until you get another space and count \\n4. print the counted value.\\n\\nyou are done :)"
                    },
                    {
                        "username": "msauer22",
                        "content": "Will not work. See the case if the word is \"a\".\n1) length-1 = 0\n2) would end at index 0\n3) would still be at index 0\n4) counting from 0 to 0 is 0 but expected result is 1\n\nYour solution does work in general but you have these edge cases, where it just doesnt add up well. \nYou can however solve that problem by \"if (l == r) { return 1; }\""
                    },
                    {
                        "username": "denniskozevnikoff",
                        "content": "Java: \n\n\n    class Solution {\n        public int lengthOfLastWord(String s) {\n        \n        //trim space at the beginning / end\n        String ss = s.trim();\n        //split the string into an array\n        String[] words = ss.split(\" \");\n        //get the last element in the array\n        String last_word = words[words.length-1];\n        //get the element length\n        int last_word_len = last_word.length();\n\n        return last_word_len;\n        }\n    }"
                    }
                ]
            },
            {
                "id": 1676853,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/58_length_of_last_words.cpp"
                    },
                    {
                        "username": "Draklife",
                        "content": "why this code return 0 :please answer\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        bool ok=false;\\n        int len=s.size()-1;\\n        for(int i=len;i>=0;--i){\\n           if(s[i] != \\' \\'){ ans++;}\\n  }\\n  return ans;\\n    }\\n};\\n"
                    },
                    {
                        "username": "Stuti-Bansal",
                        "content": "because ans is  initialized with 0 and in if condition since ok will be true it is not getting  increamented, their will also be else if condition"
                    },
                    {
                        "username": "poweracoon",
                        "content": "def lengthOfLastWord(self, s: str) -> int:\\n        empty_string = \"\"\\n        empty_list = []\\n\\n        for letters in s:\\n            if letters.isalpha() == True:\\n                empty_string = letters + empty_string\\n            else:\\n                empty_list.append(empty_string)\\n                empty_string = \"\"\\n            continue\\n        return len(empty_list[-1])\\n\\nWHAT IS WRONG WITH THIS CODE?\\n"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "When i write the below code i am getting Runt time error how to resolve it?\\n     \\n    int size = s.size();\\n    if (s.empty())\\n        return 0;\\n    int count=0;\\n    for(int i=size-1;s[i]>0;i--)\\n    {\\n        if(s[i]!=\\' \\'){\\n            count++;\\n            if(s[i-1]==\\' \\'){\\n                break;\\n            }\\n        }\\n    }\\n    return count;"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "[@Last-Autumn-Leaf](/Last-Autumn-Leaf) Thank you i did this way its running in online ide but still getting an error.(run time error)\n int size = s.size();\n    int count=0;\n    \n    for(int i=size-1;i>=0;i--)\n    {\n        if(s[i]!=' '){\n            count++;\n            if(s[i-1]==' '){\n                break;\n            }\n        }\n    }\n\n    return count;\n    }\nCan you please share the code so that i can refer it?"
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Hello your code is really code :\nJust correct this line  :\n   for(int i=size-1;s[i]>0;i--)\nwith :\n   for(int i=size-1;i>0;i--)\nand check corner case for when then input =='a' or \"a \""
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Luffy is still joyboy is a One piece Spoiler "
                    },
                    {
                        "username": "user8798U",
                        "content": "If I do `len(s.split()[-1])`, the code runs really quickly, it comes in at faster than basically everything. If I do something clever, starting at the end of the word and working backwards until I've found the start of the last word, it comes in much slower. But the former is O(n) (in the best case), while the latter is O(m), where m is the length of the last word plus trailing whitespace, which is O(n) in the worst case and O(1) in the best case. So I don't understand why the split method comes out as faster."
                    },
                    {
                        "username": "shoshinsha_coder",
                        "content": "My code is pretty simple I just made a variable for the start of the last word if \"seen\" set to 1, or 0 if not yet seen. Then I set a variable for character count. Then I made a simple for loop starting from the end of the string and worked my way back, continuing the loop if spaces are encountered and breaking out of the loop if the last word count has started and the next character is a space. check it out - > /**\\nvar lengthOfLastWord = function(s) {\\n    let charCnt = 0;\\n    let seen = 0;\\n    for(let i = s.length-1; i > -1; i--) {\\n        if(s[i] !== \" \") {\\n            charCnt++;\\n            seen == 1;\\n             } else if(s[i] == \" \") {\\n                    continue;\\n                }\\n                if(s[i-1] == \" \") {\\n                    break;\\n                }\\n    }\\n        return charCnt;\\n};"
                    },
                    {
                        "username": "Abhishek_Rookie",
                        "content": " public int lengthOfLastWord(String str) {\\n        str = str.trim() ;\\n        Stack <Integer> stk = new Stack<>() ;\\n        for(int i = 0 ; i < str.length() ; i ++) {\\n            if(str.charAt(i) == \\' \\') {\\n                stk.push(i) ;\\n            }\\n        }\\n        if(stk.isEmpty()){\\n            return str.length() ;\\n        }\\n        int k = stk.pop() + 1;\\n        String $str = str.substring(k) ;\\n\\n        return $str.length() ;\\n    }\\n\\nThats\\'it  fellas !"
                    },
                    {
                        "username": "mdmasidulhasan27",
                        "content": "1. get length-1\\n2. move to the last character which is not \\' \\' space traversing from last.\\n3. traverse from last character until you get another space and count \\n4. print the counted value.\\n\\nyou are done :)"
                    },
                    {
                        "username": "msauer22",
                        "content": "Will not work. See the case if the word is \"a\".\n1) length-1 = 0\n2) would end at index 0\n3) would still be at index 0\n4) counting from 0 to 0 is 0 but expected result is 1\n\nYour solution does work in general but you have these edge cases, where it just doesnt add up well. \nYou can however solve that problem by \"if (l == r) { return 1; }\""
                    },
                    {
                        "username": "denniskozevnikoff",
                        "content": "Java: \n\n\n    class Solution {\n        public int lengthOfLastWord(String s) {\n        \n        //trim space at the beginning / end\n        String ss = s.trim();\n        //split the string into an array\n        String[] words = ss.split(\" \");\n        //get the last element in the array\n        String last_word = words[words.length-1];\n        //get the element length\n        int last_word_len = last_word.length();\n\n        return last_word_len;\n        }\n    }"
                    }
                ]
            }
        ]
    },
    {
        "title": "Read N Characters Given read4 II - Call Multiple Times",
        "question_content": null,
        "solutions": [],
        "discussions": [
            {
                "id": 1564679,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1566756,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1566755,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1567895,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1575744,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1573431,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1569326,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1572104,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1568987,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1567478,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1564679,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1566756,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1566755,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1567895,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1575744,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1573431,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1569326,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1572104,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1568987,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1567478,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            }
        ]
    },
    {
        "title": "Add Digits",
        "question_content": "<p>Given an integer <code>num</code>, repeatedly add all its digits until the result has only one digit, and return it.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 38\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The process is\n38 --&gt; 3 + 8 --&gt; 11\n11 --&gt; 1 + 1 --&gt; 2 \nSince 2 has only one digit, return it.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 0\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= num &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you do it without any loop/recursion in <code>O(1)</code> runtime?</p>\n",
        "solutions": [
            {
                "id": 1754040,
                "title": "c-recursion-and-iteration-and-o-1-approaches-fast-solutions",
                "content": "There are different ways to solve this problem . This problem is pretty straight forward , so in the **BRUTE FORCE** approach , you simply have to **implement what has been asked** in the question. \\nYou can do that using both **RECURSION and ITERATION**. \\n\\nFollowing are the codes : \\n\\n#### RECURSION : \\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n      int sum=0;\\n        while(num)\\n        {\\n            sum+=(num%10);\\n            num/=10;\\n        }\\n        if(sum<10)\\n            return sum;\\n        else\\n            return addDigits(sum);\\n    }\\n};\\n```\\n\\n#### ITERATION : \\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n      int sum=0;\\n        while(num>9)\\n        {\\n            while(num)\\n            {\\n                sum+=(num%10);\\n                num/=10;\\n            }\\n            num=sum;\\n            sum=0;\\n        }\\n        return num;\\n    }\\n};\\n```\\n\\n#### O(1) APPROACH : \\nHonestly , I couldn\\'t come up with this approach on my own. So, I read a few solutions in the discuss section. They didn\\'t explain the approach or the reason behind why it worked . So I have thought an ***explanation*** myself. The ***explanation*** might be incorrect ,( I doubt it though) , but the approach is correct. \\n\\nThe O(1) approach says :\\n1. Check if the number is 0 or not . If num==0 , return 0. Else do the following. \\n2. Check if (num%9)==0 . If it is true , return 9. Else return (num%9).\\n\\nThis is the answer. \\n\\n#### \\t\\t\\tCODE : \\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n      if(num==0)\\n          return 0;\\n      else if(num%9==0)\\n          return 9;\\n      else\\n          return num%9;\\n    }\\n};\\n```\\nThe logic behind this approach , I think is related to the divisibility test of 9. \\nIf you don\\'t know then , \"To check if a number is divisible by 9, add the digits of the number and check if the sum is divisible by 9 or not. If yes , is the case , then the number is divisible by 9 , otherwise it\\'s not .\"\\nNow if you notice if a number is divisible by 9(and 3) , then if we follow the procedure as mention in the question (sum of digits of every previous num) , we would always find the new_num(the sum of the digits ) to be divisible by 9(and 3).\\n\\n{\\n\\tsum=addDigits(num);\\n\\tif num%9==0 , then sum%9==0 too.\\n\\tNow, num=sum;\\n\\tSince sum%9=0 , so , \\n\\tsum=addDigits(sum) %9 =0 \\n}\\n\\nBut , if the number is not divisible by 9 , if you continue to evaluate the sum of digits , the sum generated will be a number which when divided by 9 will generate the same remainder as it would have if we wold have divided num. So , if we see , then the remainder of num , doesn\\'t change with sum of digits. \\n\\n#### UPDATE : The O(1) approach method is called Digit Root. Check it out. \\n\\nI KNOW THE ABOVE EXPLAINATION IS A BIT TOO LENGTHY AND HAZY , BUT IF YOU UNDERSTOOD IT AND FOUND IT HELPFUL , PLEASE UPVOTE.",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n      int sum=0;\\n        while(num)\\n        {\\n            sum+=(num%10);\\n            num/=10;\\n        }\\n        if(sum<10)\\n            return sum;\\n        else\\n            return addDigits(sum);\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n      int sum=0;\\n        while(num>9)\\n        {\\n            while(num)\\n            {\\n                sum+=(num%10);\\n                num/=10;\\n            }\\n            num=sum;\\n            sum=0;\\n        }\\n        return num;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n      if(num==0)\\n          return 0;\\n      else if(num%9==0)\\n          return 9;\\n      else\\n          return num%9;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1754049,
                "title": "easy-o-1-explanation-with-example",
                "content": "### Observation\\nIf you look at the digital root ( the thing this question asks viz - sum untill the sum is single digit ) for the first 100 digits. It comes out to be as follows - \\n```\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n---------\\n10 1\\n11 2\\n12 3\\n13 4\\n14 5\\n15 6\\n16 7\\n17 8\\n18 9\\n--------\\n19 1\\n20 2\\n21 3\\n22 4\\n23 5\\n24 6\\n25 7\\n26 8\\n27 9\\n-------\\n28 1\\n29 2\\n30 3\\n31 4\\n32 5\\n33 6\\n34 7\\n35 8\\n36 9\\n-------\\n37 1\\n38 2\\n39 3\\n40 4\\n41 5\\n42 6\\n43 7\\n44 8\\n45 9\\n------\\n46 1\\n47 2\\n48 3\\n49 4\\n50 5\\n51 6\\n52 7\\n53 8\\n54 9\\n--------\\n55 1\\n56 2\\n57 3\\n58 4\\n59 5\\n60 6\\n61 7\\n62 8\\n63 9\\n--------\\n64 1\\n65 2\\n66 3\\n67 4\\n68 5\\n69 6\\n70 7\\n71 8\\n72 9\\n--------\\n73 1\\n74 2\\n75 3\\n76 4\\n77 5\\n78 6\\n79 7\\n80 8\\n81 9\\n--------\\n82 1\\n83 2\\n84 3\\n85 4\\n86 5\\n87 6\\n88 7\\n89 8\\n90 9\\n-------\\n91 1\\n92 2\\n93 3\\n94 4\\n95 5\\n96 6\\n97 7\\n98 8\\n99 9\\n------\\n100 1\\n```\\n\\n- You can probably notice the cycle, that is the digit num starts from 0 and ends at 9\\n- If you think about it, it is obvious as every time we are adding one to the modulus \\n- Thus the ans is the remainder of the division of the number with 9\\n- Unless remainder is 0 then the ans is 9\\n\\n- We need to be carefull of the ```0``` case, where the ans is 0\\n\\n### Code \\n```cpp\\nint addDigits(int num) {\\n\\tif ( num == 0 ) return 0;\\n\\treturn num%9 == 0 ? 9 : num%9 ;\\n}\\n```\\n\\n- The edge cases can be taken care of by the following clever trick, to make it a one liner \\n- We find the modulo 9 of the previous number and add one to it\\n\\n```\\nint addDigits(int num) {\\n\\treturn 1 + (num - 1) % 9;\\n}\\n```\\n\\n\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n---------\\n10 1\\n11 2\\n12 3\\n13 4\\n14 5\\n15 6\\n16 7\\n17 8\\n18 9\\n--------\\n19 1\\n20 2\\n21 3\\n22 4\\n23 5\\n24 6\\n25 7\\n26 8\\n27 9\\n-------\\n28 1\\n29 2\\n30 3\\n31 4\\n32 5\\n33 6\\n34 7\\n35 8\\n36 9\\n-------\\n37 1\\n38 2\\n39 3\\n40 4\\n41 5\\n42 6\\n43 7\\n44 8\\n45 9\\n------\\n46 1\\n47 2\\n48 3\\n49 4\\n50 5\\n51 6\\n52 7\\n53 8\\n54 9\\n--------\\n55 1\\n56 2\\n57 3\\n58 4\\n59 5\\n60 6\\n61 7\\n62 8\\n63 9\\n--------\\n64 1\\n65 2\\n66 3\\n67 4\\n68 5\\n69 6\\n70 7\\n71 8\\n72 9\\n--------\\n73 1\\n74 2\\n75 3\\n76 4\\n77 5\\n78 6\\n79 7\\n80 8\\n81 9\\n--------\\n82 1\\n83 2\\n84 3\\n85 4\\n86 5\\n87 6\\n88 7\\n89 8\\n90 9\\n-------\\n91 1\\n92 2\\n93 3\\n94 4\\n95 5\\n96 6\\n97 7\\n98 8\\n99 9\\n------\\n100 1\\n```\n```0```\n```cpp\\nint addDigits(int num) {\\n\\tif ( num == 0 ) return 0;\\n\\treturn num%9 == 0 ? 9 : num%9 ;\\n}\\n```\n```\\nint addDigits(int num) {\\n\\treturn 1 + (num - 1) % 9;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1754046,
                "title": "java-c-python-solution-with-math-s-explained",
                "content": "`Math\\'s Explained :-`\\nAny number where it\\'s digits add to 9 is always divisible by 9. (18, 27, 36, 45, 54, 63, 72, 81, 90, etc.) Therefore the \\'digital root\\' for any number divisible by 9 is always 9. You can see this even in larger numbers like 99 because 9 + 9 = 18, and then 1 + 8 = 9 still, so the root always becomes 9 for any numbers divisible by 9.\\n\\nAdditionally, 0 always has a digital root of 0 obviously.\\n\\nThe only other cases you need to worry about to find the digital root are when it isn\\'t 0 or 9.\\n\\nSo for any number that isn\\'t 0 and isn\\'t divisible by 9, the root will always n % 9 for a given number n. (AKA the difference between given number n and the nearest number that is divisible by 9, since numbers divisible by 9 always have a digital root of 9).\\nFor examples: 100 % 9 = 1 (one greater than 99, which is divisible by 9).\\n101 % 9 = 2\\n102 % 9 = 3 and so on.\\n\\nThis explanation/algorithm skips the whole \"add digits until there is only 1 remaining\", so `the description of this problem seems pretty misleading to me since it makes you think the solution will be something unrelated to the optimal one`. I guess the point of Leetcode is to learn all of these tricks though.\\n\\n**Java**\\n```\\nclass Solution {\\n    public int addDigits(int num) {\\n        if(num == 0) return 0;\\n        else if(num % 9 == 0) return 9;\\n        else return num % 9;\\n    }\\n}\\n```\\n**C++**\\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        if(num == 0) return 0;\\n        else if(num % 9 == 0) return 9;\\n        else return num % 9;\\n    }\\n};\\n```\\n**Python**\\n```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        if num == 0 : return 0\\n        if num % 9 == 0 : return 9\\n        else : return (num % 9)\\n```\\n* **Time Complexity :-** BigO(1)\\n\\n* **Space Complexity :-** BigO(1)",
                "solutionTags": [
                    "Java",
                    "Python",
                    "C"
                ],
                "code": "```\\nclass Solution {\\n    public int addDigits(int num) {\\n        if(num == 0) return 0;\\n        else if(num % 9 == 0) return 9;\\n        else return num % 9;\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        if(num == 0) return 0;\\n        else if(num % 9 == 0) return 9;\\n        else return num % 9;\\n    }\\n};\\n```\n```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        if num == 0 : return 0\\n        if num % 9 == 0 : return 9\\n        else : return (num % 9)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1754064,
                "title": "python3-iterative-explained",
                "content": "**UPVOTE if you like (\\uD83C\\uDF38\\u25E0\\u203F\\u25E0), If you have any question, feel free to ask.**\\n\\nThe simplest way to solve this problem is using bruteforce solution. We convert `num` into digits, sum them together and then repeate the process until the `num` becomes less than 10.\\n\\nTime: **O(ceil(log10(n))^2)** - for iteration over digits recursively\\nSoace: **O(1)** - nothing is stored\\n\\nRuntime: 28 ms, faster than **94.22%** of Python3 online submissions for Add Digits.\\nMemory Usage: 13.9 MB, less than **81.53%** of Python3 online submissions for Add Digits.\\n\\n```\\ndef addDigits(self, num: int) -> int:\\n\\twhile num > 9:\\n\\t\\tsum = 0\\n\\t\\twhile num:\\n\\t\\t\\tsum += num%10\\n\\t\\t\\tnum = num//10\\n\\t\\t\\t\\n\\t\\tnum = sum\\n\\n\\treturn num\\n```\\n\\n**UPVOTE if you like (\\uD83C\\uDF38\\u25E0\\u203F\\u25E0), If you have any question, feel free to ask.**",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\ndef addDigits(self, num: int) -> int:\\n\\twhile num > 9:\\n\\t\\tsum = 0\\n\\t\\twhile num:\\n\\t\\t\\tsum += num%10\\n\\t\\t\\tnum = num//10\\n\\t\\t\\t\\n\\t\\tnum = sum\\n\\n\\treturn num\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 68580,
                "title": "accepted-c-o-1-time-o-1-space-1-line-solution-with-detail-explanations",
                "content": "The problem, widely known as *digit root* problem, has a congruence formula:\\n\\n    https://en.wikipedia.org/wiki/Digital_root#Congruence_formula\\n\\nFor base *b* (decimal case *b* = 10), the digit root of an integer is:\\n\\n- dr(*n*) = 0  if *n* == 0\\n- dr(*n*) = (*b*-1)  if *n* != 0 and *n* % (*b*-1) == 0\\n- dr(*n*) = *n* mod (*b*-1) if *n* % (*b*-1) != 0\\n\\nor\\n\\n- dr(*n*) = 1 + (*n* - 1) % 9\\n\\nNote here, when *n* = 0, since (*n* - 1) % 9 = -1, the return value is zero (correct).\\n\\nFrom the formula, we can find that the result of this problem is immanently periodic, with period (*b*-1).\\n\\nOutput sequence for decimals (*b* = 10):\\n\\n~input: 0 1 2 3 4 ...  \\noutput: 0 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 ....\\n\\n\\nHenceforth, we can write the following code, whose time and space complexities are both *O*(1).\\n\\n    class Solution {\\n    public:\\n        int addDigits(int num) {\\n            return 1 + (num - 1) % 9;\\n        }\\n    };\\n\\nThanks for reading. :)",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        int addDigits(int num) {\\n            return 1 + (num - 1) % 9;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 68667,
                "title": "simple-java-solution-no-recursion-loop",
                "content": "    public class Solution {\\n        public int addDigits(int num) {\\n            if (num == 0){\\n                return 0;\\n            }\\n            if (num % 9 == 0){\\n                return 9;\\n            }\\n            else {\\n                return num % 9;\\n            }\\n        }\\n    }",
                "solutionTags": [],
                "code": "class Solution {\\n        public int addDigits(int num) {\\n            if (num == 0){\\n                return 0;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 68572,
                "title": "3-methods-for-python-with-explains",
                "content": "   \\n 2. Iteration method\\n\\n  \\n\\n          class Solution(object):\\n          def addDigits(self, num):\\n            \"\"\"\\n            :type num: int\\n            :rtype: int\\n            \"\"\"\\n            while(num >= 10):\\n                temp = 0\\n                while(num > 0):\\n                    temp += num % 10\\n                    num /= 10\\n                num = temp\\n            return num\\n\\n\\n\\n\\n 1. Digital Root\\n\\n\\nthis method depends on the truth:\\n\\nN=(a[0] * 1 + a[1] * 10 + ...a[n] * 10 ^n),and a[0]...a[n] are all between [0,9]\\n\\nwe set M = a[0] + a[1] + ..a[n]\\n\\nand another truth is that:\\n\\n1 % 9 = 1\\n\\n10 % 9 = 1\\n\\n100 % 9 = 1\\n\\nso N % 9 = a[0] + a[1] + ..a[n]\\n\\nmeans N % 9 = M\\n\\nso N = M (% 9)\\n\\nas 9 % 9 = 0,so we can make (n - 1) % 9 + 1 to help us solve the problem when n is 9.as N is 9, ( 9 - 1) % 9 + 1 = 9\\n\\n\\n   \\n\\n    class Solution(object):\\n    def addDigits(self, num):\\n        \"\"\"\\n        :type num: int\\n        :rtype: int\\n        \"\"\"\\n        if num == 0 : return 0\\n        else:return (num - 1) % 9 + 1",
                "solutionTags": [],
                "code": "   \\n 2. Iteration method\\n\\n  \\n\\n          class Solution(object):\\n          def addDigits(self, num):\\n            \"\"\"\\n            :type num: int\\n            :rtype: int\\n            \"\"\"\\n            while(num >= 10):\\n                temp = 0\\n                while(num > 0):\\n                    temp += num % 10\\n                    num /= 10\\n                num = temp\\n            return num\\n\\n\\n\\n\\n 1. Digital Root\\n\\n\\nthis method depends on the truth:\\n\\nN=(a[0] * 1 + a[1] * 10 + ...a[n] * 10 ^n),and a[0]...a[n] are all between [0,9]\\n\\nwe set M = a[0] + a[1] + ..a[n]\\n\\nand another truth is that:\\n\\n1 % 9 = 1\\n\\n10 % 9 = 1\\n\\n100 % 9 = 1\\n\\nso N % 9 = a[0] + a[1] + ..a[n]\\n\\nmeans N % 9 = M\\n\\nso N = M (% 9)\\n\\nas 9 % 9 = 0,so we can make (n - 1) % 9 + 1 to help us solve the problem when n is 9.as N is 9, ( 9 - 1) % 9 + 1 = 9\\n\\n\\n   \\n\\n    class Solution(object):\\n    def addDigits(self, num):\\n        \"\"\"\\n        :type num: int\\n        :rtype: int\\n        \"\"\"\\n        if num == 0 : return 0\\n        else:return (num - 1) % 9 + 1",
                "codeTag": "Java"
            },
            {
                "id": 68776,
                "title": "two-lines-c-code-with-explanation",
                "content": "    int addDigits(int num) {\\n        int res = num % 9;\\n        return (res != 0 || num == 0) ? res : 9;\\n    }\\n\\nThe essence of this problem is that 10^n \\u2261 1 (mod 9), and thus a_n*10^n + ... + a_1*10 + a_0 \\u2261 a_n + ... + a_1 + a_0 (mod 9). This process can be continued until a number less than 9 is gotten, i.e. num % 9. For any digit n, n = n % 9 unless n = 9. The only confusing case is n % 9 = 0, but addDigits(num) = 0 if and only if num = 0, otherwise it should be 9 in fact.",
                "solutionTags": [],
                "code": "    int addDigits(int num) {\\n        int res = num % 9;\\n        return (res != 0 || num == 0) ? res : 9;\\n    }\\n\\nThe essence of this problem is that 10^n \\u2261 1 (mod 9), and thus a_n*10^n + ... + a_1*10 + a_0 \\u2261 a_n + ... + a_1 + a_0 (mod 9). This process can be continued until a number less than 9 is gotten, i.e. num % 9. For any digit n, n = n % 9 unless n = 9. The only confusing case is n % 9 = 0, but addDigits(num) = 0 if and only if num = 0, otherwise it should be 9 in fact.",
                "codeTag": "Unknown"
            },
            {
                "id": 756533,
                "title": "python-math-o-1-oneliner-explained",
                "content": "Straightforward solution of this problem is to do exactly what is asked, until we get only one digit. However, there is smarter mathematical solution, using property of division by `9`. Let us condiser first example and then formulate result for general case:\\n\\nLet `n = 18102`. Then numbers `n` and `sum(n)` (where by `sum(n)` we denote sum of digits of number `n`) have the same remainder if we divide them by `9`. Why so? To prove, that two numbers have the same remainder is equivalent to prove, that difference of these two numbers is divisible by `9`. Indeed:\\n`18102 - sum(18102) =10000 + 8*1000 + 1*100 + 0*10 + 2 - (1 + 8 + 1 + 0 + 2) = 9999 + 8*999 + 1*99 + 0*9 + 0` is divisible by `9`, because each term is divisible by `9`. So, now, we can state theorem:\\n\\n**Theorem** For any natural number `n`: numbers `n` and `sum(n)` have the same remainder if we divide them by `9`.\\n**Proof**: let `n = a_n ... a_2 a_1 a_0`, then `n - sum(n) = a_n* 99...9 + ... + a_2 * 99 + a_1*9 + 0`, which is divisible by `9`.\\n\\nNow, let us go back to our problem: we evaluate sum of digits of our number several times, until we reached `1`-digit number. On each iteration remainder of divition by `9` is the same. So in the very end it also be the same! So, what we need to do is just return this reminder? Almost, there are two cases we need to hanlde:\\n1. If `n = 0`, then we return `0`.\\n2. If `n > 1` and `n` is divisible by `9`, then reminder is equal to `0`. However we can not reach `0`, and the answer will be another digit with reminder equal to `0`, which is `9`. \\n\\n**Complexity**: time and space complexity is `O(1)`.\\n\\nFinally, it can be written as oneliner:\\n\\n```\\nclass Solution:\\n    def addDigits(self, num):\\n        return 0 if num == 0 else (num - 1) % 9 + 1\\n```\\n\\nIf you have any questoins, feel free to ask. If you like the solution and explanation, please **upvote!**",
                "solutionTags": [
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def addDigits(self, num):\\n        return 0 if num == 0 else (num - 1) % 9 + 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 68588,
                "title": "1-line-java-solution",
                "content": "    public class Solution {\\n    \\n        public int addDigits(int num) {\\n    \\n            return num==0?0:(num%9==0?9:(num%9));\\n    \\n        }\\n    \\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    \\n        public int addDigits(int num) {\\n    \\n            return num==0?0:(num%9==0?9:(num%9));\\n    \\n        }",
                "codeTag": "Java"
            },
            {
                "id": 68796,
                "title": "o-1-solution-with-mod-operation",
                "content": "If an integer is like 100a+10b+c, then (100a+10b+c)%9=(a+99a+b+9b+c)%9=(a+b+c)%9\\n\\n    class Solution:\\n        # @param {integer} num\\n        # @return {integer}\\n        def addDigits(self, num):\\n            if num==0:\\n                return 0\\n            return num%9 if num%9!=0 else 9",
                "solutionTags": [],
                "code": "class Solution:\\n        # @param {integer}",
                "codeTag": "Java"
            },
            {
                "id": 2368005,
                "title": "very-easy-100-fully-explained-java-c-python-js-c-python3",
                "content": "\\n**Problem:** For num = 478, the output will be 1.\\n**Solution1 :**     The process is\\n\\t\\t\\t\\t\\t\\t\\t  478 --> 4 + 7 + 8 --> 19\\n\\t\\t\\t\\t\\t\\t\\t  19 --> 1 + 9 --> 10\\n\\t\\t\\t\\t\\t\\t\\t  10 --> 1 + 0 --> 1\\n\\t\\t\\t\\t\\t\\t\\t  Since 1 has only one digit, return it.\\n**Solution2 :**     Here, 478 is not divisible by 9. So we calculate 478 % 9. The answer will be 1.\\n\\t\\t\\t\\t\\t\\t\\t  Since 1 has only one digit, return it.\\n\\n# **C++ Solution:**\\nRuntime: 0 ms, faster than 100.00% of C++ online submissions for Add Digits.\\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        // If num == 0, then result will be 0...\\n        if(num == 0)\\n            return 0;\\n        // If is divisible by 9, result will be 9...\\n        else if(num % 9 == 0)\\n            return 9;\\n        // if the num is not 0 and is not divisible by 9,\\n        // the result will always num % 9...\\n        else\\n            return num % 9;\\n    }\\n};\\n```\\n\\n# **Java Solution (Recursive Approach):**\\n```\\nclass Solution {\\n    public int addDigits(int num) {\\n        //  Variable to store the digit sum...\\n        int sum = 0;\\n        // Converts num value into string...\\n        String s = String.valueOf(num);\\n        // Calculation of digit sum...\\n        for(int i = 0; i < s.length(); i++){\\n            sum = sum + (s.charAt(i) - \\'0\\');\\n        }\\n        // If  sum is less than 10, it is the digital root. Return it...\\n        if(sum < 10){\\n            return sum;\\n        }else{\\n            return addDigits(sum);      // Sum becomes the new number. Call the function again with sum as parameter...\\n        }\\n    }\\n}\\n```\\n\\n# **Python Solution:**\\nRuntime: 43 ms, faster than 72.76% of Python3 online submissions for Add Digits.\\n```\\nclass Solution(object):\\n    def addDigits(self, num):\\n        while num > 9:\\n            num = num % 10 + num // 10\\n        return num\\n```\\n        \\n# **JavaScript Solution:**\\n```\\nvar addDigits = function(num) {\\n    return 1 + (num - 1) % 9;\\n};\\n```\\n\\n# **C Language (Recursive Approach):**\\n```\\nint addDigits(int num){\\n    //  Variable to store the digit.\\n    int ans = 0;\\n    // Calculation of digit sum.\\n    while(num) {\\n        ans += (num % 10);\\n        num /= 10;\\n    }\\n    // If  ans is less than 10, it is the digital root. Return it.\\n    if(ans < 10)\\n        return ans;\\n    else\\n        return addDigits(ans);  // ans becomes the new number. Call the function again with ans as parameter.\\n}\\n```\\n\\n# **Python3 Solution:**\\n```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        while num > 9:\\n            num = num % 10 + num // 10\\n        return num\\n```\\n**I am working hard for you guys...\\nPlease upvote if you find any help with this code...**",
                "solutionTags": [
                    "Java",
                    "Python",
                    "Python3",
                    "C",
                    "JavaScript"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        // If num == 0, then result will be 0...\\n        if(num == 0)\\n            return 0;\\n        // If is divisible by 9, result will be 9...\\n        else if(num % 9 == 0)\\n            return 9;\\n        // if the num is not 0 and is not divisible by 9,\\n        // the result will always num % 9...\\n        else\\n            return num % 9;\\n    }\\n};\\n```\n```\\nclass Solution {\\n    public int addDigits(int num) {\\n        //  Variable to store the digit sum...\\n        int sum = 0;\\n        // Converts num value into string...\\n        String s = String.valueOf(num);\\n        // Calculation of digit sum...\\n        for(int i = 0; i < s.length(); i++){\\n            sum = sum + (s.charAt(i) - \\'0\\');\\n        }\\n        // If  sum is less than 10, it is the digital root. Return it...\\n        if(sum < 10){\\n            return sum;\\n        }else{\\n            return addDigits(sum);      // Sum becomes the new number. Call the function again with sum as parameter...\\n        }\\n    }\\n}\\n```\n```\\nclass Solution(object):\\n    def addDigits(self, num):\\n        while num > 9:\\n            num = num % 10 + num // 10\\n        return num\\n```\n```\\nvar addDigits = function(num) {\\n    return 1 + (num - 1) % 9;\\n};\\n```\n```\\nint addDigits(int num){\\n    //  Variable to store the digit.\\n    int ans = 0;\\n    // Calculation of digit sum.\\n    while(num) {\\n        ans += (num % 10);\\n        num /= 10;\\n    }\\n    // If  ans is less than 10, it is the digital root. Return it.\\n    if(ans < 10)\\n        return ans;\\n    else\\n        return addDigits(ans);  // ans becomes the new number. Call the function again with ans as parameter.\\n}\\n```\n```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        while num > 9:\\n            num = num % 10 + num // 10\\n        return num\\n```",
                "codeTag": "Java"
            },
            {
                "id": 247383,
                "title": "o-1-solution-in-javascript",
                "content": "Here is my JavaScript solution in O(1) time compleixty.\\n\\n```javascript\\nvar addDigits = function(num) {\\n    if (isNaN(num) || num === 0) return 0;\\n    if (num < 10) return num;\\n    return num % 9 === 0 ? 9 : num % 9;\\n};\\n```\\n\\nNormally, a O(1) problem should be done in math. A good way to do this is using various inputs then finding a rule of their results.",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```javascript\\nvar addDigits = function(num) {\\n    if (isNaN(num) || num === 0) return 0;\\n    if (num < 10) return num;\\n    return num % 9 === 0 ? 9 : num % 9;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 68622,
                "title": "java-code-with-explanation",
                "content": "Let's take a couple of example to check the input and expected output of the given problem.\\nExample 1:\\nInput:  267\\nStep 1: 2+6+7 = 15\\nStep 2: 1+5 = 6 (Expected output as this number has single digit)\\n\\nExample 2:\\nInput: 7714\\nStep 1: 7+7+1+4 = 19\\nStep 2: 1+ 9 = 10\\nStep 3: 1+0 = 1 (Expected output as this number has only 1 digit)\\n\\nBy looking at the above examples the first solution that comes to mind is that we can take the input number and find the sum of individual digits by using recursion (or iteration). If the result is not a single digit code we ill process the result again and keep doing it until it returns a single digits. This methods is correct and works for all the valid inputs. The code for this algorithm can be writtes as follows:\\n    public int addDigits(int num) {\\n        while(num/10>0){\\n            num = sumDigits(num);\\n        }\\n        return num;\\n    }\\n    \\n    public int sumDigits(int n){\\n        if(n==0)\\n            return 0;\\n        return (n%10) + sumDigits(n/10);\\n    }\\n\\nCan we find anything better than the above solution. Let's take a couple of more example and see if we can deduce some pattern for the result:\\nExample 3:\\nInput:  10\\nStep 1: 1+0  = 1 (Expected output)\\n\\nExample 4:\\nInput:  11\\nStep 1: 1+1 = 2 (Expected output)\\n\\nExample 5:\\nInput:  12\\nStep 1: 1+2 = 3 (Expected output)\\n\\n\\nExample 6:\\nInput:  18\\nStep 1: 1+8 = 9 (Expected output)\\n\\nArguments: In mathematics we have learnt that any number that is divisible by 9, the sum of the digits in the number is also divisible by 9. Also, here we know that the result of the problem is an integer lying in the range [0,9] . \\n\\nFrom the above arguments and samples, we can see that the result depends on the divisibility of a number by 9. The code can be written as follows: \\n\\n    public int addDigits(int num) {\\n    if(num<10)\\n        return num;\\n    else if(num%9 ==0)\\n        return 9;\\n    else\\n        return num%9;        \\n    }\\n\\n\\nThanks. Happy Coding :)",
                "solutionTags": [],
                "code": "Let's take a couple of example to check the input and expected output of the given problem.\\nExample 1:\\nInput:  267\\nStep 1: 2+6+7 = 15\\nStep 2: 1+5 = 6 (Expected output as this number has single digit)\\n\\nExample 2:\\nInput: 7714\\nStep 1: 7+7+1+4 = 19\\nStep 2: 1+ 9 = 10\\nStep 3: 1+0 = 1 (Expected output as this number has only 1 digit)\\n\\nBy looking at the above examples the first solution that comes to mind is that we can take the input number and find the sum of individual digits by using recursion (or iteration). If the result is not a single digit code we ill process the result again and keep doing it until it returns a single digits. This methods is correct and works for all the valid inputs. The code for this algorithm can be writtes as follows:\\n    public int addDigits(int num) {\\n        while(num/10>0){\\n            num = sumDigits(num);\\n        }\\n        return num;\\n    }\\n    \\n    public int sumDigits(int n){\\n        if(n==0)\\n            return 0;\\n        return (n%10) + sumDigits(n/10);\\n    }\\n\\nCan we find anything better than the above solution. Let's take a couple of more example and see if we can deduce some pattern for the result:\\nExample 3:\\nInput:  10\\nStep 1: 1+0  = 1 (Expected output)\\n\\nExample 4:\\nInput:  11\\nStep 1: 1+1 = 2 (Expected output)\\n\\nExample 5:\\nInput:  12\\nStep 1: 1+2 = 3 (Expected output)\\n\\n\\nExample 6:\\nInput:  18\\nStep 1: 1+8 = 9 (Expected output)\\n\\nArguments: In mathematics we have learnt that any number that is divisible by 9, the sum of the digits in the number is also divisible by 9. Also, here we know that the result of the problem is an integer lying in the range [0,9] . \\n\\nFrom the above arguments and samples, we can see that the result depends on the divisibility of a number by 9. The code can be written as follows: \\n\\n    public int addDigits(int num) {\\n    if(num<10)\\n        return num;\\n    else if(num%9 ==0)\\n        return 9;\\n    else\\n        return num%9;        \\n    }\\n\\n\\nThanks. Happy Coding :)",
                "codeTag": "Unknown"
            },
            {
                "id": 68732,
                "title": "no-loop-recursion-o-1-runtime-just-one-line-python-code",
                "content": "    class Solution(object):\\n        def addDigits(self, num):\\n            return num if num == 0 else num % 9 or 9",
                "solutionTags": [
                    "Python"
                ],
                "code": "    class Solution(object):\\n        def addDigits(self, num):\\n            return num if num == 0 else num % 9 or 9",
                "codeTag": "Java"
            },
            {
                "id": 302258,
                "title": "simple-explanation-of-o-1-solution-using-special-properties-of-9-no-math-python-3-4-lines",
                "content": "After realizing the only solutions to this problem can be in the range of [0,9] inclusive, we should start considering the % operator to help us.\\n\\n\\nNext, notice all multiples of 9 have digits that add up to the number 9.  \\n**Number**:  \\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0  9,  18,  27,  36,  45,  54,  63,  72,  81,  90,  99, ... 909, 918\\n\\n\\nWhat about the range of numbers in between 2 multiples of 9?\\n**Number**: \\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0  18,  19,  20,  21,  22,  23,  24,  25,  26,  27\\n**Sum of Digits**: \\xA09,\\xA0\\xA01, \\xA0\\xA02,\\xA0\\xA0\\xA03, \\xA0 4,\\xA0\\xA0 5, \\xA0 6, \\xA0\\xA07, \\xA0 8, \\xA0\\xA09 \\n**Number % 9**: \\xA0\\xA0 0,\\xA0\\xA01, \\xA0\\xA02,\\xA0\\xA0\\xA03, \\xA0 4,\\xA0\\xA0 5, \\xA0 6, \\xA0\\xA07, \\xA0 8, \\xA0\\xA00 \\n\\n\\nSo as you can see... we can basically just return `num % 9` but we have 2 special cases:\\n* `num % 9 == 0` - return 9\\n* `num == 0`  - return 0\\n\\nAnd Bob\\'s your uncle!  Here\\'s my Python solution:\\n\\n\\n```\\ndef addDigits(self, num: int) -> int:\\n\\tif num == 0:\\n\\t\\treturn 0\\n\\tres = num % 9\\n\\treturn res if res > 0 else 9\\n```\\n\\nHappy coding.",
                "solutionTags": [],
                "code": "```\\ndef addDigits(self, num: int) -> int:\\n\\tif num == 0:\\n\\t\\treturn 0\\n\\tres = num % 9\\n\\treturn res if res > 0 else 9\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3455502,
                "title": "easy-solution-of-java-c-100-faster-code-beginner-friendly",
                "content": "\\n\\n# Code\\n    PLEASE UPVOTE IF YOU LIKE.\\n```\\nclass Solution {\\n    public int addDigits(int num) {\\n        int temp = 0 ;\\n        temp = numnum(num);\\n        while(temp > 9){\\n           temp = numnum(temp);\\n        }\\n        return temp;\\n        \\n    }\\n    \\n    public int numnum(int num){\\n      int temp = 0;\\n      while(num > 9){\\n            temp += num % 10 ;\\n            num /= 10;\\n        }\\n        return temp + num;\\n    }\\n}\\n```\\nC++\\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n\\n    int ans = 0;\\n    if (num <= 9)\\n        return num;\\n    while (num != 0)\\n    {\\n        ans = ans + num % 10;\\n        num = num / 10;\\n        if (ans > 9 && num == 0)\\n        {\\n            num = ans;\\n            ans = 0;\\n        }\\n    }\\n    return ans;\\n\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int addDigits(int num) {\\n        int temp = 0 ;\\n        temp = numnum(num);\\n        while(temp > 9){\\n           temp = numnum(temp);\\n        }\\n        return temp;\\n        \\n    }\\n    \\n    public int numnum(int num){\\n      int temp = 0;\\n      while(num > 9){\\n            temp += num % 10 ;\\n            num /= 10;\\n        }\\n        return temp + num;\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n\\n    int ans = 0;\\n    if (num <= 9)\\n        return num;\\n    while (num != 0)\\n    {\\n        ans = ans + num % 10;\\n        num = num / 10;\\n        if (ans > 9 && num == 0)\\n        {\\n            num = ans;\\n            ans = 0;\\n        }\\n    }\\n    return ans;\\n\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 68720,
                "title": "java-o-1-solution-for-positive-and-negative-numbers",
                "content": "Even though question asks answer for non-negative integer, this one works for +ve and -ve numbers.\\nI referred this [code on stackoverflow][1].\\n\\nNote: Negative numbers have digit sum as negative number. If positive digit sum needed for negative numbers then Math.abs() can be used while returning result.\\n\\n\\n    public class Solution {\\n        public int addDigits(int num) {\\n            return 1 + (num-1)%9;\\n        }\\n    }\\n\\n\\n  [1]: http://stackoverflow.com/questions/1057072/calculating-digital-root-is-there-a-better-way",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public int addDigits(int num) {\\n            return 1 + (num-1)%9;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1754098,
                "title": "simple-math-s-approach-easy-solution",
                "content": "If you look at the digital root ( sum untill the sum is single digit ) for the first 100 digits. It comes out to be as follows -\\n\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n+++++\\n10 1\\n11 2\\n12 3\\n13 4\\n14 5\\n15 6\\n16 7\\n17 8\\n18 9\\n+++++\\n19 1\\n20 2\\n21 3\\n22 4\\n23 5\\n24 6\\n25 7\\n26 8\\n27 9\\n+++++\\n28 1\\n29 2\\n30 3\\n31 4\\n32 5\\n33 6\\n34 7\\n35 8\\n36 9\\n+++++ and goes on till 100.\\n\\nYou can probably notice the cycle, that is the digit num starts from 0 and ends at 9\\n\\nIf you think about it, it is obvious as every time we are adding one to the modulus\\n\\nThus the ans is the remainder of the division of the number with 9\\n\\nUnless remainder is 0 then the ans is 9\\n\\nWe need to be carefull of the 0 case, where the ans is 0\\n\\n\\tclass Solution {\\n\\t\\tpublic int addDigits(int num) {\\n\\t\\t\\tif(num == 0){\\n\\t\\t\\t   return 0; \\n\\t\\t\\t} else if(num % 9 == 0) {\\n\\t\\t\\t\\treturn 9;\\n\\t\\t\\t} \\n\\t\\t\\treturn num%9;\\n\\t\\t}\\n\\t}\\n**UPVOTE if you like (\\uD83C\\uDF38\\u25E0\\u203F\\u25E0\\uD83C\\uDF38), If you have any question, feel free to ask.**",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n\\t\\tpublic int addDigits(int num) {\\n\\t\\t\\tif(num == 0){\\n\\t\\t\\t   return 0; \\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 3455419,
                "title": "detailed-explanation-repeated-digit-sum-congruence-formula",
                "content": "**Approach 1: Repeated Digit Sum**\\n\\nLet\\'s have a quick review on how to get digit sum first. Given that a number $$n$$, we can use the following approach to get the digit sum.\\n\\n```cpp\\nint digitSum(int n) {\\n    int sum = 0;\\n    while (n > 0) {\\n        // get the last digit and add it to sum\\n        // e.g. 123 % 10 = 3. Add 3 to sum\\n        sum += n % 10;\\n        // dividing by 10 for the next run\\n        // e.g. 123 / 10 -> 12\\n        n /= 10;\\n    }\\n    return sum;\\n}\\n```\\n\\nWe initialise $$sum := 0$$ first. Then we take modulo operation $$n \\\\ mod 10$$ to get the last digit and add it to $$sum$$. Then we divide $$n$$ by 10 to eliminate the last digit and perform the same operation until $$n$$ becomes $$0$$.\\n\\nNow we just need to calculate the digit sum repeatedly until $$n$$ has only one digit.\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int digitSum(int n) {\\n        int sum = 0;\\n        while (n > 0) {\\n            // get the last digit and add it to sum\\n            // e.g. 123 % 10 = 3. Add 3 to sum\\n            sum += n % 10;\\n            // dividing by 10 for the next run\\n            // e.g. 123 / 10 -> 12\\n            n /= 10;\\n        }\\n        return sum;\\n    }\\n    int addDigits(int n) {\\n        // calculate digit sum until n has only one digit\\n        while (n >= 10) {\\n            n = digitSum(n);\\n        }\\n        return n;\\n    }\\n};\\n```\\n\\nOnce you get the idea, are you able to to combine them?\\n\\n**Approach 2: Congruence Formula**\\n\\nIf $$n$$ is $$0$$, then obviously it is $$0$$.\\n\\nIf $$n$$ can be divisible by $$9$$ , then it is $$9$$. E.g $$27 % 9 == 0$$ -> $$2 + 7$$ -> $$9$$.\\n\\nOtherwise, it would be $$n \\\\mod 9$$. Why? \\n\\nLet\\'s say $$n = a_0 * 1 + a_1 * 10 + a_2 * 100 + ... + a_n * 10^n$$  where $$a_i$$ \\u2208 $$[0, 9]$$ and let $$x$$ be $$a_0 + a_1 + a_2 + ... + a_n$$. We know that $$1 \\\\mod 9 = 10 \\\\mod 9 = 100 \\\\mod 9 = 1$$. Then, $$n \\\\mod 9$$ would be $$x$$. For example, $$n = 123 = 3 * 1 + 2 * 10 + 1 * 100$$ and $$x = 1 + 2 + 3$$. We can see that $$123 \\\\mod 9 = 6$$, which is also the difference between $$n$$ and the closest number  which can be divisible by $$9$$.\\n\\nTo generalise, for base $$b$$, we\\'ll have\\n\\n![image](https://user-images.githubusercontent.com/35857179/168303513-5e58fd4a-8775-487c-9a21-25d0e061e418.png)\\n\\nwhich can be further simplified as\\n\\n![image](https://user-images.githubusercontent.com/35857179/168303537-9079b250-0106-41d0-84ab-bc4d8d672541.png)\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        return 1 + (num - 1) % 9;\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Recursion"
                ],
                "code": "```cpp\\nint digitSum(int n) {\\n    int sum = 0;\\n    while (n > 0) {\\n        // get the last digit and add it to sum\\n        // e.g. 123 % 10 = 3. Add 3 to sum\\n        sum += n % 10;\\n        // dividing by 10 for the next run\\n        // e.g. 123 / 10 -> 12\\n        n /= 10;\\n    }\\n    return sum;\\n}\\n```\n```cpp\\nclass Solution {\\npublic:\\n    int digitSum(int n) {\\n        int sum = 0;\\n        while (n > 0) {\\n            // get the last digit and add it to sum\\n            // e.g. 123 % 10 = 3. Add 3 to sum\\n            sum += n % 10;\\n            // dividing by 10 for the next run\\n            // e.g. 123 / 10 -> 12\\n            n /= 10;\\n        }\\n        return sum;\\n    }\\n    int addDigits(int n) {\\n        // calculate digit sum until n has only one digit\\n        while (n >= 10) {\\n            n = digitSum(n);\\n        }\\n        return n;\\n    }\\n};\\n```\n```cpp\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        return 1 + (num - 1) % 9;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 373886,
                "title": "python-o-1",
                "content": "```\\nclass Solution(object):\\n    def addDigits(self, num):\\n        if num == 0:\\n            return 0\\n        return num % 9 or 9\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution(object):\\n    def addDigits(self, num):\\n        if num == 0:\\n            return 0\\n        return num % 9 or 9\\n```",
                "codeTag": "Java"
            },
            {
                "id": 68703,
                "title": "one-line-java-solution",
                "content": "Observe the pattern of repeat from 1 to 9 except if num = 0.\\nSo we can do:\\n\\n    public int addDigits(int num) {\\n        return (num - 1)%9 + 1;\\n    }",
                "solutionTags": [],
                "code": "Observe the pattern of repeat from 1 to 9 except if num = 0.\\nSo we can do:\\n\\n    public int addDigits(int num) {\\n        return (num - 1)%9 + 1;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 68706,
                "title": "c-3-lines-implementation",
                "content": "    class Solution {\\n    public:\\n        int addDigits(int num) {\\n            if(num%9 == 0 && num!=0)\\n            return 9;\\n            return (num%9);\\n        }\\n    };",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n    public:\\n        int addDigits(int num) {\\n            if(num%9 == 0 && num!=0)\\n            return 9;\\n            return (num%9);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 380604,
                "title": "easy-c-solution-without-loop-2-lines",
                "content": "You can find the sum of digits by using digital root method.\\n**The digital root** (also repeated digital sum) of a non-negative integer is the (single digit) value obtained by an iterative process of summing digits, on each iteration using the result from the previous iteration to compute a digit sum. The process continues until a single-digit number is reached.\\n\\n```\\nint addDigits(int num) {\\n        \\n        if(num < 10) return num;\\n        return (num%9 == 0 ? 9 : num%9);\\n    }",
                "solutionTags": [
                    "C"
                ],
                "code": "You can find the sum of digits by using digital root method.\\n**The digital root** (also repeated digital sum) of a non-negative integer is the (single digit) value obtained by an iterative process of summing digits, on each iteration using the result from the previous iteration to compute a digit sum. The process continues until a single-digit number is reached.\\n\\n```\\nint addDigits(int num) {\\n        \\n        if(num < 10) return num;\\n        return (num%9 == 0 ? 9 : num%9);\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 68726,
                "title": "java-one-line-simple-answer",
                "content": "According to [WIKI][1], we could compute the congruent root easily.\\n\\n    public int addDigits(int num) \\n    {\\n        //For number that from 0 to 9, the answer is themselves\\n        //For number that is divisible by 9, the answer is 9\\n        //Otherwise, the answer is the reminder after divided by 9\\n        return num>9?(num%9==0?9:num%9):num;\\n    }\\n\\n\\n  [1]: https://en.wikipedia.org/wiki/Congruence_relation",
                "solutionTags": [
                    "Java"
                ],
                "code": "According to [WIKI][1], we could compute the congruent root easily.\\n\\n    public int addDigits(int num) \\n    {\\n        //For number that from 0 to 9, the answer is themselves\\n        //For number that is divisible by 9, the answer is 9\\n        //Otherwise, the answer is the reminder after divided by 9\\n        return num>9?(num%9==0?9:num%9):num;\\n    }\\n\\n\\n  [1]: https://en.wikipedia.org/wiki/Congruence_relation",
                "codeTag": "Unknown"
            },
            {
                "id": 3455757,
                "title": "one-liner-py",
                "content": "Simple Mathematics <>\\n\\n# Code\\n```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        return num%9 if num%9!=0 or num==0 else 9\\n```\\n\\n![](https://assets.leetcode.com/users/images/87bab3dd-fabf-4b71-9ac5-984d9015438e_1678160362.0612018.jpeg)",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        return num%9 if num%9!=0 or num==0 else 9\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1755513,
                "title": "easiest-100-faster-solution-then-online-compiler",
                "content": "\\n## **Simple Approach :**\\n\\nStore **Every time**(again and again) updated Number as a string and traverse through all character of string which actually is number with storing every character into one variable then break this process when string size is only left as 1. \\n\\nExample : \\n**Num = 1234**\\nString **s = \"1234\"**\\nint **a = 1+2+3+4** (in every turn when loop rotates.)\\nnow **s = \"10\"** ( here a = 10 **number to string** once again.)\\nnow **a = 1+0** \\n**s = \"1\"** (s is again num to string of a  &  Here Loop Will Break Because s.size()=1)\\n**return s[0]-\\'0\\'** (Which Is Final Single Digit Number)\\n\\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        string s = to_string(num);\\n        int a = 0;\\n        while(s.size()!=1){\\n            for (int i = 0; i < s.size(); ++i)\\n            {\\n                a = a + (s[i]-\\'0\\');\\n            }\\n            s = to_string(a);\\n            a = 0;\\n        }\\n        return s[0]-\\'0\\';\\n    }\\n};\\n```\\n\\n\\n***Don\\'t Forget To Like And Comment If Any Query :)***\\n\\n",
                "solutionTags": [
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        string s = to_string(num);\\n        int a = 0;\\n        while(s.size()!=1){\\n            for (int i = 0; i < s.size(); ++i)\\n            {\\n                a = a + (s[i]-\\'0\\');\\n            }\\n            s = to_string(a);\\n            a = 0;\\n        }\\n        return s[0]-\\'0\\';\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1754589,
                "title": "c-solution-w-explanation-recusrion-iterative-maths",
                "content": "***Brief note about Question-***\\n* We have to ***repeatdly add all its digits of a number until the result has only one digit, and return it.***\\n* It\\'s easy to understand u can see below example other than given in  question.\\n```\\nsuppose n: 199\\nSo, the process is\\n199 -->1 + 9 + 9 --> 19\\n19 --> 1 + 9 --> 10\\n10 --> 1 + 0 --> 1\\n\\nSince 1 has only one digit, return it.\\n```\\n_____________________\\n***Solution - I (Using Recursion, Accepted)-***\\n* The most basic thing we can think of is, we use recursion to solve our question.\\n* We repeatdly add our number until it lies in the range `0 to 9`.\\n* See more explanation in the code also.\\n```\\nTime Complexity --> O(n) // where n is the length of number, more precisly how many digits it contains\\nSpace Complexity --> O(1) // we don\\'t use anything extra from our side\\nIt paases [ 1101 / 1101] in built test cases\\n```\\n\\n**Code (C++)**\\n```\\nclass Solution {\\npublic:\\n//     Runtime: 0 ms, faster than 100.00% of C++ online submissions for Add Digits.\\n// Memory Usage: 5.9 MB, less than 25.37% of C++ online submissions for Add Digits.\\n    int solve(int n)\\n    {\\n        if(n >= 0 && n <= 9) // as we say if it lies in the range return it\\n            return n;\\n        \\n        // else take modulo part, i.e last digit of number and\\n        // divide it by 10 and again called function solve\\n        // one thing is to notice here, we apply solve function again on whole of the part. why this?\\n        // So suppose, if number is 19, then when we do 19 % 10 it gives us 9\\n        // & 19 / 10 it gives us 1\\n        // and if we add them we got 9 + 1 i.e 10\\n        // so again apply function on this i.e solve(10) gives us result as\\n        // 10 % 10 = 0 & 10 / 10 = 1 (it is not biwise and) I m just writing and\\n        // 0 + 1 = 1 that is our correct answer, \\n        // i hope u got this\\n        \\n        return solve((n % 10) + (solve(n / 10))); \\n    }\\n    int addDigits(int n) {\\n        return solve(n); // and at last return the function\\n       \\n    }\\n};\\n```\\n_______\\n***Solution - I I (Using Iterative method , Accepted)-***\\n* For, the iterative methdod, we do the same thing as in recursion but iteratively.\\n* We repeatdly add our number until it lies in the range` 0 to 9.`\\n* See more explanation in the code also.\\n```\\nTime Complexity --> O(n) // where n is the length of number, more precisly how many digits it contains\\nSpace Complexity --> O(1) // we don\\'t use anything extra from our side\\nIt paases [ 1101 / 1101] in built test cases\\n```\\n\\n**Code (C++)**\\n```\\nclass Solution {\\npublic:\\n    int addDigits(int n) {\\n        int sum = 0; // declare sum as zero\\n        \\n        while(n > 0) // until our number is greater than zero\\n        {\\n            sum += n % 10; // add last digit to our sum\\n            \\n            // it is same as applying function again as in the recursion\\n            // So suppose, if number is 19, then when we do 19 % 10 it gives us 9\\n            // & 19 / 10 it gives us 1\\n            // and if we add them we got 9 + 1 i.e 10\\n            // so, at this point, our sum again becomes 10, and we always know that\\n            // sum will be always two digit, therefore, why not add digits of sum.\\n            // Therefore, 10 % 10 = 0 & 10 / 10 = 1 (it is not biwise and) I m just writing and\\n            // 0 + 1 = 1 that is our sum becomes 1 and which is correct answer, \\n            // i hope u got this\\n            \\n            sum = (sum % 10 + sum / 10); \\n            \\n            n = n / 10; // divide n by 10 \\n        }\\n        \\n        return sum; // and at last return sum\\n    }\\n};\\n```\\n_____________\\n***Solution - I I I(Using Maths Method, Accepted)-***\\n* I didn\\'t come on this approach like maths method from myself, I read some leetcode discuss post and i came to know this method.\\n* So, Many people explained this, u may see their post, but let me try my best.\\n* First just think that ***what is the criteria for divisibility for 9***.\\n* Criteria is, if the sum of all the digits of a number is divisible by 9 then that number is basically divisible by 9.\\n* And what we are trying in this question, we repeatdly takes the sum of all the digits of the number until it becomes a single digit.\\n* so if a number is divisible by 9, then on decompsing repeatdly at last it gives us sum as 9.\\n* Let\\'s take some example-\\n```\\ne.g 1) suppose n: 729\\nSo, the process is\\n729 -->7 + 2 + 9 --> 18\\n18 --> 1 + 8 --> 9\\n\\nSince 9 has only one digit, return it.\\n\\ne.g 2) suppose n: 59049\\nSo, the process is\\n59049 --> 5 + 9 + 0 + 4 + 9 --> 27\\n27 --> 2 + 7 -- > 9\\n\\nSince 9 has only one digit, return it.\\n\\nyou may take more examples from your side also\\n```\\n* Now, what if a number is not dividible by 9\\n* It is simple to guess,  then it should be `modulo by 9.`\\n* You make take some examples from your side also.\\n```\\nTime Complexity --> O(1) // we are just taking modulo\\nSpace Complexity --> O(1) // we don\\'t use anything extra from our side\\nIt paases [ 1101 / 1101] in built test cases\\n```\\n**Code (C++)**\\n```\\nclass Solution {\\npublic:\\n    int addDigits(int n) {\\n        if(n == 0) // if number is already zero\\n        {\\n            return 0; // return zero\\n        }\\n        else if(n % 9 == 0) // if it is divisble by 9\\n        {\\n            return 9;\\n        }\\n        else\\n        {\\n            return n % 9; // if not divisible by 9 remainder number % 9\\n        }\\n    }\\n};\\n```\\n***`If u find this useful , please consider to give a upvote!!`***",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nsuppose n: 199\\nSo, the process is\\n199 -->1 + 9 + 9 --> 19\\n19 --> 1 + 9 --> 10\\n10 --> 1 + 0 --> 1\\n\\nSince 1 has only one digit, return it.\\n```\n```\\nTime Complexity --> O(n) // where n is the length of number, more precisly how many digits it contains\\nSpace Complexity --> O(1) // we don\\'t use anything extra from our side\\nIt paases [ 1101 / 1101] in built test cases\\n```\n```\\nclass Solution {\\npublic:\\n//     Runtime: 0 ms, faster than 100.00% of C++ online submissions for Add Digits.\\n// Memory Usage: 5.9 MB, less than 25.37% of C++ online submissions for Add Digits.\\n    int solve(int n)\\n    {\\n        if(n >= 0 && n <= 9) // as we say if it lies in the range return it\\n            return n;\\n        \\n        // else take modulo part, i.e last digit of number and\\n        // divide it by 10 and again called function solve\\n        // one thing is to notice here, we apply solve function again on whole of the part. why this?\\n        // So suppose, if number is 19, then when we do 19 % 10 it gives us 9\\n        // & 19 / 10 it gives us 1\\n        // and if we add them we got 9 + 1 i.e 10\\n        // so again apply function on this i.e solve(10) gives us result as\\n        // 10 % 10 = 0 & 10 / 10 = 1 (it is not biwise and) I m just writing and\\n        // 0 + 1 = 1 that is our correct answer, \\n        // i hope u got this\\n        \\n        return solve((n % 10) + (solve(n / 10))); \\n    }\\n    int addDigits(int n) {\\n        return solve(n); // and at last return the function\\n       \\n    }\\n};\\n```\n```\\nTime Complexity --> O(n) // where n is the length of number, more precisly how many digits it contains\\nSpace Complexity --> O(1) // we don\\'t use anything extra from our side\\nIt paases [ 1101 / 1101] in built test cases\\n```\n```\\nclass Solution {\\npublic:\\n    int addDigits(int n) {\\n        int sum = 0; // declare sum as zero\\n        \\n        while(n > 0) // until our number is greater than zero\\n        {\\n            sum += n % 10; // add last digit to our sum\\n            \\n            // it is same as applying function again as in the recursion\\n            // So suppose, if number is 19, then when we do 19 % 10 it gives us 9\\n            // & 19 / 10 it gives us 1\\n            // and if we add them we got 9 + 1 i.e 10\\n            // so, at this point, our sum again becomes 10, and we always know that\\n            // sum will be always two digit, therefore, why not add digits of sum.\\n            // Therefore, 10 % 10 = 0 & 10 / 10 = 1 (it is not biwise and) I m just writing and\\n            // 0 + 1 = 1 that is our sum becomes 1 and which is correct answer, \\n            // i hope u got this\\n            \\n            sum = (sum % 10 + sum / 10); \\n            \\n            n = n / 10; // divide n by 10 \\n        }\\n        \\n        return sum; // and at last return sum\\n    }\\n};\\n```\n```\\ne.g 1) suppose n: 729\\nSo, the process is\\n729 -->7 + 2 + 9 --> 18\\n18 --> 1 + 8 --> 9\\n\\nSince 9 has only one digit, return it.\\n\\ne.g 2) suppose n: 59049\\nSo, the process is\\n59049 --> 5 + 9 + 0 + 4 + 9 --> 27\\n27 --> 2 + 7 -- > 9\\n\\nSince 9 has only one digit, return it.\\n\\nyou may take more examples from your side also\\n```\n```\\nTime Complexity --> O(1) // we are just taking modulo\\nSpace Complexity --> O(1) // we don\\'t use anything extra from our side\\nIt paases [ 1101 / 1101] in built test cases\\n```\n```\\nclass Solution {\\npublic:\\n    int addDigits(int n) {\\n        if(n == 0) // if number is already zero\\n        {\\n            return 0; // return zero\\n        }\\n        else if(n % 9 == 0) // if it is divisble by 9\\n        {\\n            return 9;\\n        }\\n        else\\n        {\\n            return n % 9; // if not divisible by 9 remainder number % 9\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 68605,
                "title": "1-line-javascript",
                "content": "var addDigits = function(num) {\\n    return (num % 9 === 0) ? 9 : num % 9\\n};",
                "solutionTags": [],
                "code": "var addDigits = function(num) {\\n    return (num % 9 === 0) ? 9 : num % 9\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 1754397,
                "title": "clear-step-by-step-explanation-on-getting-the-math",
                "content": "First off, there\\'s the naive implementation of just simulating the process. But we should be on the lookout for something better.\\n```\\n    def addDigits(self, num: int) -> int:\\n        total = num\\n        while(len(str(num)) > 1):\\n            total = 0\\n            for digit in str(num):\\n                total += int(digit)\\n            num = total\\n        return total\\n```\\n\\nLet\\'s run through a few examples to see if it\\'s possible to do this mathematically instead. We should be wary of cases when we increment 9, as that will drastically affect the sum we end up with\\n\\n39 -> 12 -> 3\\n38 -> 11 -> 2\\n37 -> 10 -> 1\\n36 -> 9\\n\\n100 -> 1\\n99 -> 18 -> 9\\n\\nWe seem to cycling from 1 to 9. For an interview, most likely noticing this and providing the answer\\nand some hand-wavy justification would be enough. But let\\'s reason about why this might be true\\n\\nLet\\'s use the notation a_1|a_2|a_3|...|a_n to represent a n-digit number with a_1 as it\\'s\\nmost significant digit, a_2 as the second most, and so on.\\nThen we\\'ll name a function S(A), which is defined as the sum of all the digits of A\\n\\nSo let there be a number A = a_1|a_2|a_3|...a_n, and we\\'ll call S(A) = B = b_1|b_2|...|b_x\\n\\nNow, say we have a number A+1. Let\\'s derive what S(A+1) would be\\n\\nIf b_x != 9, then\\nS(A+1) = b_1 + b_2 + ... b_x + 1 = B + 1\\n\\nIf b_x = 9, and b_{x-1} != 9.\\nThen, S(A+1) = b_1 + b_2 + ... b_{x-1} + (1 + 0) = B - b_x = B - 9 + 1 = B - 8\\n\\nBut what if b_x and b_{x-1} were both 9? Once again, let\\'s first consider if b_{x-2} != 9\\nThen, S(A+1) = b_1 + b_2 + ... b_{x-2} + 1 + 0 + 0 = B - b_{x-1} - b_x = B - 9 - 9 + 1 = B - 17\\n\\nWe see a pattern here. No matter how many numbers we shift, they\\'ll differ by some multiple of 9.\\nSo, let\\'s consider what adding a multiple of 9 would do to our function.\\n\\nWe know\\nS(B) = b_1 + b_2 + .. b_x\\n\\nFor simplicity, consider if b_x != 0 and b_x != 9, then\\nS(B - 9) = b_1 + b_2 + ...(b_{x-1} - 1) +(-b_x + 1)\\n\\nHowever , what if b_{x-1} == 0, causing us to carry our subtraction?\\nThen S(B - 9) = b_1 + b_2 + ... (b_{x-2} -1) + 9 + (-b_x + 1)\\nThe difference is once again a multiple of 9. Also note that if b_x == 0 or b_x == 9, then the sum of the digits\\nwill once again differ by 9. We can see from here that subtracting some multiple of 9 doesn\\'t seem to have an \\nefffect on the sum of the digits. This holds transitively for however many times we subtract 9.\\n\\nWith this observation, we almost have a complete argument. Since we know that multiples of 9\\ndon\\'t impact the result of the sum of the digits, or S(S(A)), then we no longer have to consider the special cases of S(A+1), where a digit might be 9\\n\\nThis gives us that, with y being some natural number\\nS(S(A+1)) = S(B + 1 - 9 * y) = S(B + 1)\\n\\nThus, when we increment A, we also increment the result we\\'ll get after it on our next iteration. With this, we can safely conclude that the pattern we initially observed holds.\\n\\nIf you wanted to actually write a rigorous proof, you would use this to complete an induction proof.\\n\\nWe\\'ve shown that the results are equal at every increment of 9, matching our intuition from earlier that our answers are from 1 to 9. Consequently, we\\'ll want something in the form of num % 9.\\nHowever, we can observe that the only time we\\'ll get 0 is if num == 0, as the sum of our digits should otherwise never be 0. In every other case, the result will be 9.\\n\\nThis gives us our answer\\n\\n```\\n    def addDigits(self, num: int) -> int:\\n        if num == 0: return 0\\n        return 9 if num % 9 == 0 else num % 9\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n    def addDigits(self, num: int) -> int:\\n        total = num\\n        while(len(str(num)) > 1):\\n            total = 0\\n            for digit in str(num):\\n                total += int(digit)\\n            num = total\\n        return total\\n```\n```\\n    def addDigits(self, num: int) -> int:\\n        if num == 0: return 0\\n        return 9 if num % 9 == 0 else num % 9\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1616976,
                "title": "c-o-1-faster-than-100-00-0ms-3-solutions",
                "content": "Solution - 1    (Using While loop)\\n```\\nwhile(num>9){\\n\\tint rem = num%10;\\n\\tnum = num/10 + rem;\\n }\\nreturn num;\\n```\\nSolution - 2   (Using if else ladder)\\n```\\nif(num == 0) return 0;\\nelse if(num%9 == 0) return 9;\\nelse return num%9;\\n```\\nSolution - 3 (One Line Code)\\n```\\nreturn 1 + (num - 1) % 9;\\n```\\n\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nwhile(num>9){\\n\\tint rem = num%10;\\n\\tnum = num/10 + rem;\\n }\\nreturn num;\\n```\n```\\nif(num == 0) return 0;\\nelse if(num%9 == 0) return 9;\\nelse return num%9;\\n```\n```\\nreturn 1 + (num - 1) % 9;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 756318,
                "title": "java-3-line-code-100-fast-o-1-extremely-easy-solution",
                "content": "If you found the solution helpful, kindly upvote or like. :)\\n\\n```\\nclass Solution {\\n    public int addDigits(int num) {\\n        if (num == 0) return 0;\\n        if (num % 9 == 0) return 9;\\n        return num % 9;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int addDigits(int num) {\\n        if (num == 0) return 0;\\n        if (num % 9 == 0) return 9;\\n        return num % 9;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 579918,
                "title": "javascript-solutions-with-explanation",
                "content": "1. Naive solution:\\nAt first, with Javascript you know you can solve the question like this:\\n - Convert the number into a string.\\n - Then you can easily split the number string to get an array of its digits.\\n - Then you can easily get the sum and pass in another call to get to the next step using a recursive function.\\n ```Javascript\\n /**\\n * Naive Javascript Solution.\\n * Time = O(n) where n is the number of digits of the number because:\\n *  - Converting a number to a string: O(n)\\n *  - Splitting the string: O(n)\\n *  - Iterating through the string: O(n). \\n *  - Each iteration does constant time operations.\\n * => Total: O(3*n) => remove constant = O(n)\\n * Space = O(n) because we\\'ll have at most n calls on the call stacks.\\n * @param {number} num\\n * @return {number}\\n */\\nvar addDigits = function(num) {\\n    if (num < 10) return num;\\n    const numString = num.toString();\\n    const numArray = numString.split(\\'\\');\\n    let sum = 0;\\n    \\n    for (const numStr of numArray) {\\n        sum += parseInt(numStr);\\n    }\\n    \\n    return addDigits(sum);\\n};\\n ```\\n \\n 2. Think deeper:\\n - It seems like you need to do a lot of conversion if you choose the 1st approach.\\n - Is there another way to get each digit without converting the number to a string? You can divide the number to 10 to the power of its length - 1. E.g.: 123. Length = 3 => if you want to get 1, you need to floor the result of 123 / 100 (which is 10^(3 - 1)), then 23 / 10 (10^(2-1)), then 2 / 10 (10^(2-1)). However, that will get complicated quickly and you\\'ll have to know the number of digits of each number.\\n - If you instead get the last digit first, you can use modulo: so 123 % 10 = 3, 12 % = 2.\\n - You can stop when you only get 1 digit left.\\n - The problem can be solved like this:\\n```javascript\\n/**\\n * Interative solution.\\n * Function returns the one digit number created by repeatedly adding all \\n * input\\'s digits.\\n * Time = O(log(n)) where n is the num value because:\\n *  - The inner while loop divides the num by 10 each time: O(log(n))\\n *  - The outer while loop does constant operations.\\n * Space = O(1) because we don\\'t store anything.\\n * @param {number} num\\n * @return {number}\\n */\\nvar addDigits = function(num) {\\n    let n = num;\\n\\n    // While n has more than 1 digit:\\n    while (n >= 10) {\\n        let sum = 0;\\n\\n        // Add to the sum the remainder if divided by 10 = last digit\\n        // This is correct because: 385 % 10 = 5, 38 % 10 = 8 and so on.\\n        while (n > 0) {\\n            sum = sum + n % 10;\\n            // Divide the number by 10 to get the remaining digits:\\n            // 385 / 10 floor = 38\\n            // Keep doing this until we get to the first digit:\\n            n = Math.floor(n / 10);\\n        }\\n        // Out of while loop => We\\'ve got to the first digit of the number:\\n        // Put the sum we have as the new number to compute:\\n        n = sum;\\n    }\\n    // Out of while loop => n is a 1 digit number, return it.\\n    return n;\\n};\\n```\\n\\n3. Advance:\\n- This is not intuitive. I personally believe if you have never seen this question before, you wouldn\\'t know this solution unless you have a decent amount of experience with Math or you know the formula.\\n- This is also the \"optimal\" solution asked at the end of the question.\\n- This is also called the Congruence formula or modulo 9 arithmetic as some other have pointed out in the discussion.\\n```javascript\\n/**\\n * Solution based on the formula: dr(n) = 1 + (n - 1) % 9\\n * Explanations:\\n * https://leetcode.com/problems/add-digits/discuss/68580/Accepted-C%2B%2B-O(1)-time-O(1)-space-1-Line-Solution-with-Detail-Explanations\\n * https://leetcode.com/problems/add-digits/discuss/68572/3-methods-for-python-with-explains\\n * Time = O(1) because all operations take constant time.\\n * Space = O(1) because we don\\'t store anything.\\n * @param {number} num\\n * @return {number}\\n */\\nvar addDigits = function(num) {\\n    return 1 + (num - 1) % 9;\\n};\\n```\\nThe performances of the 3 solutions are actually not far from each other:\\n- Solution 1: 60 ms\\t36.2 MB\\n- Solution 2: 68 ms\\t35.8 MB\\t\\n- Solution 3: 64 ms\\t35.4 MB",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```Javascript\\n /**\\n * Naive Javascript Solution.\\n * Time = O(n) where n is the number of digits of the number because:\\n *  - Converting a number to a string: O(n)\\n *  - Splitting the string: O(n)\\n *  - Iterating through the string: O(n). \\n *  - Each iteration does constant time operations.\\n * => Total: O(3*n) => remove constant = O(n)\\n * Space = O(n) because we\\'ll have at most n calls on the call stacks.\\n * @param {number} num\\n * @return {number}\\n */\\nvar addDigits = function(num) {\\n    if (num < 10) return num;\\n    const numString = num.toString();\\n    const numArray = numString.split(\\'\\');\\n    let sum = 0;\\n    \\n    for (const numStr of numArray) {\\n        sum += parseInt(numStr);\\n    }\\n    \\n    return addDigits(sum);\\n};\\n ```\n```javascript\\n/**\\n * Interative solution.\\n * Function returns the one digit number created by repeatedly adding all \\n * input\\'s digits.\\n * Time = O(log(n)) where n is the num value because:\\n *  - The inner while loop divides the num by 10 each time: O(log(n))\\n *  - The outer while loop does constant operations.\\n * Space = O(1) because we don\\'t store anything.\\n * @param {number} num\\n * @return {number}\\n */\\nvar addDigits = function(num) {\\n    let n = num;\\n\\n    // While n has more than 1 digit:\\n    while (n >= 10) {\\n        let sum = 0;\\n\\n        // Add to the sum the remainder if divided by 10 = last digit\\n        // This is correct because: 385 % 10 = 5, 38 % 10 = 8 and so on.\\n        while (n > 0) {\\n            sum = sum + n % 10;\\n            // Divide the number by 10 to get the remaining digits:\\n            // 385 / 10 floor = 38\\n            // Keep doing this until we get to the first digit:\\n            n = Math.floor(n / 10);\\n        }\\n        // Out of while loop => We\\'ve got to the first digit of the number:\\n        // Put the sum we have as the new number to compute:\\n        n = sum;\\n    }\\n    // Out of while loop => n is a 1 digit number, return it.\\n    return n;\\n};\\n```\n```javascript\\n/**\\n * Solution based on the formula: dr(n) = 1 + (n - 1) % 9\\n * Explanations:\\n * https://leetcode.com/problems/add-digits/discuss/68580/Accepted-C%2B%2B-O(1)-time-O(1)-space-1-Line-Solution-with-Detail-Explanations\\n * https://leetcode.com/problems/add-digits/discuss/68572/3-methods-for-python-with-explains\\n * Time = O(1) because all operations take constant time.\\n * Space = O(1) because we don\\'t store anything.\\n * @param {number} num\\n * @return {number}\\n */\\nvar addDigits = function(num) {\\n    return 1 + (num - 1) % 9;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 68689,
                "title": "java-solution-without-using-any-tricks",
                "content": "I realized that most of answers use the \"mod 9\" trick. Here is a more normal way to solve the problem:\\n\\n    public class Solution {\\n        public int addDigits(int num) {\\n            int cur = num; \\n            int sum = 0; \\n            boolean oneDigit = false; \\n            while (!oneDigit) {\\n                while (cur/10 != 0) {\\n                    sum += cur%10; \\n                    cur = cur/10; \\n                }\\n                sum += cur; \\n                if (sum/10 == 0)\\n                    oneDigit = true;\\n                else {\\n                    cur = sum;\\n                    sum = 0; \\n                }\\n            }\\n            return sum; \\n        }\\n    }",
                "solutionTags": [
                    "Array"
                ],
                "code": "class Solution {\\n        public int addDigits(int num) {\\n            int cur = num; \\n            int sum = 0; \\n            boolean oneDigit = false; \\n            while (!oneDigit) {\\n                while (cur/10 != 0) {\\n                    sum += cur%10; \\n                    cur = cur/10; \\n                }",
                "codeTag": "Java"
            },
            {
                "id": 68793,
                "title": "256ms-java-one-line-solution",
                "content": "    public class Solution {\\n        public int addDigits(int num) {\\n            return (num - 1) % 9 + 1;\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public int addDigits(int num) {\\n            return (num - 1) % 9 + 1;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3405886,
                "title": "easy-c-solution-beats-100-time",
                "content": "<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nConverting num into string and adding each digit asumming it as a char.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        string s=to_string(num);\\n        int k=10;\\n        while(k>9)\\n        {\\n            k=0;\\n            for(int i=0;i<s.size();i++)\\n            {\\n                k+=s[i]-48;\\n            }\\n            s=to_string(k);\\n        }\\n        return k;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        string s=to_string(num);\\n        int k=10;\\n        while(k>9)\\n        {\\n            k=0;\\n            for(int i=0;i<s.size();i++)\\n            {\\n                k+=s[i]-48;\\n            }\\n            s=to_string(k);\\n        }\\n        return k;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1754929,
                "title": "c-solution-using-loop-and-o-1-time-complexity-with-explanations",
                "content": "> **If you\\u2019re interested in coding you can join my Discord Server, link in the comment section. Also if you find any mistake please let me know. Thank you!\\u2764\\uFE0F**\\n> \\n---\\n\\n## Explanation:\\n\\n### Solution 01\\n\\n- Here using while loop we\\u2019re adding numbers until it\\u2019s a single number.\\n- **Time complexity:** O(n).\\n\\n### Solution 02\\n\\n- Any number where its digits add to 9 is always divisible by 9. (18, 27, 36, 45, 54, 63, 72, 81, 90, etc.) Therefore the \\'digital root\\' for any number divisible by 9 is always 9.\\n- You can see this even in larger numbers like 99 because 9+9 = 18, and then 1+8 = 9 still, so the root always becomes 9 for any numbers divisible by 9.\\n- Additionally, 0 always has a digital root of 0 obviously. The only other cases you need to worry about to find the digital root are when it isn\\'t 0 or 9.\\n- So for any number that isn\\'t 0 and isn\\'t divisible by 9, the root will always n % 9 for a given number n. (AKA the difference between given number n and the nearest number that is divisible by 9, since numbers are divisible by 9 always have a digital root of 9).For examples: 100 % 9 = 1 (one greater than 99, which is divisible by 9).101 % 9 = 2102 % 9 = 3 and so on.\\n- This explanation/algorithm skips the whole \"add digits until there is only 1 remaining\", so\\xA0the description of this problem seems pretty misleading to me since it makes you think the solution will be something unrelated to the optimal one. I guess the point of Leetcode is to learn all of these tricks though.\\n- **Time complexity:** O(1).\\n\\n---\\n\\n## Code:\\n\\n```cpp\\n//Solution 01:\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        while(num>9){\\n            int temp = num%10;\\n            num = num/10 + temp;\\n        }\\n        return num;\\n    }\\n};\\n\\n//Solution 02:\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        if(num == 0) return 0;\\n        else if(num%9 == 0) return 9;\\n        else return num%9;\\n    }\\n};\\n```\\n\\n---\\n\\n> **Please upvote this solution**\\n>",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```cpp\\n//Solution 01:\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        while(num>9){\\n            int temp = num%10;\\n            num = num/10 + temp;\\n        }\\n        return num;\\n    }\\n};\\n\\n//Solution 02:\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        if(num == 0) return 0;\\n        else if(num%9 == 0) return 9;\\n        else return num%9;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1754565,
                "title": "python-easy-solution-o-1-time-complexity-99-faster",
                "content": "#### IF YOU FIND THIS POST HELPFUL PLEASE UPVOTE\\n\\nWe can solve this problem using math. The logic here is preety simple.\\n1. **if num == 0 : return 0** This statement is self explanatory. Here we are just returning 0 if the num is 0 \\n2. **if num % 9 == 0 : return 9** Here the logic is when the number is divisible by 9 then the final asnwer is always 9. For example 18, 27, 36.......... for all this number we will get final answer as 9.\\n3. **else : return (num % 9)** When the number is not 0 or if the number is not divisible by 9 then we return num%9. Suppose number is 100 then 100%9 = 1. if you calculate 99 = 9 (2nd Logic) and remaining 1 if you add 9+1 which is equal to 10 and final answer is 1. So here we are basically using the 2nd logic also.\\n\\n```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        if num == 0 : return 0\\n        if num % 9 == 0 : return 9\\n        else : return (num % 9)\\n```",
                "solutionTags": [
                    "Python",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        if num == 0 : return 0\\n        if num % 9 == 0 : return 9\\n        else : return (num % 9)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1754392,
                "title": "0ms-c-faster-than-100",
                "content": "***Do upvote if you find the post useful***\\nFirst we will go with the naive itterative approach. \\n```\\n  int addDigits(int num) {\\n        int sum=0;\\n        while(num/10>0){\\n            sum=0;\\n            while(num){\\n                sum+=num%10;\\n                num=num/10;\\n            }\\n            num=sum;\\n        }\\n        return num;\\n    }\\n```\\n Now we will look for O(1) time complexity solution.\\n\\nWe can Notice a pattern is formed of our solutions .... 0 will be 0 and 1-9 will be num itself \\nthen again it repeats itself ... look image for better understanding \\n\\n\\n![image](https://assets.leetcode.com/users/images/432bf227-e12f-43e4-b0a5-09f53ecf9e01_1644295006.5886524.jpeg)\\n\\nHence our O(1) time solution will be : \\n\\n```\\n int addDigits(int num) {\\n         if(num==0)return num;\\n         if(num%9==0) return 9;\\n         return num%9;\\n     }\\n```\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n  int addDigits(int num) {\\n        int sum=0;\\n        while(num/10>0){\\n            sum=0;\\n            while(num){\\n                sum+=num%10;\\n                num=num/10;\\n            }\\n            num=sum;\\n        }\\n        return num;\\n    }\\n```\n```\\n int addDigits(int num) {\\n         if(num==0)return num;\\n         if(num%9==0) return 9;\\n         return num%9;\\n     }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1754357,
                "title": "python3-easiest-solution-its-a-maths-trick",
                "content": "Very simple concept if a number is divisble by 9 and not equal to 0, its digit sum is always 9 otherwise digits sum will be num%9\\nThis question was asked in Tavisca solutions Technical round\\n```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        if num%9==0 and num!=0:\\n            return 9\\n        return num%9\\n        \\n```",
                "solutionTags": [
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        if num%9==0 and num!=0:\\n            return 9\\n        return num%9\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1754285,
                "title": "python-javascript-easy-solution-with-very-clear-explanation",
                "content": "`\\nWhat the question saying us to do means Given an integer num, repeatedly add all its digits until the result has only one digit, and return it.`\\n\\n\\n```\\n     let me explain you the approach \\uD83D\\uDE04 :\\n        1.let initialize our result as 0\\n        2. we will run our while loop until num becomes < 10 which means it is single digit\\n        3. How we will separate the digits?\\n            Modulus operator %:\\n                use of modulus operator % is to get last digit of num and if we divide the num by 10 it will remove the last digit.\\n            we will use modulus operator to get the last digit and then divide the num by 10\\n            so we will get the last digit and then divide the num by 10 \\n        4. we will check our base case \\uD83D\\uDE04\\n            if result is < 10 then we will return result\\n        5. we will sum the last digit and num /10 which is quotient then we will assign result and num repeat the process\\n             num/10 --> quotient     \\n             result = quotient  + last digit\\n     For Example:\\n            num=98\\n            result=0\\n            first iteration:\\n                last digit= 98 % 10 = 8\\n                quotient = 98 / 10 = 9 \\n                result=8+9=17\\n                num=17\\n            second iteration:\\n                last digit= 17 % 10 = 7\\n                quotient = 17 / 10 = 1 \\n                result=8\\n                num=8\\n            third iteration:\\n                \\n                This hit our base case so we will return result as 8\\n\\n```\\n![image](https://assets.leetcode.com/users/images/32b0db83-f3fc-4d3e-a682-76c3562a7be1_1644292048.6959898.jpeg)\\n\\n\\n`Javascript`\\n\\n```\\nconst addDigits = (num) => {\\n  let result = Infinity;\\n  if (num === 0) return 0; // Edge case\\n  while (true) {\\n    if (result < 10) return result;\\n    digVal = (num % 10) + Math.floor(num / 10);  // Get the last digit and quotient\\n    result = digVal;\\n    num = digVal;\\n  }\\n};\\n```\\n\\n\\n`Python`\\n```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        if num <=0:return num\\n        while(True):\\n            if num < 10:return num\\n            digVal=(num%10) + num //10\\n            num=digVal\\n            \\n```\\n\\n```\\nBig O:\\n\\tTime :O(n)\\n\\tspace:O(1)\\n\\t\\nRuntime: 28 ms, faster than 94.22% of Python3 online submissions for Add\\nDigits.\\nMemory Usage: 13.9 MB, less than 91.66% of Python3 online submissions\\nfor Add Digits.\\n```\\n\\n",
                "solutionTags": [
                    "Python",
                    "JavaScript"
                ],
                "code": "```\\n     let me explain you the approach \\uD83D\\uDE04 :\\n        1.let initialize our result as 0\\n        2. we will run our while loop until num becomes < 10 which means it is single digit\\n        3. How we will separate the digits?\\n            Modulus operator %:\\n                use of modulus operator % is to get last digit of num and if we divide the num by 10 it will remove the last digit.\\n            we will use modulus operator to get the last digit and then divide the num by 10\\n            so we will get the last digit and then divide the num by 10 \\n        4. we will check our base case \\uD83D\\uDE04\\n            if result is < 10 then we will return result\\n        5. we will sum the last digit and num /10 which is quotient then we will assign result and num repeat the process\\n             num/10 --> quotient     \\n             result = quotient  + last digit\\n     For Example:\\n            num=98\\n            result=0\\n            first iteration:\\n                last digit= 98 % 10 = 8\\n                quotient = 98 / 10 = 9 \\n                result=8+9=17\\n                num=17\\n            second iteration:\\n                last digit= 17 % 10 = 7\\n                quotient = 17 / 10 = 1 \\n                result=8\\n                num=8\\n            third iteration:\\n                \\n                This hit our base case so we will return result as 8\\n\\n```\n```\\nconst addDigits = (num) => {\\n  let result = Infinity;\\n  if (num === 0) return 0; // Edge case\\n  while (true) {\\n    if (result < 10) return result;\\n    digVal = (num % 10) + Math.floor(num / 10);  // Get the last digit and quotient\\n    result = digVal;\\n    num = digVal;\\n  }\\n};\\n```\n```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        if num <=0:return num\\n        while(True):\\n            if num < 10:return num\\n            digVal=(num%10) + num //10\\n            num=digVal\\n            \\n```\n```\\nBig O:\\n\\tTime :O(n)\\n\\tspace:O(1)\\n\\t\\nRuntime: 28 ms, faster than 94.22% of Python3 online submissions for Add\\nDigits.\\nMemory Usage: 13.9 MB, less than 91.66% of Python3 online submissions\\nfor Add Digits.\\n```",
                "codeTag": "Java"
            },
            {
                "id": 948670,
                "title": "python-one-liner",
                "content": "**Short solution**\\n```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        if num%9==0 and num!=0:\\n            return 9\\n        else:\\n            return num%9\\n```\\n\\n**1-liner**\\n```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        return 1+(num-1)%9\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        if num%9==0 and num!=0:\\n            return 9\\n        else:\\n            return num%9\\n```\n```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        return 1+(num-1)%9\\n```",
                "codeTag": "Java"
            },
            {
                "id": 506129,
                "title": "python-four-solutions",
                "content": "```\\nclass Solution:\\n    def addDigits(self, num: int):\\n        # Solution 1: iterative,\\n        # Runtime : O(n), where n is the number of digits\\n        # Space : O(n)\\n        s = str(num)\\n        while num > 9:\\n            result = 0\\n            for each in s:\\n                result += int(each)\\n            num = result\\n            s = str(num)\\n        return int(s)\\n```\\n\\n```\\n        # Solution 2: recursion\\n        # Runtime : O(n), where n is the number of digits\\n        # Space : O(n)\\n        if num <= 9:\\n            return num\\n        result = 0\\n        for each in str(num):\\n            result += int(each)\\n        return self.addDigits(result)\\n```\\n\\n```\\n        # Solution 3: fastest, finding pattern using brute-force\\n        # Runtime : O(1)\\n        # Space : O(1)\\n        if num < 9:  # any number below 9 is one digit\\n            return num\\n        else:\\n            if num % 9 != 0:  # numbers who are not divisible by 9 their digital root is the modulus result by 9\\n                # example: 38 > 3+8 > 1+1 > 2\\n                # 38 % 9 = 2\\n                return num % 9\\n            else:\\n                return 9  # all numbers divisible by 9 have digital root as 9\\n                # example : 729 > 9+9 > 1+8 > 9\\n                # 729//9 = 9\\n```\\n\\n```\\n        # Solution 4: digital root formula\\n        if num == 0:\\n            return 0\\n        else:\\n            return (num-1) % (10-1)+1\\n\\n\\nsol = Solution()\\nnum = 15\\nprint(sol.addDigits(num))\\n\"\"\"\\nreference:\\n\\ndigital root formula for base b: use Congruence formula for easy understand\\nhttps://en.wikipedia.org/wiki/Digital_root\\n\"\"\"\\n\\n# Please let me know if you find any mistake\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Recursion",
                    "Iterator"
                ],
                "code": "```\\nclass Solution:\\n    def addDigits(self, num: int):\\n        # Solution 1: iterative,\\n        # Runtime : O(n), where n is the number of digits\\n        # Space : O(n)\\n        s = str(num)\\n        while num > 9:\\n            result = 0\\n            for each in s:\\n                result += int(each)\\n            num = result\\n            s = str(num)\\n        return int(s)\\n```\n```\\n        # Solution 2: recursion\\n        # Runtime : O(n), where n is the number of digits\\n        # Space : O(n)\\n        if num <= 9:\\n            return num\\n        result = 0\\n        for each in str(num):\\n            result += int(each)\\n        return self.addDigits(result)\\n```\n```\\n        # Solution 3: fastest, finding pattern using brute-force\\n        # Runtime : O(1)\\n        # Space : O(1)\\n        if num < 9:  # any number below 9 is one digit\\n            return num\\n        else:\\n            if num % 9 != 0:  # numbers who are not divisible by 9 their digital root is the modulus result by 9\\n                # example: 38 > 3+8 > 1+1 > 2\\n                # 38 % 9 = 2\\n                return num % 9\\n            else:\\n                return 9  # all numbers divisible by 9 have digital root as 9\\n                # example : 729 > 9+9 > 1+8 > 9\\n                # 729//9 = 9\\n```\n```\\n        # Solution 4: digital root formula\\n        if num == 0:\\n            return 0\\n        else:\\n            return (num-1) % (10-1)+1\\n\\n\\nsol = Solution()\\nnum = 15\\nprint(sol.addDigits(num))\\n\"\"\"\\nreference:\\n\\ndigital root formula for base b: use Congruence formula for easy understand\\nhttps://en.wikipedia.org/wiki/Digital_root\\n\"\"\"\\n\\n# Please let me know if you find any mistake\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 68615,
                "title": "golang-concise-o-1-solution",
                "content": "```\\nfunc addDigits(num int) int {\\n    if num < 10 {\\n        return num\\n    }\\n    \\n    if r := num % 9; r == 0 {\\n        return 9\\n    } else {\\n        return r\\n    }\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc addDigits(num int) int {\\n    if num < 10 {\\n        return num\\n    }\\n    \\n    if r := num % 9; r == 0 {\\n        return 9\\n    } else {\\n        return r\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1759499,
                "title": "rust-o-1",
                "content": "```rust\\nimpl Solution {\\n    pub fn add_digits(mut num: i32) -> i32 {\\n        match num {\\n            0 => return 0,\\n            _ => {\\n                num = num % 9;\\n                if num == 0 {\\n                    return 9\\n                } else {\\n                    return num\\n                }\\n            }\\n        }\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```rust\\nimpl Solution {\\n    pub fn add_digits(mut num: i32) -> i32 {\\n        match num {\\n            0 => return 0,\\n            _ => {\\n                num = num % 9;\\n                if num == 0 {\\n                    return 9\\n                } else {\\n                    return num\\n                }\\n            }\\n        }\\n    }\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1755036,
                "title": "javascript-single-line-without-inbuilt-function-simple-maths-o-1-time",
                "content": "Simple Maths\\nlets recall - Any number is divisible by 9 if and only if the sum of its digits is divisible by 9 right?\\n\\nSo lets take some examples - \\nif any number is suppose 18954273\\nits sum will be -\\n1 + 8 + 9 + 5 + 4 + 2 + 7 + 3 = 39\\n3 + 9 = 12\\n1 + 2 = 3\\nAnd if we see 18954273/9 = 3\\n\\nSo we can see \\nif Number = 0, Answer will b zero\\nif Number % 9 = 0, Answer will be 9 e.g 18, 27, 54...\\nand in all other cases Answer will b Number % 9;\\nExplaination : ![image](https://assets.leetcode.com/users/images/5616cc8a-6d07-4190-85d7-0e00f260680b_1644309697.9839036.png)\\n\\nSingle line code: \\n```\\nvar addDigits = function(num) {\\n    return (num == 0) ? 0 :(num % 9 == 0) ? 9 : num % 9 ;\\n};\\n```\\n\\n\\u2B06\\uFE0F **Upvote** if it helped .",
                "solutionTags": [
                    "JavaScript",
                    "Math"
                ],
                "code": "```\\nvar addDigits = function(num) {\\n    return (num == 0) ? 0 :(num % 9 == 0) ? 9 : num % 9 ;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1427623,
                "title": "simple-math-solution-o-1-100-faster-solution",
                "content": "If we see, sum of numbers in terms of multiple of 9 as \\n1   ..      2   ..      3  ..       4    ..     5   ..        6   ..       7  ..         8   ..          9\\n10    ..    11    ..    12  ..     13     ..   14  ..      15  ..       16 ..        17     ..      18\\n19  ..      20 ..       21 ..       22  ..      23     ..   24 ..       25  ..       26         ..   27 \\n\\nwe will get sum in the terms of num % 9 \\nJust consider base condition when num % 9 == 0 as it should return 9 instead of 0 and another condition is when num == 0 it should return 0 only.\\n\\n\\tclass Solution {\\n\\t\\tpublic int addDigits(int num) {\\n\\t\\t\\tif(num == 0){\\n\\t\\t\\t   return 0; \\n\\t\\t\\t} else if(num % 9 == 0) {\\n\\t\\t\\t\\treturn 9;\\n\\t\\t\\t} \\n\\t\\t\\treturn num%9;\\n\\t\\t}\\n\\t}\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n\\t\\tpublic int addDigits(int num) {\\n\\t\\t\\tif(num == 0){\\n\\t\\t\\t   return 0; \\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 68699,
                "title": "one-line-in-c",
                "content": "    class Solution {\\n    public:\\n        int addDigits(int num) {\\n            return (num-1)%9 + 1;\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        int addDigits(int num) {\\n            return (num-1)%9 + 1;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 68705,
                "title": "my-240ms-3-line-java-solution",
                "content": " \\n    public int addDigits(int num){\\n        if(num<10)\\n        \\treturn num;\\n    \\treturn addDigits((num%10)+(num/10));\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": " \\n    public int addDigits(int num){\\n        if(num<10)\\n        \\treturn num;\\n    \\treturn addDigits((num%10)+(num/10));\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 68761,
                "title": "three-lines-c-solution-w-o-loop-recursion",
                "content": "    //original:   \\n    class Solution {\\n        public:\\n            int addDigits(int num) {\\n                if (num == 0) return 0;\\n                if (num % 9 == 0) return 9;\\n                return num - (num / 9) * 9;\\n            }\\n        };\\n    \\n    //edited:\\n    class Solution {\\n        public:\\n            int addDigits(int num) {\\n                //the most special case\\n                if (num == 0) return 0; \\n                //when num can be completely divided by 9, result is 9\\n                if (num % 9 == 0) return 9;\\n                //otherwise, the result should be num modulo 9\\n                return num % 9;\\n            }\\n        };",
                "solutionTags": [],
                "code": "class Solution {\\n        public:\\n            int addDigits(int num) {\\n                if (num == 0) return 0;\\n                if (num % 9 == 0) return 9;\\n                return num - (num / 9) * 9;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3455506,
                "title": "o-1-time-with-explanation-go",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nLet\\'s observe the pattern of adding the units digit from 1 to 18 below:\\n\\n1  -> 1\\n2  -> 2\\n3  -> 3\\n4  -> 4\\n5  -> 5\\n6  -> 6\\n7  -> 7\\n8  -> 8\\n9  -> 9\\n10 -> 1\\n11 -> 2\\n12 -> 3\\n13 -> 4\\n14 -> 5\\n15 -> 6\\n16 -> 7\\n17 -> 8\\n18 -> 9\\n\\nWe can observe that the result of adding the units digit appears in a cycle, which is from 1 to 9 repeating constantly. Therefore, we can simply take the given number modulo 9, and the result will be the sum of the digits. If the result is 0, then we return 9.\\n\\n# Code\\n```\\nfunc addDigits(num int) int {\\n    if num == 0 {\\n        return 0\\n    }\\n    if num % 9 == 0 {\\n        return 9\\n    }\\n    return num % 9\\n}\\n```",
                "solutionTags": [
                    "Go",
                    "Math"
                ],
                "code": "```\\nfunc addDigits(num int) int {\\n    if num == 0 {\\n        return 0\\n    }\\n    if num % 9 == 0 {\\n        return 9\\n    }\\n    return num % 9\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3455491,
                "title": "easiest-java-solution-beating-100-in-tc",
                "content": "# PLEASE UPVOTE!!!!\\n\\n![Screenshot 2023-04-26 at 06.22.16.png](https://assets.leetcode.com/users/images/01aab1c5-2971-43c3-8fb5-edd7a8c35058_1682470545.4625726.png)\\n\\n\\n# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nModding and Adding.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nTaking mody by 10 of the number untill it becomes single digit number i.e. smaller than 9;\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(logN)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int addDigits(int num) {\\n        int n=0,res;\\n        while(num>9){\\n            n=num;\\n            num=0;\\n            while(n>0){\\n                num+=(n%10);\\n                n/=10;\\n            }\\n        }\\n        return num;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int addDigits(int num) {\\n        int n=0,res;\\n        while(num>9){\\n            n=num;\\n            num=0;\\n            while(n>0){\\n                num+=(n%10);\\n                n/=10;\\n            }\\n        }\\n        return num;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3437422,
                "title": "c-o-1-fast-and-simple",
                "content": "\\n# Code\\n```\\npublic class Solution {\\n    public int AddDigits(int num) {\\n        if(num == 0)\\n            return 0;\\n        int ans = num % 9;\\n        return ans == 0 ? 9 : ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int AddDigits(int num) {\\n        if(num == 0)\\n            return 0;\\n        int ans = num % 9;\\n        return ans == 0 ? 9 : ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3235135,
                "title": "258-time-93-24-and-space-93-55-solution-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nThe addDigits function takes an integer num as input and returns its digital root. If num is 0, the function returns 0. Otherwise, it calculates the digital root using the formula 1 + (num - 1) % 9, which is equivalent to (num - 1) % 9 + 1. This formula works because the digital root of a positive integer is equivalent to the remainder of the number when divided by 9, except when the number is divisible by 9, in which case the digital root is 9. However, since the formula num % 9 returns 0 when num is divisible by 9, we use the formula 1 + (num - 1) % 9 to correctly handle the case when num is divisible by 9.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n  def addDigits(self, num: int) -> int:\\n    return 0 if num == 0 else 1 + (num - 1) % 9\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math",
                    "Simulation",
                    "Number Theory"
                ],
                "code": "```\\nclass Solution:\\n  def addDigits(self, num: int) -> int:\\n    return 0 if num == 0 else 1 + (num - 1) % 9\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 756455,
                "title": "explaination",
                "content": "**As ,**\\n1 % 9 = 1\\n10 % 9 = 1\\n100 % 9 = 1\\n so ..`10^n \\u2261 1 (mod 9)`, \\n and thus **a<sub>n</sub>10^n + a<sub>n-1</sub>10^n + ... + a<sub>1</sub>10 + a<sub>0</sub> \\u2261 a<sub>n</sub> + ... +a<sub>0</sub> (mod 9)**\\nthis process can be continued until a number less than 9 is gotten, i.e. num % 9.\\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        if(num == 0)\\n            return 0;\\n        return  num % 9 != 0 ? num % 9 : 9;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        if(num == 0)\\n            return 0;\\n        return  num % 9 != 0 ? num % 9 : 9;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 756362,
                "title": "c-100-time-100-space-recursive-oneliner-vs-iterative-solution-explained",
                "content": "So, the fun first - we recurse summing `n % 10` (last digit) to all the rest of the number (`n / 10`) until we are only left with one digit:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int addDigits(int n) {\\n        return n < 10 ? n : addDigits(n / 10 + n % 10);\\n    }\\n};\\n```\\n\\nI know I already wrote [a (poor) iterative solution](https://leetcode.com/problems/add-digits/discuss/702503/C%2B%2B-100-Time-iterative-solution-almost-100-space-O(1)-explained), but I wanted to convert this one into an iterative one directly, since I believe is always a good exercise when preparing for interview, so here is the above code, turned into an iterative approach (note the `while` loop kept into one line for better grasping the similarities with the above):\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int addDigits(int n) {\\n        while (n > 9) {n = n / 10 + n % 10;};\\n        return n;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion",
                    "Iterator"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    int addDigits(int n) {\\n        return n < 10 ? n : addDigits(n / 10 + n % 10);\\n    }\\n};\\n```\n```cpp\\nclass Solution {\\npublic:\\n    int addDigits(int n) {\\n        while (n > 9) {n = n / 10 + n % 10;};\\n        return n;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 494965,
                "title": "python-o-1-sol-based-on-digital-root-90-with-explanation",
                "content": "Python O(1) space sol based on digital root.\\n\\n---\\n\\nThis leetcode challenge is an application of digital root in mathematics.\\n\\nFormula of digital root over base 10\\uFF1A\\n\\nGiven \\nn = input integer, and \\nb = 10 (i.e., b means base here. )\\ndrb(n) = the final digit sum until one digit\\n\\n![image](https://assets.leetcode.com/users/brianchiang_tw/image_1580469628.png)\\n\\n\\nReference:\\n[Digial Root](https://en.wikipedia.org/wiki/Digital_root)\\n\\n---\\n\\n```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        \\n        if num < 10:\\n            # single digit\\n            return num\\n\\t\\t\\t\\n        else:\\n            # multiple digits, using the formula of digital root\\n            return (num-1)%9 + 1\\n```\\n\\n---\\n\\nShare another solution with iteration as well as type conversion\\n\\n```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        \\n        num_str = str(num)\\n        \\n        # keep adding until only one digit remains\\n        while len(num_str) > 1:\\n            \\n            num_str = str(sum(map(int, num_str)))\\n        \\n        return int(num_str)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math",
                    "Iterator"
                ],
                "code": "```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        \\n        if num < 10:\\n            # single digit\\n            return num\\n\\t\\t\\t\\n        else:\\n            # multiple digits, using the formula of digital root\\n            return (num-1)%9 + 1\\n```\n```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        \\n        num_str = str(num)\\n        \\n        # keep adding until only one digit remains\\n        while len(num_str) > 1:\\n            \\n            num_str = str(sum(map(int, num_str)))\\n        \\n        return int(num_str)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 68731,
                "title": "2ms-java-soultion-with-one-line",
                "content": "----------\\n\\npublic class Solution {\\n\\n    public int addDigits(int num) {\\n        return num == 0 ? 0 : (num % 9 == 0 ? 9 : num % 9);\\n    }\\n}\\n\\n\\n----------",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n\\n    public int addDigits(int num) {\\n        return num == 0 ? 0 : (num % 9 == 0 ? 9 : num % 9);\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 68744,
                "title": "2ms-java-solution",
                "content": "public class Solution {\\n\\n    public int addDigits(int num) {\\n        num = 1+(num-1)%9;\\n        return num;\\n \\n    }\\n    \\n\\n    \\n}",
                "solutionTags": [],
                "code": "class Solution {\\n\\n    public int addDigits(int num) {\\n        num = 1+(num-1)%9;\\n        return num;\\n \\n    }",
                "codeTag": "Java"
            },
            {
                "id": 68747,
                "title": "3ms-java-solution",
                "content": "    public class Solution {\\n    public int addDigits(int num) {\\n\\t\\tint tmp = 0;\\n\\t\\twhile (num > 0) {\\n\\t\\t\\ttmp += num % 10;\\n\\t\\t\\tif (tmp >= 10) {\\n\\t\\t\\t\\ttmp = tmp % 10 + tmp / 10;\\n\\t\\t\\t}\\n\\t\\t\\tnum = num / 10;\\n\\t\\t}\\n\\t\\treturn tmp;\\n\\t\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int addDigits(int num) {\\n\\t\\tint tmp = 0;\\n\\t\\twhile (num > 0) {\\n\\t\\t\\ttmp += num % 10;\\n\\t\\t\\tif (tmp >= 10) {\\n\\t\\t\\t\\ttmp = tmp % 10 + tmp / 10;\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 68786,
                "title": "solution-with-and-without-recursion",
                "content": "Using recursion, \\n\\n    int addDigit(int num) {\\n        int sum = 0;\\n        if (num < 10) return num;\\n        do {\\n            sum += num % 10;\\n            num /= 10;\\n        }while (num>0);\\n        return addDigits(sum);\\n    }\\n\\nusing congruence formula, O(1) time, O(1) space\\n\\n    int addDigit(int num) {\\n        if (num == 0) return 0;\\n        else if (num % 9 == 0) return 9;\\n        else return num % 9;\\n    }",
                "solutionTags": [],
                "code": "Using recursion, \\n\\n    int addDigit(int num) {\\n        int sum = 0;\\n        if (num < 10) return num;\\n        do {\\n            sum += num % 10;\\n            num /= 10;\\n        }while (num>0);\\n        return addDigits(sum);\\n    }\\n\\nusing congruence formula, O(1) time, O(1) space\\n\\n    int addDigit(int num) {\\n        if (num == 0) return 0;\\n        else if (num % 9 == 0) return 9;\\n        else return num % 9;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 68802,
                "title": "python-different-solutions",
                "content": "        \\n    def addDigits1(self, num):\\n        return num - ((num-1)/9)*9 if num > 0 else 0\\n        \\n    def addDigits2(self, num):\\n        return (num-1)%9 + 1 if num > 0 else 0\\n        \\n    def addDigits3(self, num):\\n        return num and (num-1)%9 + 1\\n      \\n    # Recursively  \\n    def addDigits4(self, num):\\n        if 0<= num <= 9:\\n            return num\\n        tmp = 0\\n        while num:\\n            tmp += num % 10\\n            num //= 10\\n        return self.addDigits(tmp)\\n        \\n    # Iteratively\\n    def addDigits(self, num):\\n        if num == 0:\\n            return 0\\n        while num:\\n            if 1 <= num <= 9:\\n                return num\\n            tmp = 0\\n            while num:\\n                tmp += num % 10\\n                num //= 10\\n            num = tmp",
                "solutionTags": [
                    "Python",
                    "Recursion"
                ],
                "code": "        \\n    def addDigits1(self, num):\\n        return num - ((num-1)/9)*9 if num > 0 else 0\\n        \\n    def addDigits2(self, num):\\n        return (num-1)%9 + 1 if num > 0 else 0\\n        \\n    def addDigits3(self, num):\\n        return num and (num-1)%9 + 1\\n      \\n    # Recursively  \\n    def addDigits4(self, num):\\n        if 0<= num <= 9:\\n            return num\\n        tmp = 0\\n        while num:\\n            tmp += num % 10\\n            num //= 10\\n        return self.addDigits(tmp)\\n        \\n    # Iteratively\\n    def addDigits(self, num):\\n        if num == 0:\\n            return 0\\n        while num:\\n            if 1 <= num <= 9:\\n                return num\\n            tmp = 0\\n            while num:\\n                tmp += num % 10\\n                num //= 10\\n            num = tmp",
                "codeTag": "Python3"
            },
            {
                "id": 3458428,
                "title": "c-100-faster-easiest-code-beginner-friendly",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        // Run this loop till num is atleast of two digit number\\n        while(num/10){\\n            int digitSum = 0;\\n            // Add all the digits of num to \"digitSum\"\\n            while(num){\\n                digitSum += num % 10;\\n                num /= 10;\\n            }\\n            // Assign this new Value to num again to repeat this process until num becomes a single digit integer\\n            num = digitSum;\\n        }\\n        return num;\\n    }\\n};\\n```\\n<img src=\"https://assets.leetcode.com/users/images/cde42097-431d-4683-963b-d488af508080_1681230761.754524.png\" width=\"400\">\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        // Run this loop till num is atleast of two digit number\\n        while(num/10){\\n            int digitSum = 0;\\n            // Add all the digits of num to \"digitSum\"\\n            while(num){\\n                digitSum += num % 10;\\n                num /= 10;\\n            }\\n            // Assign this new Value to num again to repeat this process until num becomes a single digit integer\\n            num = digitSum;\\n        }\\n        return num;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3455988,
                "title": "my-simple-java-one-line-solution",
                "content": "# Intuition\\n<!-- Simply taking the reminder \\nand adding it again using recursion till it becomes < 10 > -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- O(n) -->\\n\\n- Space complexity:\\n<!-- O(1)-->\\n\\n# Code\\n```\\nclass Solution {\\n    public int addDigits(int num) {\\n    \\n       return num < 10 ? num : addDigits((num % 10) + ( num /10));\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public int addDigits(int num) {\\n    \\n       return num < 10 ? num : addDigits((num % 10) + ( num /10));\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3455877,
                "title": "c-solution-easy-iterative-and-o-1-approach-explained",
                "content": "# O(1) Approach\\n- If we watch closely than we will notice a pattern in the ans of the first 100 digits\\n\\n```\\nNumber          Answer (Sum of digits till < 10)\\n  1                1 \\n  2                2\\n  3                3\\n  4                4\\n  5                5\\n  6                6\\n  7                7\\n  8                8  // Other times its just the mod of 9\\n  9                9  // Only the number divisible by 9 gives a answer 9\\n  -------------------\\n  10               1\\n  11               2\\n  12               3\\n  13               4\\n  14               5\\n  15               6\\n  16               7\\n  17               8\\n  18               9  // Its valid for all the values \\n  -------------------\\n  19               1\\n  20               2\\n  21               3\\n  22               4\\n  23               5\\n  24               6\\n  25               7\\n  26               8\\n  27               9\\n  -------------------\\n  28               1\\n  29               2\\n  30               3\\n  31               4\\n  32               5\\n  33               6\\n  34               7\\n  35               8\\n  36               9\\n  -------------------\\n  37               1\\n  38               2\\n  39               3\\n  40               4\\n  41               5\\n  42               6\\n  43               7\\n  44               8\\n  45               9\\n  -------------------\\n  46               1\\n  47               2\\n  48               3\\n  49               4\\n  50               5\\n  51               6\\n  52               7\\n  53               8\\n  54               9\\n  -------------------\\n  55               1\\n  56               2\\n  57               3\\n  58               4\\n  59               5\\n  60               6\\n  61               7\\n  62               8\\n  63               9\\n  -------------------\\n  64               1\\n  65               2\\n  66               3\\n  67               4\\n  68               5\\n  69               6\\n  70               7\\n  71               8\\n  72               9\\n  -------------------\\n  73               1\\n  74               2\\n  75               3\\n  76               4\\n  77               5\\n  78               6\\n  79               7\\n  80               8\\n  81               9\\n  -------------------\\n  82               1\\n  83               2\\n  84               3\\n  85               4\\n  86               5\\n  87               6\\n  88               7\\n  89               8\\n  90               9\\n  -------------------\\n  91               1\\n  92               2\\n  93               3\\n  94               4\\n  95               5\\n  96               6\\n  97               7\\n  98               8\\n  99               9\\n  -------------------\\n  100              1\\n```\\n- First approach is this:\\n  1. If the num is 0 i.e. num == 0, then we return 0\\n  2. Other wise we return num%9, but if num is fully divisible then we return 9 instead\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {;\\n        return num==0?0:num%9?num%9:9;\\n    }\\n};\\n```\\n# Then there\\'s this simple loop approach \\n- I guess there is no need to explain this \\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {;\\n        while(num>9){\\n            int sum=0;\\n            while(num){\\n                sum += (num%10);\\n                num /= 10;\\n            }\\n            num=sum;\\n        }        \\n        return num;\\n    }\\n};\\n```\\n![upvote cat.jpeg](https://assets.leetcode.com/users/images/2e83f26e-ccc9-4f2c-9bcf-e558f409e98d_1682481966.767231.jpeg)\\n",
                "solutionTags": [
                    "C++",
                    "Number Theory"
                ],
                "code": "```\\nNumber          Answer (Sum of digits till < 10)\\n  1                1 \\n  2                2\\n  3                3\\n  4                4\\n  5                5\\n  6                6\\n  7                7\\n  8                8  // Other times its just the mod of 9\\n  9                9  // Only the number divisible by 9 gives a answer 9\\n  -------------------\\n  10               1\\n  11               2\\n  12               3\\n  13               4\\n  14               5\\n  15               6\\n  16               7\\n  17               8\\n  18               9  // Its valid for all the values \\n  -------------------\\n  19               1\\n  20               2\\n  21               3\\n  22               4\\n  23               5\\n  24               6\\n  25               7\\n  26               8\\n  27               9\\n  -------------------\\n  28               1\\n  29               2\\n  30               3\\n  31               4\\n  32               5\\n  33               6\\n  34               7\\n  35               8\\n  36               9\\n  -------------------\\n  37               1\\n  38               2\\n  39               3\\n  40               4\\n  41               5\\n  42               6\\n  43               7\\n  44               8\\n  45               9\\n  -------------------\\n  46               1\\n  47               2\\n  48               3\\n  49               4\\n  50               5\\n  51               6\\n  52               7\\n  53               8\\n  54               9\\n  -------------------\\n  55               1\\n  56               2\\n  57               3\\n  58               4\\n  59               5\\n  60               6\\n  61               7\\n  62               8\\n  63               9\\n  -------------------\\n  64               1\\n  65               2\\n  66               3\\n  67               4\\n  68               5\\n  69               6\\n  70               7\\n  71               8\\n  72               9\\n  -------------------\\n  73               1\\n  74               2\\n  75               3\\n  76               4\\n  77               5\\n  78               6\\n  79               7\\n  80               8\\n  81               9\\n  -------------------\\n  82               1\\n  83               2\\n  84               3\\n  85               4\\n  86               5\\n  87               6\\n  88               7\\n  89               8\\n  90               9\\n  -------------------\\n  91               1\\n  92               2\\n  93               3\\n  94               4\\n  95               5\\n  96               6\\n  97               7\\n  98               8\\n  99               9\\n  -------------------\\n  100              1\\n```\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {;\\n        return num==0?0:num%9?num%9:9;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {;\\n        while(num>9){\\n            int sum=0;\\n            while(num){\\n                sum += (num%10);\\n                num /= 10;\\n            }\\n            num=sum;\\n        }        \\n        return num;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3455794,
                "title": "easy-java-solution-4-approaches",
                "content": "# Approach 1 (Brute force)\\n- Using String\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(n)$$\\nn -> number of digits in num\\n\\n# Code\\n```\\nclass Solution {\\n    public int addDigits(int num) {\\n        int sum = 0;\\n        String x = num+\"\";\\n        while(x.length() > 1){\\n            for(int i = x.length()-1; i >= 0; i--){\\n                int c = x.charAt(i);\\n                c = c - \\'0\\';\\n                sum += c;\\n            }\\n            x = sum+\"\";\\n            sum = 0;\\n        }\\n        return x.charAt(0)-\\'0\\';\\n    }\\n}\\n```\\n\\n# Approach 2\\n- Simple Iterative solution\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(n)$$\\nn -> number of digits in num\\n\\n# Code\\n```\\nclass Solution {\\n    public int addDigits(int num) {\\n        int sum = 0;\\n        int x = num;\\n        while(x > 9){\\n            sum += x%10;\\n            x /= 10;\\n            if(x<10){\\n                x = sum+x;\\n                sum = 0;\\n            }\\n        }\\n        return x;\\n    }\\n}\\n```\\n\\n# Approach 3\\n- O(1) solution\\n\\n# Complexity\\n- Time complexity: $$O(1)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public int addDigits(int num) {\\n        if(num < 10) return num;\\n        return num%9 == 0 ? 9 : num%9;\\n    }\\n}\\n```\\n\\n# Approach 4\\n- One line O(1) solution\\n\\n# Complexity\\n- Time complexity: $$O(1)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public int addDigits(int num) {\\n        return 1 + (num-1)%9;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int addDigits(int num) {\\n        int sum = 0;\\n        String x = num+\"\";\\n        while(x.length() > 1){\\n            for(int i = x.length()-1; i >= 0; i--){\\n                int c = x.charAt(i);\\n                c = c - \\'0\\';\\n                sum += c;\\n            }\\n            x = sum+\"\";\\n            sum = 0;\\n        }\\n        return x.charAt(0)-\\'0\\';\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int addDigits(int num) {\\n        int sum = 0;\\n        int x = num;\\n        while(x > 9){\\n            sum += x%10;\\n            x /= 10;\\n            if(x<10){\\n                x = sum+x;\\n                sum = 0;\\n            }\\n        }\\n        return x;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int addDigits(int num) {\\n        if(num < 10) return num;\\n        return num%9 == 0 ? 9 : num%9;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int addDigits(int num) {\\n        return 1 + (num-1)%9;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3455676,
                "title": "c-easy-approach-100-beat",
                "content": "# Intuition\\nSimple try to do whatever is menstion to do......\\n\\nLet\\'s perform given task step wise...\\n\\nWe need make part of given number and Add them to get another number and repeat this process unitill we can not get number less than 10.\\n```\\nExample:\\n    num = 123456\\n    let\\'s break and ADD it \\n    new num = 1+2+3+4+5+6 = 21\\n    now again repeate process num = 21\\n    new num = 1+2 = 3\\n    now our new num is less than 10 so , we need to come out of loop\\n    3 will be our final answer.\\n\\n```\\nTo find out last digit from a number:\\n`last_digit = num%10` \\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int addDigits(int n) {\\n        long long num = n;\\n        while(num>9){\\n            long long tp=0;\\n            while(num >0){\\n                tp+= num%10;\\n                num/=10;\\n            }\\n            num = tp;\\n        }\\n        return num;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nExample:\\n    num = 123456\\n    let\\'s break and ADD it \\n    new num = 1+2+3+4+5+6 = 21\\n    now again repeate process num = 21\\n    new num = 1+2 = 3\\n    now our new num is less than 10 so , we need to come out of loop\\n    3 will be our final answer.\\n\\n```\n```\\nclass Solution {\\npublic:\\n    int addDigits(int n) {\\n        long long num = n;\\n        while(num>9){\\n            long long tp=0;\\n            while(num >0){\\n                tp+= num%10;\\n                num/=10;\\n            }\\n            num = tp;\\n        }\\n        return num;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 606713,
                "title": "c-o-1-runtime-1-line-solution-with-detail-explanations",
                "content": "The problem, widely known as *digit root* problem, has a congruence formula:\\n\\n```https://en.wikipedia.org/wiki/Digital_root#Congruence_formula```\\n\\nFor base *b* (decimal case *b* = 10), the digit root of an integer is:\\n\\n* dr(*n*) = 0 if *n* == 0\\n* dr(*n*) = (*b* - 1) if *n* != 0 and *n* % (*b* - 1) == 0\\n* dr(*n*) = *n* mod (*b* - 1) if *n* % (*b* - 1) != 0\\n\\nor\\n\\n* **dr(*n*) = 1 + (*n* - 1) % 9**\\nNote here, when *n* = 0, since (*n* - 1) % 9 = -1, the return value is zero (correct).\\n\\nFrom the formula, we can find that the result of this problem is immanently periodic, with period (*b* - 1).\\n\\nOutput sequence for decimals (*b* = 10):\\n\\n~input: 0 1 2 3 4 ...\\noutput: 0 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 ....\\n\\nHenceforth, we can write the following code, whose time and space complexities are both O(1).\\n````\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        return (num - 1) % 9 + 1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```https://en.wikipedia.org/wiki/Digital_root#Congruence_formula```\n````\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        return (num - 1) % 9 + 1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 261022,
                "title": "one-line-o-1-c-solution",
                "content": "``` csharp\\npublic int AddDigits(int num) => 1 + (num - 1) % 9;\\n```",
                "solutionTags": [],
                "code": "``` csharp\\npublic int AddDigits(int num) => 1 + (num - 1) % 9;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 209143,
                "title": "java-no-loop-recursion-faster-than-100-minimalistic-solution",
                "content": "```\\npublic int addDigits(int num) {\\n\\tif(num==0)\\n\\t\\treturn 0;\\n\\tif(num%9==0)\\n\\t\\treturn 9;\\n\\treturn num%9;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic int addDigits(int num) {\\n\\tif(num==0)\\n\\t\\treturn 0;\\n\\tif(num%9==0)\\n\\t\\treturn 9;\\n\\treturn num%9;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 68638,
                "title": "python-constant-time-with-explanation",
                "content": "The naive approach is simply to turn the integer into a string, split the string into a list of digits, add up the digits, and recursively call addDigits on the resulting sum.\\n\\n```\\n    def addDigits(self, num):\\n        if num < 10:\\n            return num\\n        return self.addDigits(sum([int(d) for d in list(str(num))]))\\n```\\n\\nHowever, this isn't constant time (not quite sure what time complexity it is... I think O(log(num))).\\n\\n\\nTo come up with a constant time solution, it's instructive to consider the example input,\\n\\n```\\nnum = 41\\n```\\n\\nThe 2 recursive calls of the naive addDigits on this looks like:\\n\\n```\\nCall 1: 41\\nCall 2: 5\\n```\\n\\nNotice that we wouldn't be changing our results if we had 32 instead of 41 (**a difference of 9**). The results also wouldn't change if we had 23 instead of 41 (**a difference of 18**), or 14 instead of 41 (**a difference of 27**). Finally, we could've simply had 5 instead of the 41 (**a difference of 36**).\\n\\nThis gives us the hint that, in fact, we can take away as many 9's from a number as possible, without affecting the sum of its digits!\\n\\nThis leads us to the core of the function:\\n\\n```\\nfinal_sum(digits of num) = num%9\\n```\\n\\nOne case to be wary of: What happens when num=45? The sum of 4 and 5 is 9... yet the current function gives us 0! This can easily be taken care of by adding a conditional to our function:\\n\\n```\\nif num%9==0:\\n    return 9\\n```\\n\\nThis may lead to speculations of \"what happens when the sum really is 0? We wouldn't want to return 9!\" Well, the sum of the digits of any number is 0 if and only if the original number was 0 itself. So this is taken care of via another conditional:\\n\\n```\\nif num==0:\\n    return 0\\n```\\n\\nThe resulting function looks like:\\n```\\n    def addDigits(self, num):\\n        if num==0:\\n            return 0\\n        temp = num%9\\n        if temp==0:\\n            return 9\\n        else:\\n            return temp\\n```\\n\\nOr more concisely,\\n\\n```\\n    def addDigits(self, num):\\n        return num if not num else num%9 if num%9 else 9\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n    def addDigits(self, num):\\n        if num < 10:\\n            return num\\n        return self.addDigits(sum([int(d) for d in list(str(num))]))\\n```\n```\\nnum = 41\\n```\n```\\nCall 1: 41\\nCall 2: 5\\n```\n```\\nfinal_sum(digits of num) = num%9\\n```\n```\\nif num%9==0:\\n    return 9\\n```\n```\\nif num==0:\\n    return 0\\n```\n```\\n    def addDigits(self, num):\\n        if num==0:\\n            return 0\\n        temp = num%9\\n        if temp==0:\\n            return 9\\n        else:\\n            return temp\\n```\n```\\n    def addDigits(self, num):\\n        return num if not num else num%9 if num%9 else 9\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 68694,
                "title": "o-1-java-solution",
                "content": "    public class Solution {\\n        public int addDigits(int num) {\\n            return 1+(num-1)%9;\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public int addDigits(int num) {\\n            return 1+(num-1)%9;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 68712,
                "title": "c-easy-to-understand",
                "content": "    int addDigits(int num) {\\n        if(num<10)\\n          return num;\\n        else if(num%9==0)\\n          return 9;\\n        else\\n          return num%9;\\n    }",
                "solutionTags": [],
                "code": "    int addDigits(int num) {\\n        if(num<10)\\n          return num;\\n        else if(num%9==0)\\n          return 9;\\n        else\\n          return num%9;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 68728,
                "title": "c-1-line-solution",
                "content": "    int addDigits(int num) {\\n        return (num && !(num %= 9)) ? 9 : num;\\n    }",
                "solutionTags": [],
                "code": "    int addDigits(int num) {\\n        return (num && !(num %= 9)) ? 9 : num;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 68740,
                "title": "my-simple-java-solution-for-add-digits",
                "content": "There is just a simple pattern behind this problem, no technique or algorithm thing I think.\\n\\n    public class Solution {\\n        public int addDigits(int num) {\\n            if (num == 0){\\n                return 0;\\n            }\\n            return num % 9 == 0 ? 9 : (num % 9);\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public int addDigits(int num) {\\n            if (num == 0){\\n                return 0;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 68770,
                "title": "simple-c-solution",
                "content": "    int addDigits(int num) {\\n        int x;\\n        if(num==0){\\n            return 0;\\n        }\\n        else\\n        {\\n            x=num%9;\\n            if(x==0)\\n                return 9;\\n            else\\n                 return x;\\n        }\\n    }",
                "solutionTags": [],
                "code": "    int addDigits(int num) {\\n        int x;\\n        if(num==0){\\n            return 0;\\n        }\\n        else\\n        {\\n            x=num%9;\\n            if(x==0)\\n                return 9;\\n            else\\n                 return x;\\n        }\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 68795,
                "title": "my-simple-solution-only-one-line",
                "content": "    class Solution {\\n    public:\\n        int addDigits(int num) {\\n            return ( num - 1 ) % 9 + 1;\\n        }\\n    };",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n    public:\\n        int addDigits(int num) {\\n            return ( num - 1 ) % 9 + 1;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 68803,
                "title": "c-o-1-solution",
                "content": "    class Solution {\\n    public:\\n        int addDigits(int num) {\\n            if(num==0)\\n                return 0;\\n            else\\n                return (num-1)%9+1;\\n        }   \\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        int addDigits(int num) {\\n            if(num==0)\\n                return 0;\\n            else\\n                return (num-1)%9+1;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3493340,
                "title": "superb-solution-in-java-c-python",
                "content": "\\n\\n# 1. Java Solution\\n```\\nclass Solution {\\n    public int addDigits(int num) {\\n     int sum=0,rem;\\n     if(num<10){\\n     return num;}\\n    while(num>=10)\\n     {\\n        rem=num%10;\\n        num=num/10+rem;\\n   }\\n   return num;}\\n}\\n\\n```\\n# 2. c language Solution\\n```\\nint addDigits(int num){\\n    if (num<10){\\n        return num;\\n    }\\n    if (num%9==0){\\n        return 9;\\n    }\\n    return num%9;\\n\\n}\\n```\\n# Python Solution\\n```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        if num<10:\\n            return num\\n        if num%9==0:\\n            return 9\\n        return num%9\\n```\\n# please upvote me it would encourage me alot\\n\\n",
                "solutionTags": [
                    "Java",
                    "Python3",
                    "C"
                ],
                "code": "```\\nclass Solution {\\n    public int addDigits(int num) {\\n     int sum=0,rem;\\n     if(num<10){\\n     return num;}\\n    while(num>=10)\\n     {\\n        rem=num%10;\\n        num=num/10+rem;\\n   }\\n   return num;}\\n}\\n\\n```\n```\\nint addDigits(int num){\\n    if (num<10){\\n        return num;\\n    }\\n    if (num%9==0){\\n        return 9;\\n    }\\n    return num%9;\\n\\n}\\n```\n```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        if num<10:\\n            return num\\n        if num%9==0:\\n            return 9\\n        return num%9\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2532741,
                "title": "javascript-add-digit",
                "content": "```javascript \\nvar addDigits = function (num) {\\n  if (num < 10) {\\n    return num;\\n  } else {\\n    num = [...num.toString()].reduce((a, c) => a + Number(c), 0);\\n    return addDigits(num);\\n  }\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Recursion"
                ],
                "code": "```javascript \\nvar addDigits = function (num) {\\n  if (num < 10) {\\n    return num;\\n  } else {\\n    num = [...num.toString()].reduce((a, c) => a + Number(c), 0);\\n    return addDigits(num);\\n  }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1771014,
                "title": "runtime-0-ms-faster-than-100-00-0-1-approach-of-c-online-submissions-for-add-digits",
                "content": "this is easiest and simple.......got the idea form rd sharma class 9 book\\n\\n\\nint addDigits(int num){\\n    \\n if(num==0){\\n     return 0;\\n }\\nelse if(num%9==0){\\n    return 9;\\n}\\nelse{\\n    return (num%9);\\n}\\n}",
                "solutionTags": [
                    "C"
                ],
                "code": "this is easiest and simple.......got the idea form rd sharma class 9 book\\n\\n\\nint addDigits(int num){\\n    \\n if(num==0){\\n     return 0;\\n }\\nelse if(num%9==0){\\n    return 9;\\n}\\nelse{\\n    return (num%9);\\n}\\n}",
                "codeTag": "Java"
            },
            {
                "id": 1708114,
                "title": "javascript-math-approach-o-n-time-o-1-space",
                "content": "```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\n\\nfunction getDigit(number, place) {\\n    return Math.floor(Math.abs(number) / Math.pow(10, place)) % 10;\\n}\\n\\nfunction getDigitCount(number) {\\n    return number === 0\\n        ? number\\n        : Math.floor(Math.log10(Math.abs(number))) + 1;\\n}\\n\\nvar addDigits = function(num) {\\n    let digitCount = getDigitCount(num);\\n    \\n    while(digitCount > 1) {\\n        let sum = 0;\\n        for(let i = 0; i < digitCount; i++) {\\n            sum += getDigit(num, i);\\n            console.log(sum)\\n        }\\n        num = sum;\\n        digitCount = getDigitCount(num);\\n    }\\n    \\n    return num;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\n\\nfunction getDigit(number, place) {\\n    return Math.floor(Math.abs(number) / Math.pow(10, place)) % 10;\\n}\\n\\nfunction getDigitCount(number) {\\n    return number === 0\\n        ? number\\n        : Math.floor(Math.log10(Math.abs(number))) + 1;\\n}\\n\\nvar addDigits = function(num) {\\n    let digitCount = getDigitCount(num);\\n    \\n    while(digitCount > 1) {\\n        let sum = 0;\\n        for(let i = 0; i < digitCount; i++) {\\n            sum += getDigit(num, i);\\n            console.log(sum)\\n        }\\n        num = sum;\\n        digitCount = getDigitCount(num);\\n    }\\n    \\n    return num;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1509976,
                "title": "explained-o-1-digit-root-0ms-100-faster",
                "content": "```\\nclass Solution {\\n    public int addDigits(int num) \\n    {\\n    \\n        if(num==0) return 0;\\n        if(num%9==0) return 0;\\n        return num%9;\\n        //When you multiply any number by 9, the digital root will always be 9. \\n        //E.g. 7 X 9 = 63. \\n        //6 + 3 = 9------\\n        //13 X 9 = 117.\\n        //1 + 1 + 7 = 9-----\\n        //24 X 9 = 216\\n        //2 + 1 + 6 = 9 and so on.\\n    }\\n}\\n    \\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int addDigits(int num) \\n    {\\n    \\n        if(num==0) return 0;\\n        if(num%9==0) return 0;\\n        return num%9;\\n        //When you multiply any number by 9, the digital root will always be 9. \\n        //E.g. 7 X 9 = 63. \\n        //6 + 3 = 9------\\n        //13 X 9 = 117.\\n        //1 + 1 + 7 = 9-----\\n        //24 X 9 = 216\\n        //2 + 1 + 6 = 9 and so on.\\n    }\\n}\\n    \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1503377,
                "title": "c-0ms-2-methods-2-line-c-sol",
                "content": "![image](https://assets.leetcode.com/users/images/26fb4534-9880-445f-aacb-b2b635d85200_1633371912.334224.png)\\n\\n\\n* ***Method -1 :***\\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n    int ans = num % 9;\\n    return (ans != 0 || num == 0) ? ans : 9;\\n    }\\n};\\n```\\n\\n* ***Method -2 :***\\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        if(num / 10 == 0)\\n            return num;\\n       \\n        while(true){\\n            int sum = 0;\\n            while(num > 0){\\n                sum += num % 10;\\n                num = num/10;\\n            }\\n            if(sum / 10 == 0){\\n                return sum;\\n            }\\n            num = sum;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n    int ans = num % 9;\\n    return (ans != 0 || num == 0) ? ans : 9;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        if(num / 10 == 0)\\n            return num;\\n       \\n        while(true){\\n            int sum = 0;\\n            while(num > 0){\\n                sum += num % 10;\\n                num = num/10;\\n            }\\n            if(sum / 10 == 0){\\n                return sum;\\n            }\\n            num = sum;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1395855,
                "title": "simplest-java-solution-1ms-100-faster-than-other-java-online-submissions",
                "content": "class Solution {\\n    public int addDigits(int num) {\\n        int sum=0;\\n        while(num!=0){\\n            sum+=num%10;\\n            num/=10;\\n        }\\n        if(sum>9){\\n            return addDigits(sum);\\n        }\\n        return sum;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int addDigits(int num) {\\n        int sum=0;\\n        while(num!=0){\\n            sum+=num%10;\\n            num/=10;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 981408,
                "title": "easy-solution-c-0ms-digitalroot",
                "content": "```\\nclass Solution {\\npublic:\\n    int addDigits(int n) {\\n        int digitalroot;\\n        digitalroot=n-((10-1)*floor((n-1)/(10-1)));\\n        return digitalroot;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int addDigits(int n) {\\n        int digitalroot;\\n        digitalroot=n-((10-1)*floor((n-1)/(10-1)));\\n        return digitalroot;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 596688,
                "title": "0-1-python-super-simple-solution",
                "content": "```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        if num==0:\\n            return 0\\n        if num%9==0:\\n            return 9\\n        else:\\n            return num%9\\n       ```\\n\\t   \\n\\t   super simple solution\\n\\t   \\n\\t   > if the number is 0 then answer is 0\\n\\t   > if the number is multiple of 9 then the answer is 9\\n\\t   > else the answer is the number mod 9",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        if num==0:\\n            return 0\\n        if num%9==0:\\n            return 9\\n        else:\\n            return num%9\\n       ```",
                "codeTag": "Java"
            },
            {
                "id": 554252,
                "title": "digital-root-explanation",
                "content": "Digital Root or Seed Number  \\n \\n##### What basically is Digital Root?\\n\\n \\n Now, let us understand the concept of Digital Root/ Seed number in detail. Digital Root is the single number obtained by adding the number successively. E.g. Digital Root of 347 = 3 + 4 + 7 = 14, 14 = 1 + 4 = 5. Thus, 5 is a single digit number, which is the digital root/ seed number of 347.\\n \\n##### Some basic Properties of Digital Root:-\\n\\n\\n* When you multiply any number by 9, the digital root will always be 9. E.g. 7 X 9 = 63. 6 + 3 = 913 X 9 = 117. 1 + 1 + 7 = 924 X 9 = 216, 2 + 1 + 6 = 9 and so on.\\n\\n* When we add 9 to a number, it does not change the digital root of that number. E.g. 417 = 4+1+7= 12, 1+2 = 3. Now, if we annex 9 to this number i.e. 4179 = 4+1+7+9 = 21, 2+1 = 3. Hence, we observe that adding 9 does not change the DR of that number. So, we can omit 9 while calculating the digital root of a number and we can also omit any 2 or more numbers which add to 9 and still get the same digital root. This property eases out to calculate digital roots of certain numbers.e.g. 97 = 9 + 7 = 16, 1 + 6 = 7 so even if we omit 9 still DR is 7.\\n\\n* When we divide any number by 9, the digital root of that number will be the remainder. E.g.  remainder is 4 which is same as digital root of 13 (1 + 3 = 4)  remainder is 2 which is again same as 4 + 7 = 11, 1 + 1 = 2.\\n\\n* Digital root of any number will be from 1 to 9. As by definition only digital root of a number is obtained after adding the digits of a number successively until one gets the single digit.\\n\\n* Digital root of any perfect square will fall among 1, 4, 7, 9 onlye.g. 16  =  1 + 6 = 7 , 36 = 3 + 6 = 9 , 49 = 4 + 9 = 13 = 1 + 3 = 4 , 64 = 6 + 4 = 10 = 1 + 0 = 1 and so on.\\n\\n\\n\\n##### The congruence Formula for the problem:-\\n\\nFor base (b), the digit root of an integer is (can be applicable for any base):\\n\\n* dr(n) = 0    ,  if n == 0\\n* dr(n) = b - 1   , if n != 0  &&  n % (b - 1) == 0\\n* dr(n) = n mod (b - 1)  , if n % (b - 1) != 0\\n\\nor\\n\\n*  dr(n) =  (n - 1) % (b - 1) + 1\\n\\nFor base 10 \\n\\n*  dr(n) =  (n - 1) % 9 + 1\\n\\nFor more information ,you can read these articles:-\\n\\n [Patterns of digital roots using MS Excel](http://)\\n\\n```\\nhttps://en.wikipedia.org/wiki/Digital_root\\n```\\n```\\nhttps://infogalactic.com/info/Digital_root\\n```\\n\\n\\n\\n```\\n\\n    int addDigits(int num) {\\n        return (num - 1) % 9 + 1;\\n    }\\n\\t\\n```\\nOR\\n```\\n\\n int addDigits(int num) {\\n          return num % 9 !=0 || num == 0 ? num % 9 : 9;\\n    }\\n```\\n\\n##### Using Floor Function:\\nIt helps to see the digital root of a positive integer as the position it holds with respect to the largest multiple of 9 less than it. For example, the digital root of 11 is 2, which means that 11 is the second number after 9. \\n\\nLikewise, in base 10 the digital root of 147 is 3,which means that 147 -1 =146/9 . If a number produces a digital root of exactly b-1, then the number is a multiple of b-1.\\n\\n In  many programming languages,mod function has limitation to take argument up to 9 digits number. From Number Theory ,we know that Modulus function has relationship with floor function as,\\n \\n `x % k = x - k*floor(x/k)`\\n \\nDigital root of ( n ) = n - (b - 1) * floor [(n - 1) / (b - 1)] \\n\\n```\\n\\n   int addDigits(int num) {\\n          return num - 9 * floor ( (num - 1) / 9 );\\n    }\\n    \\n```\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nhttps://en.wikipedia.org/wiki/Digital_root\\n```\n```\\nhttps://infogalactic.com/info/Digital_root\\n```\n```\\n\\n    int addDigits(int num) {\\n        return (num - 1) % 9 + 1;\\n    }\\n\\t\\n```\n```\\n\\n int addDigits(int num) {\\n          return num % 9 !=0 || num == 0 ? num % 9 : 9;\\n    }\\n```\n```\\n\\n   int addDigits(int num) {\\n          return num - 9 * floor ( (num - 1) / 9 );\\n    }\\n    \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 313722,
                "title": "o-1-swift-solution-it-s-just-a-mathematical-program",
                "content": "From **Digital root** in Number Theory: Digital Root is always equal to a number mod 9, if the number is not multiple of 9\\n```swift\\nclass Solution {\\n    func addDigits(_ num: Int) -> Int {\\n        return num < 10 ? num : (num % 9 == 0 ? 9 : num % 9)\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift",
                    "Math"
                ],
                "code": "```swift\\nclass Solution {\\n    func addDigits(_ num: Int) -> Int {\\n        return num < 10 ? num : (num % 9 == 0 ? 9 : num % 9)\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 68654,
                "title": "single-line-solution-without-loop-or-if-condition",
                "content": "```\\npublic int addDigits(int num) {\\n       return (num-1)%9 + 1;\\n    }\\n```\\nThe repeated addition of digits is equal to remainder when the number is divided by 9 in all cases except when the number is divisible by 9. If the number is divisible by 9, the sum is equal to 9 but remainder is zero. \\nThe above code removes the need to use \"if condition\"  for checking divisibility by 9. \\nI took clue from [here](https://discuss.leetcode.com/topic/56260/java-one-line-code-without-loop). Thanks [Marriema](https://discuss.leetcode.com/user/marriema) for the clue.\\nSee [here](http://www.sjsu.edu/faculty/watkins/Digitsum00.htm) for more info.",
                "solutionTags": [],
                "code": "```\\npublic int addDigits(int num) {\\n       return (num-1)%9 + 1;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 68737,
                "title": "0ms-solution-correct-me-if-i-missed-any-boundary-case",
                "content": "public class Solution {\\n    public int addDigits(int num) {\\n        \\n        if(num<10){\\n            return num;\\n        }\\n        else{\\n            return 1+((num-1)%9);\\n        }\\n        \\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int addDigits(int num) {\\n        \\n        if(num<10){\\n            return num;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 68767,
                "title": "my-simple-java-solution-use-loop-and-without-loop",
                "content": "        public int addDigits(int num) {\\n    // use the hint dr(n)= n- 9*floor((n-1)/9)\\n        return num-9*((num-1)/9);\\n    }\\n\\n\\n    \\tpublic int addDigits(int num){\\n\\t\\tint result = 0;\\n\\t\\tif (num/10 <1) return num;\\n\\t\\twhile(num/10 >= 1){\\n\\t\\t\\tresult += num % 10;\\n\\t\\t\\tnum = num/10;\\n\\t\\t}\\n\\t\\tresult += num;\\n\\t\\treturn addDigits(result);\\n\\t}",
                "solutionTags": [
                    "Java"
                ],
                "code": "        public int addDigits(int num) {\\n    // use the hint dr(n)= n- 9*floor((n-1)/9)\\n        return num-9*((num-1)/9);\\n    }\\n\\n\\n    \\tpublic int addDigits(int num){\\n\\t\\tint result = 0;\\n\\t\\tif (num/10 <1) return num;\\n\\t\\twhile(num/10 >= 1){\\n\\t\\t\\tresult += num % 10;\\n\\t\\t\\tnum = num/10;\\n\\t\\t}\\n\\t\\tresult += num;\\n\\t\\treturn addDigits(result);\\n\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 68782,
                "title": "1-line-o-1-python-solution-based-on-hint",
                "content": "Use modulus operator to determine digital root. Subtract by one first and then add 1 at the end so that the digital root of 9 (8+1) is correct instead of (9 % 9 == 0).  Check for the 0 case.\\n\\n    class Solution(object):\\n            def addDigits(self, num):\\n                return 0 if not num else 1 + (num - 1) % 9",
                "solutionTags": [
                    "Python"
                ],
                "code": "Use modulus operator to determine digital root. Subtract by one first and then add 1 at the end so that the digital root of 9 (8+1) is correct instead of (9 % 9 == 0).  Check for the 0 case.\\n\\n    class Solution(object):\\n            def addDigits(self, num):\\n                return 0 if not num else 1 + (num - 1) % 9",
                "codeTag": "Java"
            },
            {
                "id": 68805,
                "title": "ac-neat-python-solution",
                "content": "    def addDigits(self, num):\\n        if num==0:\\n            return 0\\n        if num%9==0:\\n            return 9\\n        return num%9",
                "solutionTags": [
                    "Python"
                ],
                "code": "    def addDigits(self, num):\\n        if num==0:\\n            return 0\\n        if num%9==0:\\n            return 9\\n        return num%9",
                "codeTag": "Python3"
            },
            {
                "id": 3458399,
                "title": "simple-o-1-add-digits-solution-one-line-code-java-beats-100",
                "content": "# ADD DIGITS:\\nThe One Line Solution for the Problem Add Digits is given Below:\\n# Intuition\\n\\nAccording to the summing up of all the digits in the given number, we have to consider that wherever the sum reaches 9 it is equivalent to 0. But **DON\\'T BE HASTY!!!**, if the final sum equates to 9 or multiple of 9, the output will be 9.\\n\\n![hasty.gif](https://assets.leetcode.com/users/images/db1fda4a-4a10-41ba-81e7-5c458faa9889_1682530390.5146666.gif)\\nThe Digits of the number will not tresspass the range [0,9].\\n\\n**189 = 1 + 8 + 9 = 27 = 2 + 7 = 9**\\nWith this we can see that the output will also lie in the same range. Our work is now just reduced to finding the relationship of the sum of digits and original number with 9. The output will be remainder of the digit sum when divided by 9.\\nWe know the relation:\\nif **x = a + b :**\\n**x%m = (a+b)%m = a%m + b%m**\\nHence, we can say that the **individual digit sum % 9** is equal to **Original Number % 9**\\n# O(1) One Liner Approach\\n<!-- Describe your approach to solving the problem. -->\\nAs we know\\n**x%9 = (a+b)%9 = a%9 + b%9**\\nWe just have to mod the number with 9, to get the final answer.\\nBut as I said earlier, **Don\\'t Be Hasty!!!** The numbers which are multiples of 9 and 9 itself will also turn into zero. So, that is the Edge Case to look out for, we have to also make sure the number is not zero in this comparision.\\n**number!=0 && number%9 ==  0**\\nTo make it One liner I used **Ternary Operator**.\\n\\n\\n# Complexity\\n- Time complexity: **O(1)**\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: **O(1)**\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int addDigits(int num) {\\n        return (num!=0 && num%9==0)?9:num%9;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math",
                    "Number Theory"
                ],
                "code": "```\\nclass Solution {\\n    public int addDigits(int num) {\\n        return (num!=0 && num%9==0)?9:num%9;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3458224,
                "title": "three-language-python3-go-java",
                "content": "# Python Solution\\n```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        if num<10:\\n            return num\\n        if num%9==0:\\n            return 9\\n        return num%9\\n```\\n# Go Solution\\n```\\nfunc addDigits(num int) int {\\n    if num<10{\\n        return num\\n    }\\n    if num%9==0{\\n        return 9\\n    }\\n    return num%9\\n    \\n}\\n```\\n# Java Solution\\n```\\nclass Solution {\\n    public int addDigits(int num) {\\n        if (num<10){\\n            return num;\\n        }\\n        if (num%9==0){\\n            return 9;\\n        }\\n        return num%9;\\n        \\n    }\\n}\\n```\\n# please upvote me it would encourage me alot\\n",
                "solutionTags": [
                    "Java",
                    "Python3",
                    "Go"
                ],
                "code": "```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        if num<10:\\n            return num\\n        if num%9==0:\\n            return 9\\n        return num%9\\n```\n```\\nfunc addDigits(num int) int {\\n    if num<10{\\n        return num\\n    }\\n    if num%9==0{\\n        return 9\\n    }\\n    return num%9\\n    \\n}\\n```\n```\\nclass Solution {\\n    public int addDigits(int num) {\\n        if (num<10){\\n            return num;\\n        }\\n        if (num%9==0){\\n            return 9;\\n        }\\n        return num%9;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3457784,
                "title": "java-digital-root",
                "content": "\\n```\\nclass Solution {\\n    public int addDigits(int num) {\\n        return 1 + (num - 1) % 9;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int addDigits(int num) {\\n        return 1 + (num - 1) % 9;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3457593,
                "title": "c-easy-code",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        while(num>=10){\\n            int h=0;\\n            while(num>0){\\n                h+=num%10;\\n                num/=10;\\n            }\\n            num=h;\\n        }\\n        return num;\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        while(num>=10){\\n            int h=0;\\n            while(num>0){\\n                h+=num%10;\\n                num/=10;\\n            }\\n            num=h;\\n        }\\n        return num;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3457538,
                "title": "better-than-100-in-runtime-better-then-99-93-in-memory-simple-c-solution",
                "content": "# Intuition\\nI wanted to find a basic pattern in this question. So, I just wrote down test cases uptil 50, and noticed that a pattern existed. Also, I checked for some random large numbers.\\n\\n# Approach\\nIf the number is 0, then just return 0. Else, first calculate the remainder that you will get when you divide the number with 9. If the remainder equals 0, then return 9, else return the remainder itself.\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n![Upvote photo.png](https://assets.leetcode.com/users/images/508de132-52f0-4cb5-b0ae-351d0ee23b87_1682516673.1103919.png)\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        if(num==0)\\n        {\\n            return 0;\\n        }\\n        else\\n        {\\n            int h=num%9;\\n            if(h==0)\\n            {\\n                h=9;\\n            }\\n            return h;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        if(num==0)\\n        {\\n            return 0;\\n        }\\n        else\\n        {\\n            int h=num%9;\\n            if(h==0)\\n            {\\n                h=9;\\n            }\\n            return h;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3457205,
                "title": "java-o-1-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int addDigits(int num) {\\n      return 1+(num-1)%9;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int addDigits(int num) {\\n      return 1+(num-1)%9;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3457010,
                "title": "mathematical-solution",
                "content": "# Code\\n```\\nfunction addDigits(num: number): number {\\n\\treturn 1 + (num - 1) % 9;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript",
                    "Math"
                ],
                "code": "```\\nfunction addDigits(num: number): number {\\n\\treturn 1 + (num - 1) % 9;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3456018,
                "title": "beats-100-0ms-1line-code-c",
                "content": "# Intuition\\nAs we know that the output will be only 10 digits ie. 0 to 9, and sum can only be 0 when the num is 0 so we return 0 when num is 0. \\n\\nFor other nums we know that when taking a remainder of the num when divided by 9 we will get the sum except the num is divisible by 9. So if the num is divisible by 9 we return 9 else we return the num%9. (This is for number in base 10 only)\\n\\nThis method is also known as Digital Root. \\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        if(num==0) return 0;\\n        return num%9==0 ? 9:num%9;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Number Theory"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        if(num==0) return 0;\\n        return num%9==0 ? 9:num%9;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3455411,
                "title": "daily-leetcoding-challenge-april-day-26",
                "content": "This problem is the Daily LeetCoding Challenge for April, Day 26.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-digits/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Mathematical: Digital Root\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>",
                "solutionTags": [],
                "code": "  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-digits/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />",
                "codeTag": "Unknown"
            },
            {
                "id": 3374210,
                "title": "c-solution-beats-100-easy",
                "content": "# Code\\n```\\nint addDigits(int num){\\n    int sum = -99;\\n    int x = num;\\n    if (num == 0) return 0;\\n\\n    while (sum / 10 != 0) {\\n        sum = 0;\\n        while (x != 0) {\\n            sum += x % 10;\\n            x /= 10;\\n        }\\n        x = sum;\\n    }\\n\\n    return sum;\\n   \\n}\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math",
                    "Number Theory"
                ],
                "code": "```\\nint addDigits(int num){\\n    int sum = -99;\\n    int x = num;\\n    if (num == 0) return 0;\\n\\n    while (sum / 10 != 0) {\\n        sum = 0;\\n        while (x != 0) {\\n            sum += x % 10;\\n            x /= 10;\\n        }\\n        x = sum;\\n    }\\n\\n    return sum;\\n   \\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3222305,
                "title": "solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        if(num==0)\\n        return 0;\\n        else if(num % 9 == 0)\\n        return 9;\\n        else\\n        return (num % 9);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        if(num==0)\\n        return 0;\\n        else if(num % 9 == 0)\\n        return 9;\\n        else\\n        return (num % 9);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2765562,
                "title": "python3-o-1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        if ( num == 0 ): return 0\\n        if num%9 == 0:\\n            return 9\\n        else:\\n            return num%9\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        if ( num == 0 ): return 0\\n        if num%9 == 0:\\n            return 9\\n        else:\\n            return num%9\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2655607,
                "title": "o-1-solution-with-simple-algorithm",
                "content": "# Observation\\nDivising an algorithm is simple if you look closely to the first set of CSV of whole numbers and their respective answers below:\\n\\nNumber,Ans\\n0,0\\n1,1\\n2,2\\n3,3\\n4,4\\n5,5\\n6,6\\n7,7\\n8,8\\n9,9\\n\\n10,1\\n11,2\\n12,3\\n13,4\\n14,5\\n15,6\\n16,7\\n17,8\\n18,9\\n\\n19,1\\n20,2\\n21,3\\n22,4\\n23,5\\n24,6\\n25,7\\n26,8\\n27,9\\n\\n28,1\\n.....\\nNow you have probably being getting it, the pattern is like:\\n``0`` for 0\\n``9`` for multiples of 9 like 9,18,36,9999... and\\n``remainder from divsion by 9`` for all other numbers.\\n\\n# Algorithm\\nSo we have three cases here to divise the **algorithm** for the body of our function as follows:\\n\\n```\\nif num is 0\\n\\treturn 0\\nelse if num is divisible by 9\\n\\treturn 0\\nelse\\n\\treturn num mod 9\\n```\\n\\n**x mod y** (read as x modulo y) means the mathematical term representing the remainder obtained after a specific division of x by y. This is reperesented on most programming languages by the character ``%``.\\n\\nImplementing this algorithm is a piece of cake on your preferred language, for now lets see it in python 3.\\n\\n# Implementation in Python 3\\n```\\ndef addDigits(self, num : int) -> int:\\n\\tif num == 0: \\n\\t\\treturn 0\\n\\telif num % 9 == 0: \\n\\t\\treturn 9\\n\\telse: \\n\\t\\treturn num % 9\\n```\\n\\n# Make it even better!\\nIf you are a good programmer, you should make the number of line of code of your program minimal. Many of you might think of making it to 3 lines but you can even make it to only **1 line of code**. This is a good habit to follow.\\n```\\ndef addDigits(self, num : int) -> int:\\n\\treturn  0 if num == 0  else 9 if num % 9 else num % 9\\n```\\n\\nIf you like my comments, Thanks. What were you waiting for? Subscription? :)",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nif num is 0\\n\\treturn 0\\nelse if num is divisible by 9\\n\\treturn 0\\nelse\\n\\treturn num mod 9\\n```\n```\\ndef addDigits(self, num : int) -> int:\\n\\tif num == 0: \\n\\t\\treturn 0\\n\\telif num % 9 == 0: \\n\\t\\treturn 9\\n\\telse: \\n\\t\\treturn num % 9\\n```\n```\\ndef addDigits(self, num : int) -> int:\\n\\treturn  0 if num == 0  else 9 if num % 9 else num % 9\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1930593,
                "title": "python-math-solution-nice-explanation-with-examples-try-it",
                "content": "All numbers are symmetric around 9, consider the following:\\n1 % 9 = 1            |        10 % 9 = 1\\n2 % 9 = 2            |        11 % 9 = 2\\n3 % 9 = 3            |        12 % 9 = 3\\n4 % 9 = 4            |        13 % 9 = 4\\n5 % 9 = 5            |        14 % 9 = 5\\n6 % 9 = 6            |        15 % 9 = 6\\n7 % 9 = 7            |        16 % 9 = 7\\n8 % 9 = 8            |        17 % 9 = 8\\n\\nSo thery are making a cycle based on their distance from 9, Hope that explain the question\\n\\n```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        \\n        if num == 0:\\n            return 0\\n        return num % 9 if num % 9 != 0 else 9\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        \\n        if num == 0:\\n            return 0\\n        return num % 9 if num % 9 != 0 else 9\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1786115,
                "title": "java-most-easy-solution",
                "content": "\\n    class Solution {\\n    public int addDigits(int num) {\\n       while(num>9){\\n        num = num %10 + num /10;\\n    }\\n     return num;\\n        \\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int addDigits(int num) {\\n       while(num>9){\\n        num = num %10 + num /10;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1754554,
                "title": "c-brute-force-and-optimized-o-1-time-approach",
                "content": "/*Daily Challenge:-08/02/2022.\\n**Method:1**\\nThis is the Brute force approach.\\nAdd the Digits of the number till the number become less than equal to 9*/\\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        while(true)\\n        {\\n            int sum=0;\\n            while(num>0)\\n            {\\n                sum=sum+num%10;\\n                num=num/10;\\n            }\\n            if(sum<=9)\\n                return sum;\\n            num=sum;\\n        }\\n        return 0;\\n    }\\n};\\n```\\n/*Daily Challenge:-08/02/2022.\\n**Method2:-Follow up of this question. O(1) time**\\n-->The sum of digits untill we reach single digit is called **Digit Root**.\\n-->**For any base B and and a number N of that base.**\\nThe Digit root(Db) in that base is define as below formula:-\\n**Db(N)=0 ,if N==0.\\nDb(N)=1+(N-1)mod(B-1),if N!=0.**\\nFor proof Visit:-https://en.wikipedia.org/wiki/Digital_root\\nT.C=O(1).*/\\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        if(num==0)\\n            return 0;\\n        return 1+(num-1)%(10-1);\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        while(true)\\n        {\\n            int sum=0;\\n            while(num>0)\\n            {\\n                sum=sum+num%10;\\n                num=num/10;\\n            }\\n            if(sum<=9)\\n                return sum;\\n            num=sum;\\n        }\\n        return 0;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        if(num==0)\\n            return 0;\\n        return 1+(num-1)%(10-1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1754340,
                "title": "java-simple-solution-3-solutions-o-1-complexity",
                "content": "**\\n**BRUTE FORCE APPROACH**\\n\\n**EXPLANATION** : FIND THE SUM OF DIGITS UNTIL IT IS LARGER THAN 9 i.e NOT A SINGLE DIGIT\\n**\\n\\n```\\nclass Solution {\\n    public int addDigits(int num) \\n    {\\n\\t\\tint t=num;\\n        int sum=0;\\n        while(t>9)\\n        {\\n            while(t>0)\\n            {\\n                int r = t%10;\\n                sum+=r;\\n                t=t/10;  \\n            }\\n            t=sum;\\n            sum=0;           \\n        }\\n        return t;\\n\\t\\t}\\n\\t}\\n```\\n\\n**\\nLETS OPTIMIZE THIS WITH THE HELP OF **%** OPERATOR \\n\\n**EXPLANATION**: IF num IS 0 RETURN IT. \\nIF THE MOD OF NUM BY 9 IS 0 THEN RETURN 9  BECAUSE THE SUM OF DIGITS WILL ALWAYS BE 9. \\nELSE RETURN num%9\\n**\\n\\n```\\nclass Solution {\\n    public int addDigits(int num) \\n    {\\n\\tif(num==0) return 0;\\n        if(num%9==0) return 9;\\n        return num%9;\\n\\t}\\n}\\n```\\n\\n**LETS MERGE THESE TWO CASES USING A TERNARY OPERATOR  ?: \\nSPACE COMPLEXITY = O(1)\\nTIME COMPLEXITY = O(1)\\n\\n**EXPLANATION: ** IF NUM ==0 RETURN 0 , ELSE RETURN 1+(NUM-1) MOD 9\\n**\\n\\n```\\nclass Solution {\\n    public int addDigits(int num) \\n    {\\n\\treturn num == 0 ? 0 : 1+(num-1) %9;   \\n    }\\n}\\n```\\n\\n\\n**HAPPY LEARNING. HAPPY CODING.**\\n**IF FOUND HELPFUL PLEASE UPVOTE.**",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int addDigits(int num) \\n    {\\n\\t\\tint t=num;\\n        int sum=0;\\n        while(t>9)\\n        {\\n            while(t>0)\\n            {\\n                int r = t%10;\\n                sum+=r;\\n                t=t/10;  \\n            }\\n            t=sum;\\n            sum=0;           \\n        }\\n        return t;\\n\\t\\t}\\n\\t}\\n```\n```\\nclass Solution {\\n    public int addDigits(int num) \\n    {\\n\\tif(num==0) return 0;\\n        if(num%9==0) return 9;\\n        return num%9;\\n\\t}\\n}\\n```\n```\\nclass Solution {\\n    public int addDigits(int num) \\n    {\\n\\treturn num == 0 ? 0 : 1+(num-1) %9;   \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1334286,
                "title": "100-faster-c-easy-peasy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        int n=num;\\n\\n        string s=to_string(num);\\n            int len=s.size();\\n        while(len!=1)\\n        {\\n            int su=0;\\n            for(int i=0;i<s.size();i++)\\n            {\\n                su+=s[i]-\\'0\\';\\n            }\\n            \\n            s=to_string(su);\\n            \\n            len=s.size();\\n            \\n        }\\n        return stoi(s);\\n            \\n        \\n        \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        int n=num;\\n\\n        string s=to_string(num);\\n            int len=s.size();\\n        while(len!=1)\\n        {\\n            int su=0;\\n            for(int i=0;i<s.size();i++)\\n            {\\n                su+=s[i]-\\'0\\';\\n            }\\n            \\n            s=to_string(su);\\n            \\n            len=s.size();\\n            \\n        }\\n        return stoi(s);\\n            \\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 756877,
                "title": "add-digit-easy-solution-posting-first-time-explained",
                "content": "```\\nint addDigits(int num) {\\n        if(num>=0 && num<=9) return num;  //don\\'t have to do anything if the given num is a single digit integer.\\n        if(num%9==0) return 9;  // all the multiples of 9 have digit sum=9: 45(4+5), 99(9+9=18->(1+8)=9)\\n        return(val%9); // after every 9 integers the sum repeats.\\n\\t\\t}\\n```\\n\\t\\n** my first solution post!!! do upvote.",
                "solutionTags": [],
                "code": "```\\nint addDigits(int num) {\\n        if(num>=0 && num<=9) return num;  //don\\'t have to do anything if the given num is a single digit integer.\\n        if(num%9==0) return 9;  // all the multiples of 9 have digit sum=9: 45(4+5), 99(9+9=18->(1+8)=9)\\n        return(val%9); // after every 9 integers the sum repeats.\\n\\t\\t}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 335509,
                "title": "java-one-liner-o-1-runtime-and-easy-to-understand-explained",
                "content": "We note that the answer is basically num % 9 for all numbers except for those divisible by 9 (e.g, 18, 36,189 etc.) For these numbers, num % 9 will incorrectly yield 0. However, if we subtract 1 from these numbers (num - 1) % 9 will be 8. So, 1 + (num - 1) % 9 gives us the correct result, 9.\\n\\nSimilarly, it can be easily proved that, for other numbers for which num % 9 = x (where 1 <= x <= 8), (num-1) % 9 will always be x - 1. So, the answer is again 1 + (num - 1) % 9. Finally, for num = 0, (num - 1) % 9 = -1, so 1 + (num - 1) % 9 = 0. Therefore, we can write the code unconditionally like below:\\n\\n```\\n\\tpublic int addDigits(int num) {\\n        return 1+(num-1)%9;\\n    }",
                "solutionTags": [],
                "code": "We note that the answer is basically num % 9 for all numbers except for those divisible by 9 (e.g, 18, 36,189 etc.) For these numbers, num % 9 will incorrectly yield 0. However, if we subtract 1 from these numbers (num - 1) % 9 will be 8. So, 1 + (num - 1) % 9 gives us the correct result, 9.\\n\\nSimilarly, it can be easily proved that, for other numbers for which num % 9 = x (where 1 <= x <= 8), (num-1) % 9 will always be x - 1. So, the answer is again 1 + (num - 1) % 9. Finally, for num = 0, (num - 1) % 9 = -1, so 1 + (num - 1) % 9 = 0. Therefore, we can write the code unconditionally like below:\\n\\n```\\n\\tpublic int addDigits(int num) {\\n        return 1+(num-1)%9;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 325191,
                "title": "java-to-258-add-digits-absolutely-no-loop-no-recursive-runtime-only-o-1",
                "content": "~~~\\n   /*\\n    \\u7ED9\\u5B9A\\u4E00\\u4E2A\\u975E\\u8D1F\\u6574\\u6570\\uFF0C\\u5C06\\u5404\\u4F4D\\u6570\\u5B57\\u76F8\\u52A0\\uFF0C\\u5F97\\u5230\\u7684\\u6570\\u5B57\\u518D\\u6B21\\u76F8\\u52A0\\uFF0C\\u5982\\u6B64\\u5F80\\u590D\\uFF0C\\u76F4\\u5230\\u5F97\\u5230\\u7684\\u6570\\u5B57\\u4EC5\\u4E3A\\u4E00\\u4F4D\\u6570\\u3002\\u8FD4\\u56DE\\u8FD9\\u4E2A\\u4E00\\u4F4D\\u6570\\n    \\u6BD4\\u5982\\uFF1A 456 = 4+5+6 = 15 = 1+5 = 6\\uFF0C\\u8FD4\\u56DE6\\n    \\u8981\\u6C42\\uFF1A\\u4E0D\\u7528\\u5FAA\\u73AF\\uFF0C\\u4E0D\\u7528\\u9012\\u5F52\\uFF0C\\u65F6\\u95F4\\u590D\\u6742\\u5EA6O(1)\\n     */\\n    public int addDigits(int num) {\\n        /*\\n        \\u7ECF\\u8FC7\\u7B80\\u5355\\u7684\\u5217\\u4E3E\\uFF0C\\u5F97\\u5230\\u5982\\u4E0B\\u6570\\u5B57\\n        1\\u2014\\u20149\\uFF0C\\u8FD4\\u56DE1\\u2014\\u20149\\n        10\\u2014\\u201418\\uFF0C\\u8FD4\\u56DE1\\u2014\\u20149\\n        19\\u2014\\u201427\\uFF0C\\u8FD4\\u56DE1\\u2014\\u20149\\n        28\\u2014\\u201436\\uFF0C\\u8FD4\\u56DE1\\u2014\\u20149\\n        ....\\n        \\u89C4\\u5F8B\\u603B\\u7ED3\\uFF0C\\u6BCF9\\u4E2A\\u6570\\u5B57\\u4E3A\\u4E00\\u7EC4\\uFF0C\\u8BA1\\u7B97\\u7684\\u7ED3\\u679C\\u4E3A1\\u2014\\u20149\\n        \\u6240\\u4EE5\\uFF0C\\u53EA\\u8981\\u8BA1\\u7B97\\u8FD9\\u4E2A\\u6570\\u4E0E9\\u7684\\u6A21\\u8FD0\\u7B97\\uFF0C\\u5F97\\u5230\\u4F59\\u6570\\uFF0C\\u5982\\u679C\\u4F59\\u6570\\u4E3A0\\uFF0C\\u8FD4\\u56DE9\\u3002\\u5982\\u679C\\u4F59\\u6570\\u4E0D\\u4E3A0\\uFF0C\\u5C31\\u4E3A\\u6B64\\u4F59\\u6570\\u3002\\n         */\\n        if (num<=9)\\n            return num;\\n        else\\n            return num%9==0?9:num%9;\\n    }\\n    \\n~~~",
                "solutionTags": [],
                "code": "~~~\\n   /*\\n    \\u7ED9\\u5B9A\\u4E00\\u4E2A\\u975E\\u8D1F\\u6574\\u6570\\uFF0C\\u5C06\\u5404\\u4F4D\\u6570\\u5B57\\u76F8\\u52A0\\uFF0C\\u5F97\\u5230\\u7684\\u6570\\u5B57\\u518D\\u6B21\\u76F8\\u52A0\\uFF0C\\u5982\\u6B64\\u5F80\\u590D\\uFF0C\\u76F4\\u5230\\u5F97\\u5230\\u7684\\u6570\\u5B57\\u4EC5\\u4E3A\\u4E00\\u4F4D\\u6570\\u3002\\u8FD4\\u56DE\\u8FD9\\u4E2A\\u4E00\\u4F4D\\u6570\\n    \\u6BD4\\u5982\\uFF1A 456 = 4+5+6 = 15 = 1+5 = 6\\uFF0C\\u8FD4\\u56DE6\\n    \\u8981\\u6C42\\uFF1A\\u4E0D\\u7528\\u5FAA\\u73AF\\uFF0C\\u4E0D\\u7528\\u9012\\u5F52\\uFF0C\\u65F6\\u95F4\\u590D\\u6742\\u5EA6O(1)\\n     */\\n    public int addDigits(int num) {\\n        /*\\n        \\u7ECF\\u8FC7\\u7B80\\u5355\\u7684\\u5217\\u4E3E\\uFF0C\\u5F97\\u5230\\u5982\\u4E0B\\u6570\\u5B57\\n        1\\u2014\\u20149\\uFF0C\\u8FD4\\u56DE1\\u2014\\u20149\\n        10\\u2014\\u201418\\uFF0C\\u8FD4\\u56DE1\\u2014\\u20149\\n        19\\u2014\\u201427\\uFF0C\\u8FD4\\u56DE1\\u2014\\u20149\\n        28\\u2014\\u201436\\uFF0C\\u8FD4\\u56DE1\\u2014\\u20149\\n        ....\\n        \\u89C4\\u5F8B\\u603B\\u7ED3\\uFF0C\\u6BCF9\\u4E2A\\u6570\\u5B57\\u4E3A\\u4E00\\u7EC4\\uFF0C\\u8BA1\\u7B97\\u7684\\u7ED3\\u679C\\u4E3A1\\u2014\\u20149\\n        \\u6240\\u4EE5\\uFF0C\\u53EA\\u8981\\u8BA1\\u7B97\\u8FD9\\u4E2A\\u6570\\u4E0E9\\u7684\\u6A21\\u8FD0\\u7B97\\uFF0C\\u5F97\\u5230\\u4F59\\u6570\\uFF0C\\u5982\\u679C\\u4F59\\u6570\\u4E3A0\\uFF0C\\u8FD4\\u56DE9\\u3002\\u5982\\u679C\\u4F59\\u6570\\u4E0D\\u4E3A0\\uFF0C\\u5C31\\u4E3A\\u6B64\\u4F59\\u6570\\u3002\\n         */\\n        if (num<=9)\\n            return num;\\n        else\\n            return num%9==0?9:num%9;\\n    }\\n    \\n~~~",
                "codeTag": "Unknown"
            },
            {
                "id": 322279,
                "title": "python-one-liner-beat-99-9-o-1",
                "content": "```\\nreturn (num-1)%9+1 if num>0 else 0\\n```",
                "solutionTags": [],
                "code": "```\\nreturn (num-1)%9+1 if num>0 else 0\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 292197,
                "title": "python-o-1-explanation-with-1-liner-explanations",
                "content": "For every number 1.. N, if you add 9, you increment the tens column by 1 and decrement the ones column by 1 . So the total remains the same.\\n1 + 9 = 10, 2+9 = 11,   25 + 9 = {2+1}{5-1} = 34.\\nWhenever you break into the hundreds, similar logic still holds.\\n\\nHow to make it into code?\\nThe easiest way is  below. \\n```\\nif num == 0: return 0  # for 0 always return 0\\nif num %9 == 0: return 9 # If the number is a multiple of 9, return 9\\nreturn num%9 # Otherwise return number %9\\n```\\n\\nNow, can this be shortened?  One way to condense the above into one line...\\n``` \\nreturn 9 if num != 0 and num%9 == 0 else num%9\\n```\\n\\nAnother is to think about the problematic use-case `%9 == 0` is the problematic case. What we can do is subtract 1 from the `num`  so this will never be true and the answers will be from `0->8`, unless `num` is `0`. Then convert it back to `1-9` by adding `1`\\n\\nShortened is\\n```\\nif num == 0: return 0\\nreturn (num-1)%9 + 1\\n```\\nor\\n```\\nreturn 0 if num == 0 else (num-1)%9 + 1\\n```",
                "solutionTags": [],
                "code": "```\\nif num == 0: return 0  # for 0 always return 0\\nif num %9 == 0: return 9 # If the number is a multiple of 9, return 9\\nreturn num%9 # Otherwise return number %9\\n```\n``` \\nreturn 9 if num != 0 and num%9 == 0 else num%9\\n```\n```\\nif num == 0: return 0\\nreturn (num-1)%9 + 1\\n```\n```\\nreturn 0 if num == 0 else (num-1)%9 + 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 237101,
                "title": "python-1-liner-100-o-1-space-and-time",
                "content": "```\\nclass Solution(object):\\n    def addDigits(self, num):\\n        \"\"\"\\n        :type num: int\\n        :rtype: int\\n        \"\"\"\\n        return num % 9 if num % 9 or not num else 9\\n```\\nReason this works: \\nEvery number whose digits sum to a multiple of 9 is divisible by 9. \\nOtherwise, the iterative sum of digits leads to the remainder when divided by nine.\\n\\nWe account for the case when the number is divisible by 9 or is 0.",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def addDigits(self, num):\\n        \"\"\"\\n        :type num: int\\n        :rtype: int\\n        \"\"\"\\n        return num % 9 if num % 9 or not num else 9\\n```",
                "codeTag": "Java"
            },
            {
                "id": 216939,
                "title": "python-solution",
                "content": "Time complexity: `O(1)`, space complexity: `O(1)`.\\n\\n```\\nclass Solution:\\n    def addDigits(self, num):\\n        \"\"\"\\n        :type num: int\\n        :rtype: int\\n        \"\"\"\\n        if num == 0:\\n            return 0\\n        r = num % 9\\n        return r if r != 0 else 9\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def addDigits(self, num):\\n        \"\"\"\\n        :type num: int\\n        :rtype: int\\n        \"\"\"\\n        if num == 0:\\n            return 0\\n        r = num % 9\\n        return r if r != 0 else 9\\n```",
                "codeTag": "Java"
            },
            {
                "id": 212415,
                "title": "java-no-loop-recursion-o-1-time-w-rough-explanation-3-lines",
                "content": "First, notice that the possible outputs are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9.\\n\\nThen think about what set of integers is each possible output associated with.\\nLet m belong in the set of nonnegative integers - { 0, 1, 2, 3, 4, 5, . . . }.\\n1 -> {1, 10, 19, 28, 37, . . . } = { 1 + 9m  = 1 mod 9, for all m }\\n2 -> {2, 11, 20, 29, 38, . . . } = { 2 + 9m = 2 mod 9, for all m }\\n3 -> {3, 12, 21, 30, 39, . . . } = { 3 + 9m = 3 mod 9, for all m }\\n. . . and so on through the result 8.\\nThus these resulting digits from 1 through 8 can be obtained by simply returning num % 9.\\n\\nWe also have the results 0 and 9 to consider: \\n- We must only obtain the result 0 when num = 0.\\n- The result 9 must only be obtained from multiples of 9 (9, 18, 27, . . .), hence the second if statement.\\n\\n```\\npublic int addDigits(int num) {\\n\\tif (num == 0) { return 0; }\\n\\tif (num % 9 == 0) { return 9; }\\n\\treturn num % 9;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic int addDigits(int num) {\\n\\tif (num == 0) { return 0; }\\n\\tif (num % 9 == 0) { return 9; }\\n\\treturn num % 9;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 68691,
                "title": "one-line-in-c",
                "content": "    int addDigits(int num) {\\n        return num == 0 ? 0 : (num-1)%9 + 1;\\n    }",
                "solutionTags": [
                    "C++"
                ],
                "code": "    int addDigits(int num) {\\n        return num == 0 ? 0 : (num-1)%9 + 1;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 68696,
                "title": "a-simple-answer",
                "content": "    class Solution {\\n        public:\\n            int addDigits(int num) {\\n               return 1+(num-1)%9;\\n            }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n        public:\\n            int addDigits(int num) {\\n               return 1+(num-1)%9;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 68751,
                "title": "share-one-line-javascript-solution",
                "content": "    var addDigits = function(num) {\\n        return num>0&&num%9===0?0:num%9;\\n    };",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "    var addDigits = function(num) {\\n        return num>0&&num%9===0?0:num%9;\\n    };",
                "codeTag": "Unknown"
            },
            {
                "id": 68762,
                "title": "short-java-solution-can-be-one-line",
                "content": "    \\t public int addDigits(int num) {\\n\\t        int i=num%9;\\n\\t        return i==0?(num<10?num:9):i;\\n\\t    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "    \\t public int addDigits(int num) {\\n\\t        int i=num%9;\\n\\t        return i==0?(num<10?num:9):i;\\n\\t    }",
                "codeTag": "Unknown"
            },
            {
                "id": 68647,
                "title": "c-8ms-3-solutions",
                "content": "    class Solution {\\n\\n    public:\\n\\n    int addDigits(int num) {\\n     //return solution1(num); \\n     //return solution2(num); \\n     return solution3(num);\\n    }\\n\\n    private:\\n\\n    int solution1(int num){\\n        return (num - 1) % 9 + 1;\\n    }\\n    int solution2(int num){\\n        return num - 9 * ((num - 1)/9);\\n    }\\n    int solution3(int num){\\n        if(num < 10) return num;\\n        return solution3(num / 10 + num % 10);\\n    }\\n};",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n\\n    public:\\n\\n    int addDigits(int num) {\\n     //return solution1(num); \\n     //return solution2(num); \\n     return solution3(num);\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 3983171,
                "title": "simple-java-solution-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nBy using recursion approach we can easily solve the problem.\\n \\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nRun the while loop and find the sum of individual digits, call the recursive function , if the number is of single digit then return it, else it will go through the loop again. \\n\\n# Complexity\\n- Time complexity: O(log10(num))\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(additive persistence of num)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int addDigits(int num) {\\n        if(num==0)\\n        return 0;\\n        else if(num<=9)\\n        return num;\\n        else\\n        {\\n            int s=0;\\n            while(num>0)\\n            {\\n                int k = num%10;\\n                s = s+k;\\n                num = num/10;\\n            }\\n            return addDigits(s);\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public int addDigits(int num) {\\n        if(num==0)\\n        return 0;\\n        else if(num<=9)\\n        return num;\\n        else\\n        {\\n            int s=0;\\n            while(num>0)\\n            {\\n                int k = num%10;\\n                s = s+k;\\n                num = num/10;\\n            }\\n            return addDigits(s);\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3974474,
                "title": "java-solution-very-easy-approach-video-solution-provided",
                "content": "\\n# easiest super easy approach n explaination \\n# If still there\\'s any doubt you can see this video once :-\\nhttps://youtu.be/F58LpmJ9lXs?si=jn9eHHrcR0NzfxuL\\n\\n# Code\\n```\\nclass Solution {\\n    public int addDigits(int num) {\\n\\n// hey geek it is super easy , have a look .\\n\\n// if number is zero then sum is 0 only simple.\\n        if(num == 0)\\n        {\\n            return 0 ;\\n        }\\n\\n// if num ko 9 se divide kar k reminder 0 aata h to number ka sum 9 h \\n// varna divide kar k jo bhi reminder aa raha hai vahi sum hai .\\n// eg . 22%9 = 4    , and sum of 2+2 = 4 . hence proved.\\n\\n        else if(  num % 9 == 0)\\n        {\\n            return 9 ;\\n        }\\n\\n        else\\n        {\\n            return num %9 ;\\n        }   \\n    }\\n}\\n\\n```\\n\\n# If you found my solution helpful, I would greatly appreciate your upvote, as it would motivate me to continue sharing more solutions.",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public int addDigits(int num) {\\n\\n// hey geek it is super easy , have a look .\\n\\n// if number is zero then sum is 0 only simple.\\n        if(num == 0)\\n        {\\n            return 0 ;\\n        }\\n\\n// if num ko 9 se divide kar k reminder 0 aata h to number ka sum 9 h \\n// varna divide kar k jo bhi reminder aa raha hai vahi sum hai .\\n// eg . 22%9 = 4    , and sum of 2+2 = 4 . hence proved.\\n\\n        else if(  num % 9 == 0)\\n        {\\n            return 9 ;\\n        }\\n\\n        else\\n        {\\n            return num %9 ;\\n        }   \\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3781389,
                "title": "c-python-c-beats-100-with-math-proof",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\npython/C/C++(recursive)solution beats 100% with Math proof \\nEnglish subtitles are provided, please open it if necessary.\\n[https://www.youtube.com/watch?v=kI7CDSHSJpc](https://www.youtube.com/watch?v=kI7CDSHSJpc)\\nLet num be a natural number given as follows\\n$$ num=\\\\sum_{i}a_i10^i $$\\nwhere $0\\\\leq a_i \\\\leq 9$.\\nIt is known the following fact:\\n\\nProposition\\n$$ num\\\\equiv \\\\sum_i a_i (\\\\mod{9}) $$\\nProof.\\n$$ num=\\\\sum_{i}a_i10^i $$\\n$$=a_0+\\\\sum_{i>0}a_i(10^i-1+1) (\\\\mod{9})$$\\n$$=\\\\sum_{i}a_i (\\\\mod{9}) (\\\\because 10^i-1=99\\\\cdots 9\\\\equiv0 \\\\bmod{9} )$$ QED.\\n\\nLet $\\\\sum_{i}a_i$ be substituted into $num$, and apply this Proposition successively, it concludes that the desired digit is (num==0)?0:(num-1)%9+1.   \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe first solution is written in C++ and implemented in a recursive way. The other are based on the mathematical fact.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\nC++ recursive solution beats 100% :\\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        if (num==0) return 0;\\n        auto x=div(num, 10);\\n        int ans=x.quot+x.rem;\\n        if (ans<=9) return ans;\\n        else return addDigits(ans);\\n    }\\n};\\n```\\nC++ Math solution beats 100%\\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        if (num==0) return 0;\\n        int ans=num%9;\\n        return (ans==0)?9:ans;\\n    }\\n};\\n```\\nC solution beats 100% :\\n```\\nint addDigits(int num){\\n    return (num==0)?0:(num-1)%9+1;\\n}\\n```\\n\\nPython:\\n```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        if num==0: return 0\\n        ans=(num-1)%9+1\\n        return ans",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        if (num==0) return 0;\\n        auto x=div(num, 10);\\n        int ans=x.quot+x.rem;\\n        if (ans<=9) return ans;\\n        else return addDigits(ans);\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        if (num==0) return 0;\\n        int ans=num%9;\\n        return (ans==0)?9:ans;\\n    }\\n};\\n```\n```\\nint addDigits(int num){\\n    return (num==0)?0:(num-1)%9+1;\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3764928,
                "title": "2-lines-of-code-beats-100",
                "content": "# Please UpVote if you feel it easy \\u2764\\uD83D\\uDE0A\\n# Code\\n```\\nclass Solution {\\n    public int addDigits(int num) {\\n        // if num is zero then return\\n        if(num == 0) return 0;\\n        // if num is rather  than zero modulo it with 9 bcoz the sum of\\n        // two num is going only to nine then come up to its module with nine only.\\n        return num%9 == 0 ? 9 : num%9;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int addDigits(int num) {\\n        // if num is zero then return\\n        if(num == 0) return 0;\\n        // if num is rather  than zero modulo it with 9 bcoz the sum of\\n        // two num is going only to nine then come up to its module with nine only.\\n        return num%9 == 0 ? 9 : num%9;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3458293,
                "title": "python-one-liner-o-1",
                "content": "# Intuition\\nThe code first checks if the input integer is zero, since the sum of the digits of zero is also zero. Then, it computes the remainder of the input integer divided by 9, which is the same as summing all the digits of the integer and taking the remainder by 9. Finally, it returns either 9 or the remainder, depending on whether the remainder is zero or not.\\n\\n# Approach\\nThis approach is valid because the sum of digits of any integer is equivalent to the remainder of the integer divided by 9, except for the cases where the sum of digits is 9 or a multiple of 9, in which case the remainder is 0 or 9. Therefore, the code covers all possible cases and provides the correct result for any integer input.\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        return num if num == 0 else (num % 9 or 9)\\n```",
                "solutionTags": [
                    "Python3",
                    "Math",
                    "Number Theory"
                ],
                "code": "```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        return num if num == 0 else (num % 9 or 9)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3458106,
                "title": "my-simple-java-o-1-solution-beats-100-submissions",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- We just simply check that number is 0 or not.\\n- If not zero then we can easily get one digit sum by getting reminder of that number by 9. \\n- If reminder is 0 then sum is 9 otherwise sum is reminder itself.\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int addDigits(int num) {\\n        if(num == 0) return 0;\\n        return num % 9 == 0 ? 9 : num % 9;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int addDigits(int num) {\\n        if(num == 0) return 0;\\n        return num % 9 == 0 ? 9 : num % 9;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3458021,
                "title": "solved-in-o-1-time-and-space",
                "content": "\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    func addDigits(_ num: Int) -> Int {\\n        return 1 + (num - 1) % 9;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func addDigits(_ num: Int) -> Int {\\n        return 1 + (num - 1) % 9;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3456671,
                "title": "python-elegant-short-1-line-math",
                "content": "# Complexity\\n- Time complexity: $$O(1)$$\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        return 1 + (num - 1) % 9 if num else 0\\n```\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        return 1 + (num - 1) % 9 if num else 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3456362,
                "title": "c-easy-code-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nwe need to create the sum of all digits of a num so we create a function \\'fun\\' which will return the sum of all digits of num, then we check whether the number is single digit or not by \\'while(num>=10)\\'\\n\\n\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int fun( int &num)\\n    {\\n        int sum = 0 ;\\n        while( num )\\n        {\\n            int mod = num %10;\\n            num = num /10;\\n            sum = sum + mod;\\n        }\\n        return sum;\\n    }\\n\\n    int addDigits(int num) {\\n        while( num >= 10 )\\n        {\\n            num = fun( num );\\n\\n        }\\n        return num;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int fun( int &num)\\n    {\\n        int sum = 0 ;\\n        while( num )\\n        {\\n            int mod = num %10;\\n            num = num /10;\\n            sum = sum + mod;\\n        }\\n        return sum;\\n    }\\n\\n    int addDigits(int num) {\\n        while( num >= 10 )\\n        {\\n            num = fun( num );\\n\\n        }\\n        return num;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3456149,
                "title": "easy-java-solution-using-digitsum-beginner-friendly",
                "content": "# Intuition\\nAdd digit and check if it single digit, if not add all digit again and do this process untill you get single digit\\n\\n# Approach\\ngetDigitSumHelper -> returns sum of digit\\n1. Check if numer is single digit, if not add all it digits\\n2. Do this process unless you get single digit\\n\\n# Complexity\\n- Time complexity:$$O(n)$$ \\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int getDigitSumHelper(int num) {\\n        int sum = 0;\\n        while( num != 0) {\\n            sum += num % 10;\\n            num = num/10;\\n        }\\n        return sum;\\n    }\\n    public int addDigits(int num) {\\n        while(true){\\n            if(num < 10) {\\n                return num;\\n            }\\n            num = getDigitSumHelper(num);\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getDigitSumHelper(int num) {\\n        int sum = 0;\\n        while( num != 0) {\\n            sum += num % 10;\\n            num = num/10;\\n        }\\n        return sum;\\n    }\\n    public int addDigits(int num) {\\n        while(true){\\n            if(num < 10) {\\n                return num;\\n            }\\n            num = getDigitSumHelper(num);\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3455784,
                "title": "java-easy-solution-0ms-beats100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->O(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int addDigits(int num) {\\n        while(num>9){\\n          int sum=0;\\n       while(num!=0){\\n           int temp=num%10;\\n           num/=10;\\n           sum+=temp;\\n         }\\n       num=sum;\\n        }\\n        return num;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int addDigits(int num) {\\n        while(num>9){\\n          int sum=0;\\n       while(num!=0){\\n           int temp=num%10;\\n           num/=10;\\n           sum+=temp;\\n         }\\n       num=sum;\\n        }\\n        return num;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3455639,
                "title": "java-100-faster-solution-step-by-step-explained",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->O(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->O(1)\\n![Screenshot_20230205_171246.png](https://assets.leetcode.com/users/images/bc0043ee-8067-4d89-9e7b-6469c3c826d5_1682475360.1713152.png)\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int addDigits(int num) {\\n        \\n        //if the number is less than or equal to 9, return it as it cannot be reduced further\\n        if(num <= 9){\\n            return num;\\n        }\\n        \\n        // while the number is greater than 9, keep adding its digits until it reduces to a single digit\\n        while(num > 9){\\n            int ans = 0; // initialize a variable to store the sum of the digits\\n            \\n            // add up the digits of the current number\\n            while(num > 0){\\n                int rem = num % 10; // get the last digit of the number\\n                ans = ans + rem; // add the last digit to the sum\\n                num = num / 10; // remove the last digit from the number\\n            }\\n            \\n            num = ans; // assign the sum to the number for the next iteration of the loop\\n        }\\n\\n        // return the single digit number\\n        return num;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public int addDigits(int num) {\\n        \\n        //if the number is less than or equal to 9, return it as it cannot be reduced further\\n        if(num <= 9){\\n            return num;\\n        }\\n        \\n        // while the number is greater than 9, keep adding its digits until it reduces to a single digit\\n        while(num > 9){\\n            int ans = 0; // initialize a variable to store the sum of the digits\\n            \\n            // add up the digits of the current number\\n            while(num > 0){\\n                int rem = num % 10; // get the last digit of the number\\n                ans = ans + rem; // add the last digit to the sum\\n                num = num / 10; // remove the last digit from the number\\n            }\\n            \\n            num = ans; // assign the sum to the number for the next iteration of the loop\\n        }\\n\\n        // return the single digit number\\n        return num;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3455474,
                "title": "ruby-does-it-get-any-simpler-than-this",
                "content": "# Code\\n\\n```ruby\\ndef add_digits(n) = n == 0 ? 0 : (n - 1) % 9 + 1\\n```\\n\\n# Time complexity\\n\\n$$\\\\mathcal{O}(1)$$\\n\\n# Space complexity\\n\\n$$\\\\mathcal{O}(1)$$",
                "solutionTags": [
                    "Ruby",
                    "Math"
                ],
                "code": "```ruby\\ndef add_digits(n) = n == 0 ? 0 : (n - 1) % 9 + 1\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3455429,
                "title": "different-ways-to-solve-bonus-one-liner",
                "content": "\\n# Code\\nJust doing what is asked: \\n```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        s = str(num)\\n        while len(s) > 1:\\n            n = 0\\n            for i in range(len(s)):\\n                n += int(s[i])\\n            s = str(n)\\n        return int(s)\\n```\\nHowever this is not optimal so..\\n```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        if num == 0 : return 0\\n        if not num % 9: return 9\\n        else : return (num % 9)\\n```\\nThe same in one line:\\n```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        return 0 if num == 0 else 9 if not num % 9 else num % 9\\n```\\nC++ version:\\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        return num == 0 ? 0 : (num % 9 == 0 ? 9 : num % 9);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        s = str(num)\\n        while len(s) > 1:\\n            n = 0\\n            for i in range(len(s)):\\n                n += int(s[i])\\n            s = str(n)\\n        return int(s)\\n```\n```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        if num == 0 : return 0\\n        if not num % 9: return 9\\n        else : return (num % 9)\\n```\n```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        return 0 if num == 0 else 9 if not num % 9 else num % 9\\n```\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        return num == 0 ? 0 : (num % 9 == 0 ? 9 : num % 9);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3455418,
                "title": "java-7-lines-beats-100-clean-simple-code",
                "content": "# Complexity\\n- Time complexity: O(log<sub>10</sub>n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  public int addDigits(int num) {\\n    while (num / 10 > 0) {\\n      var tmp = 0;\\n\\n      while (num > 0) {\\n        tmp += num % 10;\\n        num /= 10;\\n      }\\n      num = tmp;\\n    }\\n    return num;\\n  }\\n}\\n```\\nIf you like my solution, please upvote it!",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n  public int addDigits(int num) {\\n    while (num / 10 > 0) {\\n      var tmp = 0;\\n\\n      while (num > 0) {\\n        tmp += num % 10;\\n        num /= 10;\\n      }\\n      num = tmp;\\n    }\\n    return num;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2993778,
                "title": "java-one-liner-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int addDigits(int num) {\\n        return (num - 1) % 9 + 1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int addDigits(int num) {\\n        return (num - 1) % 9 + 1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2974513,
                "title": "c-solution",
                "content": "# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(1)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        if(num == 0) return 0;\\n        if(num % 9 == 0) return 9;\\n        return num % 9;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int addDigits(int num) {\\n        if(num == 0) return 0;\\n        if(num % 9 == 0) return 9;\\n        return num % 9;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2888212,
                "title": "o-1-simple-java-solution",
                "content": "1. Since demical number system has base 10 [0-9]\\n2. numbers can only add upto 9 [it being max number]\\n3. **answer can be alternatively also be looked as remainder after removing  9(nine) N-times .**\\n```\\nclass Solution {\\n    public int addDigits(int num) {\\n        if (num < 10) return num;\\n        if (num % 9 == 0) return 9;\\n        return num % 9;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int addDigits(int num) {\\n        if (num < 10) return num;\\n        if (num % 9 == 0) return 9;\\n        return num % 9;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2779999,
                "title": "java-solution-for-beginners-easy-to-understand",
                "content": "**Upvote me if you like my solution.**\\n\\n# Code\\n```\\nclass Solution {\\n    public int addDigits(int num) {\\n        int x = num;\\n        int sum;\\n        while(Integer.MAX_VALUE>9){\\n            sum = 0;\\n            while(x>0){\\n                sum += x%10;\\n                x = x/10;\\n            }\\n            if(sum <= 9){\\n                return sum;\\n            }\\n            else{\\n                x = sum;\\n            }\\n        }  \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int addDigits(int num) {\\n        int x = num;\\n        int sum;\\n        while(Integer.MAX_VALUE>9){\\n            sum = 0;\\n            while(x>0){\\n                sum += x%10;\\n                x = x/10;\\n            }\\n            if(sum <= 9){\\n                return sum;\\n            }\\n            else{\\n                x = sum;\\n            }\\n        }  \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2741546,
                "title": "magic-of-9-o-1-100-faster-solution",
                "content": "\\n```\\n// Upvote if you like\\n```\\n```\\nclass Solution {\\n    public int addDigits(int num) {\\n        if(num == 0)\\n            return 0;\\n        num %= 9;\\n        return num == 0 ? 9 : num;\\n    }\\n}\\n```\\n\\n```\\n/* Runtime: 1 ms, faster than 100.00% of Java online submissions for Add Digits.\\nMemory Usage: 39.3 MB, less than 98.26% of Java online submissions for Add Digits. */\\n```",
                "solutionTags": [
                    "Java",
                    "C"
                ],
                "code": "```\\n// Upvote if you like\\n```\n```\\nclass Solution {\\n    public int addDigits(int num) {\\n        if(num == 0)\\n            return 0;\\n        num %= 9;\\n        return num == 0 ? 9 : num;\\n    }\\n}\\n```\n```\\n/* Runtime: 1 ms, faster than 100.00% of Java online submissions for Add Digits.\\nMemory Usage: 39.3 MB, less than 98.26% of Java online submissions for Add Digits. */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2446989,
                "title": "javascript-simple-solution-with-recursion",
                "content": "```\\nvar addDigits = function(num) {\\n    num = num.toString();\\n    let newNumber = 0;\\n    for (let i = 0; i < num.length; i++) {\\n        newNumber += Number(num[i]);\\n    }\\n    if (newNumber.toString().length === 1) return newNumber;\\n    return addDigits(newNumber);\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Recursion"
                ],
                "code": "```\\nvar addDigits = function(num) {\\n    num = num.toString();\\n    let newNumber = 0;\\n    for (let i = 0; i < num.length; i++) {\\n        newNumber += Number(num[i]);\\n    }\\n    if (newNumber.toString().length === 1) return newNumber;\\n    return addDigits(newNumber);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1778744,
                "title": "python-o-n-approach",
                "content": "```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        while num >= 10:\\n            d = num // 10\\n            r = num % 10\\n            num = d+r\\n        return num\\n            \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def addDigits(self, num: int) -> int:\\n        while num >= 10:\\n            d = num // 10\\n            r = num % 10\\n            num = d+r\\n        return num\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1755273,
                "title": "super-simple-c-iterative-and-constant-o-1-approach-explained",
                "content": "**Add digits explained simply**\\n\\n*Iterative solution*\\n```\\nint addDigits(int num) {\\n    while(num>9){                               //Run the while loop untill num becomes a single digit\\n        int temp=num;                           //Store num in a temporary variable \\'temp\\'\\n        num=0;                                  //Set num to 0 for storing the sum of its digits\\n        while(temp!=0){                         //Run a nested while loop until temp becomes 0 for splitting the digits from last\\n            num=num+temp%10;                    //Update num to num + modulus of temp with 10 (simply the last digit)\\n            temp=temp/10;                       //Update temp with temp divided by 10\\n        }\\n    }\\n    return num;                                 //Return num\\n}\\n```\\n*Constant time solution*\\n```\\nint addDigits(int num) {\\n    if(num==0)                                  //Edge case if the number is 0 return 0\\n        return 0;\\n    else if(num%9==0)                           //Another edge case if the numer is completely divisible by 9 return 9 not 0\\n        return 9;\\n    else                                        //Always return num modulus 9 for all other cases\\n        return num%9;\\n}\\n```\\n**Why this works -** Its is because of the divisblity test of 9. A number is completely divisible by 9 only when it\\'s digits sum up to a number which is divisble by 9 or 3 and if something is left after the sum of digits gets divided by 9 that will be equal to the required result. These are also known as digital roots.\\nFor example -\\n\\n0    ---> 0\\n1    ---> 1\\n2    ---> 2\\n3    ---> 3\\n.\\n.\\n.\\n9    ---> 9\\n10  ---> 1\\n11  ---> 2\\n12  ---> 3\\n.\\n.\\n.\\n18  ---> 9\\n19  ---> 1\\n20  ---> 2\\n.\\n.\\n.\\n99  ---> 9\\n100---> 1\\n\\n*Thank you and credits to others discuss comments as well*",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nint addDigits(int num) {\\n    while(num>9){                               //Run the while loop untill num becomes a single digit\\n        int temp=num;                           //Store num in a temporary variable \\'temp\\'\\n        num=0;                                  //Set num to 0 for storing the sum of its digits\\n        while(temp!=0){                         //Run a nested while loop until temp becomes 0 for splitting the digits from last\\n            num=num+temp%10;                    //Update num to num + modulus of temp with 10 (simply the last digit)\\n            temp=temp/10;                       //Update temp with temp divided by 10\\n        }\\n    }\\n    return num;                                 //Return num\\n}\\n```\n```\\nint addDigits(int num) {\\n    if(num==0)                                  //Edge case if the number is 0 return 0\\n        return 0;\\n    else if(num%9==0)                           //Another edge case if the numer is completely divisible by 9 return 9 not 0\\n        return 9;\\n    else                                        //Always return num modulus 9 for all other cases\\n        return num%9;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1754662,
                "title": "ruby-simple-solution-without-using-string",
                "content": "```ruby\\ndef add_digits(num)\\n  return num if num < 10\\n  add_digits(num.digits.sum)\\nend\\n```",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```ruby\\ndef add_digits(num)\\n  return num if num < 10\\n  add_digits(num.digits.sum)\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1754558,
                "title": "o-1-time-complexity-o-1-space-complexity-one-line-solution",
                "content": "class Solution {\\npublic:\\n    int addDigits(int num) {\\n       return num==0?0:( num%9==0?9:num%9);\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int addDigits(int num) {\\n       return num==0?0:( num%9==0?9:num%9);\\n    }",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1874133,
                "content": [
                    {
                        "username": "vetor",
                        "content": "Stop posting answers in discussion \\uD83D\\uDE12"
                    },
                    {
                        "username": "tehpolecat",
                        "content": "wish leetcode would moderate the discussion section, sometimes I want to check it for hints, but I can\\'t because somebody will just post the solution"
                    },
                    {
                        "username": "PrashantUnity",
                        "content": " **Extra Follow up** : Could you post your answer in solution section, not in discussion ?"
                    },
                    {
                        "username": "amancha9161",
                        "content": "\\uD83D\\uDE05"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**If number is divisible by 9 completely then digital root(ans) is 9,else the digital root is remainder obtained.**\\n\\n*P.S-I learnt this beautiful thing today!*"
                    },
                    {
                        "username": "deepu14d",
                        "content": "Same here, I was following the usual normal way for solving this without realizing that we can have that pattern to solve this question in just 1 or 2 lines. "
                    },
                    {
                        "username": "coodeer",
                        "content": "We can find regular pattern by enumerate following case:\\n1=1; 2=2; 3=3; 4=4; 5=5; 6=6; 7=7; 8=8; 9=9;\\n10=1; 11=2; 12=3; 13=4; 14=5; 15=6; 16=7; 17=8; 18=9;\\n19=1; 20=2; 21=3; 22=4; 23=5; 24=6; 25=7; 26=8; 27=9;\\n... ...\\nso, we supposed that the rule is a cycle per 9 number.\\nthe math formulation:\\n(num - 1) % 9 + 1\\n\\nnote: num - 1 is to avoid k*9%9 = 0"
                    },
                    {
                        "username": "payadikishan",
                        "content": "I knew that i should be a pattern based question but didn\\'t knew what\\'s the pattern"
                    },
                    {
                        "username": "dmitryartux",
                        "content": "**That\\'s cool!**"
                    },
                    {
                        "username": "acearth",
                        "content": "The question want we to get digits root.    There is a trick, a digits root of a number is equals to number%9.\\n\\n    def add_digits(num)\\n        num==0 ? 0:(num%9==0 ? 9 : num%9)\\n    end"
                    },
                    {
                        "username": "kylestanfield",
                        "content": "[@vineethchivukula](/vineethchivukula) Find the answer by hand for the first 20 numbers. The pattern emerges. Project Euler has many similar problems."
                    },
                    {
                        "username": "vineethchivukula",
                        "content": "Hey...Where can I know such tricks....like I\\'m speechless "
                    },
                    {
                        "username": "tylerlong",
                        "content": "Answer is `(num - 1) % 9 + 1`\\n\\nIt is a variation of `num % 9` because we don\\'t want `0` as answer. Now I am going to explain why `num % 9` works.\\n\\nif `num >= 10 && num < 20`, we can just caculate it by `num - 9`.  We can verify it manually by enumerating all the numbers that `num >= 10 && num < 20`.\\n\\nif `num >= 20 && num < 30`, we can just caculate it by `num - 9 * 2`.  We can verify it manually by enumerating all the numbers that `num >= 20 && num < 30`.\\n\\n...\\n\\nGiven a number `abcdef`, we can caculate it by `num - 0 * f - 9 * e - 99 * d - 999 * c - 9999 * b - 99999 * a`\\n\\n....\\n\\nAnd we know the equation above is the same as `num % 9` (only difference is it nevers returns `0`)\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 8.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-digits/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Mathematical: Digital Root\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "xdavidliu",
                        "content": "let x be the original number, and let a[i] be the i-th digit, so that x = sum a[i] * 10^i. Let y be the sum of digits, e.g. y = sum a[i]. Note that (10^i) mod 9 = (10 mod 9)^i = 1. Hence, x mod 9 = y mod 9, QED."
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE9 if you are a beginner just solve this problem very sincerely because it is gonna meet you at every step in future."
                    },
                    {
                        "username": "lightning_legend",
                        "content": "![image](https://assets.leetcode.com/users/images/147b2ad0-40d5-4197-b892-1f537855d4f1_1640149655.8064609.png)\\n"
                    }
                ]
            },
            {
                "id": 1874219,
                "content": [
                    {
                        "username": "vetor",
                        "content": "Stop posting answers in discussion \\uD83D\\uDE12"
                    },
                    {
                        "username": "tehpolecat",
                        "content": "wish leetcode would moderate the discussion section, sometimes I want to check it for hints, but I can\\'t because somebody will just post the solution"
                    },
                    {
                        "username": "PrashantUnity",
                        "content": " **Extra Follow up** : Could you post your answer in solution section, not in discussion ?"
                    },
                    {
                        "username": "amancha9161",
                        "content": "\\uD83D\\uDE05"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**If number is divisible by 9 completely then digital root(ans) is 9,else the digital root is remainder obtained.**\\n\\n*P.S-I learnt this beautiful thing today!*"
                    },
                    {
                        "username": "deepu14d",
                        "content": "Same here, I was following the usual normal way for solving this without realizing that we can have that pattern to solve this question in just 1 or 2 lines. "
                    },
                    {
                        "username": "coodeer",
                        "content": "We can find regular pattern by enumerate following case:\\n1=1; 2=2; 3=3; 4=4; 5=5; 6=6; 7=7; 8=8; 9=9;\\n10=1; 11=2; 12=3; 13=4; 14=5; 15=6; 16=7; 17=8; 18=9;\\n19=1; 20=2; 21=3; 22=4; 23=5; 24=6; 25=7; 26=8; 27=9;\\n... ...\\nso, we supposed that the rule is a cycle per 9 number.\\nthe math formulation:\\n(num - 1) % 9 + 1\\n\\nnote: num - 1 is to avoid k*9%9 = 0"
                    },
                    {
                        "username": "payadikishan",
                        "content": "I knew that i should be a pattern based question but didn\\'t knew what\\'s the pattern"
                    },
                    {
                        "username": "dmitryartux",
                        "content": "**That\\'s cool!**"
                    },
                    {
                        "username": "acearth",
                        "content": "The question want we to get digits root.    There is a trick, a digits root of a number is equals to number%9.\\n\\n    def add_digits(num)\\n        num==0 ? 0:(num%9==0 ? 9 : num%9)\\n    end"
                    },
                    {
                        "username": "kylestanfield",
                        "content": "[@vineethchivukula](/vineethchivukula) Find the answer by hand for the first 20 numbers. The pattern emerges. Project Euler has many similar problems."
                    },
                    {
                        "username": "vineethchivukula",
                        "content": "Hey...Where can I know such tricks....like I\\'m speechless "
                    },
                    {
                        "username": "tylerlong",
                        "content": "Answer is `(num - 1) % 9 + 1`\\n\\nIt is a variation of `num % 9` because we don\\'t want `0` as answer. Now I am going to explain why `num % 9` works.\\n\\nif `num >= 10 && num < 20`, we can just caculate it by `num - 9`.  We can verify it manually by enumerating all the numbers that `num >= 10 && num < 20`.\\n\\nif `num >= 20 && num < 30`, we can just caculate it by `num - 9 * 2`.  We can verify it manually by enumerating all the numbers that `num >= 20 && num < 30`.\\n\\n...\\n\\nGiven a number `abcdef`, we can caculate it by `num - 0 * f - 9 * e - 99 * d - 999 * c - 9999 * b - 99999 * a`\\n\\n....\\n\\nAnd we know the equation above is the same as `num % 9` (only difference is it nevers returns `0`)\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 8.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-digits/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Mathematical: Digital Root\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "xdavidliu",
                        "content": "let x be the original number, and let a[i] be the i-th digit, so that x = sum a[i] * 10^i. Let y be the sum of digits, e.g. y = sum a[i]. Note that (10^i) mod 9 = (10 mod 9)^i = 1. Hence, x mod 9 = y mod 9, QED."
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE9 if you are a beginner just solve this problem very sincerely because it is gonna meet you at every step in future."
                    },
                    {
                        "username": "lightning_legend",
                        "content": "![image](https://assets.leetcode.com/users/images/147b2ad0-40d5-4197-b892-1f537855d4f1_1640149655.8064609.png)\\n"
                    }
                ]
            },
            {
                "id": 1574450,
                "content": [
                    {
                        "username": "vetor",
                        "content": "Stop posting answers in discussion \\uD83D\\uDE12"
                    },
                    {
                        "username": "tehpolecat",
                        "content": "wish leetcode would moderate the discussion section, sometimes I want to check it for hints, but I can\\'t because somebody will just post the solution"
                    },
                    {
                        "username": "PrashantUnity",
                        "content": " **Extra Follow up** : Could you post your answer in solution section, not in discussion ?"
                    },
                    {
                        "username": "amancha9161",
                        "content": "\\uD83D\\uDE05"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**If number is divisible by 9 completely then digital root(ans) is 9,else the digital root is remainder obtained.**\\n\\n*P.S-I learnt this beautiful thing today!*"
                    },
                    {
                        "username": "deepu14d",
                        "content": "Same here, I was following the usual normal way for solving this without realizing that we can have that pattern to solve this question in just 1 or 2 lines. "
                    },
                    {
                        "username": "coodeer",
                        "content": "We can find regular pattern by enumerate following case:\\n1=1; 2=2; 3=3; 4=4; 5=5; 6=6; 7=7; 8=8; 9=9;\\n10=1; 11=2; 12=3; 13=4; 14=5; 15=6; 16=7; 17=8; 18=9;\\n19=1; 20=2; 21=3; 22=4; 23=5; 24=6; 25=7; 26=8; 27=9;\\n... ...\\nso, we supposed that the rule is a cycle per 9 number.\\nthe math formulation:\\n(num - 1) % 9 + 1\\n\\nnote: num - 1 is to avoid k*9%9 = 0"
                    },
                    {
                        "username": "payadikishan",
                        "content": "I knew that i should be a pattern based question but didn\\'t knew what\\'s the pattern"
                    },
                    {
                        "username": "dmitryartux",
                        "content": "**That\\'s cool!**"
                    },
                    {
                        "username": "acearth",
                        "content": "The question want we to get digits root.    There is a trick, a digits root of a number is equals to number%9.\\n\\n    def add_digits(num)\\n        num==0 ? 0:(num%9==0 ? 9 : num%9)\\n    end"
                    },
                    {
                        "username": "kylestanfield",
                        "content": "[@vineethchivukula](/vineethchivukula) Find the answer by hand for the first 20 numbers. The pattern emerges. Project Euler has many similar problems."
                    },
                    {
                        "username": "vineethchivukula",
                        "content": "Hey...Where can I know such tricks....like I\\'m speechless "
                    },
                    {
                        "username": "tylerlong",
                        "content": "Answer is `(num - 1) % 9 + 1`\\n\\nIt is a variation of `num % 9` because we don\\'t want `0` as answer. Now I am going to explain why `num % 9` works.\\n\\nif `num >= 10 && num < 20`, we can just caculate it by `num - 9`.  We can verify it manually by enumerating all the numbers that `num >= 10 && num < 20`.\\n\\nif `num >= 20 && num < 30`, we can just caculate it by `num - 9 * 2`.  We can verify it manually by enumerating all the numbers that `num >= 20 && num < 30`.\\n\\n...\\n\\nGiven a number `abcdef`, we can caculate it by `num - 0 * f - 9 * e - 99 * d - 999 * c - 9999 * b - 99999 * a`\\n\\n....\\n\\nAnd we know the equation above is the same as `num % 9` (only difference is it nevers returns `0`)\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 8.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-digits/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Mathematical: Digital Root\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "xdavidliu",
                        "content": "let x be the original number, and let a[i] be the i-th digit, so that x = sum a[i] * 10^i. Let y be the sum of digits, e.g. y = sum a[i]. Note that (10^i) mod 9 = (10 mod 9)^i = 1. Hence, x mod 9 = y mod 9, QED."
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE9 if you are a beginner just solve this problem very sincerely because it is gonna meet you at every step in future."
                    },
                    {
                        "username": "lightning_legend",
                        "content": "![image](https://assets.leetcode.com/users/images/147b2ad0-40d5-4197-b892-1f537855d4f1_1640149655.8064609.png)\\n"
                    }
                ]
            },
            {
                "id": 1569043,
                "content": [
                    {
                        "username": "vetor",
                        "content": "Stop posting answers in discussion \\uD83D\\uDE12"
                    },
                    {
                        "username": "tehpolecat",
                        "content": "wish leetcode would moderate the discussion section, sometimes I want to check it for hints, but I can\\'t because somebody will just post the solution"
                    },
                    {
                        "username": "PrashantUnity",
                        "content": " **Extra Follow up** : Could you post your answer in solution section, not in discussion ?"
                    },
                    {
                        "username": "amancha9161",
                        "content": "\\uD83D\\uDE05"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**If number is divisible by 9 completely then digital root(ans) is 9,else the digital root is remainder obtained.**\\n\\n*P.S-I learnt this beautiful thing today!*"
                    },
                    {
                        "username": "deepu14d",
                        "content": "Same here, I was following the usual normal way for solving this without realizing that we can have that pattern to solve this question in just 1 or 2 lines. "
                    },
                    {
                        "username": "coodeer",
                        "content": "We can find regular pattern by enumerate following case:\\n1=1; 2=2; 3=3; 4=4; 5=5; 6=6; 7=7; 8=8; 9=9;\\n10=1; 11=2; 12=3; 13=4; 14=5; 15=6; 16=7; 17=8; 18=9;\\n19=1; 20=2; 21=3; 22=4; 23=5; 24=6; 25=7; 26=8; 27=9;\\n... ...\\nso, we supposed that the rule is a cycle per 9 number.\\nthe math formulation:\\n(num - 1) % 9 + 1\\n\\nnote: num - 1 is to avoid k*9%9 = 0"
                    },
                    {
                        "username": "payadikishan",
                        "content": "I knew that i should be a pattern based question but didn\\'t knew what\\'s the pattern"
                    },
                    {
                        "username": "dmitryartux",
                        "content": "**That\\'s cool!**"
                    },
                    {
                        "username": "acearth",
                        "content": "The question want we to get digits root.    There is a trick, a digits root of a number is equals to number%9.\\n\\n    def add_digits(num)\\n        num==0 ? 0:(num%9==0 ? 9 : num%9)\\n    end"
                    },
                    {
                        "username": "kylestanfield",
                        "content": "[@vineethchivukula](/vineethchivukula) Find the answer by hand for the first 20 numbers. The pattern emerges. Project Euler has many similar problems."
                    },
                    {
                        "username": "vineethchivukula",
                        "content": "Hey...Where can I know such tricks....like I\\'m speechless "
                    },
                    {
                        "username": "tylerlong",
                        "content": "Answer is `(num - 1) % 9 + 1`\\n\\nIt is a variation of `num % 9` because we don\\'t want `0` as answer. Now I am going to explain why `num % 9` works.\\n\\nif `num >= 10 && num < 20`, we can just caculate it by `num - 9`.  We can verify it manually by enumerating all the numbers that `num >= 10 && num < 20`.\\n\\nif `num >= 20 && num < 30`, we can just caculate it by `num - 9 * 2`.  We can verify it manually by enumerating all the numbers that `num >= 20 && num < 30`.\\n\\n...\\n\\nGiven a number `abcdef`, we can caculate it by `num - 0 * f - 9 * e - 99 * d - 999 * c - 9999 * b - 99999 * a`\\n\\n....\\n\\nAnd we know the equation above is the same as `num % 9` (only difference is it nevers returns `0`)\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 8.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-digits/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Mathematical: Digital Root\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "xdavidliu",
                        "content": "let x be the original number, and let a[i] be the i-th digit, so that x = sum a[i] * 10^i. Let y be the sum of digits, e.g. y = sum a[i]. Note that (10^i) mod 9 = (10 mod 9)^i = 1. Hence, x mod 9 = y mod 9, QED."
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE9 if you are a beginner just solve this problem very sincerely because it is gonna meet you at every step in future."
                    },
                    {
                        "username": "lightning_legend",
                        "content": "![image](https://assets.leetcode.com/users/images/147b2ad0-40d5-4197-b892-1f537855d4f1_1640149655.8064609.png)\\n"
                    }
                ]
            },
            {
                "id": 1566252,
                "content": [
                    {
                        "username": "vetor",
                        "content": "Stop posting answers in discussion \\uD83D\\uDE12"
                    },
                    {
                        "username": "tehpolecat",
                        "content": "wish leetcode would moderate the discussion section, sometimes I want to check it for hints, but I can\\'t because somebody will just post the solution"
                    },
                    {
                        "username": "PrashantUnity",
                        "content": " **Extra Follow up** : Could you post your answer in solution section, not in discussion ?"
                    },
                    {
                        "username": "amancha9161",
                        "content": "\\uD83D\\uDE05"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**If number is divisible by 9 completely then digital root(ans) is 9,else the digital root is remainder obtained.**\\n\\n*P.S-I learnt this beautiful thing today!*"
                    },
                    {
                        "username": "deepu14d",
                        "content": "Same here, I was following the usual normal way for solving this without realizing that we can have that pattern to solve this question in just 1 or 2 lines. "
                    },
                    {
                        "username": "coodeer",
                        "content": "We can find regular pattern by enumerate following case:\\n1=1; 2=2; 3=3; 4=4; 5=5; 6=6; 7=7; 8=8; 9=9;\\n10=1; 11=2; 12=3; 13=4; 14=5; 15=6; 16=7; 17=8; 18=9;\\n19=1; 20=2; 21=3; 22=4; 23=5; 24=6; 25=7; 26=8; 27=9;\\n... ...\\nso, we supposed that the rule is a cycle per 9 number.\\nthe math formulation:\\n(num - 1) % 9 + 1\\n\\nnote: num - 1 is to avoid k*9%9 = 0"
                    },
                    {
                        "username": "payadikishan",
                        "content": "I knew that i should be a pattern based question but didn\\'t knew what\\'s the pattern"
                    },
                    {
                        "username": "dmitryartux",
                        "content": "**That\\'s cool!**"
                    },
                    {
                        "username": "acearth",
                        "content": "The question want we to get digits root.    There is a trick, a digits root of a number is equals to number%9.\\n\\n    def add_digits(num)\\n        num==0 ? 0:(num%9==0 ? 9 : num%9)\\n    end"
                    },
                    {
                        "username": "kylestanfield",
                        "content": "[@vineethchivukula](/vineethchivukula) Find the answer by hand for the first 20 numbers. The pattern emerges. Project Euler has many similar problems."
                    },
                    {
                        "username": "vineethchivukula",
                        "content": "Hey...Where can I know such tricks....like I\\'m speechless "
                    },
                    {
                        "username": "tylerlong",
                        "content": "Answer is `(num - 1) % 9 + 1`\\n\\nIt is a variation of `num % 9` because we don\\'t want `0` as answer. Now I am going to explain why `num % 9` works.\\n\\nif `num >= 10 && num < 20`, we can just caculate it by `num - 9`.  We can verify it manually by enumerating all the numbers that `num >= 10 && num < 20`.\\n\\nif `num >= 20 && num < 30`, we can just caculate it by `num - 9 * 2`.  We can verify it manually by enumerating all the numbers that `num >= 20 && num < 30`.\\n\\n...\\n\\nGiven a number `abcdef`, we can caculate it by `num - 0 * f - 9 * e - 99 * d - 999 * c - 9999 * b - 99999 * a`\\n\\n....\\n\\nAnd we know the equation above is the same as `num % 9` (only difference is it nevers returns `0`)\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 8.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-digits/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Mathematical: Digital Root\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "xdavidliu",
                        "content": "let x be the original number, and let a[i] be the i-th digit, so that x = sum a[i] * 10^i. Let y be the sum of digits, e.g. y = sum a[i]. Note that (10^i) mod 9 = (10 mod 9)^i = 1. Hence, x mod 9 = y mod 9, QED."
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE9 if you are a beginner just solve this problem very sincerely because it is gonna meet you at every step in future."
                    },
                    {
                        "username": "lightning_legend",
                        "content": "![image](https://assets.leetcode.com/users/images/147b2ad0-40d5-4197-b892-1f537855d4f1_1640149655.8064609.png)\\n"
                    }
                ]
            },
            {
                "id": 1568024,
                "content": [
                    {
                        "username": "vetor",
                        "content": "Stop posting answers in discussion \\uD83D\\uDE12"
                    },
                    {
                        "username": "tehpolecat",
                        "content": "wish leetcode would moderate the discussion section, sometimes I want to check it for hints, but I can\\'t because somebody will just post the solution"
                    },
                    {
                        "username": "PrashantUnity",
                        "content": " **Extra Follow up** : Could you post your answer in solution section, not in discussion ?"
                    },
                    {
                        "username": "amancha9161",
                        "content": "\\uD83D\\uDE05"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**If number is divisible by 9 completely then digital root(ans) is 9,else the digital root is remainder obtained.**\\n\\n*P.S-I learnt this beautiful thing today!*"
                    },
                    {
                        "username": "deepu14d",
                        "content": "Same here, I was following the usual normal way for solving this without realizing that we can have that pattern to solve this question in just 1 or 2 lines. "
                    },
                    {
                        "username": "coodeer",
                        "content": "We can find regular pattern by enumerate following case:\\n1=1; 2=2; 3=3; 4=4; 5=5; 6=6; 7=7; 8=8; 9=9;\\n10=1; 11=2; 12=3; 13=4; 14=5; 15=6; 16=7; 17=8; 18=9;\\n19=1; 20=2; 21=3; 22=4; 23=5; 24=6; 25=7; 26=8; 27=9;\\n... ...\\nso, we supposed that the rule is a cycle per 9 number.\\nthe math formulation:\\n(num - 1) % 9 + 1\\n\\nnote: num - 1 is to avoid k*9%9 = 0"
                    },
                    {
                        "username": "payadikishan",
                        "content": "I knew that i should be a pattern based question but didn\\'t knew what\\'s the pattern"
                    },
                    {
                        "username": "dmitryartux",
                        "content": "**That\\'s cool!**"
                    },
                    {
                        "username": "acearth",
                        "content": "The question want we to get digits root.    There is a trick, a digits root of a number is equals to number%9.\\n\\n    def add_digits(num)\\n        num==0 ? 0:(num%9==0 ? 9 : num%9)\\n    end"
                    },
                    {
                        "username": "kylestanfield",
                        "content": "[@vineethchivukula](/vineethchivukula) Find the answer by hand for the first 20 numbers. The pattern emerges. Project Euler has many similar problems."
                    },
                    {
                        "username": "vineethchivukula",
                        "content": "Hey...Where can I know such tricks....like I\\'m speechless "
                    },
                    {
                        "username": "tylerlong",
                        "content": "Answer is `(num - 1) % 9 + 1`\\n\\nIt is a variation of `num % 9` because we don\\'t want `0` as answer. Now I am going to explain why `num % 9` works.\\n\\nif `num >= 10 && num < 20`, we can just caculate it by `num - 9`.  We can verify it manually by enumerating all the numbers that `num >= 10 && num < 20`.\\n\\nif `num >= 20 && num < 30`, we can just caculate it by `num - 9 * 2`.  We can verify it manually by enumerating all the numbers that `num >= 20 && num < 30`.\\n\\n...\\n\\nGiven a number `abcdef`, we can caculate it by `num - 0 * f - 9 * e - 99 * d - 999 * c - 9999 * b - 99999 * a`\\n\\n....\\n\\nAnd we know the equation above is the same as `num % 9` (only difference is it nevers returns `0`)\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 8.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-digits/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Mathematical: Digital Root\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "xdavidliu",
                        "content": "let x be the original number, and let a[i] be the i-th digit, so that x = sum a[i] * 10^i. Let y be the sum of digits, e.g. y = sum a[i]. Note that (10^i) mod 9 = (10 mod 9)^i = 1. Hence, x mod 9 = y mod 9, QED."
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE9 if you are a beginner just solve this problem very sincerely because it is gonna meet you at every step in future."
                    },
                    {
                        "username": "lightning_legend",
                        "content": "![image](https://assets.leetcode.com/users/images/147b2ad0-40d5-4197-b892-1f537855d4f1_1640149655.8064609.png)\\n"
                    }
                ]
            },
            {
                "id": 1565925,
                "content": [
                    {
                        "username": "vetor",
                        "content": "Stop posting answers in discussion \\uD83D\\uDE12"
                    },
                    {
                        "username": "tehpolecat",
                        "content": "wish leetcode would moderate the discussion section, sometimes I want to check it for hints, but I can\\'t because somebody will just post the solution"
                    },
                    {
                        "username": "PrashantUnity",
                        "content": " **Extra Follow up** : Could you post your answer in solution section, not in discussion ?"
                    },
                    {
                        "username": "amancha9161",
                        "content": "\\uD83D\\uDE05"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**If number is divisible by 9 completely then digital root(ans) is 9,else the digital root is remainder obtained.**\\n\\n*P.S-I learnt this beautiful thing today!*"
                    },
                    {
                        "username": "deepu14d",
                        "content": "Same here, I was following the usual normal way for solving this without realizing that we can have that pattern to solve this question in just 1 or 2 lines. "
                    },
                    {
                        "username": "coodeer",
                        "content": "We can find regular pattern by enumerate following case:\\n1=1; 2=2; 3=3; 4=4; 5=5; 6=6; 7=7; 8=8; 9=9;\\n10=1; 11=2; 12=3; 13=4; 14=5; 15=6; 16=7; 17=8; 18=9;\\n19=1; 20=2; 21=3; 22=4; 23=5; 24=6; 25=7; 26=8; 27=9;\\n... ...\\nso, we supposed that the rule is a cycle per 9 number.\\nthe math formulation:\\n(num - 1) % 9 + 1\\n\\nnote: num - 1 is to avoid k*9%9 = 0"
                    },
                    {
                        "username": "payadikishan",
                        "content": "I knew that i should be a pattern based question but didn\\'t knew what\\'s the pattern"
                    },
                    {
                        "username": "dmitryartux",
                        "content": "**That\\'s cool!**"
                    },
                    {
                        "username": "acearth",
                        "content": "The question want we to get digits root.    There is a trick, a digits root of a number is equals to number%9.\\n\\n    def add_digits(num)\\n        num==0 ? 0:(num%9==0 ? 9 : num%9)\\n    end"
                    },
                    {
                        "username": "kylestanfield",
                        "content": "[@vineethchivukula](/vineethchivukula) Find the answer by hand for the first 20 numbers. The pattern emerges. Project Euler has many similar problems."
                    },
                    {
                        "username": "vineethchivukula",
                        "content": "Hey...Where can I know such tricks....like I\\'m speechless "
                    },
                    {
                        "username": "tylerlong",
                        "content": "Answer is `(num - 1) % 9 + 1`\\n\\nIt is a variation of `num % 9` because we don\\'t want `0` as answer. Now I am going to explain why `num % 9` works.\\n\\nif `num >= 10 && num < 20`, we can just caculate it by `num - 9`.  We can verify it manually by enumerating all the numbers that `num >= 10 && num < 20`.\\n\\nif `num >= 20 && num < 30`, we can just caculate it by `num - 9 * 2`.  We can verify it manually by enumerating all the numbers that `num >= 20 && num < 30`.\\n\\n...\\n\\nGiven a number `abcdef`, we can caculate it by `num - 0 * f - 9 * e - 99 * d - 999 * c - 9999 * b - 99999 * a`\\n\\n....\\n\\nAnd we know the equation above is the same as `num % 9` (only difference is it nevers returns `0`)\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 8.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-digits/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Mathematical: Digital Root\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "xdavidliu",
                        "content": "let x be the original number, and let a[i] be the i-th digit, so that x = sum a[i] * 10^i. Let y be the sum of digits, e.g. y = sum a[i]. Note that (10^i) mod 9 = (10 mod 9)^i = 1. Hence, x mod 9 = y mod 9, QED."
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE9 if you are a beginner just solve this problem very sincerely because it is gonna meet you at every step in future."
                    },
                    {
                        "username": "lightning_legend",
                        "content": "![image](https://assets.leetcode.com/users/images/147b2ad0-40d5-4197-b892-1f537855d4f1_1640149655.8064609.png)\\n"
                    }
                ]
            },
            {
                "id": 1569343,
                "content": [
                    {
                        "username": "vetor",
                        "content": "Stop posting answers in discussion \\uD83D\\uDE12"
                    },
                    {
                        "username": "tehpolecat",
                        "content": "wish leetcode would moderate the discussion section, sometimes I want to check it for hints, but I can\\'t because somebody will just post the solution"
                    },
                    {
                        "username": "PrashantUnity",
                        "content": " **Extra Follow up** : Could you post your answer in solution section, not in discussion ?"
                    },
                    {
                        "username": "amancha9161",
                        "content": "\\uD83D\\uDE05"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**If number is divisible by 9 completely then digital root(ans) is 9,else the digital root is remainder obtained.**\\n\\n*P.S-I learnt this beautiful thing today!*"
                    },
                    {
                        "username": "deepu14d",
                        "content": "Same here, I was following the usual normal way for solving this without realizing that we can have that pattern to solve this question in just 1 or 2 lines. "
                    },
                    {
                        "username": "coodeer",
                        "content": "We can find regular pattern by enumerate following case:\\n1=1; 2=2; 3=3; 4=4; 5=5; 6=6; 7=7; 8=8; 9=9;\\n10=1; 11=2; 12=3; 13=4; 14=5; 15=6; 16=7; 17=8; 18=9;\\n19=1; 20=2; 21=3; 22=4; 23=5; 24=6; 25=7; 26=8; 27=9;\\n... ...\\nso, we supposed that the rule is a cycle per 9 number.\\nthe math formulation:\\n(num - 1) % 9 + 1\\n\\nnote: num - 1 is to avoid k*9%9 = 0"
                    },
                    {
                        "username": "payadikishan",
                        "content": "I knew that i should be a pattern based question but didn\\'t knew what\\'s the pattern"
                    },
                    {
                        "username": "dmitryartux",
                        "content": "**That\\'s cool!**"
                    },
                    {
                        "username": "acearth",
                        "content": "The question want we to get digits root.    There is a trick, a digits root of a number is equals to number%9.\\n\\n    def add_digits(num)\\n        num==0 ? 0:(num%9==0 ? 9 : num%9)\\n    end"
                    },
                    {
                        "username": "kylestanfield",
                        "content": "[@vineethchivukula](/vineethchivukula) Find the answer by hand for the first 20 numbers. The pattern emerges. Project Euler has many similar problems."
                    },
                    {
                        "username": "vineethchivukula",
                        "content": "Hey...Where can I know such tricks....like I\\'m speechless "
                    },
                    {
                        "username": "tylerlong",
                        "content": "Answer is `(num - 1) % 9 + 1`\\n\\nIt is a variation of `num % 9` because we don\\'t want `0` as answer. Now I am going to explain why `num % 9` works.\\n\\nif `num >= 10 && num < 20`, we can just caculate it by `num - 9`.  We can verify it manually by enumerating all the numbers that `num >= 10 && num < 20`.\\n\\nif `num >= 20 && num < 30`, we can just caculate it by `num - 9 * 2`.  We can verify it manually by enumerating all the numbers that `num >= 20 && num < 30`.\\n\\n...\\n\\nGiven a number `abcdef`, we can caculate it by `num - 0 * f - 9 * e - 99 * d - 999 * c - 9999 * b - 99999 * a`\\n\\n....\\n\\nAnd we know the equation above is the same as `num % 9` (only difference is it nevers returns `0`)\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 8.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-digits/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Mathematical: Digital Root\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "xdavidliu",
                        "content": "let x be the original number, and let a[i] be the i-th digit, so that x = sum a[i] * 10^i. Let y be the sum of digits, e.g. y = sum a[i]. Note that (10^i) mod 9 = (10 mod 9)^i = 1. Hence, x mod 9 = y mod 9, QED."
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE9 if you are a beginner just solve this problem very sincerely because it is gonna meet you at every step in future."
                    },
                    {
                        "username": "lightning_legend",
                        "content": "![image](https://assets.leetcode.com/users/images/147b2ad0-40d5-4197-b892-1f537855d4f1_1640149655.8064609.png)\\n"
                    }
                ]
            },
            {
                "id": 1874476,
                "content": [
                    {
                        "username": "vetor",
                        "content": "Stop posting answers in discussion \\uD83D\\uDE12"
                    },
                    {
                        "username": "tehpolecat",
                        "content": "wish leetcode would moderate the discussion section, sometimes I want to check it for hints, but I can\\'t because somebody will just post the solution"
                    },
                    {
                        "username": "PrashantUnity",
                        "content": " **Extra Follow up** : Could you post your answer in solution section, not in discussion ?"
                    },
                    {
                        "username": "amancha9161",
                        "content": "\\uD83D\\uDE05"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**If number is divisible by 9 completely then digital root(ans) is 9,else the digital root is remainder obtained.**\\n\\n*P.S-I learnt this beautiful thing today!*"
                    },
                    {
                        "username": "deepu14d",
                        "content": "Same here, I was following the usual normal way for solving this without realizing that we can have that pattern to solve this question in just 1 or 2 lines. "
                    },
                    {
                        "username": "coodeer",
                        "content": "We can find regular pattern by enumerate following case:\\n1=1; 2=2; 3=3; 4=4; 5=5; 6=6; 7=7; 8=8; 9=9;\\n10=1; 11=2; 12=3; 13=4; 14=5; 15=6; 16=7; 17=8; 18=9;\\n19=1; 20=2; 21=3; 22=4; 23=5; 24=6; 25=7; 26=8; 27=9;\\n... ...\\nso, we supposed that the rule is a cycle per 9 number.\\nthe math formulation:\\n(num - 1) % 9 + 1\\n\\nnote: num - 1 is to avoid k*9%9 = 0"
                    },
                    {
                        "username": "payadikishan",
                        "content": "I knew that i should be a pattern based question but didn\\'t knew what\\'s the pattern"
                    },
                    {
                        "username": "dmitryartux",
                        "content": "**That\\'s cool!**"
                    },
                    {
                        "username": "acearth",
                        "content": "The question want we to get digits root.    There is a trick, a digits root of a number is equals to number%9.\\n\\n    def add_digits(num)\\n        num==0 ? 0:(num%9==0 ? 9 : num%9)\\n    end"
                    },
                    {
                        "username": "kylestanfield",
                        "content": "[@vineethchivukula](/vineethchivukula) Find the answer by hand for the first 20 numbers. The pattern emerges. Project Euler has many similar problems."
                    },
                    {
                        "username": "vineethchivukula",
                        "content": "Hey...Where can I know such tricks....like I\\'m speechless "
                    },
                    {
                        "username": "tylerlong",
                        "content": "Answer is `(num - 1) % 9 + 1`\\n\\nIt is a variation of `num % 9` because we don\\'t want `0` as answer. Now I am going to explain why `num % 9` works.\\n\\nif `num >= 10 && num < 20`, we can just caculate it by `num - 9`.  We can verify it manually by enumerating all the numbers that `num >= 10 && num < 20`.\\n\\nif `num >= 20 && num < 30`, we can just caculate it by `num - 9 * 2`.  We can verify it manually by enumerating all the numbers that `num >= 20 && num < 30`.\\n\\n...\\n\\nGiven a number `abcdef`, we can caculate it by `num - 0 * f - 9 * e - 99 * d - 999 * c - 9999 * b - 99999 * a`\\n\\n....\\n\\nAnd we know the equation above is the same as `num % 9` (only difference is it nevers returns `0`)\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 8.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-digits/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Mathematical: Digital Root\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "xdavidliu",
                        "content": "let x be the original number, and let a[i] be the i-th digit, so that x = sum a[i] * 10^i. Let y be the sum of digits, e.g. y = sum a[i]. Note that (10^i) mod 9 = (10 mod 9)^i = 1. Hence, x mod 9 = y mod 9, QED."
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE9 if you are a beginner just solve this problem very sincerely because it is gonna meet you at every step in future."
                    },
                    {
                        "username": "lightning_legend",
                        "content": "![image](https://assets.leetcode.com/users/images/147b2ad0-40d5-4197-b892-1f537855d4f1_1640149655.8064609.png)\\n"
                    }
                ]
            },
            {
                "id": 1576109,
                "content": [
                    {
                        "username": "vetor",
                        "content": "Stop posting answers in discussion \\uD83D\\uDE12"
                    },
                    {
                        "username": "tehpolecat",
                        "content": "wish leetcode would moderate the discussion section, sometimes I want to check it for hints, but I can\\'t because somebody will just post the solution"
                    },
                    {
                        "username": "PrashantUnity",
                        "content": " **Extra Follow up** : Could you post your answer in solution section, not in discussion ?"
                    },
                    {
                        "username": "amancha9161",
                        "content": "\\uD83D\\uDE05"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**If number is divisible by 9 completely then digital root(ans) is 9,else the digital root is remainder obtained.**\\n\\n*P.S-I learnt this beautiful thing today!*"
                    },
                    {
                        "username": "deepu14d",
                        "content": "Same here, I was following the usual normal way for solving this without realizing that we can have that pattern to solve this question in just 1 or 2 lines. "
                    },
                    {
                        "username": "coodeer",
                        "content": "We can find regular pattern by enumerate following case:\\n1=1; 2=2; 3=3; 4=4; 5=5; 6=6; 7=7; 8=8; 9=9;\\n10=1; 11=2; 12=3; 13=4; 14=5; 15=6; 16=7; 17=8; 18=9;\\n19=1; 20=2; 21=3; 22=4; 23=5; 24=6; 25=7; 26=8; 27=9;\\n... ...\\nso, we supposed that the rule is a cycle per 9 number.\\nthe math formulation:\\n(num - 1) % 9 + 1\\n\\nnote: num - 1 is to avoid k*9%9 = 0"
                    },
                    {
                        "username": "payadikishan",
                        "content": "I knew that i should be a pattern based question but didn\\'t knew what\\'s the pattern"
                    },
                    {
                        "username": "dmitryartux",
                        "content": "**That\\'s cool!**"
                    },
                    {
                        "username": "acearth",
                        "content": "The question want we to get digits root.    There is a trick, a digits root of a number is equals to number%9.\\n\\n    def add_digits(num)\\n        num==0 ? 0:(num%9==0 ? 9 : num%9)\\n    end"
                    },
                    {
                        "username": "kylestanfield",
                        "content": "[@vineethchivukula](/vineethchivukula) Find the answer by hand for the first 20 numbers. The pattern emerges. Project Euler has many similar problems."
                    },
                    {
                        "username": "vineethchivukula",
                        "content": "Hey...Where can I know such tricks....like I\\'m speechless "
                    },
                    {
                        "username": "tylerlong",
                        "content": "Answer is `(num - 1) % 9 + 1`\\n\\nIt is a variation of `num % 9` because we don\\'t want `0` as answer. Now I am going to explain why `num % 9` works.\\n\\nif `num >= 10 && num < 20`, we can just caculate it by `num - 9`.  We can verify it manually by enumerating all the numbers that `num >= 10 && num < 20`.\\n\\nif `num >= 20 && num < 30`, we can just caculate it by `num - 9 * 2`.  We can verify it manually by enumerating all the numbers that `num >= 20 && num < 30`.\\n\\n...\\n\\nGiven a number `abcdef`, we can caculate it by `num - 0 * f - 9 * e - 99 * d - 999 * c - 9999 * b - 99999 * a`\\n\\n....\\n\\nAnd we know the equation above is the same as `num % 9` (only difference is it nevers returns `0`)\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 8.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-digits/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Mathematical: Digital Root\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "xdavidliu",
                        "content": "let x be the original number, and let a[i] be the i-th digit, so that x = sum a[i] * 10^i. Let y be the sum of digits, e.g. y = sum a[i]. Note that (10^i) mod 9 = (10 mod 9)^i = 1. Hence, x mod 9 = y mod 9, QED."
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE9 if you are a beginner just solve this problem very sincerely because it is gonna meet you at every step in future."
                    },
                    {
                        "username": "lightning_legend",
                        "content": "![image](https://assets.leetcode.com/users/images/147b2ad0-40d5-4197-b892-1f537855d4f1_1640149655.8064609.png)\\n"
                    }
                ]
            },
            {
                "id": 1874133,
                "content": [
                    {
                        "username": "vetor",
                        "content": "Stop posting answers in discussion \\uD83D\\uDE12"
                    },
                    {
                        "username": "tehpolecat",
                        "content": "wish leetcode would moderate the discussion section, sometimes I want to check it for hints, but I can\\'t because somebody will just post the solution"
                    },
                    {
                        "username": "PrashantUnity",
                        "content": " **Extra Follow up** : Could you post your answer in solution section, not in discussion ?"
                    },
                    {
                        "username": "amancha9161",
                        "content": "\\uD83D\\uDE05"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**If number is divisible by 9 completely then digital root(ans) is 9,else the digital root is remainder obtained.**\\n\\n*P.S-I learnt this beautiful thing today!*"
                    },
                    {
                        "username": "deepu14d",
                        "content": "Same here, I was following the usual normal way for solving this without realizing that we can have that pattern to solve this question in just 1 or 2 lines. "
                    },
                    {
                        "username": "coodeer",
                        "content": "We can find regular pattern by enumerate following case:\\n1=1; 2=2; 3=3; 4=4; 5=5; 6=6; 7=7; 8=8; 9=9;\\n10=1; 11=2; 12=3; 13=4; 14=5; 15=6; 16=7; 17=8; 18=9;\\n19=1; 20=2; 21=3; 22=4; 23=5; 24=6; 25=7; 26=8; 27=9;\\n... ...\\nso, we supposed that the rule is a cycle per 9 number.\\nthe math formulation:\\n(num - 1) % 9 + 1\\n\\nnote: num - 1 is to avoid k*9%9 = 0"
                    },
                    {
                        "username": "payadikishan",
                        "content": "I knew that i should be a pattern based question but didn\\'t knew what\\'s the pattern"
                    },
                    {
                        "username": "dmitryartux",
                        "content": "**That\\'s cool!**"
                    },
                    {
                        "username": "acearth",
                        "content": "The question want we to get digits root.    There is a trick, a digits root of a number is equals to number%9.\\n\\n    def add_digits(num)\\n        num==0 ? 0:(num%9==0 ? 9 : num%9)\\n    end"
                    },
                    {
                        "username": "kylestanfield",
                        "content": "[@vineethchivukula](/vineethchivukula) Find the answer by hand for the first 20 numbers. The pattern emerges. Project Euler has many similar problems."
                    },
                    {
                        "username": "vineethchivukula",
                        "content": "Hey...Where can I know such tricks....like I\\'m speechless "
                    },
                    {
                        "username": "tylerlong",
                        "content": "Answer is `(num - 1) % 9 + 1`\\n\\nIt is a variation of `num % 9` because we don\\'t want `0` as answer. Now I am going to explain why `num % 9` works.\\n\\nif `num >= 10 && num < 20`, we can just caculate it by `num - 9`.  We can verify it manually by enumerating all the numbers that `num >= 10 && num < 20`.\\n\\nif `num >= 20 && num < 30`, we can just caculate it by `num - 9 * 2`.  We can verify it manually by enumerating all the numbers that `num >= 20 && num < 30`.\\n\\n...\\n\\nGiven a number `abcdef`, we can caculate it by `num - 0 * f - 9 * e - 99 * d - 999 * c - 9999 * b - 99999 * a`\\n\\n....\\n\\nAnd we know the equation above is the same as `num % 9` (only difference is it nevers returns `0`)\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 8.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-digits/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Mathematical: Digital Root\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "xdavidliu",
                        "content": "let x be the original number, and let a[i] be the i-th digit, so that x = sum a[i] * 10^i. Let y be the sum of digits, e.g. y = sum a[i]. Note that (10^i) mod 9 = (10 mod 9)^i = 1. Hence, x mod 9 = y mod 9, QED."
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE9 if you are a beginner just solve this problem very sincerely because it is gonna meet you at every step in future."
                    },
                    {
                        "username": "lightning_legend",
                        "content": "![image](https://assets.leetcode.com/users/images/147b2ad0-40d5-4197-b892-1f537855d4f1_1640149655.8064609.png)\\n"
                    }
                ]
            },
            {
                "id": 1874219,
                "content": [
                    {
                        "username": "vetor",
                        "content": "Stop posting answers in discussion \\uD83D\\uDE12"
                    },
                    {
                        "username": "tehpolecat",
                        "content": "wish leetcode would moderate the discussion section, sometimes I want to check it for hints, but I can\\'t because somebody will just post the solution"
                    },
                    {
                        "username": "PrashantUnity",
                        "content": " **Extra Follow up** : Could you post your answer in solution section, not in discussion ?"
                    },
                    {
                        "username": "amancha9161",
                        "content": "\\uD83D\\uDE05"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**If number is divisible by 9 completely then digital root(ans) is 9,else the digital root is remainder obtained.**\\n\\n*P.S-I learnt this beautiful thing today!*"
                    },
                    {
                        "username": "deepu14d",
                        "content": "Same here, I was following the usual normal way for solving this without realizing that we can have that pattern to solve this question in just 1 or 2 lines. "
                    },
                    {
                        "username": "coodeer",
                        "content": "We can find regular pattern by enumerate following case:\\n1=1; 2=2; 3=3; 4=4; 5=5; 6=6; 7=7; 8=8; 9=9;\\n10=1; 11=2; 12=3; 13=4; 14=5; 15=6; 16=7; 17=8; 18=9;\\n19=1; 20=2; 21=3; 22=4; 23=5; 24=6; 25=7; 26=8; 27=9;\\n... ...\\nso, we supposed that the rule is a cycle per 9 number.\\nthe math formulation:\\n(num - 1) % 9 + 1\\n\\nnote: num - 1 is to avoid k*9%9 = 0"
                    },
                    {
                        "username": "payadikishan",
                        "content": "I knew that i should be a pattern based question but didn\\'t knew what\\'s the pattern"
                    },
                    {
                        "username": "dmitryartux",
                        "content": "**That\\'s cool!**"
                    },
                    {
                        "username": "acearth",
                        "content": "The question want we to get digits root.    There is a trick, a digits root of a number is equals to number%9.\\n\\n    def add_digits(num)\\n        num==0 ? 0:(num%9==0 ? 9 : num%9)\\n    end"
                    },
                    {
                        "username": "kylestanfield",
                        "content": "[@vineethchivukula](/vineethchivukula) Find the answer by hand for the first 20 numbers. The pattern emerges. Project Euler has many similar problems."
                    },
                    {
                        "username": "vineethchivukula",
                        "content": "Hey...Where can I know such tricks....like I\\'m speechless "
                    },
                    {
                        "username": "tylerlong",
                        "content": "Answer is `(num - 1) % 9 + 1`\\n\\nIt is a variation of `num % 9` because we don\\'t want `0` as answer. Now I am going to explain why `num % 9` works.\\n\\nif `num >= 10 && num < 20`, we can just caculate it by `num - 9`.  We can verify it manually by enumerating all the numbers that `num >= 10 && num < 20`.\\n\\nif `num >= 20 && num < 30`, we can just caculate it by `num - 9 * 2`.  We can verify it manually by enumerating all the numbers that `num >= 20 && num < 30`.\\n\\n...\\n\\nGiven a number `abcdef`, we can caculate it by `num - 0 * f - 9 * e - 99 * d - 999 * c - 9999 * b - 99999 * a`\\n\\n....\\n\\nAnd we know the equation above is the same as `num % 9` (only difference is it nevers returns `0`)\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 8.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-digits/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Mathematical: Digital Root\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "xdavidliu",
                        "content": "let x be the original number, and let a[i] be the i-th digit, so that x = sum a[i] * 10^i. Let y be the sum of digits, e.g. y = sum a[i]. Note that (10^i) mod 9 = (10 mod 9)^i = 1. Hence, x mod 9 = y mod 9, QED."
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE9 if you are a beginner just solve this problem very sincerely because it is gonna meet you at every step in future."
                    },
                    {
                        "username": "lightning_legend",
                        "content": "![image](https://assets.leetcode.com/users/images/147b2ad0-40d5-4197-b892-1f537855d4f1_1640149655.8064609.png)\\n"
                    }
                ]
            },
            {
                "id": 1574450,
                "content": [
                    {
                        "username": "vetor",
                        "content": "Stop posting answers in discussion \\uD83D\\uDE12"
                    },
                    {
                        "username": "tehpolecat",
                        "content": "wish leetcode would moderate the discussion section, sometimes I want to check it for hints, but I can\\'t because somebody will just post the solution"
                    },
                    {
                        "username": "PrashantUnity",
                        "content": " **Extra Follow up** : Could you post your answer in solution section, not in discussion ?"
                    },
                    {
                        "username": "amancha9161",
                        "content": "\\uD83D\\uDE05"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**If number is divisible by 9 completely then digital root(ans) is 9,else the digital root is remainder obtained.**\\n\\n*P.S-I learnt this beautiful thing today!*"
                    },
                    {
                        "username": "deepu14d",
                        "content": "Same here, I was following the usual normal way for solving this without realizing that we can have that pattern to solve this question in just 1 or 2 lines. "
                    },
                    {
                        "username": "coodeer",
                        "content": "We can find regular pattern by enumerate following case:\\n1=1; 2=2; 3=3; 4=4; 5=5; 6=6; 7=7; 8=8; 9=9;\\n10=1; 11=2; 12=3; 13=4; 14=5; 15=6; 16=7; 17=8; 18=9;\\n19=1; 20=2; 21=3; 22=4; 23=5; 24=6; 25=7; 26=8; 27=9;\\n... ...\\nso, we supposed that the rule is a cycle per 9 number.\\nthe math formulation:\\n(num - 1) % 9 + 1\\n\\nnote: num - 1 is to avoid k*9%9 = 0"
                    },
                    {
                        "username": "payadikishan",
                        "content": "I knew that i should be a pattern based question but didn\\'t knew what\\'s the pattern"
                    },
                    {
                        "username": "dmitryartux",
                        "content": "**That\\'s cool!**"
                    },
                    {
                        "username": "acearth",
                        "content": "The question want we to get digits root.    There is a trick, a digits root of a number is equals to number%9.\\n\\n    def add_digits(num)\\n        num==0 ? 0:(num%9==0 ? 9 : num%9)\\n    end"
                    },
                    {
                        "username": "kylestanfield",
                        "content": "[@vineethchivukula](/vineethchivukula) Find the answer by hand for the first 20 numbers. The pattern emerges. Project Euler has many similar problems."
                    },
                    {
                        "username": "vineethchivukula",
                        "content": "Hey...Where can I know such tricks....like I\\'m speechless "
                    },
                    {
                        "username": "tylerlong",
                        "content": "Answer is `(num - 1) % 9 + 1`\\n\\nIt is a variation of `num % 9` because we don\\'t want `0` as answer. Now I am going to explain why `num % 9` works.\\n\\nif `num >= 10 && num < 20`, we can just caculate it by `num - 9`.  We can verify it manually by enumerating all the numbers that `num >= 10 && num < 20`.\\n\\nif `num >= 20 && num < 30`, we can just caculate it by `num - 9 * 2`.  We can verify it manually by enumerating all the numbers that `num >= 20 && num < 30`.\\n\\n...\\n\\nGiven a number `abcdef`, we can caculate it by `num - 0 * f - 9 * e - 99 * d - 999 * c - 9999 * b - 99999 * a`\\n\\n....\\n\\nAnd we know the equation above is the same as `num % 9` (only difference is it nevers returns `0`)\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 8.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-digits/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Mathematical: Digital Root\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "xdavidliu",
                        "content": "let x be the original number, and let a[i] be the i-th digit, so that x = sum a[i] * 10^i. Let y be the sum of digits, e.g. y = sum a[i]. Note that (10^i) mod 9 = (10 mod 9)^i = 1. Hence, x mod 9 = y mod 9, QED."
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE9 if you are a beginner just solve this problem very sincerely because it is gonna meet you at every step in future."
                    },
                    {
                        "username": "lightning_legend",
                        "content": "![image](https://assets.leetcode.com/users/images/147b2ad0-40d5-4197-b892-1f537855d4f1_1640149655.8064609.png)\\n"
                    }
                ]
            },
            {
                "id": 1569043,
                "content": [
                    {
                        "username": "vetor",
                        "content": "Stop posting answers in discussion \\uD83D\\uDE12"
                    },
                    {
                        "username": "tehpolecat",
                        "content": "wish leetcode would moderate the discussion section, sometimes I want to check it for hints, but I can\\'t because somebody will just post the solution"
                    },
                    {
                        "username": "PrashantUnity",
                        "content": " **Extra Follow up** : Could you post your answer in solution section, not in discussion ?"
                    },
                    {
                        "username": "amancha9161",
                        "content": "\\uD83D\\uDE05"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**If number is divisible by 9 completely then digital root(ans) is 9,else the digital root is remainder obtained.**\\n\\n*P.S-I learnt this beautiful thing today!*"
                    },
                    {
                        "username": "deepu14d",
                        "content": "Same here, I was following the usual normal way for solving this without realizing that we can have that pattern to solve this question in just 1 or 2 lines. "
                    },
                    {
                        "username": "coodeer",
                        "content": "We can find regular pattern by enumerate following case:\\n1=1; 2=2; 3=3; 4=4; 5=5; 6=6; 7=7; 8=8; 9=9;\\n10=1; 11=2; 12=3; 13=4; 14=5; 15=6; 16=7; 17=8; 18=9;\\n19=1; 20=2; 21=3; 22=4; 23=5; 24=6; 25=7; 26=8; 27=9;\\n... ...\\nso, we supposed that the rule is a cycle per 9 number.\\nthe math formulation:\\n(num - 1) % 9 + 1\\n\\nnote: num - 1 is to avoid k*9%9 = 0"
                    },
                    {
                        "username": "payadikishan",
                        "content": "I knew that i should be a pattern based question but didn\\'t knew what\\'s the pattern"
                    },
                    {
                        "username": "dmitryartux",
                        "content": "**That\\'s cool!**"
                    },
                    {
                        "username": "acearth",
                        "content": "The question want we to get digits root.    There is a trick, a digits root of a number is equals to number%9.\\n\\n    def add_digits(num)\\n        num==0 ? 0:(num%9==0 ? 9 : num%9)\\n    end"
                    },
                    {
                        "username": "kylestanfield",
                        "content": "[@vineethchivukula](/vineethchivukula) Find the answer by hand for the first 20 numbers. The pattern emerges. Project Euler has many similar problems."
                    },
                    {
                        "username": "vineethchivukula",
                        "content": "Hey...Where can I know such tricks....like I\\'m speechless "
                    },
                    {
                        "username": "tylerlong",
                        "content": "Answer is `(num - 1) % 9 + 1`\\n\\nIt is a variation of `num % 9` because we don\\'t want `0` as answer. Now I am going to explain why `num % 9` works.\\n\\nif `num >= 10 && num < 20`, we can just caculate it by `num - 9`.  We can verify it manually by enumerating all the numbers that `num >= 10 && num < 20`.\\n\\nif `num >= 20 && num < 30`, we can just caculate it by `num - 9 * 2`.  We can verify it manually by enumerating all the numbers that `num >= 20 && num < 30`.\\n\\n...\\n\\nGiven a number `abcdef`, we can caculate it by `num - 0 * f - 9 * e - 99 * d - 999 * c - 9999 * b - 99999 * a`\\n\\n....\\n\\nAnd we know the equation above is the same as `num % 9` (only difference is it nevers returns `0`)\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 8.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-digits/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Mathematical: Digital Root\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "xdavidliu",
                        "content": "let x be the original number, and let a[i] be the i-th digit, so that x = sum a[i] * 10^i. Let y be the sum of digits, e.g. y = sum a[i]. Note that (10^i) mod 9 = (10 mod 9)^i = 1. Hence, x mod 9 = y mod 9, QED."
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE9 if you are a beginner just solve this problem very sincerely because it is gonna meet you at every step in future."
                    },
                    {
                        "username": "lightning_legend",
                        "content": "![image](https://assets.leetcode.com/users/images/147b2ad0-40d5-4197-b892-1f537855d4f1_1640149655.8064609.png)\\n"
                    }
                ]
            },
            {
                "id": 1566252,
                "content": [
                    {
                        "username": "vetor",
                        "content": "Stop posting answers in discussion \\uD83D\\uDE12"
                    },
                    {
                        "username": "tehpolecat",
                        "content": "wish leetcode would moderate the discussion section, sometimes I want to check it for hints, but I can\\'t because somebody will just post the solution"
                    },
                    {
                        "username": "PrashantUnity",
                        "content": " **Extra Follow up** : Could you post your answer in solution section, not in discussion ?"
                    },
                    {
                        "username": "amancha9161",
                        "content": "\\uD83D\\uDE05"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**If number is divisible by 9 completely then digital root(ans) is 9,else the digital root is remainder obtained.**\\n\\n*P.S-I learnt this beautiful thing today!*"
                    },
                    {
                        "username": "deepu14d",
                        "content": "Same here, I was following the usual normal way for solving this without realizing that we can have that pattern to solve this question in just 1 or 2 lines. "
                    },
                    {
                        "username": "coodeer",
                        "content": "We can find regular pattern by enumerate following case:\\n1=1; 2=2; 3=3; 4=4; 5=5; 6=6; 7=7; 8=8; 9=9;\\n10=1; 11=2; 12=3; 13=4; 14=5; 15=6; 16=7; 17=8; 18=9;\\n19=1; 20=2; 21=3; 22=4; 23=5; 24=6; 25=7; 26=8; 27=9;\\n... ...\\nso, we supposed that the rule is a cycle per 9 number.\\nthe math formulation:\\n(num - 1) % 9 + 1\\n\\nnote: num - 1 is to avoid k*9%9 = 0"
                    },
                    {
                        "username": "payadikishan",
                        "content": "I knew that i should be a pattern based question but didn\\'t knew what\\'s the pattern"
                    },
                    {
                        "username": "dmitryartux",
                        "content": "**That\\'s cool!**"
                    },
                    {
                        "username": "acearth",
                        "content": "The question want we to get digits root.    There is a trick, a digits root of a number is equals to number%9.\\n\\n    def add_digits(num)\\n        num==0 ? 0:(num%9==0 ? 9 : num%9)\\n    end"
                    },
                    {
                        "username": "kylestanfield",
                        "content": "[@vineethchivukula](/vineethchivukula) Find the answer by hand for the first 20 numbers. The pattern emerges. Project Euler has many similar problems."
                    },
                    {
                        "username": "vineethchivukula",
                        "content": "Hey...Where can I know such tricks....like I\\'m speechless "
                    },
                    {
                        "username": "tylerlong",
                        "content": "Answer is `(num - 1) % 9 + 1`\\n\\nIt is a variation of `num % 9` because we don\\'t want `0` as answer. Now I am going to explain why `num % 9` works.\\n\\nif `num >= 10 && num < 20`, we can just caculate it by `num - 9`.  We can verify it manually by enumerating all the numbers that `num >= 10 && num < 20`.\\n\\nif `num >= 20 && num < 30`, we can just caculate it by `num - 9 * 2`.  We can verify it manually by enumerating all the numbers that `num >= 20 && num < 30`.\\n\\n...\\n\\nGiven a number `abcdef`, we can caculate it by `num - 0 * f - 9 * e - 99 * d - 999 * c - 9999 * b - 99999 * a`\\n\\n....\\n\\nAnd we know the equation above is the same as `num % 9` (only difference is it nevers returns `0`)\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 8.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-digits/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Mathematical: Digital Root\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "xdavidliu",
                        "content": "let x be the original number, and let a[i] be the i-th digit, so that x = sum a[i] * 10^i. Let y be the sum of digits, e.g. y = sum a[i]. Note that (10^i) mod 9 = (10 mod 9)^i = 1. Hence, x mod 9 = y mod 9, QED."
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE9 if you are a beginner just solve this problem very sincerely because it is gonna meet you at every step in future."
                    },
                    {
                        "username": "lightning_legend",
                        "content": "![image](https://assets.leetcode.com/users/images/147b2ad0-40d5-4197-b892-1f537855d4f1_1640149655.8064609.png)\\n"
                    }
                ]
            },
            {
                "id": 1568024,
                "content": [
                    {
                        "username": "vetor",
                        "content": "Stop posting answers in discussion \\uD83D\\uDE12"
                    },
                    {
                        "username": "tehpolecat",
                        "content": "wish leetcode would moderate the discussion section, sometimes I want to check it for hints, but I can\\'t because somebody will just post the solution"
                    },
                    {
                        "username": "PrashantUnity",
                        "content": " **Extra Follow up** : Could you post your answer in solution section, not in discussion ?"
                    },
                    {
                        "username": "amancha9161",
                        "content": "\\uD83D\\uDE05"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**If number is divisible by 9 completely then digital root(ans) is 9,else the digital root is remainder obtained.**\\n\\n*P.S-I learnt this beautiful thing today!*"
                    },
                    {
                        "username": "deepu14d",
                        "content": "Same here, I was following the usual normal way for solving this without realizing that we can have that pattern to solve this question in just 1 or 2 lines. "
                    },
                    {
                        "username": "coodeer",
                        "content": "We can find regular pattern by enumerate following case:\\n1=1; 2=2; 3=3; 4=4; 5=5; 6=6; 7=7; 8=8; 9=9;\\n10=1; 11=2; 12=3; 13=4; 14=5; 15=6; 16=7; 17=8; 18=9;\\n19=1; 20=2; 21=3; 22=4; 23=5; 24=6; 25=7; 26=8; 27=9;\\n... ...\\nso, we supposed that the rule is a cycle per 9 number.\\nthe math formulation:\\n(num - 1) % 9 + 1\\n\\nnote: num - 1 is to avoid k*9%9 = 0"
                    },
                    {
                        "username": "payadikishan",
                        "content": "I knew that i should be a pattern based question but didn\\'t knew what\\'s the pattern"
                    },
                    {
                        "username": "dmitryartux",
                        "content": "**That\\'s cool!**"
                    },
                    {
                        "username": "acearth",
                        "content": "The question want we to get digits root.    There is a trick, a digits root of a number is equals to number%9.\\n\\n    def add_digits(num)\\n        num==0 ? 0:(num%9==0 ? 9 : num%9)\\n    end"
                    },
                    {
                        "username": "kylestanfield",
                        "content": "[@vineethchivukula](/vineethchivukula) Find the answer by hand for the first 20 numbers. The pattern emerges. Project Euler has many similar problems."
                    },
                    {
                        "username": "vineethchivukula",
                        "content": "Hey...Where can I know such tricks....like I\\'m speechless "
                    },
                    {
                        "username": "tylerlong",
                        "content": "Answer is `(num - 1) % 9 + 1`\\n\\nIt is a variation of `num % 9` because we don\\'t want `0` as answer. Now I am going to explain why `num % 9` works.\\n\\nif `num >= 10 && num < 20`, we can just caculate it by `num - 9`.  We can verify it manually by enumerating all the numbers that `num >= 10 && num < 20`.\\n\\nif `num >= 20 && num < 30`, we can just caculate it by `num - 9 * 2`.  We can verify it manually by enumerating all the numbers that `num >= 20 && num < 30`.\\n\\n...\\n\\nGiven a number `abcdef`, we can caculate it by `num - 0 * f - 9 * e - 99 * d - 999 * c - 9999 * b - 99999 * a`\\n\\n....\\n\\nAnd we know the equation above is the same as `num % 9` (only difference is it nevers returns `0`)\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 8.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-digits/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Mathematical: Digital Root\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "xdavidliu",
                        "content": "let x be the original number, and let a[i] be the i-th digit, so that x = sum a[i] * 10^i. Let y be the sum of digits, e.g. y = sum a[i]. Note that (10^i) mod 9 = (10 mod 9)^i = 1. Hence, x mod 9 = y mod 9, QED."
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE9 if you are a beginner just solve this problem very sincerely because it is gonna meet you at every step in future."
                    },
                    {
                        "username": "lightning_legend",
                        "content": "![image](https://assets.leetcode.com/users/images/147b2ad0-40d5-4197-b892-1f537855d4f1_1640149655.8064609.png)\\n"
                    }
                ]
            },
            {
                "id": 1565925,
                "content": [
                    {
                        "username": "vetor",
                        "content": "Stop posting answers in discussion \\uD83D\\uDE12"
                    },
                    {
                        "username": "tehpolecat",
                        "content": "wish leetcode would moderate the discussion section, sometimes I want to check it for hints, but I can\\'t because somebody will just post the solution"
                    },
                    {
                        "username": "PrashantUnity",
                        "content": " **Extra Follow up** : Could you post your answer in solution section, not in discussion ?"
                    },
                    {
                        "username": "amancha9161",
                        "content": "\\uD83D\\uDE05"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**If number is divisible by 9 completely then digital root(ans) is 9,else the digital root is remainder obtained.**\\n\\n*P.S-I learnt this beautiful thing today!*"
                    },
                    {
                        "username": "deepu14d",
                        "content": "Same here, I was following the usual normal way for solving this without realizing that we can have that pattern to solve this question in just 1 or 2 lines. "
                    },
                    {
                        "username": "coodeer",
                        "content": "We can find regular pattern by enumerate following case:\\n1=1; 2=2; 3=3; 4=4; 5=5; 6=6; 7=7; 8=8; 9=9;\\n10=1; 11=2; 12=3; 13=4; 14=5; 15=6; 16=7; 17=8; 18=9;\\n19=1; 20=2; 21=3; 22=4; 23=5; 24=6; 25=7; 26=8; 27=9;\\n... ...\\nso, we supposed that the rule is a cycle per 9 number.\\nthe math formulation:\\n(num - 1) % 9 + 1\\n\\nnote: num - 1 is to avoid k*9%9 = 0"
                    },
                    {
                        "username": "payadikishan",
                        "content": "I knew that i should be a pattern based question but didn\\'t knew what\\'s the pattern"
                    },
                    {
                        "username": "dmitryartux",
                        "content": "**That\\'s cool!**"
                    },
                    {
                        "username": "acearth",
                        "content": "The question want we to get digits root.    There is a trick, a digits root of a number is equals to number%9.\\n\\n    def add_digits(num)\\n        num==0 ? 0:(num%9==0 ? 9 : num%9)\\n    end"
                    },
                    {
                        "username": "kylestanfield",
                        "content": "[@vineethchivukula](/vineethchivukula) Find the answer by hand for the first 20 numbers. The pattern emerges. Project Euler has many similar problems."
                    },
                    {
                        "username": "vineethchivukula",
                        "content": "Hey...Where can I know such tricks....like I\\'m speechless "
                    },
                    {
                        "username": "tylerlong",
                        "content": "Answer is `(num - 1) % 9 + 1`\\n\\nIt is a variation of `num % 9` because we don\\'t want `0` as answer. Now I am going to explain why `num % 9` works.\\n\\nif `num >= 10 && num < 20`, we can just caculate it by `num - 9`.  We can verify it manually by enumerating all the numbers that `num >= 10 && num < 20`.\\n\\nif `num >= 20 && num < 30`, we can just caculate it by `num - 9 * 2`.  We can verify it manually by enumerating all the numbers that `num >= 20 && num < 30`.\\n\\n...\\n\\nGiven a number `abcdef`, we can caculate it by `num - 0 * f - 9 * e - 99 * d - 999 * c - 9999 * b - 99999 * a`\\n\\n....\\n\\nAnd we know the equation above is the same as `num % 9` (only difference is it nevers returns `0`)\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 8.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-digits/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Mathematical: Digital Root\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "xdavidliu",
                        "content": "let x be the original number, and let a[i] be the i-th digit, so that x = sum a[i] * 10^i. Let y be the sum of digits, e.g. y = sum a[i]. Note that (10^i) mod 9 = (10 mod 9)^i = 1. Hence, x mod 9 = y mod 9, QED."
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE9 if you are a beginner just solve this problem very sincerely because it is gonna meet you at every step in future."
                    },
                    {
                        "username": "lightning_legend",
                        "content": "![image](https://assets.leetcode.com/users/images/147b2ad0-40d5-4197-b892-1f537855d4f1_1640149655.8064609.png)\\n"
                    }
                ]
            },
            {
                "id": 1569343,
                "content": [
                    {
                        "username": "vetor",
                        "content": "Stop posting answers in discussion \\uD83D\\uDE12"
                    },
                    {
                        "username": "tehpolecat",
                        "content": "wish leetcode would moderate the discussion section, sometimes I want to check it for hints, but I can\\'t because somebody will just post the solution"
                    },
                    {
                        "username": "PrashantUnity",
                        "content": " **Extra Follow up** : Could you post your answer in solution section, not in discussion ?"
                    },
                    {
                        "username": "amancha9161",
                        "content": "\\uD83D\\uDE05"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**If number is divisible by 9 completely then digital root(ans) is 9,else the digital root is remainder obtained.**\\n\\n*P.S-I learnt this beautiful thing today!*"
                    },
                    {
                        "username": "deepu14d",
                        "content": "Same here, I was following the usual normal way for solving this without realizing that we can have that pattern to solve this question in just 1 or 2 lines. "
                    },
                    {
                        "username": "coodeer",
                        "content": "We can find regular pattern by enumerate following case:\\n1=1; 2=2; 3=3; 4=4; 5=5; 6=6; 7=7; 8=8; 9=9;\\n10=1; 11=2; 12=3; 13=4; 14=5; 15=6; 16=7; 17=8; 18=9;\\n19=1; 20=2; 21=3; 22=4; 23=5; 24=6; 25=7; 26=8; 27=9;\\n... ...\\nso, we supposed that the rule is a cycle per 9 number.\\nthe math formulation:\\n(num - 1) % 9 + 1\\n\\nnote: num - 1 is to avoid k*9%9 = 0"
                    },
                    {
                        "username": "payadikishan",
                        "content": "I knew that i should be a pattern based question but didn\\'t knew what\\'s the pattern"
                    },
                    {
                        "username": "dmitryartux",
                        "content": "**That\\'s cool!**"
                    },
                    {
                        "username": "acearth",
                        "content": "The question want we to get digits root.    There is a trick, a digits root of a number is equals to number%9.\\n\\n    def add_digits(num)\\n        num==0 ? 0:(num%9==0 ? 9 : num%9)\\n    end"
                    },
                    {
                        "username": "kylestanfield",
                        "content": "[@vineethchivukula](/vineethchivukula) Find the answer by hand for the first 20 numbers. The pattern emerges. Project Euler has many similar problems."
                    },
                    {
                        "username": "vineethchivukula",
                        "content": "Hey...Where can I know such tricks....like I\\'m speechless "
                    },
                    {
                        "username": "tylerlong",
                        "content": "Answer is `(num - 1) % 9 + 1`\\n\\nIt is a variation of `num % 9` because we don\\'t want `0` as answer. Now I am going to explain why `num % 9` works.\\n\\nif `num >= 10 && num < 20`, we can just caculate it by `num - 9`.  We can verify it manually by enumerating all the numbers that `num >= 10 && num < 20`.\\n\\nif `num >= 20 && num < 30`, we can just caculate it by `num - 9 * 2`.  We can verify it manually by enumerating all the numbers that `num >= 20 && num < 30`.\\n\\n...\\n\\nGiven a number `abcdef`, we can caculate it by `num - 0 * f - 9 * e - 99 * d - 999 * c - 9999 * b - 99999 * a`\\n\\n....\\n\\nAnd we know the equation above is the same as `num % 9` (only difference is it nevers returns `0`)\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 8.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-digits/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Mathematical: Digital Root\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "xdavidliu",
                        "content": "let x be the original number, and let a[i] be the i-th digit, so that x = sum a[i] * 10^i. Let y be the sum of digits, e.g. y = sum a[i]. Note that (10^i) mod 9 = (10 mod 9)^i = 1. Hence, x mod 9 = y mod 9, QED."
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE9 if you are a beginner just solve this problem very sincerely because it is gonna meet you at every step in future."
                    },
                    {
                        "username": "lightning_legend",
                        "content": "![image](https://assets.leetcode.com/users/images/147b2ad0-40d5-4197-b892-1f537855d4f1_1640149655.8064609.png)\\n"
                    }
                ]
            },
            {
                "id": 1874476,
                "content": [
                    {
                        "username": "vetor",
                        "content": "Stop posting answers in discussion \\uD83D\\uDE12"
                    },
                    {
                        "username": "tehpolecat",
                        "content": "wish leetcode would moderate the discussion section, sometimes I want to check it for hints, but I can\\'t because somebody will just post the solution"
                    },
                    {
                        "username": "PrashantUnity",
                        "content": " **Extra Follow up** : Could you post your answer in solution section, not in discussion ?"
                    },
                    {
                        "username": "amancha9161",
                        "content": "\\uD83D\\uDE05"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**If number is divisible by 9 completely then digital root(ans) is 9,else the digital root is remainder obtained.**\\n\\n*P.S-I learnt this beautiful thing today!*"
                    },
                    {
                        "username": "deepu14d",
                        "content": "Same here, I was following the usual normal way for solving this without realizing that we can have that pattern to solve this question in just 1 or 2 lines. "
                    },
                    {
                        "username": "coodeer",
                        "content": "We can find regular pattern by enumerate following case:\\n1=1; 2=2; 3=3; 4=4; 5=5; 6=6; 7=7; 8=8; 9=9;\\n10=1; 11=2; 12=3; 13=4; 14=5; 15=6; 16=7; 17=8; 18=9;\\n19=1; 20=2; 21=3; 22=4; 23=5; 24=6; 25=7; 26=8; 27=9;\\n... ...\\nso, we supposed that the rule is a cycle per 9 number.\\nthe math formulation:\\n(num - 1) % 9 + 1\\n\\nnote: num - 1 is to avoid k*9%9 = 0"
                    },
                    {
                        "username": "payadikishan",
                        "content": "I knew that i should be a pattern based question but didn\\'t knew what\\'s the pattern"
                    },
                    {
                        "username": "dmitryartux",
                        "content": "**That\\'s cool!**"
                    },
                    {
                        "username": "acearth",
                        "content": "The question want we to get digits root.    There is a trick, a digits root of a number is equals to number%9.\\n\\n    def add_digits(num)\\n        num==0 ? 0:(num%9==0 ? 9 : num%9)\\n    end"
                    },
                    {
                        "username": "kylestanfield",
                        "content": "[@vineethchivukula](/vineethchivukula) Find the answer by hand for the first 20 numbers. The pattern emerges. Project Euler has many similar problems."
                    },
                    {
                        "username": "vineethchivukula",
                        "content": "Hey...Where can I know such tricks....like I\\'m speechless "
                    },
                    {
                        "username": "tylerlong",
                        "content": "Answer is `(num - 1) % 9 + 1`\\n\\nIt is a variation of `num % 9` because we don\\'t want `0` as answer. Now I am going to explain why `num % 9` works.\\n\\nif `num >= 10 && num < 20`, we can just caculate it by `num - 9`.  We can verify it manually by enumerating all the numbers that `num >= 10 && num < 20`.\\n\\nif `num >= 20 && num < 30`, we can just caculate it by `num - 9 * 2`.  We can verify it manually by enumerating all the numbers that `num >= 20 && num < 30`.\\n\\n...\\n\\nGiven a number `abcdef`, we can caculate it by `num - 0 * f - 9 * e - 99 * d - 999 * c - 9999 * b - 99999 * a`\\n\\n....\\n\\nAnd we know the equation above is the same as `num % 9` (only difference is it nevers returns `0`)\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 8.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-digits/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Mathematical: Digital Root\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "xdavidliu",
                        "content": "let x be the original number, and let a[i] be the i-th digit, so that x = sum a[i] * 10^i. Let y be the sum of digits, e.g. y = sum a[i]. Note that (10^i) mod 9 = (10 mod 9)^i = 1. Hence, x mod 9 = y mod 9, QED."
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE9 if you are a beginner just solve this problem very sincerely because it is gonna meet you at every step in future."
                    },
                    {
                        "username": "lightning_legend",
                        "content": "![image](https://assets.leetcode.com/users/images/147b2ad0-40d5-4197-b892-1f537855d4f1_1640149655.8064609.png)\\n"
                    }
                ]
            },
            {
                "id": 1576109,
                "content": [
                    {
                        "username": "vetor",
                        "content": "Stop posting answers in discussion \\uD83D\\uDE12"
                    },
                    {
                        "username": "tehpolecat",
                        "content": "wish leetcode would moderate the discussion section, sometimes I want to check it for hints, but I can\\'t because somebody will just post the solution"
                    },
                    {
                        "username": "PrashantUnity",
                        "content": " **Extra Follow up** : Could you post your answer in solution section, not in discussion ?"
                    },
                    {
                        "username": "amancha9161",
                        "content": "\\uD83D\\uDE05"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**If number is divisible by 9 completely then digital root(ans) is 9,else the digital root is remainder obtained.**\\n\\n*P.S-I learnt this beautiful thing today!*"
                    },
                    {
                        "username": "deepu14d",
                        "content": "Same here, I was following the usual normal way for solving this without realizing that we can have that pattern to solve this question in just 1 or 2 lines. "
                    },
                    {
                        "username": "coodeer",
                        "content": "We can find regular pattern by enumerate following case:\\n1=1; 2=2; 3=3; 4=4; 5=5; 6=6; 7=7; 8=8; 9=9;\\n10=1; 11=2; 12=3; 13=4; 14=5; 15=6; 16=7; 17=8; 18=9;\\n19=1; 20=2; 21=3; 22=4; 23=5; 24=6; 25=7; 26=8; 27=9;\\n... ...\\nso, we supposed that the rule is a cycle per 9 number.\\nthe math formulation:\\n(num - 1) % 9 + 1\\n\\nnote: num - 1 is to avoid k*9%9 = 0"
                    },
                    {
                        "username": "payadikishan",
                        "content": "I knew that i should be a pattern based question but didn\\'t knew what\\'s the pattern"
                    },
                    {
                        "username": "dmitryartux",
                        "content": "**That\\'s cool!**"
                    },
                    {
                        "username": "acearth",
                        "content": "The question want we to get digits root.    There is a trick, a digits root of a number is equals to number%9.\\n\\n    def add_digits(num)\\n        num==0 ? 0:(num%9==0 ? 9 : num%9)\\n    end"
                    },
                    {
                        "username": "kylestanfield",
                        "content": "[@vineethchivukula](/vineethchivukula) Find the answer by hand for the first 20 numbers. The pattern emerges. Project Euler has many similar problems."
                    },
                    {
                        "username": "vineethchivukula",
                        "content": "Hey...Where can I know such tricks....like I\\'m speechless "
                    },
                    {
                        "username": "tylerlong",
                        "content": "Answer is `(num - 1) % 9 + 1`\\n\\nIt is a variation of `num % 9` because we don\\'t want `0` as answer. Now I am going to explain why `num % 9` works.\\n\\nif `num >= 10 && num < 20`, we can just caculate it by `num - 9`.  We can verify it manually by enumerating all the numbers that `num >= 10 && num < 20`.\\n\\nif `num >= 20 && num < 30`, we can just caculate it by `num - 9 * 2`.  We can verify it manually by enumerating all the numbers that `num >= 20 && num < 30`.\\n\\n...\\n\\nGiven a number `abcdef`, we can caculate it by `num - 0 * f - 9 * e - 99 * d - 999 * c - 9999 * b - 99999 * a`\\n\\n....\\n\\nAnd we know the equation above is the same as `num % 9` (only difference is it nevers returns `0`)\\n"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 8.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-digits/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Mathematical: Digital Root\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "xdavidliu",
                        "content": "let x be the original number, and let a[i] be the i-th digit, so that x = sum a[i] * 10^i. Let y be the sum of digits, e.g. y = sum a[i]. Note that (10^i) mod 9 = (10 mod 9)^i = 1. Hence, x mod 9 = y mod 9, QED."
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE9 if you are a beginner just solve this problem very sincerely because it is gonna meet you at every step in future."
                    },
                    {
                        "username": "lightning_legend",
                        "content": "![image](https://assets.leetcode.com/users/images/147b2ad0-40d5-4197-b892-1f537855d4f1_1640149655.8064609.png)\\n"
                    }
                ]
            },
            {
                "id": 1977790,
                "content": [
                    {
                        "username": "aidanchill",
                        "content": "Hint #1: \"A naive implementation of the above process is trivial. Could you come up with other methods?\"\\n\\nThis is not a hint. All this accomplishes is belittling anyone who is stuck on the naive implementation."
                    },
                    {
                        "username": "4georges7",
                        "content": "testcase 221 is broken\\n"
                    },
                    {
                        "username": "Aytekin1455",
                        "content": "55 broken too :("
                    },
                    {
                        "username": "saadalyah",
                        "content": "Two years ago, I was asked this question in an SDE interview at Amazon, and to this day, I haven\\'t been able to figure it out on my own without knowing the answer or receiving any hints.\\n\\nI find it unfair when interview questions are heavily weighted towards testing whether the optimal solution \"CLICKS\" in your mind, rather than your programming skills. In my opinion, the ideal balance would be 35% focused on the idea and 65% on programming skills, since it can be frustrating to face these types of questions in an interview setting"
                    },
                    {
                        "username": "saadalyah",
                        "content": "[@Minatokun](/Minatokun) \\nThe interviewer didn\\'t ask directly for O(1) solution, but she asked if I could enhance the code where I didn\\'t, note that there was another question for the same interview.\\nWhoever I was moved to the second round \"Bar raiser.\""
                    },
                    {
                        "username": "Minatokun",
                        "content": "can you explain more about it. Whats the solution they were looking for? i solved using the recursion one. Were the asking for the O(1) solution?"
                    },
                    {
                        "username": "GowthamiPediredla",
                        "content": "var addDigits = function(num) {\\n    if(num<=9) return num\\n return num%9===0?9:num%9\\n};\\n\\nAny number divided by 9 always gives sum of all the digits or 0( which means it is a multiple of 9, which would give 9 on adding the digits) as reminder"
                    },
                    {
                        "username": "mukadas026",
                        "content": "can you please explain your solution a bit more, I\\'m finding it hard to understand"
                    },
                    {
                        "username": "qiaojianjun",
                        "content": "\\'\\'\\'\\nreturn reduce(lambda x,y:x + y if x +y<10 else (x + y)%10 + 1,[int(i) for i in str(num)])\\n\\'\\'\\'"
                    },
                    {
                        "username": "penguinshin",
                        "content": "Y\\'all have seen enough solutions of the O(1) solution. For those who would like an explanation of why this works, consider the following:\\n\\nLet N be a base-10 representation of an integer, say it has 3 digits: a,b,c.\\n\\nThen, N = 10^2 *a + 10^1 *b + 10^0 * c\\n\\nWe can rewrite this as N = (9 + 1)^2 * a + (9 + 1)^1 * b + c\\n\\nIf we expand all terms in this expression, we find that we can rewrite our sum to be N = 9*M + a + b + c.\\n\\nTaking this expression mod 9, we get that N % 9 =( 9*M) % 9 + (a + b + c) % 9 = 0 + (a + b + c) % 9 = (a + b + c)  %9. So we just showed equivalence of our original number N, and the sum of its digits, a + b + c modulo 9. Now let N = a + b + c. We can rewrite this number in base-10, and assign new coefficients c, d, e (although c will be 0 since the sum of the digits of a three digit number will be at most 2 digits). And we can repeat the process until we find that the ultimate value, the repeated sum of digits, has the same value as our original number modulo 9. \\n\\nNow, one caveat is that the sum of the digits will never be 0, but if the modulo results in a 0, then we know the ultimate repeated sum must be 9. \\n\\n\\n"
                    },
                    {
                        "username": "AKASH_PATTANAYAK_123_coder",
                        "content": "![image](https://assets.leetcode.com/users/images/03f31a2d-4bd5-41e5-976b-69fef4c15bc2_1638173762.5167644.png)\\n"
                    },
                    {
                        "username": "shreyans800755",
                        "content": "If num == 0 -> ans = 0\n\nIf num % 9 == 0 -> ans = 9\n\nIf num % 9 != 0 ->\nnum = nearest multiple of 9 which is less than num + (num % 9)\nSo, ans = (9 + (num % 9)) % 10\nHere, 9 + (num % 9) will always be 2 digit number. (because num % 9 != 0)\nFirst digit will always be 1. And 2nd will be (num % 9) - 1\nSo, sum = (num % 9)\n\nCode:\nif(num == 0)\n\t\treturn 0;\nif(num % 9 == 0)\n\t\treturn 9;\nreturn num % 9;"
                    },
                    {
                        "username": "bookshadow",
                        "content": "0 / 1101 test cases passed.\\n\\nInput:\\n0\\nOutput:\\n0\\nExpected:\\n0"
                    },
                    {
                        "username": "NewbieAI",
                        "content": "\\n\\n\\n\\treturn (num-1)%9 +1 if num else 0\\n"
                    }
                ]
            },
            {
                "id": 1874800,
                "content": [
                    {
                        "username": "aidanchill",
                        "content": "Hint #1: \"A naive implementation of the above process is trivial. Could you come up with other methods?\"\\n\\nThis is not a hint. All this accomplishes is belittling anyone who is stuck on the naive implementation."
                    },
                    {
                        "username": "4georges7",
                        "content": "testcase 221 is broken\\n"
                    },
                    {
                        "username": "Aytekin1455",
                        "content": "55 broken too :("
                    },
                    {
                        "username": "saadalyah",
                        "content": "Two years ago, I was asked this question in an SDE interview at Amazon, and to this day, I haven\\'t been able to figure it out on my own without knowing the answer or receiving any hints.\\n\\nI find it unfair when interview questions are heavily weighted towards testing whether the optimal solution \"CLICKS\" in your mind, rather than your programming skills. In my opinion, the ideal balance would be 35% focused on the idea and 65% on programming skills, since it can be frustrating to face these types of questions in an interview setting"
                    },
                    {
                        "username": "saadalyah",
                        "content": "[@Minatokun](/Minatokun) \\nThe interviewer didn\\'t ask directly for O(1) solution, but she asked if I could enhance the code where I didn\\'t, note that there was another question for the same interview.\\nWhoever I was moved to the second round \"Bar raiser.\""
                    },
                    {
                        "username": "Minatokun",
                        "content": "can you explain more about it. Whats the solution they were looking for? i solved using the recursion one. Were the asking for the O(1) solution?"
                    },
                    {
                        "username": "GowthamiPediredla",
                        "content": "var addDigits = function(num) {\\n    if(num<=9) return num\\n return num%9===0?9:num%9\\n};\\n\\nAny number divided by 9 always gives sum of all the digits or 0( which means it is a multiple of 9, which would give 9 on adding the digits) as reminder"
                    },
                    {
                        "username": "mukadas026",
                        "content": "can you please explain your solution a bit more, I\\'m finding it hard to understand"
                    },
                    {
                        "username": "qiaojianjun",
                        "content": "\\'\\'\\'\\nreturn reduce(lambda x,y:x + y if x +y<10 else (x + y)%10 + 1,[int(i) for i in str(num)])\\n\\'\\'\\'"
                    },
                    {
                        "username": "penguinshin",
                        "content": "Y\\'all have seen enough solutions of the O(1) solution. For those who would like an explanation of why this works, consider the following:\\n\\nLet N be a base-10 representation of an integer, say it has 3 digits: a,b,c.\\n\\nThen, N = 10^2 *a + 10^1 *b + 10^0 * c\\n\\nWe can rewrite this as N = (9 + 1)^2 * a + (9 + 1)^1 * b + c\\n\\nIf we expand all terms in this expression, we find that we can rewrite our sum to be N = 9*M + a + b + c.\\n\\nTaking this expression mod 9, we get that N % 9 =( 9*M) % 9 + (a + b + c) % 9 = 0 + (a + b + c) % 9 = (a + b + c)  %9. So we just showed equivalence of our original number N, and the sum of its digits, a + b + c modulo 9. Now let N = a + b + c. We can rewrite this number in base-10, and assign new coefficients c, d, e (although c will be 0 since the sum of the digits of a three digit number will be at most 2 digits). And we can repeat the process until we find that the ultimate value, the repeated sum of digits, has the same value as our original number modulo 9. \\n\\nNow, one caveat is that the sum of the digits will never be 0, but if the modulo results in a 0, then we know the ultimate repeated sum must be 9. \\n\\n\\n"
                    },
                    {
                        "username": "AKASH_PATTANAYAK_123_coder",
                        "content": "![image](https://assets.leetcode.com/users/images/03f31a2d-4bd5-41e5-976b-69fef4c15bc2_1638173762.5167644.png)\\n"
                    },
                    {
                        "username": "shreyans800755",
                        "content": "If num == 0 -> ans = 0\n\nIf num % 9 == 0 -> ans = 9\n\nIf num % 9 != 0 ->\nnum = nearest multiple of 9 which is less than num + (num % 9)\nSo, ans = (9 + (num % 9)) % 10\nHere, 9 + (num % 9) will always be 2 digit number. (because num % 9 != 0)\nFirst digit will always be 1. And 2nd will be (num % 9) - 1\nSo, sum = (num % 9)\n\nCode:\nif(num == 0)\n\t\treturn 0;\nif(num % 9 == 0)\n\t\treturn 9;\nreturn num % 9;"
                    },
                    {
                        "username": "bookshadow",
                        "content": "0 / 1101 test cases passed.\\n\\nInput:\\n0\\nOutput:\\n0\\nExpected:\\n0"
                    },
                    {
                        "username": "NewbieAI",
                        "content": "\\n\\n\\n\\treturn (num-1)%9 +1 if num else 0\\n"
                    }
                ]
            },
            {
                "id": 1874303,
                "content": [
                    {
                        "username": "aidanchill",
                        "content": "Hint #1: \"A naive implementation of the above process is trivial. Could you come up with other methods?\"\\n\\nThis is not a hint. All this accomplishes is belittling anyone who is stuck on the naive implementation."
                    },
                    {
                        "username": "4georges7",
                        "content": "testcase 221 is broken\\n"
                    },
                    {
                        "username": "Aytekin1455",
                        "content": "55 broken too :("
                    },
                    {
                        "username": "saadalyah",
                        "content": "Two years ago, I was asked this question in an SDE interview at Amazon, and to this day, I haven\\'t been able to figure it out on my own without knowing the answer or receiving any hints.\\n\\nI find it unfair when interview questions are heavily weighted towards testing whether the optimal solution \"CLICKS\" in your mind, rather than your programming skills. In my opinion, the ideal balance would be 35% focused on the idea and 65% on programming skills, since it can be frustrating to face these types of questions in an interview setting"
                    },
                    {
                        "username": "saadalyah",
                        "content": "[@Minatokun](/Minatokun) \\nThe interviewer didn\\'t ask directly for O(1) solution, but she asked if I could enhance the code where I didn\\'t, note that there was another question for the same interview.\\nWhoever I was moved to the second round \"Bar raiser.\""
                    },
                    {
                        "username": "Minatokun",
                        "content": "can you explain more about it. Whats the solution they were looking for? i solved using the recursion one. Were the asking for the O(1) solution?"
                    },
                    {
                        "username": "GowthamiPediredla",
                        "content": "var addDigits = function(num) {\\n    if(num<=9) return num\\n return num%9===0?9:num%9\\n};\\n\\nAny number divided by 9 always gives sum of all the digits or 0( which means it is a multiple of 9, which would give 9 on adding the digits) as reminder"
                    },
                    {
                        "username": "mukadas026",
                        "content": "can you please explain your solution a bit more, I\\'m finding it hard to understand"
                    },
                    {
                        "username": "qiaojianjun",
                        "content": "\\'\\'\\'\\nreturn reduce(lambda x,y:x + y if x +y<10 else (x + y)%10 + 1,[int(i) for i in str(num)])\\n\\'\\'\\'"
                    },
                    {
                        "username": "penguinshin",
                        "content": "Y\\'all have seen enough solutions of the O(1) solution. For those who would like an explanation of why this works, consider the following:\\n\\nLet N be a base-10 representation of an integer, say it has 3 digits: a,b,c.\\n\\nThen, N = 10^2 *a + 10^1 *b + 10^0 * c\\n\\nWe can rewrite this as N = (9 + 1)^2 * a + (9 + 1)^1 * b + c\\n\\nIf we expand all terms in this expression, we find that we can rewrite our sum to be N = 9*M + a + b + c.\\n\\nTaking this expression mod 9, we get that N % 9 =( 9*M) % 9 + (a + b + c) % 9 = 0 + (a + b + c) % 9 = (a + b + c)  %9. So we just showed equivalence of our original number N, and the sum of its digits, a + b + c modulo 9. Now let N = a + b + c. We can rewrite this number in base-10, and assign new coefficients c, d, e (although c will be 0 since the sum of the digits of a three digit number will be at most 2 digits). And we can repeat the process until we find that the ultimate value, the repeated sum of digits, has the same value as our original number modulo 9. \\n\\nNow, one caveat is that the sum of the digits will never be 0, but if the modulo results in a 0, then we know the ultimate repeated sum must be 9. \\n\\n\\n"
                    },
                    {
                        "username": "AKASH_PATTANAYAK_123_coder",
                        "content": "![image](https://assets.leetcode.com/users/images/03f31a2d-4bd5-41e5-976b-69fef4c15bc2_1638173762.5167644.png)\\n"
                    },
                    {
                        "username": "shreyans800755",
                        "content": "If num == 0 -> ans = 0\n\nIf num % 9 == 0 -> ans = 9\n\nIf num % 9 != 0 ->\nnum = nearest multiple of 9 which is less than num + (num % 9)\nSo, ans = (9 + (num % 9)) % 10\nHere, 9 + (num % 9) will always be 2 digit number. (because num % 9 != 0)\nFirst digit will always be 1. And 2nd will be (num % 9) - 1\nSo, sum = (num % 9)\n\nCode:\nif(num == 0)\n\t\treturn 0;\nif(num % 9 == 0)\n\t\treturn 9;\nreturn num % 9;"
                    },
                    {
                        "username": "bookshadow",
                        "content": "0 / 1101 test cases passed.\\n\\nInput:\\n0\\nOutput:\\n0\\nExpected:\\n0"
                    },
                    {
                        "username": "NewbieAI",
                        "content": "\\n\\n\\n\\treturn (num-1)%9 +1 if num else 0\\n"
                    }
                ]
            },
            {
                "id": 1576355,
                "content": [
                    {
                        "username": "aidanchill",
                        "content": "Hint #1: \"A naive implementation of the above process is trivial. Could you come up with other methods?\"\\n\\nThis is not a hint. All this accomplishes is belittling anyone who is stuck on the naive implementation."
                    },
                    {
                        "username": "4georges7",
                        "content": "testcase 221 is broken\\n"
                    },
                    {
                        "username": "Aytekin1455",
                        "content": "55 broken too :("
                    },
                    {
                        "username": "saadalyah",
                        "content": "Two years ago, I was asked this question in an SDE interview at Amazon, and to this day, I haven\\'t been able to figure it out on my own without knowing the answer or receiving any hints.\\n\\nI find it unfair when interview questions are heavily weighted towards testing whether the optimal solution \"CLICKS\" in your mind, rather than your programming skills. In my opinion, the ideal balance would be 35% focused on the idea and 65% on programming skills, since it can be frustrating to face these types of questions in an interview setting"
                    },
                    {
                        "username": "saadalyah",
                        "content": "[@Minatokun](/Minatokun) \\nThe interviewer didn\\'t ask directly for O(1) solution, but she asked if I could enhance the code where I didn\\'t, note that there was another question for the same interview.\\nWhoever I was moved to the second round \"Bar raiser.\""
                    },
                    {
                        "username": "Minatokun",
                        "content": "can you explain more about it. Whats the solution they were looking for? i solved using the recursion one. Were the asking for the O(1) solution?"
                    },
                    {
                        "username": "GowthamiPediredla",
                        "content": "var addDigits = function(num) {\\n    if(num<=9) return num\\n return num%9===0?9:num%9\\n};\\n\\nAny number divided by 9 always gives sum of all the digits or 0( which means it is a multiple of 9, which would give 9 on adding the digits) as reminder"
                    },
                    {
                        "username": "mukadas026",
                        "content": "can you please explain your solution a bit more, I\\'m finding it hard to understand"
                    },
                    {
                        "username": "qiaojianjun",
                        "content": "\\'\\'\\'\\nreturn reduce(lambda x,y:x + y if x +y<10 else (x + y)%10 + 1,[int(i) for i in str(num)])\\n\\'\\'\\'"
                    },
                    {
                        "username": "penguinshin",
                        "content": "Y\\'all have seen enough solutions of the O(1) solution. For those who would like an explanation of why this works, consider the following:\\n\\nLet N be a base-10 representation of an integer, say it has 3 digits: a,b,c.\\n\\nThen, N = 10^2 *a + 10^1 *b + 10^0 * c\\n\\nWe can rewrite this as N = (9 + 1)^2 * a + (9 + 1)^1 * b + c\\n\\nIf we expand all terms in this expression, we find that we can rewrite our sum to be N = 9*M + a + b + c.\\n\\nTaking this expression mod 9, we get that N % 9 =( 9*M) % 9 + (a + b + c) % 9 = 0 + (a + b + c) % 9 = (a + b + c)  %9. So we just showed equivalence of our original number N, and the sum of its digits, a + b + c modulo 9. Now let N = a + b + c. We can rewrite this number in base-10, and assign new coefficients c, d, e (although c will be 0 since the sum of the digits of a three digit number will be at most 2 digits). And we can repeat the process until we find that the ultimate value, the repeated sum of digits, has the same value as our original number modulo 9. \\n\\nNow, one caveat is that the sum of the digits will never be 0, but if the modulo results in a 0, then we know the ultimate repeated sum must be 9. \\n\\n\\n"
                    },
                    {
                        "username": "AKASH_PATTANAYAK_123_coder",
                        "content": "![image](https://assets.leetcode.com/users/images/03f31a2d-4bd5-41e5-976b-69fef4c15bc2_1638173762.5167644.png)\\n"
                    },
                    {
                        "username": "shreyans800755",
                        "content": "If num == 0 -> ans = 0\n\nIf num % 9 == 0 -> ans = 9\n\nIf num % 9 != 0 ->\nnum = nearest multiple of 9 which is less than num + (num % 9)\nSo, ans = (9 + (num % 9)) % 10\nHere, 9 + (num % 9) will always be 2 digit number. (because num % 9 != 0)\nFirst digit will always be 1. And 2nd will be (num % 9) - 1\nSo, sum = (num % 9)\n\nCode:\nif(num == 0)\n\t\treturn 0;\nif(num % 9 == 0)\n\t\treturn 9;\nreturn num % 9;"
                    },
                    {
                        "username": "bookshadow",
                        "content": "0 / 1101 test cases passed.\\n\\nInput:\\n0\\nOutput:\\n0\\nExpected:\\n0"
                    },
                    {
                        "username": "NewbieAI",
                        "content": "\\n\\n\\n\\treturn (num-1)%9 +1 if num else 0\\n"
                    }
                ]
            },
            {
                "id": 1574017,
                "content": [
                    {
                        "username": "aidanchill",
                        "content": "Hint #1: \"A naive implementation of the above process is trivial. Could you come up with other methods?\"\\n\\nThis is not a hint. All this accomplishes is belittling anyone who is stuck on the naive implementation."
                    },
                    {
                        "username": "4georges7",
                        "content": "testcase 221 is broken\\n"
                    },
                    {
                        "username": "Aytekin1455",
                        "content": "55 broken too :("
                    },
                    {
                        "username": "saadalyah",
                        "content": "Two years ago, I was asked this question in an SDE interview at Amazon, and to this day, I haven\\'t been able to figure it out on my own without knowing the answer or receiving any hints.\\n\\nI find it unfair when interview questions are heavily weighted towards testing whether the optimal solution \"CLICKS\" in your mind, rather than your programming skills. In my opinion, the ideal balance would be 35% focused on the idea and 65% on programming skills, since it can be frustrating to face these types of questions in an interview setting"
                    },
                    {
                        "username": "saadalyah",
                        "content": "[@Minatokun](/Minatokun) \\nThe interviewer didn\\'t ask directly for O(1) solution, but she asked if I could enhance the code where I didn\\'t, note that there was another question for the same interview.\\nWhoever I was moved to the second round \"Bar raiser.\""
                    },
                    {
                        "username": "Minatokun",
                        "content": "can you explain more about it. Whats the solution they were looking for? i solved using the recursion one. Were the asking for the O(1) solution?"
                    },
                    {
                        "username": "GowthamiPediredla",
                        "content": "var addDigits = function(num) {\\n    if(num<=9) return num\\n return num%9===0?9:num%9\\n};\\n\\nAny number divided by 9 always gives sum of all the digits or 0( which means it is a multiple of 9, which would give 9 on adding the digits) as reminder"
                    },
                    {
                        "username": "mukadas026",
                        "content": "can you please explain your solution a bit more, I\\'m finding it hard to understand"
                    },
                    {
                        "username": "qiaojianjun",
                        "content": "\\'\\'\\'\\nreturn reduce(lambda x,y:x + y if x +y<10 else (x + y)%10 + 1,[int(i) for i in str(num)])\\n\\'\\'\\'"
                    },
                    {
                        "username": "penguinshin",
                        "content": "Y\\'all have seen enough solutions of the O(1) solution. For those who would like an explanation of why this works, consider the following:\\n\\nLet N be a base-10 representation of an integer, say it has 3 digits: a,b,c.\\n\\nThen, N = 10^2 *a + 10^1 *b + 10^0 * c\\n\\nWe can rewrite this as N = (9 + 1)^2 * a + (9 + 1)^1 * b + c\\n\\nIf we expand all terms in this expression, we find that we can rewrite our sum to be N = 9*M + a + b + c.\\n\\nTaking this expression mod 9, we get that N % 9 =( 9*M) % 9 + (a + b + c) % 9 = 0 + (a + b + c) % 9 = (a + b + c)  %9. So we just showed equivalence of our original number N, and the sum of its digits, a + b + c modulo 9. Now let N = a + b + c. We can rewrite this number in base-10, and assign new coefficients c, d, e (although c will be 0 since the sum of the digits of a three digit number will be at most 2 digits). And we can repeat the process until we find that the ultimate value, the repeated sum of digits, has the same value as our original number modulo 9. \\n\\nNow, one caveat is that the sum of the digits will never be 0, but if the modulo results in a 0, then we know the ultimate repeated sum must be 9. \\n\\n\\n"
                    },
                    {
                        "username": "AKASH_PATTANAYAK_123_coder",
                        "content": "![image](https://assets.leetcode.com/users/images/03f31a2d-4bd5-41e5-976b-69fef4c15bc2_1638173762.5167644.png)\\n"
                    },
                    {
                        "username": "shreyans800755",
                        "content": "If num == 0 -> ans = 0\n\nIf num % 9 == 0 -> ans = 9\n\nIf num % 9 != 0 ->\nnum = nearest multiple of 9 which is less than num + (num % 9)\nSo, ans = (9 + (num % 9)) % 10\nHere, 9 + (num % 9) will always be 2 digit number. (because num % 9 != 0)\nFirst digit will always be 1. And 2nd will be (num % 9) - 1\nSo, sum = (num % 9)\n\nCode:\nif(num == 0)\n\t\treturn 0;\nif(num % 9 == 0)\n\t\treturn 9;\nreturn num % 9;"
                    },
                    {
                        "username": "bookshadow",
                        "content": "0 / 1101 test cases passed.\\n\\nInput:\\n0\\nOutput:\\n0\\nExpected:\\n0"
                    },
                    {
                        "username": "NewbieAI",
                        "content": "\\n\\n\\n\\treturn (num-1)%9 +1 if num else 0\\n"
                    }
                ]
            },
            {
                "id": 1572472,
                "content": [
                    {
                        "username": "aidanchill",
                        "content": "Hint #1: \"A naive implementation of the above process is trivial. Could you come up with other methods?\"\\n\\nThis is not a hint. All this accomplishes is belittling anyone who is stuck on the naive implementation."
                    },
                    {
                        "username": "4georges7",
                        "content": "testcase 221 is broken\\n"
                    },
                    {
                        "username": "Aytekin1455",
                        "content": "55 broken too :("
                    },
                    {
                        "username": "saadalyah",
                        "content": "Two years ago, I was asked this question in an SDE interview at Amazon, and to this day, I haven\\'t been able to figure it out on my own without knowing the answer or receiving any hints.\\n\\nI find it unfair when interview questions are heavily weighted towards testing whether the optimal solution \"CLICKS\" in your mind, rather than your programming skills. In my opinion, the ideal balance would be 35% focused on the idea and 65% on programming skills, since it can be frustrating to face these types of questions in an interview setting"
                    },
                    {
                        "username": "saadalyah",
                        "content": "[@Minatokun](/Minatokun) \\nThe interviewer didn\\'t ask directly for O(1) solution, but she asked if I could enhance the code where I didn\\'t, note that there was another question for the same interview.\\nWhoever I was moved to the second round \"Bar raiser.\""
                    },
                    {
                        "username": "Minatokun",
                        "content": "can you explain more about it. Whats the solution they were looking for? i solved using the recursion one. Were the asking for the O(1) solution?"
                    },
                    {
                        "username": "GowthamiPediredla",
                        "content": "var addDigits = function(num) {\\n    if(num<=9) return num\\n return num%9===0?9:num%9\\n};\\n\\nAny number divided by 9 always gives sum of all the digits or 0( which means it is a multiple of 9, which would give 9 on adding the digits) as reminder"
                    },
                    {
                        "username": "mukadas026",
                        "content": "can you please explain your solution a bit more, I\\'m finding it hard to understand"
                    },
                    {
                        "username": "qiaojianjun",
                        "content": "\\'\\'\\'\\nreturn reduce(lambda x,y:x + y if x +y<10 else (x + y)%10 + 1,[int(i) for i in str(num)])\\n\\'\\'\\'"
                    },
                    {
                        "username": "penguinshin",
                        "content": "Y\\'all have seen enough solutions of the O(1) solution. For those who would like an explanation of why this works, consider the following:\\n\\nLet N be a base-10 representation of an integer, say it has 3 digits: a,b,c.\\n\\nThen, N = 10^2 *a + 10^1 *b + 10^0 * c\\n\\nWe can rewrite this as N = (9 + 1)^2 * a + (9 + 1)^1 * b + c\\n\\nIf we expand all terms in this expression, we find that we can rewrite our sum to be N = 9*M + a + b + c.\\n\\nTaking this expression mod 9, we get that N % 9 =( 9*M) % 9 + (a + b + c) % 9 = 0 + (a + b + c) % 9 = (a + b + c)  %9. So we just showed equivalence of our original number N, and the sum of its digits, a + b + c modulo 9. Now let N = a + b + c. We can rewrite this number in base-10, and assign new coefficients c, d, e (although c will be 0 since the sum of the digits of a three digit number will be at most 2 digits). And we can repeat the process until we find that the ultimate value, the repeated sum of digits, has the same value as our original number modulo 9. \\n\\nNow, one caveat is that the sum of the digits will never be 0, but if the modulo results in a 0, then we know the ultimate repeated sum must be 9. \\n\\n\\n"
                    },
                    {
                        "username": "AKASH_PATTANAYAK_123_coder",
                        "content": "![image](https://assets.leetcode.com/users/images/03f31a2d-4bd5-41e5-976b-69fef4c15bc2_1638173762.5167644.png)\\n"
                    },
                    {
                        "username": "shreyans800755",
                        "content": "If num == 0 -> ans = 0\n\nIf num % 9 == 0 -> ans = 9\n\nIf num % 9 != 0 ->\nnum = nearest multiple of 9 which is less than num + (num % 9)\nSo, ans = (9 + (num % 9)) % 10\nHere, 9 + (num % 9) will always be 2 digit number. (because num % 9 != 0)\nFirst digit will always be 1. And 2nd will be (num % 9) - 1\nSo, sum = (num % 9)\n\nCode:\nif(num == 0)\n\t\treturn 0;\nif(num % 9 == 0)\n\t\treturn 9;\nreturn num % 9;"
                    },
                    {
                        "username": "bookshadow",
                        "content": "0 / 1101 test cases passed.\\n\\nInput:\\n0\\nOutput:\\n0\\nExpected:\\n0"
                    },
                    {
                        "username": "NewbieAI",
                        "content": "\\n\\n\\n\\treturn (num-1)%9 +1 if num else 0\\n"
                    }
                ]
            },
            {
                "id": 1576023,
                "content": [
                    {
                        "username": "aidanchill",
                        "content": "Hint #1: \"A naive implementation of the above process is trivial. Could you come up with other methods?\"\\n\\nThis is not a hint. All this accomplishes is belittling anyone who is stuck on the naive implementation."
                    },
                    {
                        "username": "4georges7",
                        "content": "testcase 221 is broken\\n"
                    },
                    {
                        "username": "Aytekin1455",
                        "content": "55 broken too :("
                    },
                    {
                        "username": "saadalyah",
                        "content": "Two years ago, I was asked this question in an SDE interview at Amazon, and to this day, I haven\\'t been able to figure it out on my own without knowing the answer or receiving any hints.\\n\\nI find it unfair when interview questions are heavily weighted towards testing whether the optimal solution \"CLICKS\" in your mind, rather than your programming skills. In my opinion, the ideal balance would be 35% focused on the idea and 65% on programming skills, since it can be frustrating to face these types of questions in an interview setting"
                    },
                    {
                        "username": "saadalyah",
                        "content": "[@Minatokun](/Minatokun) \\nThe interviewer didn\\'t ask directly for O(1) solution, but she asked if I could enhance the code where I didn\\'t, note that there was another question for the same interview.\\nWhoever I was moved to the second round \"Bar raiser.\""
                    },
                    {
                        "username": "Minatokun",
                        "content": "can you explain more about it. Whats the solution they were looking for? i solved using the recursion one. Were the asking for the O(1) solution?"
                    },
                    {
                        "username": "GowthamiPediredla",
                        "content": "var addDigits = function(num) {\\n    if(num<=9) return num\\n return num%9===0?9:num%9\\n};\\n\\nAny number divided by 9 always gives sum of all the digits or 0( which means it is a multiple of 9, which would give 9 on adding the digits) as reminder"
                    },
                    {
                        "username": "mukadas026",
                        "content": "can you please explain your solution a bit more, I\\'m finding it hard to understand"
                    },
                    {
                        "username": "qiaojianjun",
                        "content": "\\'\\'\\'\\nreturn reduce(lambda x,y:x + y if x +y<10 else (x + y)%10 + 1,[int(i) for i in str(num)])\\n\\'\\'\\'"
                    },
                    {
                        "username": "penguinshin",
                        "content": "Y\\'all have seen enough solutions of the O(1) solution. For those who would like an explanation of why this works, consider the following:\\n\\nLet N be a base-10 representation of an integer, say it has 3 digits: a,b,c.\\n\\nThen, N = 10^2 *a + 10^1 *b + 10^0 * c\\n\\nWe can rewrite this as N = (9 + 1)^2 * a + (9 + 1)^1 * b + c\\n\\nIf we expand all terms in this expression, we find that we can rewrite our sum to be N = 9*M + a + b + c.\\n\\nTaking this expression mod 9, we get that N % 9 =( 9*M) % 9 + (a + b + c) % 9 = 0 + (a + b + c) % 9 = (a + b + c)  %9. So we just showed equivalence of our original number N, and the sum of its digits, a + b + c modulo 9. Now let N = a + b + c. We can rewrite this number in base-10, and assign new coefficients c, d, e (although c will be 0 since the sum of the digits of a three digit number will be at most 2 digits). And we can repeat the process until we find that the ultimate value, the repeated sum of digits, has the same value as our original number modulo 9. \\n\\nNow, one caveat is that the sum of the digits will never be 0, but if the modulo results in a 0, then we know the ultimate repeated sum must be 9. \\n\\n\\n"
                    },
                    {
                        "username": "AKASH_PATTANAYAK_123_coder",
                        "content": "![image](https://assets.leetcode.com/users/images/03f31a2d-4bd5-41e5-976b-69fef4c15bc2_1638173762.5167644.png)\\n"
                    },
                    {
                        "username": "shreyans800755",
                        "content": "If num == 0 -> ans = 0\n\nIf num % 9 == 0 -> ans = 9\n\nIf num % 9 != 0 ->\nnum = nearest multiple of 9 which is less than num + (num % 9)\nSo, ans = (9 + (num % 9)) % 10\nHere, 9 + (num % 9) will always be 2 digit number. (because num % 9 != 0)\nFirst digit will always be 1. And 2nd will be (num % 9) - 1\nSo, sum = (num % 9)\n\nCode:\nif(num == 0)\n\t\treturn 0;\nif(num % 9 == 0)\n\t\treturn 9;\nreturn num % 9;"
                    },
                    {
                        "username": "bookshadow",
                        "content": "0 / 1101 test cases passed.\\n\\nInput:\\n0\\nOutput:\\n0\\nExpected:\\n0"
                    },
                    {
                        "username": "NewbieAI",
                        "content": "\\n\\n\\n\\treturn (num-1)%9 +1 if num else 0\\n"
                    }
                ]
            },
            {
                "id": 1571857,
                "content": [
                    {
                        "username": "aidanchill",
                        "content": "Hint #1: \"A naive implementation of the above process is trivial. Could you come up with other methods?\"\\n\\nThis is not a hint. All this accomplishes is belittling anyone who is stuck on the naive implementation."
                    },
                    {
                        "username": "4georges7",
                        "content": "testcase 221 is broken\\n"
                    },
                    {
                        "username": "Aytekin1455",
                        "content": "55 broken too :("
                    },
                    {
                        "username": "saadalyah",
                        "content": "Two years ago, I was asked this question in an SDE interview at Amazon, and to this day, I haven\\'t been able to figure it out on my own without knowing the answer or receiving any hints.\\n\\nI find it unfair when interview questions are heavily weighted towards testing whether the optimal solution \"CLICKS\" in your mind, rather than your programming skills. In my opinion, the ideal balance would be 35% focused on the idea and 65% on programming skills, since it can be frustrating to face these types of questions in an interview setting"
                    },
                    {
                        "username": "saadalyah",
                        "content": "[@Minatokun](/Minatokun) \\nThe interviewer didn\\'t ask directly for O(1) solution, but she asked if I could enhance the code where I didn\\'t, note that there was another question for the same interview.\\nWhoever I was moved to the second round \"Bar raiser.\""
                    },
                    {
                        "username": "Minatokun",
                        "content": "can you explain more about it. Whats the solution they were looking for? i solved using the recursion one. Were the asking for the O(1) solution?"
                    },
                    {
                        "username": "GowthamiPediredla",
                        "content": "var addDigits = function(num) {\\n    if(num<=9) return num\\n return num%9===0?9:num%9\\n};\\n\\nAny number divided by 9 always gives sum of all the digits or 0( which means it is a multiple of 9, which would give 9 on adding the digits) as reminder"
                    },
                    {
                        "username": "mukadas026",
                        "content": "can you please explain your solution a bit more, I\\'m finding it hard to understand"
                    },
                    {
                        "username": "qiaojianjun",
                        "content": "\\'\\'\\'\\nreturn reduce(lambda x,y:x + y if x +y<10 else (x + y)%10 + 1,[int(i) for i in str(num)])\\n\\'\\'\\'"
                    },
                    {
                        "username": "penguinshin",
                        "content": "Y\\'all have seen enough solutions of the O(1) solution. For those who would like an explanation of why this works, consider the following:\\n\\nLet N be a base-10 representation of an integer, say it has 3 digits: a,b,c.\\n\\nThen, N = 10^2 *a + 10^1 *b + 10^0 * c\\n\\nWe can rewrite this as N = (9 + 1)^2 * a + (9 + 1)^1 * b + c\\n\\nIf we expand all terms in this expression, we find that we can rewrite our sum to be N = 9*M + a + b + c.\\n\\nTaking this expression mod 9, we get that N % 9 =( 9*M) % 9 + (a + b + c) % 9 = 0 + (a + b + c) % 9 = (a + b + c)  %9. So we just showed equivalence of our original number N, and the sum of its digits, a + b + c modulo 9. Now let N = a + b + c. We can rewrite this number in base-10, and assign new coefficients c, d, e (although c will be 0 since the sum of the digits of a three digit number will be at most 2 digits). And we can repeat the process until we find that the ultimate value, the repeated sum of digits, has the same value as our original number modulo 9. \\n\\nNow, one caveat is that the sum of the digits will never be 0, but if the modulo results in a 0, then we know the ultimate repeated sum must be 9. \\n\\n\\n"
                    },
                    {
                        "username": "AKASH_PATTANAYAK_123_coder",
                        "content": "![image](https://assets.leetcode.com/users/images/03f31a2d-4bd5-41e5-976b-69fef4c15bc2_1638173762.5167644.png)\\n"
                    },
                    {
                        "username": "shreyans800755",
                        "content": "If num == 0 -> ans = 0\n\nIf num % 9 == 0 -> ans = 9\n\nIf num % 9 != 0 ->\nnum = nearest multiple of 9 which is less than num + (num % 9)\nSo, ans = (9 + (num % 9)) % 10\nHere, 9 + (num % 9) will always be 2 digit number. (because num % 9 != 0)\nFirst digit will always be 1. And 2nd will be (num % 9) - 1\nSo, sum = (num % 9)\n\nCode:\nif(num == 0)\n\t\treturn 0;\nif(num % 9 == 0)\n\t\treturn 9;\nreturn num % 9;"
                    },
                    {
                        "username": "bookshadow",
                        "content": "0 / 1101 test cases passed.\\n\\nInput:\\n0\\nOutput:\\n0\\nExpected:\\n0"
                    },
                    {
                        "username": "NewbieAI",
                        "content": "\\n\\n\\n\\treturn (num-1)%9 +1 if num else 0\\n"
                    }
                ]
            },
            {
                "id": 1569044,
                "content": [
                    {
                        "username": "aidanchill",
                        "content": "Hint #1: \"A naive implementation of the above process is trivial. Could you come up with other methods?\"\\n\\nThis is not a hint. All this accomplishes is belittling anyone who is stuck on the naive implementation."
                    },
                    {
                        "username": "4georges7",
                        "content": "testcase 221 is broken\\n"
                    },
                    {
                        "username": "Aytekin1455",
                        "content": "55 broken too :("
                    },
                    {
                        "username": "saadalyah",
                        "content": "Two years ago, I was asked this question in an SDE interview at Amazon, and to this day, I haven\\'t been able to figure it out on my own without knowing the answer or receiving any hints.\\n\\nI find it unfair when interview questions are heavily weighted towards testing whether the optimal solution \"CLICKS\" in your mind, rather than your programming skills. In my opinion, the ideal balance would be 35% focused on the idea and 65% on programming skills, since it can be frustrating to face these types of questions in an interview setting"
                    },
                    {
                        "username": "saadalyah",
                        "content": "[@Minatokun](/Minatokun) \\nThe interviewer didn\\'t ask directly for O(1) solution, but she asked if I could enhance the code where I didn\\'t, note that there was another question for the same interview.\\nWhoever I was moved to the second round \"Bar raiser.\""
                    },
                    {
                        "username": "Minatokun",
                        "content": "can you explain more about it. Whats the solution they were looking for? i solved using the recursion one. Were the asking for the O(1) solution?"
                    },
                    {
                        "username": "GowthamiPediredla",
                        "content": "var addDigits = function(num) {\\n    if(num<=9) return num\\n return num%9===0?9:num%9\\n};\\n\\nAny number divided by 9 always gives sum of all the digits or 0( which means it is a multiple of 9, which would give 9 on adding the digits) as reminder"
                    },
                    {
                        "username": "mukadas026",
                        "content": "can you please explain your solution a bit more, I\\'m finding it hard to understand"
                    },
                    {
                        "username": "qiaojianjun",
                        "content": "\\'\\'\\'\\nreturn reduce(lambda x,y:x + y if x +y<10 else (x + y)%10 + 1,[int(i) for i in str(num)])\\n\\'\\'\\'"
                    },
                    {
                        "username": "penguinshin",
                        "content": "Y\\'all have seen enough solutions of the O(1) solution. For those who would like an explanation of why this works, consider the following:\\n\\nLet N be a base-10 representation of an integer, say it has 3 digits: a,b,c.\\n\\nThen, N = 10^2 *a + 10^1 *b + 10^0 * c\\n\\nWe can rewrite this as N = (9 + 1)^2 * a + (9 + 1)^1 * b + c\\n\\nIf we expand all terms in this expression, we find that we can rewrite our sum to be N = 9*M + a + b + c.\\n\\nTaking this expression mod 9, we get that N % 9 =( 9*M) % 9 + (a + b + c) % 9 = 0 + (a + b + c) % 9 = (a + b + c)  %9. So we just showed equivalence of our original number N, and the sum of its digits, a + b + c modulo 9. Now let N = a + b + c. We can rewrite this number in base-10, and assign new coefficients c, d, e (although c will be 0 since the sum of the digits of a three digit number will be at most 2 digits). And we can repeat the process until we find that the ultimate value, the repeated sum of digits, has the same value as our original number modulo 9. \\n\\nNow, one caveat is that the sum of the digits will never be 0, but if the modulo results in a 0, then we know the ultimate repeated sum must be 9. \\n\\n\\n"
                    },
                    {
                        "username": "AKASH_PATTANAYAK_123_coder",
                        "content": "![image](https://assets.leetcode.com/users/images/03f31a2d-4bd5-41e5-976b-69fef4c15bc2_1638173762.5167644.png)\\n"
                    },
                    {
                        "username": "shreyans800755",
                        "content": "If num == 0 -> ans = 0\n\nIf num % 9 == 0 -> ans = 9\n\nIf num % 9 != 0 ->\nnum = nearest multiple of 9 which is less than num + (num % 9)\nSo, ans = (9 + (num % 9)) % 10\nHere, 9 + (num % 9) will always be 2 digit number. (because num % 9 != 0)\nFirst digit will always be 1. And 2nd will be (num % 9) - 1\nSo, sum = (num % 9)\n\nCode:\nif(num == 0)\n\t\treturn 0;\nif(num % 9 == 0)\n\t\treturn 9;\nreturn num % 9;"
                    },
                    {
                        "username": "bookshadow",
                        "content": "0 / 1101 test cases passed.\\n\\nInput:\\n0\\nOutput:\\n0\\nExpected:\\n0"
                    },
                    {
                        "username": "NewbieAI",
                        "content": "\\n\\n\\n\\treturn (num-1)%9 +1 if num else 0\\n"
                    }
                ]
            },
            {
                "id": 1572737,
                "content": [
                    {
                        "username": "aidanchill",
                        "content": "Hint #1: \"A naive implementation of the above process is trivial. Could you come up with other methods?\"\\n\\nThis is not a hint. All this accomplishes is belittling anyone who is stuck on the naive implementation."
                    },
                    {
                        "username": "4georges7",
                        "content": "testcase 221 is broken\\n"
                    },
                    {
                        "username": "Aytekin1455",
                        "content": "55 broken too :("
                    },
                    {
                        "username": "saadalyah",
                        "content": "Two years ago, I was asked this question in an SDE interview at Amazon, and to this day, I haven\\'t been able to figure it out on my own without knowing the answer or receiving any hints.\\n\\nI find it unfair when interview questions are heavily weighted towards testing whether the optimal solution \"CLICKS\" in your mind, rather than your programming skills. In my opinion, the ideal balance would be 35% focused on the idea and 65% on programming skills, since it can be frustrating to face these types of questions in an interview setting"
                    },
                    {
                        "username": "saadalyah",
                        "content": "[@Minatokun](/Minatokun) \\nThe interviewer didn\\'t ask directly for O(1) solution, but she asked if I could enhance the code where I didn\\'t, note that there was another question for the same interview.\\nWhoever I was moved to the second round \"Bar raiser.\""
                    },
                    {
                        "username": "Minatokun",
                        "content": "can you explain more about it. Whats the solution they were looking for? i solved using the recursion one. Were the asking for the O(1) solution?"
                    },
                    {
                        "username": "GowthamiPediredla",
                        "content": "var addDigits = function(num) {\\n    if(num<=9) return num\\n return num%9===0?9:num%9\\n};\\n\\nAny number divided by 9 always gives sum of all the digits or 0( which means it is a multiple of 9, which would give 9 on adding the digits) as reminder"
                    },
                    {
                        "username": "mukadas026",
                        "content": "can you please explain your solution a bit more, I\\'m finding it hard to understand"
                    },
                    {
                        "username": "qiaojianjun",
                        "content": "\\'\\'\\'\\nreturn reduce(lambda x,y:x + y if x +y<10 else (x + y)%10 + 1,[int(i) for i in str(num)])\\n\\'\\'\\'"
                    },
                    {
                        "username": "penguinshin",
                        "content": "Y\\'all have seen enough solutions of the O(1) solution. For those who would like an explanation of why this works, consider the following:\\n\\nLet N be a base-10 representation of an integer, say it has 3 digits: a,b,c.\\n\\nThen, N = 10^2 *a + 10^1 *b + 10^0 * c\\n\\nWe can rewrite this as N = (9 + 1)^2 * a + (9 + 1)^1 * b + c\\n\\nIf we expand all terms in this expression, we find that we can rewrite our sum to be N = 9*M + a + b + c.\\n\\nTaking this expression mod 9, we get that N % 9 =( 9*M) % 9 + (a + b + c) % 9 = 0 + (a + b + c) % 9 = (a + b + c)  %9. So we just showed equivalence of our original number N, and the sum of its digits, a + b + c modulo 9. Now let N = a + b + c. We can rewrite this number in base-10, and assign new coefficients c, d, e (although c will be 0 since the sum of the digits of a three digit number will be at most 2 digits). And we can repeat the process until we find that the ultimate value, the repeated sum of digits, has the same value as our original number modulo 9. \\n\\nNow, one caveat is that the sum of the digits will never be 0, but if the modulo results in a 0, then we know the ultimate repeated sum must be 9. \\n\\n\\n"
                    },
                    {
                        "username": "AKASH_PATTANAYAK_123_coder",
                        "content": "![image](https://assets.leetcode.com/users/images/03f31a2d-4bd5-41e5-976b-69fef4c15bc2_1638173762.5167644.png)\\n"
                    },
                    {
                        "username": "shreyans800755",
                        "content": "If num == 0 -> ans = 0\n\nIf num % 9 == 0 -> ans = 9\n\nIf num % 9 != 0 ->\nnum = nearest multiple of 9 which is less than num + (num % 9)\nSo, ans = (9 + (num % 9)) % 10\nHere, 9 + (num % 9) will always be 2 digit number. (because num % 9 != 0)\nFirst digit will always be 1. And 2nd will be (num % 9) - 1\nSo, sum = (num % 9)\n\nCode:\nif(num == 0)\n\t\treturn 0;\nif(num % 9 == 0)\n\t\treturn 9;\nreturn num % 9;"
                    },
                    {
                        "username": "bookshadow",
                        "content": "0 / 1101 test cases passed.\\n\\nInput:\\n0\\nOutput:\\n0\\nExpected:\\n0"
                    },
                    {
                        "username": "NewbieAI",
                        "content": "\\n\\n\\n\\treturn (num-1)%9 +1 if num else 0\\n"
                    }
                ]
            },
            {
                "id": 1751030,
                "content": [
                    {
                        "username": "Deepak_8811",
                        "content": "Using Recursion.\\n\\n    int addDigits(int num) {\\n        //Base case\\n        if(num<10){\\n            return num;\\n        }\\n        long long int sum=0;\\n        while(num>0){\\n            int lastDigit=num%10;\\n            sum+=lastDigit;\\n            num/=10;\\n        }\\n        return addDigits(sum);\\n        \\n    }"
                    },
                    {
                        "username": "reachgurushanthavanti",
                        "content": "will it work for more than three digit number\\n"
                    },
                    {
                        "username": "PRANAB_DAS1",
                        "content": "Stop posting solutions in discussion..."
                    },
                    {
                        "username": "poorprogrammer",
                        "content": "https://youtu.be/F58LpmJ9lXs?si=xOEPCCkB1JysL7-q\\n\\nEasiest approach "
                    },
                    {
                        "username": "i_am_guts",
                        "content": "easy , even if you got looked at one of the answers in here , try yourself , in the end your coding matters not others!"
                    },
                    {
                        "username": "Anshika_0924",
                        "content": "What is the time complexity of Brute force recursion solution??"
                    },
                    {
                        "username": "priyagrajsharma2699",
                        "content": "class Solution {\\n    public int addDigits(int num) {\\n\\n\\n// hey geek it is super easy , have a look .\\n\\n// if number is zero then sum is 0 only simple.\\n        if(num == 0)\\n        {\\n            return 0 ;\\n        }\\n\\n// if num ko 9 se divide kar k reminder 0 aata h to number ka sum 9 h \\n// varna divide kar k jo bhi reminder aa raha hai vahi sum hai .\\n// eg . 22%9 = 4    , and sum of 2+2 = 4 . hence proved.\\n        else\\n        {\\n            return (num%9 == 0)?9 :num%9 ;\\n\\n        }   \\n    }\\n}\\n\\n\\n\\nwith explaination . if still any doubt comment I\\'ll reply ."
                    },
                    {
                        "username": "priyagrajsharma2699",
                        "content": "[@tejesh_kum](/tejesh_kum) https://youtu.be/F58LpmJ9lXs"
                    },
                    {
                        "username": "tejesh_kum",
                        "content": "solution samaj aagaya , lekin esa ho kyu raha hai ?\\nkisi bhi number ko 9 se mod karne se sum kese aa raha hai"
                    },
                    {
                        "username": "sefasayraci",
                        "content": "#include<stdio.h>\\n\\nint addDigits(int num) {\\n    int sum = 0;\\n    while (num > 0) {\\n        sum += num % 10;\\n        num /= 10;\\n    }\\n    return sum;\\n}\\nint main() {\\n    int input;\\n    printf(\"Enter a number: \");\\n    scanf(\"%d\", &input);\\n\\n    if (input < 10) {\\n        printf(\"Please enter a two-digit number: \");\\n        scanf(\"%d\", &input);\\n    }\\n\\n    int result = addDigits(input);\\n    printf(\"Result: %d\\\\n\", result);\\n\\n    return 0;\\n}\\n"
                    },
                    {
                        "username": "sefasayraci",
                        "content": "#include<stdio.h>\\n\\nint addDigits(int num) {\\n    int sum = 0;\\n    while (num > 0) {\\n        sum += num % 10;\\n        num /= 10;\\n    }\\n    return sum;\\n}\\n\\nint main() {\\n    int input;\\n    printf(\"Enter a number: \");\\n    scanf(\"%d\", &input);\\n\\n    if (input < 10) {\\n        printf(\"Please enter a two-digit number: \");\\n        scanf(\"%d\", &input);\\n    }\\n\\n    int result = addDigits(input);\\n    printf(\"Result: %d\\\\n\", result);\\n\\n    return 0;\\n}\\n"
                    },
                    {
                        "username": "CalCreate",
                        "content": "This question essentially asks you to find the digital root. \\n\\nWhen has the digital root ever applied to you in your job?"
                    },
                    {
                        "username": "tsuroku",
                        "content": "If I were to guess, I think it\\'s less about the actual problem and moreso thinking about how you can take a problem and create the most streamlined solution.\\n\\nWith this, I\\'ve seen many solutions that use while-loops, recursion, etc but I\\'ve created a solution that is a single line, meaning you can continually work on this and overtime make a shorter and more optimal solution. At least, that\\'s how I see it."
                    }
                ]
            },
            {
                "id": 2072720,
                "content": [
                    {
                        "username": "Deepak_8811",
                        "content": "Using Recursion.\\n\\n    int addDigits(int num) {\\n        //Base case\\n        if(num<10){\\n            return num;\\n        }\\n        long long int sum=0;\\n        while(num>0){\\n            int lastDigit=num%10;\\n            sum+=lastDigit;\\n            num/=10;\\n        }\\n        return addDigits(sum);\\n        \\n    }"
                    },
                    {
                        "username": "reachgurushanthavanti",
                        "content": "will it work for more than three digit number\\n"
                    },
                    {
                        "username": "PRANAB_DAS1",
                        "content": "Stop posting solutions in discussion..."
                    },
                    {
                        "username": "poorprogrammer",
                        "content": "https://youtu.be/F58LpmJ9lXs?si=xOEPCCkB1JysL7-q\\n\\nEasiest approach "
                    },
                    {
                        "username": "i_am_guts",
                        "content": "easy , even if you got looked at one of the answers in here , try yourself , in the end your coding matters not others!"
                    },
                    {
                        "username": "Anshika_0924",
                        "content": "What is the time complexity of Brute force recursion solution??"
                    },
                    {
                        "username": "priyagrajsharma2699",
                        "content": "class Solution {\\n    public int addDigits(int num) {\\n\\n\\n// hey geek it is super easy , have a look .\\n\\n// if number is zero then sum is 0 only simple.\\n        if(num == 0)\\n        {\\n            return 0 ;\\n        }\\n\\n// if num ko 9 se divide kar k reminder 0 aata h to number ka sum 9 h \\n// varna divide kar k jo bhi reminder aa raha hai vahi sum hai .\\n// eg . 22%9 = 4    , and sum of 2+2 = 4 . hence proved.\\n        else\\n        {\\n            return (num%9 == 0)?9 :num%9 ;\\n\\n        }   \\n    }\\n}\\n\\n\\n\\nwith explaination . if still any doubt comment I\\'ll reply ."
                    },
                    {
                        "username": "priyagrajsharma2699",
                        "content": "[@tejesh_kum](/tejesh_kum) https://youtu.be/F58LpmJ9lXs"
                    },
                    {
                        "username": "tejesh_kum",
                        "content": "solution samaj aagaya , lekin esa ho kyu raha hai ?\\nkisi bhi number ko 9 se mod karne se sum kese aa raha hai"
                    },
                    {
                        "username": "sefasayraci",
                        "content": "#include<stdio.h>\\n\\nint addDigits(int num) {\\n    int sum = 0;\\n    while (num > 0) {\\n        sum += num % 10;\\n        num /= 10;\\n    }\\n    return sum;\\n}\\nint main() {\\n    int input;\\n    printf(\"Enter a number: \");\\n    scanf(\"%d\", &input);\\n\\n    if (input < 10) {\\n        printf(\"Please enter a two-digit number: \");\\n        scanf(\"%d\", &input);\\n    }\\n\\n    int result = addDigits(input);\\n    printf(\"Result: %d\\\\n\", result);\\n\\n    return 0;\\n}\\n"
                    },
                    {
                        "username": "sefasayraci",
                        "content": "#include<stdio.h>\\n\\nint addDigits(int num) {\\n    int sum = 0;\\n    while (num > 0) {\\n        sum += num % 10;\\n        num /= 10;\\n    }\\n    return sum;\\n}\\n\\nint main() {\\n    int input;\\n    printf(\"Enter a number: \");\\n    scanf(\"%d\", &input);\\n\\n    if (input < 10) {\\n        printf(\"Please enter a two-digit number: \");\\n        scanf(\"%d\", &input);\\n    }\\n\\n    int result = addDigits(input);\\n    printf(\"Result: %d\\\\n\", result);\\n\\n    return 0;\\n}\\n"
                    },
                    {
                        "username": "CalCreate",
                        "content": "This question essentially asks you to find the digital root. \\n\\nWhen has the digital root ever applied to you in your job?"
                    },
                    {
                        "username": "tsuroku",
                        "content": "If I were to guess, I think it\\'s less about the actual problem and moreso thinking about how you can take a problem and create the most streamlined solution.\\n\\nWith this, I\\'ve seen many solutions that use while-loops, recursion, etc but I\\'ve created a solution that is a single line, meaning you can continually work on this and overtime make a shorter and more optimal solution. At least, that\\'s how I see it."
                    }
                ]
            },
            {
                "id": 2057423,
                "content": [
                    {
                        "username": "Deepak_8811",
                        "content": "Using Recursion.\\n\\n    int addDigits(int num) {\\n        //Base case\\n        if(num<10){\\n            return num;\\n        }\\n        long long int sum=0;\\n        while(num>0){\\n            int lastDigit=num%10;\\n            sum+=lastDigit;\\n            num/=10;\\n        }\\n        return addDigits(sum);\\n        \\n    }"
                    },
                    {
                        "username": "reachgurushanthavanti",
                        "content": "will it work for more than three digit number\\n"
                    },
                    {
                        "username": "PRANAB_DAS1",
                        "content": "Stop posting solutions in discussion..."
                    },
                    {
                        "username": "poorprogrammer",
                        "content": "https://youtu.be/F58LpmJ9lXs?si=xOEPCCkB1JysL7-q\\n\\nEasiest approach "
                    },
                    {
                        "username": "i_am_guts",
                        "content": "easy , even if you got looked at one of the answers in here , try yourself , in the end your coding matters not others!"
                    },
                    {
                        "username": "Anshika_0924",
                        "content": "What is the time complexity of Brute force recursion solution??"
                    },
                    {
                        "username": "priyagrajsharma2699",
                        "content": "class Solution {\\n    public int addDigits(int num) {\\n\\n\\n// hey geek it is super easy , have a look .\\n\\n// if number is zero then sum is 0 only simple.\\n        if(num == 0)\\n        {\\n            return 0 ;\\n        }\\n\\n// if num ko 9 se divide kar k reminder 0 aata h to number ka sum 9 h \\n// varna divide kar k jo bhi reminder aa raha hai vahi sum hai .\\n// eg . 22%9 = 4    , and sum of 2+2 = 4 . hence proved.\\n        else\\n        {\\n            return (num%9 == 0)?9 :num%9 ;\\n\\n        }   \\n    }\\n}\\n\\n\\n\\nwith explaination . if still any doubt comment I\\'ll reply ."
                    },
                    {
                        "username": "priyagrajsharma2699",
                        "content": "[@tejesh_kum](/tejesh_kum) https://youtu.be/F58LpmJ9lXs"
                    },
                    {
                        "username": "tejesh_kum",
                        "content": "solution samaj aagaya , lekin esa ho kyu raha hai ?\\nkisi bhi number ko 9 se mod karne se sum kese aa raha hai"
                    },
                    {
                        "username": "sefasayraci",
                        "content": "#include<stdio.h>\\n\\nint addDigits(int num) {\\n    int sum = 0;\\n    while (num > 0) {\\n        sum += num % 10;\\n        num /= 10;\\n    }\\n    return sum;\\n}\\nint main() {\\n    int input;\\n    printf(\"Enter a number: \");\\n    scanf(\"%d\", &input);\\n\\n    if (input < 10) {\\n        printf(\"Please enter a two-digit number: \");\\n        scanf(\"%d\", &input);\\n    }\\n\\n    int result = addDigits(input);\\n    printf(\"Result: %d\\\\n\", result);\\n\\n    return 0;\\n}\\n"
                    },
                    {
                        "username": "sefasayraci",
                        "content": "#include<stdio.h>\\n\\nint addDigits(int num) {\\n    int sum = 0;\\n    while (num > 0) {\\n        sum += num % 10;\\n        num /= 10;\\n    }\\n    return sum;\\n}\\n\\nint main() {\\n    int input;\\n    printf(\"Enter a number: \");\\n    scanf(\"%d\", &input);\\n\\n    if (input < 10) {\\n        printf(\"Please enter a two-digit number: \");\\n        scanf(\"%d\", &input);\\n    }\\n\\n    int result = addDigits(input);\\n    printf(\"Result: %d\\\\n\", result);\\n\\n    return 0;\\n}\\n"
                    },
                    {
                        "username": "CalCreate",
                        "content": "This question essentially asks you to find the digital root. \\n\\nWhen has the digital root ever applied to you in your job?"
                    },
                    {
                        "username": "tsuroku",
                        "content": "If I were to guess, I think it\\'s less about the actual problem and moreso thinking about how you can take a problem and create the most streamlined solution.\\n\\nWith this, I\\'ve seen many solutions that use while-loops, recursion, etc but I\\'ve created a solution that is a single line, meaning you can continually work on this and overtime make a shorter and more optimal solution. At least, that\\'s how I see it."
                    }
                ]
            },
            {
                "id": 2030990,
                "content": [
                    {
                        "username": "Deepak_8811",
                        "content": "Using Recursion.\\n\\n    int addDigits(int num) {\\n        //Base case\\n        if(num<10){\\n            return num;\\n        }\\n        long long int sum=0;\\n        while(num>0){\\n            int lastDigit=num%10;\\n            sum+=lastDigit;\\n            num/=10;\\n        }\\n        return addDigits(sum);\\n        \\n    }"
                    },
                    {
                        "username": "reachgurushanthavanti",
                        "content": "will it work for more than three digit number\\n"
                    },
                    {
                        "username": "PRANAB_DAS1",
                        "content": "Stop posting solutions in discussion..."
                    },
                    {
                        "username": "poorprogrammer",
                        "content": "https://youtu.be/F58LpmJ9lXs?si=xOEPCCkB1JysL7-q\\n\\nEasiest approach "
                    },
                    {
                        "username": "i_am_guts",
                        "content": "easy , even if you got looked at one of the answers in here , try yourself , in the end your coding matters not others!"
                    },
                    {
                        "username": "Anshika_0924",
                        "content": "What is the time complexity of Brute force recursion solution??"
                    },
                    {
                        "username": "priyagrajsharma2699",
                        "content": "class Solution {\\n    public int addDigits(int num) {\\n\\n\\n// hey geek it is super easy , have a look .\\n\\n// if number is zero then sum is 0 only simple.\\n        if(num == 0)\\n        {\\n            return 0 ;\\n        }\\n\\n// if num ko 9 se divide kar k reminder 0 aata h to number ka sum 9 h \\n// varna divide kar k jo bhi reminder aa raha hai vahi sum hai .\\n// eg . 22%9 = 4    , and sum of 2+2 = 4 . hence proved.\\n        else\\n        {\\n            return (num%9 == 0)?9 :num%9 ;\\n\\n        }   \\n    }\\n}\\n\\n\\n\\nwith explaination . if still any doubt comment I\\'ll reply ."
                    },
                    {
                        "username": "priyagrajsharma2699",
                        "content": "[@tejesh_kum](/tejesh_kum) https://youtu.be/F58LpmJ9lXs"
                    },
                    {
                        "username": "tejesh_kum",
                        "content": "solution samaj aagaya , lekin esa ho kyu raha hai ?\\nkisi bhi number ko 9 se mod karne se sum kese aa raha hai"
                    },
                    {
                        "username": "sefasayraci",
                        "content": "#include<stdio.h>\\n\\nint addDigits(int num) {\\n    int sum = 0;\\n    while (num > 0) {\\n        sum += num % 10;\\n        num /= 10;\\n    }\\n    return sum;\\n}\\nint main() {\\n    int input;\\n    printf(\"Enter a number: \");\\n    scanf(\"%d\", &input);\\n\\n    if (input < 10) {\\n        printf(\"Please enter a two-digit number: \");\\n        scanf(\"%d\", &input);\\n    }\\n\\n    int result = addDigits(input);\\n    printf(\"Result: %d\\\\n\", result);\\n\\n    return 0;\\n}\\n"
                    },
                    {
                        "username": "sefasayraci",
                        "content": "#include<stdio.h>\\n\\nint addDigits(int num) {\\n    int sum = 0;\\n    while (num > 0) {\\n        sum += num % 10;\\n        num /= 10;\\n    }\\n    return sum;\\n}\\n\\nint main() {\\n    int input;\\n    printf(\"Enter a number: \");\\n    scanf(\"%d\", &input);\\n\\n    if (input < 10) {\\n        printf(\"Please enter a two-digit number: \");\\n        scanf(\"%d\", &input);\\n    }\\n\\n    int result = addDigits(input);\\n    printf(\"Result: %d\\\\n\", result);\\n\\n    return 0;\\n}\\n"
                    },
                    {
                        "username": "CalCreate",
                        "content": "This question essentially asks you to find the digital root. \\n\\nWhen has the digital root ever applied to you in your job?"
                    },
                    {
                        "username": "tsuroku",
                        "content": "If I were to guess, I think it\\'s less about the actual problem and moreso thinking about how you can take a problem and create the most streamlined solution.\\n\\nWith this, I\\'ve seen many solutions that use while-loops, recursion, etc but I\\'ve created a solution that is a single line, meaning you can continually work on this and overtime make a shorter and more optimal solution. At least, that\\'s how I see it."
                    }
                ]
            },
            {
                "id": 2005265,
                "content": [
                    {
                        "username": "Deepak_8811",
                        "content": "Using Recursion.\\n\\n    int addDigits(int num) {\\n        //Base case\\n        if(num<10){\\n            return num;\\n        }\\n        long long int sum=0;\\n        while(num>0){\\n            int lastDigit=num%10;\\n            sum+=lastDigit;\\n            num/=10;\\n        }\\n        return addDigits(sum);\\n        \\n    }"
                    },
                    {
                        "username": "reachgurushanthavanti",
                        "content": "will it work for more than three digit number\\n"
                    },
                    {
                        "username": "PRANAB_DAS1",
                        "content": "Stop posting solutions in discussion..."
                    },
                    {
                        "username": "poorprogrammer",
                        "content": "https://youtu.be/F58LpmJ9lXs?si=xOEPCCkB1JysL7-q\\n\\nEasiest approach "
                    },
                    {
                        "username": "i_am_guts",
                        "content": "easy , even if you got looked at one of the answers in here , try yourself , in the end your coding matters not others!"
                    },
                    {
                        "username": "Anshika_0924",
                        "content": "What is the time complexity of Brute force recursion solution??"
                    },
                    {
                        "username": "priyagrajsharma2699",
                        "content": "class Solution {\\n    public int addDigits(int num) {\\n\\n\\n// hey geek it is super easy , have a look .\\n\\n// if number is zero then sum is 0 only simple.\\n        if(num == 0)\\n        {\\n            return 0 ;\\n        }\\n\\n// if num ko 9 se divide kar k reminder 0 aata h to number ka sum 9 h \\n// varna divide kar k jo bhi reminder aa raha hai vahi sum hai .\\n// eg . 22%9 = 4    , and sum of 2+2 = 4 . hence proved.\\n        else\\n        {\\n            return (num%9 == 0)?9 :num%9 ;\\n\\n        }   \\n    }\\n}\\n\\n\\n\\nwith explaination . if still any doubt comment I\\'ll reply ."
                    },
                    {
                        "username": "priyagrajsharma2699",
                        "content": "[@tejesh_kum](/tejesh_kum) https://youtu.be/F58LpmJ9lXs"
                    },
                    {
                        "username": "tejesh_kum",
                        "content": "solution samaj aagaya , lekin esa ho kyu raha hai ?\\nkisi bhi number ko 9 se mod karne se sum kese aa raha hai"
                    },
                    {
                        "username": "sefasayraci",
                        "content": "#include<stdio.h>\\n\\nint addDigits(int num) {\\n    int sum = 0;\\n    while (num > 0) {\\n        sum += num % 10;\\n        num /= 10;\\n    }\\n    return sum;\\n}\\nint main() {\\n    int input;\\n    printf(\"Enter a number: \");\\n    scanf(\"%d\", &input);\\n\\n    if (input < 10) {\\n        printf(\"Please enter a two-digit number: \");\\n        scanf(\"%d\", &input);\\n    }\\n\\n    int result = addDigits(input);\\n    printf(\"Result: %d\\\\n\", result);\\n\\n    return 0;\\n}\\n"
                    },
                    {
                        "username": "sefasayraci",
                        "content": "#include<stdio.h>\\n\\nint addDigits(int num) {\\n    int sum = 0;\\n    while (num > 0) {\\n        sum += num % 10;\\n        num /= 10;\\n    }\\n    return sum;\\n}\\n\\nint main() {\\n    int input;\\n    printf(\"Enter a number: \");\\n    scanf(\"%d\", &input);\\n\\n    if (input < 10) {\\n        printf(\"Please enter a two-digit number: \");\\n        scanf(\"%d\", &input);\\n    }\\n\\n    int result = addDigits(input);\\n    printf(\"Result: %d\\\\n\", result);\\n\\n    return 0;\\n}\\n"
                    },
                    {
                        "username": "CalCreate",
                        "content": "This question essentially asks you to find the digital root. \\n\\nWhen has the digital root ever applied to you in your job?"
                    },
                    {
                        "username": "tsuroku",
                        "content": "If I were to guess, I think it\\'s less about the actual problem and moreso thinking about how you can take a problem and create the most streamlined solution.\\n\\nWith this, I\\'ve seen many solutions that use while-loops, recursion, etc but I\\'ve created a solution that is a single line, meaning you can continually work on this and overtime make a shorter and more optimal solution. At least, that\\'s how I see it."
                    }
                ]
            },
            {
                "id": 1996261,
                "content": [
                    {
                        "username": "Deepak_8811",
                        "content": "Using Recursion.\\n\\n    int addDigits(int num) {\\n        //Base case\\n        if(num<10){\\n            return num;\\n        }\\n        long long int sum=0;\\n        while(num>0){\\n            int lastDigit=num%10;\\n            sum+=lastDigit;\\n            num/=10;\\n        }\\n        return addDigits(sum);\\n        \\n    }"
                    },
                    {
                        "username": "reachgurushanthavanti",
                        "content": "will it work for more than three digit number\\n"
                    },
                    {
                        "username": "PRANAB_DAS1",
                        "content": "Stop posting solutions in discussion..."
                    },
                    {
                        "username": "poorprogrammer",
                        "content": "https://youtu.be/F58LpmJ9lXs?si=xOEPCCkB1JysL7-q\\n\\nEasiest approach "
                    },
                    {
                        "username": "i_am_guts",
                        "content": "easy , even if you got looked at one of the answers in here , try yourself , in the end your coding matters not others!"
                    },
                    {
                        "username": "Anshika_0924",
                        "content": "What is the time complexity of Brute force recursion solution??"
                    },
                    {
                        "username": "priyagrajsharma2699",
                        "content": "class Solution {\\n    public int addDigits(int num) {\\n\\n\\n// hey geek it is super easy , have a look .\\n\\n// if number is zero then sum is 0 only simple.\\n        if(num == 0)\\n        {\\n            return 0 ;\\n        }\\n\\n// if num ko 9 se divide kar k reminder 0 aata h to number ka sum 9 h \\n// varna divide kar k jo bhi reminder aa raha hai vahi sum hai .\\n// eg . 22%9 = 4    , and sum of 2+2 = 4 . hence proved.\\n        else\\n        {\\n            return (num%9 == 0)?9 :num%9 ;\\n\\n        }   \\n    }\\n}\\n\\n\\n\\nwith explaination . if still any doubt comment I\\'ll reply ."
                    },
                    {
                        "username": "priyagrajsharma2699",
                        "content": "[@tejesh_kum](/tejesh_kum) https://youtu.be/F58LpmJ9lXs"
                    },
                    {
                        "username": "tejesh_kum",
                        "content": "solution samaj aagaya , lekin esa ho kyu raha hai ?\\nkisi bhi number ko 9 se mod karne se sum kese aa raha hai"
                    },
                    {
                        "username": "sefasayraci",
                        "content": "#include<stdio.h>\\n\\nint addDigits(int num) {\\n    int sum = 0;\\n    while (num > 0) {\\n        sum += num % 10;\\n        num /= 10;\\n    }\\n    return sum;\\n}\\nint main() {\\n    int input;\\n    printf(\"Enter a number: \");\\n    scanf(\"%d\", &input);\\n\\n    if (input < 10) {\\n        printf(\"Please enter a two-digit number: \");\\n        scanf(\"%d\", &input);\\n    }\\n\\n    int result = addDigits(input);\\n    printf(\"Result: %d\\\\n\", result);\\n\\n    return 0;\\n}\\n"
                    },
                    {
                        "username": "sefasayraci",
                        "content": "#include<stdio.h>\\n\\nint addDigits(int num) {\\n    int sum = 0;\\n    while (num > 0) {\\n        sum += num % 10;\\n        num /= 10;\\n    }\\n    return sum;\\n}\\n\\nint main() {\\n    int input;\\n    printf(\"Enter a number: \");\\n    scanf(\"%d\", &input);\\n\\n    if (input < 10) {\\n        printf(\"Please enter a two-digit number: \");\\n        scanf(\"%d\", &input);\\n    }\\n\\n    int result = addDigits(input);\\n    printf(\"Result: %d\\\\n\", result);\\n\\n    return 0;\\n}\\n"
                    },
                    {
                        "username": "CalCreate",
                        "content": "This question essentially asks you to find the digital root. \\n\\nWhen has the digital root ever applied to you in your job?"
                    },
                    {
                        "username": "tsuroku",
                        "content": "If I were to guess, I think it\\'s less about the actual problem and moreso thinking about how you can take a problem and create the most streamlined solution.\\n\\nWith this, I\\'ve seen many solutions that use while-loops, recursion, etc but I\\'ve created a solution that is a single line, meaning you can continually work on this and overtime make a shorter and more optimal solution. At least, that\\'s how I see it."
                    }
                ]
            },
            {
                "id": 1958911,
                "content": [
                    {
                        "username": "Deepak_8811",
                        "content": "Using Recursion.\\n\\n    int addDigits(int num) {\\n        //Base case\\n        if(num<10){\\n            return num;\\n        }\\n        long long int sum=0;\\n        while(num>0){\\n            int lastDigit=num%10;\\n            sum+=lastDigit;\\n            num/=10;\\n        }\\n        return addDigits(sum);\\n        \\n    }"
                    },
                    {
                        "username": "reachgurushanthavanti",
                        "content": "will it work for more than three digit number\\n"
                    },
                    {
                        "username": "PRANAB_DAS1",
                        "content": "Stop posting solutions in discussion..."
                    },
                    {
                        "username": "poorprogrammer",
                        "content": "https://youtu.be/F58LpmJ9lXs?si=xOEPCCkB1JysL7-q\\n\\nEasiest approach "
                    },
                    {
                        "username": "i_am_guts",
                        "content": "easy , even if you got looked at one of the answers in here , try yourself , in the end your coding matters not others!"
                    },
                    {
                        "username": "Anshika_0924",
                        "content": "What is the time complexity of Brute force recursion solution??"
                    },
                    {
                        "username": "priyagrajsharma2699",
                        "content": "class Solution {\\n    public int addDigits(int num) {\\n\\n\\n// hey geek it is super easy , have a look .\\n\\n// if number is zero then sum is 0 only simple.\\n        if(num == 0)\\n        {\\n            return 0 ;\\n        }\\n\\n// if num ko 9 se divide kar k reminder 0 aata h to number ka sum 9 h \\n// varna divide kar k jo bhi reminder aa raha hai vahi sum hai .\\n// eg . 22%9 = 4    , and sum of 2+2 = 4 . hence proved.\\n        else\\n        {\\n            return (num%9 == 0)?9 :num%9 ;\\n\\n        }   \\n    }\\n}\\n\\n\\n\\nwith explaination . if still any doubt comment I\\'ll reply ."
                    },
                    {
                        "username": "priyagrajsharma2699",
                        "content": "[@tejesh_kum](/tejesh_kum) https://youtu.be/F58LpmJ9lXs"
                    },
                    {
                        "username": "tejesh_kum",
                        "content": "solution samaj aagaya , lekin esa ho kyu raha hai ?\\nkisi bhi number ko 9 se mod karne se sum kese aa raha hai"
                    },
                    {
                        "username": "sefasayraci",
                        "content": "#include<stdio.h>\\n\\nint addDigits(int num) {\\n    int sum = 0;\\n    while (num > 0) {\\n        sum += num % 10;\\n        num /= 10;\\n    }\\n    return sum;\\n}\\nint main() {\\n    int input;\\n    printf(\"Enter a number: \");\\n    scanf(\"%d\", &input);\\n\\n    if (input < 10) {\\n        printf(\"Please enter a two-digit number: \");\\n        scanf(\"%d\", &input);\\n    }\\n\\n    int result = addDigits(input);\\n    printf(\"Result: %d\\\\n\", result);\\n\\n    return 0;\\n}\\n"
                    },
                    {
                        "username": "sefasayraci",
                        "content": "#include<stdio.h>\\n\\nint addDigits(int num) {\\n    int sum = 0;\\n    while (num > 0) {\\n        sum += num % 10;\\n        num /= 10;\\n    }\\n    return sum;\\n}\\n\\nint main() {\\n    int input;\\n    printf(\"Enter a number: \");\\n    scanf(\"%d\", &input);\\n\\n    if (input < 10) {\\n        printf(\"Please enter a two-digit number: \");\\n        scanf(\"%d\", &input);\\n    }\\n\\n    int result = addDigits(input);\\n    printf(\"Result: %d\\\\n\", result);\\n\\n    return 0;\\n}\\n"
                    },
                    {
                        "username": "CalCreate",
                        "content": "This question essentially asks you to find the digital root. \\n\\nWhen has the digital root ever applied to you in your job?"
                    },
                    {
                        "username": "tsuroku",
                        "content": "If I were to guess, I think it\\'s less about the actual problem and moreso thinking about how you can take a problem and create the most streamlined solution.\\n\\nWith this, I\\'ve seen many solutions that use while-loops, recursion, etc but I\\'ve created a solution that is a single line, meaning you can continually work on this and overtime make a shorter and more optimal solution. At least, that\\'s how I see it."
                    }
                ]
            },
            {
                "id": 1958733,
                "content": [
                    {
                        "username": "Deepak_8811",
                        "content": "Using Recursion.\\n\\n    int addDigits(int num) {\\n        //Base case\\n        if(num<10){\\n            return num;\\n        }\\n        long long int sum=0;\\n        while(num>0){\\n            int lastDigit=num%10;\\n            sum+=lastDigit;\\n            num/=10;\\n        }\\n        return addDigits(sum);\\n        \\n    }"
                    },
                    {
                        "username": "reachgurushanthavanti",
                        "content": "will it work for more than three digit number\\n"
                    },
                    {
                        "username": "PRANAB_DAS1",
                        "content": "Stop posting solutions in discussion..."
                    },
                    {
                        "username": "poorprogrammer",
                        "content": "https://youtu.be/F58LpmJ9lXs?si=xOEPCCkB1JysL7-q\\n\\nEasiest approach "
                    },
                    {
                        "username": "i_am_guts",
                        "content": "easy , even if you got looked at one of the answers in here , try yourself , in the end your coding matters not others!"
                    },
                    {
                        "username": "Anshika_0924",
                        "content": "What is the time complexity of Brute force recursion solution??"
                    },
                    {
                        "username": "priyagrajsharma2699",
                        "content": "class Solution {\\n    public int addDigits(int num) {\\n\\n\\n// hey geek it is super easy , have a look .\\n\\n// if number is zero then sum is 0 only simple.\\n        if(num == 0)\\n        {\\n            return 0 ;\\n        }\\n\\n// if num ko 9 se divide kar k reminder 0 aata h to number ka sum 9 h \\n// varna divide kar k jo bhi reminder aa raha hai vahi sum hai .\\n// eg . 22%9 = 4    , and sum of 2+2 = 4 . hence proved.\\n        else\\n        {\\n            return (num%9 == 0)?9 :num%9 ;\\n\\n        }   \\n    }\\n}\\n\\n\\n\\nwith explaination . if still any doubt comment I\\'ll reply ."
                    },
                    {
                        "username": "priyagrajsharma2699",
                        "content": "[@tejesh_kum](/tejesh_kum) https://youtu.be/F58LpmJ9lXs"
                    },
                    {
                        "username": "tejesh_kum",
                        "content": "solution samaj aagaya , lekin esa ho kyu raha hai ?\\nkisi bhi number ko 9 se mod karne se sum kese aa raha hai"
                    },
                    {
                        "username": "sefasayraci",
                        "content": "#include<stdio.h>\\n\\nint addDigits(int num) {\\n    int sum = 0;\\n    while (num > 0) {\\n        sum += num % 10;\\n        num /= 10;\\n    }\\n    return sum;\\n}\\nint main() {\\n    int input;\\n    printf(\"Enter a number: \");\\n    scanf(\"%d\", &input);\\n\\n    if (input < 10) {\\n        printf(\"Please enter a two-digit number: \");\\n        scanf(\"%d\", &input);\\n    }\\n\\n    int result = addDigits(input);\\n    printf(\"Result: %d\\\\n\", result);\\n\\n    return 0;\\n}\\n"
                    },
                    {
                        "username": "sefasayraci",
                        "content": "#include<stdio.h>\\n\\nint addDigits(int num) {\\n    int sum = 0;\\n    while (num > 0) {\\n        sum += num % 10;\\n        num /= 10;\\n    }\\n    return sum;\\n}\\n\\nint main() {\\n    int input;\\n    printf(\"Enter a number: \");\\n    scanf(\"%d\", &input);\\n\\n    if (input < 10) {\\n        printf(\"Please enter a two-digit number: \");\\n        scanf(\"%d\", &input);\\n    }\\n\\n    int result = addDigits(input);\\n    printf(\"Result: %d\\\\n\", result);\\n\\n    return 0;\\n}\\n"
                    },
                    {
                        "username": "CalCreate",
                        "content": "This question essentially asks you to find the digital root. \\n\\nWhen has the digital root ever applied to you in your job?"
                    },
                    {
                        "username": "tsuroku",
                        "content": "If I were to guess, I think it\\'s less about the actual problem and moreso thinking about how you can take a problem and create the most streamlined solution.\\n\\nWith this, I\\'ve seen many solutions that use while-loops, recursion, etc but I\\'ve created a solution that is a single line, meaning you can continually work on this and overtime make a shorter and more optimal solution. At least, that\\'s how I see it."
                    }
                ]
            },
            {
                "id": 1958732,
                "content": [
                    {
                        "username": "Deepak_8811",
                        "content": "Using Recursion.\\n\\n    int addDigits(int num) {\\n        //Base case\\n        if(num<10){\\n            return num;\\n        }\\n        long long int sum=0;\\n        while(num>0){\\n            int lastDigit=num%10;\\n            sum+=lastDigit;\\n            num/=10;\\n        }\\n        return addDigits(sum);\\n        \\n    }"
                    },
                    {
                        "username": "reachgurushanthavanti",
                        "content": "will it work for more than three digit number\\n"
                    },
                    {
                        "username": "PRANAB_DAS1",
                        "content": "Stop posting solutions in discussion..."
                    },
                    {
                        "username": "poorprogrammer",
                        "content": "https://youtu.be/F58LpmJ9lXs?si=xOEPCCkB1JysL7-q\\n\\nEasiest approach "
                    },
                    {
                        "username": "i_am_guts",
                        "content": "easy , even if you got looked at one of the answers in here , try yourself , in the end your coding matters not others!"
                    },
                    {
                        "username": "Anshika_0924",
                        "content": "What is the time complexity of Brute force recursion solution??"
                    },
                    {
                        "username": "priyagrajsharma2699",
                        "content": "class Solution {\\n    public int addDigits(int num) {\\n\\n\\n// hey geek it is super easy , have a look .\\n\\n// if number is zero then sum is 0 only simple.\\n        if(num == 0)\\n        {\\n            return 0 ;\\n        }\\n\\n// if num ko 9 se divide kar k reminder 0 aata h to number ka sum 9 h \\n// varna divide kar k jo bhi reminder aa raha hai vahi sum hai .\\n// eg . 22%9 = 4    , and sum of 2+2 = 4 . hence proved.\\n        else\\n        {\\n            return (num%9 == 0)?9 :num%9 ;\\n\\n        }   \\n    }\\n}\\n\\n\\n\\nwith explaination . if still any doubt comment I\\'ll reply ."
                    },
                    {
                        "username": "priyagrajsharma2699",
                        "content": "[@tejesh_kum](/tejesh_kum) https://youtu.be/F58LpmJ9lXs"
                    },
                    {
                        "username": "tejesh_kum",
                        "content": "solution samaj aagaya , lekin esa ho kyu raha hai ?\\nkisi bhi number ko 9 se mod karne se sum kese aa raha hai"
                    },
                    {
                        "username": "sefasayraci",
                        "content": "#include<stdio.h>\\n\\nint addDigits(int num) {\\n    int sum = 0;\\n    while (num > 0) {\\n        sum += num % 10;\\n        num /= 10;\\n    }\\n    return sum;\\n}\\nint main() {\\n    int input;\\n    printf(\"Enter a number: \");\\n    scanf(\"%d\", &input);\\n\\n    if (input < 10) {\\n        printf(\"Please enter a two-digit number: \");\\n        scanf(\"%d\", &input);\\n    }\\n\\n    int result = addDigits(input);\\n    printf(\"Result: %d\\\\n\", result);\\n\\n    return 0;\\n}\\n"
                    },
                    {
                        "username": "sefasayraci",
                        "content": "#include<stdio.h>\\n\\nint addDigits(int num) {\\n    int sum = 0;\\n    while (num > 0) {\\n        sum += num % 10;\\n        num /= 10;\\n    }\\n    return sum;\\n}\\n\\nint main() {\\n    int input;\\n    printf(\"Enter a number: \");\\n    scanf(\"%d\", &input);\\n\\n    if (input < 10) {\\n        printf(\"Please enter a two-digit number: \");\\n        scanf(\"%d\", &input);\\n    }\\n\\n    int result = addDigits(input);\\n    printf(\"Result: %d\\\\n\", result);\\n\\n    return 0;\\n}\\n"
                    },
                    {
                        "username": "CalCreate",
                        "content": "This question essentially asks you to find the digital root. \\n\\nWhen has the digital root ever applied to you in your job?"
                    },
                    {
                        "username": "tsuroku",
                        "content": "If I were to guess, I think it\\'s less about the actual problem and moreso thinking about how you can take a problem and create the most streamlined solution.\\n\\nWith this, I\\'ve seen many solutions that use while-loops, recursion, etc but I\\'ve created a solution that is a single line, meaning you can continually work on this and overtime make a shorter and more optimal solution. At least, that\\'s how I see it."
                    }
                ]
            },
            {
                "id": 1918245,
                "content": [
                    {
                        "username": "Deepak_8811",
                        "content": "Using Recursion.\\n\\n    int addDigits(int num) {\\n        //Base case\\n        if(num<10){\\n            return num;\\n        }\\n        long long int sum=0;\\n        while(num>0){\\n            int lastDigit=num%10;\\n            sum+=lastDigit;\\n            num/=10;\\n        }\\n        return addDigits(sum);\\n        \\n    }"
                    },
                    {
                        "username": "reachgurushanthavanti",
                        "content": "will it work for more than three digit number\\n"
                    },
                    {
                        "username": "PRANAB_DAS1",
                        "content": "Stop posting solutions in discussion..."
                    },
                    {
                        "username": "poorprogrammer",
                        "content": "https://youtu.be/F58LpmJ9lXs?si=xOEPCCkB1JysL7-q\\n\\nEasiest approach "
                    },
                    {
                        "username": "i_am_guts",
                        "content": "easy , even if you got looked at one of the answers in here , try yourself , in the end your coding matters not others!"
                    },
                    {
                        "username": "Anshika_0924",
                        "content": "What is the time complexity of Brute force recursion solution??"
                    },
                    {
                        "username": "priyagrajsharma2699",
                        "content": "class Solution {\\n    public int addDigits(int num) {\\n\\n\\n// hey geek it is super easy , have a look .\\n\\n// if number is zero then sum is 0 only simple.\\n        if(num == 0)\\n        {\\n            return 0 ;\\n        }\\n\\n// if num ko 9 se divide kar k reminder 0 aata h to number ka sum 9 h \\n// varna divide kar k jo bhi reminder aa raha hai vahi sum hai .\\n// eg . 22%9 = 4    , and sum of 2+2 = 4 . hence proved.\\n        else\\n        {\\n            return (num%9 == 0)?9 :num%9 ;\\n\\n        }   \\n    }\\n}\\n\\n\\n\\nwith explaination . if still any doubt comment I\\'ll reply ."
                    },
                    {
                        "username": "priyagrajsharma2699",
                        "content": "[@tejesh_kum](/tejesh_kum) https://youtu.be/F58LpmJ9lXs"
                    },
                    {
                        "username": "tejesh_kum",
                        "content": "solution samaj aagaya , lekin esa ho kyu raha hai ?\\nkisi bhi number ko 9 se mod karne se sum kese aa raha hai"
                    },
                    {
                        "username": "sefasayraci",
                        "content": "#include<stdio.h>\\n\\nint addDigits(int num) {\\n    int sum = 0;\\n    while (num > 0) {\\n        sum += num % 10;\\n        num /= 10;\\n    }\\n    return sum;\\n}\\nint main() {\\n    int input;\\n    printf(\"Enter a number: \");\\n    scanf(\"%d\", &input);\\n\\n    if (input < 10) {\\n        printf(\"Please enter a two-digit number: \");\\n        scanf(\"%d\", &input);\\n    }\\n\\n    int result = addDigits(input);\\n    printf(\"Result: %d\\\\n\", result);\\n\\n    return 0;\\n}\\n"
                    },
                    {
                        "username": "sefasayraci",
                        "content": "#include<stdio.h>\\n\\nint addDigits(int num) {\\n    int sum = 0;\\n    while (num > 0) {\\n        sum += num % 10;\\n        num /= 10;\\n    }\\n    return sum;\\n}\\n\\nint main() {\\n    int input;\\n    printf(\"Enter a number: \");\\n    scanf(\"%d\", &input);\\n\\n    if (input < 10) {\\n        printf(\"Please enter a two-digit number: \");\\n        scanf(\"%d\", &input);\\n    }\\n\\n    int result = addDigits(input);\\n    printf(\"Result: %d\\\\n\", result);\\n\\n    return 0;\\n}\\n"
                    },
                    {
                        "username": "CalCreate",
                        "content": "This question essentially asks you to find the digital root. \\n\\nWhen has the digital root ever applied to you in your job?"
                    },
                    {
                        "username": "tsuroku",
                        "content": "If I were to guess, I think it\\'s less about the actual problem and moreso thinking about how you can take a problem and create the most streamlined solution.\\n\\nWith this, I\\'ve seen many solutions that use while-loops, recursion, etc but I\\'ve created a solution that is a single line, meaning you can continually work on this and overtime make a shorter and more optimal solution. At least, that\\'s how I see it."
                    }
                ]
            },
            {
                "id": 1874738,
                "content": [
                    {
                        "username": "joyal_george",
                        "content": "what is this ?\n\nWrong Answer\nRuntime: 0 ms\nCase 1 : failed\nCase 2: passed\n\nInput of Case 1\n\nnum =\n38\nOutput\n11\nExpected\n2\n\ncorrect the error from your side\n(C++)"
                    },
                    {
                        "username": "Minatokun",
                        "content": "what? what? you have to bring it to single digit .Idk whats ur doubt it."
                    },
                    {
                        "username": "rafa2210",
                        "content": "Read the entire question carefully. You added the digits, and returned the sum. You have to take that result, and start over, again and again until the result of adding the digits results in a single digit value. In that test case, 38 = 3 + 8 = 11 = 1 + 1 = 2 (2 is a single digit, therefore the answer).\\n"
                    },
                    {
                        "username": "conquer",
                        "content": "when the input is \"1\" the expected result for the test case (120/1101) is \"1\". Shouldn\\'t it be \"0\" since \"1\" is already a one digit number."
                    },
                    {
                        "username": "rafa2210",
                        "content": "the sum of its digits is 1 though. 1 plus nothing = 1."
                    },
                    {
                        "username": "Minatokun",
                        "content": "To all the people who are saying \"dont post solution here\", Look at the fcking date of the solution posted !! discussion section wasnt available before. Its the leetcode algo who couldnt filter out the solutions out of here."
                    },
                    {
                        "username": "tsuroku",
                        "content": "Lads, can we not post solutions here? I got it by myself but others may not have and want a nudge in the right direction and not the answer, it\\'s just a bit of decency.\\n\\nThanks :)"
                    },
                    {
                        "username": "Minatokun",
                        "content": "those are old solution posted ,not new. Discussion wasnt present at that time. Its the leetcode algo who couldnt filter out the solutions."
                    },
                    {
                        "username": "TobiasKaufmann",
                        "content": "The topic of today\\'s question is different from that of the past two days."
                    },
                    {
                        "username": "psionl0",
                        "content": "Just when I feel relieved that I have a problem that I can solve in 10 seconds, it turns out that there is a bad-ass trick that would allow me to solve the problem in 1 line.\\n\\nI am sticking with my answer however. A number with at most 10 digits can be reduced to a single digit in at most 11 iterations which is effectively a O(1) run time."
                    },
                    {
                        "username": "jerryy147",
                        "content": "this is the first time i already did the daily in the past :)"
                    },
                    {
                        "username": "ImranNawar",
                        "content": "<b>If a number is completely divisible by 9, then the digital root of the answer is 9. Otherwise, the digital root is equal to the remainder obtained.</b>"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Hey Coder!\\nCheck out this C++ code that provides a simple and intuitive approach to solve the \"Add Digits\" problem. With step-by-step explanation, you\\'ll understand how the code works and be able to apply it to your own coding challenges. Don\\'t miss out on this easy and effective solution - click the link to learn more!\\nhttps://leetcode.com/problems/add-digits/solutions/3336914/easy-solution-with-explanation-beats-100-c-with-time-and-space-complexity/\\nKeep Coding!"
                    },
                    {
                        "username": "shauryahbtu",
                        "content": "Iterative approach \\n\\n`class Solution {\\npublic:\\n    int addDigits(int num) {\\n        int rem,sum = num;\\n        while(num>9){\\n            sum = 0;\\n            while(num){\\n                rem = num%10;\\n                sum += rem;\\n                num /= 10;\\n            }\\n            num = sum;\\n        }\\n        return sum;\\n    }\\n};`"
                    }
                ]
            },
            {
                "id": 1874622,
                "content": [
                    {
                        "username": "joyal_george",
                        "content": "what is this ?\n\nWrong Answer\nRuntime: 0 ms\nCase 1 : failed\nCase 2: passed\n\nInput of Case 1\n\nnum =\n38\nOutput\n11\nExpected\n2\n\ncorrect the error from your side\n(C++)"
                    },
                    {
                        "username": "Minatokun",
                        "content": "what? what? you have to bring it to single digit .Idk whats ur doubt it."
                    },
                    {
                        "username": "rafa2210",
                        "content": "Read the entire question carefully. You added the digits, and returned the sum. You have to take that result, and start over, again and again until the result of adding the digits results in a single digit value. In that test case, 38 = 3 + 8 = 11 = 1 + 1 = 2 (2 is a single digit, therefore the answer).\\n"
                    },
                    {
                        "username": "conquer",
                        "content": "when the input is \"1\" the expected result for the test case (120/1101) is \"1\". Shouldn\\'t it be \"0\" since \"1\" is already a one digit number."
                    },
                    {
                        "username": "rafa2210",
                        "content": "the sum of its digits is 1 though. 1 plus nothing = 1."
                    },
                    {
                        "username": "Minatokun",
                        "content": "To all the people who are saying \"dont post solution here\", Look at the fcking date of the solution posted !! discussion section wasnt available before. Its the leetcode algo who couldnt filter out the solutions out of here."
                    },
                    {
                        "username": "tsuroku",
                        "content": "Lads, can we not post solutions here? I got it by myself but others may not have and want a nudge in the right direction and not the answer, it\\'s just a bit of decency.\\n\\nThanks :)"
                    },
                    {
                        "username": "Minatokun",
                        "content": "those are old solution posted ,not new. Discussion wasnt present at that time. Its the leetcode algo who couldnt filter out the solutions."
                    },
                    {
                        "username": "TobiasKaufmann",
                        "content": "The topic of today\\'s question is different from that of the past two days."
                    },
                    {
                        "username": "psionl0",
                        "content": "Just when I feel relieved that I have a problem that I can solve in 10 seconds, it turns out that there is a bad-ass trick that would allow me to solve the problem in 1 line.\\n\\nI am sticking with my answer however. A number with at most 10 digits can be reduced to a single digit in at most 11 iterations which is effectively a O(1) run time."
                    },
                    {
                        "username": "jerryy147",
                        "content": "this is the first time i already did the daily in the past :)"
                    },
                    {
                        "username": "ImranNawar",
                        "content": "<b>If a number is completely divisible by 9, then the digital root of the answer is 9. Otherwise, the digital root is equal to the remainder obtained.</b>"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Hey Coder!\\nCheck out this C++ code that provides a simple and intuitive approach to solve the \"Add Digits\" problem. With step-by-step explanation, you\\'ll understand how the code works and be able to apply it to your own coding challenges. Don\\'t miss out on this easy and effective solution - click the link to learn more!\\nhttps://leetcode.com/problems/add-digits/solutions/3336914/easy-solution-with-explanation-beats-100-c-with-time-and-space-complexity/\\nKeep Coding!"
                    },
                    {
                        "username": "shauryahbtu",
                        "content": "Iterative approach \\n\\n`class Solution {\\npublic:\\n    int addDigits(int num) {\\n        int rem,sum = num;\\n        while(num>9){\\n            sum = 0;\\n            while(num){\\n                rem = num%10;\\n                sum += rem;\\n                num /= 10;\\n            }\\n            num = sum;\\n        }\\n        return sum;\\n    }\\n};`"
                    }
                ]
            },
            {
                "id": 1874591,
                "content": [
                    {
                        "username": "joyal_george",
                        "content": "what is this ?\n\nWrong Answer\nRuntime: 0 ms\nCase 1 : failed\nCase 2: passed\n\nInput of Case 1\n\nnum =\n38\nOutput\n11\nExpected\n2\n\ncorrect the error from your side\n(C++)"
                    },
                    {
                        "username": "Minatokun",
                        "content": "what? what? you have to bring it to single digit .Idk whats ur doubt it."
                    },
                    {
                        "username": "rafa2210",
                        "content": "Read the entire question carefully. You added the digits, and returned the sum. You have to take that result, and start over, again and again until the result of adding the digits results in a single digit value. In that test case, 38 = 3 + 8 = 11 = 1 + 1 = 2 (2 is a single digit, therefore the answer).\\n"
                    },
                    {
                        "username": "conquer",
                        "content": "when the input is \"1\" the expected result for the test case (120/1101) is \"1\". Shouldn\\'t it be \"0\" since \"1\" is already a one digit number."
                    },
                    {
                        "username": "rafa2210",
                        "content": "the sum of its digits is 1 though. 1 plus nothing = 1."
                    },
                    {
                        "username": "Minatokun",
                        "content": "To all the people who are saying \"dont post solution here\", Look at the fcking date of the solution posted !! discussion section wasnt available before. Its the leetcode algo who couldnt filter out the solutions out of here."
                    },
                    {
                        "username": "tsuroku",
                        "content": "Lads, can we not post solutions here? I got it by myself but others may not have and want a nudge in the right direction and not the answer, it\\'s just a bit of decency.\\n\\nThanks :)"
                    },
                    {
                        "username": "Minatokun",
                        "content": "those are old solution posted ,not new. Discussion wasnt present at that time. Its the leetcode algo who couldnt filter out the solutions."
                    },
                    {
                        "username": "TobiasKaufmann",
                        "content": "The topic of today\\'s question is different from that of the past two days."
                    },
                    {
                        "username": "psionl0",
                        "content": "Just when I feel relieved that I have a problem that I can solve in 10 seconds, it turns out that there is a bad-ass trick that would allow me to solve the problem in 1 line.\\n\\nI am sticking with my answer however. A number with at most 10 digits can be reduced to a single digit in at most 11 iterations which is effectively a O(1) run time."
                    },
                    {
                        "username": "jerryy147",
                        "content": "this is the first time i already did the daily in the past :)"
                    },
                    {
                        "username": "ImranNawar",
                        "content": "<b>If a number is completely divisible by 9, then the digital root of the answer is 9. Otherwise, the digital root is equal to the remainder obtained.</b>"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Hey Coder!\\nCheck out this C++ code that provides a simple and intuitive approach to solve the \"Add Digits\" problem. With step-by-step explanation, you\\'ll understand how the code works and be able to apply it to your own coding challenges. Don\\'t miss out on this easy and effective solution - click the link to learn more!\\nhttps://leetcode.com/problems/add-digits/solutions/3336914/easy-solution-with-explanation-beats-100-c-with-time-and-space-complexity/\\nKeep Coding!"
                    },
                    {
                        "username": "shauryahbtu",
                        "content": "Iterative approach \\n\\n`class Solution {\\npublic:\\n    int addDigits(int num) {\\n        int rem,sum = num;\\n        while(num>9){\\n            sum = 0;\\n            while(num){\\n                rem = num%10;\\n                sum += rem;\\n                num /= 10;\\n            }\\n            num = sum;\\n        }\\n        return sum;\\n    }\\n};`"
                    }
                ]
            },
            {
                "id": 1874319,
                "content": [
                    {
                        "username": "joyal_george",
                        "content": "what is this ?\n\nWrong Answer\nRuntime: 0 ms\nCase 1 : failed\nCase 2: passed\n\nInput of Case 1\n\nnum =\n38\nOutput\n11\nExpected\n2\n\ncorrect the error from your side\n(C++)"
                    },
                    {
                        "username": "Minatokun",
                        "content": "what? what? you have to bring it to single digit .Idk whats ur doubt it."
                    },
                    {
                        "username": "rafa2210",
                        "content": "Read the entire question carefully. You added the digits, and returned the sum. You have to take that result, and start over, again and again until the result of adding the digits results in a single digit value. In that test case, 38 = 3 + 8 = 11 = 1 + 1 = 2 (2 is a single digit, therefore the answer).\\n"
                    },
                    {
                        "username": "conquer",
                        "content": "when the input is \"1\" the expected result for the test case (120/1101) is \"1\". Shouldn\\'t it be \"0\" since \"1\" is already a one digit number."
                    },
                    {
                        "username": "rafa2210",
                        "content": "the sum of its digits is 1 though. 1 plus nothing = 1."
                    },
                    {
                        "username": "Minatokun",
                        "content": "To all the people who are saying \"dont post solution here\", Look at the fcking date of the solution posted !! discussion section wasnt available before. Its the leetcode algo who couldnt filter out the solutions out of here."
                    },
                    {
                        "username": "tsuroku",
                        "content": "Lads, can we not post solutions here? I got it by myself but others may not have and want a nudge in the right direction and not the answer, it\\'s just a bit of decency.\\n\\nThanks :)"
                    },
                    {
                        "username": "Minatokun",
                        "content": "those are old solution posted ,not new. Discussion wasnt present at that time. Its the leetcode algo who couldnt filter out the solutions."
                    },
                    {
                        "username": "TobiasKaufmann",
                        "content": "The topic of today\\'s question is different from that of the past two days."
                    },
                    {
                        "username": "psionl0",
                        "content": "Just when I feel relieved that I have a problem that I can solve in 10 seconds, it turns out that there is a bad-ass trick that would allow me to solve the problem in 1 line.\\n\\nI am sticking with my answer however. A number with at most 10 digits can be reduced to a single digit in at most 11 iterations which is effectively a O(1) run time."
                    },
                    {
                        "username": "jerryy147",
                        "content": "this is the first time i already did the daily in the past :)"
                    },
                    {
                        "username": "ImranNawar",
                        "content": "<b>If a number is completely divisible by 9, then the digital root of the answer is 9. Otherwise, the digital root is equal to the remainder obtained.</b>"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Hey Coder!\\nCheck out this C++ code that provides a simple and intuitive approach to solve the \"Add Digits\" problem. With step-by-step explanation, you\\'ll understand how the code works and be able to apply it to your own coding challenges. Don\\'t miss out on this easy and effective solution - click the link to learn more!\\nhttps://leetcode.com/problems/add-digits/solutions/3336914/easy-solution-with-explanation-beats-100-c-with-time-and-space-complexity/\\nKeep Coding!"
                    },
                    {
                        "username": "shauryahbtu",
                        "content": "Iterative approach \\n\\n`class Solution {\\npublic:\\n    int addDigits(int num) {\\n        int rem,sum = num;\\n        while(num>9){\\n            sum = 0;\\n            while(num){\\n                rem = num%10;\\n                sum += rem;\\n                num /= 10;\\n            }\\n            num = sum;\\n        }\\n        return sum;\\n    }\\n};`"
                    }
                ]
            },
            {
                "id": 1874107,
                "content": [
                    {
                        "username": "joyal_george",
                        "content": "what is this ?\n\nWrong Answer\nRuntime: 0 ms\nCase 1 : failed\nCase 2: passed\n\nInput of Case 1\n\nnum =\n38\nOutput\n11\nExpected\n2\n\ncorrect the error from your side\n(C++)"
                    },
                    {
                        "username": "Minatokun",
                        "content": "what? what? you have to bring it to single digit .Idk whats ur doubt it."
                    },
                    {
                        "username": "rafa2210",
                        "content": "Read the entire question carefully. You added the digits, and returned the sum. You have to take that result, and start over, again and again until the result of adding the digits results in a single digit value. In that test case, 38 = 3 + 8 = 11 = 1 + 1 = 2 (2 is a single digit, therefore the answer).\\n"
                    },
                    {
                        "username": "conquer",
                        "content": "when the input is \"1\" the expected result for the test case (120/1101) is \"1\". Shouldn\\'t it be \"0\" since \"1\" is already a one digit number."
                    },
                    {
                        "username": "rafa2210",
                        "content": "the sum of its digits is 1 though. 1 plus nothing = 1."
                    },
                    {
                        "username": "Minatokun",
                        "content": "To all the people who are saying \"dont post solution here\", Look at the fcking date of the solution posted !! discussion section wasnt available before. Its the leetcode algo who couldnt filter out the solutions out of here."
                    },
                    {
                        "username": "tsuroku",
                        "content": "Lads, can we not post solutions here? I got it by myself but others may not have and want a nudge in the right direction and not the answer, it\\'s just a bit of decency.\\n\\nThanks :)"
                    },
                    {
                        "username": "Minatokun",
                        "content": "those are old solution posted ,not new. Discussion wasnt present at that time. Its the leetcode algo who couldnt filter out the solutions."
                    },
                    {
                        "username": "TobiasKaufmann",
                        "content": "The topic of today\\'s question is different from that of the past two days."
                    },
                    {
                        "username": "psionl0",
                        "content": "Just when I feel relieved that I have a problem that I can solve in 10 seconds, it turns out that there is a bad-ass trick that would allow me to solve the problem in 1 line.\\n\\nI am sticking with my answer however. A number with at most 10 digits can be reduced to a single digit in at most 11 iterations which is effectively a O(1) run time."
                    },
                    {
                        "username": "jerryy147",
                        "content": "this is the first time i already did the daily in the past :)"
                    },
                    {
                        "username": "ImranNawar",
                        "content": "<b>If a number is completely divisible by 9, then the digital root of the answer is 9. Otherwise, the digital root is equal to the remainder obtained.</b>"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Hey Coder!\\nCheck out this C++ code that provides a simple and intuitive approach to solve the \"Add Digits\" problem. With step-by-step explanation, you\\'ll understand how the code works and be able to apply it to your own coding challenges. Don\\'t miss out on this easy and effective solution - click the link to learn more!\\nhttps://leetcode.com/problems/add-digits/solutions/3336914/easy-solution-with-explanation-beats-100-c-with-time-and-space-complexity/\\nKeep Coding!"
                    },
                    {
                        "username": "shauryahbtu",
                        "content": "Iterative approach \\n\\n`class Solution {\\npublic:\\n    int addDigits(int num) {\\n        int rem,sum = num;\\n        while(num>9){\\n            sum = 0;\\n            while(num){\\n                rem = num%10;\\n                sum += rem;\\n                num /= 10;\\n            }\\n            num = sum;\\n        }\\n        return sum;\\n    }\\n};`"
                    }
                ]
            },
            {
                "id": 1874097,
                "content": [
                    {
                        "username": "joyal_george",
                        "content": "what is this ?\n\nWrong Answer\nRuntime: 0 ms\nCase 1 : failed\nCase 2: passed\n\nInput of Case 1\n\nnum =\n38\nOutput\n11\nExpected\n2\n\ncorrect the error from your side\n(C++)"
                    },
                    {
                        "username": "Minatokun",
                        "content": "what? what? you have to bring it to single digit .Idk whats ur doubt it."
                    },
                    {
                        "username": "rafa2210",
                        "content": "Read the entire question carefully. You added the digits, and returned the sum. You have to take that result, and start over, again and again until the result of adding the digits results in a single digit value. In that test case, 38 = 3 + 8 = 11 = 1 + 1 = 2 (2 is a single digit, therefore the answer).\\n"
                    },
                    {
                        "username": "conquer",
                        "content": "when the input is \"1\" the expected result for the test case (120/1101) is \"1\". Shouldn\\'t it be \"0\" since \"1\" is already a one digit number."
                    },
                    {
                        "username": "rafa2210",
                        "content": "the sum of its digits is 1 though. 1 plus nothing = 1."
                    },
                    {
                        "username": "Minatokun",
                        "content": "To all the people who are saying \"dont post solution here\", Look at the fcking date of the solution posted !! discussion section wasnt available before. Its the leetcode algo who couldnt filter out the solutions out of here."
                    },
                    {
                        "username": "tsuroku",
                        "content": "Lads, can we not post solutions here? I got it by myself but others may not have and want a nudge in the right direction and not the answer, it\\'s just a bit of decency.\\n\\nThanks :)"
                    },
                    {
                        "username": "Minatokun",
                        "content": "those are old solution posted ,not new. Discussion wasnt present at that time. Its the leetcode algo who couldnt filter out the solutions."
                    },
                    {
                        "username": "TobiasKaufmann",
                        "content": "The topic of today\\'s question is different from that of the past two days."
                    },
                    {
                        "username": "psionl0",
                        "content": "Just when I feel relieved that I have a problem that I can solve in 10 seconds, it turns out that there is a bad-ass trick that would allow me to solve the problem in 1 line.\\n\\nI am sticking with my answer however. A number with at most 10 digits can be reduced to a single digit in at most 11 iterations which is effectively a O(1) run time."
                    },
                    {
                        "username": "jerryy147",
                        "content": "this is the first time i already did the daily in the past :)"
                    },
                    {
                        "username": "ImranNawar",
                        "content": "<b>If a number is completely divisible by 9, then the digital root of the answer is 9. Otherwise, the digital root is equal to the remainder obtained.</b>"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Hey Coder!\\nCheck out this C++ code that provides a simple and intuitive approach to solve the \"Add Digits\" problem. With step-by-step explanation, you\\'ll understand how the code works and be able to apply it to your own coding challenges. Don\\'t miss out on this easy and effective solution - click the link to learn more!\\nhttps://leetcode.com/problems/add-digits/solutions/3336914/easy-solution-with-explanation-beats-100-c-with-time-and-space-complexity/\\nKeep Coding!"
                    },
                    {
                        "username": "shauryahbtu",
                        "content": "Iterative approach \\n\\n`class Solution {\\npublic:\\n    int addDigits(int num) {\\n        int rem,sum = num;\\n        while(num>9){\\n            sum = 0;\\n            while(num){\\n                rem = num%10;\\n                sum += rem;\\n                num /= 10;\\n            }\\n            num = sum;\\n        }\\n        return sum;\\n    }\\n};`"
                    }
                ]
            },
            {
                "id": 1874082,
                "content": [
                    {
                        "username": "joyal_george",
                        "content": "what is this ?\n\nWrong Answer\nRuntime: 0 ms\nCase 1 : failed\nCase 2: passed\n\nInput of Case 1\n\nnum =\n38\nOutput\n11\nExpected\n2\n\ncorrect the error from your side\n(C++)"
                    },
                    {
                        "username": "Minatokun",
                        "content": "what? what? you have to bring it to single digit .Idk whats ur doubt it."
                    },
                    {
                        "username": "rafa2210",
                        "content": "Read the entire question carefully. You added the digits, and returned the sum. You have to take that result, and start over, again and again until the result of adding the digits results in a single digit value. In that test case, 38 = 3 + 8 = 11 = 1 + 1 = 2 (2 is a single digit, therefore the answer).\\n"
                    },
                    {
                        "username": "conquer",
                        "content": "when the input is \"1\" the expected result for the test case (120/1101) is \"1\". Shouldn\\'t it be \"0\" since \"1\" is already a one digit number."
                    },
                    {
                        "username": "rafa2210",
                        "content": "the sum of its digits is 1 though. 1 plus nothing = 1."
                    },
                    {
                        "username": "Minatokun",
                        "content": "To all the people who are saying \"dont post solution here\", Look at the fcking date of the solution posted !! discussion section wasnt available before. Its the leetcode algo who couldnt filter out the solutions out of here."
                    },
                    {
                        "username": "tsuroku",
                        "content": "Lads, can we not post solutions here? I got it by myself but others may not have and want a nudge in the right direction and not the answer, it\\'s just a bit of decency.\\n\\nThanks :)"
                    },
                    {
                        "username": "Minatokun",
                        "content": "those are old solution posted ,not new. Discussion wasnt present at that time. Its the leetcode algo who couldnt filter out the solutions."
                    },
                    {
                        "username": "TobiasKaufmann",
                        "content": "The topic of today\\'s question is different from that of the past two days."
                    },
                    {
                        "username": "psionl0",
                        "content": "Just when I feel relieved that I have a problem that I can solve in 10 seconds, it turns out that there is a bad-ass trick that would allow me to solve the problem in 1 line.\\n\\nI am sticking with my answer however. A number with at most 10 digits can be reduced to a single digit in at most 11 iterations which is effectively a O(1) run time."
                    },
                    {
                        "username": "jerryy147",
                        "content": "this is the first time i already did the daily in the past :)"
                    },
                    {
                        "username": "ImranNawar",
                        "content": "<b>If a number is completely divisible by 9, then the digital root of the answer is 9. Otherwise, the digital root is equal to the remainder obtained.</b>"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Hey Coder!\\nCheck out this C++ code that provides a simple and intuitive approach to solve the \"Add Digits\" problem. With step-by-step explanation, you\\'ll understand how the code works and be able to apply it to your own coding challenges. Don\\'t miss out on this easy and effective solution - click the link to learn more!\\nhttps://leetcode.com/problems/add-digits/solutions/3336914/easy-solution-with-explanation-beats-100-c-with-time-and-space-complexity/\\nKeep Coding!"
                    },
                    {
                        "username": "shauryahbtu",
                        "content": "Iterative approach \\n\\n`class Solution {\\npublic:\\n    int addDigits(int num) {\\n        int rem,sum = num;\\n        while(num>9){\\n            sum = 0;\\n            while(num){\\n                rem = num%10;\\n                sum += rem;\\n                num /= 10;\\n            }\\n            num = sum;\\n        }\\n        return sum;\\n    }\\n};`"
                    }
                ]
            },
            {
                "id": 1874081,
                "content": [
                    {
                        "username": "joyal_george",
                        "content": "what is this ?\n\nWrong Answer\nRuntime: 0 ms\nCase 1 : failed\nCase 2: passed\n\nInput of Case 1\n\nnum =\n38\nOutput\n11\nExpected\n2\n\ncorrect the error from your side\n(C++)"
                    },
                    {
                        "username": "Minatokun",
                        "content": "what? what? you have to bring it to single digit .Idk whats ur doubt it."
                    },
                    {
                        "username": "rafa2210",
                        "content": "Read the entire question carefully. You added the digits, and returned the sum. You have to take that result, and start over, again and again until the result of adding the digits results in a single digit value. In that test case, 38 = 3 + 8 = 11 = 1 + 1 = 2 (2 is a single digit, therefore the answer).\\n"
                    },
                    {
                        "username": "conquer",
                        "content": "when the input is \"1\" the expected result for the test case (120/1101) is \"1\". Shouldn\\'t it be \"0\" since \"1\" is already a one digit number."
                    },
                    {
                        "username": "rafa2210",
                        "content": "the sum of its digits is 1 though. 1 plus nothing = 1."
                    },
                    {
                        "username": "Minatokun",
                        "content": "To all the people who are saying \"dont post solution here\", Look at the fcking date of the solution posted !! discussion section wasnt available before. Its the leetcode algo who couldnt filter out the solutions out of here."
                    },
                    {
                        "username": "tsuroku",
                        "content": "Lads, can we not post solutions here? I got it by myself but others may not have and want a nudge in the right direction and not the answer, it\\'s just a bit of decency.\\n\\nThanks :)"
                    },
                    {
                        "username": "Minatokun",
                        "content": "those are old solution posted ,not new. Discussion wasnt present at that time. Its the leetcode algo who couldnt filter out the solutions."
                    },
                    {
                        "username": "TobiasKaufmann",
                        "content": "The topic of today\\'s question is different from that of the past two days."
                    },
                    {
                        "username": "psionl0",
                        "content": "Just when I feel relieved that I have a problem that I can solve in 10 seconds, it turns out that there is a bad-ass trick that would allow me to solve the problem in 1 line.\\n\\nI am sticking with my answer however. A number with at most 10 digits can be reduced to a single digit in at most 11 iterations which is effectively a O(1) run time."
                    },
                    {
                        "username": "jerryy147",
                        "content": "this is the first time i already did the daily in the past :)"
                    },
                    {
                        "username": "ImranNawar",
                        "content": "<b>If a number is completely divisible by 9, then the digital root of the answer is 9. Otherwise, the digital root is equal to the remainder obtained.</b>"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Hey Coder!\\nCheck out this C++ code that provides a simple and intuitive approach to solve the \"Add Digits\" problem. With step-by-step explanation, you\\'ll understand how the code works and be able to apply it to your own coding challenges. Don\\'t miss out on this easy and effective solution - click the link to learn more!\\nhttps://leetcode.com/problems/add-digits/solutions/3336914/easy-solution-with-explanation-beats-100-c-with-time-and-space-complexity/\\nKeep Coding!"
                    },
                    {
                        "username": "shauryahbtu",
                        "content": "Iterative approach \\n\\n`class Solution {\\npublic:\\n    int addDigits(int num) {\\n        int rem,sum = num;\\n        while(num>9){\\n            sum = 0;\\n            while(num){\\n                rem = num%10;\\n                sum += rem;\\n                num /= 10;\\n            }\\n            num = sum;\\n        }\\n        return sum;\\n    }\\n};`"
                    }
                ]
            },
            {
                "id": 1842507,
                "content": [
                    {
                        "username": "joyal_george",
                        "content": "what is this ?\n\nWrong Answer\nRuntime: 0 ms\nCase 1 : failed\nCase 2: passed\n\nInput of Case 1\n\nnum =\n38\nOutput\n11\nExpected\n2\n\ncorrect the error from your side\n(C++)"
                    },
                    {
                        "username": "Minatokun",
                        "content": "what? what? you have to bring it to single digit .Idk whats ur doubt it."
                    },
                    {
                        "username": "rafa2210",
                        "content": "Read the entire question carefully. You added the digits, and returned the sum. You have to take that result, and start over, again and again until the result of adding the digits results in a single digit value. In that test case, 38 = 3 + 8 = 11 = 1 + 1 = 2 (2 is a single digit, therefore the answer).\\n"
                    },
                    {
                        "username": "conquer",
                        "content": "when the input is \"1\" the expected result for the test case (120/1101) is \"1\". Shouldn\\'t it be \"0\" since \"1\" is already a one digit number."
                    },
                    {
                        "username": "rafa2210",
                        "content": "the sum of its digits is 1 though. 1 plus nothing = 1."
                    },
                    {
                        "username": "Minatokun",
                        "content": "To all the people who are saying \"dont post solution here\", Look at the fcking date of the solution posted !! discussion section wasnt available before. Its the leetcode algo who couldnt filter out the solutions out of here."
                    },
                    {
                        "username": "tsuroku",
                        "content": "Lads, can we not post solutions here? I got it by myself but others may not have and want a nudge in the right direction and not the answer, it\\'s just a bit of decency.\\n\\nThanks :)"
                    },
                    {
                        "username": "Minatokun",
                        "content": "those are old solution posted ,not new. Discussion wasnt present at that time. Its the leetcode algo who couldnt filter out the solutions."
                    },
                    {
                        "username": "TobiasKaufmann",
                        "content": "The topic of today\\'s question is different from that of the past two days."
                    },
                    {
                        "username": "psionl0",
                        "content": "Just when I feel relieved that I have a problem that I can solve in 10 seconds, it turns out that there is a bad-ass trick that would allow me to solve the problem in 1 line.\\n\\nI am sticking with my answer however. A number with at most 10 digits can be reduced to a single digit in at most 11 iterations which is effectively a O(1) run time."
                    },
                    {
                        "username": "jerryy147",
                        "content": "this is the first time i already did the daily in the past :)"
                    },
                    {
                        "username": "ImranNawar",
                        "content": "<b>If a number is completely divisible by 9, then the digital root of the answer is 9. Otherwise, the digital root is equal to the remainder obtained.</b>"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Hey Coder!\\nCheck out this C++ code that provides a simple and intuitive approach to solve the \"Add Digits\" problem. With step-by-step explanation, you\\'ll understand how the code works and be able to apply it to your own coding challenges. Don\\'t miss out on this easy and effective solution - click the link to learn more!\\nhttps://leetcode.com/problems/add-digits/solutions/3336914/easy-solution-with-explanation-beats-100-c-with-time-and-space-complexity/\\nKeep Coding!"
                    },
                    {
                        "username": "shauryahbtu",
                        "content": "Iterative approach \\n\\n`class Solution {\\npublic:\\n    int addDigits(int num) {\\n        int rem,sum = num;\\n        while(num>9){\\n            sum = 0;\\n            while(num){\\n                rem = num%10;\\n                sum += rem;\\n                num /= 10;\\n            }\\n            num = sum;\\n        }\\n        return sum;\\n    }\\n};`"
                    }
                ]
            },
            {
                "id": 1801637,
                "content": [
                    {
                        "username": "joyal_george",
                        "content": "what is this ?\n\nWrong Answer\nRuntime: 0 ms\nCase 1 : failed\nCase 2: passed\n\nInput of Case 1\n\nnum =\n38\nOutput\n11\nExpected\n2\n\ncorrect the error from your side\n(C++)"
                    },
                    {
                        "username": "Minatokun",
                        "content": "what? what? you have to bring it to single digit .Idk whats ur doubt it."
                    },
                    {
                        "username": "rafa2210",
                        "content": "Read the entire question carefully. You added the digits, and returned the sum. You have to take that result, and start over, again and again until the result of adding the digits results in a single digit value. In that test case, 38 = 3 + 8 = 11 = 1 + 1 = 2 (2 is a single digit, therefore the answer).\\n"
                    },
                    {
                        "username": "conquer",
                        "content": "when the input is \"1\" the expected result for the test case (120/1101) is \"1\". Shouldn\\'t it be \"0\" since \"1\" is already a one digit number."
                    },
                    {
                        "username": "rafa2210",
                        "content": "the sum of its digits is 1 though. 1 plus nothing = 1."
                    },
                    {
                        "username": "Minatokun",
                        "content": "To all the people who are saying \"dont post solution here\", Look at the fcking date of the solution posted !! discussion section wasnt available before. Its the leetcode algo who couldnt filter out the solutions out of here."
                    },
                    {
                        "username": "tsuroku",
                        "content": "Lads, can we not post solutions here? I got it by myself but others may not have and want a nudge in the right direction and not the answer, it\\'s just a bit of decency.\\n\\nThanks :)"
                    },
                    {
                        "username": "Minatokun",
                        "content": "those are old solution posted ,not new. Discussion wasnt present at that time. Its the leetcode algo who couldnt filter out the solutions."
                    },
                    {
                        "username": "TobiasKaufmann",
                        "content": "The topic of today\\'s question is different from that of the past two days."
                    },
                    {
                        "username": "psionl0",
                        "content": "Just when I feel relieved that I have a problem that I can solve in 10 seconds, it turns out that there is a bad-ass trick that would allow me to solve the problem in 1 line.\\n\\nI am sticking with my answer however. A number with at most 10 digits can be reduced to a single digit in at most 11 iterations which is effectively a O(1) run time."
                    },
                    {
                        "username": "jerryy147",
                        "content": "this is the first time i already did the daily in the past :)"
                    },
                    {
                        "username": "ImranNawar",
                        "content": "<b>If a number is completely divisible by 9, then the digital root of the answer is 9. Otherwise, the digital root is equal to the remainder obtained.</b>"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Hey Coder!\\nCheck out this C++ code that provides a simple and intuitive approach to solve the \"Add Digits\" problem. With step-by-step explanation, you\\'ll understand how the code works and be able to apply it to your own coding challenges. Don\\'t miss out on this easy and effective solution - click the link to learn more!\\nhttps://leetcode.com/problems/add-digits/solutions/3336914/easy-solution-with-explanation-beats-100-c-with-time-and-space-complexity/\\nKeep Coding!"
                    },
                    {
                        "username": "shauryahbtu",
                        "content": "Iterative approach \\n\\n`class Solution {\\npublic:\\n    int addDigits(int num) {\\n        int rem,sum = num;\\n        while(num>9){\\n            sum = 0;\\n            while(num){\\n                rem = num%10;\\n                sum += rem;\\n                num /= 10;\\n            }\\n            num = sum;\\n        }\\n        return sum;\\n    }\\n};`"
                    }
                ]
            }
        ]
    },
    {
        "title": "Rearrange String k Distance Apart",
        "question_content": null,
        "solutions": [],
        "discussions": [
            {
                "id": 1564769,
                "content": [
                    {
                        "username": "ColinBin",
                        "content": "It took me some time to understand why should we pick the char with maximum remaining count. The first thought was that it seems more \"urgent\". But that does not convince myself. \\n\\nFor those who are familiar with EDF (earilest deadline first) algorithm in scheduling, this problem is actually (I think) a different statement or a variation of the original scheduling problem.\\n\\nBefore filling in the first position, think about this: **what is the deadline for the first occurance of every character?** e.g. \"aaabbc\" and k=2. \\n\\nIn this case, deadline for \"a\" is index 1, that is, if we do not fill the first \"a\" at index 0 or index 1, we cannot finish the job. Deadline for b is 3 and deadline for c is 5. Thus we choose the one with most urgent deadline.\\n\\n**Therefore, the logic behind choosing maxiumum remaining count is that the char with larger remaining count has a more urgent deadline.**  \\n\\nThe second \"a\" will not \"appear\" until 2 steps after where we put the first \"a\". It will come with a different deadline than when there are 3 remaining \"a\"s."
                    },
                    {
                        "username": "fentoyal",
                        "content": "\"abeabac\"\\n\\n3\\n\\n@admin\\n\\nThe wrong code uses a similar idea as I stated in \\n\\nhttps://leetcode.com/discuss/108402/18-line-short-and-simple-solution-with-detailed-explanation\\n\\nBut instead of adding characters only at empty space between \"reference points\", the wrong code also put characters after last \"reference point\", and still got accepted. Actually the wrong code should have failed at (\"abeabac\", 3), so please add this one."
                    },
                    {
                        "username": "jje-",
                        "content": "For input,\\ns = \"abcdabcdabdeac\"\\nk = 4\\n\\nWhy is \"adcbadcbadbeac\" wrong answer?\\nIt has 4 distances for all characters."
                    },
                    {
                        "username": "gflanary",
                        "content": "Difficulty is inaccurate; this should be a medium."
                    }
                ]
            },
            {
                "id": 1571633,
                "content": [
                    {
                        "username": "ColinBin",
                        "content": "It took me some time to understand why should we pick the char with maximum remaining count. The first thought was that it seems more \"urgent\". But that does not convince myself. \\n\\nFor those who are familiar with EDF (earilest deadline first) algorithm in scheduling, this problem is actually (I think) a different statement or a variation of the original scheduling problem.\\n\\nBefore filling in the first position, think about this: **what is the deadline for the first occurance of every character?** e.g. \"aaabbc\" and k=2. \\n\\nIn this case, deadline for \"a\" is index 1, that is, if we do not fill the first \"a\" at index 0 or index 1, we cannot finish the job. Deadline for b is 3 and deadline for c is 5. Thus we choose the one with most urgent deadline.\\n\\n**Therefore, the logic behind choosing maxiumum remaining count is that the char with larger remaining count has a more urgent deadline.**  \\n\\nThe second \"a\" will not \"appear\" until 2 steps after where we put the first \"a\". It will come with a different deadline than when there are 3 remaining \"a\"s."
                    },
                    {
                        "username": "fentoyal",
                        "content": "\"abeabac\"\\n\\n3\\n\\n@admin\\n\\nThe wrong code uses a similar idea as I stated in \\n\\nhttps://leetcode.com/discuss/108402/18-line-short-and-simple-solution-with-detailed-explanation\\n\\nBut instead of adding characters only at empty space between \"reference points\", the wrong code also put characters after last \"reference point\", and still got accepted. Actually the wrong code should have failed at (\"abeabac\", 3), so please add this one."
                    },
                    {
                        "username": "jje-",
                        "content": "For input,\\ns = \"abcdabcdabdeac\"\\nk = 4\\n\\nWhy is \"adcbadcbadbeac\" wrong answer?\\nIt has 4 distances for all characters."
                    },
                    {
                        "username": "gflanary",
                        "content": "Difficulty is inaccurate; this should be a medium."
                    }
                ]
            },
            {
                "id": 2064259,
                "content": [
                    {
                        "username": "ColinBin",
                        "content": "It took me some time to understand why should we pick the char with maximum remaining count. The first thought was that it seems more \"urgent\". But that does not convince myself. \\n\\nFor those who are familiar with EDF (earilest deadline first) algorithm in scheduling, this problem is actually (I think) a different statement or a variation of the original scheduling problem.\\n\\nBefore filling in the first position, think about this: **what is the deadline for the first occurance of every character?** e.g. \"aaabbc\" and k=2. \\n\\nIn this case, deadline for \"a\" is index 1, that is, if we do not fill the first \"a\" at index 0 or index 1, we cannot finish the job. Deadline for b is 3 and deadline for c is 5. Thus we choose the one with most urgent deadline.\\n\\n**Therefore, the logic behind choosing maxiumum remaining count is that the char with larger remaining count has a more urgent deadline.**  \\n\\nThe second \"a\" will not \"appear\" until 2 steps after where we put the first \"a\". It will come with a different deadline than when there are 3 remaining \"a\"s."
                    },
                    {
                        "username": "fentoyal",
                        "content": "\"abeabac\"\\n\\n3\\n\\n@admin\\n\\nThe wrong code uses a similar idea as I stated in \\n\\nhttps://leetcode.com/discuss/108402/18-line-short-and-simple-solution-with-detailed-explanation\\n\\nBut instead of adding characters only at empty space between \"reference points\", the wrong code also put characters after last \"reference point\", and still got accepted. Actually the wrong code should have failed at (\"abeabac\", 3), so please add this one."
                    },
                    {
                        "username": "jje-",
                        "content": "For input,\\ns = \"abcdabcdabdeac\"\\nk = 4\\n\\nWhy is \"adcbadcbadbeac\" wrong answer?\\nIt has 4 distances for all characters."
                    },
                    {
                        "username": "gflanary",
                        "content": "Difficulty is inaccurate; this should be a medium."
                    }
                ]
            },
            {
                "id": 2049281,
                "content": [
                    {
                        "username": "ColinBin",
                        "content": "It took me some time to understand why should we pick the char with maximum remaining count. The first thought was that it seems more \"urgent\". But that does not convince myself. \\n\\nFor those who are familiar with EDF (earilest deadline first) algorithm in scheduling, this problem is actually (I think) a different statement or a variation of the original scheduling problem.\\n\\nBefore filling in the first position, think about this: **what is the deadline for the first occurance of every character?** e.g. \"aaabbc\" and k=2. \\n\\nIn this case, deadline for \"a\" is index 1, that is, if we do not fill the first \"a\" at index 0 or index 1, we cannot finish the job. Deadline for b is 3 and deadline for c is 5. Thus we choose the one with most urgent deadline.\\n\\n**Therefore, the logic behind choosing maxiumum remaining count is that the char with larger remaining count has a more urgent deadline.**  \\n\\nThe second \"a\" will not \"appear\" until 2 steps after where we put the first \"a\". It will come with a different deadline than when there are 3 remaining \"a\"s."
                    },
                    {
                        "username": "fentoyal",
                        "content": "\"abeabac\"\\n\\n3\\n\\n@admin\\n\\nThe wrong code uses a similar idea as I stated in \\n\\nhttps://leetcode.com/discuss/108402/18-line-short-and-simple-solution-with-detailed-explanation\\n\\nBut instead of adding characters only at empty space between \"reference points\", the wrong code also put characters after last \"reference point\", and still got accepted. Actually the wrong code should have failed at (\"abeabac\", 3), so please add this one."
                    },
                    {
                        "username": "jje-",
                        "content": "For input,\\ns = \"abcdabcdabdeac\"\\nk = 4\\n\\nWhy is \"adcbadcbadbeac\" wrong answer?\\nIt has 4 distances for all characters."
                    },
                    {
                        "username": "gflanary",
                        "content": "Difficulty is inaccurate; this should be a medium."
                    }
                ]
            }
        ]
    }
]