[
    {
        "title": "Minimum Moves to Convert String",
        "question_content": "You are given a string s consisting of n characters which are either 'X' or 'O'.\nA move is defined as selecting three consecutive characters of s and converting them to 'O'. Note that if a move is applied to the character 'O', it will stay the same.\nReturn the minimum number of moves required so that all the characters of s are converted to 'O'.\n&nbsp;\nExample 1:\n\nInput: s = \"XXX\"\nOutput: 1\nExplanation: XXX -> OOO\nWe select all the 3 characters and convert them in one move.\n\nExample 2:\n\nInput: s = \"XXOX\"\nOutput: 2\nExplanation: XXOX -> OOOX -> OOOO\nWe select the first 3 characters in the first move, and convert them to 'O'.\nThen we select the last 3 characters and convert them so that the final string contains all 'O's.\nExample 3:\n\nInput: s = \"OOOO\"\nOutput: 0\nExplanation: There are no 'X's in s to convert.\n\n&nbsp;\nConstraints:\n\n\t3 <= s.length <= 1000\n\ts[i] is either 'X' or 'O'.",
        "solutions": [
            {
                "id": 1500340,
                "title": "c-easy-to-understand-no-change-in-string",
                "content": "### When we encounter a \\'X\\' we will make a ***move***, irrespective of the fact that there might be \\'O\\'. After the move we will move the pointer by 3 steps since we are gauranteed that there won\\'t be any more \\'X\\' till the position we have swapped.\\n\\n```\\nint minimumMoves(string s) {\\n\\tint i = 0, n = s.length(), count = 0;\\n\\twhile (i < n) {\\n\\t\\tif (s[i] == \\'O\\')  // If we find \\'O\\' we simply move the pointer one step\\n\\t\\t\\ti++;\\n\\t\\telse\\n\\t\\t\\tcount++, i += 3;  // When we find \\'X\\' we increment the count and move the pointer by 3 steps\\n\\t}\\n\\treturn count;\\n}\\n```\\n\\n**Time Complexity: O(N)**\\n**Space Complexity: O(1)**",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nint minimumMoves(string s) {\\n\\tint i = 0, n = s.length(), count = 0;\\n\\twhile (i < n) {\\n\\t\\tif (s[i] == \\'O\\')  // If we find \\'O\\' we simply move the pointer one step\\n\\t\\t\\ti++;\\n\\t\\telse\\n\\t\\t\\tcount++, i += 3;  // When we find \\'X\\' we increment the count and move the pointer by 3 steps\\n\\t}\\n\\treturn count;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1500315,
                "title": "java-o-n-greedy-with-explanation-how-to-come-up-with-the-greedy-idea",
                "content": "Many of us can write the correct greedy strategy. But most discussions don\\'t tell how it works and why it works here. If you are interested please read the following part:)\\n\\nHere\\'s my explanation:\\n1.Because one move have to change three consecutive characters together. Change \\'OOO\\' is just a waste of opportunities. We can make list of all the possible situations:\\n```\\n// one X\\nOOX  OXO  XOO\\n//two X\\nXXO  XOX  OXX\\n//three X\\nXXX\\n```\\nAnd we define them as basic element here. All the move we will change is those basic elements.\\n2.There\\'s some identical situations. eg. \\n```\\n//OOX is identical to XOO and OXO when the sequence is OOXOO\\n//XXO is identical to OXX when the sequence is OXXO\\n```\\n3.Those situations indicates that we can get the same result (remove some X) and move step despite the basic elements are different.\\n4.We can find an representative for group of elements and here comes with our greedy strategy: once we find an X, we add one to the steps and move the pointer 3 indexes away.\\n\\nThe basic idea of greedy strategy is to find the common part of situations so we can detect them using less operations. (Just like the find a dophine use the hump in its head.)\\n\\n```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int i=0;\\n        int step=0;\\n        while(i<s.length()){\\n            if(s.charAt(i)==\\'X\\'){\\n                i=i+3;\\n                step++;\\n            }\\n            else{\\n                i++;\\n            }\\n        }\\n        return step;\\n    }\\n}\\n```\\nupvote if you really like it.",
                "solutionTags": [
                    "Java",
                    "Greedy"
                ],
                "code": "```\\n// one X\\nOOX  OXO  XOO\\n//two X\\nXXO  XOX  OXX\\n//three X\\nXXX\\n```\n```\\n//OOX is identical to XOO and OXO when the sequence is OOXOO\\n//XXO is identical to OXX when the sequence is OXXO\\n```\n```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int i=0;\\n        int step=0;\\n        while(i<s.length()){\\n            if(s.charAt(i)==\\'X\\'){\\n                i=i+3;\\n                step++;\\n            }\\n            else{\\n                i++;\\n            }\\n        }\\n        return step;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1500215,
                "title": "python3-scan",
                "content": "\\n```\\nclass Solution:\\n    def minimumMoves(self, s: str) -> int:\\n        ans = i = 0\\n        while i < len(s): \\n            if s[i] == \"X\": \\n                ans += 1\\n                i += 3\\n            else: i += 1\\n        return ans \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimumMoves(self, s: str) -> int:\\n        ans = i = 0\\n        while i < len(s): \\n            if s[i] == \"X\": \\n                ans += 1\\n                i += 3\\n            else: i += 1\\n        return ans \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1502238,
                "title": "greedy",
                "content": "When going left-to-right, we must change \\'X\\' we encounter. When it happen, we advance our pointer two additional steps, and increment the result.\\n\\n**C++**\\n```cpp\\nint minimumMoves(string s) {\\n    int res = 0;\\n    for (int i = 0; i < s.size(); i += s[i] == \\'X\\' ? 3 : 1)\\n        res += s[i] == \\'X\\';\\n    return res;\\n}\\n```",
                "solutionTags": [],
                "code": "```cpp\\nint minimumMoves(string s) {\\n    int res = 0;\\n    for (int i = 0; i < s.size(); i += s[i] == \\'X\\' ? 3 : 1)\\n        res += s[i] == \\'X\\';\\n    return res;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1507200,
                "title": "java-o-n-easy-to-understand-important-point",
                "content": "The important thing that you might be missing in your solution is that you might be counting 3 letter groups, which won\\'t give you the correct answer.\\n\\nWhy?\\n\\nThe reason for this is a test case like this:\\n```\\n\"XXXOXXOXOXO\"\\n```\\n\\nSo, if you\\'re counting letter groups of 3 at a time, you will count 1 for the first group `XXX` and then you will count 2 for `OXX` and then 3 for `OXO` and 4 for `XO`.\\n\\nBut this is not the minimum count, which in this case would be 3. \\n\\nHow?\\nYou should count 1 for `XXX` and then 2 for `XXO` (skip `O` in between) and then 3 for `XOX`.\\n\\nBasically, you should not be counting the `O`s which can be skipped.\\n\\nNow that you know why this won\\'t work, you might also get to the part that you should only increment your count when dealing with an `X`.\\n\\nSo a simple greedy approach would be something like this:\\n\\n```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int count = 0;\\n        \\n        for (int i = 0; i < s.length();) {            \\n            if (s.charAt(i) == \\'X\\') {\\n                count++;\\n                i += 3;\\n            } else {\\n                i++;\\n            }\\n        }\\n        \\n        return count;\\n    }\\n}\\n```\\n\\nThe greedy approach is that if we find an `X` we count a step immediately and skip over 3 (irrespective of `X` or `O` since we can deal it all in one step).\\n\\nHope it helps!",
                "solutionTags": [
                    "Java",
                    "Greedy"
                ],
                "code": "```\\n\"XXXOXXOXOXO\"\\n```\n```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int count = 0;\\n        \\n        for (int i = 0; i < s.length();) {            \\n            if (s.charAt(i) == \\'X\\') {\\n                count++;\\n                i += 3;\\n            } else {\\n                i++;\\n            }\\n        }\\n        \\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1500631,
                "title": "short-self-explanatory-3-approaches-c-beginner-friendly",
                "content": "**1.recursion**\\n```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s,int index=0) {\\n        if(index >= s.size()){\\n            return 0;\\n        }\\n        \\n        if(s[index] == \\'X\\'){\\n            return minimumMoves(s,index+3)+1;\\n        }else{\\n            return minimumMoves(s,index+1);\\n        }\\n    }\\n};\\n```\\n**2.traversing the complete string**\\n```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int moves = 0;\\n        s += \"OO\";\\n        for(int i = 0; i < s.size(); i++) {\\n            if(s[i] == \\'X\\') {\\n                s[i] = s[i + 1] = s[i + 2] = \\'O\\';\\n                moves++;\\n            }\\n        }\\n        return moves;\\n    }\\n};\\n```\\n**3.**\\n```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int moves=0;\\n        for(int i=0;i<s.length();){\\n            if(s[i]==\\'X\\'){\\n                i+=3,moves++;\\n            }else{\\n                i++;\\n            }\\n        }\\n        return moves;\\n    }\\n};\\n```\\n**Feel free to ask any question in the comment section.**\\nI hope that you\\'ve found the solution useful.\\nIn that case, **please do upvote and encourage me** to on my quest to document all leetcode problems\\uD83D\\uDE03\\nHappy Coding :)\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s,int index=0) {\\n        if(index >= s.size()){\\n            return 0;\\n        }\\n        \\n        if(s[index] == \\'X\\'){\\n            return minimumMoves(s,index+3)+1;\\n        }else{\\n            return minimumMoves(s,index+1);\\n        }\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int moves = 0;\\n        s += \"OO\";\\n        for(int i = 0; i < s.size(); i++) {\\n            if(s[i] == \\'X\\') {\\n                s[i] = s[i + 1] = s[i + 2] = \\'O\\';\\n                moves++;\\n            }\\n        }\\n        return moves;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int moves=0;\\n        for(int i=0;i<s.length();){\\n            if(s[i]==\\'X\\'){\\n                i+=3,moves++;\\n            }else{\\n                i++;\\n            }\\n        }\\n        return moves;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1500280,
                "title": "short-java-o-n-7-lines",
                "content": "Walk to the first X, jump three position to the right, walk to the next X, jump... Count the number of jumps.\\n```java\\n public int minimumMoves(String s) {\\n        int r = 0;\\n        for (int i = 0; i < s.length(); i++)\\n            if (s.charAt(i) == \\'X\\') {\\n                r++;\\n                i += 2;\\n            }\\n        return r;\\n    }",
                "solutionTags": [],
                "code": "Walk to the first X, jump three position to the right, walk to the next X, jump... Count the number of jumps.\\n```java\\n public int minimumMoves(String s) {\\n        int r = 0;\\n        for (int i = 0; i < s.length(); i++)\\n            if (s.charAt(i) == \\'X\\') {\\n                r++;\\n                i += 2;\\n            }\\n        return r;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1525838,
                "title": "easy-python-solution-faster-than-99-24-ms",
                "content": "# Easy Python Solution | Faster than 99% (24 ms)\\n**Runtime: 24 ms, faster than 99% of Python3 online submissions for Minimum Moves to Convert String.\\nMemory Usage: 14.2 MB.**\\n\\n```\\nclass Solution:\\n    def minimumMoves(self, s: str) -> int:\\n        i, m = 0, 0\\n        l = len(s)\\n\\n        while i < l:\\n            if s[i] != \\'X\\':\\n                i += 1\\n            elif \\'X\\' not in s[i:i+1]:\\n                i += 2\\n            elif \\'X\\' in s[i:i+2]:\\n                m += 1\\n                i += 3\\n        return m\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimumMoves(self, s: str) -> int:\\n        i, m = 0, 0\\n        l = len(s)\\n\\n        while i < l:\\n            if s[i] != \\'X\\':\\n                i += 1\\n            elif \\'X\\' not in s[i:i+1]:\\n                i += 2\\n            elif \\'X\\' in s[i:i+2]:\\n                m += 1\\n                i += 3\\n        return m\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2582665,
                "title": "java-while-loop-simple-logic",
                "content": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int i=0,step=0;\\n        while(i<s.length()){\\n            if(s.charAt(i)==\\'X\\'){\\n                i=i+3;\\n                step++;\\n            }\\n            else\\n                i++;\\n        }\\n        return step;\\n    }\\n}\\n```\\nKindly upvote if you like the code.",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int i=0,step=0;\\n        while(i<s.length()){\\n            if(s.charAt(i)==\\'X\\'){\\n                i=i+3;\\n                step++;\\n            }\\n            else\\n                i++;\\n        }\\n        return step;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2465815,
                "title": "c-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s)\\n    {\\n        int ans=0;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(s[i]==\\'X\\')\\n            {\\n                ans++;\\n                i=i+2;\\n            }\\n        }\\n        return ans;\\n        \\n    }\\n};\\n//if you find the solution useful plz upvote.",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int minimumMoves(string s)\\n    {\\n        int ans=0;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(s[i]==\\'X\\')\\n            {\\n                ans++;\\n                i=i+2;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1643340,
                "title": "python-3-simple-solution-o-n-with-explanation",
                "content": "General idea:\\n\\nGo through each character. if it\\'s X, then we count once and jump to 3 characters ahead; if it\\'s O, then we ignore it and go on. In this way, we count all the moves.\\n\\n```\\ndef minimumMoves(self, s: str) -> int:\\n        res, i = 0, 0\\n        while i < len(s):\\n            if s[i] == \\'X\\':\\n                i += 3\\n                res += 1\\n            else:\\n                i += 1\\n        return res",
                "solutionTags": [
                    "Python"
                ],
                "code": "General idea:\\n\\nGo through each character. if it\\'s X, then we count once and jump to 3 characters ahead; if it\\'s O, then we ignore it and go on. In this way, we count all the moves.\\n\\n```\\ndef minimumMoves(self, s: str) -> int:\\n        res, i = 0, 0\\n        while i < len(s):\\n            if s[i] == \\'X\\':\\n                i += 3\\n                res += 1\\n            else:\\n                i += 1\\n        return res",
                "codeTag": "Python3"
            },
            {
                "id": 1570446,
                "title": "java-0ms-100-faster",
                "content": "class Solution {\\n\\n    public int minimumMoves(String s){\\n        \\n        int step = 0;\\n        \\n        \\n        for(int i = 0; i < s.length(); i++){\\n            if(s.charAt(i) == \\'X\\'){\\n                step++;\\n                i+=2;\\n            }\\n        }\\n        \\n        return step;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n\\n    public int minimumMoves(String s){\\n        \\n        int step = 0;\\n        \\n        \\n        for(int i = 0; i < s.length(); i++){\\n            if(s.charAt(i) == \\'X\\'){\\n                step++;\\n                i+=2;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1519447,
                "title": "2027-javascript-1-line-solution",
                "content": "> Runtime: **83 ms**, faster than *47.58%* of JavaScript online submissions\\n> Memory Usage: **39.2 MB**, less than *17.18%* of JavaScript online submissions\\n\\n```javascript\\n const minimumMoves = s => s.match(/X.{0,2}/g)?.length ?? 0;\\n ```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```javascript\\n const minimumMoves = s => s.match(/X.{0,2}/g)?.length ?? 0;\\n ```",
                "codeTag": "Unknown"
            },
            {
                "id": 2592902,
                "title": "runtime-0-ms-faster-than-100-00-of-c-online-submissions",
                "content": "\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tint minimumMoves(string s) {\\n\\t\\t\\tint n = s.size();\\n\\t\\t\\tint ans = 0;\\n\\t\\t\\tfor(int i=0;i<n;i++){\\n\\t\\t\\t\\tif(s[i] == \\'X\\'){\\n\\t\\t\\t\\t\\tans++;\\n\\t\\t\\t\\t\\ti+=2;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn ans;\\n\\t\\t}\\n\\t};",
                "solutionTags": [],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tint minimumMoves(string s) {\\n\\t\\t\\tint n = s.size();\\n\\t\\t\\tint ans = 0;\\n\\t\\t\\tfor(int i=0;i<n;i++){\\n\\t\\t\\t\\tif(s[i] == \\'X\\'){\\n\\t\\t\\t\\t\\tans++;\\n\\t\\t\\t\\t\\ti+=2;\\n\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2510231,
                "title": "easy-to-understand-simple-java-code",
                "content": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int count = 0;\\n        for (int i = 0; i < s.length(); i++)\\n            if (s.charAt(i) == \\'X\\') {\\n                count++;\\n                i += 2;\\n            }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int count = 0;\\n        for (int i = 0; i < s.length(); i++)\\n            if (s.charAt(i) == \\'X\\') {\\n                count++;\\n                i += 2;\\n            }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1501503,
                "title": "c-with-simple-explanation",
                "content": "I just considered a sliding window of size \"3\". \\n- If the first element in the current window is \"O\", slide the index by 1\\n- Otherwise we slide the index by 3\\n\\nConsider an example \"XXXXX\"\\n>\\tIn the first window, the element at the first index (i=0) is \"X\"\\n\\t[ [XXX] XXX] \\n\\tSo, we convert the string to \\n\\t[ [OOO] XXX] \\n\\tand increment the index to i = i+3 = 0+3 = 3. The next window is \\n\\t[ OOO [XXX] ] \\n\\nConsider an example \"OXXXXX\"\\n> In the first window, the element at the first index (i=0) is \"O\"\\n[ [OXX] XXX] \\nSo, we retain the string \\n[ [OXX] XXX] \\nand increment the index to i = i+1 = 0+1 = 1. The next window is \\n[ O[XXX]XX] \\n\\n\\n```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        // Have a sliding window of size \"3\"\\n        // if the first element in the current window is \"O\", slide window 1 index to right\\n        // otherwise, slide window 3 indices\\n        \\n        int count = 0;\\n        int N = s.size();\\n        for(int i=3; i<=N; ) {\\n            if(s[i-3]==\\'O\\') {\\n                ++i;\\n            } \\n            else {\\n                s[i-3]=\\'O\\'; s[i-2]=\\'O\\'; s[i-1]=\\'O\\';\\n                ++count;\\n                i += 3;\\n            }\\n        }\\n        \\n        // if we have an \"X\" in the last window\\n        if(s[N-1]!=\\'O\\' || s[N-2]!=\\'O\\' || s[N-3]!=\\'O\\') {\\n            ++count;\\n        }\\n        \\n        return count;\\n    }\\n};\\n```\\n\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        // Have a sliding window of size \"3\"\\n        // if the first element in the current window is \"O\", slide window 1 index to right\\n        // otherwise, slide window 3 indices\\n        \\n        int count = 0;\\n        int N = s.size();\\n        for(int i=3; i<=N; ) {\\n            if(s[i-3]==\\'O\\') {\\n                ++i;\\n            } \\n            else {\\n                s[i-3]=\\'O\\'; s[i-2]=\\'O\\'; s[i-1]=\\'O\\';\\n                ++count;\\n                i += 3;\\n            }\\n        }\\n        \\n        // if we have an \"X\" in the last window\\n        if(s[N-1]!=\\'O\\' || s[N-2]!=\\'O\\' || s[N-3]!=\\'O\\') {\\n            ++count;\\n        }\\n        \\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1500745,
                "title": "c-simple-and-short-solution-0ms-faster-than-100",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int count = 0, i = 0;\\n        \\n        while (i < s.size()) {\\n            while (s[i] == \\'O\\') i++;\\n            \\n            if (s[i] == \\'X\\') {\\n                count++;\\n                i += 3;\\n            }\\n        }\\n        \\n        return count;\\n    }\\n};\\n```\\n**Like it? please upvote!**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int count = 0, i = 0;\\n        \\n        while (i < s.size()) {\\n            while (s[i] == \\'O\\') i++;\\n            \\n            if (s[i] == \\'X\\') {\\n                count++;\\n                i += 3;\\n            }\\n        }\\n        \\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1500163,
                "title": "c-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int count=0;\\n        for(int i=0;i<s.size()-2;i++)\\n        {\\n            if(s[i]==\\'X\\')\\n            {\\n                count++;\\n                s[i]=\\'O\\';\\n                s[i+1]=\\'O\\';\\n                s[i+2]=\\'O\\';\\n            }\\n        }\\n        if(s[s.size()-1]==\\'X\\' || s[s.size()-2]==\\'X\\')\\n            count++;\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int count=0;\\n        for(int i=0;i<s.size()-2;i++)\\n        {\\n            if(s[i]==\\'X\\')\\n            {\\n                count++;\\n                s[i]=\\'O\\';\\n                s[i+1]=\\'O\\';\\n                s[i+2]=\\'O\\';\\n            }\\n        }\\n        if(s[s.size()-1]==\\'X\\' || s[s.size()-2]==\\'X\\')\\n            count++;\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3486607,
                "title": "6-lines-c-easy-solution-o-n-time",
                "content": "# Approach\\nwhenever we find an \\'X\\' we will convert it and the following 2 elements (so, no need to check them anyways)\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n- Space complexity:\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int sum = 0;\\n        int sz = s.size();\\n        for(int i = 0 ; i <sz ; i++) {\\n            while(i<sz && s[i]==\\'X\\') sum++, i+=3;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int sum = 0;\\n        int sz = s.size();\\n        for(int i = 0 ; i <sz ; i++) {\\n            while(i<sz && s[i]==\\'X\\') sum++, i+=3;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3151958,
                "title": "c-2-solutions-beats-100-easy",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:$$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int moves = 0 ; \\n        int n = s.length() ; \\n        int i = 0 ; \\n        while (i < n)\\n        {\\n            if (s[i] == \\'X\\')\\n            {\\n                moves ++ ;\\n                i += 3 ;\\n            }\\n            else\\n            {\\n                i ++ ;\\n            }\\n        }\\n        return moves ; \\n    }\\n};\\n```\\n![815a317f-9cdf-46e2-a397-af8869dafa2e_1673498197.3721023.png](https://assets.leetcode.com/users/images/c45dbdd3-b68d-4f5c-ab0a-d66c5f9e927a_1675700798.694205.png)\\n",
                "solutionTags": [
                    "C++",
                    "String",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int moves = 0 ; \\n        int n = s.length() ; \\n        int i = 0 ; \\n        while (i < n)\\n        {\\n            if (s[i] == \\'X\\')\\n            {\\n                moves ++ ;\\n                i += 3 ;\\n            }\\n            else\\n            {\\n                i ++ ;\\n            }\\n        }\\n        return moves ; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2642346,
                "title": "c-easy-to-understand-step-by-step",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n\\tint minimumMoves(string s) {\\n\\t\\tint n = s.size();\\n\\t\\tint ans = 0;\\n\\t\\tfor(int i=0;i<n;i++){\\n\\t\\t\\tif(s[i] == \\'X\\'){\\n\\t\\t\\t\\tans++;\\n\\t\\t\\t\\ti+=2;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn ans;\\n\\t}\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n\\tint minimumMoves(string s) {\\n\\t\\tint n = s.size();\\n\\t\\tint ans = 0;\\n\\t\\tfor(int i=0;i<n;i++){\\n\\t\\t\\tif(s[i] == \\'X\\'){\\n\\t\\t\\t\\tans++;\\n\\t\\t\\t\\ti+=2;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn ans;\\n\\t}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1883525,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int index = 0;\\n        int result = 0;\\n        \\n        while (index < s.length()) {\\n            if (s.charAt(index) == \\'X\\') {\\n                index = index + 2;\\n                result++;\\n            }\\n            index++;\\n        }\\n        \\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int index = 0;\\n        int result = 0;\\n        \\n        while (index < s.length()) {\\n            if (s.charAt(index) == \\'X\\') {\\n                index = index + 2;\\n                result++;\\n            }\\n            index++;\\n        }\\n        \\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1829190,
                "title": "c-3-lines-code-faster-than-100",
                "content": "```\\n    int minimumMoves(string s) {\\n        int ans = 0;\\n        \\n        for(int i=0; i<s.size(); i++)\\n            if(s[i] == \\'X\\'){\\n                ans++;\\n                i += 2;\\n            } \\n        return ans;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n    int minimumMoves(string s) {\\n        int ans = 0;\\n        \\n        for(int i=0; i<s.size(); i++)\\n            if(s[i] == \\'X\\'){\\n                ans++;\\n                i += 2;\\n            } \\n        return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1761089,
                "title": "java-easy-efficient-fastest-solution",
                "content": "```\\nclass Solution {\\n    public int minimumMoves(String s) \\n    {\\n        int moves = 0;\\n        int i=0;\\n        \\n        while(i<s.length()){\\n            if(s.charAt(i)==\\'X\\'){\\n                i+=3;\\n                moves++;\\n            }else\\n                i++;\\n        }      \\n        return moves;\\n    }\\n}\\n```\\nPlease **UPVOTE** if you find this solution helpful.\\nThanks : )",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumMoves(String s) \\n    {\\n        int moves = 0;\\n        int i=0;\\n        \\n        while(i<s.length()){\\n            if(s.charAt(i)==\\'X\\'){\\n                i+=3;\\n                moves++;\\n            }else\\n                i++;\\n        }      \\n        return moves;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1524606,
                "title": "simple-python-solution",
                "content": "```\\nclass Solution:\\n    def minimumMoves(self, s: str) -> int:\\n        \\n        moves = 0\\n        x=0\\n        while x<=len(s)-1:\\n            #print(x)\\n            if s[x] == \\'X\\':\\n               # print(\"inside\")\\n                moves+=1\\n                x = x+2\\n                \\n            \\n            x=x+1\\n                \\n        return moves\\n            \\n        \\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def minimumMoves(self, s: str) -> int:\\n        \\n        moves = 0\\n        x=0\\n        while x<=len(s)-1:\\n            #print(x)\\n            if s[x] == \\'X\\':\\n               # print(\"inside\")\\n                moves+=1\\n                x = x+2\\n                \\n            \\n            x=x+1\\n                \\n        return moves\\n            \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1505375,
                "title": "python3-o-n",
                "content": "\\tclass Solution:\\n\\t\\tdef minimumMoves(self, s: str) -> int:\\n\\t\\t\\tcount=i=0\\n\\t\\t\\twhile i<len(s):\\n\\t\\t\\t\\tif s[i]==\"X\":\\n\\t\\t\\t\\t\\tcount+=1\\n\\t\\t\\t\\t\\ti+=3\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\ti+=1\\n\\t\\t\\treturn count",
                "solutionTags": [],
                "code": "\\tclass Solution:\\n\\t\\tdef minimumMoves(self, s: str) -> int:\\n\\t\\t\\tcount=i=0\\n\\t\\t\\twhile i<len(s):\\n\\t\\t\\t\\tif s[i]==\"X\":\\n\\t\\t\\t\\t\\tcount+=1\\n\\t\\t\\t\\t\\ti+=3\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\ti+=1\\n\\t\\t\\treturn count",
                "codeTag": "Java"
            },
            {
                "id": 1503262,
                "title": "rust-solution",
                "content": "```\\nimpl Solution {\\n    pub fn minimum_moves(s: String) -> i32 {\\n        s.into_bytes()\\n            .iter()\\n            .enumerate()\\n            .filter(|&(_, b)| *b == b\\'X\\')\\n            .fold((0, 0), |(mut moves, mut next_ind), (ind, b)| {\\n                if ind >= next_ind {\\n                    moves += 1;\\n                    next_ind = ind + 3\\n                };\\n                (moves, next_ind)\\n            })\\n            .0\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn minimum_moves(s: String) -> i32 {\\n        s.into_bytes()\\n            .iter()\\n            .enumerate()\\n            .filter(|&(_, b)| *b == b\\'X\\')\\n            .fold((0, 0), |(mut moves, mut next_ind), (ind, b)| {\\n                if ind >= next_ind {\\n                    moves += 1;\\n                    next_ind = ind + 3\\n                };\\n                (moves, next_ind)\\n            })\\n            .0\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1502120,
                "title": "golang-solution-with-explanation-and-images",
                "content": "The idea of this solution is if we are on a `\\'X\\'` we can move the index up by three and add one to `res`.\\n\\nAn example could be:\\n\\n`input: s = \"XXOXXXOOOXOXOXX\"` *(I tried to capture as many edge cases as I could in this test case)*\\n\\nWe can start with our index `i = 0`\\n\\n![](https://i.imgur.com/veKMehQ.png)\\n\\n`s[i] == \\'X\\'`, so we can skip the next two values (Skip the values at indexes `1` and `2` because according to the problem we have made `s[0] = \\'O\\', s[1] = \\'O\\', s[2] = \\'O\\'`. We don\\'t actually change the values because there is no need) and add one to `res`. So now `i = 3`, `res = 1`.\\n\\n![](https://i.imgur.com/Kym8Qw1.png)\\n\\n`s[i] == \\'X\\'`, so we can do the same thing as the previous `3` values, and skip the next two values. Now we are at `i = 6`, `res = 2`\\n\\n![](https://i.imgur.com/G0FoLNM.png)\\n\\n`s[i], s[i + 1]`, and `s[i + 2]` are all `\\'O\\'`, so I am just going to skip them.\\n\\n![](https://i.imgur.com/ViDnPbB.png)\\n\\n`s[i] == \\'X\\'`, so we can skip the next two values, and add one to `res`. `i == 12`, `res = 3`.\\n\\n![](https://i.imgur.com/DU17fi0.png)\\n\\n`s[i] == \\'O\\'`, so `i++` and continue. `i = 13`, `res = 3`\\n\\n![](https://i.imgur.com/iw6okPi.png)\\n\\n`s[i] == \\'X\\'`, so we can skip the next two values, `i = 15`, `res = 4`\\n\\nBut now `i >= len(s)`, so we can break the loop and return `res`. \\n\\n``` go\\nfunc minimumMoves(s string) int {\\n    res := 0\\n    \\n    for i := 0; i < len(s); i++ {\\n        if s[i] == \\'X\\' {\\n            i += 2\\n            res++\\n        }\\n    }\\n    \\n    return res\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "``` go\\nfunc minimumMoves(s string) int {\\n    res := 0\\n    \\n    for i := 0; i < len(s); i++ {\\n        if s[i] == \\'X\\' {\\n            i += 2\\n            res++\\n        }\\n    }\\n    \\n    return res\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1501822,
                "title": "short-1-liner-python-java-ruby",
                "content": "Ruby:\\n```\\ndef minimum_moves(s)\\n  s.scan(/X.?.?/).size\\nend\\n```\\n\\nPython:\\n```\\ndef minimumMoves(self, s: str) -> int:\\n    return subn(\\'X.?.?\\', \\'\\', s)[1]\\n```\\n\\nJava:\\n```\\npublic int minimumMoves(String s) {\\n    return s.replaceAll(\"O*(X?).?.?\", \"$1\").length();\\n}\\n```",
                "solutionTags": [],
                "code": "```\\ndef minimum_moves(s)\\n  s.scan(/X.?.?/).size\\nend\\n```\n```\\ndef minimumMoves(self, s: str) -> int:\\n    return subn(\\'X.?.?\\', \\'\\', s)[1]\\n```\n```\\npublic int minimumMoves(String s) {\\n    return s.replaceAll(\"O*(X?).?.?\", \"$1\").length();\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1501473,
                "title": "dynamic-programming-o-n-time-solution-with-o-1-space",
                "content": "The intuition is that the minimum number of moves depends on the previous values in the string. \\nThe problem can be solved via dynamic programming using the following relation.\\n\\nif current value is \\'X\\' => then\\n`moves[index] = moves[index-3] + 1`\\n\\nthe reason is that the last three indices will automatically be converted to OOO if we are applying the move at the current index.\\n\\nIf current value is \\'O\\' then\\n`moves[index] = moves[index-1]`\\n\\nbecause no move is applied so we copy the last minimum number of moves.\\n\\nTime Complexity : `O(N)`\\nWe do a single pass over the string\\n\\nSpace Complexity : `O(1)`\\nSince we use a circular queue of size 3 we use constant extra space. For a problem with variable length window the space complexity would be `O(W)` where W is the window length.\\n\\n\\n```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        \\n        // circular queue for keeping track of the minimum moves for the past three moves\\n        int[] moves = new int[3];\\n        \\n        int len = s.length();\\n        \\n        for (int index = 0; index < len; index++) {\\n            \\n            // index to update in the circular queue \\n            int id = index % moves.length;\\n            \\n            // moves[index-3] + 1\\n            if (s.charAt(index) == \\'X\\') {\\n                moves[id]++;\\n            } else {\\n                moves[id] = moves[ (index+2) % moves.length];// moves[index-1]\\n            }\\n        }\\n        \\n        return moves[ ( s.length()-1) % moves.length];// return the minimum moves for the last index\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        \\n        // circular queue for keeping track of the minimum moves for the past three moves\\n        int[] moves = new int[3];\\n        \\n        int len = s.length();\\n        \\n        for (int index = 0; index < len; index++) {\\n            \\n            // index to update in the circular queue \\n            int id = index % moves.length;\\n            \\n            // moves[index-3] + 1\\n            if (s.charAt(index) == \\'X\\') {\\n                moves[id]++;\\n            } else {\\n                moves[id] = moves[ (index+2) % moves.length];// moves[index-1]\\n            }\\n        }\\n        \\n        return moves[ ( s.length()-1) % moves.length];// return the minimum moves for the last index\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1500795,
                "title": "easy-100-simple-java-o-1-solution",
                "content": "class Solution {\\n     public int helper(String s) {\\n          int n=s.length(),count=0,i=0;\\n       while(i<n){\\n           char ch=s.charAt(i);\\n           if(ch==\\'X\\'){\\n               count++;\\n               i+=3;\\n           }\\n          else{\\n              i+=1;\\n          }\\n       }\\n         return count;\\n    }\\n    public int minimumMoves(String s) {\\n        return helper(s);\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n     public int helper(String s) {\\n          int n=s.length(),count=0,i=0;\\n       while(i<n){\\n           char ch=s.charAt(i);\\n           if(ch==\\'X\\'){\\n               count++;\\n               i+=3;\\n           }",
                "codeTag": "Java"
            },
            {
                "id": 1500176,
                "title": "c-easy",
                "content": "```\\nint minimumMoves(string s) {\\n        int ans=0;\\n        for(int i=0; i<s.size(); i++)\\n        {\\n            if(s[i] == \\'X\\')\\n            {\\n                if(i+1<s.size())\\n                    s[i+1]=\\'O\\';\\n                if(i+2<s.size())\\n                    s[i+2]=\\'O\\';\\n                s[i]=\\'O\\';\\n                ans++;\\n            }\\n        }\\n        return ans;\\n    }",
                "solutionTags": [],
                "code": "```\\nint minimumMoves(string s) {\\n        int ans=0;\\n        for(int i=0; i<s.size(); i++)\\n        {\\n            if(s[i] == \\'X\\')\\n            {\\n                if(i+1<s.size())\\n                    s[i+1]=\\'O\\';\\n                if(i+2<s.size())\\n                    s[i+2]=\\'O\\';\\n                s[i]=\\'O\\';\\n                ans++;\\n            }\\n        }\\n        return ans;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3314805,
                "title": "2027-run-time-95-42-memory-87",
                "content": "# Code\\n```\\nclass Solution:\\n    def minimumMoves(self, s: str) -> int:\\n        ind, moves = 0, 0\\n        n = len(s)\\n        while ind < n:\\n            if s[ind] == \\'X\\':\\n                ind += 3\\n                moves += 1\\n            else:\\n                ind += 1\\n        return moves\\n\\n```",
                "solutionTags": [
                    "Python3",
                    "String",
                    "Greedy"
                ],
                "code": "```\\nclass Solution:\\n    def minimumMoves(self, s: str) -> int:\\n        ind, moves = 0, 0\\n        n = len(s)\\n        while ind < n:\\n            if s[ind] == \\'X\\':\\n                ind += 3\\n                moves += 1\\n            else:\\n                ind += 1\\n        return moves\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3238038,
                "title": "golang-100-fastest-0ms-2-lines-of-code",
                "content": "\\n```\\nfunc minimumMoves(s string) (res int) {\\n    for i:=0 ; i < len(s) ; i++ {\\n        if s[i] == \\'X\\' { i += 2; res++ }\\n    }\\n    return res\\n\\n}\\n\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc minimumMoves(s string) (res int) {\\n    for i:=0 ; i < len(s) ; i++ {\\n        if s[i] == \\'X\\' { i += 2; res++ }\\n    }\\n    return res\\n\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3095232,
                "title": "simple-cpp-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\no(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\no(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int count=0;\\n        if(s.find(\\'X\\')==string::npos)return 0;\\n        int k=0;\\n        for(int i=0;i<s.length()-3;)\\n        {\\n            if(s[i]==\\'O\\')\\n            {\\n              i++;\\n              continue;  \\n            }\\n            string a=s.substr(i,3);\\n            if(a.find(\\'X\\'!=string::npos))\\n            {\\n                count++;\\n            }\\n            k=i+3;\\n            i+=3;\\n        }\\n        string b=s.substr(k,s.length()-k);\\n        if(b.find(\\'X\\')!=string::npos)\\n            {\\n                count++;\\n            }\\n            return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int count=0;\\n        if(s.find(\\'X\\')==string::npos)return 0;\\n        int k=0;\\n        for(int i=0;i<s.length()-3;)\\n        {\\n            if(s[i]==\\'O\\')\\n            {\\n              i++;\\n              continue;  \\n            }\\n            string a=s.substr(i,3);\\n            if(a.find(\\'X\\'!=string::npos))\\n            {\\n                count++;\\n            }\\n            k=i+3;\\n            i+=3;\\n        }\\n        string b=s.substr(k,s.length()-k);\\n        if(b.find(\\'X\\')!=string::npos)\\n            {\\n                count++;\\n            }\\n            return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084899,
                "title": "python3-neat-code",
                "content": "# Code\\n```\\nclass Solution:\\n    def minimumMoves(self, s: str) -> int:\\n        ans=i=0\\n        while i<len(s):\\n            if s[i]==\\'O\\':i+=1\\n            else:\\n                i+=3\\n                ans+=1\\n        return ans\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimumMoves(self, s: str) -> int:\\n        ans=i=0\\n        while i<len(s):\\n            if s[i]==\\'O\\':i+=1\\n            else:\\n                i+=3\\n                ans+=1\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2786566,
                "title": "simple-c-solution",
                "content": "# Approach\\nIf you find \\'O\\' jump to next letter.\\nIf you find \\'X\\' ignore the next two letters and to the third next and count that as a move.\\n\\n# Complexity\\n- Time complexity: O(n)\\n- Space complexity: O(1)\\n\\n# Code\\n```\\npublic class Solution {\\n    public int MinimumMoves(string s) {\\n        int moves = 0;\\n        for (int i = 0; i < s.Length; i++) {\\n            if (s[i] != \\'O\\') { \\n                moves++;\\n                i += 2;\\n            }\\n        }\\n        return moves;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int MinimumMoves(string s) {\\n        int moves = 0;\\n        for (int i = 0; i < s.Length; i++) {\\n            if (s[i] != \\'O\\') { \\n                moves++;\\n                i += 2;\\n            }\\n        }\\n        return moves;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2764936,
                "title": "swift-solution-easy-to-understand",
                "content": "Since the substitution will not be used later, it can be omitted and only the occurrences can be counted.\\nMy best result\\nRuntime:\\xA0**2 ms**, faster than **100.00%** of Swift online submissions for Minimum Moves to Convert String.\\n```\\nclass Solution {\\n\\tfunc minimumMoves(_ s: String) -> Int {\\n\\t\\tvar arr = Array(s)\\n\\t\\tvar index = 0\\n\\t\\tvar result = 0\\n\\n\\t\\twhile index < arr.count {\\n\\t\\t\\tif arr[index] == \"O\" {\\n\\t\\t\\t\\tindex += 1\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tindex += 3\\n\\t\\t\\t\\tresult += 1\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn result\\n\\t}\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n\\tfunc minimumMoves(_ s: String) -> Int {\\n\\t\\tvar arr = Array(s)\\n\\t\\tvar index = 0\\n\\t\\tvar result = 0\\n\\n\\t\\twhile index < arr.count {\\n\\t\\t\\tif arr[index] == \"O\" {\\n\\t\\t\\t\\tindex += 1\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tindex += 3\\n\\t\\t\\t\\tresult += 1\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn result\\n\\t}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2582187,
                "title": "php-simple-solution",
                "content": "```\\nclass Solution {\\n\\n    /**\\n     * @param String $s\\n     * @return Integer\\n     */\\n    function minimumMoves($s) {\\n        $times = 0;\\n        while (($start = strpos($s, \"X\")) !== false) {\\n            $s = substr($s, $start + 3);\\n            $times++;\\n        }\\n\\n        return $times;\\n    }\\n}\\n```",
                "solutionTags": [
                    "PHP"
                ],
                "code": "```\\nclass Solution {\\n\\n    /**\\n     * @param String $s\\n     * @return Integer\\n     */\\n    function minimumMoves($s) {\\n        $times = 0;\\n        while (($start = strpos($s, \"X\")) !== false) {\\n            $s = substr($s, $start + 3);\\n            $times++;\\n        }\\n\\n        return $times;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2576319,
                "title": "python-solution",
                "content": "```\\n def minimumMoves(self, s: str) -> int:\\n        count = 0\\n        i = 0\\n        while i < len(s):\\n            if s[i] == \\'X\\':\\n                count += 1\\n                i += 3\\n            elif s.count(\"X\") == 0:\\n                break\\n            else:\\n                i += 1\\n        return count",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n def minimumMoves(self, s: str) -> int:\\n        count = 0\\n        i = 0\\n        while i < len(s):\\n            if s[i] == \\'X\\':\\n                count += 1\\n                i += 3\\n            elif s.count(\"X\") == 0:\\n                break\\n            else:\\n                i += 1\\n        return count",
                "codeTag": "Python3"
            },
            {
                "id": 2478457,
                "title": "ruby-t-o-n-s-o-1-100-100",
                "content": "```\\n# @param {String} s\\n# @return {Integer}\\ndef minimum_moves(s)\\n  n = s.length\\n  i = 0\\n\\n  result = 0\\n  while i < n\\n    if s[i] == \\'X\\'\\n      i += 3\\n      result += 1\\n    else\\n      i += 1\\n    end\\n  end\\n\\n  result\\nend",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```\\n# @param {String} s\\n# @return {Integer}\\ndef minimum_moves(s)\\n  n = s.length\\n  i = 0\\n\\n  result = 0\\n  while i < n\\n    if s[i] == \\'X\\'\\n      i += 3\\n      result += 1\\n    else\\n      i += 1\\n    end\\n  end\\n\\n  result\\nend",
                "codeTag": "Python3"
            },
            {
                "id": 2431069,
                "title": "100-faster-very-simple-o-n",
                "content": "```\\nclass Solution(object):\\n    def minimumMoves(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        count = 0\\n        i = 0\\n        \\n        while i < len(s):\\n            if s[i] == \\'O\\':\\n                i+=1\\n            else:\\n                count+=1\\n                i+=3\\n        return count \\n                \\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def minimumMoves(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        count = 0\\n        i = 0\\n        \\n        while i < len(s):\\n            if s[i] == \\'O\\':\\n                i+=1\\n            else:\\n                count+=1\\n                i+=3\\n        return count \\n                \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2370324,
                "title": "javascript-solution-easy-understanding",
                "content": "```\\nvar minimumMoves = function(s) {\\n    let move = 0;\\n    let i = 0;\\n    while(i<s.length){\\n        let char = s[i];\\n\\t\\t// incrementing the index if we already have \\'O\\'\\n        if(char== \\'O\\'){\\n            i++;\\n        }\\n\\t\\t// incrementing the move and index by 3 (Per move =  3 characters)\\n        if(char== \\'X\\'){\\n            i=i+3;\\n            move++;\\n        }\\n    }\\n    return move;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Greedy"
                ],
                "code": "```\\nvar minimumMoves = function(s) {\\n    let move = 0;\\n    let i = 0;\\n    while(i<s.length){\\n        let char = s[i];\\n\\t\\t// incrementing the index if we already have \\'O\\'\\n        if(char== \\'O\\'){\\n            i++;\\n        }\\n\\t\\t// incrementing the move and index by 3 (Per move =  3 characters)\\n        if(char== \\'X\\'){\\n            i=i+3;\\n            move++;\\n        }\\n    }\\n    return move;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2305920,
                "title": "beats-100-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int c=0;\\n        for(int i=0; i<s.length(); i++)\\n        {\\n            if(s[i]==\\'X\\')\\n            {\\n                c++;\\n                s[i]=\\'O\\';\\n                if(i+1<s.length())\\n                s[i+1]=\\'O\\';\\n                if(i+2<s.length())\\n                s[i+2]=\\'O\\';\\n            }\\n        }\\n        return c;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int c=0;\\n        for(int i=0; i<s.length(); i++)\\n        {\\n            if(s[i]==\\'X\\')\\n            {\\n                c++;\\n                s[i]=\\'O\\';\\n                if(i+1<s.length())\\n                s[i+1]=\\'O\\';\\n                if(i+2<s.length())\\n                s[i+2]=\\'O\\';\\n            }\\n        }\\n        return c;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2210003,
                "title": "2027-minimum-moves-to-convert-string-c-o-n-sliding-window",
                "content": "```\\npublic class Solution {\\n    public int MinimumMoves(string s) {\\n\\t\\tif(s==null || s.Length ==0)\\n            return 0;\\n        int windowStart =0;  \\n        int result =0;\\n        while(windowStart<s.Length){\\n          if(s[windowStart]== \\'O\\')         \\n              windowStart++;\\n          else{\\n              result++;\\n              windowStart+=3;\\n          }\\n        }\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Sliding Window"
                ],
                "code": "```\\npublic class Solution {\\n    public int MinimumMoves(string s) {\\n\\t\\tif(s==null || s.Length ==0)\\n            return 0;\\n        int windowStart =0;  \\n        int result =0;\\n        while(windowStart<s.Length){\\n          if(s[windowStart]== \\'O\\')         \\n              windowStart++;\\n          else{\\n              result++;\\n              windowStart+=3;\\n          }\\n        }\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2209716,
                "title": "c-solution-0ms-100-faster-greedy",
                "content": "**Code:**\\n\\n```\\nclass Solution\\n{\\npublic:\\n    int minimumMoves(string s)\\n    {\\n        int n = s.length();\\n        int k = 0;\\n        int i;\\n        while (i < n)\\n        {\\n            if (s[i] == \\'X\\')\\n            {\\n                k++;\\n                i += 3;\\n            }\\n            else\\n                i++;\\n        }\\n        return k;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Greedy"
                ],
                "code": "```\\nclass Solution\\n{\\npublic:\\n    int minimumMoves(string s)\\n    {\\n        int n = s.length();\\n        int k = 0;\\n        int i;\\n        while (i < n)\\n        {\\n            if (s[i] == \\'X\\')\\n            {\\n                k++;\\n                i += 3;\\n            }\\n            else\\n                i++;\\n        }\\n        return k;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2147395,
                "title": "c-easy-to-understand-faster-than-100",
                "content": "```\\nint minimumMoves(string s) {\\n        int res = 0;\\n        int it=0;\\n        while(it<s.length()){\\n            if(s[it] == \\'X\\'){\\n                res++;       // if \\'X\\' is encountered, increment result by 1 and move iterator ahead by 3 \\n                it+=3;\\n            }\\n            else{it++;}     // else increment iterator by 1\\n        }\\n        return res;\\n    }\\n```",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nint minimumMoves(string s) {\\n        int res = 0;\\n        int it=0;\\n        while(it<s.length()){\\n            if(s[it] == \\'X\\'){\\n                res++;       // if \\'X\\' is encountered, increment result by 1 and move iterator ahead by 3 \\n                it+=3;\\n            }\\n            else{it++;}     // else increment iterator by 1\\n        }\\n        return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2080338,
                "title": "c-solution-with-approach-faster-than-100",
                "content": "**APPROACH**\\ninitilize i=0(iterator), result=0;\\niterate string s using while loop till the size of string s \\nin string s if we found \"X\" at any index we will increase iterator by 3 and result by 1\\nif we found \"O\" then increase iterator by 1 \\nreturn result\\n```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) \\n    {\\n        int n=s.length(),res=0,i=0;\\n        while(i<n)\\n        {\\n            if(s[i]==\\'X\\')\\n            {\\n                i+=3;\\n                res++;\\n            }\\n            else\\n                i++;\\n        }\\n        return res;\\n    }\\n};\\n```\\n**Plz upvote if it helps**\\n![image](https://assets.leetcode.com/users/images/54f32a72-4219-48c9-acb1-7e8c38b4e5d8_1653671028.9541156.png)\\n\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) \\n    {\\n        int n=s.length(),res=0,i=0;\\n        while(i<n)\\n        {\\n            if(s[i]==\\'X\\')\\n            {\\n                i+=3;\\n                res++;\\n            }\\n            else\\n                i++;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1874245,
                "title": "simple-c-greedy-approach",
                "content": "```\\n    int minimumMoves(string s) {\\n        int count = 0;\\n        int i = 0 ;\\n        while(i<s.size()){\\n            if(s[i]==\\'X\\'){\\n                count++;\\n                i+=3;\\n            }\\n            else{\\n                i++;\\n            }\\n        }\\n        return count;    \\n    }\\n```",
                "solutionTags": [
                    "C",
                    "Greedy"
                ],
                "code": "```\\n    int minimumMoves(string s) {\\n        int count = 0;\\n        int i = 0 ;\\n        while(i<s.size()){\\n            if(s[i]==\\'X\\'){\\n                count++;\\n                i+=3;\\n            }\\n            else{\\n                i++;\\n            }\\n        }\\n        return count;    \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1859640,
                "title": "greedy-algo",
                "content": "class Solution {\\npublic:\\n    int minimumMoves(string s) {\\n    int ans = 0;\\n    for (int i = 0; i < s.size(); i += s[i] == \\'X\\' ? 3 : 1)\\n        ans += s[i] == \\'X\\';\\n    return ans;\\n}\\n};",
                "solutionTags": [
                    "C",
                    "Greedy"
                ],
                "code": "class Solution {\\npublic:\\n    int minimumMoves(string s) {\\n    int ans = 0;\\n    for (int i = 0; i < s.size(); i += s[i] == \\'X\\' ? 3 : 1)\\n        ans += s[i] == \\'X\\';\\n    return ans;\\n}",
                "codeTag": "Java"
            },
            {
                "id": 1828362,
                "title": "faster-than-100-solutions",
                "content": "class Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int cnt=0;\\n        int i=0;\\n        for(i=0;i<s.length();i++){\\n            if(s[i]==\\'O\\') continue;\\n            else break;\\n        }\\n        for(int j=i;j<s.length();j++){\\n            if(s[j]==\\'O\\') continue;\\n            int a=0;\\n            if(s[j]==\\'X\\'){\\n                s[j]=\\'O\\';\\n                a++;\\n            }\\n            if(j+1<=s.length())\\n            if(s[j+1]==\\'X\\'){\\n                s[j+1]=\\'O\\';\\n                a++;\\n            }\\n            if(j+2<=s.length())\\n            if(s[j+2]==\\'X\\'){\\n                s[j+2]=\\'O\\';\\n                a++;\\n            }\\n            if(a) cnt++;\\n            j+=2;\\n        }\\n        return cnt; \\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int cnt=0;\\n        int i=0;\\n        for(i=0;i<s.length();i++){\\n            if(s[i]==\\'O\\') continue;\\n            else break;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1817645,
                "title": "java-solution-0ms-100",
                "content": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int res=0;\\n        for(int i=0;i<s.length();)\\n        {\\n            if(s.charAt(i)==\\'X\\')\\n            {\\n                i+=3;\\n                res++;\\n            }\\n            else\\n                i++;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int res=0;\\n        for(int i=0;i<s.length();)\\n        {\\n            if(s.charAt(i)==\\'X\\')\\n            {\\n                i+=3;\\n                res++;\\n            }\\n            else\\n                i++;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1808989,
                "title": "c-greedy-approach",
                "content": "**Hint 2 : Try delaying a move as long as possible.**\\n**Explanation** : We can ignore \\'O\\' as long as possible.\\n\\t\\t\\t\\t\\t\\t\\t  When we encounter \\'X\\' we have to count that as a move. \\n\\t\\t\\t\\t\\t\\t\\t  \\n```\\nint minimumMoves(string s) {\\n        int move = 0;\\n        int i=0;\\n        while(i<s.size()){\\n            if(s[i]==\\'X\\'){\\n                i+=3;\\n                move++;\\n            } \\n            else i+=1;\\n        }\\n        return move;\\n    }\\n",
                "solutionTags": [],
                "code": "**Hint 2 : Try delaying a move as long as possible.**\\n**Explanation** : We can ignore \\'O\\' as long as possible.\\n\\t\\t\\t\\t\\t\\t\\t  When we encounter \\'X\\' we have to count that as a move. \\n\\t\\t\\t\\t\\t\\t\\t  \\n```\\nint minimumMoves(string s) {\\n        int move = 0;\\n        int i=0;\\n        while(i<s.size()){\\n            if(s[i]==\\'X\\'){\\n                i+=3;\\n                move++;\\n            } \\n            else i+=1;\\n        }\\n        return move;\\n    }\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 1767631,
                "title": "js-greedy",
                "content": "```\\nvar minimumMoves = function(s) {\\n    let i = 0;\\n    res = 0;\\n    while (i < s.length) {\\n        if (s[i] === \\'X\\') {\\n            s[i] = \\'O\\';\\n            s[i + 1] = \\'O\\';\\n            s[i + 2] = \\'O\\';\\n            i += 3;\\n            res += 1;\\n        } else {\\n            i++;\\n        }\\n    }\\n    return res;\\n};",
                "solutionTags": [
                    "Greedy"
                ],
                "code": "```\\nvar minimumMoves = function(s) {\\n    let i = 0;\\n    res = 0;\\n    while (i < s.length) {\\n        if (s[i] === \\'X\\') {\\n            s[i] = \\'O\\';\\n            s[i + 1] = \\'O\\';\\n            s[i + 2] = \\'O\\';\\n            i += 3;\\n            res += 1;\\n        } else {\\n            i++;\\n        }\\n    }\\n    return res;\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 1722144,
                "title": "simplest-python-3-code",
                "content": "```\\nclass Solution:\\n    def minimumMoves(self, s: str) -> int:\\n        sl=list(s)\\n        out=0\\n        for i in range(0,len(sl)-2):\\n            if sl[i]==\"X\":\\n                sl[i]=\"O\"\\n                sl[i+1]=\"O\"\\n                sl[i+2]=\"O\"\\n                out+=1\\n            elif sl[i]==\"O\":\\n                continue\\n        if sl[-1]==\"X\" or sl[-2]==\"X\":\\n            out+=1\\n        return out\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimumMoves(self, s: str) -> int:\\n        sl=list(s)\\n        out=0\\n        for i in range(0,len(sl)-2):\\n            if sl[i]==\"X\":\\n                sl[i]=\"O\"\\n                sl[i+1]=\"O\"\\n                sl[i+2]=\"O\"\\n                out+=1\\n            elif sl[i]==\"O\":\\n                continue\\n        if sl[-1]==\"X\" or sl[-2]==\"X\":\\n            out+=1\\n        return out\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1718415,
                "title": "java-simple",
                "content": "```\\nclass Solution {\\n    public int minimumMoves(String s) \\n    {\\n        int moves = 0;\\n        int i=0;\\n        \\n        while(i<s.length())\\n        {\\n            if(s.charAt(i)==\\'X\\')\\n            {\\n                i+=3;\\n                moves++;\\n            }else\\n            {\\n                i++;\\n            }\\n            \\n        }      \\n        \\n        return moves;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumMoves(String s) \\n    {\\n        int moves = 0;\\n        int i=0;\\n        \\n        while(i<s.length())\\n        {\\n            if(s.charAt(i)==\\'X\\')\\n            {\\n                i+=3;\\n                moves++;\\n            }else\\n            {\\n                i++;\\n            }\\n            \\n        }      \\n        \\n        return moves;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1713299,
                "title": "fastest-java-solution",
                "content": "```\\nclass Solution {\\n    public int minimumMoves(String s) \\n    {\\n        if(!s.contains(\"X\"))\\n            return 0;\\n        else\\n        {\\n            int count=0;\\n            int n=s.length();\\n            for(int i=0;i<n;i++)\\n            {\\n                if(s.charAt(i)==\\'X\\')\\n                {\\n                    count++;\\n                    i+=2;\\n                    if(i>=n)\\n                        break;\\n                }\\n            }\\n            return count;\\n        }\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int minimumMoves(String s) \\n    {\\n        if(!s.contains(\"X\"))\\n            return 0;\\n        else\\n        {\\n            int count=0;\\n            int n=s.length();\\n            for(int i=0;i<n;i++)\\n            {\\n                if(s.charAt(i)==\\'X\\')\\n                {\\n                    count++;\\n                    i+=2;\\n                    if(i>=n)\\n                        break;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1705142,
                "title": "cpp-solution-100-faster-and-85-space-efficient",
                "content": "```\\n int minimumMoves(string s) \\n    {\\n        int ans=0;\\n        for(int i=0;i<s.length();)\\n        {\\n            if(s[i]==\\'X\\')\\n            {\\n               int t=3;\\n                while(i<s.length()&&t--)\\n                {\\n                    s[i]=\\'0\\';\\n                    i++;\\n                }\\n                ans++;\\n            }\\n            else\\n                i++;\\n        }\\n        return ans;\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n int minimumMoves(string s) \\n    {\\n        int ans=0;\\n        for(int i=0;i<s.length();)\\n        {\\n            if(s[i]==\\'X\\')\\n            {\\n               int t=3;\\n                while(i<s.length()&&t--)\\n                {\\n                    s[i]=\\'0\\';\\n                    i++;\\n                }\\n                ans++;\\n            }\\n            else\\n                i++;\\n        }\\n        return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1696914,
                "title": "c-linq-one-liner-o-n",
                "content": "```\\npublic class Solution {\\n    public int MinimumMoves(string s) \\n        => s.Aggregate((res: 0, dist: 3), \\n                       (pos, cur) => (pos.res + (cur == \\'X\\' && pos.dist > 2 ? 1 : 0), \\n                                      (cur == \\'X\\' && pos.dist > 2 ? 1 : pos.dist + 1)),\\n                       pos => pos.res);\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int MinimumMoves(string s) \\n        => s.Aggregate((res: 0, dist: 3), \\n                       (pos, cur) => (pos.res + (cur == \\'X\\' && pos.dist > 2 ? 1 : 0), \\n                                      (cur == \\'X\\' && pos.dist > 2 ? 1 : pos.dist + 1)),\\n                       pos => pos.res);\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1635326,
                "title": "intuitive-solution",
                "content": "```rust\\nimpl Solution {\\n    pub fn minimum_moves(s: String) -> i32 {\\n        let (bytes, mut i, mut moves) = (s.as_bytes(), 0, 0);\\n        while i < bytes.len() {\\n            i += match bytes[i] {\\n                b\\'X\\' => {\\n                    moves += 1;\\n                    3\\n                }\\n                _ => 1,\\n            }\\n        }\\n        return moves;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```rust\\nimpl Solution {\\n    pub fn minimum_moves(s: String) -> i32 {\\n        let (bytes, mut i, mut moves) = (s.as_bytes(), 0, 0);\\n        while i < bytes.len() {\\n            i += match bytes[i] {\\n                b\\'X\\' => {\\n                    moves += 1;\\n                    3\\n                }\\n                _ => 1,\\n            }\\n        }\\n        return moves;\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1617852,
                "title": "optimal-solution",
                "content": "# Greedy Approach\\nGiven problem states minimum steps to convert the XO string to only Os.\\nAlso, under the constraint of the **move** described,\\nif we choose an index for operating, we can absolutely assure that the character in the next 2 consecutive indices will also get resolved to O within that **move**. (making 3 consecutive indices)\\nSo, our approach is such that we always search for the closest X position and operate. (OKAY!)\\nNow,\\nwe don\\'t simply iterate from next index, but move our pointer ahead 3 indices of current position, as the 3 consecutive are already considered to be converted to O (By definition of the **move**).\\n\\nBesides we make sure to avoid index overflow by checking index < length in every iteration.\\n\\n```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int n=s.size();\\n        int res=0,i=0;\\n        while(i<n){\\n            while(s[i]==\\'O\\')i++;//greedily moving to next X position\\n            if(i>=n)break; //breaks if pointer exceeds array length \\n            res++;\\n            i+=3;\\n        }\\n        return res;\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int n=s.size();\\n        int res=0,i=0;\\n        while(i<n){\\n            while(s[i]==\\'O\\')i++;//greedily moving to next X position\\n            if(i>=n)break; //breaks if pointer exceeds array length \\n            res++;\\n            i+=3;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1541398,
                "title": "cpp",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int ret = 0;\\n        for (int i=0;i<s.length();i++) {\\n            if (s[i]==\\'X\\') {\\n                ret++;\\n                i+=2;\\n            }\\n        }\\n        return ret;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int ret = 0;\\n        for (int i=0;i<s.length();i++) {\\n            if (s[i]==\\'X\\') {\\n                ret++;\\n                i+=2;\\n            }\\n        }\\n        return ret;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1539300,
                "title": "rust-greedy-approach",
                "content": "**Analysis:**\\n\\nIf we need to flip an \\'X\\' at an index `i`, then any \\'X\\' at indices `i+1` and `i+2` will also be converted into a \\'O\\', should those indices exist.\\n\\nSo greedily, we can flip any \\'X\\' into a \\'O\\', and advance the index by 3. Otherwise flip the index by 1.\\n\\n**Solution:**\\n\\n```\\nimpl Solution {\\n    pub fn minimum_moves(s: String) -> i32 {\\n        let mut i: usize = 0;\\n\\n        let mut res: i32 = 0;\\n\\n        while i < s.len() {\\n            let c: char = s.chars().nth(i).unwrap();\\n\\n            /* If we encounter a \\'X\\', we need to\\n               turn it into a \\'O\\', this move will also\\n               change any \\'X\\' at index i+1 and i+2 into\\n               \\'O\\' if those indices are valid.\\n               After the conversion at index i, so we just\\n               advance by i by 3, otherwise advance by 1.\\n            */\\n            if c == \\'X\\' {\\n                res += 1;\\n                i += 3;\\n            } else {\\n                i += 1;\\n            }\\n        }\\n\\n        res\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust",
                    "Greedy"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn minimum_moves(s: String) -> i32 {\\n        let mut i: usize = 0;\\n\\n        let mut res: i32 = 0;\\n\\n        while i < s.len() {\\n            let c: char = s.chars().nth(i).unwrap();\\n\\n            /* If we encounter a \\'X\\', we need to\\n               turn it into a \\'O\\', this move will also\\n               change any \\'X\\' at index i+1 and i+2 into\\n               \\'O\\' if those indices are valid.\\n               After the conversion at index i, so we just\\n               advance by i by 3, otherwise advance by 1.\\n            */\\n            if c == \\'X\\' {\\n                res += 1;\\n                i += 3;\\n            } else {\\n                i += 1;\\n            }\\n        }\\n\\n        res\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1525713,
                "title": "c-simple-intro-to-greedy",
                "content": "```\\nint minimumMoves(string s) {\\n        int cnt=0;\\n        int i=0;\\n        while(i<s.size()){\\n            if(s[i]==\\'O\\') i++;\\n            else{\\n               cnt++;\\n                i=i+3;\\n            }\\n        }\\n        return cnt;\\n    }\\n```\\n\\nAs the problem is very simple - let me explain something here.\\nOne can easily test that - the problem requires a \\'minimum\\' amount - which is an optmization. But why does this optimization does not need dynamic programming?\\n\\nFor any string **s**, minimum amount for **s[i]** does not depend on the minumim amount for **s[i-1]**. \\nFor any additional **s[i+1]** you need to increase the minimum count.\\nSee, this is why this optimization does not require dynamic approach.\\n",
                "solutionTags": [],
                "code": "```\\nint minimumMoves(string s) {\\n        int cnt=0;\\n        int i=0;\\n        while(i<s.size()){\\n            if(s[i]==\\'O\\') i++;\\n            else{\\n               cnt++;\\n                i=i+3;\\n            }\\n        }\\n        return cnt;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1523536,
                "title": "easy-to-understand-javascript-solution",
                "content": "\\tvar minimumMoves = function(s) {\\n\\t\\tlet moveIndex = moves = 0;\\n\\n\\t\\twhile (moveIndex < s.length) {\\n\\t\\t\\tconst findIndex = s.indexOf(\\'X\\', moveIndex);\\n\\n\\t\\t\\tif (findIndex > -1) {\\n\\t\\t\\t\\tmoveIndex = findIndex + 3;\\n\\t\\t\\t\\tmoves += 1;\\n\\t\\t\\t}\\n\\t\\t\\telse moveIndex = s.length;\\n\\t\\t}\\n\\n\\t\\treturn moves;\\n\\t};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "\\tvar minimumMoves = function(s) {\\n\\t\\tlet moveIndex = moves = 0;\\n\\n\\t\\twhile (moveIndex < s.length) {\\n\\t\\t\\tconst findIndex = s.indexOf(\\'X\\', moveIndex);\\n\\n\\t\\t\\tif (findIndex > -1) {\\n\\t\\t\\t\\tmoveIndex = findIndex + 3;\\n\\t\\t\\t\\tmoves += 1;\\n\\t\\t\\t}\\n\\t\\t\\telse moveIndex = s.length;\\n\\t\\t}\\n\\n\\t\\treturn moves;\\n\\t};",
                "codeTag": "Unknown"
            },
            {
                "id": 1519756,
                "title": "c-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        //if you find a \\'X\\' change the next 3 char to \\'O\\' and calculate the result\\n        int res=0;\\n        int n=s.length();\\n        for(int i=0;i<n;i++)\\n        {\\n            if(s[i]==\\'X\\')\\n            {\\n                res++;\\n                s[i]=\\'O\\';\\n                if(i+1<n && s[i+1]==\\'X\\')\\n                {\\n                    s[i+1]=\\'O\\';\\n                }\\n                if(i+2<n && s[i+2]==\\'X\\')\\n                {\\n                    s[i+2]=\\'O\\';\\n                }\\n                    \\n            }\\n        }\\n        return res;\\n    }\\n};\\n```\\n**Upvote if this helps you :)**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        //if you find a \\'X\\' change the next 3 char to \\'O\\' and calculate the result\\n        int res=0;\\n        int n=s.length();\\n        for(int i=0;i<n;i++)\\n        {\\n            if(s[i]==\\'X\\')\\n            {\\n                res++;\\n                s[i]=\\'O\\';\\n                if(i+1<n && s[i+1]==\\'X\\')\\n                {\\n                    s[i+1]=\\'O\\';\\n                }\\n                if(i+2<n && s[i+2]==\\'X\\')\\n                {\\n                    s[i+2]=\\'O\\';\\n                }\\n                    \\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1517119,
                "title": "javascript-greedy",
                "content": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar minimumMoves = function(s) {\\n    const len = s.length\\n    let result = 0\\n    \\n    \\n    for (let i = 0; i < len; ) {\\n        const ch = s[i]\\n        if (ch === \\'O\\') i++\\n        else {\\n            result++\\n            i += 3\\n        }\\n    }\\n    \\n    \\n    return result\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar minimumMoves = function(s) {\\n    const len = s.length\\n    let result = 0\\n    \\n    \\n    for (let i = 0; i < len; ) {\\n        const ch = s[i]\\n        if (ch === \\'O\\') i++\\n        else {\\n            result++\\n            i += 3\\n        }\\n    }\\n    \\n    \\n    return result\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1512345,
                "title": "python-simple-solution-better-than-97",
                "content": "```\\nclass Solution(object):\\n    def minimumMoves(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n\\t\\t ans, l = 0, 0\\n        while l < len(s):\\n            if s[l] == \\'X\\':\\n                l+=3\\n                ans +=1\\n            else:\\n                l+=1\\n        return ans",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution(object):\\n    def minimumMoves(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n\\t\\t ans, l = 0, 0\\n        while l < len(s):\\n            if s[l] == \\'X\\':\\n                l+=3\\n                ans +=1\\n            else:\\n                l+=1\\n        return ans",
                "codeTag": "Java"
            },
            {
                "id": 1504825,
                "title": "simple-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int n=s.size();\\n        \\n        int ans=0;\\n        for(int i=0; i<n;)\\n        {\\n            if(s[i]==\\'X\\')\\n                ans++,i=i+3;  //for this X we are using 1 move and by doing that we can move 3 steps without any checks\\n            else\\n                i++;           \\n        }\\n        \\n        return ans;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int n=s.size();\\n        \\n        int ans=0;\\n        for(int i=0; i<n;)\\n        {\\n            if(s[i]==\\'X\\')\\n                ans++,i=i+3;  //for this X we are using 1 move and by doing that we can move 3 steps without any checks\\n            else\\n                i++;           \\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1504219,
                "title": "intuitive",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int len = s.size();\\n        int res = 0;\\n        \\n        for (int i = 0; i < len; i++) {\\n            if (s[i] == \\'X\\') {\\n                res++;\\n                i += 2;\\n            }\\n        }\\n        \\n        return res;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int len = s.size();\\n        int res = 0;\\n        \\n        for (int i = 0; i < len; i++) {\\n            if (s[i] == \\'X\\') {\\n                res++;\\n                i += 2;\\n            }\\n        }\\n        \\n        return res;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1503675,
                "title": "a-few-solutions",
                "content": "Peform a linear scan of the input array `A`.  For each `X` seen, skip past it and the next 2 indices (inclusive, so 1 + 2 = 3) and increment the count `cnt` to be returned.\\n\\n---\\n\\n*Kotlin*\\n```\\nclass Solution {\\n    fun minimumMoves(s: String): Int {\\n        var cnt = 0\\n        var N = s.length\\n        var i = 0\\n        while (i < N) {\\n            if (s[i] == \\'X\\') {\\n                i += 3; cnt += 1\\n            } else {\\n                ++i\\n            }\\n        } \\n        return cnt\\n    }\\n}\\n```\\n\\n*Javascript*\\n```\\nlet minimumMoves = (s, cnt = 0) => {\\n    let N = s.length,\\n        i = 0;\\n    while (i < N) {\\n        if (s[i] == \\'X\\')\\n            i += 3, ++cnt;\\n        else\\n            ++i;\\n    }\\n    return cnt;\\n};\\n```\\n\\n*Python3*\\n```\\nclass Solution:\\n    def minimumMoves(self, s: str, cnt = 0) -> int:\\n        N = len(s)\\n        i = 0\\n        while i < N:\\n            if s[i] == \\'X\\':\\n                i += 3; cnt += 1\\n            else:\\n                i += 1\\n        return cnt\\n```\\n\\n*C++*\\n```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s, int cnt = 0) {\\n        int N = s.size(),\\n            i = 0;\\n        while (i < N) {\\n            if (s[i] == \\'X\\')\\n                i += 3, ++cnt;\\n            else\\n                ++i;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    fun minimumMoves(s: String): Int {\\n        var cnt = 0\\n        var N = s.length\\n        var i = 0\\n        while (i < N) {\\n            if (s[i] == \\'X\\') {\\n                i += 3; cnt += 1\\n            } else {\\n                ++i\\n            }\\n        } \\n        return cnt\\n    }\\n}\\n```\n```\\nlet minimumMoves = (s, cnt = 0) => {\\n    let N = s.length,\\n        i = 0;\\n    while (i < N) {\\n        if (s[i] == \\'X\\')\\n            i += 3, ++cnt;\\n        else\\n            ++i;\\n    }\\n    return cnt;\\n};\\n```\n```\\nclass Solution:\\n    def minimumMoves(self, s: str, cnt = 0) -> int:\\n        N = len(s)\\n        i = 0\\n        while i < N:\\n            if s[i] == \\'X\\':\\n                i += 3; cnt += 1\\n            else:\\n                i += 1\\n        return cnt\\n```\n```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s, int cnt = 0) {\\n        int N = s.size(),\\n            i = 0;\\n        while (i < N) {\\n            if (s[i] == \\'X\\')\\n                i += 3, ++cnt;\\n            else\\n                ++i;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1502006,
                "title": "c-2027-minimum-moves-to-convert-string",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int ans = 0; \\n        for (int i = 0; i < s.size(); ++i) \\n            if (s[i] == \\'X\\') \\n                ++ans, i += 2; \\n        return ans; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int ans = 0; \\n        for (int i = 0; i < s.size(); ++i) \\n            if (s[i] == \\'X\\') \\n                ++ans, i += 2; \\n        return ans; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1501984,
                "title": "o-n-easy",
                "content": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int m = 0;\\n        for(int i = 0; i < s.length(); ++i) if(s.charAt(i) == \\'X\\') { i+=2; m++;}\\n        return m;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int m = 0;\\n        for(int i = 0; i < s.length(); ++i) if(s.charAt(i) == \\'X\\') { i+=2; m++;}\\n        return m;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1501053,
                "title": "c-easy-to-understand-0ms-runtime-small-code-100-faster-o-n-approach",
                "content": "DO Like my solution , if you Find my Post Helpfull !!!\\n```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int count=0;// answer will be stored in this variable\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]==\\'X\\'){// if substring of size 3 starts with \\'X\\' -->++count and increment by 2\\n                ++count;\\n                i+=2;\\n            }\\n        }\\n        return count;\\n        \\n    }\\n};\\n```\\n![image](https://assets.leetcode.com/users/images/6cc29593-c8b9-4071-9ecc-48e00b6fe425_1633264209.494313.png)\\n\\n",
                "solutionTags": [
                    "C",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int count=0;// answer will be stored in this variable\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]==\\'X\\'){// if substring of size 3 starts with \\'X\\' -->++count and increment by 2\\n                ++count;\\n                i+=2;\\n            }\\n        }\\n        return count;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1501052,
                "title": "java-o-n-100-efficient-solution",
                "content": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int moves = 0;\\n        int i = 0;\\n        \\n        char[] arr = s.toCharArray();\\n        \\n        while(i < arr.length) {\\n            if(arr[i] == \\'O\\') {\\n                i++;\\n                continue;\\n            }\\n            \\n            i+=3;\\n            moves++;\\n        }\\n        \\n        return moves;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int minimumMoves(String s) {\\n        int moves = 0;\\n        int i = 0;\\n        \\n        char[] arr = s.toCharArray();\\n        \\n        while(i < arr.length) {\\n            if(arr[i] == \\'O\\') {\\n                i++;\\n                continue;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1500590,
                "title": "as-simple-as-possible",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int cnt=0;\\n        int n=s.size();\\n        int i=0;\\n        while(i<n){\\n            if(s[i]==\\'O\\'){\\n                i++;\\n            }else{\\n                cnt++;i+=3;\\n            }\\n        }\\n        return cnt;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int cnt=0;\\n        int n=s.size();\\n        int i=0;\\n        while(i<n){\\n            if(s[i]==\\'O\\'){\\n                i++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1500452,
                "title": "c-0ms-100-simple-easy-small",
                "content": "Runtime: 0 ms, faster than 100.00% of C++ online submissions for Minimum Moves to Convert String.\\nMemory Usage: 6.5 MB, less than 80.00% of C++ online submissions for Minimum Moves to Convert String.\\n```\\nclass Solution {\\npublic:\\n  int minimumMoves(string s) {\\n    int i = 0, ans = 0, n = s.size();\\n    \\n    while(i < s.size())\\n      if(s[i] == \\'O\\') i++;\\n      else i += 3, ans++; \\n      \\n    return ans;\\n  }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n  int minimumMoves(string s) {\\n    int i = 0, ans = 0, n = s.size();\\n    \\n    while(i < s.size())\\n      if(s[i] == \\'O\\') i++;\\n      else i += 3, ans++; \\n      \\n    return ans;\\n  }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1500366,
                "title": "javascript-greedy-direct-way-68ms",
                "content": "```\\nconst minimumMoves = (s) => {\\n    let res = 0, n = s.length;\\n    for (let i = 0; i < n;) {\\n        if (s[i] == \\'X\\') { // if find X, we can do max 3 change from \"X\" -> \"O\", no matter it is \"X\" or \"O\" in i+1 and i+2, will count 1 operation\\n            i += 3;\\n            res++;\\n        } else {\\n            i++;\\n        }\\n    }\\n    return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Greedy"
                ],
                "code": "```\\nconst minimumMoves = (s) => {\\n    let res = 0, n = s.length;\\n    for (let i = 0; i < n;) {\\n        if (s[i] == \\'X\\') { // if find X, we can do max 3 change from \"X\" -> \"O\", no matter it is \"X\" or \"O\" in i+1 and i+2, will count 1 operation\\n            i += 3;\\n            res++;\\n        } else {\\n            i++;\\n        }\\n    }\\n    return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1500329,
                "title": "100-00-0-ms-c-easiest-solution-possible",
                "content": "``` \\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int n =  s.length() ;\\n        int cnt = 0;\\n        for(int i = 0 ; i<n;i++){\\n        if(s[i] == \\'X\\'){   \\n             if(i >= n-3){\\n             cnt++;\\n                 break;\\n             }\\n             else {\\n                 i= i+2;\\n                 cnt++;\\n             }\\n         }\\n    }\\n        return cnt;\\n    }\\n};\\n",
                "solutionTags": [
                    "Math",
                    "String"
                ],
                "code": "class Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int n =  s.length() ;\\n        int cnt = 0;\\n        for(int i = 0 ; i<n;i++){\\n        if(s[i] == \\'X\\'){   \\n             if(i >= n-3){\\n             cnt++;\\n                 break;\\n             }",
                "codeTag": "Java"
            },
            {
                "id": 1500209,
                "title": "c-100-faster-easiest-solution-no-change-in-string",
                "content": "int minimumMoves(string s) {\\n              int ans=0;\\n        for(int i=0; i<s.size();i=i)\\n        {\\n            if(s[i] == \\'X\\'){\\n                i= i+3;\\n                ans++;\\n            }\\n            else{\\n                i++;\\n            }\\n        }\\n        return ans;\\n    }",
                "solutionTags": [
                    "String",
                    "Sliding Window"
                ],
                "code": "int minimumMoves(string s) {\\n              int ans=0;\\n        for(int i=0; i<s.size();i=i)\\n        {\\n            if(s[i] == \\'X\\'){\\n                i= i+3;\\n                ans++;\\n            }\\n            else{\\n                i++;\\n            }\\n        }\\n        return ans;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1500183,
                "title": "python-easy",
                "content": "```\\nclass Solution:\\n    def minimumMoves(self, s: str) -> int:\\n        res = 0\\n        i = 0\\n        while i < len(s):\\n            #if current is X then jump 3 positions and count by 1\\n            if s[i] == \\'X\\':\\n                res += 1\\n                i += 3\\n            else:\\n                i += 1\\n        return res\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimumMoves(self, s: str) -> int:\\n        res = 0\\n        i = 0\\n        while i < len(s):\\n            #if current is X then jump 3 positions and count by 1\\n            if s[i] == \\'X\\':\\n                res += 1\\n                i += 3\\n            else:\\n                i += 1\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1500171,
                "title": "my-simple-c-and-java-solution",
                "content": "// C++ my simple solution\\n \\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tint minimumMoves(string s) {\\n\\t\\t\\tint count = 0;\\n\\t\\t\\tfor(int i = 0; i < s.size(); i++){\\n\\t\\t\\t\\tif(s[i] != \\'O\\'){\\n\\t\\t\\t\\t\\tcount++;\\n\\t\\t\\t\\t\\ti+=2;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn count;\\n\\t\\t}\\n\\t};\\n\\t\\n\\n// java solution\\n\\n\\tclass Solution {\\n\\t\\tpublic int minimumMoves(String s) {\\n\\t\\t\\tint count = 0;\\n\\t\\t\\tfor(int i = 0; i < s.length(); i++){\\n\\t\\t\\t\\tif(s.charAt(i) != \\'O\\'){\\n\\t\\t\\t\\t\\tcount++;\\n\\t\\t\\t\\t\\ti+=2;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn count;\\n\\t\\t}\\n\\t}",
                "solutionTags": [
                    "Java",
                    "C"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tint minimumMoves(string s) {\\n\\t\\t\\tint count = 0;\\n\\t\\t\\tfor(int i = 0; i < s.size(); i++){\\n\\t\\t\\t\\tif(s[i] != \\'O\\'){\\n\\t\\t\\t\\t\\tcount++;\\n\\t\\t\\t\\t\\ti+=2;\\n\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 1500159,
                "title": "python-java-solution",
                "content": "\\tclass Solution:\\n\\t\\tdef minimumMoves(self, s: str) -> int:\\n\\t\\t\\ti = 0\\n\\t\\t\\tres = 0        \\n\\t\\t\\twhile i < len(s):\\n\\t\\t\\t\\tif s[i] == \"X\":\\n\\t\\t\\t\\t\\ti += 3\\n\\t\\t\\t\\t\\tres += 1\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\ti += 1\\n\\t\\t\\treturn res\\n\\n\\n\\tclass Solution {\\n\\t\\tpublic int minimumMoves(String s) {\\n\\t\\t\\tint i = 0;\\n\\t\\t\\tint res = 0;\\n\\t\\t\\twhile (i < s.length()) {\\n\\t\\t\\t\\tchar c = s.charAt(i);\\n\\t\\t\\t\\tif (c == \\'X\\') {\\n\\t\\t\\t\\t\\ti += 3;\\n\\t\\t\\t\\t\\tres ++;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\ti ++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn res;\\n\\t\\t}\\n\\t}",
                "solutionTags": [],
                "code": "class Solution:\\n\\t\\tdef minimumMoves(self, s: str) -> int:\\n\\t\\t\\ti = 0\\n\\t\\t\\tres = 0        \\n\\t\\t\\twhile i < len(s):\\n\\t\\t\\t\\tif s[i] == \"X\":\\n\\t\\t\\t\\t\\ti += 3\\n\\t\\t\\t\\t\\tres += 1\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\ti += 1\\n\\t\\t\\treturn res\\n\\n\\n\\tclass Solution {\\n\\t\\tpublic int minimumMoves(String s) {\\n\\t\\t\\tint i = 0;\\n\\t\\t\\tint res = 0;\\n\\t\\t\\twhile (i < s.length()) {\\n\\t\\t\\t\\tchar c = s.charAt(i);\\n\\t\\t\\t\\tif (c == \\'X\\') {\\n\\t\\t\\t\\t\\ti += 3;\\n\\t\\t\\t\\t\\tres ++;\\n\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 4070242,
                "title": "quick-and-compact-solution-using-branchless-notation",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe algorithm tries to minimize the number of moves by assuring that the first char of the move is \\'X\\', this evaluation gives a boolean result ( 1 or 0 ), that can be multiplied by the value we want to add only if the condition is met.\\nDespite not being the fastest solution, it\\'s fairly short with any conditional statement.\\n\\n# Code\\n```\\nclass Solution:\\n    def minimumMoves(self, s: str) -> int:\\n        moves = 0\\n        i = s.find(\\'X\\')\\n\\n        while i < len(s):\\n            moves += ( ( s[i] != \\'O\\' ) * 1)\\n            i +=  1 + ( ( s[i] != \\'O\\' ) * 2)\\n\\n        return moves\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimumMoves(self, s: str) -> int:\\n        moves = 0\\n        i = s.find(\\'X\\')\\n\\n        while i < len(s):\\n            moves += ( ( s[i] != \\'O\\' ) * 1)\\n            i +=  1 + ( ( s[i] != \\'O\\' ) * 2)\\n\\n        return moves\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4060654,
                "title": "simple-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int ans =0;\\n        for(int i=0;i<s.length();i++){\\n            if(s.charAt(i) == \\'X\\'){\\n                i +=2;\\n                ans++;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int ans =0;\\n        for(int i=0;i<s.length();i++){\\n            if(s.charAt(i) == \\'X\\'){\\n                i +=2;\\n                ans++;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4049133,
                "title": "easy-beginner-friendly-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n1. create moves initlize with 0\\n2. create  i =0\\n3.  start loop from i to s.length()\\n4.  if ith character of string is \\'X\\'  increment moves with 1 and       increment i with 3\\n5.  else increment i with 1 \\n6.  return the moves\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int moves=0;\\n        int i=0;\\n        while(i<s.length()){\\n            if(s.charAt(i)==\\'X\\') {\\n                moves++;\\n                i+=3;\\n            }else i++;\\n        }\\n        return moves;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int moves=0;\\n        int i=0;\\n        while(i<s.length()){\\n            if(s.charAt(i)==\\'X\\') {\\n                moves++;\\n                i+=3;\\n            }else i++;\\n        }\\n        return moves;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4044723,
                "title": "very-easy-simple-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def minimumMoves(self, s):\\n        s=list(s)\\n        i=0\\n        x=0\\n        while i<len(s)-2:\\n            if s[i]==\"X\":\\n                s[i+1]=\"0\"\\n                s[i+2]=\"0\"\\n                s[i]=\"0\"\\n                i+=3\\n                x+=1\\n            else:\\n                i+=1\\n        if s[len(s)-1]==\"X\" or s[len(s)-2]==\"X\":\\n            x+=1\\n        return x\\n        \\n       \\n        \\n        \\n        \\n            \\n\\n        \\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def minimumMoves(self, s):\\n        s=list(s)\\n        i=0\\n        x=0\\n        while i<len(s)-2:\\n            if s[i]==\"X\":\\n                s[i+1]=\"0\"\\n                s[i+2]=\"0\"\\n                s[i]=\"0\"\\n                i+=3\\n                x+=1\\n            else:\\n                i+=1\\n        if s[len(s)-1]==\"X\" or s[len(s)-2]==\"X\":\\n            x+=1\\n        return x\\n        \\n       \\n        \\n        \\n        \\n            \\n\\n        \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4040312,
                "title": "easy-to-understand-python3-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minimumMoves(self, s: str) -> int:\\n        count = 0\\n        i = 0\\n        while i < len(s):\\n            if s[i] == \"O\":\\n                i += 1\\n            else:\\n                if s[i:i+3].count(\\'X\\') >= 1:\\n                    count += 1\\n                i += 3\\n\\n        return count\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimumMoves(self, s: str) -> int:\\n        count = 0\\n        i = 0\\n        while i < len(s):\\n            if s[i] == \"O\":\\n                i += 1\\n            else:\\n                if s[i:i+3].count(\\'X\\') >= 1:\\n                    count += 1\\n                i += 3\\n\\n        return count\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4037801,
                "title": "c-solution",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\npublic class Solution\\n{\\n    public int MinimumMoves(string s)\\n    {\\n        var count = 0;\\n\\n        for (var i = 0; i < s.Length; i++)\\n        {\\n            if (s[i] != \\'X\\') continue;\\n            \\n            count++;\\n            i += 2;\\n        }\\n\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution\\n{\\n    public int MinimumMoves(string s)\\n    {\\n        var count = 0;\\n\\n        for (var i = 0; i < s.Length; i++)\\n        {\\n            if (s[i] != \\'X\\') continue;\\n            \\n            count++;\\n            i += 2;\\n        }\\n\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4022544,
                "title": "simple-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int ans = 0;\\n        for(int i = 0; i < s.size(); i++)\\n        {\\n            if(s[i] == \\'X\\')\\n            {\\n                ans++;\\n                i += 2;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int ans = 0;\\n        for(int i = 0; i < s.size(); i++)\\n        {\\n            if(s[i] == \\'X\\')\\n            {\\n                ans++;\\n                i += 2;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3991014,
                "title": "python-10-line-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def minimumMoves(self, s: str) -> int:\\n        c=0\\n        Len=len(s)\\n        i=0\\n        while i<Len:\\n            if s[i]==\\'X\\':\\n                c+=1\\n                i+=3\\n                continue\\n            i+=1\\n        return c\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimumMoves(self, s: str) -> int:\\n        c=0\\n        Len=len(s)\\n        i=0\\n        while i<Len:\\n            if s[i]==\\'X\\':\\n                c+=1\\n                i+=3\\n                continue\\n            i+=1\\n        return c\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3990654,
                "title": "java-while-loop-simple-logicst",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int i = 0;\\n        int step = 0;\\n\\n        while(i<s.length()){\\n            if(s.charAt(i) == \\'X\\'){\\n                i = i+3;\\n                step++;\\n            }else{\\n                i++;\\n            }\\n        }\\n        return step;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int i = 0;\\n        int step = 0;\\n\\n        while(i<s.length()){\\n            if(s.charAt(i) == \\'X\\'){\\n                i = i+3;\\n                step++;\\n            }else{\\n                i++;\\n            }\\n        }\\n        return step;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3987784,
                "title": "rust-beginner-friendly-scan-o-n-time-and-o-1-space",
                "content": "# Intuition\\nThe best time to make a \"move\" (convert a sequence of 3 characters to `O`) is as late as possible. This means when we iterate on a string we want to make a move when we come across an \"X\", not before. \\n\\nThe solution below iterates on the string and counts the number of times we had to make a move. To avoid allocating extra space, we update the index to skip the characters after making a move.\\n\\n\\n\\n# Code\\n```\\nimpl Solution {\\n    pub fn minimum_moves(s: String) -> i32 {\\n\\n        let mut i: usize = 0;\\n        let mut res: i32 = 0;\\n\\n        while i < s.len(){\\n            if s.chars().nth(i).unwrap() == \\'X\\'{\\n                res +=1;\\n                i+=2;\\n            }\\n            \\n            i+=1;\\n        }\\n\\n\\n        res\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn minimum_moves(s: String) -> i32 {\\n\\n        let mut i: usize = 0;\\n        let mut res: i32 = 0;\\n\\n        while i < s.len(){\\n            if s.chars().nth(i).unwrap() == \\'X\\'{\\n                res +=1;\\n                i+=2;\\n            }\\n            \\n            i+=1;\\n        }\\n\\n\\n        res\\n        \\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3959891,
                "title": "beat-95-with-a-simple-traverse-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def minimumMoves(self, s: str) -> int:\\n        res=ct=0\\n        for i in range(len(s)):\\n            if s[i] ==\\'X\\':\\n                ct+=1\\n            elif ct>0:\\n                ct+=1\\n            if ct==3:\\n                res+=1\\n                ct=0\\n        \\n        return res+1 if ct>0 else res\\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimumMoves(self, s: str) -> int:\\n        res=ct=0\\n        for i in range(len(s)):\\n            if s[i] ==\\'X\\':\\n                ct+=1\\n            elif ct>0:\\n                ct+=1\\n            if ct==3:\\n                res+=1\\n                ct=0\\n        \\n        return res+1 if ct>0 else res\\n\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3948590,
                "title": "java-solution-2-pointer-technique",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int n = s.length();\\n        int ans = 0;\\n        int i = 0;\\n        while(i < n){\\n            int j = i;\\n            while(j < n && s.charAt(j) == \\'O\\'){\\n                j++;\\n            }\\n            if(j == n){\\n                break;\\n            }\\n            ans++;\\n            i = j+3;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int n = s.length();\\n        int ans = 0;\\n        int i = 0;\\n        while(i < n){\\n            int j = i;\\n            while(j < n && s.charAt(j) == \\'O\\'){\\n                j++;\\n            }\\n            if(j == n){\\n                break;\\n            }\\n            ans++;\\n            i = j+3;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3944032,
                "title": "easy-solution-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minimumMoves(self, s: str) -> int:\\n        i,m =0,0\\n        \\n        while i<len(s):\\n            if s[i]!=\"X\":\\n                i+=1\\n            \\n            elif \"X\" in s[i:i+2]:\\n                m+=1\\n                i+=3\\n        \\n        return m\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimumMoves(self, s: str) -> int:\\n        i,m =0,0\\n        \\n        while i<len(s):\\n            if s[i]!=\"X\":\\n                i+=1\\n            \\n            elif \"X\" in s[i:i+2]:\\n                m+=1\\n                i+=3\\n        \\n        return m\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3936671,
                "title": "very-very-easy-jebas-raja-the-peter",
                "content": "# Intuition:KARUNYA UNIVERSITY::ACCENTURE\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumMoves(String s) {\\nint moves=0;\\n\\nfor (int i = 0; i < s.length(); ) \\n{\\n  if (s.charAt(i)==\\'X\\')\\n   {\\n      moves++;\\n     i=i+3;\\n    }\\n  else\\n  {\\n   i++;\\n  }\\n\\n}\\n \\n return moves;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\nint moves=0;\\n\\nfor (int i = 0; i < s.length(); ) \\n{\\n  if (s.charAt(i)==\\'X\\')\\n   {\\n      moves++;\\n     i=i+3;\\n    }\\n  else\\n  {\\n   i++;\\n  }\\n\\n}\\n \\n return moves;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3904947,
                "title": "my-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int i = 0, step = 0;\\n\\n        while (i < s.length()) {\\n            if (s.charAt(i) == \\'X\\') {\\n                i += 3;\\n                step++;\\n            } else i++;\\n        }\\n        return step;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int i = 0, step = 0;\\n\\n        while (i < s.length()) {\\n            if (s.charAt(i) == \\'X\\') {\\n                i += 3;\\n                step++;\\n            } else i++;\\n        }\\n        return step;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3904929,
                "title": "my-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int i = 0, step = 0;\\n\\n        while (i < s.length()) {\\n            if (s.charAt(i) == \\'X\\') {\\n                i += 3;\\n                step++;\\n            } else i++;\\n        }\\n        return step;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int i = 0, step = 0;\\n\\n        while (i < s.length()) {\\n            if (s.charAt(i) == \\'X\\') {\\n                i += 3;\\n                step++;\\n            } else i++;\\n        }\\n        return step;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3904679,
                "title": "easy-solution-using-java",
                "content": "# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumMoves(String str) {\\n        int count = 0;\\n        StringBuilder s = new StringBuilder(str);\\n        for(int i = 0; i < s.length(); i++){\\n            if(s.charAt(i) == \\'X\\'){\\n                i+=2;\\n                count++;\\n            } \\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumMoves(String str) {\\n        int count = 0;\\n        StringBuilder s = new StringBuilder(str);\\n        for(int i = 0; i < s.length(); i++){\\n            if(s.charAt(i) == \\'X\\'){\\n                i+=2;\\n                count++;\\n            } \\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3865484,
                "title": "easy-cpp-solution-beats-100-in-runtime-beginner-friendly",
                "content": "![image.png](https://assets.leetcode.com/users/images/4f720ff9-83b8-4a9e-8729-6038655e36f2_1691213422.532398.png)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int cnt=0;\\n        for(int i=0; i<s.length(); i++){\\n            // If s[i] == \\'X\\' then move 3 steps ahead as all those\\n            // \\'X\\' which are in range of it will be updated in same step\\n            if(s[i] == \\'X\\'){\\n                i = i+2;\\n                cnt++;\\n            }\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int cnt=0;\\n        for(int i=0; i<s.length(); i++){\\n            // If s[i] == \\'X\\' then move 3 steps ahead as all those\\n            // \\'X\\' which are in range of it will be updated in same step\\n            if(s[i] == \\'X\\'){\\n                i = i+2;\\n                cnt++;\\n            }\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3864870,
                "title": "python-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minimumMoves(self, s: str) -> int:\\n        i, ans = 0, 0\\n        while i < len(s):\\n            if s[i] == \\'X\\':\\n                ans += 1\\n                i += 2\\n            i += 1\\n        return ans\\n        \\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimumMoves(self, s: str) -> int:\\n        i, ans = 0, 0\\n        while i < len(s):\\n            if s[i] == \\'X\\':\\n                ans += 1\\n                i += 2\\n            i += 1\\n        return ans\\n        \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3844651,
                "title": "best-solution-beats-92",
                "content": "\\n\\n# Code\\n```\\nclass Solution(object):\\n    def minimumMoves(self, s):\\n        c=0\\n        i=0\\n        while i<len(s):\\n            if s[i]==\\'X\\':\\n                c+=1\\n                i+=3\\n            else:\\n                i+=1\\n        return c\\n            \\n        \\n\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def minimumMoves(self, s):\\n        c=0\\n        i=0\\n        while i<len(s):\\n            if s[i]==\\'X\\':\\n                c+=1\\n                i+=3\\n            else:\\n                i+=1\\n        return c\\n            \\n        \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3829835,
                "title": "solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int tot = 0;\\n        for(int i = 0; i<s.size(); i++){\\n            if(s[i] == \\'X\\'){\\n                tot++;\\n                int j = 0;\\n                while(i+j<s.size() and j<3){\\n                    s[i+j] = \\'O\\';\\n                    j++;\\n                }\\n            i = i+2;\\n            }\\n        }\\n        return tot;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int tot = 0;\\n        for(int i = 0; i<s.size(); i++){\\n            if(s[i] == \\'X\\'){\\n                tot++;\\n                int j = 0;\\n                while(i+j<s.size() and j<3){\\n                    s[i+j] = \\'O\\';\\n                    j++;\\n                }\\n            i = i+2;\\n            }\\n        }\\n        return tot;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3824216,
                "title": "c-easy-5-lines-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int count = 0;\\n\\n        for(int i = 0;i<s.size();i++){\\n            if(s[i] == \\'X\\'){\\n                count++;\\n                i+=2;\\n            }\\n        }\\n\\n        return count;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int count = 0;\\n\\n        for(int i = 0;i<s.size();i++){\\n            if(s[i] == \\'X\\'){\\n                count++;\\n                i+=2;\\n            }\\n        }\\n\\n        return count;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3813613,
                "title": "beats-100-basic-solution",
                "content": "\\n\\n\\n```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int count=0;\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]==\\'X\\'){\\n                count++;\\n                i+=2;}\\n        }\\n      return count;\\n      \\n\\n     \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int count=0;\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]==\\'X\\'){\\n                count++;\\n                i+=2;}\\n        }\\n      return count;\\n      \\n\\n     \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3800512,
                "title": "general-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Gener -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int res=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s.charAt(i)==\\'X\\')\\n            {\\n                i+=2;\\n                res++;\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int res=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s.charAt(i)==\\'X\\')\\n            {\\n                i+=2;\\n                res++;\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3790646,
                "title": "simple",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s){\\n        int c=0;\\n        for(int i=0; i<s.size(); i++){\\n            if(s[i]==\\'X\\'){\\n                i+=2;\\n                c++;\\n            }\\n        }\\n        return c;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s){\\n        int c=0;\\n        for(int i=0; i<s.size(); i++){\\n            if(s[i]==\\'X\\'){\\n                i+=2;\\n                c++;\\n            }\\n        }\\n        return c;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3790234,
                "title": "python-simple-solution-o-n",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution: \\n  def minimumMoves(self, s: str) -> int:\\n    moves = 0\\n    index = 0\\n    n = len(s)\\n    while index < n:\\n      if s[index] == \\'X\\':\\n        moves += 1\\n        index += 3\\n      else:\\n        index += 1\\n    return moves\\n```",
                "solutionTags": [
                    "Python3",
                    "String",
                    "Greedy"
                ],
                "code": "```\\nclass Solution: \\n  def minimumMoves(self, s: str) -> int:\\n    moves = 0\\n    index = 0\\n    n = len(s)\\n    while index < n:\\n      if s[index] == \\'X\\':\\n        moves += 1\\n        index += 3\\n      else:\\n        index += 1\\n    return moves\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3781365,
                "title": "simple-java-solution",
                "content": "# Intuition\\n    \\n\\n# Approach\\n#Greedy Approach\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int count=0;\\n        if(s.contains(\"X\"))\\n        {\\n            for(int j=0;j<s.length();){\\n                if(s.charAt(j)==\\'X\\')\\n                {\\n                    j=j+3;\\n                    count++;\\n                    \\n                }\\n                else{\\n                j++;\\n                }\\n            }\\n            return count;\\n        }\\n        else\\n        {\\n            return 0;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int count=0;\\n        if(s.contains(\"X\"))\\n        {\\n            for(int j=0;j<s.length();){\\n                if(s.charAt(j)==\\'X\\')\\n                {\\n                    j=j+3;\\n                    count++;\\n                    \\n                }\\n                else{\\n                j++;\\n                }\\n            }\\n            return count;\\n        }\\n        else\\n        {\\n            return 0;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3736207,
                "title": "o-n-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int n = s.length(),count=0;;\\n        for(int i=0;i<n;i++){\\n            if(s.charAt(i)!=\\'O\\'){\\n                count++;\\n                i+=2;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int n = s.length(),count=0;;\\n        for(int i=0;i<n;i++){\\n            if(s.charAt(i)!=\\'O\\'){\\n                count++;\\n                i+=2;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3733902,
                "title": "easy-to-get-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int cnt=0;\\n          \\n    for(int i=0;i<s.length();i++){\\n        if(s.charAt(i)==\\'X\\'){\\n            i=i+2;\\n            cnt++;\\n        }\\n    }\\n        return cnt;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int cnt=0;\\n          \\n    for(int i=0;i<s.length();i++){\\n        if(s.charAt(i)==\\'X\\'){\\n            i=i+2;\\n            cnt++;\\n        }\\n    }\\n        return cnt;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3732318,
                "title": "easiest-solution-cpp",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n       \\n        int ans=0;\\n        for(int i=0;i<s.length();){\\n            if(s[i]==\\'X\\'){\\n                i+=3;\\n                ans++;\\n                \\n            }\\n            else{\\n                i++;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n       \\n        int ans=0;\\n        for(int i=0;i<s.length();){\\n            if(s[i]==\\'X\\'){\\n                i+=3;\\n                ans++;\\n                \\n            }\\n            else{\\n                i++;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3697513,
                "title": "cpp-brute-force-greedy-100-runtime",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int count{};\\n        int len = s.size();\\n        for(int i=0; i< len - 2; ){\\n            if(s[i]==\\'O\\'){\\n                i++;\\n                continue;\\n            }\\n            if(s[i]==\\'X\\' || s[i+1] == \\'X\\' || s[i+2] == \\'X\\'){\\n                s[i] = \\'O\\';\\n                s[i+1] = \\'O\\';\\n                s[i+2] = \\'O\\';\\n                count++;\\n            }\\n        }\\n        if(s[len-2]==\\'X\\' || s[len-1] == \\'X\\')\\n            count++;       \\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int count{};\\n        int len = s.size();\\n        for(int i=0; i< len - 2; ){\\n            if(s[i]==\\'O\\'){\\n                i++;\\n                continue;\\n            }\\n            if(s[i]==\\'X\\' || s[i+1] == \\'X\\' || s[i+2] == \\'X\\'){\\n                s[i] = \\'O\\';\\n                s[i+1] = \\'O\\';\\n                s[i+2] = \\'O\\';\\n                count++;\\n            }\\n        }\\n        if(s[len-2]==\\'X\\' || s[len-1] == \\'X\\')\\n            count++;       \\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3684569,
                "title": "super-easy-beginner-solution-explained-in-javascript",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\nFirstly, we initialize a variable called `counter` to keep track of the number of moves. In order to make the minimum number of moves, we loop through the string, and every time we find an \\'X\\' character, we convert three characters, starting from the current character, which is X. When we do this, we increment the counter and also increment `i` by 2, since we already converted 3 characters starting from the current one, which was \\'X\\'. Therefore, we don\\'t need to check the two characters after \\'X\\' since we converted them. At the end of the loop, after we have examined the whole string, we return `counter`.\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar minimumMoves = function(s) {\\n    let counter = 0;\\n\\n    for (let i = 0; i < s.length; i++) {\\n        if (s[i] === \\'X\\') {\\n            counter++;\\n            i += 2;\\n        }\\n    }\\n    \\n    return counter;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar minimumMoves = function(s) {\\n    let counter = 0;\\n\\n    for (let i = 0; i < s.length; i++) {\\n        if (s[i] === \\'X\\') {\\n            counter++;\\n            i += 2;\\n        }\\n    }\\n    \\n    return counter;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3684290,
                "title": "java-simple-solution-for-beginners-and-beats-85",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe just need iterate over the input word and check symbols.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe, using while, iterate over the input string. If we get \\'0\\' we just keep iterating, otherwise we skip 3 indexes and increment result var.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int result=0;\\n        int index =0;\\n\\n        while (index<s.length())\\n        {\\n            if(s.charAt(index)==\\'O\\') {\\n            index++;\\n            }\\n            else {\\n                index+=3;\\n                result++;\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int result=0;\\n        int index =0;\\n\\n        while (index<s.length())\\n        {\\n            if(s.charAt(index)==\\'O\\') {\\n            index++;\\n            }\\n            else {\\n                index+=3;\\n                result++;\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3676947,
                "title": "0ms",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int ans = 0, n = s.length(); \\n        for(int i = 0; i < n - 2; i++){\\n            while(i < n && s[i]!=\\'X\\'){i++;}\\n            if((i < n) && (s[i]==\\'X\\'||s[i+1]==\\'X\\'||s[i+2]==\\'X\\')){\\n                ans++;\\n                s[i] = \\'0\\';\\n                if(i + 1 < n) s[i+1] = \\'0\\';\\n                if(i + 2 < n) s[i+2] = \\'0\\';\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int ans = 0, n = s.length(); \\n        for(int i = 0; i < n - 2; i++){\\n            while(i < n && s[i]!=\\'X\\'){i++;}\\n            if((i < n) && (s[i]==\\'X\\'||s[i+1]==\\'X\\'||s[i+2]==\\'X\\')){\\n                ans++;\\n                s[i] = \\'0\\';\\n                if(i + 1 < n) s[i+1] = \\'0\\';\\n                if(i + 2 < n) s[i+2] = \\'0\\';\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3674227,
                "title": "beat-100-simplest-solution-full-explanation-c",
                "content": "# Intuition\\n*The minimumMoves function aims to find the minimum number of moves required to transform a given string s into a target string by performing specific operations. In this case, the target string consists of consecutive groups of three \\'X\\' characters. The code counts the number of \\'X\\' characters in the string and determines the minimum number of moves needed to form the target string.*\\n\\n# Approach\\n*Initialize the length of the string s as n.\\nInitialize a variable ans to keep track of the minimum number of moves required.\\nInitialize a pointer begin to traverse the string from left to right.\\nEnter a loop while the begin pointer is within the valid range of the string length (begin <= n).\\nInside the loop, check if the character at index begin is \\'X\\'.\\nIf it is, increment the ans by 1 to count the move required to form a group of three \\'X\\' characters.\\nIncrease the begin pointer by 3 to skip the current group of \\'X\\' characters and move to the next character.\\nIf the character at index begin is not \\'X\\', simply increment the begin pointer by 1 to move to the next character.\\nRepeat steps 5 until the begin pointer reaches the end of the string.\\nReturn the minimum number of moves ans.*\\n\\n# Complexity\\n*- Time complexity:\\nTime Complexity: The code traverses the string once, performing constant time operations at each character. Therefore, the time complexity is O(n), where n is the length of the input string s.*\\n\\n*- Space complexity:\\nSpace Complexity: The code uses a constant amount of additional space for the variables n, ans, and begin. Hence, the space complexity is O(1).*\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int n= s.length();\\n        int ans=0;\\n        int begin=0;\\n        while(begin<=n){\\n            if(s[begin]==\\'X\\'){\\n                ans++;\\n                begin+=3;\\n            }\\n            else\\n            begin++;\\n\\n        \\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int n= s.length();\\n        int ans=0;\\n        int begin=0;\\n        while(begin<=n){\\n            if(s[begin]==\\'X\\'){\\n                ans++;\\n                begin+=3;\\n            }\\n            else\\n            begin++;\\n\\n        \\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3668556,
                "title": "c-very-simple-3-line-solution-0ms",
                "content": "Skip next 2 characters when an \\'X\\' is found and incrememnt number of moves by 1.\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int moves=0;\\n        for(int i=0; i<s.size(); i++){\\n            if(s[i]==\\'X\\'){moves++; i+=2;}\\n        }\\n        return moves;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int moves=0;\\n        for(int i=0; i<s.size(); i++){\\n            if(s[i]==\\'X\\'){moves++; i+=2;}\\n        }\\n        return moves;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3614205,
                "title": "easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int count = 0;\\n        \\n        for (int i = 0; i < s.length();) {            \\n            if (s.charAt(i) == \\'X\\') {\\n                count++;\\n                i += 3;\\n            } else {\\n                i++;\\n            }\\n        }\\n        \\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int count = 0;\\n        \\n        for (int i = 0; i < s.length();) {            \\n            if (s.charAt(i) == \\'X\\') {\\n                count++;\\n                i += 3;\\n            } else {\\n                i++;\\n            }\\n        }\\n        \\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3555390,
                "title": "runtime-57-ms-memory-44-7-mb-beats-5-77",
                "content": "Want to know how to run faster with js.\\nIdea? Comment/Discuss\\n\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar minimumMoves = function(s) {\\n    var count = 0\\n    s = s.split(\\'\\')\\n    while (s.length) {\\n        if (s.indexOf(\\'X\\') > -1) {\\n            s.splice(0, s.indexOf(\\'X\\'))\\n        }\\n        s.splice(0,3).includes(\\'X\\') ? count++ : \"\"\\n    }\\n    return count\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar minimumMoves = function(s) {\\n    var count = 0\\n    s = s.split(\\'\\')\\n    while (s.length) {\\n        if (s.indexOf(\\'X\\') > -1) {\\n            s.splice(0, s.indexOf(\\'X\\'))\\n        }\\n        s.splice(0,3).includes(\\'X\\') ? count++ : \"\"\\n    }\\n    return count\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3546662,
                "title": "easy-c-solution",
                "content": "# Intuition\\nLoop through the string using pointer.\\n\\n# Approach\\nLoop through the string, increment pointer in the groups.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\npublic class Solution {\\n    public int MinimumMoves(string s) {\\n        int answer = 0;\\n        int p = 0;\\n\\n        while(p < s.Length)\\n        {\\n            if(s[p] == \\'X\\')\\n            {\\n                answer++;\\n                p += 3;\\n                continue;\\n            }\\n\\n            p++;\\n        }\\n\\n        return answer;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int MinimumMoves(string s) {\\n        int answer = 0;\\n        int p = 0;\\n\\n        while(p < s.Length)\\n        {\\n            if(s[p] == \\'X\\')\\n            {\\n                answer++;\\n                p += 3;\\n                continue;\\n            }\\n\\n            p++;\\n        }\\n\\n        return answer;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3507511,
                "title": "basic-java-sol-100-beats",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int sum = 0;\\n        int sz = s.length();\\n        for (int i = 0; i < sz; i++) {\\n            while (i < sz && s.charAt(i) == \\'X\\') {\\n                sum++;\\n                i += 3;\\n            }\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int sum = 0;\\n        int sz = s.length();\\n        for (int i = 0; i < sz; i++) {\\n            while (i < sz && s.charAt(i) == \\'X\\') {\\n                sum++;\\n                i += 3;\\n            }\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3502526,
                "title": "algo-just-with",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nint minimumMoves(char * string){\\n  int i = 0, out = 0;\\n  while (!(string[i]==\\'\\\\0\\') && ((string[i] == \\'O\\' && ++i) ||\\n        (string[i] == \\'\\\\0\\' ||\\n         ((++out && (string[i++] = \\'O\\')) &&\\n          (string[i] == \\'\\\\0\\' ||\\n           ((string[i++] = \\'O\\') &&\\n            (string[i] == \\'\\\\0\\' || ((string[i++] = \\'O\\'))))))))) {\\n  }\\n  return out;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint minimumMoves(char * string){\\n  int i = 0, out = 0;\\n  while (!(string[i]==\\'\\\\0\\') && ((string[i] == \\'O\\' && ++i) ||\\n        (string[i] == \\'\\\\0\\' ||\\n         ((++out && (string[i++] = \\'O\\')) &&\\n          (string[i] == \\'\\\\0\\' ||\\n           ((string[i++] = \\'O\\') &&\\n            (string[i] == \\'\\\\0\\' || ((string[i++] = \\'O\\'))))))))) {\\n  }\\n  return out;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3502517,
                "title": "easy-algo",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nint minimumMoves(char * string){\\n  int i = 0, out = 0;\\n  while (string[i] != \\'\\\\0\\') {\\n    (string[i]==\\'O\\' && ++i) || (string[i]==\\'\\\\0\\' || ((++out && (string[i++]=\\'O\\')) && (string[i]==\\'\\\\0\\' || ((string[i++]=\\'O\\') && (string[i]==\\'\\\\0\\' || ((string[i++]=\\'O\\')))) )));                                          \\n  }\\n  return out;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint minimumMoves(char * string){\\n  int i = 0, out = 0;\\n  while (string[i] != \\'\\\\0\\') {\\n    (string[i]==\\'O\\' && ++i) || (string[i]==\\'\\\\0\\' || ((++out && (string[i++]=\\'O\\')) && (string[i]==\\'\\\\0\\' || ((string[i++]=\\'O\\') && (string[i]==\\'\\\\0\\' || ((string[i++]=\\'O\\')))) )));                                          \\n  }\\n  return out;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3502510,
                "title": "fastest-typescript-solution-in-o-n-56ms",
                "content": "# Intuition\\nBasic iteration\\n\\n# Approach\\nIf we meet an \\'O\\' we skip the character, if we meet an \\'X\\' we add to our counter and skip two loops (two characters). \\nLastly we return count.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nfunction minimumMoves(s: string): number {\\n  let count = 0\\n  for ( let i = 0; i < s.length; i++ ) {\\n    if ( s[i] === \\'O\\' ) {\\n      continue\\n    }\\n    if ( s[i] === \\'X\\' ) {\\n      count++\\n      i++\\n      i++\\n    }\\n  }\\n  return count\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction minimumMoves(s: string): number {\\n  let count = 0\\n  for ( let i = 0; i < s.length; i++ ) {\\n    if ( s[i] === \\'O\\' ) {\\n      continue\\n    }\\n    if ( s[i] === \\'X\\' ) {\\n      count++\\n      i++\\n      i++\\n    }\\n  }\\n  return count\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3497746,
                "title": "greedily-mark-first-x-seen",
                "content": "# Code\\n```\\ndef minimumMoves(self, s: str) -> int:\\n    i = 0\\n    ret = 0\\n    while i<len(s):\\n        if s[i] == \\'X\\':\\n            ret += 1\\n            i += 3\\n        else:\\n            i += 1\\n    return ret\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\ndef minimumMoves(self, s: str) -> int:\\n    i = 0\\n    ret = 0\\n    while i<len(s):\\n        if s[i] == \\'X\\':\\n            ret += 1\\n            i += 3\\n        else:\\n            i += 1\\n    return ret\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3477352,
                "title": "beat-100-with-this-shortest-easiest-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int i=0,j=s.length()-0,x=0;\\n        while(i<j){\\n            if(s[i]==\\'X\\'){x++;i+=3;}\\n            else i++;\\n        }\\n        return x;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int i=0,j=s.length()-0,x=0;\\n        while(i<j){\\n            if(s[i]==\\'X\\'){x++;i+=3;}\\n            else i++;\\n        }\\n        return x;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3462800,
                "title": "simple-c-solution-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int count=0;\\n        int i=0;\\n        \\n        for(int i=0;i<s.size();){\\n            if(s[i]==\\'O\\'){\\n             // continue;\\n              i++;}\\n            else{\\n              count++;\\n              i+=3;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int count=0;\\n        int i=0;\\n        \\n        for(int i=0;i<s.size();){\\n            if(s[i]==\\'O\\'){\\n             // continue;\\n              i++;}\\n            else{\\n              count++;\\n              i+=3;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3461822,
                "title": "simpl",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar minimumMoves = function (s) {\\n    let result = 0\\n    const arr = Array.from(s)\\n    for (let i = 0; i < arr.length - 2; i++) {\\n        if (arr[i] === \\'X\\') {\\n            arr[i] = \\'O\\'\\n            arr[i + 1] = \\'O\\'\\n            arr[i + 2] = \\'O\\'\\n            result++\\n        }\\n    }\\n    return arr.includes(\\'X\\')\\n        ?\\n        result + 1\\n        :\\n        result\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar minimumMoves = function (s) {\\n    let result = 0\\n    const arr = Array.from(s)\\n    for (let i = 0; i < arr.length - 2; i++) {\\n        if (arr[i] === \\'X\\') {\\n            arr[i] = \\'O\\'\\n            arr[i + 1] = \\'O\\'\\n            arr[i + 2] = \\'O\\'\\n            result++\\n        }\\n    }\\n    return arr.includes(\\'X\\')\\n        ?\\n        result + 1\\n        :\\n        result\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3441832,
                "title": "javascript-solution-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar minimumMoves = function(s) {\\n    let l=s.length\\n    let n=0\\n   for(let i=0;i<l;i++){\\n       if(s[i]===\\'O\\'){\\n           while(s[i]===\\'O\\'){\\n           i++\\n           }\\n       }\\n       if(s[i]===\\'X\\'){\\n           i+=2\\n           n++\\n       }\\n   }\\n   return n\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar minimumMoves = function(s) {\\n    let l=s.length\\n    let n=0\\n   for(let i=0;i<l;i++){\\n       if(s[i]===\\'O\\'){\\n           while(s[i]===\\'O\\'){\\n           i++\\n           }\\n       }\\n       if(s[i]===\\'X\\'){\\n           i+=2\\n           n++\\n       }\\n   }\\n   return n\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3425473,
                "title": "minimum-moves-to-convert-string",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minimumMoves(self, s: str) -> int:\\n        ans=0\\n        a=0\\n        n = len(s)\\n        while ans < n:\\n            if s[ans] == \\'X\\':\\n                ans+= 3\\n                a+= 1\\n            else:\\n                ans+= 1\\n        return a\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimumMoves(self, s: str) -> int:\\n        ans=0\\n        a=0\\n        n = len(s)\\n        while ans < n:\\n            if s[ans] == \\'X\\':\\n                ans+= 3\\n                a+= 1\\n            else:\\n                ans+= 1\\n        return a\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3417877,
                "title": "java-0ms-efficient-approach-easy-to-understand",
                "content": "# Code\\n```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int step=0;\\n        int i=0,len=s.length();;\\n        for (i = 0; i < len ; ) {\\n        if (s.charAt(i) == \\'X\\') {\\n            step++;\\n            i += 3;\\n        } else {\\n            i++;\\n        }\\n        }\\n        return step;\\n    }\\n}\\n```\\n# Result Image\\n\\n![image.png](https://assets.leetcode.com/users/images/755e9e56-d671-42f5-95ab-539711159ec2_1681517467.5876079.png)\\n\\n![image.png](https://assets.leetcode.com/users/images/87bab3dd-fabf-4b71-9ac5-984d9015438e_1678160362.0612018.jpeg)\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int step=0;\\n        int i=0,len=s.length();;\\n        for (i = 0; i < len ; ) {\\n        if (s.charAt(i) == \\'X\\') {\\n            step++;\\n            i += 3;\\n        } else {\\n            i++;\\n        }\\n        }\\n        return step;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3410451,
                "title": "c-simple-straight-forward",
                "content": "# Code\\n```\\npublic class Solution {\\n    public int MinimumMoves(string s)\\n    {\\n        int moves = 0;\\n\\n        for (int i = 0; i < s.Length; i++)\\n        {\\n            if (s[i] == \\'X\\')\\n            {\\n                i += 2; // Skip the next 2 chars since a move is 3\\n                moves++;\\n            }\\n        }\\n\\n        return moves;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int MinimumMoves(string s)\\n    {\\n        int moves = 0;\\n\\n        for (int i = 0; i < s.Length; i++)\\n        {\\n            if (s[i] == \\'X\\')\\n            {\\n                i += 2; // Skip the next 2 chars since a move is 3\\n                moves++;\\n            }\\n        }\\n\\n        return moves;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3410117,
                "title": "minimum-moves-to-convert-string",
                "content": "# Complexity\\n- Time complexity : O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) \\n    {\\n        int i = 0 , count = 0 ;\\n        while(i < s.size()-2)    \\n        {\\n            if(s[i] == \\'X\\')\\n            {\\n                for(int j = i ; j < i+3 ; j++)\\n                {\\n                    s[j] = \\'O\\' ;\\n                }\\n                count++ ;\\n            }\\n            i++ ;\\n        }\\n        if(s[s.size()-1] == \\'X\\' || s[s.size()-2] == \\'X\\')\\n        {\\n            count++ ;\\n        }\\n        return count ;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) \\n    {\\n        int i = 0 , count = 0 ;\\n        while(i < s.size()-2)    \\n        {\\n            if(s[i] == \\'X\\')\\n            {\\n                for(int j = i ; j < i+3 ; j++)\\n                {\\n                    s[j] = \\'O\\' ;\\n                }\\n                count++ ;\\n            }\\n            i++ ;\\n        }\\n        if(s[s.size()-1] == \\'X\\' || s[s.size()-2] == \\'X\\')\\n        {\\n            count++ ;\\n        }\\n        return count ;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3397815,
                "title": "python-explained-runtime-11-ms-beats-97-37",
                "content": "![Screenshot 2023-04-09 9.10.17 PM.png](https://assets.leetcode.com/users/images/ade7310a-56d1-4236-8e8e-ddce6f714c42_1681054849.6592138.png)\\n\\n# Code\\n```\\nclass Solution(object):\\n    def minimumMoves(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        \\n        # Indexing int.\\n        a = 0\\n\\n        # Minimum moves.\\n        b = 0\\n\\n        # Looping till index is beyond length of string.\\n        while (a < len(s)):\\n\\n            # If \\'X\\' is found.\\n            if s[a] == \\'X\\':\\n\\n                # Index forward by 3.\\n                # As there is to be \\'OOO\\'.\\n                a += 3\\n\\n                # Add 1 to b as min move.\\n                b += 1\\n            \\n            # If \\'O\\' is found.\\n            else:\\n                \\n                # Index forward by 1.\\n                a += 1\\n\\n        # Return minimum moves.\\n        return b\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def minimumMoves(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        \\n        # Indexing int.\\n        a = 0\\n\\n        # Minimum moves.\\n        b = 0\\n\\n        # Looping till index is beyond length of string.\\n        while (a < len(s)):\\n\\n            # If \\'X\\' is found.\\n            if s[a] == \\'X\\':\\n\\n                # Index forward by 3.\\n                # As there is to be \\'OOO\\'.\\n                a += 3\\n\\n                # Add 1 to b as min move.\\n                b += 1\\n            \\n            # If \\'O\\' is found.\\n            else:\\n                \\n                # Index forward by 1.\\n                a += 1\\n\\n        # Return minimum moves.\\n        return b\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3395666,
                "title": "python3-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def minimumMoves(self, s: str) -> int:\\n\\n        i=ans=0\\n\\n        while i<len(s):\\n            if s[i]==\"X\":\\n                ans+=1\\n                i+=3\\n            else:\\n                i+=1\\n        \\n        return ans\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimumMoves(self, s: str) -> int:\\n\\n        i=ans=0\\n\\n        while i<len(s):\\n            if s[i]==\"X\":\\n                ans+=1\\n                i+=3\\n            else:\\n                i+=1\\n        \\n        return ans\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3386786,
                "title": "greedy-template-simple",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minimumMoves(self, s: str) -> int:\\n        ans=0\\n        i=0\\n        while i<=len(s):\\n            if s[i]==\"X\":\\n                ans+=1\\n                i+=3 \\n            else:       \\n               i+=1 \\n            if i>=len(s):\\n                break         \\n        return ans            \\n                \\n                \\n\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimumMoves(self, s: str) -> int:\\n        ans=0\\n        i=0\\n        while i<=len(s):\\n            if s[i]==\"X\":\\n                ans+=1\\n                i+=3 \\n            else:       \\n               i+=1 \\n            if i>=len(s):\\n                break         \\n        return ans            \\n                \\n                \\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3381908,
                "title": "easiest-java-code",
                "content": "\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int res=0;\\n        for(int i=0;i<s.length();i++){\\n            if(s.charAt(i)==\\'X\\' ) {\\n                res++;\\n                i +=2;\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int res=0;\\n        for(int i=0;i<s.length();i++){\\n            if(s.charAt(i)==\\'X\\' ) {\\n                res++;\\n                i +=2;\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3379096,
                "title": "java-greedy",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n       int i=0,steps=0;\\n       while(i<s.length())\\n       {\\n           if(s.charAt(i)==\\'X\\')\\n           {\\n               i+=3;\\n               steps++;\\n           }\\n           else\\n           i++;\\n       }\\n       return steps;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n       int i=0,steps=0;\\n       while(i<s.length())\\n       {\\n           if(s.charAt(i)==\\'X\\')\\n           {\\n               i+=3;\\n               steps++;\\n           }\\n           else\\n           i++;\\n       }\\n       return steps;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3376411,
                "title": "dart-100",
                "content": "(\\u261D \\u055E\\u0A0A \\u055E)\\nUPVOTE if you like (\\uD83C\\uDF38\\u25E0\\u203F\\u25E0), If you have any question, feel free to ask.\\nfor explanation :\\nhttps://leetcode.com/problems/minimum-moves-to-convert-string/solutions/1502238/greedy/\\n________\\nhttps://leetcode.com/problems/minimum-moves-to-convert-string/solutions/1500340/c-easy-to-understand-no-change-in-string/\\n\\n# Code\\n```\\nclass Solution {\\n  int minimumMoves(String s) {\\n      int res=0;\\n        for(int i=0; i<s.length; i += s[i]== \\'X\\'? 3:1){\\n            res += s[i] == \\'X\\' ? 1 :0;\\n        }\\n        return res;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\n  int minimumMoves(String s) {\\n      int res=0;\\n        for(int i=0; i<s.length; i += s[i]== \\'X\\'? 3:1){\\n            res += s[i] == \\'X\\' ? 1 :0;\\n        }\\n        return res;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3370337,
                "title": "runtime-0-ms-beats-100-memory-40-7-mb-beats-31-48",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        if (!s.contains(\"X\")) {\\n            return 0;\\n        }\\n        int count = 0;\\n        int len = s.length();\\n        for (int i = 0; i < len; i++) {\\n            if(s.charAt(i) == \\'X\\'){\\n                count++;\\n                i += 2;\\n            }\\n        }\\n\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        if (!s.contains(\"X\")) {\\n            return 0;\\n        }\\n        int count = 0;\\n        int len = s.length();\\n        for (int i = 0; i < len; i++) {\\n            if(s.charAt(i) == \\'X\\'){\\n                count++;\\n                i += 2;\\n            }\\n        }\\n\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3360037,
                "title": "java-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution\\n {\\n    public int minimumMoves(String s)\\n     {\\n         int i=0;\\n         int ans=0;\\n         while(i<s.length())\\n         {\\n             if(s.charAt(i)!=\\'X\\')\\n             i++;\\n             else\\n             {\\n             if((i+3)>s.length())\\n             {\\n                 String S=s.substring(i,s.length());\\n                 \\n                 if(S.contains(\"X\"))\\n                 ans++;\\n                 break;\\n             }\\n             else\\n             {\\n             String S=s.substring(i,i+3);\\n             if(S.contains(\"X\"))\\n                 ans++;\\n                 i+=3;\\n             }\\n         }\\n         }\\n         return ans;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution\\n {\\n    public int minimumMoves(String s)\\n     {\\n         int i=0;\\n         int ans=0;\\n         while(i<s.length())\\n         {\\n             if(s.charAt(i)!=\\'X\\')\\n             i++;\\n             else\\n             {\\n             if((i+3)>s.length())\\n             {\\n                 String S=s.substring(i,s.length());\\n                 \\n                 if(S.contains(\"X\"))\\n                 ans++;\\n                 break;\\n             }\\n             else\\n             {\\n             String S=s.substring(i,i+3);\\n             if(S.contains(\"X\"))\\n                 ans++;\\n                 i+=3;\\n             }\\n         }\\n         }\\n         return ans;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3339049,
                "title": "c-solution-easy-solution",
                "content": "# Complexity\\n- Time complexity:\\nO(N)\\n- Space complexity:\\nO(1)\\n# Code\\n```\\npublic class Solution {\\n    public int MinimumMoves(string s) {\\n        int i = 0, res = 0;\\n        while(i < s.Length){\\n            if(s[i] == \\'X\\'){\\n                res++;\\n                i+=3;\\n            }else i++;\\n        } \\n        return res;       \\n    }\\n}\\n```",
                "solutionTags": [
                    "C#",
                    "Greedy"
                ],
                "code": "```\\npublic class Solution {\\n    public int MinimumMoves(string s) {\\n        int i = 0, res = 0;\\n        while(i < s.Length){\\n            if(s[i] == \\'X\\'){\\n                res++;\\n                i+=3;\\n            }else i++;\\n        } \\n        return res;       \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3338786,
                "title": "java-easiest-4-lines",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int ans=0;\\n        for(int i=0; i<s.length(); i++){\\n            if(s.charAt(i)==\\'X\\'){\\n                ans++;\\n                i+=2;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int ans=0;\\n        for(int i=0; i<s.length(); i++){\\n            if(s.charAt(i)==\\'X\\'){\\n                ans++;\\n                i+=2;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3324902,
                "title": "c-beat-100-solutution-easy-2-line-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(N)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int total=0;\\n        for(int i=00;i<s.size();i++){\\n            if(s[i]==\\'X\\'){\\n                s[i]=\\'O\\';\\n                total++;\\n                if(i+1<s.size()) s[i+1]=\\'O\\';\\n                if(i+2<s.size()) s[i+2]=\\'O\\';\\n            }\\n        }\\n        return total;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        int total=0;\\n        for(int i=00;i<s.size();i++){\\n            if(s[i]==\\'X\\'){\\n                s[i]=\\'O\\';\\n                total++;\\n                if(i+1<s.size()) s[i+1]=\\'O\\';\\n                if(i+2<s.size()) s[i+2]=\\'O\\';\\n            }\\n        }\\n        return total;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3324164,
                "title": "java-greedy-approach-100-faster",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\nWhen ever we encounter an X we have to make a move no matter what the next two characters are. So, when we encounter an X we increment answer and skip next two characters.\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int count=0;\\n        int n=s.length();\\n        for(int i=0;i<n;i++)\\n        {\\n            if(s.charAt(i)==\\'X\\')\\n            {\\n                count++;\\n                i+=2;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int count=0;\\n        int n=s.length();\\n        for(int i=0;i<n;i++)\\n        {\\n            if(s.charAt(i)==\\'X\\')\\n            {\\n                count++;\\n                i+=2;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3317420,
                "title": "java-simple-solution",
                "content": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int len = s.length();\\n        int moves = 0;\\n        \\n        for(int i = 0;i < len;i++){\\n            if(s.charAt(i) == \\'X\\'){\\n                moves++;\\n                i += 2;\\n            }\\n        }\\n        return moves;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int minimumMoves(String s) {\\n        int len = s.length();\\n        int moves = 0;\\n        \\n        for(int i = 0;i < len;i++){\\n            if(s.charAt(i) == \\'X\\'){\\n                moves++;\\n                i += 2;\\n            }\\n        }\\n        return moves;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3313832,
                "title": "simple-javascript-solution",
                "content": "\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar minimumMoves = function(s) {\\n    let count =0;\\n    let i =0;\\n    while(s.length > i){\\n        let char = s.charAt(i);\\n        if(char == \\'X\\'){\\n            count++\\n            i += 3\\n        } else {\\n           i++ \\n        }\\n        \\n    }\\n    return count\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar minimumMoves = function(s) {\\n    let count =0;\\n    let i =0;\\n    while(s.length > i){\\n        let char = s.charAt(i);\\n        if(char == \\'X\\'){\\n            count++\\n            i += 3\\n        } else {\\n           i++ \\n        }\\n        \\n    }\\n    return count\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3305430,
                "title": "c-queue-make-batch-of-3s",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        queue<int> q;\\n        int ans = 0;\\n        for (auto &ch : s) {\\n            if (ch == \\'X\\' || !q.empty())\\n                q.push(ch);\\n            if (q.size() == 3) {\\n                ans++;\\n                q = queue<int>();\\n            }\\n        }\\n        if (!q.empty())\\n            ans++;\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumMoves(string s) {\\n        queue<int> q;\\n        int ans = 0;\\n        for (auto &ch : s) {\\n            if (ch == \\'X\\' || !q.empty())\\n                q.push(ch);\\n            if (q.size() == 3) {\\n                ans++;\\n                q = queue<int>();\\n            }\\n        }\\n        if (!q.empty())\\n            ans++;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1841609,
                "content": [
                    {
                        "username": "Lakshya009",
                        "content": "For this test case -> \"OXOX\" shouldn't the answer be two? As we can select atmost 3 characters at once?\nThe expected answer for this test case is 1."
                    },
                    {
                        "username": "Jason-Law",
                        "content": "We can select `XOX` and convert it to `OOO`."
                    },
                    {
                        "username": "thomas-x-69",
                        "content": "stupid description"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Very hard greedy... at least for me:("
                    },
                    {
                        "username": "Burekodmesa",
                        "content": "I thought my solution would be faster if I skipped more 0s if it is possible in a string. Seems that\\'s not the case.\\n\\nWould be nice if it was specified in the description that we are dealing with the letter \\'O\\' and not the number \\'0\\'. Was trying to debug, thinking I did something wrong. It turns out I was mistaking the letter \\'O\\' with the number \\'0\\'.\\n\\nOther than that,  a decent easy question."
                    },
                    {
                        "username": "dsapelnikov",
                        "content": "Definitely not an \"easy\" one."
                    },
                    {
                        "username": "raihan12_",
                        "content": "Why we are the increasing the loop in +3"
                    },
                    {
                        "username": "prathmesh_24",
                        "content": "so that when we transform the next 3 characters from the current index i, our job is to jump 3 indices forward."
                    }
                ]
            },
            {
                "id": 1733523,
                "content": [
                    {
                        "username": "Lakshya009",
                        "content": "For this test case -> \"OXOX\" shouldn't the answer be two? As we can select atmost 3 characters at once?\nThe expected answer for this test case is 1."
                    },
                    {
                        "username": "Jason-Law",
                        "content": "We can select `XOX` and convert it to `OOO`."
                    },
                    {
                        "username": "thomas-x-69",
                        "content": "stupid description"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Very hard greedy... at least for me:("
                    },
                    {
                        "username": "Burekodmesa",
                        "content": "I thought my solution would be faster if I skipped more 0s if it is possible in a string. Seems that\\'s not the case.\\n\\nWould be nice if it was specified in the description that we are dealing with the letter \\'O\\' and not the number \\'0\\'. Was trying to debug, thinking I did something wrong. It turns out I was mistaking the letter \\'O\\' with the number \\'0\\'.\\n\\nOther than that,  a decent easy question."
                    },
                    {
                        "username": "dsapelnikov",
                        "content": "Definitely not an \"easy\" one."
                    },
                    {
                        "username": "raihan12_",
                        "content": "Why we are the increasing the loop in +3"
                    },
                    {
                        "username": "prathmesh_24",
                        "content": "so that when we transform the next 3 characters from the current index i, our job is to jump 3 indices forward."
                    }
                ]
            },
            {
                "id": 2036937,
                "content": [
                    {
                        "username": "Lakshya009",
                        "content": "For this test case -> \"OXOX\" shouldn't the answer be two? As we can select atmost 3 characters at once?\nThe expected answer for this test case is 1."
                    },
                    {
                        "username": "Jason-Law",
                        "content": "We can select `XOX` and convert it to `OOO`."
                    },
                    {
                        "username": "thomas-x-69",
                        "content": "stupid description"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Very hard greedy... at least for me:("
                    },
                    {
                        "username": "Burekodmesa",
                        "content": "I thought my solution would be faster if I skipped more 0s if it is possible in a string. Seems that\\'s not the case.\\n\\nWould be nice if it was specified in the description that we are dealing with the letter \\'O\\' and not the number \\'0\\'. Was trying to debug, thinking I did something wrong. It turns out I was mistaking the letter \\'O\\' with the number \\'0\\'.\\n\\nOther than that,  a decent easy question."
                    },
                    {
                        "username": "dsapelnikov",
                        "content": "Definitely not an \"easy\" one."
                    },
                    {
                        "username": "raihan12_",
                        "content": "Why we are the increasing the loop in +3"
                    },
                    {
                        "username": "prathmesh_24",
                        "content": "so that when we transform the next 3 characters from the current index i, our job is to jump 3 indices forward."
                    }
                ]
            },
            {
                "id": 2013705,
                "content": [
                    {
                        "username": "Lakshya009",
                        "content": "For this test case -> \"OXOX\" shouldn't the answer be two? As we can select atmost 3 characters at once?\nThe expected answer for this test case is 1."
                    },
                    {
                        "username": "Jason-Law",
                        "content": "We can select `XOX` and convert it to `OOO`."
                    },
                    {
                        "username": "thomas-x-69",
                        "content": "stupid description"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Very hard greedy... at least for me:("
                    },
                    {
                        "username": "Burekodmesa",
                        "content": "I thought my solution would be faster if I skipped more 0s if it is possible in a string. Seems that\\'s not the case.\\n\\nWould be nice if it was specified in the description that we are dealing with the letter \\'O\\' and not the number \\'0\\'. Was trying to debug, thinking I did something wrong. It turns out I was mistaking the letter \\'O\\' with the number \\'0\\'.\\n\\nOther than that,  a decent easy question."
                    },
                    {
                        "username": "dsapelnikov",
                        "content": "Definitely not an \"easy\" one."
                    },
                    {
                        "username": "raihan12_",
                        "content": "Why we are the increasing the loop in +3"
                    },
                    {
                        "username": "prathmesh_24",
                        "content": "so that when we transform the next 3 characters from the current index i, our job is to jump 3 indices forward."
                    }
                ]
            },
            {
                "id": 1719730,
                "content": [
                    {
                        "username": "Lakshya009",
                        "content": "For this test case -> \"OXOX\" shouldn't the answer be two? As we can select atmost 3 characters at once?\nThe expected answer for this test case is 1."
                    },
                    {
                        "username": "Jason-Law",
                        "content": "We can select `XOX` and convert it to `OOO`."
                    },
                    {
                        "username": "thomas-x-69",
                        "content": "stupid description"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Very hard greedy... at least for me:("
                    },
                    {
                        "username": "Burekodmesa",
                        "content": "I thought my solution would be faster if I skipped more 0s if it is possible in a string. Seems that\\'s not the case.\\n\\nWould be nice if it was specified in the description that we are dealing with the letter \\'O\\' and not the number \\'0\\'. Was trying to debug, thinking I did something wrong. It turns out I was mistaking the letter \\'O\\' with the number \\'0\\'.\\n\\nOther than that,  a decent easy question."
                    },
                    {
                        "username": "dsapelnikov",
                        "content": "Definitely not an \"easy\" one."
                    },
                    {
                        "username": "raihan12_",
                        "content": "Why we are the increasing the loop in +3"
                    },
                    {
                        "username": "prathmesh_24",
                        "content": "so that when we transform the next 3 characters from the current index i, our job is to jump 3 indices forward."
                    }
                ]
            }
        ]
    }
]