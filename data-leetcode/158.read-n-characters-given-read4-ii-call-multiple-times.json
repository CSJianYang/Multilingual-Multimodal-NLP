[
    {
        "title": "Length of Last Word",
        "question_content": "Given a string s consisting of words and spaces, return the length of the last word in the string.\nA word is a maximal substring consisting of non-space characters only.\n&nbsp;\nExample 1:\n\nInput: s = \"Hello World\"\nOutput: 5\nExplanation: The last word is \"World\" with length 5.\n\nExample 2:\n\nInput: s = \"   fly me   to   the moon  \"\nOutput: 4\nExplanation: The last word is \"moon\" with length 4.\n\nExample 3:\n\nInput: s = \"luffy is still joyboy\"\nOutput: 6\nExplanation: The last word is \"joyboy\" with length 6.\n\n&nbsp;\nConstraints:\n\n\t1 <= s.length <= 104\n\ts consists of only English letters and spaces ' '.\n\tThere will be at least one word in s.",
        "solutions": [
            {
                "id": 21892,
                "title": "7-lines-4ms-c-solution",
                "content": "Well, the basic idea is very simple. Start from the tail of `s` and move backwards to find the first non-space character. Then from this character, move backwards and count the number of non-space characters until we pass over the head of `s` or meet a space character. The count will then be the length of the last word.\\n\\n    class Solution {\\n    public:\\n        int lengthOfLastWord(string s) { \\n            int len = 0, tail = s.length() - 1;\\n            while (tail >= 0 && s[tail] == ' ') tail--;\\n            while (tail >= 0 && s[tail] != ' ') {\\n                len++;\\n                tail--;\\n            }\\n            return len;\\n        }\\n    };",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "class Solution {\\n    public:\\n        int lengthOfLastWord(string s) { \\n            int len = 0, tail = s.length() - 1;\\n            while (tail >= 0 && s[tail] == ' ') tail--;\\n            while (tail >= 0 && s[tail] != ' ') {\\n                len++;\\n                tail--;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 370636,
                "title": "java-0ms-100-100-single-reverse-loop-with-explanation",
                "content": "``` Java\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int length = 0;\\n\\t\\t\\n\\t\\t// We are looking for the last word so let\\'s go backward\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) != \\' \\') { // a letter is found so count\\n                length++;\\n            } else {  // it\\'s a white space instead\\n\\t\\t\\t\\t//  Did we already started to count a word ? Yes so we found the last word\\n                if (length > 0) return length;\\n            }\\n        }\\n        return length;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "``` Java\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int length = 0;\\n\\t\\t\\n\\t\\t// We are looking for the last word so let\\'s go backward\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) != \\' \\') { // a letter is found so count\\n                length++;\\n            } else {  // it\\'s a white space instead\\n\\t\\t\\t\\t//  Did we already started to count a word ? Yes so we found the last word\\n                if (length > 0) return length;\\n            }\\n        }\\n        return length;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 21878,
                "title": "a-single-line-of-code-in-java",
                "content": "    public int lengthOfLastWord(String s) {\\n        return s.trim().length()-s.trim().lastIndexOf(\" \")-1;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "    public int lengthOfLastWord(String s) {\\n        return s.trim().length()-s.trim().lastIndexOf(\" \")-1;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 847535,
                "title": "python-solution-without-split-explained",
                "content": "We can just split our string, remove all extra spaces and return length of the last word, however we need to spend `O(n)` time for this, where `n` is length of our string. There is a simple optimization: let us traverse string from the end and:\\n1. find the last element of last word: traverse from the end and find first non-space symbol.\\n2. continue traverse and find first space symbol (or beginning of string)\\n3. return `end` - `beg`.\\n\\n**Complexity**: is `O(m)`, where `m` is length of part from first symbol of last word to the end. Space complexity is `O(1)`.\\n\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s):\\n        end = len(s) - 1\\n        while end > 0 and s[end] == \" \": end -= 1\\n        beg = end\\n        while beg >= 0 and s[beg] != \" \": beg -= 1\\n        return end - beg\\n```\\n\\nIf you have any questions, feel free to ask. If you like solution and explanations, please **Upvote!**",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def lengthOfLastWord(self, s):\\n        end = len(s) - 1\\n        while end > 0 and s[end] == \" \": end -= 1\\n        beg = end\\n        while beg >= 0 and s[beg] != \" \": beg -= 1\\n        return end - beg\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3632478,
                "title": "c-solution-beats-100",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nStart searching from finish to start. Keep adding 1 as long as a letter is found. Keeping a flag to determine if we have found a letter or not. So, if we find a blank space after getting a letter we should get out of the loop.\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int siz=s.size(),kount=0,flag=0;\\n        for(int i=siz-1;i>=0;i--){\\n            if(s[i]==\\' \\'&&flag)break;\\n            if(s[i]!=\\' \\'){\\n                flag=1;\\n                kount++;\\n            }\\n        }\\n        return kount;\\n    }\\n};\\n\\n```\\n![da40578e-3278-4fca-a939-3861f2644e15_1679154045.78228.png](https://assets.leetcode.com/users/images/fc626f73-c07e-4a16-88f2-99293774ffd1_1686646782.1594946.png)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int siz=s.size(),kount=0,flag=0;\\n        for(int i=siz-1;i>=0;i--){\\n            if(s[i]==\\' \\'&&flag)break;\\n            if(s[i]!=\\' \\'){\\n                flag=1;\\n                kount++;\\n            }\\n        }\\n        return kount;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 21955,
                "title": "my-simple-solution-in-c",
                "content": "I've noticed that a lot of solutions use available library functions that return directly the positions of certain characters or do other operations like \"split\". I personally don't think that's a good idea. Firstly, these functions take some time and usually involve with iteration through the whole string. Secondly, questions like this one is intended to be a practice of detail implementation, not calling other functions. My solution like below uses only the most basic string operations and probably beats many other solutions which call other existing functions.\\n\\n     int lengthOfLastWord(const char* s) {\\n            int len = 0;\\n            while (*s) {\\n                if (*s++ != ' ')\\n                    ++len;\\n                else if (*s && *s != ' ')\\n                    len = 0;\\n        \\n            }\\n            return len;\\n        }",
                "solutionTags": [],
                "code": "I've noticed that a lot of solutions use available library functions that return directly the positions of certain characters or do other operations like \"split\". I personally don't think that's a good idea. Firstly, these functions take some time and usually involve with iteration through the whole string. Secondly, questions like this one is intended to be a practice of detail implementation, not calling other functions. My solution like below uses only the most basic string operations and probably beats many other solutions which call other existing functions.\\n\\n     int lengthOfLastWord(const char* s) {\\n            int len = 0;\\n            while (*s) {\\n                if (*s++ != ' ')\\n                    ++len;\\n                else if (*s && *s != ' ')\\n                    len = 0;\\n        \\n            }\\n            return len;\\n        }",
                "codeTag": "Unknown"
            },
            {
                "id": 22133,
                "title": "javascript-one-line-answer",
                "content": "    /**\\n     * @param {string} s\\n     * @return {number}\\n     */\\n    var lengthOfLastWord = function(s) {\\n        return s.trim().split(\" \").pop().length;\\n    };",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "    /**\\n     * @param {string} s\\n     * @return {number}\\n     */\\n    var lengthOfLastWord = function(s) {\\n        return s.trim().split(\" \").pop().length;\\n    };",
                "codeTag": "Unknown"
            },
            {
                "id": 21901,
                "title": "one-line-python-solution",
                "content": "    def lengthOfLastWord(self, s):\\n        return len(s.rstrip(' ').split(' ')[-1])\\n\\nI know this is not the solution that the question wants. Just for fun.",
                "solutionTags": [],
                "code": "    def lengthOfLastWord(self, s):\\n        return len(s.rstrip(' ').split(' ')[-1])\\n\\nI know this is not the solution that the question wants. Just for fun.",
                "codeTag": "Python3"
            },
            {
                "id": 848550,
                "title": "c-very-simple-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int ans = 0;\\n        for(int i=s.size()-1;i>=0;--i){\\n            if(s[i] == \\' \\' && ans > 0) return ans;\\n            if(s[i] != \\' \\') ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int ans = 0;\\n        for(int i=s.size()-1;i>=0;--i){\\n            if(s[i] == \\' \\' && ans > 0) return ans;\\n            if(s[i] != \\' \\') ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2757379,
                "title": "js-99-with-explanation",
                "content": "![image](https://assets.leetcode.com/users/images/2e7f99b2-50fe-47b1-8567-a16683917d6f_1667073344.9251451.png)\\n\\nTo solve this problem, you can use the **trim**() method.\\n\\nThe **trim**() method **removes** **whitespace** from both ends of a string and returns a new string, without modifying the original string.\\n\\nAfter that, we find the index of the last space (i.e., the space before the last word) and subtract this index from the total length of the string, adjusted for the index (\"-1\").\\n\\n```\\nvar lengthOfLastWord = function(s) {\\n    let trimmedString = s.trim();\\n    \\n    return trimmedString.length - trimmedString.lastIndexOf(\\' \\') - 1;\\n};\\n```\\n\\nI hope I was able to explain clearly.\\n**Happy coding!** \\uD83D\\uDE43",
                "solutionTags": [
                    "JavaScript",
                    "String"
                ],
                "code": "```\\nvar lengthOfLastWord = function(s) {\\n    let trimmedString = s.trim();\\n    \\n    return trimmedString.length - trimmedString.lastIndexOf(\\' \\') - 1;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 21927,
                "title": "my-3-line-0-ms-java-solution",
                "content": "        public int lengthOfLastWord(String s) {\\n    \\ts = s.trim();\\n        int lastIndex = s.lastIndexOf(' ') + 1;\\n        return s.length() - lastIndex;        \\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "        public int lengthOfLastWord(String s) {\\n    \\ts = s.trim();\\n        int lastIndex = s.lastIndexOf(' ') + 1;\\n        return s.length() - lastIndex;        \\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 544780,
                "title": "python-simple-solution-12-ms-11-8mb",
                "content": "```\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        wordlist = s.split()\\n        if wordlist:\\n            return len(wordlist[-1])\\n        return 0\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        wordlist = s.split()\\n        if wordlist:\\n            return len(wordlist[-1])\\n        return 0\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 21961,
                "title": "my-36-ms-python-solution",
                "content": "\\n    def lengthOfLastWord(self, s):\\n        ls = len(s)\\n        # slow and fast pointers\\n        slow = -1\\n        # iterate over trailing spaces\\n        while slow >= -ls and s[slow] == ' ':\\n            slow-=1\\n        fast = slow\\n        # iterate over last word\\n        while fast >= -ls and s[fast] != ' ':\\n            fast-=1\\n        return slow - fast",
                "solutionTags": [
                    "Python",
                    "Two Pointers"
                ],
                "code": "\\n    def lengthOfLastWord(self, s):\\n        ls = len(s)\\n        # slow and fast pointers\\n        slow = -1\\n        # iterate over trailing spaces\\n        while slow >= -ls and s[slow] == ' ':\\n            slow-=1\\n        fast = slow\\n        # iterate over last word\\n        while fast >= -ls and s[fast] != ' ':\\n            fast-=1\\n        return slow - fast",
                "codeTag": "Python3"
            },
            {
                "id": 507498,
                "title": "clean-non-cheating-python-solution",
                "content": "No splits, no len() calls, just a simple loop and two variables. This is what I would expect as an interviewer.\\n\\n```\\n# IDEA: scan from the end, increment the length counter if non-space found, otherwise keep skipping spaces\\n#       break and return the counter if space encountered AFTER we found any non-space\\n#\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        lenLast = 0\\n        for i in range(len(s)-1, -1, -1):\\n            if s[i] != \\' \\':\\n                lenLast += 1\\n            elif lenLast > 0:\\n                break\\n        return lenLast\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n# IDEA: scan from the end, increment the length counter if non-space found, otherwise keep skipping spaces\\n#       break and return the counter if space encountered AFTER we found any non-space\\n#\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        lenLast = 0\\n        for i in range(len(s)-1, -1, -1):\\n            if s[i] != \\' \\':\\n                lenLast += 1\\n            elif lenLast > 0:\\n                break\\n        return lenLast\\n```",
                "codeTag": "Java"
            },
            {
                "id": 21941,
                "title": "a-few-ways-in-javascript",
                "content": "The long way:\\n```\\nvar lengthOfLastWord = function(s) {\\n    let len = 0;\\n    let hasStarted = false;\\n    for (let i = s.length - 1; i >= 0; i--) {\\n        if (s[i] !== ' ') hasStarted = true;\\n        if (hasStarted) {\\n            if (s[i] === ' ') break;\\n            len++;\\n        }\\n    }\\n    return len;\\n};\\n```\\nShorter with `trim` and `lastIndexOf`:\\n```\\nvar lengthOfLastWord = function(s) {\\n    s = ' ' + s.trim();\\n    return s.length - s.lastIndexOf(' ') - 1;\\n};\\n```\\nAnd with `trim` and `split`:\\n```\\nvar lengthOfLastWord = function(s) {\\n    const arr = s.trim().split(' ');\\n    return arr[arr.length - 1].length;\\n};\\n```\\nShortest with regex:\\n```\\nvar lengthOfLastWord = function(s) {\\n    return (s.match(/(\\\\w+)\\\\s*$/) || [, ''])[1].length;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar lengthOfLastWord = function(s) {\\n    let len = 0;\\n    let hasStarted = false;\\n    for (let i = s.length - 1; i >= 0; i--) {\\n        if (s[i] !== ' ') hasStarted = true;\\n        if (hasStarted) {\\n            if (s[i] === ' ') break;\\n            len++;\\n        }\\n    }\\n    return len;\\n};\\n```\n```\\nvar lengthOfLastWord = function(s) {\\n    s = ' ' + s.trim();\\n    return s.length - s.lastIndexOf(' ') - 1;\\n};\\n```\n```\\nvar lengthOfLastWord = function(s) {\\n    const arr = s.trim().split(' ');\\n    return arr[arr.length - 1].length;\\n};\\n```\n```\\nvar lengthOfLastWord = function(s) {\\n    return (s.match(/(\\\\w+)\\\\s*$/) || [, ''])[1].length;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 847635,
                "title": "c-6-lines-without-using-stringstream-beats-100-0ms",
                "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int A = 0;\\n        for (int i=s.size()-1; i>=0; --i) {\\n            if (s[i] != \\' \\') ++A;\\n            else if (A) return A;\\n        }\\n        return A;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int A = 0;\\n        for (int i=s.size()-1; i>=0; --i) {\\n            if (s[i] != \\' \\') ++A;\\n            else if (A) return A;\\n        }\\n        return A;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 566499,
                "title": "right-to-left-iteration-python-o-n-time-o-1-space",
                "content": "Hi there \\uD83D\\uDC4B\\nHere is my simple solution to this problem.\\n\\n**Explanation**\\n- iterate throughout the list from right to left\\n- ignore all whitespaces\\n- when reaching the alphabet character count all adjacent non-whitespace elements and return the result when reaching a whitespace element\\n\\n**Code:**\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        result = 0\\n        for i in range(len(s)-1, -1, -1):\\n            if s[i] != \" \":\\n                result += 1\\n            elif result:\\n                return result\\n\\n        return result\\n```\\n\\n**Algorithm complexity:**\\n*Time complexity: O(n).*\\n*Space complexity: O(1).*\\n\\nIf you like my solution, I will really appreciate your upvoting. It will help other python-developers to find it faster. And as always, I wish you an enjoyable time on LeetCode. \\uD83D\\uDE0A",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        result = 0\\n        for i in range(len(s)-1, -1, -1):\\n            if s[i] != \" \":\\n                result += 1\\n            elif result:\\n                return result\\n\\n        return result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3358713,
                "title": "easy-c-solution-with-explanation-in-o-1-space-and-o-n-tc",
                "content": "**Step 1 :** From last, traverse the string till you find a starting character instead of a space(Keep Decreasing the variable i ).\\n\\n\\nFrom step 1 , we will get the starting position index of character(non-space character) from last .\\n\\n\\n**Step 2 :** Then traverse again until you find the space and increment the counter variable to get the length.\\n\\n//    Time Complexity: O(n)\\n//    Space Complexity: O(1)\\n\\n```\\nclass Solution {\\npublic:\\nint lengthOfLastWord(string s) {\\n    int count = 0;\\n    int i = s.length() - 1;\\n    while (i >= 0 && s[i] == \\' \\') {\\n        i--;\\n    }\\n    while (i >= 0 && s[i] != \\' \\') {\\n        count++;\\n        i--;\\n    }\\n    return count;\\n\\n}\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\nint lengthOfLastWord(string s) {\\n    int count = 0;\\n    int i = s.length() - 1;\\n    while (i >= 0 && s[i] == \\' \\') {\\n        i--;\\n    }\\n    while (i >= 0 && s[i] != \\' \\') {\\n        count++;\\n        i--;\\n    }\\n    return count;\\n\\n}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3753439,
                "title": "easy-explanation-beats-100",
                "content": "# Please Upvote if you feel it easy\\uD83D\\uDE0A\\n# Code\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int lenthOfLastWord = 0;\\n\\n        // we need last word so let traverse from last to first\\n        for(int i=s.length()-1;i>=0;i--) {\\n            // if our char is not space then it will defenately a word\\n            if(s.charAt(i)!=\\' \\') {\\n                //counting the length\\n                lenthOfLastWord++;\\n            }else{\\n                // if \" \" space comes after word we only need to return the length of the word\\n                if(lenthOfLastWord>0) return lenthOfLastWord;\\n            }\\n        }\\n        // if string contains only single word then this return works...\\n        return lenthOfLastWord;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int lenthOfLastWord = 0;\\n\\n        // we need last word so let traverse from last to first\\n        for(int i=s.length()-1;i>=0;i--) {\\n            // if our char is not space then it will defenately a word\\n            if(s.charAt(i)!=\\' \\') {\\n                //counting the length\\n                lenthOfLastWord++;\\n            }else{\\n                // if \" \" space comes after word we only need to return the length of the word\\n                if(lenthOfLastWord>0) return lenthOfLastWord;\\n            }\\n        }\\n        // if string contains only single word then this return works...\\n        return lenthOfLastWord;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 22061,
                "title": "simple-java-solution",
                "content": "\\n    public int lengthOfLastWord(String s) {\\n        String use = s.trim();\\n        int count = 0;\\n        for (int i = use.length() - 1; i >= 0; i--) {\\n            if (use.charAt(i) != ' ') count++;\\n            else break;\\n        }\\n        return count;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "\\n    public int lengthOfLastWord(String s) {\\n        String use = s.trim();\\n        int count = 0;\\n        for (int i = use.length() - 1; i >= 0; i--) {\\n            if (use.charAt(i) != ' ') count++;\\n            else break;\\n        }\\n        return count;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3169609,
                "title": "100-beat-0ms-run-time-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n      stack<char> s1;\\n      int count=0;\\n      for(int i=0;i<s.size();i++){\\n          s1.push(s[i]);\\n      }\\n//here we push all the element of the string to stack\\n\\n/*\\nnow we will pop() all the blank spaces from the top of stack so \\nthat we reach the last later of the last word.\\n*/\\n\\n    while(s1.top()==\\' \\')s1.pop();\\n\\n/*\\nnow we run the while loop util the stack is empty in the case of \\nonly one word is there or the blank space comes which seperate the two words.\\n\\n*/\\n\\n      while(!s1.empty()&&s1.top()!=\\' \\'){\\n        count++;\\n        s1.pop();\\n          \\n    }\\n// now we itterate the count to count the length of the last word and return  it.\\n\\n    return count;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n      stack<char> s1;\\n      int count=0;\\n      for(int i=0;i<s.size();i++){\\n          s1.push(s[i]);\\n      }\\n//here we push all the element of the string to stack\\n\\n/*\\nnow we will pop() all the blank spaces from the top of stack so \\nthat we reach the last later of the last word.\\n*/\\n\\n    while(s1.top()==\\' \\')s1.pop();\\n\\n/*\\nnow we run the while loop util the stack is empty in the case of \\nonly one word is there or the blank space comes which seperate the two words.\\n\\n*/\\n\\n      while(!s1.empty()&&s1.top()!=\\' \\'){\\n        count++;\\n        s1.pop();\\n          \\n    }\\n// now we itterate the count to count the length of the last word and return  it.\\n\\n    return count;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 847461,
                "title": "c-super-simple-3-line-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        istringstream ss(s); string word; \\n        while (ss) ss >> word; \\n        return word.length();\\n    }\\n};\\n```\\n**Like it? please upvote...**",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        istringstream ss(s); string word; \\n        while (ss) ss >> word; \\n        return word.length();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 22201,
                "title": "228ms-java-solution",
                "content": "1 - Use 2 loops. One to locate the last non-space character, one to count.\\n\\n\\n    public int lengthOfLastWord(String s) {\\n        //228ms\\n        int lenIndex = s.length()-1;\\n        int len = 0;\\n\\n        /*can also use while here, resulting in 264ms\\n        while (lenIndex>=0 && s.charAt(lenIndex)==' ') lenIndex--;*/\\n        \\n        /*or use trim - 324ms\\n        s = s.trim();*/\\n\\n        for (int i=lenIndex; i>=0 && s.charAt(i)==' '; i--) \\n            lenIndex--;\\n        \\n        for (int i=lenIndex; i>=0 && s.charAt(i)!=' '; i--) \\n            len++;\\n        return len;\\n    }\\n\\n\\n\\n\\n2 - Use split\\n\\n        //292ms\\n        String[] words = s.split(\" \");\\n        if (words.length==0) return 0;\\n        else return words[words.length-1].length();\\n \\n\\n3 - use lastIndexOf\\n       \\n        //308ms\\n        return s.trim().length() - s.trim().lastIndexOf(\" \") - 1;",
                "solutionTags": [
                    "Java"
                ],
                "code": "1 - Use 2 loops. One to locate the last non-space character, one to count.\\n\\n\\n    public int lengthOfLastWord(String s) {\\n        //228ms\\n        int lenIndex = s.length()-1;\\n        int len = 0;\\n\\n        /*can also use while here, resulting in 264ms\\n        while (lenIndex>=0 && s.charAt(lenIndex)==' ') lenIndex--;*/\\n        \\n        /*or use trim - 324ms\\n        s = s.trim();*/\\n\\n        for (int i=lenIndex; i>=0 && s.charAt(i)==' '; i--) \\n            lenIndex--;\\n        \\n        for (int i=lenIndex; i>=0 && s.charAt(i)!=' '; i--) \\n            len++;\\n        return len;\\n    }\\n\\n\\n\\n\\n2 - Use split\\n\\n        //292ms\\n        String[] words = s.split(\" \");\\n        if (words.length==0) return 0;\\n        else return words[words.length-1].length();\\n \\n\\n3 - use lastIndexOf\\n       \\n        //308ms\\n        return s.trim().length() - s.trim().lastIndexOf(\" \") - 1;",
                "codeTag": "Unknown"
            },
            {
                "id": 2656099,
                "title": "python-one-liner-easy-to-understand",
                "content": "# Explanation:\\n- The `strip()` function removes the spaces\\n- The `split()` function splits the string into a list seperated by their spaces\\n- `[-1]` gets the last element of the list\\n- The `len()` function returns the length of the string\\n\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.strip().split(\" \")[-1])\\n\\t\\t",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "# Explanation:\\n- The `strip()` function removes the spaces\\n- The `split()` function splits the string into a list seperated by their spaces\\n- `[-1]` gets the last element of the list\\n- The `len()` function returns the length of the string\\n\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.strip().split(\" \")[-1])\\n\\t\\t",
                "codeTag": "Java"
            },
            {
                "id": 1912548,
                "title": "100-fastest-swift-solution-time-o-n-space-o-1",
                "content": "```\\nclass Solution {\\n    // - Complexity:\\n    //   - time: O(n), where n is the length of s.\\n    //   - space: O(1), only constant space is used.\\n\\n    func lengthOfLastWord(_ s: String) -> Int {\\n        var ans = 0\\n\\n        for c in s.reversed() {\\n            if c != \" \" {\\n                ans += 1\\n            } else if ans > 0 {\\n                return ans\\n            }\\n        }\\n\\n        return ans\\n    }\\n\\n}\\n```\\n\\nLet me know in comments if you have any doubts. I will be happy to answer.\\n\\nPlease upvote if you found the solution useful.",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    // - Complexity:\\n    //   - time: O(n), where n is the length of s.\\n    //   - space: O(1), only constant space is used.\\n\\n    func lengthOfLastWord(_ s: String) -> Int {\\n        var ans = 0\\n\\n        for c in s.reversed() {\\n            if c != \" \" {\\n                ans += 1\\n            } else if ans > 0 {\\n                return ans\\n            }\\n        }\\n\\n        return ans\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1320947,
                "title": "rust-one-liner",
                "content": "```\\nimpl Solution {\\n    pub fn length_of_last_word(s: String) -> i32 {\\n        s.trim_end()\\n            .chars()\\n            .rev()\\n            .take_while(|c| c.is_alphabetic())\\n            .count() as i32\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn length_of_last_word(s: String) -> i32 {\\n        s.trim_end()\\n            .chars()\\n            .rev()\\n            .take_while(|c| c.is_alphabetic())\\n            .count() as i32\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3948738,
                "title": "java-runtime-0-ms-beats-100",
                "content": "# Intuition\\nMy initial approach to solving this problem involves finding the length of the last word in a given string. I plan to iterate through the string in reverse and look for the first non-space character that is preceded by a space character. This will help me identify the beginning of the last word.\\n\\n# Approach\\nI will iterate through the given string in reverse and look for the first non-space character that is preceded by a space character. Once I find such a character, I will calculate the length of the last word by counting the characters until the end of the string or until another space character is encountered. I\\'ll return the length of the last word as the result.\\n\\n# Complexity\\n- Time complexity: O(n)\\n  The algorithm iterates through the string once in the worst case, where \\'n\\' is the length of the string.\\n\\n- Space complexity: O(1)\\n  The algorithm uses a constant amount of extra space for variables\\n\\n# Code\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n\\n        int first = 0;\\n        for(int i = s.length()-1 ; i>0;i--){\\n\\n\\n            if(s.charAt(i)!=\\' \\' && s.charAt(i-1) == \\' \\' ){\\n\\n                 first = i;\\n\\n                break;\\n\\n\\n            }\\n\\n\\n        }\\n\\n        String temp  = s.substring(first).trim();\\n\\n        return temp.length();\\n    }\\n        \\n    }\\n\\n```\\n![c0504eaf-5fb8-4a1d-a769-833262d1b86e_1674433591.3836212.webp](https://assets.leetcode.com/users/images/8a3b41d1-f0ca-472f-a9f7-8346b34a824e_1693297402.2918687.webp)",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n\\n        int first = 0;\\n        for(int i = s.length()-1 ; i>0;i--){\\n\\n\\n            if(s.charAt(i)!=\\' \\' && s.charAt(i-1) == \\' \\' ){\\n\\n                 first = i;\\n\\n                break;\\n\\n\\n            }\\n\\n\\n        }\\n\\n        String temp  = s.substring(first).trim();\\n\\n        return temp.length();\\n    }\\n        \\n    }\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2028722,
                "title": "c-java-c-python-javascript-typescript-easy-solutions-clean-code-with-comment",
                "content": "# Frequently encountered in technical interviews\\n```\\nstd::vector<std::pair<std::string, int>> interview_frequency= {\\n    {\"Amazon\", 3},\\n    {\"Microsoft\", 2}\\n};\\n```\\n\\n# Solution\\n\\nThe problem \"Length of Last Word\" asks us to find the length of the last word in a given string. A word in this context is defined as a maximal substring consisting of non-space characters only.\\n\\nFor example, consider the string \"Hello World\". The last word in this string is \"World\", and its length is 5.\\n\\n**Time complexity :** **O(n)**\\n**Space complexity :** **O(1)**\\n```C++ []\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int res = 0;\\n        for (int i = s.length()-1; i >= 0;) {\\n            // Check if the current character is not a space\\n            if (s[i--] != \\' \\')\\n                res++; // Increment the length of the last word\\n            else if (res > 0)\\n                return res; // Return the length if a space is encountered after counting some characters\\n        }\\n        return res; // Return the length of the last word\\n    }\\n};\\n```\\n```java []\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int res = 0;\\n        for (int i = s.length()-1;i>=0;) {\\n            if (s.charAt(i--) != \\' \\') res++;\\n            else if(res>0) return res;\\n        }\\n        return res;\\n    }\\n}\\n```\\n```csharp []\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        int res = 0;\\n        for (int i = s.Length-1;i>=0;) {\\n            if (s[i--] != \\' \\') res++;\\n            else if(res>0) return res;\\n        }\\n        return res;\\n    }\\n}\\n```\\n```javascript []\\nvar lengthOfLastWord = function(s) {\\n    var res = 0;\\n    for (var i = s.length-1;i>=0;) {\\n        if (s.charAt(i--) != \\' \\') res++;\\n        else if(res>0) return res;\\n    }\\n    return res;\\n};\\n```\\n```TypeScript []\\nfunction lengthOfLastWord(s: string): number {\\n    var res = 0;\\n    for (var i = s.length-1;i>=0;) {\\n        if (s.charAt(i--) != \\' \\') res++;\\n        else if(res>0) return res;\\n    }\\n    return res;\\n};\\n```\\nSome other solutions\\n```C++ []\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n      int res = 0; // Initialize the variable to store the length of the last word\\n      int tail = s.length() - 1; // Initialize the variable to track the index of the last character\\n      \\n      // Skip trailing spaces by moving the tail index backwards\\n      while (tail >= 0 && s[tail] == \\' \\')\\n          tail--;\\n      // Count the characters of the last word by moving the tail index backwards\\n      while (tail >= 0 && s[tail] != \\' \\') {\\n          res++; // Increment the length of the last word\\n          tail--; // Move the tail index to the previous character\\n      }\\n      return res; // Return the length of the last word\\n  }\\n};\\n```\\n```csharp []\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {            \\n        return (s.TrimEnd()).Split(\\' \\').Last().Length;\\n    }\\n}\\n```\\n```python []\\ndef lengthOfLastWord(self, s):\\n    return len(s.rstrip(\\' \\').split(\\' \\')[-1])\\n```\\nC#/Python Solution:\\n\\n**Time Complexity: O(n)\\nSpace Complexity: O(n)**\\nThe solution trims the input string to remove trailing whitespace characters, splits the trimmed string into an array of words, and returns the length of the last word.\\n\\nC++ Solution:\\n\\n**Time Complexity: O(n)\\nSpace Complexity: O(1)**\\nThe solution iterates through the string to find the last non-space character, then counts the length of the last word by iterating backwards from that character.\\n\\nBoth solutions have linear time complexity, but the C#/Python solution has additional space complexity due to creating new strings and arrays, while the C++ solution uses only a few integer variables.",
                "solutionTags": [
                    "Java",
                    "C#",
                    "JavaScript",
                    "TypeScript",
                    "String"
                ],
                "code": "```\\nstd::vector<std::pair<std::string, int>> interview_frequency= {\\n    {\"Amazon\", 3},\\n    {\"Microsoft\", 2}\\n};\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int res = 0;\\n        for (int i = s.length()-1; i >= 0;) {\\n            // Check if the current character is not a space\\n            if (s[i--] != \\' \\')\\n                res++; // Increment the length of the last word\\n            else if (res > 0)\\n                return res; // Return the length if a space is encountered after counting some characters\\n        }\\n        return res; // Return the length of the last word\\n    }\\n};\\n```\n```java []\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int res = 0;\\n        for (int i = s.length()-1;i>=0;) {\\n            if (s.charAt(i--) != \\' \\') res++;\\n            else if(res>0) return res;\\n        }\\n        return res;\\n    }\\n}\\n```\n```csharp []\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        int res = 0;\\n        for (int i = s.Length-1;i>=0;) {\\n            if (s[i--] != \\' \\') res++;\\n            else if(res>0) return res;\\n        }\\n        return res;\\n    }\\n}\\n```\n```javascript []\\nvar lengthOfLastWord = function(s) {\\n    var res = 0;\\n    for (var i = s.length-1;i>=0;) {\\n        if (s.charAt(i--) != \\' \\') res++;\\n        else if(res>0) return res;\\n    }\\n    return res;\\n};\\n```\n```TypeScript []\\nfunction lengthOfLastWord(s: string): number {\\n    var res = 0;\\n    for (var i = s.length-1;i>=0;) {\\n        if (s.charAt(i--) != \\' \\') res++;\\n        else if(res>0) return res;\\n    }\\n    return res;\\n};\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n      int res = 0; // Initialize the variable to store the length of the last word\\n      int tail = s.length() - 1; // Initialize the variable to track the index of the last character\\n      \\n      // Skip trailing spaces by moving the tail index backwards\\n      while (tail >= 0 && s[tail] == \\' \\')\\n          tail--;\\n      // Count the characters of the last word by moving the tail index backwards\\n      while (tail >= 0 && s[tail] != \\' \\') {\\n          res++; // Increment the length of the last word\\n          tail--; // Move the tail index to the previous character\\n      }\\n      return res; // Return the length of the last word\\n  }\\n};\\n```\n```csharp []\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {            \\n        return (s.TrimEnd()).Split(\\' \\').Last().Length;\\n    }\\n}\\n```\n```python []\\ndef lengthOfLastWord(self, s):\\n    return len(s.rstrip(\\' \\').split(\\' \\')[-1])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3778635,
                "title": "c-java-python3-javascript-solutions-iteration-or-trim",
                "content": "The easist way may be iterate from the end of the string, can we do that with a different way?\\n**Of course !**\\n\\n\\u2B50**See more Code and Explanation : [https://zyrastory.com/en/coding-en/leetcode-en/leetcode-58-length-of-last-word-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-58-length-of-last-word-solution-and-explanation-en/)**\\n\\n##### C# Examples\\n**1. Iteration**\\n```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        \\n        int cnt = 0;\\n        \\n        for(int i = s.Length-1;i>=0;i--)\\n        {\\n            if(Char.IsWhiteSpace(s[i]))\\n            {\\n                if(cnt>0)\\n                {\\n                    return cnt;    \\n                }\\n                continue;\\n            }\\n            \\n            cnt+=1;\\n        }\\n        return cnt;\\n    }\\n}\\n```\\n\\n**2. Split + Trim**\\n```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        s = s.TrimEnd();                 //or you can use Trim()\\n        string[] tmp = s.Split(\\' \\');\\n        return tmp[tmp.Length-1].Length; \\n    }\\n}\\n```\\nIs there an easier way in C#? Yes!\\n\\n---\\n\\n\\n##### Java Solution\\n**1. Iteration**\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int cnt = 0;\\n        \\n        for(int i = s.length()-1;i>=0;i--)\\n        {\\n            if(s.charAt(i)==\\' \\')\\n            {\\n                if(cnt>0)\\n                {\\n                    return cnt;    \\n                }\\n                continue;\\n            }\\n            \\n            cnt+=1;\\n        }\\n        return cnt;\\n    }\\n}\\n```\\n\\n\\n**2.**\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        s = s.trim();\\n        String[] arr =  s.split(\"\\\\\\\\s+\");\\n        \\n        return arr[arr.length-1].length();\\n    }\\n}\\n```\\n\\n---\\n\\n\\n\\n##### Python3 Solution\\n**1. Iteration**\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        cnt = 0;\\n        for i in range(len(s)-1,-1,-1):\\n            if(s[i]== \\' \\'):\\n                if cnt>0 :\\n                    return cnt\\n                continue\\n            cnt+=1;\\n        return cnt\\n```\\n\\n**2.**\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        s = s.rstrip()  #or strip\\n        return len(s.split()[-1])\\n```\\n\\n---\\n\\n\\n##### JavaScript Solution\\n**1. Iteration**\\n```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLastWord = function(s) {\\n    var cnt = 0;\\n\\n    for(var i = s.length-1;i>=0;i--)\\n    {\\n        if(s[i]==\\' \\')\\n        {\\n            if(cnt>0)\\n            {\\n                return cnt;    \\n            }\\n            continue;\\n        }\\n\\n        cnt+=1;\\n    }\\n    return cnt;\\n};\\n```\\n\\n\\n**2.**\\n```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLastWord = function(s) {\\n    s = s.trim();\\n    var arr = s.split(\\' \\');\\n    return arr[arr.length-1].length;\\n};\\n```\\n\\n\\n\\nIf you got any problem about the explanation or you need other programming language solution, please feel free to leave your comment.\\n\\n\\uD83E\\uDDE1See more problems solutions - **[Zyrastory - LeetCode Solution](https://zyrastory.com/en/category/coding-en/leetcode-en/)**\\n\\nThanks!",
                "solutionTags": [
                    "Java",
                    "Python3",
                    "C#",
                    "JavaScript"
                ],
                "code": "```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        \\n        int cnt = 0;\\n        \\n        for(int i = s.Length-1;i>=0;i--)\\n        {\\n            if(Char.IsWhiteSpace(s[i]))\\n            {\\n                if(cnt>0)\\n                {\\n                    return cnt;    \\n                }\\n                continue;\\n            }\\n            \\n            cnt+=1;\\n        }\\n        return cnt;\\n    }\\n}\\n```\n```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        s = s.TrimEnd();                 //or you can use Trim()\\n        string[] tmp = s.Split(\\' \\');\\n        return tmp[tmp.Length-1].Length; \\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int cnt = 0;\\n        \\n        for(int i = s.length()-1;i>=0;i--)\\n        {\\n            if(s.charAt(i)==\\' \\')\\n            {\\n                if(cnt>0)\\n                {\\n                    return cnt;    \\n                }\\n                continue;\\n            }\\n            \\n            cnt+=1;\\n        }\\n        return cnt;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        s = s.trim();\\n        String[] arr =  s.split(\"\\\\\\\\s+\");\\n        \\n        return arr[arr.length-1].length();\\n    }\\n}\\n```\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        cnt = 0;\\n        for i in range(len(s)-1,-1,-1):\\n            if(s[i]== \\' \\'):\\n                if cnt>0 :\\n                    return cnt\\n                continue\\n            cnt+=1;\\n        return cnt\\n```\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        s = s.rstrip()  #or strip\\n        return len(s.split()[-1])\\n```\n```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLastWord = function(s) {\\n    var cnt = 0;\\n\\n    for(var i = s.length-1;i>=0;i--)\\n    {\\n        if(s[i]==\\' \\')\\n        {\\n            if(cnt>0)\\n            {\\n                return cnt;    \\n            }\\n            continue;\\n        }\\n\\n        cnt+=1;\\n    }\\n    return cnt;\\n};\\n```\n```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLastWord = function(s) {\\n    s = s.trim();\\n    var arr = s.split(\\' \\');\\n    return arr[arr.length-1].length;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2750961,
                "title": "java-runtime-0ms-faster-than-100-memory-usage-less-than-95-91",
                "content": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        String trim = s.trim();\\n        int afterLastSpaceIndex = trim.lastIndexOf(\\' \\') + 1;\\n        return trim.length() - afterLastSpaceIndex;\\n    }\\n}\\n```\\n\\n![image](https://assets.leetcode.com/users/images/b10a2d94-59cd-4b63-9ec1-f0de3561c30b_1666931066.870219.png)\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        String trim = s.trim();\\n        int afterLastSpaceIndex = trim.lastIndexOf(\\' \\') + 1;\\n        return trim.length() - afterLastSpaceIndex;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1738796,
                "title": "solution-swift-length-of-last-word-test-cases",
                "content": "```swift\\nclass Solution {\\n    func lengthOfLastWord(_ s: String) -> Int {\\n        guard let word = s.split(separator: \" \").last else { return 0 }\\n        return word.count\\n    }\\n}\\n```\\n\\n---\\n\\n<p>\\n<details>\\n<summary>\\n<img src=\"https://git.io/JDblm\" height=\"24\">\\n<b>TEST CASES</b>\\n</summary>\\n\\n<p><pre>\\n<b>Result:</b> Executed 3 tests, with 0 failures (0 unexpected) in 0.010 (0.012) seconds\\n</pre></p>\\n\\n```swift\\nimport XCTest\\n\\nclass Tests: XCTestCase {\\n    \\n    private let solution = Solution()\\n    \\n    // The last word is \"World\" with length 5.\\n    func test0() {\\n        let value = solution.lengthOfLastWord(\"Hello World\")\\n        XCTAssertEqual(value, 5)\\n    }\\n    \\n    // The last word is \"moon\" with length 4.\\n    func test1() {\\n        let value = solution.lengthOfLastWord(\"   fly me   to   the moon  \")\\n        XCTAssertEqual(value, 4)\\n    }\\n    \\n    // The last word is \"joyboy\" with length 6.\\n    func test2() {\\n        let value = solution.lengthOfLastWord(\"luffy is still joyboy\")\\n        XCTAssertEqual(value, 6)\\n    }\\n}\\n\\nTests.defaultTestSuite.run()\\n```\\n\\n</details>\\n</p>",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```swift\\nclass Solution {\\n    func lengthOfLastWord(_ s: String) -> Int {\\n        guard let word = s.split(separator: \" \").last else { return 0 }\\n        return word.count\\n    }\\n}\\n```\n```swift\\nimport XCTest\\n\\nclass Tests: XCTestCase {\\n    \\n    private let solution = Solution()\\n    \\n    // The last word is \"World\" with length 5.\\n    func test0() {\\n        let value = solution.lengthOfLastWord(\"Hello World\")\\n        XCTAssertEqual(value, 5)\\n    }\\n    \\n    // The last word is \"moon\" with length 4.\\n    func test1() {\\n        let value = solution.lengthOfLastWord(\"   fly me   to   the moon  \")\\n        XCTAssertEqual(value, 4)\\n    }\\n    \\n    // The last word is \"joyboy\" with length 6.\\n    func test2() {\\n        let value = solution.lengthOfLastWord(\"luffy is still joyboy\")\\n        XCTAssertEqual(value, 6)\\n    }\\n}\\n\\nTests.defaultTestSuite.run()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 22003,
                "title": "java-0ms-solution",
                "content": "Java simple 0ms solution:\\n\\n    public int lengthOfLastWord(String s) {\\n        if (null == s || s.trim().length() == 0) return 0;\\n        \\n        s = s.trim();\\n        String lastWord = s.substring(s.lastIndexOf(\" \") + 1);\\n        return lastWord.length();\\n    }",
                "solutionTags": [],
                "code": "Java simple 0ms solution:\\n\\n    public int lengthOfLastWord(String s) {\\n        if (null == s || s.trim().length() == 0) return 0;\\n        \\n        s = s.trim();\\n        String lastWord = s.substring(s.lastIndexOf(\" \") + 1);\\n        return lastWord.length();\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3676418,
                "title": "fastest-optimum-solution-java-python-c",
                "content": "## ***Please Upvote my solution, if you find it helpful ;)***\\n\\n# Intuition\\nThe intuition behind the solution is to iterate through the given string and keep track of the length of the last word encountered. By considering spaces as separators between words, we can determine the length of the last word by counting the characters until the next space or the end of the string.\\n# Approach\\n1. Initialize a count variable to 0. This variable will keep track of the length of the last word.\\n1. Create a boolean variable called space and set it to false. This variable will help identify when a space character is encountered.\\n1. Iterate through each character of the string using a for loop.\\n1. Check if the current character is a space character by comparing it to \\' \\'. If it is, set the space variable to true.\\n1. If the current character is not a space character and the space variable is true, it means we have encountered the first character of a new word. In this case, set the count to 1 and reset the space variable to false.\\n1. If the current character is not a space character and the space variable is false, it means we are still in the middle of a word. In this case, increment the count by 1.\\n1. After iterating through all the characters, the count will hold the length of the last word in the string.\\n1. Return the count as the result.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of this approach is $$O(n)$$, where n is the length of the input string. We iterate through the string once to determine the length of the last word.\\n\\n- Space complexity:\\nThe space complexity of this approach is $$O(1)$$ since we are using a constant amount of additional space to store the count and the space flag, regardless of the size of the input string.\\n\\n# Code\\n\\n```java []\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n\\n        int count = 0;          // variable to store the length of the last word\\n        boolean space = false;  // flag to track if a space has been encountered\\n\\n        for (int i = 0; i < s.length(); i++) {\\n            if (s.charAt(i) == \\' \\') {\\n                space = true;  // mark that a space has been encountered\\n            } else if (s.charAt(i) != \\' \\' && space == true) {\\n                count = 1;    // start counting a new word, set count to 1\\n                space = false; // reset the space flag\\n            } else {\\n                count++;      // increment the count for the current word\\n            }\\n        }\\n        return count;  // return the length of the last word\\n    }\\n}\\n```\\n```python []\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        count = 0  # Variable to store the length of the last word\\n        space = False  # Boolean variable to track if a space is encountered\\n        \\n        # Iterate through each character in the string\\n        for i in xrange(len(s)):\\n            if s[i] == \\' \\':  # If a space character is encountered\\n                space = True\\n            elif s[i] != \\' \\' and space:  # If a non-space character is encountered after a space\\n                count = 1  # Start counting a new word\\n                space = False\\n            else:\\n                count += 1  # Increment the count for non-space characters\\n            \\n        return count\\n\\n```\\n```C++ []\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count = 0;  // Variable to store the length of the last word\\n        bool space = false;  // Boolean variable to track if a space is encountered\\n        \\n        // Iterate through each character in the string\\n        for (int i = 0; i < s.length(); i++) {\\n            if (s[i] == \\' \\') {  // If a space character is encountered\\n                space = true;\\n            } else if (s[i] != \\' \\' && space) {  // If a non-space character is encountered after a space\\n                count = 1;  // Start counting a new word\\n                space = false;\\n            } else {\\n                count++;  // Increment the count for non-space characters\\n            }\\n        }\\n        \\n        return count;\\n    }\\n};\\n\\n```\\n\\n***Please Upvote my solution, if you find it helpful ;)***\\n![6a87bc25-d70b-424f-9e60-7da6f345b82a_1673875931.8933976.jpeg](https://assets.leetcode.com/users/images/7e6e91bb-0e02-4048-9094-8660e8448efe_1687595694.1561787.jpeg)\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Two Pointers",
                    "String"
                ],
                "code": "```java []\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n\\n        int count = 0;          // variable to store the length of the last word\\n        boolean space = false;  // flag to track if a space has been encountered\\n\\n        for (int i = 0; i < s.length(); i++) {\\n            if (s.charAt(i) == \\' \\') {\\n                space = true;  // mark that a space has been encountered\\n            } else if (s.charAt(i) != \\' \\' && space == true) {\\n                count = 1;    // start counting a new word, set count to 1\\n                space = false; // reset the space flag\\n            } else {\\n                count++;      // increment the count for the current word\\n            }\\n        }\\n        return count;  // return the length of the last word\\n    }\\n}\\n```\n```python []\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        count = 0  # Variable to store the length of the last word\\n        space = False  # Boolean variable to track if a space is encountered\\n        \\n        # Iterate through each character in the string\\n        for i in xrange(len(s)):\\n            if s[i] == \\' \\':  # If a space character is encountered\\n                space = True\\n            elif s[i] != \\' \\' and space:  # If a non-space character is encountered after a space\\n                count = 1  # Start counting a new word\\n                space = False\\n            else:\\n                count += 1  # Increment the count for non-space characters\\n            \\n        return count\\n\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count = 0;  // Variable to store the length of the last word\\n        bool space = false;  // Boolean variable to track if a space is encountered\\n        \\n        // Iterate through each character in the string\\n        for (int i = 0; i < s.length(); i++) {\\n            if (s[i] == \\' \\') {  // If a space character is encountered\\n                space = true;\\n            } else if (s[i] != \\' \\' && space) {  // If a non-space character is encountered after a space\\n                count = 1;  // Start counting a new word\\n                space = false;\\n            } else {\\n                count++;  // Increment the count for non-space characters\\n            }\\n        }\\n        \\n        return count;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3624986,
                "title": "code-whithout-using-split-beginner-friendly-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe given code is an implementation of a method named lengthOfLastWord in a class named Solution. This method takes a string s as input and returns the length of the last word in the string.\\n\\nHere\\'s a step-by-step explanation of how the code works:\\n\\nThe input string s is trimmed using the trim() method. This removes any leading or trailing whitespace from the string.\\n\\nThe variable op is initialized to 0. This variable will store the length of the last word.\\n\\nA for loop is used to iterate over the characters of the string s starting from the end (i.e., from s.length()-1 to 0).\\n\\nInside the loop, it checks if the current character is a space (\\' \\'). If it is, it means that the last word has ended, so the loop is exited using the break statement.\\n\\nIf the current character is not a space, the op variable is incremented by 1, indicating that another character has been encountered in the last word.\\n\\nFinally, the method returns the value of op, which represents the length of the last word in the input string.\\n\\nThe code assumes that the input string contains words separated by a single space and there are no leading or trailing spaces within the last word.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe approach used in the given code is quite straightforward and intuitive. Here\\'s a breakdown of the approach:\\n\\nThe first step is to remove any leading or trailing whitespace from the input string. This is done using the trim() method. This ensures that any spaces before or after the last word are ignored.\\n\\nAfter trimming the string, the variable op is initialized to 0. This variable will store the length of the last word.\\n\\nThe for loop iterates over the characters of the string starting from the end (i.e., from s.length()-1 to 0). This is done to find the last word in the string.\\n\\nInside the loop, it checks if the current character is a space (\\' \\'). If it is, it means that the last word has ended. Therefore, the loop is exited using the break statement.\\n\\nIf the current character is not a space, it means that another character is a part of the last word. In that case, the op variable is incremented by 1.\\n\\nOnce the loop finishes, the value of op represents the length of the last word in the input string.\\n\\nThe overall approach is to trim the string, then start from the end and iterate backwards until a space is encountered, counting the characters in the last word. The loop breaks as soon as a space is found, assuming there are no trailing spaces within the last word. The final count of characters in the last word is returned as the result.\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        s=s.trim();\\n        int op=0;\\n        for(int i=s.length()-1;i>=0;i--){\\n            \\n            if(s.charAt(i)==\\' \\'){\\n                break;\\n            }\\n            op++;\\n        }\\n        return op;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        s=s.trim();\\n        int op=0;\\n        for(int i=s.length()-1;i>=0;i--){\\n            \\n            if(s.charAt(i)==\\' \\'){\\n                break;\\n            }\\n            op++;\\n        }\\n        return op;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3276701,
                "title": "easy-java-solution-runtime-0ms-reverse-loop",
                "content": "\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe will put our iterator on last index of string and will go through the string in reverse. \\nAs we move behind we will update our length till the point we get a blank space. \\nAs soon as we get a blank space we will check if length>0, if yes then we will return the length.\\n\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int length = 0;\\n\\n        for(int i=s.length()-1 ; i>=0 ; i--)\\n        {\\n            if(s.charAt(i)!= \\' \\')\\n                length++;\\n            else\\n                if(length>0) return length;\\n        }\\n        return length;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int length = 0;\\n\\n        for(int i=s.length()-1 ; i>=0 ; i--)\\n        {\\n            if(s.charAt(i)!= \\' \\')\\n                length++;\\n            else\\n                if(length>0) return length;\\n        }\\n        return length;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3228879,
                "title": "java-0ms-100-faster-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe main goal is to find the length of the last word in the string.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe direct and easy approach is to split the string using split() function and storing it in an array. Giving the length of the last string in the array will provide you the result but its not as fast as this approach. Traversing from the last until you find the \\' \\' and then returning lengthOfString-1-i where i\\'th character is your \\' \\'.\\n\\n \\n![image.png](https://assets.leetcode.com/users/images/66b5f707-7b7d-4fcb-a79a-01fc65f45404_1677332141.8436842.png)\\n\\nOthers are the exceptions that are covered in the test cases.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        if(s.length()==1 && s.charAt(0)!=\\' \\'){\\n            return 1;\\n        }\\n        int n=s.length()-1;\\n        for(int i=s.length()-1;i>=0;i--){\\n            if(s.charAt(i)==\\' \\'){\\n                if(n-i!=0 && s.charAt(i+1)!=\\' \\'){\\n                    \\n                    return n-i;\\n                } \\n                else n=i-1;    \\n            }\\n        }\\n        if(s.charAt(0)!=\\' \\'){\\n            \\n            return n+1;\\n        }\\n        return 0;\\n    }\\n    \\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        if(s.length()==1 && s.charAt(0)!=\\' \\'){\\n            return 1;\\n        }\\n        int n=s.length()-1;\\n        for(int i=s.length()-1;i>=0;i--){\\n            if(s.charAt(i)==\\' \\'){\\n                if(n-i!=0 && s.charAt(i+1)!=\\' \\'){\\n                    \\n                    return n-i;\\n                } \\n                else n=i-1;    \\n            }\\n        }\\n        if(s.charAt(0)!=\\' \\'){\\n            \\n            return n+1;\\n        }\\n        return 0;\\n    }\\n    \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1015471,
                "title": "java-faster-than-100-o-n-reverse-iteration",
                "content": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        var len = 0;\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) != \\' \\') {\\n                len++;\\n            } else if (len > 0) {\\n                return len;\\n            }\\n        }\\n        return len;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        var len = 0;\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) != \\' \\') {\\n                len++;\\n            } else if (len > 0) {\\n                return len;\\n            }\\n        }\\n        return len;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4032891,
                "title": "easy-python-solution-with-briefly-explanation",
                "content": "# Approach\\nThis code defines a class `Solution` with a method `lengthOfLastWord` that calculates the length of the last word in a given input string `s`. Here\\'s a brief explanation of each part of the code:\\n\\n1. `stripped = s.strip()`: This line removes leading and trailing whitespace from the input string `s` using the `strip` method. This is done to handle cases where there might be spaces at the beginning or end of the string.\\n\\n2. `strList = stripped.split(\" \")`: This line splits the stripped string `stripped` into a list of words using a space as the delimiter. It uses the `split` method, which separates the string into a list of substrings wherever it encounters a space character.\\n\\n3. `lastWord = strList[-1]`: This line extracts the last element (which is the last word) from the `strList` by using the index `-1`. This assumes that words in the string are separated by spaces.\\n\\n4. `return len(lastWord)`: Finally, the code returns the length of the `lastWord` using the `len` function. This length represents the number of characters in the last word of the input string.\\n\\nIn summary, the code takes a string as input, removes leading and trailing spaces, splits the string into words, extracts the last word, and returns the length of that last word.\\n\\n# Code\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        stripped = s.strip()\\n        strList = stripped.split(\" \")\\n        lastWord = strList[-1]\\n        return len(lastWord)\\n```\\n\\n**Please upvote if you like the solution.\\nHappy Coding! \\uD83D\\uDE0A**",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        stripped = s.strip()\\n        strList = stripped.split(\" \")\\n        lastWord = strList[-1]\\n        return len(lastWord)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 380627,
                "title": "easy-c-solution-0ms-beats-100",
                "content": "Runtime: 0 ms, faster than 100.00% of C++ online submissions for Length of Last Word.\\nMemory Usage: 8.6 MB, less than 100.00% of C++ online submissions for Length of Last Word.\\n\\n```\\nint lengthOfLastWord(string s) {\\n        \\n        int len = 0;\\n        \\n        for(int i = s.length()-1; i>=0; i--)\\n        {\\n            if(s[i] != \\' \\')\\n                len++;\\n            else if(len > 0)\\n                return len;\\n        }\\n        \\n        return len;\\n    }",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "Runtime: 0 ms, faster than 100.00% of C++ online submissions for Length of Last Word.\\nMemory Usage: 8.6 MB, less than 100.00% of C++ online submissions for Length of Last Word.\\n\\n```\\nint lengthOfLastWord(string s) {\\n        \\n        int len = 0;\\n        \\n        for(int i = s.length()-1; i>=0; i--)\\n        {\\n            if(s[i] != \\' \\')\\n                len++;\\n            else if(len > 0)\\n                return len;\\n        }\\n        \\n        return len;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 22018,
                "title": "5-lines-c-solution-0ms",
                "content": "    int lengthOfLastWord(char* s) {\\n      int lastLen = 0;\\n      char* p = s + strlen(s) -1;\\n      while(p>=s && isspace(*p)) p--;\\n      while(p>=s && !isspace(*(p--))) lastLen++;\\n      return lastLen;\\n    }",
                "solutionTags": [
                    "String"
                ],
                "code": "    int lengthOfLastWord(char* s) {\\n      int lastLen = 0;\\n      char* p = s + strlen(s) -1;\\n      while(p>=s && isspace(*p)) p--;\\n      while(p>=s && !isspace(*(p--))) lastLen++;\\n      return lastLen;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3336427,
                "title": "c-easy-solution-using-stack",
                "content": "# Intuition\\nWe had to find the length of the last word, something like ***LIFO***. So, we used Stack. \\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n1. Store the string into the stack.\\n2. Remove all the spaces from the end.\\n3. Find the length of the last word by increasing count till you reach another space or the stack gets empty.\\n\\n\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:$$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        // need to find length of LAST word. So, we use stack \\n        stack<char> st ; \\n        int cnt = 0 ; \\n        // store the string into the stack\\n        for (int i = 0 ; i < s.length() ; i ++)\\n        {\\n            st.push(s[i]) ; \\n        }\\n\\n        // pop the string till the top element of stack is a space \\' \\'\\n        // remove all the spaces in the end \\n        while (st.top() == \\' \\')\\n        {\\n            st.pop() ; \\n        }\\n\\n        // increase cnt of characters till you find another space \\' \\' or stack gets empty \\n        while (!st.empty() && st.top() != \\' \\')\\n        {\\n            cnt ++ ; \\n            st.pop() ; \\n        }\\n\\n        return cnt ; \\n    }\\n};\\n```\\n![815a317f-9cdf-46e2-a397-af8869dafa2e_1673498197.3721023.png](https://assets.leetcode.com/users/images/e7865b2c-397a-4d71-9670-5495c9262313_1679673611.8770292.png)\\n",
                "solutionTags": [
                    "C++",
                    "String",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        // need to find length of LAST word. So, we use stack \\n        stack<char> st ; \\n        int cnt = 0 ; \\n        // store the string into the stack\\n        for (int i = 0 ; i < s.length() ; i ++)\\n        {\\n            st.push(s[i]) ; \\n        }\\n\\n        // pop the string till the top element of stack is a space \\' \\'\\n        // remove all the spaces in the end \\n        while (st.top() == \\' \\')\\n        {\\n            st.pop() ; \\n        }\\n\\n        // increase cnt of characters till you find another space \\' \\' or stack gets empty \\n        while (!st.empty() && st.top() != \\' \\')\\n        {\\n            cnt ++ ; \\n            st.pop() ; \\n        }\\n\\n        return cnt ; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3164391,
                "title": "java-1ms-o-1-clean-and-concise",
                "content": "**TC -- > O(N)\\nSC --> O(N)**\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        \\n        int ans = 0;\\n        String[] arr = s.split(\" \");\\n        \\n        for (int i = 0; i < arr.length; i++) {\\n            ans = arr[i].length();\\n        }\\n        return ans;\\n    }\\n}\\n```\\n\\n**TC -- > O(N) \\nSC --> O(N)**\\n\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        \\n        int ans = 0;\\n        String[] arr = s.split(\" \");\\n\\t\\t\\n\\t\\treturn arr[arr.length - 1].length();\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        \\n        int ans = 0;\\n        String[] arr = s.split(\" \");\\n        \\n        for (int i = 0; i < arr.length; i++) {\\n            ans = arr[i].length();\\n        }\\n        return ans;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        \\n        int ans = 0;\\n        String[] arr = s.split(\" \");\\n\\t\\t\\n\\t\\treturn arr[arr.length - 1].length();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1294477,
                "title": "length-of-last-word-100-faster-solution-c-easy-code",
                "content": "int lengthOfLastWord(string s) {\\n        reverse(s.begin(),s.end());\\n        int count=0;\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]==\\' \\'){\\n                if(count==0){\\n                    count=0;\\n                }\\n                else\\n                    break;\\n            }\\n            else{\\n                count++;\\n            }\\n        }\\n        return count;\\n    }",
                "solutionTags": [],
                "code": "int lengthOfLastWord(string s) {\\n        reverse(s.begin(),s.end());\\n        int count=0;\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]==\\' \\'){\\n                if(count==0){\\n                    count=0;\\n                }\\n                else\\n                    break;\\n            }\\n            else{\\n                count++;\\n            }\\n        }\\n        return count;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 847455,
                "title": "python-sooo-simple-one-line-solution",
                "content": "```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n\\t\\treturn 0 if len(s.split())==0 else len(s.split()[-1])\\n```\\n**Like it? please upvote...**",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n\\t\\treturn 0 if len(s.split())==0 else len(s.split()[-1])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 21981,
                "title": "4-lines-java-solution-without-using-trim",
                "content": "    \\nUsing trim is not fun at all, so....\\n\\n    public int lengthOfLastWord(String s) {\\n        int count = -1, i = s.length();\\n        while (--i >= 0 && s.charAt(i) == ' ');\\n        while (i - ++count >= 0 && s.charAt(i - count) != ' ');\\n        return count;\\n    }",
                "solutionTags": [],
                "code": "    \\nUsing trim is not fun at all, so....\\n\\n    public int lengthOfLastWord(String s) {\\n        int count = -1, i = s.length();\\n        while (--i >= 0 && s.charAt(i) == ' ');\\n        while (i - ++count >= 0 && s.charAt(i - count) != ' ');\\n        return count;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3517215,
                "title": "c-easy-solution-beats-100",
                "content": "![image.png](https://assets.leetcode.com/users/images/69f3795f-d600-462c-9ed4-adcb7f1b7891_1683915799.0136898.png)\\n\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(N)\\n\\n# Code\\n```\\nclass Solution\\n{\\npublic:\\n    int lengthOfLastWord(string s)\\n    {\\n        int count = 0;\\n        for (int c = s.size() - 1; c >= 0; c--)\\n        {\\n            if (s[c] != \\' \\')\\n            {\\n                count++;\\n            }\\n            // if we already found a word and then encounter\\n            // a space that means the word is over.\\n            else if (count != 0 && s[c] == \\' \\')\\n            {\\n                return count;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution\\n{\\npublic:\\n    int lengthOfLastWord(string s)\\n    {\\n        int count = 0;\\n        for (int c = s.size() - 1; c >= 0; c--)\\n        {\\n            if (s[c] != \\' \\')\\n            {\\n                count++;\\n            }\\n            // if we already found a word and then encounter\\n            // a space that means the word is over.\\n            else if (count != 0 && s[c] == \\' \\')\\n            {\\n                return count;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3448309,
                "title": "python3-two-liner-beats-97-14-with-explanation",
                "content": "# Approach\\n- First we will convert given String of words into array of strings on basis of white spaces using python\\'s `.split()` which converts the string into Array \\n\\n- for example:\\n```\\nstr = \"Hello World\"\\narr = str.split()\\n\\n# arr will be\\narr = [\"Hello\" , \"World\"]\\n```\\n- So we will just return the length of last string from the array \\n\\n# Code\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        arr = s.split()\\n        return len(arr[-1])\\n```\\n# proof \\n\\n![Screenshot 2023-04-24 at 12.17.38 AM.png](https://assets.leetcode.com/users/images/14e685af-c36e-4c88-a2cb-b293b534fd88_1682275680.4227784.png)\\n",
                "solutionTags": [
                    "Python3",
                    "String"
                ],
                "code": "```\\nstr = \"Hello World\"\\narr = str.split()\\n\\n# arr will be\\narr = [\"Hello\" , \"World\"]\\n```\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        arr = s.split()\\n        return len(arr[-1])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3436545,
                "title": "best-solution-in-java-runtime-1-ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n         String [] str = s.split(\" \");\\n\\n\\n        return str[str.length-1].length() ;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n         String [] str = s.split(\" \");\\n\\n\\n        return str[str.length-1].length() ;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3337666,
                "title": "most-jugadu-solution-by-trippy-the-codder",
                "content": "# Intuition\\nSIMPLE CRISPY SOL\\nEASIEST JAVA SOL EVER EXSISTED\\n\\n# Approach\\nJUST SMILE AND SOLVE\\n\\n# Complexity\\nNO COMPLEXITY HERE\\n\\n# HUMBLE REQUEST\\nPLEASE UPVOTE\\n\\n# Code\\n```\\nimport java.util.StringTokenizer;\\nclass Solution {//PLEASE UPVOTE\\n    public int lengthOfLastWord(String s) {\\n       String str[]=s.split(\" \");\\n       return str[str.length-1].length();\\n    }//PLEASE UPVOTE\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Math",
                    "String",
                    "String Matching"
                ],
                "code": "```\\nimport java.util.StringTokenizer;\\nclass Solution {//PLEASE UPVOTE\\n    public int lengthOfLastWord(String s) {\\n       String str[]=s.split(\" \");\\n       return str[str.length-1].length();\\n    }//PLEASE UPVOTE\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3095742,
                "title": "simple-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nint lengthOfLastWord(char * s){\\n    int c=0;\\n    for(int i=strlen(s)-1;i>=0;i--){\\n        if(s[i]==\\' \\'){\\n            c++;\\n        }\\n        else{\\n            break;\\n        }\\n    }\\n    int c1=0;\\n    for(int i=strlen(s)-c-1;i>=0;i--){\\n        if(s[i]!=\\' \\'){\\n            c1++;\\n        }\\n        else{\\n            break;\\n        }\\n    }\\n    return c1;\\n\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint lengthOfLastWord(char * s){\\n    int c=0;\\n    for(int i=strlen(s)-1;i>=0;i--){\\n        if(s[i]==\\' \\'){\\n            c++;\\n        }\\n        else{\\n            break;\\n        }\\n    }\\n    int c1=0;\\n    for(int i=strlen(s)-c-1;i>=0;i--){\\n        if(s[i]!=\\' \\'){\\n            c1++;\\n        }\\n        else{\\n            break;\\n        }\\n    }\\n    return c1;\\n\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2765334,
                "title": "linear-time-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        if(s.size()==1){\\n            if(s[0]==\\' \\') return 0;\\n            else return 1;\\n        }\\n        int i=s.size()-1;\\n        int j=i;\\n        while(i>0){\\n            if(s[i]==\\' \\') \\n            while(s[i]==\\' \\' && i>0) i--;\\n            if(i==0) return !(s[i]==\\' \\');\\n            j=i;\\n            while(s[i]!=\\' \\' && i>0) i--;\\n            if(i!=0 || s[i]==\\' \\') i++;\\n            break;\\n        }\\n        return j-i+1;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        if(s.size()==1){\\n            if(s[0]==\\' \\') return 0;\\n            else return 1;\\n        }\\n        int i=s.size()-1;\\n        int j=i;\\n        while(i>0){\\n            if(s[i]==\\' \\') \\n            while(s[i]==\\' \\' && i>0) i--;\\n            if(i==0) return !(s[i]==\\' \\');\\n            j=i;\\n            while(s[i]!=\\' \\' && i>0) i--;\\n            if(i!=0 || s[i]==\\' \\') i++;\\n            break;\\n        }\\n        return j-i+1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 894131,
                "title": "golang-3-solutions",
                "content": "3 Approaches in Golang\\n\\nRuntime: 0 ms, faster than 100.00% of Go online submissions for Length of Last Word.\\nMemory Usage: 2.1 MB, less than 100.00% of Go online submissions for Length of Last Word.\\n\\n```\\n// import \"strings\"\\n\\nfunc lengthOfLastWord(s string) int {\\n    \\n    if len(s) < 1 {\\n        return 0\\n    }\\n//*******************Approach 1*******************\\n    \\n//     s = strings.TrimSpace(s)\\n//     result := strings.Split(s, \" \")\\n//     return len(result[len(result)-1])\\n    \\n//*******************Approach 2*******************\\n    \\n//     count := 0\\n//     for i := 0; i < len(s); i++ {\\n//         if string(s[i]) != \" \"{\\n//             count ++\\n//         } else if i != len(s)-1 && string(s[i+1]) != \" \" {\\n//             count = 0\\n//         }\\n//     }\\n    \\n//     return count\\n    \\n//*******************Approach 3*******************\\n    \\n    count := 0\\n    for i := len(s)-1; i > -1; i-- {\\n        if string(s[i]) != \" \" {\\n            count++\\n        } else if count > 0 {\\n            return count \\n        }\\n    }\\n    return count\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\n// import \"strings\"\\n\\nfunc lengthOfLastWord(s string) int {\\n    \\n    if len(s) < 1 {\\n        return 0\\n    }\\n//*******************Approach 1*******************\\n    \\n//     s = strings.TrimSpace(s)\\n//     result := strings.Split(s, \" \")\\n//     return len(result[len(result)-1])\\n    \\n//*******************Approach 2*******************\\n    \\n//     count := 0\\n//     for i := 0; i < len(s); i++ {\\n//         if string(s[i]) != \" \"{\\n//             count ++\\n//         } else if i != len(s)-1 && string(s[i+1]) != \" \" {\\n//             count = 0\\n//         }\\n//     }\\n    \\n//     return count\\n    \\n//*******************Approach 3*******************\\n    \\n    count := 0\\n    for i := len(s)-1; i > -1; i-- {\\n        if string(s[i]) != \" \" {\\n            count++\\n        } else if count > 0 {\\n            return count \\n        }\\n    }\\n    return count\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 22049,
                "title": "my-c-solution",
                "content": "    class Solution {\\n    public:\\n        int lengthOfLastWord(const char *s) {\\n            int len = strlen(s);\\n    \\t\\tif (!len) return 0;\\n    \\t\\tint n=0,  i = len-1;\\n    \\t\\twhile (s[i] == ' ') i--;\\n    \\t\\tfor (; i >= 0; i--,n++)\\n    \\t\\t\\tif (s[i] == ' ')\\n    \\t\\t\\t\\treturn n;\\n    \\t\\treturn n;\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        int lengthOfLastWord(const char *s) {\\n            int len = strlen(s);\\n    \\t\\tif (!len) return 0;\\n    \\t\\tint n=0,  i = len-1;\\n    \\t\\twhile (s[i] == ' ') i--;\\n    \\t\\tfor (; i >= 0; i--,n++)\\n    \\t\\t\\tif (s[i] == ' ')\\n    \\t\\t\\t\\treturn n;\\n    \\t\\treturn n;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 22280,
                "title": "it-was-accepted",
                "content": "`public class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String ss = s.trim();\\n        return ss.length() - 1 - ss.lastIndexOf(' ');\\n    }\\n}`",
                "solutionTags": [],
                "code": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String ss = s.trim();\\n        return ss.length() - 1 - ss.lastIndexOf(' ');\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 3984399,
                "title": "java-solution-super-easy-approach-video-solution",
                "content": "# Please watch this solution video for clear understanding :-\\nhttps://youtu.be/wC9Va0jj2gg?si=CYUGjmKvR_sT9bSR\\n\\n# Approach\\nwill initialize an counter variable = 0 .\\nwill start an pointer from last index \\nwill keep decreasing it untill we will find any blank space and keep increasing counter \\nonce blank space found ,  break and come out of loop\\nat last return counter value .\\nfor better understanding and solution watch given video. \\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n# Code\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        String str = s.trim();\\n        int count = 0 ;\\n        // for loop from last index to first\\n        for(int i = str.length()-1 ;i>=0;i--){\\n            // keep increasing the counter untill we find any blank space\\n            if(str.charAt(i) != \\' \\' ){\\n                count++ ;\\n            }\\n            // once the blank space is found break the loop\\n            else {\\n                break ;\\n            }\\n        }\\n        return count ;  // return the count , now it will give the no. of actual characters in last word .   \\n    }\\n}\\n```\\n# If you found my solution helpful, I would greatly appreciate your upvote, as it would motivate me to continue sharing more solutions.\\n# wish you the best  !",
                "solutionTags": [
                    "Java",
                    "String",
                    "String Matching"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        String str = s.trim();\\n        int count = 0 ;\\n        // for loop from last index to first\\n        for(int i = str.length()-1 ;i>=0;i--){\\n            // keep increasing the counter untill we find any blank space\\n            if(str.charAt(i) != \\' \\' ){\\n                count++ ;\\n            }\\n            // once the blank space is found break the loop\\n            else {\\n                break ;\\n            }\\n        }\\n        return count ;  // return the count , now it will give the no. of actual characters in last word .   \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3500625,
                "title": "java-easy-to-understand-100-faster",
                "content": "# Complexity\\nL = lenght of Array\\n- Time complexity: O(L)\\n\\n- Space complexity: O(L)\\n\\n# Code\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        boolean vis=false;\\n        int ans=0;\\n        for(int i=s.length()-1; i>=0; i--){\\n            if(s.charAt(i)==\\' \\'){\\n                if(vis){\\n                    break;\\n                }\\n            }\\n            else{\\n                vis=true;\\n                ans++;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        boolean vis=false;\\n        int ans=0;\\n        for(int i=s.length()-1; i>=0; i--){\\n            if(s.charAt(i)==\\' \\'){\\n                if(vis){\\n                    break;\\n                }\\n            }\\n            else{\\n                vis=true;\\n                ans++;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3498877,
                "title": "very-easy-c-solution-please-upvote",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i,j,k,c=0;\\n        i=s.size()-1;\\n        while(i>=0 and s[i]==\\' \\')\\n        i--;\\n        for(;i>=0;i--){\\n            if(s[i]==\\' \\' and c!=0)\\n            return c;\\n            c++;\\n        }\\n        return c;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i,j,k,c=0;\\n        i=s.size()-1;\\n        while(i>=0 and s[i]==\\' \\')\\n        i--;\\n        for(;i>=0;i--){\\n            if(s[i]==\\' \\' and c!=0)\\n            return c;\\n            c++;\\n        }\\n        return c;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3492560,
                "title": "c-solution-using-stack",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n      stack<char> s1;\\n      int count=0;\\n      for(int i=0;i<s.size();i++){\\n          s1.push(s[i]);\\n      }\\n\\n    while(s1.top()==\\' \\')s1.pop();\\n      while(!s1.empty()&&s1.top()!=\\' \\'){\\n        count++;\\n        s1.pop();\\n          \\n    }\\n    return count;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n      stack<char> s1;\\n      int count=0;\\n      for(int i=0;i<s.size();i++){\\n          s1.push(s[i]);\\n      }\\n\\n    while(s1.top()==\\' \\')s1.pop();\\n      while(!s1.empty()&&s1.top()!=\\' \\'){\\n        count++;\\n        s1.pop();\\n          \\n    }\\n    return count;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3014559,
                "title": "c-solution-easy-and-simple-using-for-loop",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count=0;\\n        for(int i=s.size()-1;i>=0;i--){\\n            if(s[i]!=\\' \\'){\\n            count++;\\n            }\\n            if(s[i]==\\' \\'){\\n                if (count>0){\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count=0;\\n        for(int i=s.size()-1;i>=0;i--){\\n            if(s[i]!=\\' \\'){\\n            count++;\\n            }\\n            if(s[i]==\\' \\'){\\n                if (count>0){\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1506939,
                "title": "4-lines-of-code-only-in-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        stringstream ss;ss<<s;\\n        string temp;\\n        while(ss>>temp){}\\n        return temp.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        stringstream ss;ss<<s;\\n        string temp;\\n        while(ss>>temp){}\\n        return temp.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1346861,
                "title": "java-0ms-100-fast-and-easy-to-understand-solution",
                "content": "```\\npublic int lengthOfLastWord(String s) {\\n        int length = 0;\\n        s = s.trim();\\n        int start = s.length() - 1;\\n        while (start >= 0 && s.charAt(start) != \\' \\') {\\n            length++;\\n            start--;\\n        }\\n        return length;\\n }\\n```\\nPlease do upvote if you liked the solution or comment incase any doubt :)",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int lengthOfLastWord(String s) {\\n        int length = 0;\\n        s = s.trim();\\n        int start = s.length() - 1;\\n        while (start >= 0 && s.charAt(start) != \\' \\') {\\n            length++;\\n            start--;\\n        }\\n        return length;\\n }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 559757,
                "title": "javascript",
                "content": "```\\nvar lengthOfLastWord = function(s) {\\n    if (!s.length) {\\n        return 0;\\n    };\\n    let arr = s.trim().split(\\' \\');\\n    return arr[arr.length - 1].length;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar lengthOfLastWord = function(s) {\\n    if (!s.length) {\\n        return 0;\\n    };\\n    let arr = s.trim().split(\\' \\');\\n    return arr[arr.length - 1].length;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 509411,
                "title": "javascript-solution-o-n-left-to-right",
                "content": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLastWord = function(s) {\\n    let length = 0, max = 0;\\n    for (let i = 0; i < s.length; i++)\\n        if (s[i] !== \\' \\')\\n            length++, max = length;\\n        else\\n            length = 0;\\n    return max;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLastWord = function(s) {\\n    let length = 0, max = 0;\\n    for (let i = 0; i < s.length; i++)\\n        if (s[i] !== \\' \\')\\n            length++, max = length;\\n        else\\n            length = 0;\\n    return max;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 21985,
                "title": "short-java-solution",
                "content": "    public class Solution {\\n        public int lengthOfLastWord(String s) {\\n            String[] parts = s.split(\" \");\\n            if (parts.length == 0) return 0;\\n            return parts[parts.length - 1].length();\\n        }\\n    }",
                "solutionTags": [],
                "code": "class Solution {\\n        public int lengthOfLastWord(String s) {\\n            String[] parts = s.split(\" \");\\n            if (parts.length == 0) return 0;\\n            return parts[parts.length - 1].length();\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3887562,
                "title": "in-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        s = s.trim(); // Trim leading and trailing spaces\\n        int count = 0;\\n        \\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) != \\' \\') {\\n                count++;\\n            } else {\\n                break; // Stop counting as soon as a space is encountered\\n            }\\n        }\\n        \\n        return count;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        s = s.trim(); // Trim leading and trailing spaces\\n        int count = 0;\\n        \\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) != \\' \\') {\\n                count++;\\n            } else {\\n                break; // Stop counting as soon as a space is encountered\\n            }\\n        }\\n        \\n        return count;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3792192,
                "title": "2-methods-explanation-clean-easy-code-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- First direction of thinking was in direction of using a stack, since it will give the words of string in reverse manner.\\n- That is also a feasible solution, but this is quite easy approach.\\n- To have variables to store number of spaces and count of the words.\\n- And after that just return the absolute of difference.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Iterate over the string from the back, if its space, space_variable++, count++.\\n- else flag=1 (encountered character) count++;\\n- if s[i]==space and flag=1 means this is starting of another word, which is useless for us so break the iteration.\\n- return absolute difference b/w space and count. \\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Method 1\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int n=s.length();\\n        int count=0;\\n        int space=0;\\n        int flag=0;\\n        for(int i=n-1;i>=0;i--)\\n        {\\n            if(s[i]==\\' \\' && flag==0)\\n            {\\n                space++;\\n            }\\n            else if(s[i]!=\\' \\')\\n            {\\n                flag=1;\\n            }\\n            else if(s[i]==\\' \\' && flag==1){\\n                break;\\n            }\\n            count++;\\n        }\\n        return abs(space-count);  \\n    }\\n};\\n```\\n\\n# Method 2\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n      stack<char> s1;\\n      int count=0;\\n      for(int i=0;i<s.size();i++){\\n          s1.push(s[i]);\\n      }\\n\\n    while(s1.top()==\\' \\')s1.pop();\\n      while(!s1.empty()&&s1.top()!=\\' \\'){\\n        count++;\\n        s1.pop();\\n          \\n    }\\n    return count;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int n=s.length();\\n        int count=0;\\n        int space=0;\\n        int flag=0;\\n        for(int i=n-1;i>=0;i--)\\n        {\\n            if(s[i]==\\' \\' && flag==0)\\n            {\\n                space++;\\n            }\\n            else if(s[i]!=\\' \\')\\n            {\\n                flag=1;\\n            }\\n            else if(s[i]==\\' \\' && flag==1){\\n                break;\\n            }\\n            count++;\\n        }\\n        return abs(space-count);  \\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n      stack<char> s1;\\n      int count=0;\\n      for(int i=0;i<s.size();i++){\\n          s1.push(s[i]);\\n      }\\n\\n    while(s1.top()==\\' \\')s1.pop();\\n      while(!s1.empty()&&s1.top()!=\\' \\'){\\n        count++;\\n        s1.pop();\\n          \\n    }\\n    return count;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3375471,
                "title": "99-42-runtime-97-66-memory-beats-with-explanation",
                "content": "# Intuition\\nThis code is written to find the length of the last word in a given string. The intuition behind this code is to start from the end of the string and count the number of characters in the last word until a space is encountered.\\n\\n\\n# Approach\\nThe approach taken in this code is to first initialize an index variable to the length of the string minus one. Then, the code enters a while loop that checks if the character at the current index is a space. If it is, the index is decremented by 1 until a non-space character is encountered.\\n\\nAfter this, another while loop is entered that checks if the character at the current index is a space or not. If it is not a space, the count variable is incremented. If it is a space or the index becomes 0, the loop is broken and the count is returned.\\n\\n\\n\\n# Complexity\\n- Time complexity O(n):\\nThe time complexity of this code is O(n) where n is the length of the string. This is because the code iterates through the string twice, once to find the last non-space character and then to count the length of the last word.\\n\\n\\n- Space complexity O(1):\\nThe space complexity of this code is O(1) because the only extra space used is for two integer variables, index and count.\\n\\n\\n# Code\\n```\\nclass Solution {\\n  int lengthOfLastWord(String s) {\\n    // Initialize the index variable to the last index of the string\\n    int index = s.length - 1;\\n    // Loop through any trailing spaces at the end of the string\\n    while (s[index] == \" \"){\\n      index--;\\n    }\\n    // Initialize the count variable to 0\\n    int count = 0;\\n    // Loop through the last word in the string\\n    while(s[index] != \" \"){\\n      // Increment the count variable for each character in the last word\\n      count++;\\n      // Check if the previous character was a space or if we have reached the beginning of the string\\n      if (s[index] == \" \" || index == 0){\\n        // Break out of the loop if the previous character was a space or if we have reached the beginning of the string\\n        break;\\n      } \\n      // Move the index to the previous character in the string\\n      index--;\\n    }\\n    // Return the count variable which contains the length of the last word in the string\\n    return count;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Dart",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n  int lengthOfLastWord(String s) {\\n    // Initialize the index variable to the last index of the string\\n    int index = s.length - 1;\\n    // Loop through any trailing spaces at the end of the string\\n    while (s[index] == \" \"){\\n      index--;\\n    }\\n    // Initialize the count variable to 0\\n    int count = 0;\\n    // Loop through the last word in the string\\n    while(s[index] != \" \"){\\n      // Increment the count variable for each character in the last word\\n      count++;\\n      // Check if the previous character was a space or if we have reached the beginning of the string\\n      if (s[index] == \" \" || index == 0){\\n        // Break out of the loop if the previous character was a space or if we have reached the beginning of the string\\n        break;\\n      } \\n      // Move the index to the previous character in the string\\n      index--;\\n    }\\n    // Return the count variable which contains the length of the last word in the string\\n    return count;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3362846,
                "title": "c-solution",
                "content": "# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nint lengthOfLastWord(char * s){\\n    int lastSize = 0;\\n    int i = strlen(s) - 1;\\n    \\n    if (s[i] == \\' \\') {\\n        while (i >= 0 && s[i] == \\' \\') {\\n            i--;\\n        }\\n    }\\n\\n    while (i >= 0) {\\n        if (s[i] == \\' \\') {\\n            break;\\n        }\\n        if ((s[i] >= 97 && s[i] <= 122) || (s[i] >= 65 && s[i] <= 90)) {\\n            lastSize++;\\n        }\\n        i--;\\n    }\\n\\n    return lastSize;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint lengthOfLastWord(char * s){\\n    int lastSize = 0;\\n    int i = strlen(s) - 1;\\n    \\n    if (s[i] == \\' \\') {\\n        while (i >= 0 && s[i] == \\' \\') {\\n            i--;\\n        }\\n    }\\n\\n    while (i >= 0) {\\n        if (s[i] == \\' \\') {\\n            break;\\n        }\\n        if ((s[i] >= 97 && s[i] <= 122) || (s[i] >= 65 && s[i] <= 90)) {\\n            lastSize++;\\n        }\\n        i--;\\n    }\\n\\n    return lastSize;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3048547,
                "title": "c-easy-approach",
                "content": "Here is my c++ code for this problem.\\n\\n# Complexity\\n- Time complexity:$$O(n)$$\\n\\n- Space complexity:$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int ans=0, i=s.size()-1;\\n        while(i>=0 && s[i]==\\' \\'){\\n            i--;\\n        }\\n        while(i>=0 && s[i]!=\\' \\'){\\n            i--; ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int ans=0, i=s.size()-1;\\n        while(i>=0 && s[i]==\\' \\'){\\n            i--;\\n        }\\n        while(i>=0 && s[i]!=\\' \\'){\\n            i--; ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3004177,
                "title": "simple-javascript-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLastWord = function(s) {\\n    return s.trim().split(\\' \\').at(-1).length\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "String"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLastWord = function(s) {\\n    return s.trim().split(\\' \\').at(-1).length\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2941731,
                "title": "easy-simple-c-solution",
                "content": "### Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int j= s.size()-1;\\n        while (j>=0 &&s[j]==\\' \\')j--;\\n        int ans=0;\\n        while (j>=0 && s[j]!=\\' \\'){\\n            j--;\\n            ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int j= s.size()-1;\\n        while (j>=0 &&s[j]==\\' \\')j--;\\n        int ans=0;\\n        while (j>=0 && s[j]!=\\' \\'){\\n            j--;\\n            ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2676044,
                "title": "c-3ms-using-stack",
                "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        stack<char>st;\\n        st.push(\\'9\\');\\n        for(auto it: s){\\n            st.push(it);\\n        }\\n        int c =0;\\n        while(true){\\n            if(st.top()==\\' \\' && c>0){\\n                break;\\n            }\\n            \\n            if(st.top()==\\'9\\'){\\n                break;\\n            }\\n            else if(st.top()!=\\' \\'){\\n                c++;\\n                st.pop();\\n            }\\n            \\n            else{\\n                st.pop();\\n            }\\n        }\\n        return c;\\n    }\\n};\\n```\\n\\n```\\nif(st.top()==\\'9\\'){\\n                break;\\n            }\\n \\'9\\' has been intentionally inserted in the stack in the beginning. It helps us when there is only a single word in the string and continously popping will give us a stack underflow error as there is no blank space.",
                "solutionTags": [
                    "C++",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        stack<char>st;\\n        st.push(\\'9\\');\\n        for(auto it: s){\\n            st.push(it);\\n        }\\n        int c =0;\\n        while(true){\\n            if(st.top()==\\' \\' && c>0){\\n                break;\\n            }\\n            \\n            if(st.top()==\\'9\\'){\\n                break;\\n            }\\n            else if(st.top()!=\\' \\'){\\n                c++;\\n                st.pop();\\n            }\\n            \\n            else{\\n                st.pop();\\n            }\\n        }\\n        return c;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2497494,
                "title": "python-c-java-beginner-level-100-faster-as-simple-as-u-think-simple-short-solution",
                "content": "***Please upvote to motivate me in my quest of documenting all leetcode solutions. HAPPY CODING:)\\nAny suggestions and improvements are always welcome*.**\\n___________________\\n_________________\\n***Q58. Length of Last Word***\\nGiven a string `s` consisting of words and spaces, return the length of the  word **last** the string.\\n\\nA **word** is a maximal substring consisting of non-space characters only.\\n____________________________________________________________________________________________________________________\\n____________________________________________________________________________________________________________________\\n\\u2705 **Python  Code** :\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        s=s.strip().split(\" \")\\n        lst=[ i for i in s if i!=\"\"]\\n        a=lst[-1]\\n        return len(a)\\n```\\n**Runtime:**  50 ms\\t\\n**Memory Usage:**  13.9 MB\\n____________________________________________________________________________________________________________________\\n____________________________________________________________________________________________________________________\\n\\n\\u2705 **Java Code** :\\nRuntime: 0 ms, faster than 100.00% of java online submissions for Length of Last Word.\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n       int len=0;\\n        for(int i=s.length()-1;i>=0;i--)\\n        {\\n            if(s.charAt(i)!=\\' \\')\\n                len++;\\n            else if(len>0)\\n                return len;\\n        }\\n        return len;\\n    }\\n}\\n```\\n**Runtime:**  0 ms\\t\\t\\n**Memory Usage:**  43..8 MB\\t\\n____________________________________________________________________________________________________________________\\n____________________________________________________________________________________________________________________\\n\\u2705 **C++  Code** :\\n**Runtime**: 0 ms, faster than 100.00% of C++ online submissions for Length of Last Word.\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int len=0;\\n        for(int i=s.size()-1;i>=0;i--)\\n        {\\n            if(s[i]!=\\' \\')   len++;\\n            else if(len>0)  return len;\\n        }\\n        return len;\\n    }\\n};\\n```\\n**Runtime:** 0 ms\\t\\n**Memory Usage:**  5.3 MB\\t\\t\\n____________________________________________________________________________________________________________________\\n____________________________________________________________________________________________________________________\\nIf you like the solution, please upvote \\uD83D\\uDD3C\\nFor any questions, or discussions, comment below. \\uD83D\\uDC47\\uFE0F\\n",
                "solutionTags": [
                    "Java",
                    "Python",
                    "C"
                ],
                "code": "```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        s=s.strip().split(\" \")\\n        lst=[ i for i in s if i!=\"\"]\\n        a=lst[-1]\\n        return len(a)\\n```\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n       int len=0;\\n        for(int i=s.length()-1;i>=0;i--)\\n        {\\n            if(s.charAt(i)!=\\' \\')\\n                len++;\\n            else if(len>0)\\n                return len;\\n        }\\n        return len;\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int len=0;\\n        for(int i=s.size()-1;i>=0;i--)\\n        {\\n            if(s[i]!=\\' \\')   len++;\\n            else if(len>0)  return len;\\n        }\\n        return len;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2341612,
                "title": "very-easy-100-fully-explained-java-c-python-js-c-python3",
                "content": "# **Java Solution:**\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        // Initialize length...\\n        int length = 0;\\n        // Create a loop starting from last character...\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            // If the character is not a space...\\n            if (s.charAt(i) != \\' \\') {\\n                length++;\\n            }\\n            // Here it is the end of last word...\\n            else if(length != 0) {\\n                break;\\n            }\\n        }\\n        return length;\\n    }\\n}\\n```\\n\\n# **C++ Solution:**\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        // base case...\\n        if(s.length()<1)\\n            return 0;\\n        int end = s.length() - 1;\\n        // Find first character from the end\\n        while (end >= 0 && s[end] == \\' \\')\\n            --end;\\n        const int beg = end;\\n        // Find first space from the last character\\n        while (end >= 0 && s[end] != \\' \\')\\n            --end;\\n        return beg - end;     //return the length...\\n    }\\n};\\n```\\n\\n# **Python Solution:**\\n```\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        s = s.strip()       # Remove the spaces at the beginning and end\\n        length = 0\\n        for i in range(len(s)):\\n            # Waiting for the next word...\\n            if s[i] == \" \":\\n                length = 0\\n            else:\\n                length += 1    # Inside one word\\n        return length\\n```\\n        \\n# **Javascript Solution:**\\n```\\nvar lengthOfLastWord = function(s) {\\n    // Initialize length...\\n    let length = 0;\\n    // Create a loop starting from last character...\\n    for (let i = s.length - 1; i >= 0; i--) {\\n        // If the character is not a space...\\n        if (s.charAt(i) != \\' \\') {\\n            length++;\\n        }\\n        // Here it is the end of last word...\\n        else if(length != 0) {\\n            break;\\n        }\\n    }\\n    return length;\\n};\\n```\\n\\n# **C Language:**\\n```\\nint lengthOfLastWord(char * s){\\n    int count  = 0;\\n    int length = 0;\\n    for (int i = 0; i < strlen(s); i++) {\\n        if (s[i] != \\' \\') {\\n            count++;\\n            length = count;\\n        }\\n        else {\\n            count = 0;\\n            if (length < count) {\\n                length = count;\\n            }\\n        }\\n    }\\n    return length;\\n}\\n```\\n\\n# **Python3 Solution:**\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        s = s.strip()       # Remove the spaces at the beginning and end\\n        length = 0\\n        for i in range(len(s)):\\n            # Waiting for the next word...\\n            if s[i] == \" \":\\n                length = 0\\n            else:\\n                length += 1    # Inside one word\\n        return length\\n```\\n**I am working hard for you guys...\\nPlease upvote if you find any help with this code...**",
                "solutionTags": [
                    "Java",
                    "Python",
                    "Python3",
                    "C",
                    "JavaScript"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        // Initialize length...\\n        int length = 0;\\n        // Create a loop starting from last character...\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            // If the character is not a space...\\n            if (s.charAt(i) != \\' \\') {\\n                length++;\\n            }\\n            // Here it is the end of last word...\\n            else if(length != 0) {\\n                break;\\n            }\\n        }\\n        return length;\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        // base case...\\n        if(s.length()<1)\\n            return 0;\\n        int end = s.length() - 1;\\n        // Find first character from the end\\n        while (end >= 0 && s[end] == \\' \\')\\n            --end;\\n        const int beg = end;\\n        // Find first space from the last character\\n        while (end >= 0 && s[end] != \\' \\')\\n            --end;\\n        return beg - end;     //return the length...\\n    }\\n};\\n```\n```\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        s = s.strip()       # Remove the spaces at the beginning and end\\n        length = 0\\n        for i in range(len(s)):\\n            # Waiting for the next word...\\n            if s[i] == \" \":\\n                length = 0\\n            else:\\n                length += 1    # Inside one word\\n        return length\\n```\n```\\nvar lengthOfLastWord = function(s) {\\n    // Initialize length...\\n    let length = 0;\\n    // Create a loop starting from last character...\\n    for (let i = s.length - 1; i >= 0; i--) {\\n        // If the character is not a space...\\n        if (s.charAt(i) != \\' \\') {\\n            length++;\\n        }\\n        // Here it is the end of last word...\\n        else if(length != 0) {\\n            break;\\n        }\\n    }\\n    return length;\\n};\\n```\n```\\nint lengthOfLastWord(char * s){\\n    int count  = 0;\\n    int length = 0;\\n    for (int i = 0; i < strlen(s); i++) {\\n        if (s[i] != \\' \\') {\\n            count++;\\n            length = count;\\n        }\\n        else {\\n            count = 0;\\n            if (length < count) {\\n                length = count;\\n            }\\n        }\\n    }\\n    return length;\\n}\\n```\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        s = s.strip()       # Remove the spaces at the beginning and end\\n        length = 0\\n        for i in range(len(s)):\\n            # Waiting for the next word...\\n            if s[i] == \" \":\\n                length = 0\\n            else:\\n                length += 1    # Inside one word\\n        return length\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2339607,
                "title": "c-java-python3-solutions-iteration-or-trim",
                "content": "The easist way may be iterate from the end of the string, can we do that with a different way?\\n**Of course !**\\n\\n\\n### C# Examples  (Java and Python version please visit my blog)\\n**1. Iteration**\\n```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        \\n        int cnt = 0;\\n        \\n        for(int i = s.Length-1;i>=0;i--)\\n        {\\n            if(Char.IsWhiteSpace(s[i]))\\n            {\\n                if(cnt>0)\\n                {\\n                    return cnt;    \\n                }\\n                continue;\\n            }\\n            \\n            cnt+=1;\\n        }\\n        return cnt;\\n    }\\n}\\n```\\n\\n**2. Split + Trim**\\n```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        s = s.TrimEnd();                 //or you can use Trim()\\n        string[] tmp = s.Split(\\' \\');\\n        return tmp[tmp.Length-1].Length; \\n    }\\n}\\n```\\nIs there an easier way in C#? Yes!\\n\\n\\u2B50**See more Code and Explanation : [https://zyrastory.com/en/coding-en/leetcode-en/leetcode-58-length-of-last-word-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-58-length-of-last-word-solution-and-explanation-en/)**\\n\\n\\nIf you got any problem about the explanation or you need other programming language solution, please feel free to leave your comment.\\n\\n\\uD83E\\uDDE1See more problems solutions - **[Zyrastory - LeetCode Solution](https://zyrastory.com/en/category/coding-en/leetcode-en/)**\\n\\nThanks!",
                "solutionTags": [
                    "Java",
                    "Python3"
                ],
                "code": "```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        \\n        int cnt = 0;\\n        \\n        for(int i = s.Length-1;i>=0;i--)\\n        {\\n            if(Char.IsWhiteSpace(s[i]))\\n            {\\n                if(cnt>0)\\n                {\\n                    return cnt;    \\n                }\\n                continue;\\n            }\\n            \\n            cnt+=1;\\n        }\\n        return cnt;\\n    }\\n}\\n```\n```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        s = s.TrimEnd();                 //or you can use Trim()\\n        string[] tmp = s.Split(\\' \\');\\n        return tmp[tmp.Length-1].Length; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3354740,
                "title": "c-solution",
                "content": "# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nint lengthOfLastWord(char * s){\\n    int len = 0;\\n    int i = strlen(s) - 1;\\n    \\n    while (s[i] == \\' \\' && i >= 0) i--;\\n    while (i >= 0 && s[i--] != \\' \\') len++;\\n\\n    return len;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint lengthOfLastWord(char * s){\\n    int len = 0;\\n    int i = strlen(s) - 1;\\n    \\n    while (s[i] == \\' \\' && i >= 0) i--;\\n    while (i >= 0 && s[i--] != \\' \\') len++;\\n\\n    return len;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3073777,
                "title": "python-one-liner-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe are just split a string using \"split()\" function and as we know that it will split all the words into list and we are accessing the last element by using[-1] and return a length of last word using \"len()\" function.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])\\n```",
                "solutionTags": [
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3046740,
                "title": "java-easy-and-short-solution",
                "content": "# Approach\\n\\n1. Split array by space\\n2. Count the length of last element from splitted array\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        \\n        String[] splittedArr = s.split(\" \"); // Split array by space (\" \")\\n\\n        String lastWord = splittedArr[splittedArr.length -1] ; // Getting the last element\\n\\n        return lastWord.length(); count the length\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        \\n        String[] splittedArr = s.split(\" \"); // Split array by space (\" \")\\n\\n        String lastWord = splittedArr[splittedArr.length -1] ; // Getting the last element\\n\\n        return lastWord.length(); count the length\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2682756,
                "title": "c",
                "content": "class Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        \\n        int temp=0;\\n        reverse(s.begin(),s.end());\\n        for(int i=0;i<s.size();i++){\\n            if(s[i]!=\\' \\'){\\n                temp++;\\n            }\\n\\t\\t\\telse{\\n                if(temp!=0){\\n                    break;\\n                }\\n            }\\n        }\\n        return temp;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "class Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        \\n        int temp=0;\\n        reverse(s.begin(),s.end());\\n        for(int i=0;i<s.size();i++){\\n            if(s[i]!=\\' \\'){\\n                temp++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1669061,
                "title": "c-faster-than-100-easy",
                "content": "A very simple solution where we iterate from the end and check if the space is found. If not found we just add 1 to the result. And as soon as the result becomes non-zero, and we encounter a space, we return the result.\\n\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int result = 0;\\n        for(int i = s.length()-1;i >= 0;i--){\\n            if(s[i] != \\' \\'){\\n                result += 1;\\n            } else if(result){\\n                return result;\\n            }\\n        }\\n        return result;\\n    }\\n};\\n```\\n\\n![image](https://assets.leetcode.com/users/images/3e163076-a04e-4481-8e76-5177527482cf_1641403834.8469174.png)",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int result = 0;\\n        for(int i = s.length()-1;i >= 0;i--){\\n            if(s[i] != \\' \\'){\\n                result += 1;\\n            } else if(result){\\n                return result;\\n            }\\n        }\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1463506,
                "title": "using-stringstream-4-liner-simple-c-solution",
                "content": "***[Using stringstream : 4 liner , Simple C++ solution]***\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        \\n        stringstream ss(s);\\n        string st = \"\", word;\\n        while(ss >> word)  st = word;\\n        return st.length();\\n    }\\n}; //please upvote :)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        \\n        stringstream ss(s);\\n        string st = \"\", word;\\n        while(ss >> word)  st = word;\\n        return st.length();\\n    }\\n}; //please upvote :)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1378770,
                "title": "c-logic-explained-for-beginners-100-fast-0ms-runtime",
                "content": "lets see some possible critical cases.\\n1. s=\"Hello Beautiful\"\\nThis is the simplest input. We just have to iterate from the last and count how many characters are until we find a space. \\n2. s=\"  hello   \"\\nIn this case, if we stop when we find a space, the answer will be wrong. We\\'ve to skip the last two spaces and then count how many characters until we find next space.\\n* So the final logic is, we start counting characters from the last. we count if the chracter isn\\'t a space and we will stop the counting loop if we\\'ve counted some characters and find a space.\\nSee, for s=\" hello  \" . \\n* At first, we find a space. We dont count here. And we dont stop the loop as count_of_characters=0. \\n* Then we find a space again. We dont count here. And we dont stop the loop as count_of_characters=0. \\n* then we find \\'o\\', count_of_characters=1. when we reach to \\'h\\', count_of_characters=5.\\n* then we find a space. we dont count here. but we stop the loop as count_of_characters is not 0 here and we find a space.\\nMy code is given below:\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n     int count=0;\\n     for(int i=s.length()-1;i>=0;i--)\\n     {\\n         if(s[i]==\\' \\' and count!=0) break; //stop if it\\'s a space and we\\'ve counted some characters\\n         if(s[i]!=\\' \\') count++;//count if it\\'s not a space\\n     }\\n        return count;\\n    }\\n};\\n```\\nThanks for reading. Comment if you have any question.",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n     int count=0;\\n     for(int i=s.length()-1;i>=0;i--)\\n     {\\n         if(s[i]==\\' \\' and count!=0) break; //stop if it\\'s a space and we\\'ve counted some characters\\n         if(s[i]!=\\' \\') count++;//count if it\\'s not a space\\n     }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 848121,
                "title": "c-o-n-solutions",
                "content": "**Solution 1**\\n```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        \\n        if(s == null || s.Length == 0)\\n            return 0;\\n        \\n        string[] arr = s.Split(\" \", StringSplitOptions.RemoveEmptyEntries);\\n        \\n        return arr.Length == 0? 0 : arr[arr.Length - 1].Length;\\n    }\\n}\\n```\\n\\n**Solution 2**\\n```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        \\n        if(s == null || s.Length == 0)\\n            return 0;\\n        \\n        int tail = s.Length - 1;\\n        int len = 0;\\n        \\n        while(tail >= 0 && s[tail] == \\' \\')\\n            tail--;\\n        \\n        while(tail >= 0 && s[tail] != \\' \\')\\n        {\\n            len++;\\n            tail--;\\n        }\\n        \\n        return len;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        \\n        if(s == null || s.Length == 0)\\n            return 0;\\n        \\n        string[] arr = s.Split(\" \", StringSplitOptions.RemoveEmptyEntries);\\n        \\n        return arr.Length == 0? 0 : arr[arr.Length - 1].Length;\\n    }\\n}\\n```\n```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        \\n        if(s == null || s.Length == 0)\\n            return 0;\\n        \\n        int tail = s.Length - 1;\\n        int len = 0;\\n        \\n        while(tail >= 0 && s[tail] == \\' \\')\\n            tail--;\\n        \\n        while(tail >= 0 && s[tail] != \\' \\')\\n        {\\n            len++;\\n            tail--;\\n        }\\n        \\n        return len;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 847641,
                "title": "c-2-pointers-solution-explained-100-time-98-space",
                "content": "Initially I went for a simple left to right approach, using 4 variables:\\n* `len` stores the length of `s`;\\n* `tmp`, that starts at index `0` and then gets moved to the beginning of the next word with an initialy loop;\\n* `start` that stores the position of beginning of that word;\\n* `finish` that gets moved to the end of the word and stores that position;\\n\\nThen I would use a `while` loop to routinely update this values as long as `tmp` is less than `len`.\\n\\nOnce I am done, I will have the coordinates of the last word and then just return `finish - start` :)\\n\\nThe code:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int start = 0, finish = 0, tmp = 0, len = s.size();\\n        // moving tmp to the beginning of the next word and storing it in tmp\\n        while (tmp < len && s[tmp] == \\' \\') tmp++;\\n        while (tmp < len) {\\n            // updating start\\n            start = tmp;\\n            // moving finish to the end of the next word\\n            finish = start + 1;\\n            while (finish < len && s[finish] != \\' \\') finish++;\\n            // preparing the next loop\\n            tmp = finish + 1;\\n            while (tmp < len && s[tmp] == \\' \\') tmp++;\\n        }\\n        return finish - start;\\n    }\\n};\\n```\\n\\nThen it occurred to me that I was just being silly, moving left to right and that it would make much more sense go the other way around. Lesson lernt and came up with this:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        // edge case out\\n        if (!s.size()) return 0;\\n        int start, finish = s.size() - 1;\\n        // moving finish to the end of the last word\\n        while (finish && s[finish] == \\' \\') finish--;\\n        // moving start to the end of the last word\\n        start = finish;\\n        while (start > -1 && s[start] != \\' \\') start--;\\n        return finish - start;\\n    }\\n};\\n```\\n\\nSurprisingly, the code does not run much better on average - probably because the test strings are with too few words; memory consumption is a bit lower.",
                "solutionTags": [
                    "C++",
                    "C",
                    "Two Pointers",
                    "String"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int start = 0, finish = 0, tmp = 0, len = s.size();\\n        // moving tmp to the beginning of the next word and storing it in tmp\\n        while (tmp < len && s[tmp] == \\' \\') tmp++;\\n        while (tmp < len) {\\n            // updating start\\n            start = tmp;\\n            // moving finish to the end of the next word\\n            finish = start + 1;\\n            while (finish < len && s[finish] != \\' \\') finish++;\\n            // preparing the next loop\\n            tmp = finish + 1;\\n            while (tmp < len && s[tmp] == \\' \\') tmp++;\\n        }\\n        return finish - start;\\n    }\\n};\\n```\n```cpp\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        // edge case out\\n        if (!s.size()) return 0;\\n        int start, finish = s.size() - 1;\\n        // moving finish to the end of the last word\\n        while (finish && s[finish] == \\' \\') finish--;\\n        // moving start to the end of the last word\\n        start = finish;\\n        while (start > -1 && s[start] != \\' \\') start--;\\n        return finish - start;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 804768,
                "title": "javascript-1-line-and-5-line",
                "content": "Here are two different single line solutions. The first gets the starting and ending index of the last word, the second splits the array and pops off the last item.\\n\\n```\\nvar lengthOfLastWord = function(s) {\\n    return s.trimEnd().length - s.trimEnd().lastIndexOf(\" \") - 1\\n};\\n```\\n\\n```\\nvar lengthOfLastWord = function(s) {    \\n    return s.trimEnd().split(\" \").pop().length\\n};\\n```\\n\\nAnd here is a 5 Line solution. The idea is to cycle to the end of the first word, and then cycle to the start of the word. This was just a bonus challenge if you don\\'t want to use javascript functions.\\n```\\nvar lengthOfLastWord2 = function(s) {    \\n    let end = s.length - 1\\n    while (s[end] == \" \") end--\\n    let start = end\\n    while (s[start] != \" \" && start > -1) start--\\n    return end - start\\n};\\n```\\n\\nHappy Coding!\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar lengthOfLastWord = function(s) {\\n    return s.trimEnd().length - s.trimEnd().lastIndexOf(\" \") - 1\\n};\\n```\n```\\nvar lengthOfLastWord = function(s) {    \\n    return s.trimEnd().split(\" \").pop().length\\n};\\n```\n```\\nvar lengthOfLastWord2 = function(s) {    \\n    let end = s.length - 1\\n    while (s[end] == \" \") end--\\n    let start = end\\n    while (s[start] != \" \" && start > -1) start--\\n    return end - start\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 221983,
                "title": "javascript",
                "content": "```\\nvar lengthOfLastWord = function(s) {\\n    s = s.replace(/^\\\\s+|\\\\s+$/g,\\'\\');\\n    var arr = s.split(\\' \\');\\n    return arr[arr.length-1].length;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar lengthOfLastWord = function(s) {\\n    s = s.replace(/^\\\\s+|\\\\s+$/g,\\'\\');\\n    var arr = s.split(\\' \\');\\n    return arr[arr.length-1].length;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 22272,
                "title": "another-simple-solution",
                "content": "         int lengthOfLastWord(const char *s) {\\n            int len  = strlen(s);\\n            int i=len-1;\\n    \\n            while(s[i]==' ')   //remove the spaces from end\\n             i--;\\n          \\n            int j; \\n            for( j= i; j>=0; j--)   //u got a word\\n            {\\n               if(s[j]==' ')       /break before hitting second last word\\n                 break;\\n            }\\n            return i-j;     //return length\\n    }",
                "solutionTags": [],
                "code": "         int lengthOfLastWord(const char *s) {\\n            int len  = strlen(s);\\n            int i=len-1;\\n    \\n            while(s[i]==' ')   //remove the spaces from end\\n             i--;\\n          \\n            int j; \\n            for( j= i; j>=0; j--)   //u got a word\\n            {\\n               if(s[j]==' ')       /break before hitting second last word\\n                 break;\\n            }\\n            return i-j;     //return length\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3922676,
                "title": "easy-c-for-beginner-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nFirst we try to remove the spaces form the back. Then we try to find the first space starting from the last letter or if there is only one word, we go to the start of the string.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. There is an **i** which eliminates the spaces from behind. If there aren\\'t any, **i** stays in last position.\\n2. The pointer **j** finds the first space starting from pointer **i** or goes till the string\\'s beginning if there is only one word.\\n3. We return **(i-j)**.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n_O(n)_\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n_O(1)_\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int n = s.length();\\n        int i;\\n        for(i = n-1;i>=0;i--){\\n            if(s[i] != \\' \\')\\n                break;\\n        }\\n        int j;\\n        for(j=i;j>=0;j--){\\n            if(s[j] == \\' \\')\\n                break;\\n        }\\n        return (i-j);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int n = s.length();\\n        int i;\\n        for(i = n-1;i>=0;i--){\\n            if(s[i] != \\' \\')\\n                break;\\n        }\\n        int j;\\n        for(j=i;j>=0;j--){\\n            if(s[j] == \\' \\')\\n                break;\\n        }\\n        return (i-j);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3274390,
                "title": "java-short-and-sweet-beats-100",
                "content": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int i = s.length()-1;\\n        int l =0;\\n        while (s.charAt(i)==\\' \\')\\n        {\\n            i--;\\n        }\\n        while (i>=0&&s.charAt(i)!=\\' \\')\\n        {\\n            i--;\\n            l++;\\n        }\\n        return l;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int i = s.length()-1;\\n        int l =0;\\n        while (s.charAt(i)==\\' \\')\\n        {\\n            i--;\\n        }\\n        while (i>=0&&s.charAt(i)!=\\' \\')\\n        {\\n            i--;\\n            l++;\\n        }\\n        return l;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3272940,
                "title": "simple-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n       return len(s.split()[-1])\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n       return len(s.split()[-1])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3142122,
                "title": "starting-from-the-last",
                "content": "\\n\\n# Code\\n```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        var lWord = s.Length;\\n        var output =0;\\n        var foundWord = false;\\n\\n        for (int i = lWord -1; i >=0; i-- ){\\n            if(s[i] != \\' \\'){\\n                foundWord = true;\\n                output++;\\n                continue;\\n            } else if(foundWord){\\n                break;    \\n            }\\n        }\\n        return output;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        var lWord = s.Length;\\n        var output =0;\\n        var foundWord = false;\\n\\n        for (int i = lWord -1; i >=0; i-- ){\\n            if(s[i] != \\' \\'){\\n                foundWord = true;\\n                output++;\\n                continue;\\n            } else if(foundWord){\\n                break;    \\n            }\\n        }\\n        return output;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3110648,
                "title": "lenght-of-last-word",
                "content": "# Intuition\\nTo find the length of the last word in a string, we first need to remove any trailing spaces from the input string.\\nAfter that, we can split the string into an array of words using the \\' \\' (space) as the delimiter.\\nThe last word in the array can be accessed using the last property.\\nThe length of the last word can be found by using the length property.\\n# Approach\\nWe use the trim() method to remove any trailing spaces from the input string.\\nWe check if the input string is empty, if yes return 0.\\nUse the split() method to split the string into an array of words using the \\' \\' (space) as the delimiter.\\nAccess the last word in the array using the last property.\\nReturn the length of the last word using the length property.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  int lengthOfLastWord(String s) {\\n    s = s.trim(); // remove trailing spaces\\n    if (s.isEmpty) return 0;\\n    return s.split(\\' \\').last.length;\\n}\\n}\\n```",
                "solutionTags": [
                    "Dart",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n  int lengthOfLastWord(String s) {\\n    s = s.trim(); // remove trailing spaces\\n    if (s.isEmpty) return 0;\\n    return s.split(\\' \\').last.length;\\n}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3100715,
                "title": "java-easy-solution-3-approaches-0ms-100-fastest-solution",
                "content": "Please guys UpVote to get more solution like this...\\n\\n# Java First Approach\\n```\\n// Runtime 1 ms, Beats 47.40%\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] str = s.split(\" \");\\n        int n = str.length;\\n        int len = str[n-1].length();\\n        return len;\\n    }\\n}\\n```\\n\\n# Java Second Approach\\n```\\n//Runtime 1 ms, Beats 47.40%\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] str = s.split(\" \");\\n        String lastWord = str[str.length-1];\\n        return lastWord.length();\\n    }\\n}\\n```\\n# Java Optimised Approach\\n```\\n// Runtime 0 ms, Beats 100%\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        String trim = s.trim();\\n        char[] ch = trim.toCharArray();\\n        int cnt =0;\\n        for(int i = ch.length-1;i>=0;i--) {\\n            cnt++;\\n            if(ch[i]==\\' \\') {\\n                return cnt-1;\\n            }\\n        }\\n        return cnt;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n// Runtime 1 ms, Beats 47.40%\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] str = s.split(\" \");\\n        int n = str.length;\\n        int len = str[n-1].length();\\n        return len;\\n    }\\n}\\n```\n```\\n//Runtime 1 ms, Beats 47.40%\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] str = s.split(\" \");\\n        String lastWord = str[str.length-1];\\n        return lastWord.length();\\n    }\\n}\\n```\n```\\n// Runtime 0 ms, Beats 100%\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        String trim = s.trim();\\n        char[] ch = trim.toCharArray();\\n        int cnt =0;\\n        for(int i = ch.length-1;i>=0;i--) {\\n            cnt++;\\n            if(ch[i]==\\' \\') {\\n                return cnt-1;\\n            }\\n        }\\n        return cnt;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3035639,
                "title": "c-solution-without-using-built-in-functions",
                "content": "# Approach\\nThe approach is simple. First, we skip all spaces from the right side and save the last non-space character index as the last word\\'s character index (`endIndex`). Then we skip all non-space characters to find the index of the first word\\'s character (`startIndex`). As a result, the length of the last word equals the difference between `endIndex` and `startIndex`.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        var endIndex = s.Length - 1;\\n        while (endIndex >= 0 && s[endIndex] == \\' \\')\\n            endIndex--;\\n        var startIndex = endIndex;\\n        while (startIndex >= 0 && s[startIndex] != \\' \\')\\n            startIndex--;\\n        return endIndex - startIndex;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        var endIndex = s.Length - 1;\\n        while (endIndex >= 0 && s[endIndex] == \\' \\')\\n            endIndex--;\\n        var startIndex = endIndex;\\n        while (startIndex >= 0 && s[startIndex] != \\' \\')\\n            startIndex--;\\n        return endIndex - startIndex;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2592273,
                "title": "python-solution-easy-explained",
                "content": "If you like the solution, your upvote is appreciated! \\uD83E\\uDD1D\\n\\nExplanation:\\n\\nFirst we remove all spaces from end. To do that, we change s to contain all the characters but the last one if it is \" \".\\n\\nThen we count from the end of s s, the number of characters until there is a space.\\n\\nAnd that is it!\\n\\nIf you did not yet, upvote to make my day \\uD83C\\uDF1E\\n\\n```\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        \\n        while s[-1] == \" \":\\n            s = s[:-1]\\n        \\n        index = -1\\n        char = s[index]\\n        res = 0\\n        \\n        while char != \" \":\\n            print(char)\\n            res += 1\\n            index -= 1\\n            if abs(index) == len(s) + 1:\\n                return res\\n            char = s[index]\\n        \\n        return res\\n```\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        \\n        while s[-1] == \" \":\\n            s = s[:-1]\\n        \\n        index = -1\\n        char = s[index]\\n        res = 0\\n        \\n        while char != \" \":\\n            print(char)\\n            res += 1\\n            index -= 1\\n            if abs(index) == len(s) + 1:\\n                return res\\n            char = s[index]\\n        \\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2418071,
                "title": "python-easy-solution",
                "content": "```\\ndef lengthOfLastWord(self, s: str) -> int:\\n        array = s.split() \\n        return len(array[-1])\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef lengthOfLastWord(self, s: str) -> int:\\n        array = s.split() \\n        return len(array[-1])\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2379617,
                "title": "c-solution-0ms-5-lines-fast-than-100",
                "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i=s.length()-1;\\n        while(s[i]==\\' \\')    i--;\\n        int word_start = i;\\n        for(; i>=0; i--)\\n            if(s[i]==\\' \\')        break;            \\n        return word_start-i;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i=s.length()-1;\\n        while(s[i]==\\' \\')    i--;\\n        int word_start = i;\\n        for(; i>=0; i--)\\n            if(s[i]==\\' \\')        break;            \\n        return word_start-i;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1863802,
                "title": "golang-go-0ms-100-faster",
                "content": "```\\nfunc lengthOfLastWord(s string) int {\\n    n := len(s)\\n    count := 0\\n    \\n    for i:=n-1; i>=0; i-- {\\n        if count == 0 && s[i] == \\' \\' {\\n            continue\\n        }else {\\n            if s[i] == \\' \\' {\\n                break\\n            }\\n            \\n            count++\\n        }\\n    }\\n    \\n    return count\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc lengthOfLastWord(s string) int {\\n    n := len(s)\\n    count := 0\\n    \\n    for i:=n-1; i>=0; i-- {\\n        if count == 0 && s[i] == \\' \\' {\\n            continue\\n        }else {\\n            if s[i] == \\' \\' {\\n                break\\n            }\\n            \\n            count++\\n        }\\n    }\\n    \\n    return count\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1739447,
                "title": "lengthoflastword",
                "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] spilt=s.split(\" \");\\n        int num = spilt[spilt.length-1].length();\\n        return num;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] spilt=s.split(\" \");\\n        int num = spilt[spilt.length-1].length();\\n        return num;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1451896,
                "title": "loved-the-one-piece-reference",
                "content": "#this is my code:\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        word= s.split()\\n        return len(word[-1])",
                "solutionTags": [],
                "code": "#this is my code:\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        word= s.split()\\n        return len(word[-1])",
                "codeTag": "Java"
            },
            {
                "id": 1417517,
                "title": "2-lines-0-ms-solution-in-java",
                "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        s = s.trim();\\n        return s.length() - s.lastIndexOf(\" \") - 1;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        s = s.trim();\\n        return s.length() - s.lastIndexOf(\" \") - 1;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1069639,
                "title": "swift-0ms",
                "content": "```\\n    func lengthOfLastWord(_ s: String) -> Int {\\n        var res = 0\\n        for c in s.reversed() {\\n            if c == \" \" {\\n                if res > 0 {\\n                    return res\\n                }\\n            } else {\\n                res += 1\\n            }\\n        }\\n        return res\\n    }\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\n    func lengthOfLastWord(_ s: String) -> Int {\\n        var res = 0\\n        for c in s.reversed() {\\n            if c == \" \" {\\n                if res > 0 {\\n                    return res\\n                }\\n            } else {\\n                res += 1\\n            }\\n        }\\n        return res\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1018728,
                "title": "golang-0-ms-2-1-mb",
                "content": "```\\nfunc lengthOfLastWord(s string) int {  \\n    s = strings.TrimRight(s, \" \")\\n        \\n    return len(s) -1 - strings.LastIndex(s, \" \")\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc lengthOfLastWord(s string) int {  \\n    s = strings.TrimRight(s, \" \")\\n        \\n    return len(s) -1 - strings.LastIndex(s, \" \")\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 847631,
                "title": "c-a-simple-and-comprehensive-solution-in-linear-time",
                "content": "\\tclass Solution {\\n\\tpublic:\\n\\t\\tint lengthOfLastWord(string s) {\\n\\t\\t\\tint realEnd = s.size() - 1;\\n\\t\\t\\twhile(realEnd >= 0 && s[realEnd] == \\' \\')\\n\\t\\t\\t{\\n\\t\\t\\t\\t--realEnd;\\n\\t\\t\\t}\\n\\t\\t\\tfor (int startLastWord = realEnd; startLastWord >= 0; --startLastWord)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif (s[startLastWord] == \\' \\')\\n\\t\\t\\t\\t\\treturn realEnd - startLastWord;\\n        \\n\\t\\t\\t}\\n\\t\\t\\t return realEnd + 1; \\n\\t\\t}\\n};\\n\\'\\'\\'",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tint lengthOfLastWord(string s) {\\n\\t\\t\\tint realEnd = s.size() - 1;\\n\\t\\t\\twhile(realEnd >= 0 && s[realEnd] == \\' \\')\\n\\t\\t\\t{\\n\\t\\t\\t\\t--realEnd;\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 847546,
                "title": "length-of-last-word-java-beats-100-simple-and-explained",
                "content": "This problem is real simple when we start to iterate from end to beginning of the given string.\\n1. First while loop, iterates over all the empty spaces at the end\\nExample String: ```s = \"Hello \"``` Last word is \\'Hello\\', but there is an extra space, thus we are removing all such spaces from consideration in this loop.\\n2. Second loop iterates over the last word and count number of characters in it\\n```\\npublic int lengthOfLastWord(String s) {\\n\\tint i = s.length() - 1, len = 0;\\n\\twhile (i >= 0 && s.charAt(i) == \\' \\') {i--;};\\n\\twhile (i >= 0 && s.charAt(i) != \\' \\'){ len++; i--;}\\n\\treturn len;\\n}\\n```",
                "solutionTags": [
                    "String"
                ],
                "code": "```s = \"Hello \"```\n```\\npublic int lengthOfLastWord(String s) {\\n\\tint i = s.length() - 1, len = 0;\\n\\twhile (i >= 0 && s.charAt(i) == \\' \\') {i--;};\\n\\twhile (i >= 0 && s.charAt(i) != \\' \\'){ len++; i--;}\\n\\treturn len;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 847478,
                "title": "java-super-simple-two-line-easy-solution",
                "content": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] words = s.split(\"\\\\\\\\s+\");\\n        return words.length == 0 ? 0 : words[words.length-1].length();\\n    }\\n}\\n```\\n**Like it? please upvote...**",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] words = s.split(\"\\\\\\\\s+\");\\n        return words.length == 0 ? 0 : words[words.length-1].length();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 741936,
                "title": "rust-solution-0ms-2-1mb",
                "content": "```rust\\nimpl Solution {\\n    pub fn length_of_last_word(s: String) -> i32 {\\n        match s.split_whitespace().last() {\\n            Some(word) => word.len() as i32,\\n            None => 0\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```rust\\nimpl Solution {\\n    pub fn length_of_last_word(s: String) -> i32 {\\n        match s.split_whitespace().last() {\\n            Some(word) => word.len() as i32,\\n            None => 0\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 309026,
                "title": "c-0-ms-100-beat-straight-forward-o-n-solution-megahax-torrent-freak",
                "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        \\n        if (s.size() <= 0) { return 0; }\\n        \\n        int aIndex = s.size() - 1;\\n        \\n        //Skip leading spaces.\\n        while (aIndex >= 0 && s[aIndex] == \\' \\') { aIndex--; }\\n        \\n        //If it\\'s all spaces, there\\'s no word.\\n        if (aIndex == -1) { return 0; }\\n        \\n        //Here\\'s where our word started.\\n        int aEnd = aIndex;\\n        while (aIndex >= 0 && s[aIndex] != \\' \\') {\\n            aIndex--;\\n        }\\n\\n        //The length of your big long word. (It\\'s not so big and long)\\n        return (aEnd - aIndex);\\n    }\\n};\\n```\\n\\nGG",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        \\n        if (s.size() <= 0) { return 0; }\\n        \\n        int aIndex = s.size() - 1;\\n        \\n        //Skip leading spaces.\\n        while (aIndex >= 0 && s[aIndex] == \\' \\') { aIndex--; }\\n        \\n        //If it\\'s all spaces, there\\'s no word.\\n        if (aIndex == -1) { return 0; }\\n        \\n        //Here\\'s where our word started.\\n        int aEnd = aIndex;\\n        while (aIndex >= 0 && s[aIndex] != \\' \\') {\\n            aIndex--;\\n        }\\n\\n        //The length of your big long word. (It\\'s not so big and long)\\n        return (aEnd - aIndex);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 293401,
                "title": "c-1-liner",
                "content": "```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        return s.Trim().Split().LastOrDefault().Length;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int LengthOfLastWord(string s) {\\n        return s.Trim().Split().LastOrDefault().Length;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 22024,
                "title": "my-simple-c-nice-solution",
                "content": "```\\nint lengthOfLastWord(string s) {\\n      int count = 0;\\n      for(int i=s.size()-1;i>=0;--i)\\n      {\\n          if(s[i]==' '&& count != 0) break;\\n          if(s[i]!=' ') ++count;\\n      }\\n      return count;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nint lengthOfLastWord(string s) {\\n      int count = 0;\\n      for(int i=s.size()-1;i>=0;--i)\\n      {\\n          if(s[i]==' '&& count != 0) break;\\n          if(s[i]!=' ') ++count;\\n      }\\n      return count;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 22050,
                "title": "c-0ms",
                "content": "```\\nint lengthOfLastWord(char* s) {\\n    int len = strlen(s), wordLen = 0;\\n    while (len--) {\\n        if (s[len] == ' ' && wordLen) {\\n            break;\\n        } else if (s[len] != ' ') {\\n            wordLen++;\\n        }\\n    }\\n    return wordLen;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nint lengthOfLastWord(char* s) {\\n    int len = strlen(s), wordLen = 0;\\n    while (len--) {\\n        if (s[len] == ' ' && wordLen) {\\n            break;\\n        } else if (s[len] != ' ') {\\n            wordLen++;\\n        }\\n    }\\n    return wordLen;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 22153,
                "title": "two-python-solutions-two-pointers-and-split",
                "content": "Using split is simple in python, but two pointer solution saves memory.\\n\\nSplit Version\\n   \\n\\n    class Solution(object):\\n        def lengthOfLastWord(self, s):\\n            \"\"\"\\n            :type s: str\\n            :rtype: int\\n            \"\"\"\\n            l = s.split()\\n            if len(l) == 0: return 0\\n            else: return len(l[-1])\\n        \\n\\nTwo Pointer Version (use a boolean variable to indicate whether we should update the length)\\n\\n    class Solution(object):\\n        def lengthOfLastWord(self, s):\\n            \"\"\"\\n            :type s: str\\n            :rtype: int\\n            \"\"\"\\n            start, res = 0, 0\\n            calc = True\\n            s += \" \"\\n            for i in xrange(len(s)):\\n                cur = s[i]\\n                if cur == ' ' and calc: \\n                    res = i-start\\n                    calc = False\\n                elif cur != ' ' and not calc:\\n                    start = i\\n                    calc = True\\n            return res",
                "solutionTags": [
                    "Python"
                ],
                "code": "Using split is simple in python, but two pointer solution saves memory.\\n\\nSplit Version\\n   \\n\\n    class Solution(object):\\n        def lengthOfLastWord(self, s):\\n            \"\"\"\\n            :type s: str\\n            :rtype: int\\n            \"\"\"\\n            l = s.split()\\n            if len(l) == 0: return 0\\n            else: return len(l[-1])\\n        \\n\\nTwo Pointer Version (use a boolean variable to indicate whether we should update the length)\\n\\n    class Solution(object):\\n        def lengthOfLastWord(self, s):\\n            \"\"\"\\n            :type s: str\\n            :rtype: int\\n            \"\"\"\\n            start, res = 0, 0\\n            calc = True\\n            s += \" \"\\n            for i in xrange(len(s)):\\n                cur = s[i]\\n                if cur == ' ' and calc: \\n                    res = i-start\\n                    calc = False\\n                elif cur != ' ' and not calc:\\n                    start = i\\n                    calc = True\\n            return res",
                "codeTag": "Java"
            },
            {
                "id": 21897,
                "title": "simple-c-solution",
                "content": "    int lengthOfLastWord(char* s) {\\n    int last_len= 0;\\n    while (*s) {\\n        while (*s==' ') ++s; // skip spaces\\n        if (*s) {   \\n            last_len=0; // new word, reset last word length\\n            while (*s && *s !=' ') { ++s; ++last_len; }\\n        }\\n    }\\n    return last_len;\\n}",
                "solutionTags": [],
                "code": "    int lengthOfLastWord(char* s) {\\n    int last_len= 0;\\n    while (*s) {\\n        while (*s==' ') ++s; // skip spaces\\n        if (*s) {   \\n            last_len=0; // new word, reset last word length\\n            while (*s && *s !=' ') { ++s; ++last_len; }\\n        }\\n    }\\n    return last_len;\\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 4074061,
                "title": "c-easy-to-understand-100-beats",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count=0;\\n        bool flag= false;\\n        for(int i=s.length()-1; i>=0; i--){\\n            if(s[i]>=\\'a\\' && s[i]<=\\'z\\' || s[i]>=\\'A\\' && s[i]<=\\'Z\\'){\\n                flag= true;\\n                count++;\\n            }else{\\n                if(flag==true)\\n                    return count;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count=0;\\n        bool flag= false;\\n        for(int i=s.length()-1; i>=0; i--){\\n            if(s[i]>=\\'a\\' && s[i]<=\\'z\\' || s[i]>=\\'A\\' && s[i]<=\\'Z\\'){\\n                flag= true;\\n                count++;\\n            }else{\\n                if(flag==true)\\n                    return count;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3629944,
                "title": "java-simple-code-easy-understandable-100-beats",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- We can start iterating the characters of the string from the end and count the length of the last word.\\n- We skip any leading spaces and start counting when we encounter a non-space character.\\n- We stop counting when we encounter a space character after counting at least one non-space character.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Initialize two variables: ans to store the length of the last word and found to keep track of whether any non-space character has been found.\\n2. Iterate through the characters of the input string s in reverse order, starting from the last character.\\n3. If the current character is a space and no non-space character has been found yet (i.e., found == 0), continue to the next iteration.\\n4. If the current character is not a space, increment the ans variable to count the length of the last word and set found = 1 to indicate that a non-space character has been found.\\n5. If the current character is a space and at least one non-space character has been found, break the loop since we have counted the last word.\\n6.Finally, return the value of ans, which represents the length of the last word in the string\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int ans=0;\\n        int found=0;\\n        char gap=\\' \\';\\n        for(int i=s.length()-1;i>=0;i--){\\n            if(s.charAt(i)==gap && found==0){\\n                continue;\\n            }else if(s.charAt(i)!=gap){\\n                ans++;\\n                found++;\\n            }else{\\n                break;\\n            }\\n        }return ans;        \\n    }\\n}\\n```\\n\\n\\nGuys please upvote if you like the code and feel it worth!!",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int ans=0;\\n        int found=0;\\n        char gap=\\' \\';\\n        for(int i=s.length()-1;i>=0;i--){\\n            if(s.charAt(i)==gap && found==0){\\n                continue;\\n            }else if(s.charAt(i)!=gap){\\n                ans++;\\n                found++;\\n            }else{\\n                break;\\n            }\\n        }return ans;        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3513142,
                "title": "simple-java-solution-with-o-n-time-complexity-and-o-1-space-complexity",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int count = 0;\\n        boolean b = false;\\n        \\n        for(int i = s.length()-1;i>=0;i--){\\n            if(s.charAt(i) != \\' \\'){\\n                b = true;\\n                count++;\\n            }else{\\n                if(b){\\n                    return count;\\n                    }\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int count = 0;\\n        boolean b = false;\\n        \\n        for(int i = s.length()-1;i>=0;i--){\\n            if(s.charAt(i) != \\' \\'){\\n                b = true;\\n                count++;\\n            }else{\\n                if(b){\\n                    return count;\\n                    }\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3483883,
                "title": "simple-js-ts-hack",
                "content": "# Code\\n```\\nfunction lengthOfLastWord(s: string): number {\\n    const splitted = s.trim().split(\\' \\')\\n\\n    return splitted[splitted.length - 1].length\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript",
                    "String"
                ],
                "code": "```\\nfunction lengthOfLastWord(s: string): number {\\n    const splitted = s.trim().split(\\' \\')\\n\\n    return splitted[splitted.length - 1].length\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3397873,
                "title": "58-length-of-last-word-simple-easy",
                "content": "\\n# Code\\n```\\nint lengthOfLastWord(char * s){\\n    int len=strlen(s); \\n    int count=0;\\n    int i=len-1;\\n\\n    while(s[i]==\\' \\') i--;\\n    for(;i>=0;i--){\\n        if(s[i]==\\' \\')\\n            break;\\n        count++;\\n    }\\n    return count;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint lengthOfLastWord(char * s){\\n    int len=strlen(s); \\n    int count=0;\\n    int i=len-1;\\n\\n    while(s[i]==\\' \\') i--;\\n    for(;i>=0;i--){\\n        if(s[i]==\\' \\')\\n            break;\\n        count++;\\n    }\\n    return count;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3378227,
                "title": "c-solution-kindly-upvote-please",
                "content": "# *******APPROACH*******\\n2. 1. starting from the back of the string\\n2. declare a variable ans=0\\n3. start a for loop which starts with i being s.length()-1 and then keep decrementing till it becomes equal to 0\\n4. then two conditiond will be applied where if the s[i] is blank space and the ans>0 then return the ans\\n5. and if the s[i] is not equal to blank spac then add 1 to answer\\nreturn ans\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int ans =0;\\n        for(int i=s.size()-1;i>=0;i--){\\n          if(s[i]==\\' \\' && ans>0) break;\\n          if(s[i]!=\\' \\') ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int ans =0;\\n        for(int i=s.size()-1;i>=0;i--){\\n          if(s[i]==\\' \\' && ans>0) break;\\n          if(s[i]!=\\' \\') ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3374853,
                "title": "python3-o-n-using-loop-easy-93-beats",
                "content": "\\n\\n# Complexity\\n- Time complexity:\\no(n) 93% beats\\n\\n- Space complexity:\\n98% beats\\n\\n\\n# Code\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        l,n=0,0\\n        s+=\\' \\'\\n        for i in range(len(s)):\\n            if s[i]!=\\' \\':\\n                n+=1\\n            else:\\n                if n>0:\\n                    l=n   \\n                n=0\\n        return l         \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        l,n=0,0\\n        s+=\\' \\'\\n        for i in range(len(s)):\\n            if s[i]!=\\' \\':\\n                n+=1\\n            else:\\n                if n>0:\\n                    l=n   \\n                n=0\\n        return l         \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3183905,
                "title": "kotlin-simple-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    fun lengthOfLastWord(s: String) = s.split(\\' \\')\\n        .filter { it.isNotEmpty() }\\n        .last()\\n        .length\\n}\\n```",
                "solutionTags": [
                    "Kotlin",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    fun lengthOfLastWord(s: String) = s.split(\\' \\')\\n        .filter { it.isNotEmpty() }\\n        .last()\\n        .length\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3140751,
                "title": "c-easy",
                "content": "# Intuition\\nAs length of last word is asked , so we will traverse from the back and check for two conditions:\\n1. if we wncounter a space and count is greater than zero.\\nmeans , we have already traversed one word(last word). So break the loop and return count\\n2. if we encounter a space but count is still zero (base case 2). here we will continue as we haven\\'t found length of last word.\\n3. At last , return count\\n# Approach\\n--same as above--\\n# Complexity\\n- Time complexity:\\nO(n) ... where \\'n\\' is lenght of string\\n- Space complexity:\\nO(1)... as we haven\\'t used any additional DS here\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string string) {\\n        int n=string.size();\\n        int cnt=0;\\n        for(int i=n-1;i>=0;i--)\\n        {\\n            if (isspace(string.at(i)) && cnt>0) break;\\n            else\\n            {\\n                if (isspace(string.at(i)) && cnt==0) continue;\\n                else cnt++;\\n            }\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string string) {\\n        int n=string.size();\\n        int cnt=0;\\n        for(int i=n-1;i>=0;i--)\\n        {\\n            if (isspace(string.at(i)) && cnt>0) break;\\n            else\\n            {\\n                if (isspace(string.at(i)) && cnt==0) continue;\\n                else cnt++;\\n            }\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3070324,
                "title": "easiest-solution-c-with-0ms-beats-100-of-solutions",
                "content": "# Complexity\\n- Time complexity:\\n$O(n)$\\n\\n- Space complexity:\\n$O(n)$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int length=0, index=0;\\n        for(int i {(int)s.size()-1};i>=0;i--){\\n            if(isalpha(s[i])){\\n                index = i;\\n                break;\\n            }\\n        }\\n        for(int i = index; i>=0;i--){\\n            if(!isalpha(s[i])) break;\\n            length++;\\n        }\\n        return length;\\n    }\\n    \\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int length=0, index=0;\\n        for(int i {(int)s.size()-1};i>=0;i--){\\n            if(isalpha(s[i])){\\n                index = i;\\n                break;\\n            }\\n        }\\n        for(int i = index; i>=0;i--){\\n            if(!isalpha(s[i])) break;\\n            length++;\\n        }\\n        return length;\\n    }\\n    \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3046667,
                "title": "java-easy-and-simple-using-loop",
                "content": "![cat-kitten.gif](https://assets.leetcode.com/users/images/ed554976-6041-4c6b-9d1a-45069b7934e1_1673600851.7632859.gif)\\n\\n# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIntution should be always based on simple logical thinking ->\\n1. we can say every word is seperated by space [ \" \" ]\\n \\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n our approach is preety simple we are making a char array and traversing it form backward and thus we will get last word as first and then we will take it\\'s length \\n    \\n      but there is a catch we can get space at the last so we need to\\n      exactly detect the first word after reversing ..\\nso we use a flag to detect if we reached the first letter of our word.\\nwhen ever we get a first letter we make our flag ture otherwise it will be false \\n    \\n      intuitive right ? \\n# Complexity\\n- Time complexity:$$O(N)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(N)$$ as we have used an another array but it can be done without taking another array \\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Additionals\\n-  connect with me - https://linktr.ee/_soumya\\n\\n# Code\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        char[] arr=s.toCharArray();\\n        int len=0;\\n        boolean flag=false;\\n        for(int i=arr.length-1; i>=0;i--)\\n        {\\n           if(arr[i] != \\' \\' && flag != true)\\n           {\\n               flag= true;\\n           }\\n           if(flag && arr[i] != \\' \\') len++;\\n           else if (flag && arr[i] == \\' \\') break;\\n        }\\n        return len;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Interactive"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        char[] arr=s.toCharArray();\\n        int len=0;\\n        boolean flag=false;\\n        for(int i=arr.length-1; i>=0;i--)\\n        {\\n           if(arr[i] != \\' \\' && flag != true)\\n           {\\n               flag= true;\\n           }\\n           if(flag && arr[i] != \\' \\') len++;\\n           else if (flag && arr[i] == \\' \\') break;\\n        }\\n        return len;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3037636,
                "title": "2-line-approach-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        words = s.split()\\n        return len(words[-1])\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        words = s.split()\\n        return len(words[-1])\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2937890,
                "title": "1-liner-code-of-last-word-count-without-funtion",
                "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n       s= s.trim();\\n//         System.out.println(s);\\n       int sum=0;\\n       int i=s.length();\\n        while (i>0){\\n            if(s.charAt(i-1)!=\\' \\'){\\n                sum+=1;\\n                i--;\\n            }\\n           else break;\\n        }\\n        return sum;\\n       \\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n       s= s.trim();\\n//         System.out.println(s);\\n       int sum=0;\\n       int i=s.length();\\n        while (i>0){\\n            if(s.charAt(i-1)!=\\' \\'){\\n                sum+=1;\\n                i--;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2936214,
                "title": "javascript-one-liner",
                "content": "# Approach\\n\\nThis approach uses a simple series of chained functions. First I trimmed the input string which removes extra and trailing spaces. This is necessary so we don\\'t add empty strings to the array. I then split the string by single white space, moving the separated strings into an array. Then we simply return the length of the last string in the array. \\n\\n# Complexity\\n- Time complexity:\\nlinear (we need to loop through the input string)\\n\\n- Space complexity:\\nlinear (we are using an array to store the split strings which is (roughly) linearly related to the size of the input string)\\n\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLastWord = function(s) {\\n    return s.trim().split(\" \").at(-1).length;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLastWord = function(s) {\\n    return s.trim().split(\" \").at(-1).length;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2894610,
                "title": "no-functions-only-for-and-if",
                "content": "\\n# Code\\n```\\nclass Solution \\n{\\n    fun lengthOfLastWord(s: String): Int \\n    {\\n        val n=s.length-1\\n        var count=0\\n\\n        for(i in n downTo 0 )\\n        {\\n          if(s[i]!=\\' \\') count++\\n        \\n          if(s[i]==\\' \\' && count != 0) break\\n        }\\n            return count\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution \\n{\\n    fun lengthOfLastWord(s: String): Int \\n    {\\n        val n=s.length-1\\n        var count=0\\n\\n        for(i in n downTo 0 )\\n        {\\n          if(s[i]!=\\' \\') count++\\n        \\n          if(s[i]==\\' \\' && count != 0) break\\n        }\\n            return count\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2806703,
                "title": "c-easy-simple",
                "content": "```\\nint lengthOfLastWord(string s) {\\n\\t\\t//counts length of last word\\n        int count=0;          \\n\\t\\t//flag helps to understand when last word start and ends\\n        bool flag=false;\\n        for(int i=s.length()-1;i>=0;i--)\\n        {\\n            if(s[i]!=\\' \\')\\n            {\\n                flag=true;\\n                count++;\\n            }\\n            if(flag && s[i]==\\' \\')break;\\n        }\\n        return count;\\n    }\\n\\n```\\nUpvote if you like :)",
                "solutionTags": [],
                "code": "```\\nint lengthOfLastWord(string s) {\\n\\t\\t//counts length of last word\\n        int count=0;          \\n\\t\\t//flag helps to understand when last word start and ends\\n        bool flag=false;\\n        for(int i=s.length()-1;i>=0;i--)\\n        {\\n            if(s[i]!=\\' \\')\\n            {\\n                flag=true;\\n                count++;\\n            }\\n            if(flag && s[i]==\\' \\')break;\\n        }\\n        return count;\\n    }\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2787546,
                "title": "c-easiest-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int n = s.size();\\n        int count = 0;\\n        bool flag = 0;\\n        for(int i = n-1 ;i>=0;i--){\\n            if(s[i]!=\\' \\'){\\n            count++;\\n            flag = 1;\\n            }\\n           else {\\n               if(flag==1)\\n                   break;\\n         }\\n\\n        }\\n\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int n = s.size();\\n        int count = 0;\\n        bool flag = 0;\\n        for(int i = n-1 ;i>=0;i--){\\n            if(s[i]!=\\' \\'){\\n            count++;\\n            flag = 1;\\n            }\\n           else {\\n               if(flag==1)\\n                   break;\\n         }\\n\\n        }\\n\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2787545,
                "title": "very-very-easy-solution-in-cpp",
                "content": "\\n\\n# Complexity\\n- Time complexity:o(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:o(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int n=s.size();\\n        int c=0,f=0;\\n    for(int i=n-1;i>=0;i--)\\n    {\\n        if(s[i]!=\\' \\')\\n        {\\n         c++;\\n         f=1;\\n        }\\n        else if(f==1)\\n        break;\\n\\n    }\\n        return c;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int n=s.size();\\n        int c=0,f=0;\\n    for(int i=n-1;i>=0;i--)\\n    {\\n        if(s[i]!=\\' \\')\\n        {\\n         c++;\\n         f=1;\\n        }\\n        else if(f==1)\\n        break;\\n\\n    }\\n        return c;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2757355,
                "title": "java-easy-fast-and-beauty-100",
                "content": "All extra whitespace characters must be removed. Then, from the new line, we get its length and get the value of the index of the last space character.\\nWe subtract the index of the space character from the length and add minus 1. The last step will remove the space from the length.\\n```java\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        String trimmerString = s.trim();\\n\\n        return trimmerString.length() - trimmerString.lastIndexOf(\\' \\') - 1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```java\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        String trimmerString = s.trim();\\n\\n        return trimmerString.length() - trimmerString.lastIndexOf(\\' \\') - 1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2745253,
                "title": "c-solution-easy-to-understand",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nMaintaining a counter \\'sz\\' for finding the size of each word and updating it to 1 if a space followed by a character is encountered.\\n\\n# Complexity\\n- Time complexity:\\nO(lenght of string)\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int sz=0;\\n        char prev=\\'@\\';\\n        for (int i=0;i<s.size();i++){\\n            if (prev==\\' \\' && s[i]!=\\' \\') sz=1;\\n            else if (s[i]!=\\' \\') sz++;\\n            prev=s[i];\\n        }\\n        return sz;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int sz=0;\\n        char prev=\\'@\\';\\n        for (int i=0;i<s.size();i++){\\n            if (prev==\\' \\' && s[i]!=\\' \\') sz=1;\\n            else if (s[i]!=\\' \\') sz++;\\n            prev=s[i];\\n        }\\n        return sz;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2674142,
                "title": "100-faster-c-solution",
                "content": "**Upvote if it helps!**\\n```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int b=0,m=0;\\n        for(int i=s.length()-1; i>-1; i--) {\\n            if(isalpha(s[i])) {\\n                if(!b) b=1;\\n                m++;\\n            }\\n            if(b && s[i]==\\' \\') {\\n                break;\\n            }\\n        }\\n        return m;\\n    }\\n};\\n```\\n**Upvote if it helps!**",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int b=0,m=0;\\n        for(int i=s.length()-1; i>-1; i--) {\\n            if(isalpha(s[i])) {\\n                if(!b) b=1;\\n                m++;\\n            }\\n            if(b && s[i]==\\' \\') {\\n                break;\\n            }\\n        }\\n        return m;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2650319,
                "title": "simple-java-solution",
                "content": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int ans = 0;\\n        s = s.trim();//Trims the whitespaces present in the beginning and the end\\n        for (int i = s.length()-1; i >=0 ; i--) {\\n            if (s.charAt(i) != \\' \\') ans++;\\n            else break;\\n        }\\n        return ans;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        int ans = 0;\\n        s = s.trim();//Trims the whitespaces present in the beginning and the end\\n        for (int i = s.length()-1; i >=0 ; i--) {\\n            if (s.charAt(i) != \\' \\') ans++;\\n            else break;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2510092,
                "title": "simple-java-solution",
                "content": "```\\nclass Solution {\\n  public int lengthOfLastWord(String s) {\\n    int i = s.length() - 1;\\n\\n    while (i >= 0 && s.charAt(i) == \\' \\')\\n      i--;\\n    final int lastIndex = i;\\n    while (i >= 0 && s.charAt(i) != \\' \\')\\n      i--;\\n\\n    return lastIndex - i;\\n  }\\n}\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n  public int lengthOfLastWord(String s) {\\n    int i = s.length() - 1;\\n\\n    while (i >= 0 && s.charAt(i) == \\' \\')\\n      i--;\\n    final int lastIndex = i;\\n    while (i >= 0 && s.charAt(i) != \\' \\')\\n      i--;\\n\\n    return lastIndex - i;\\n  }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2499108,
                "title": "go-0ms-100-simple",
                "content": "1. Using `strings` package\\n```\\nfunc lengthOfLastWord(s string) int {\\n    str := strings.Fields(s) //tokenize\\n    return len(str[len(str)-1])\\n}\\n```\\n\\n2. Reverse Loop\\n\\n```\\nfunc lengthOfLastWord(s string) (res int) {\\n    i := len(s) - 1\\n    \\n    // Skip trailing space char if any\\n    for i >= 0 {\\n        if s[i] == \\' \\' {\\n            i--\\n            continue\\n        }\\n        break\\n    }\\n    \\n    // Search for end of word i.e space char\\n    for i >= 0 {\\n        if s[i] == \\' \\' {\\n            break\\n        }\\n        i--\\n        res++\\n    }\\n    \\n    return res\\n}\\n```\\n\\n",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc lengthOfLastWord(s string) int {\\n    str := strings.Fields(s) //tokenize\\n    return len(str[len(str)-1])\\n}\\n```\n```\\nfunc lengthOfLastWord(s string) (res int) {\\n    i := len(s) - 1\\n    \\n    // Skip trailing space char if any\\n    for i >= 0 {\\n        if s[i] == \\' \\' {\\n            i--\\n            continue\\n        }\\n        break\\n    }\\n    \\n    // Search for end of word i.e space char\\n    for i >= 0 {\\n        if s[i] == \\' \\' {\\n            break\\n        }\\n        i--\\n        res++\\n    }\\n    \\n    return res\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2399031,
                "title": "python",
                "content": "Runtime: 25 ms, faster than 57.09% of Python online submissions for Length of Last Word.\\nMemory Usage: 13.4 MB, less than 92.84% of Python online submissions for Length of Last Word.\\n\\n```\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        return len(s.strip().split(\\' \\')[-1])\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        return len(s.strip().split(\\' \\')[-1])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2383726,
                "title": "2-strings-of-code-java",
                "content": "```\\npublic int lengthOfLastWord(String s) {\\n\\tString[] words = s.split(\" \");\\n    return (words[words.length - 1]).length();\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int lengthOfLastWord(String s) {\\n\\tString[] words = s.split(\" \");\\n    return (words[words.length - 1]).length();\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2373737,
                "title": "one-liner-javascript-solution",
                "content": "```\\n\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLastWord = function(s) {\\n   return s.trim().split(\" \")[s.trim().split(\" \").length -1 ].length;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLastWord = function(s) {\\n   return s.trim().split(\" \")[s.trim().split(\" \").length -1 ].length;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2272069,
                "title": "c-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int n=s.length() ;\\n        int count=0 ;\\n        int c=0 ;\\n        if(n==1)\\n        {\\n            return 1 ;\\n        }\\n      while(s[n-1]==\\' \\')\\n      {\\n          count++ ;\\n          n-- ;\\n      }\\n        for(int i=n-1 ;i>=0 ;i--)\\n        {\\n            if(s[i]==\\' \\')\\n            {\\n                break ;\\n            }\\n            c++ ;\\n        }\\n        return c ;\\n         }\\n};\\n```\\n**Please upvote if it is helpful !!!!**",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int n=s.length() ;\\n        int count=0 ;\\n        int c=0 ;\\n        if(n==1)\\n        {\\n            return 1 ;\\n        }\\n      while(s[n-1]==\\' \\')\\n      {\\n          count++ ;\\n          n-- ;\\n      }\\n        for(int i=n-1 ;i>=0 ;i--)\\n        {\\n            if(s[i]==\\' \\')\\n            {\\n                break ;\\n            }\\n            c++ ;\\n        }\\n        return c ;\\n         }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2241010,
                "title": "c-beginner-friendly-solution-0ms-100-faster",
                "content": "class Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n\\t\\n        int i = s.length() - 1 , count = 0;\\n        while(s[i] == \\' \\')\\n\\t\\t\\ti--;\\n        \\n        while(i>=0 && s[i] != \\' \\'){  \\n\\t\\t\\tcount++;\\n\\t\\t\\ti--;\\n        }\\n            \\n        return count;\\n    }\\n};`****`",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n\\t\\n        int i = s.length() - 1 , count = 0;\\n        while(s[i] == \\' \\')\\n\\t\\t\\ti--;\\n        \\n        while(i>=0 && s[i] != \\' \\'){  \\n\\t\\t\\tcount++;\\n\\t\\t\\ti--;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1933549,
                "title": "solution-in-c",
                "content": "**Runtime: 0 ms, faster than 100.00% of C online submissions for Length of Last Word.\\nMemory Usage: 5.6 MB, less than 72.92% of C online submissions for Length of Last Word.**\\n```\\nint lengthOfLastWord(char * s){\\n    int length = 0,i=1;\\n    if(s[0]!=\\' \\')length++;\\n    while(s[i]!=\\'\\\\0\\'){\\n        if(s[i]!=\\' \\'){\\n            if(s[i-1]==\\' \\'){\\n                length = 1;\\n            }\\n            else{\\n                length++;\\n            }\\n        }\\n        i++;\\n    }\\n    return length;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint lengthOfLastWord(char * s){\\n    int length = 0,i=1;\\n    if(s[0]!=\\' \\')length++;\\n    while(s[i]!=\\'\\\\0\\'){\\n        if(s[i]!=\\' \\'){\\n            if(s[i-1]==\\' \\'){\\n                length = 1;\\n            }\\n            else{\\n                length++;\\n            }\\n        }\\n        i++;\\n    }\\n    return length;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1898435,
                "title": "100-faster-easy-solution-reverse-loop-traverse",
                "content": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int len = 0;\\n            for(int i=s.length()-1; i>=0; i--){\\n                    if(s.charAt(i) != \\' \\'){\\n                            len++;\\n                    }else if(len>0){\\n                            return len;\\n                    }\\n            }\\n            return len;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int len = 0;\\n            for(int i=s.length()-1; i>=0; i--){\\n                    if(s.charAt(i) != \\' \\'){\\n                            len++;\\n                    }else if(len>0){\\n                            return len;\\n                    }\\n            }\\n            return len;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1395871,
                "title": "javascript-typescript-98-faster-explained",
                "content": "Rather than the simple one-liner of `s.trim().split(\\' \\').pop().length` you can use much less resources and not split the string into an array at all...\\n\\n1. Get the length of the string\\n2. Set a `count` at 0\\n3. Run a while loop that will decrement `i` by one each interation to look through the string from back to front\\n\\t4. If we see a space...\\n\\t\\t5. ...and the count is still at zero then continue we have not gotten to the last word yet ...OR the count is not zero we have reached the end of the word and we need to break out of our while loop\\n\\t6. Else we see a charecter we can increment our counter as it is a charecter in the last word of the string\\n7. Finally return our counter\\n\\n```\\nfunction lengthOfLastWord(s: string): number {\\n  let i = s.length;\\n  let count = 0;\\n  \\n  while (i--) {\\n    if (s[i] === \\' \\') {\\n      if (count === 0) { continue; } else { break; }\\n    } else {\\n      count += 1;\\n    }\\n  }\\n  \\n  return count;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nfunction lengthOfLastWord(s: string): number {\\n  let i = s.length;\\n  let count = 0;\\n  \\n  while (i--) {\\n    if (s[i] === \\' \\') {\\n      if (count === 0) { continue; } else { break; }\\n    } else {\\n      count += 1;\\n    }\\n  }\\n  \\n  return count;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1166349,
                "title": "c-simple-logic-faster-than-100",
                "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count = 0;\\n        for(int i = s.length()-1; i >= 0; i--){\\n            if(s[i] == \\' \\' && count > 0){\\n                break;\\n            }\\n            if(s[i] != \\' \\')\\n                count++;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count = 0;\\n        for(int i = s.length()-1; i >= 0; i--){\\n            if(s[i] == \\' \\' && count > 0){\\n                break;\\n            }\\n            if(s[i] != \\' \\')\\n                count++;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 847514,
                "title": "simple-java-solution-with-explaination-and-without-in-built-function-0ms-100-faster-o-1-space",
                "content": "1. to save time start counting from right to left and as soon as space reaches break the loop and return count.\\n2. to avoid special case where string might end with space. just check if we have already started counting length (i.e character other then space has occurred) . if yes and space is found break the loop.\\n```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int length = 0;\\n        for(int i=s.length()-1;i>=0;i--) {\\n            if(s.charAt(i)==\\' \\') {\\n                if(length>0) {\\n                    break;                    \\n                }\\n            } else {\\n                length++;            \\n            }\\n        }\\n        return length;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int length = 0;\\n        for(int i=s.length()-1;i>=0;i--) {\\n            if(s.charAt(i)==\\' \\') {\\n                if(length>0) {\\n                    break;                    \\n                }\\n            } else {\\n                length++;            \\n            }\\n        }\\n        return length;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 798206,
                "title": "python-2-line-simplest-solution",
                "content": "```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        s = \" \".join(s.split())\\n        return 0 if len(s)==0 else len(s.split(\" \")[-1])\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        s = \" \".join(s.split())\\n        return 0 if len(s)==0 else len(s.split(\" \")[-1])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 628478,
                "title": "kotlin-very-simple-solution-1-loop-only-no-trim-no-split",
                "content": "```\\nclass Solution {\\n    fun lengthOfLastWord(s: String): Int {\\n        if (s.isEmpty()) return 0\\n        var i = s.length - 1\\n        var sum = 0\\n        while (i >= 0) {\\n            if (s[i] != \\' \\') sum++\\n            if (s[i] == \\' \\' && sum != 0) break\\n            i--\\n        }\\n        return sum\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun lengthOfLastWord(s: String): Int {\\n        if (s.isEmpty()) return 0\\n        var i = s.length - 1\\n        var sum = 0\\n        while (i >= 0) {\\n            if (s[i] != \\' \\') sum++\\n            if (s[i] == \\' \\' && sum != 0) break\\n            i--\\n        }\\n        return sum\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 476409,
                "title": "python3-20ms-faster-than-96-75-commented",
                "content": "```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n\\t\\t# Since we are going to search last word,\\n\\t\\t# it\\'s easier to work with reversed string\\n\\t\\t# We could just iterate from end in reverse order,\\n\\t\\t# but we want to use function find(\\' \\'), cause it\\'s going to be faster\\n        s = s[::-1]\\n\\t\\t\\n\\t\\t# Count how many spaces there are in the beginning of the reversed string\\n\\t\\t# This is going to be our `start` argument for find(\\' \\', start) function\\n        start = 0\\n        for c in s:\\n            if c != \\' \\':\\n                break\\n            start += 1\\n\\t\\t\\n\\t\\t# Search next whitespace after start position\\n        pos = s.find(\\' \\', start)\\n\\t\\t\\n        if pos < 0:\\n\\t\\t\\t# If we didn\\'t find whitespace anymore then:\\n\\t\\t\\t# 1) Either string consists only from whitespaces then start == len(s) and we return 0\\n\\t\\t\\t# 2) Last word is also a first word, so we return len(s) - start\\n            return len(s) - start if start < len(s) else 0\\n\\t\\t\\n\\t\\t# Otherwise return found position of whitespace - start position\\n        return pos - start\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n\\t\\t# Since we are going to search last word,\\n\\t\\t# it\\'s easier to work with reversed string\\n\\t\\t# We could just iterate from end in reverse order,\\n\\t\\t# but we want to use function find(\\' \\'), cause it\\'s going to be faster\\n        s = s[::-1]\\n\\t\\t\\n\\t\\t# Count how many spaces there are in the beginning of the reversed string\\n\\t\\t# This is going to be our `start` argument for find(\\' \\', start) function\\n        start = 0\\n        for c in s:\\n            if c != \\' \\':\\n                break\\n            start += 1\\n\\t\\t\\n\\t\\t# Search next whitespace after start position\\n        pos = s.find(\\' \\', start)\\n\\t\\t\\n        if pos < 0:\\n\\t\\t\\t# If we didn\\'t find whitespace anymore then:\\n\\t\\t\\t# 1) Either string consists only from whitespaces then start == len(s) and we return 0\\n\\t\\t\\t# 2) Last word is also a first word, so we return len(s) - start\\n            return len(s) - start if start < len(s) else 0\\n\\t\\t\\n\\t\\t# Otherwise return found position of whitespace - start position\\n        return pos - start\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1566430,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1674675,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1736793,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1564551,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1742686,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1654077,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1575675,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1569682,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1575875,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1574202,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1566430,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1674675,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1736793,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1564551,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1742686,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1654077,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1575675,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1569682,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1575875,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 1574202,
                "content": [
                    {
                        "username": "andrewrivada",
                        "content": "See One piece chapter 1043"
                    },
                    {
                        "username": "pavansai0813",
                        "content": "August 6th "
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Bro 1051 will be Fire.\\nJust wating for Next Sunday"
                    },
                    {
                        "username": "GorillaMunch",
                        "content": "NIKKAAAAAAAAAAAAAAAAAAAAA"
                    },
                    {
                        "username": "deleted_user",
                        "content": "[@Kuldeep97](/Kuldeep97) now watch 1047\\n"
                    },
                    {
                        "username": "Kuldeep97",
                        "content": "yeah now watch 1046 \\n"
                    },
                    {
                        "username": "deadinside1880",
                        "content": "Major one piece spoilers"
                    },
                    {
                        "username": "shaun_D_ace",
                        "content": "I didn\\'t expect to get spoiled by a f**king leetcode test case \\uD83D\\uDE02 "
                    },
                    {
                        "username": "leon9343",
                        "content": "nowhere is safe at this point"
                    },
                    {
                        "username": "agedboy",
                        "content": "This problem is not fun at all.\\n\\nYou spend 0.1% of the time on thinking of the algorithm, while 99.9% of the time on fighting against the ' ' and 'a' cases."
                    },
                    {
                        "username": "krishna3062018",
                        "content": "[@Sinan6942069](/Sinan6942069)  how do you solved it ? can you explain ? I am a beginner.\\n\\n"
                    },
                    {
                        "username": "nbosio1001",
                        "content": "[@Sinan6942069](/Sinan6942069) Did you use built-in functions or use pointers?"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "This problem is super simple, took me less than 5 minutes to solve and i am not even nearly a good coder."
                    },
                    {
                        "username": "jgialis",
                        "content": "lol, me currently stressed tf out cus i can\\'t figure this stupid \\'a\\' edge case out after 15 min\\n"
                    },
                    {
                        "username": "GeassAye",
                        "content": "Spoilers everywhere, even on leetcode lol"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "That\\'s a One Piece reference in the third test case \"luffy is still joyboy\" wow ! "
                    },
                    {
                        "username": "Manish033",
                        "content": "[@Preposterone](/Preposterone) what is one piece reference\\n"
                    },
                    {
                        "username": "Preposterone",
                        "content": "who cares"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/26a63f83-c2f1-45ba-b97b-9241acebcdd6_1629534159.5412827.png)\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "only works for python with its super unique built in function. man i just thinks of using python whenever I have a string problem"
                    },
                    {
                        "username": "ajithd78564",
                        "content": "class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.split()[-1])"
                    },
                    {
                        "username": "Kromydas",
                        "content": "i feel like in the first place ur not supposed to post this here....."
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@nbosio1001](/nbosio1001) could you elaborate, loops will just increase the runtime. At least that\\'s what i think. So if it can be avoided, I say go for it"
                    },
                    {
                        "username": "mukadas026",
                        "content": "[@jonathanferraro75](/jonathanferraro75)  Actually, split includes empty strings in the array it generates, but i tried using .trim() in js (same as  .strip()) but it didn\\'t work. Almost like the question prevented me from using it"
                    },
                    {
                        "username": "jonathanferraro75",
                        "content": "don\\'t need to .strip().\\nsplit() removes all the whitespace "
                    },
                    {
                        "username": "nbosio1001",
                        "content": "I feel like this solution doesn\\'t show your understanding of pointers and loops."
                    },
                    {
                        "username": "crazypuppy",
                        "content": "the description say that if the last word does not exist, return 0\\nand one of all test case is \"a \" \\nand the expected return 1 not 0\\nWhat is a stupid description"
                    },
                    {
                        "username": "alokmhn5",
                        "content": "a is the last word in that case"
                    },
                    {
                        "username": "bhuvanm424",
                        "content": "len(s.split()[-1])"
                    },
                    {
                        "username": "vlad_iliev",
                        "content": "[@ekibet](/ekibet) what do you mean \"not working\"? If you about array last element, use .at(-1)"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "[@ekibet](/ekibet) exactly because way of slicing is different in both languages"
                    },
                    {
                        "username": "ekibet",
                        "content": "I am wondering why this is not working for Javascript"
                    },
                    {
                        "username": "chacha_chowdhary",
                        "content": "That\\'s all. Just take it as a food for thought."
                    }
                ]
            },
            {
                "id": 2002393,
                "content": [
                    {
                        "username": "AnkitModak",
                        "content": "Example 3 made me happy.\\n"
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Today is 6-Aug-2023. \\nJoyBoy has Returned and Gear 5 Luffy has come."
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Where can I watch the episodes as I am not able to watch them on zoro anime. Also, I dont want to use telegram."
                    },
                    {
                        "username": "TajPotato",
                        "content": "This question contains spoiler, please approach with caution."
                    },
                    {
                        "username": "pavansai0813",
                        "content": "[@Manish033](/Manish033) \\nexample 3, its related to One Piece anime, this episode was released today."
                    },
                    {
                        "username": "Manish033",
                        "content": "what spoiler bro?"
                    },
                    {
                        "username": "Sanu000",
                        "content": "// c++  soln\\n// use bool flag\\n//all tsc passes\\n\\nint lengthOfLastWord(string s) {\\n       bool flag=false;\\n       int n=s.length();\\n       int count=0;\\n      \\n       for(int i=n-1; i>=0; i--){\\n        if(s[i]!=\\' \\' ){\\n            flag=true;\\n            count++;\\n        }else if(s[i]==\\' \\' && flag==true){\\n            break;\\n            \\n        }    \\n       }\\n       \\n           return count;\\n       \\n    }"
                    },
                    {
                        "username": "vmaryada",
                        "content": "var lengthOfLastWord = function(s) {\\n    var splitString = s.trim().split(\" \");\\n\\n return splitString[splitString.length-1].length;\\n};"
                    },
                    {
                        "username": "codingOz",
                        "content": "chill with the spoilers bro!!! I didn\\'t expect to get spoiled on leetcode of all places."
                    },
                    {
                        "username": "wagzap",
                        "content": "🎁 Since you want the __last__ word, it makes sense to look for it from the end of the string.\n🚀 Both for speed, and for a simpler solution.\nYou can:\n1. Find the largest position of a character that is allowed in a word (non-space).\n1. Decide what to do when there's no such position\n1. Find the smallest position of a character allowed in a word, going from the position found before.\n1. Calculate the length from those positions\n\nLinear time, but constant space, unlike the splitting approach.\nPiece of cake 🍰"
                    },
                    {
                        "username": "Mayank1020",
                        "content": "trim_right(s) and trim_left(s) functions are not working thus causing lot of trouble ."
                    },
                    {
                        "username": "Kirbie_ma",
                        "content": "`class Solution {\\n    public int lengthOfLastWord(String s) {\\n\\n        StringBuilder result = new StringBuilder();\\n        s = s.trim()\\n        int i = s.length()-1;\\n\\n        while(i < s.length() && i >= 0){\\n           if(s.charAt(i) == \\' \\')break;\\n           result.append(s.charAt(i));\\n           i--;\\n        }\\n        return result.toString().length();\\n    }\\n}`\\n \\nJava strings are immutable and as far as I understand trim() would return a copy of original, how am I able to assign result back to us and it is working??\\n"
                    },
                    {
                        "username": "anubhav9287",
                        "content": "len(s.strip().split()[-1])"
                    }
                ]
            },
            {
                "id": 2002398,
                "content": [
                    {
                        "username": "AnkitModak",
                        "content": "Example 3 made me happy.\\n"
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Today is 6-Aug-2023. \\nJoyBoy has Returned and Gear 5 Luffy has come."
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Where can I watch the episodes as I am not able to watch them on zoro anime. Also, I dont want to use telegram."
                    },
                    {
                        "username": "TajPotato",
                        "content": "This question contains spoiler, please approach with caution."
                    },
                    {
                        "username": "pavansai0813",
                        "content": "[@Manish033](/Manish033) \\nexample 3, its related to One Piece anime, this episode was released today."
                    },
                    {
                        "username": "Manish033",
                        "content": "what spoiler bro?"
                    },
                    {
                        "username": "Sanu000",
                        "content": "// c++  soln\\n// use bool flag\\n//all tsc passes\\n\\nint lengthOfLastWord(string s) {\\n       bool flag=false;\\n       int n=s.length();\\n       int count=0;\\n      \\n       for(int i=n-1; i>=0; i--){\\n        if(s[i]!=\\' \\' ){\\n            flag=true;\\n            count++;\\n        }else if(s[i]==\\' \\' && flag==true){\\n            break;\\n            \\n        }    \\n       }\\n       \\n           return count;\\n       \\n    }"
                    },
                    {
                        "username": "vmaryada",
                        "content": "var lengthOfLastWord = function(s) {\\n    var splitString = s.trim().split(\" \");\\n\\n return splitString[splitString.length-1].length;\\n};"
                    },
                    {
                        "username": "codingOz",
                        "content": "chill with the spoilers bro!!! I didn\\'t expect to get spoiled on leetcode of all places."
                    },
                    {
                        "username": "wagzap",
                        "content": "🎁 Since you want the __last__ word, it makes sense to look for it from the end of the string.\n🚀 Both for speed, and for a simpler solution.\nYou can:\n1. Find the largest position of a character that is allowed in a word (non-space).\n1. Decide what to do when there's no such position\n1. Find the smallest position of a character allowed in a word, going from the position found before.\n1. Calculate the length from those positions\n\nLinear time, but constant space, unlike the splitting approach.\nPiece of cake 🍰"
                    },
                    {
                        "username": "Mayank1020",
                        "content": "trim_right(s) and trim_left(s) functions are not working thus causing lot of trouble ."
                    },
                    {
                        "username": "Kirbie_ma",
                        "content": "`class Solution {\\n    public int lengthOfLastWord(String s) {\\n\\n        StringBuilder result = new StringBuilder();\\n        s = s.trim()\\n        int i = s.length()-1;\\n\\n        while(i < s.length() && i >= 0){\\n           if(s.charAt(i) == \\' \\')break;\\n           result.append(s.charAt(i));\\n           i--;\\n        }\\n        return result.toString().length();\\n    }\\n}`\\n \\nJava strings are immutable and as far as I understand trim() would return a copy of original, how am I able to assign result back to us and it is working??\\n"
                    },
                    {
                        "username": "anubhav9287",
                        "content": "len(s.strip().split()[-1])"
                    }
                ]
            },
            {
                "id": 1834926,
                "content": [
                    {
                        "username": "AnkitModak",
                        "content": "Example 3 made me happy.\\n"
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Today is 6-Aug-2023. \\nJoyBoy has Returned and Gear 5 Luffy has come."
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Where can I watch the episodes as I am not able to watch them on zoro anime. Also, I dont want to use telegram."
                    },
                    {
                        "username": "TajPotato",
                        "content": "This question contains spoiler, please approach with caution."
                    },
                    {
                        "username": "pavansai0813",
                        "content": "[@Manish033](/Manish033) \\nexample 3, its related to One Piece anime, this episode was released today."
                    },
                    {
                        "username": "Manish033",
                        "content": "what spoiler bro?"
                    },
                    {
                        "username": "Sanu000",
                        "content": "// c++  soln\\n// use bool flag\\n//all tsc passes\\n\\nint lengthOfLastWord(string s) {\\n       bool flag=false;\\n       int n=s.length();\\n       int count=0;\\n      \\n       for(int i=n-1; i>=0; i--){\\n        if(s[i]!=\\' \\' ){\\n            flag=true;\\n            count++;\\n        }else if(s[i]==\\' \\' && flag==true){\\n            break;\\n            \\n        }    \\n       }\\n       \\n           return count;\\n       \\n    }"
                    },
                    {
                        "username": "vmaryada",
                        "content": "var lengthOfLastWord = function(s) {\\n    var splitString = s.trim().split(\" \");\\n\\n return splitString[splitString.length-1].length;\\n};"
                    },
                    {
                        "username": "codingOz",
                        "content": "chill with the spoilers bro!!! I didn\\'t expect to get spoiled on leetcode of all places."
                    },
                    {
                        "username": "wagzap",
                        "content": "🎁 Since you want the __last__ word, it makes sense to look for it from the end of the string.\n🚀 Both for speed, and for a simpler solution.\nYou can:\n1. Find the largest position of a character that is allowed in a word (non-space).\n1. Decide what to do when there's no such position\n1. Find the smallest position of a character allowed in a word, going from the position found before.\n1. Calculate the length from those positions\n\nLinear time, but constant space, unlike the splitting approach.\nPiece of cake 🍰"
                    },
                    {
                        "username": "Mayank1020",
                        "content": "trim_right(s) and trim_left(s) functions are not working thus causing lot of trouble ."
                    },
                    {
                        "username": "Kirbie_ma",
                        "content": "`class Solution {\\n    public int lengthOfLastWord(String s) {\\n\\n        StringBuilder result = new StringBuilder();\\n        s = s.trim()\\n        int i = s.length()-1;\\n\\n        while(i < s.length() && i >= 0){\\n           if(s.charAt(i) == \\' \\')break;\\n           result.append(s.charAt(i));\\n           i--;\\n        }\\n        return result.toString().length();\\n    }\\n}`\\n \\nJava strings are immutable and as far as I understand trim() would return a copy of original, how am I able to assign result back to us and it is working??\\n"
                    },
                    {
                        "username": "anubhav9287",
                        "content": "len(s.strip().split()[-1])"
                    }
                ]
            },
            {
                "id": 1722641,
                "content": [
                    {
                        "username": "AnkitModak",
                        "content": "Example 3 made me happy.\\n"
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Today is 6-Aug-2023. \\nJoyBoy has Returned and Gear 5 Luffy has come."
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Where can I watch the episodes as I am not able to watch them on zoro anime. Also, I dont want to use telegram."
                    },
                    {
                        "username": "TajPotato",
                        "content": "This question contains spoiler, please approach with caution."
                    },
                    {
                        "username": "pavansai0813",
                        "content": "[@Manish033](/Manish033) \\nexample 3, its related to One Piece anime, this episode was released today."
                    },
                    {
                        "username": "Manish033",
                        "content": "what spoiler bro?"
                    },
                    {
                        "username": "Sanu000",
                        "content": "// c++  soln\\n// use bool flag\\n//all tsc passes\\n\\nint lengthOfLastWord(string s) {\\n       bool flag=false;\\n       int n=s.length();\\n       int count=0;\\n      \\n       for(int i=n-1; i>=0; i--){\\n        if(s[i]!=\\' \\' ){\\n            flag=true;\\n            count++;\\n        }else if(s[i]==\\' \\' && flag==true){\\n            break;\\n            \\n        }    \\n       }\\n       \\n           return count;\\n       \\n    }"
                    },
                    {
                        "username": "vmaryada",
                        "content": "var lengthOfLastWord = function(s) {\\n    var splitString = s.trim().split(\" \");\\n\\n return splitString[splitString.length-1].length;\\n};"
                    },
                    {
                        "username": "codingOz",
                        "content": "chill with the spoilers bro!!! I didn\\'t expect to get spoiled on leetcode of all places."
                    },
                    {
                        "username": "wagzap",
                        "content": "🎁 Since you want the __last__ word, it makes sense to look for it from the end of the string.\n🚀 Both for speed, and for a simpler solution.\nYou can:\n1. Find the largest position of a character that is allowed in a word (non-space).\n1. Decide what to do when there's no such position\n1. Find the smallest position of a character allowed in a word, going from the position found before.\n1. Calculate the length from those positions\n\nLinear time, but constant space, unlike the splitting approach.\nPiece of cake 🍰"
                    },
                    {
                        "username": "Mayank1020",
                        "content": "trim_right(s) and trim_left(s) functions are not working thus causing lot of trouble ."
                    },
                    {
                        "username": "Kirbie_ma",
                        "content": "`class Solution {\\n    public int lengthOfLastWord(String s) {\\n\\n        StringBuilder result = new StringBuilder();\\n        s = s.trim()\\n        int i = s.length()-1;\\n\\n        while(i < s.length() && i >= 0){\\n           if(s.charAt(i) == \\' \\')break;\\n           result.append(s.charAt(i));\\n           i--;\\n        }\\n        return result.toString().length();\\n    }\\n}`\\n \\nJava strings are immutable and as far as I understand trim() would return a copy of original, how am I able to assign result back to us and it is working??\\n"
                    },
                    {
                        "username": "anubhav9287",
                        "content": "len(s.strip().split()[-1])"
                    }
                ]
            },
            {
                "id": 1575041,
                "content": [
                    {
                        "username": "AnkitModak",
                        "content": "Example 3 made me happy.\\n"
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Today is 6-Aug-2023. \\nJoyBoy has Returned and Gear 5 Luffy has come."
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Where can I watch the episodes as I am not able to watch them on zoro anime. Also, I dont want to use telegram."
                    },
                    {
                        "username": "TajPotato",
                        "content": "This question contains spoiler, please approach with caution."
                    },
                    {
                        "username": "pavansai0813",
                        "content": "[@Manish033](/Manish033) \\nexample 3, its related to One Piece anime, this episode was released today."
                    },
                    {
                        "username": "Manish033",
                        "content": "what spoiler bro?"
                    },
                    {
                        "username": "Sanu000",
                        "content": "// c++  soln\\n// use bool flag\\n//all tsc passes\\n\\nint lengthOfLastWord(string s) {\\n       bool flag=false;\\n       int n=s.length();\\n       int count=0;\\n      \\n       for(int i=n-1; i>=0; i--){\\n        if(s[i]!=\\' \\' ){\\n            flag=true;\\n            count++;\\n        }else if(s[i]==\\' \\' && flag==true){\\n            break;\\n            \\n        }    \\n       }\\n       \\n           return count;\\n       \\n    }"
                    },
                    {
                        "username": "vmaryada",
                        "content": "var lengthOfLastWord = function(s) {\\n    var splitString = s.trim().split(\" \");\\n\\n return splitString[splitString.length-1].length;\\n};"
                    },
                    {
                        "username": "codingOz",
                        "content": "chill with the spoilers bro!!! I didn\\'t expect to get spoiled on leetcode of all places."
                    },
                    {
                        "username": "wagzap",
                        "content": "🎁 Since you want the __last__ word, it makes sense to look for it from the end of the string.\n🚀 Both for speed, and for a simpler solution.\nYou can:\n1. Find the largest position of a character that is allowed in a word (non-space).\n1. Decide what to do when there's no such position\n1. Find the smallest position of a character allowed in a word, going from the position found before.\n1. Calculate the length from those positions\n\nLinear time, but constant space, unlike the splitting approach.\nPiece of cake 🍰"
                    },
                    {
                        "username": "Mayank1020",
                        "content": "trim_right(s) and trim_left(s) functions are not working thus causing lot of trouble ."
                    },
                    {
                        "username": "Kirbie_ma",
                        "content": "`class Solution {\\n    public int lengthOfLastWord(String s) {\\n\\n        StringBuilder result = new StringBuilder();\\n        s = s.trim()\\n        int i = s.length()-1;\\n\\n        while(i < s.length() && i >= 0){\\n           if(s.charAt(i) == \\' \\')break;\\n           result.append(s.charAt(i));\\n           i--;\\n        }\\n        return result.toString().length();\\n    }\\n}`\\n \\nJava strings are immutable and as far as I understand trim() would return a copy of original, how am I able to assign result back to us and it is working??\\n"
                    },
                    {
                        "username": "anubhav9287",
                        "content": "len(s.strip().split()[-1])"
                    }
                ]
            },
            {
                "id": 1861695,
                "content": [
                    {
                        "username": "AnkitModak",
                        "content": "Example 3 made me happy.\\n"
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Today is 6-Aug-2023. \\nJoyBoy has Returned and Gear 5 Luffy has come."
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Where can I watch the episodes as I am not able to watch them on zoro anime. Also, I dont want to use telegram."
                    },
                    {
                        "username": "TajPotato",
                        "content": "This question contains spoiler, please approach with caution."
                    },
                    {
                        "username": "pavansai0813",
                        "content": "[@Manish033](/Manish033) \\nexample 3, its related to One Piece anime, this episode was released today."
                    },
                    {
                        "username": "Manish033",
                        "content": "what spoiler bro?"
                    },
                    {
                        "username": "Sanu000",
                        "content": "// c++  soln\\n// use bool flag\\n//all tsc passes\\n\\nint lengthOfLastWord(string s) {\\n       bool flag=false;\\n       int n=s.length();\\n       int count=0;\\n      \\n       for(int i=n-1; i>=0; i--){\\n        if(s[i]!=\\' \\' ){\\n            flag=true;\\n            count++;\\n        }else if(s[i]==\\' \\' && flag==true){\\n            break;\\n            \\n        }    \\n       }\\n       \\n           return count;\\n       \\n    }"
                    },
                    {
                        "username": "vmaryada",
                        "content": "var lengthOfLastWord = function(s) {\\n    var splitString = s.trim().split(\" \");\\n\\n return splitString[splitString.length-1].length;\\n};"
                    },
                    {
                        "username": "codingOz",
                        "content": "chill with the spoilers bro!!! I didn\\'t expect to get spoiled on leetcode of all places."
                    },
                    {
                        "username": "wagzap",
                        "content": "🎁 Since you want the __last__ word, it makes sense to look for it from the end of the string.\n🚀 Both for speed, and for a simpler solution.\nYou can:\n1. Find the largest position of a character that is allowed in a word (non-space).\n1. Decide what to do when there's no such position\n1. Find the smallest position of a character allowed in a word, going from the position found before.\n1. Calculate the length from those positions\n\nLinear time, but constant space, unlike the splitting approach.\nPiece of cake 🍰"
                    },
                    {
                        "username": "Mayank1020",
                        "content": "trim_right(s) and trim_left(s) functions are not working thus causing lot of trouble ."
                    },
                    {
                        "username": "Kirbie_ma",
                        "content": "`class Solution {\\n    public int lengthOfLastWord(String s) {\\n\\n        StringBuilder result = new StringBuilder();\\n        s = s.trim()\\n        int i = s.length()-1;\\n\\n        while(i < s.length() && i >= 0){\\n           if(s.charAt(i) == \\' \\')break;\\n           result.append(s.charAt(i));\\n           i--;\\n        }\\n        return result.toString().length();\\n    }\\n}`\\n \\nJava strings are immutable and as far as I understand trim() would return a copy of original, how am I able to assign result back to us and it is working??\\n"
                    },
                    {
                        "username": "anubhav9287",
                        "content": "len(s.strip().split()[-1])"
                    }
                ]
            },
            {
                "id": 1793568,
                "content": [
                    {
                        "username": "AnkitModak",
                        "content": "Example 3 made me happy.\\n"
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Today is 6-Aug-2023. \\nJoyBoy has Returned and Gear 5 Luffy has come."
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Where can I watch the episodes as I am not able to watch them on zoro anime. Also, I dont want to use telegram."
                    },
                    {
                        "username": "TajPotato",
                        "content": "This question contains spoiler, please approach with caution."
                    },
                    {
                        "username": "pavansai0813",
                        "content": "[@Manish033](/Manish033) \\nexample 3, its related to One Piece anime, this episode was released today."
                    },
                    {
                        "username": "Manish033",
                        "content": "what spoiler bro?"
                    },
                    {
                        "username": "Sanu000",
                        "content": "// c++  soln\\n// use bool flag\\n//all tsc passes\\n\\nint lengthOfLastWord(string s) {\\n       bool flag=false;\\n       int n=s.length();\\n       int count=0;\\n      \\n       for(int i=n-1; i>=0; i--){\\n        if(s[i]!=\\' \\' ){\\n            flag=true;\\n            count++;\\n        }else if(s[i]==\\' \\' && flag==true){\\n            break;\\n            \\n        }    \\n       }\\n       \\n           return count;\\n       \\n    }"
                    },
                    {
                        "username": "vmaryada",
                        "content": "var lengthOfLastWord = function(s) {\\n    var splitString = s.trim().split(\" \");\\n\\n return splitString[splitString.length-1].length;\\n};"
                    },
                    {
                        "username": "codingOz",
                        "content": "chill with the spoilers bro!!! I didn\\'t expect to get spoiled on leetcode of all places."
                    },
                    {
                        "username": "wagzap",
                        "content": "🎁 Since you want the __last__ word, it makes sense to look for it from the end of the string.\n🚀 Both for speed, and for a simpler solution.\nYou can:\n1. Find the largest position of a character that is allowed in a word (non-space).\n1. Decide what to do when there's no such position\n1. Find the smallest position of a character allowed in a word, going from the position found before.\n1. Calculate the length from those positions\n\nLinear time, but constant space, unlike the splitting approach.\nPiece of cake 🍰"
                    },
                    {
                        "username": "Mayank1020",
                        "content": "trim_right(s) and trim_left(s) functions are not working thus causing lot of trouble ."
                    },
                    {
                        "username": "Kirbie_ma",
                        "content": "`class Solution {\\n    public int lengthOfLastWord(String s) {\\n\\n        StringBuilder result = new StringBuilder();\\n        s = s.trim()\\n        int i = s.length()-1;\\n\\n        while(i < s.length() && i >= 0){\\n           if(s.charAt(i) == \\' \\')break;\\n           result.append(s.charAt(i));\\n           i--;\\n        }\\n        return result.toString().length();\\n    }\\n}`\\n \\nJava strings are immutable and as far as I understand trim() would return a copy of original, how am I able to assign result back to us and it is working??\\n"
                    },
                    {
                        "username": "anubhav9287",
                        "content": "len(s.strip().split()[-1])"
                    }
                ]
            },
            {
                "id": 1774472,
                "content": [
                    {
                        "username": "AnkitModak",
                        "content": "Example 3 made me happy.\\n"
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Today is 6-Aug-2023. \\nJoyBoy has Returned and Gear 5 Luffy has come."
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Where can I watch the episodes as I am not able to watch them on zoro anime. Also, I dont want to use telegram."
                    },
                    {
                        "username": "TajPotato",
                        "content": "This question contains spoiler, please approach with caution."
                    },
                    {
                        "username": "pavansai0813",
                        "content": "[@Manish033](/Manish033) \\nexample 3, its related to One Piece anime, this episode was released today."
                    },
                    {
                        "username": "Manish033",
                        "content": "what spoiler bro?"
                    },
                    {
                        "username": "Sanu000",
                        "content": "// c++  soln\\n// use bool flag\\n//all tsc passes\\n\\nint lengthOfLastWord(string s) {\\n       bool flag=false;\\n       int n=s.length();\\n       int count=0;\\n      \\n       for(int i=n-1; i>=0; i--){\\n        if(s[i]!=\\' \\' ){\\n            flag=true;\\n            count++;\\n        }else if(s[i]==\\' \\' && flag==true){\\n            break;\\n            \\n        }    \\n       }\\n       \\n           return count;\\n       \\n    }"
                    },
                    {
                        "username": "vmaryada",
                        "content": "var lengthOfLastWord = function(s) {\\n    var splitString = s.trim().split(\" \");\\n\\n return splitString[splitString.length-1].length;\\n};"
                    },
                    {
                        "username": "codingOz",
                        "content": "chill with the spoilers bro!!! I didn\\'t expect to get spoiled on leetcode of all places."
                    },
                    {
                        "username": "wagzap",
                        "content": "🎁 Since you want the __last__ word, it makes sense to look for it from the end of the string.\n🚀 Both for speed, and for a simpler solution.\nYou can:\n1. Find the largest position of a character that is allowed in a word (non-space).\n1. Decide what to do when there's no such position\n1. Find the smallest position of a character allowed in a word, going from the position found before.\n1. Calculate the length from those positions\n\nLinear time, but constant space, unlike the splitting approach.\nPiece of cake 🍰"
                    },
                    {
                        "username": "Mayank1020",
                        "content": "trim_right(s) and trim_left(s) functions are not working thus causing lot of trouble ."
                    },
                    {
                        "username": "Kirbie_ma",
                        "content": "`class Solution {\\n    public int lengthOfLastWord(String s) {\\n\\n        StringBuilder result = new StringBuilder();\\n        s = s.trim()\\n        int i = s.length()-1;\\n\\n        while(i < s.length() && i >= 0){\\n           if(s.charAt(i) == \\' \\')break;\\n           result.append(s.charAt(i));\\n           i--;\\n        }\\n        return result.toString().length();\\n    }\\n}`\\n \\nJava strings are immutable and as far as I understand trim() would return a copy of original, how am I able to assign result back to us and it is working??\\n"
                    },
                    {
                        "username": "anubhav9287",
                        "content": "len(s.strip().split()[-1])"
                    }
                ]
            },
            {
                "id": 1744888,
                "content": [
                    {
                        "username": "AnkitModak",
                        "content": "Example 3 made me happy.\\n"
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Today is 6-Aug-2023. \\nJoyBoy has Returned and Gear 5 Luffy has come."
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Where can I watch the episodes as I am not able to watch them on zoro anime. Also, I dont want to use telegram."
                    },
                    {
                        "username": "TajPotato",
                        "content": "This question contains spoiler, please approach with caution."
                    },
                    {
                        "username": "pavansai0813",
                        "content": "[@Manish033](/Manish033) \\nexample 3, its related to One Piece anime, this episode was released today."
                    },
                    {
                        "username": "Manish033",
                        "content": "what spoiler bro?"
                    },
                    {
                        "username": "Sanu000",
                        "content": "// c++  soln\\n// use bool flag\\n//all tsc passes\\n\\nint lengthOfLastWord(string s) {\\n       bool flag=false;\\n       int n=s.length();\\n       int count=0;\\n      \\n       for(int i=n-1; i>=0; i--){\\n        if(s[i]!=\\' \\' ){\\n            flag=true;\\n            count++;\\n        }else if(s[i]==\\' \\' && flag==true){\\n            break;\\n            \\n        }    \\n       }\\n       \\n           return count;\\n       \\n    }"
                    },
                    {
                        "username": "vmaryada",
                        "content": "var lengthOfLastWord = function(s) {\\n    var splitString = s.trim().split(\" \");\\n\\n return splitString[splitString.length-1].length;\\n};"
                    },
                    {
                        "username": "codingOz",
                        "content": "chill with the spoilers bro!!! I didn\\'t expect to get spoiled on leetcode of all places."
                    },
                    {
                        "username": "wagzap",
                        "content": "🎁 Since you want the __last__ word, it makes sense to look for it from the end of the string.\n🚀 Both for speed, and for a simpler solution.\nYou can:\n1. Find the largest position of a character that is allowed in a word (non-space).\n1. Decide what to do when there's no such position\n1. Find the smallest position of a character allowed in a word, going from the position found before.\n1. Calculate the length from those positions\n\nLinear time, but constant space, unlike the splitting approach.\nPiece of cake 🍰"
                    },
                    {
                        "username": "Mayank1020",
                        "content": "trim_right(s) and trim_left(s) functions are not working thus causing lot of trouble ."
                    },
                    {
                        "username": "Kirbie_ma",
                        "content": "`class Solution {\\n    public int lengthOfLastWord(String s) {\\n\\n        StringBuilder result = new StringBuilder();\\n        s = s.trim()\\n        int i = s.length()-1;\\n\\n        while(i < s.length() && i >= 0){\\n           if(s.charAt(i) == \\' \\')break;\\n           result.append(s.charAt(i));\\n           i--;\\n        }\\n        return result.toString().length();\\n    }\\n}`\\n \\nJava strings are immutable and as far as I understand trim() would return a copy of original, how am I able to assign result back to us and it is working??\\n"
                    },
                    {
                        "username": "anubhav9287",
                        "content": "len(s.strip().split()[-1])"
                    }
                ]
            },
            {
                "id": 1575977,
                "content": [
                    {
                        "username": "AnkitModak",
                        "content": "Example 3 made me happy.\\n"
                    },
                    {
                        "username": "Gauravkr007",
                        "content": "Today is 6-Aug-2023. \\nJoyBoy has Returned and Gear 5 Luffy has come."
                    },
                    {
                        "username": "AnkitModak",
                        "content": "Where can I watch the episodes as I am not able to watch them on zoro anime. Also, I dont want to use telegram."
                    },
                    {
                        "username": "TajPotato",
                        "content": "This question contains spoiler, please approach with caution."
                    },
                    {
                        "username": "pavansai0813",
                        "content": "[@Manish033](/Manish033) \\nexample 3, its related to One Piece anime, this episode was released today."
                    },
                    {
                        "username": "Manish033",
                        "content": "what spoiler bro?"
                    },
                    {
                        "username": "Sanu000",
                        "content": "// c++  soln\\n// use bool flag\\n//all tsc passes\\n\\nint lengthOfLastWord(string s) {\\n       bool flag=false;\\n       int n=s.length();\\n       int count=0;\\n      \\n       for(int i=n-1; i>=0; i--){\\n        if(s[i]!=\\' \\' ){\\n            flag=true;\\n            count++;\\n        }else if(s[i]==\\' \\' && flag==true){\\n            break;\\n            \\n        }    \\n       }\\n       \\n           return count;\\n       \\n    }"
                    },
                    {
                        "username": "vmaryada",
                        "content": "var lengthOfLastWord = function(s) {\\n    var splitString = s.trim().split(\" \");\\n\\n return splitString[splitString.length-1].length;\\n};"
                    },
                    {
                        "username": "codingOz",
                        "content": "chill with the spoilers bro!!! I didn\\'t expect to get spoiled on leetcode of all places."
                    },
                    {
                        "username": "wagzap",
                        "content": "🎁 Since you want the __last__ word, it makes sense to look for it from the end of the string.\n🚀 Both for speed, and for a simpler solution.\nYou can:\n1. Find the largest position of a character that is allowed in a word (non-space).\n1. Decide what to do when there's no such position\n1. Find the smallest position of a character allowed in a word, going from the position found before.\n1. Calculate the length from those positions\n\nLinear time, but constant space, unlike the splitting approach.\nPiece of cake 🍰"
                    },
                    {
                        "username": "Mayank1020",
                        "content": "trim_right(s) and trim_left(s) functions are not working thus causing lot of trouble ."
                    },
                    {
                        "username": "Kirbie_ma",
                        "content": "`class Solution {\\n    public int lengthOfLastWord(String s) {\\n\\n        StringBuilder result = new StringBuilder();\\n        s = s.trim()\\n        int i = s.length()-1;\\n\\n        while(i < s.length() && i >= 0){\\n           if(s.charAt(i) == \\' \\')break;\\n           result.append(s.charAt(i));\\n           i--;\\n        }\\n        return result.toString().length();\\n    }\\n}`\\n \\nJava strings are immutable and as far as I understand trim() would return a copy of original, how am I able to assign result back to us and it is working??\\n"
                    },
                    {
                        "username": "anubhav9287",
                        "content": "len(s.strip().split()[-1])"
                    }
                ]
            },
            {
                "id": 1574403,
                "content": [
                    {
                        "username": "greenlogan",
                        "content": "return len(s.strip().split(\" \")[-1])"
                    },
                    {
                        "username": "simonnchong",
                        "content": "you don\\'t need the strip() actually, split() will split the word only without the space contains in it"
                    },
                    {
                        "username": "shubhamparad19",
                        "content": "Today is the day, everyone heard the drums of liberation. Joyboy has returned\\uD83E\\uDD0D"
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nreturn len(s.split()[-1])\\n```"
                    },
                    {
                        "username": "varshini-S",
                        "content": "why can't we just reverse the string and count the character till the whitespace arrives?\nclear my doubt, please."
                    },
                    {
                        "username": "HarshitUpadhyay",
                        "content": "We can\\'t do this because we have some string which contains whitespace at first like \"   fly me   to   the moon  \" this gives 0 as result "
                    },
                    {
                        "username": "wagzap",
                        "content": "And splitting the string between spaces and taking the length of the last piece works too. \\nIt just takes more time to go through the whole string to split it \\u23F3\\nAnd more space for each piece of the string, as much as the input \\u27BF"
                    },
                    {
                        "username": "wagzap",
                        "content": "We can do that.\n💡And we can do better. 💡\n\nIf we reverse the string ⏭ and only then count the consecutive word characters from the front 0️⃣1️⃣2️⃣... , we always go through the __entire__ string, no matter how short the last word is.\nAnd we use up memory for the reversed string, if the language has immutable strings.\n\nBut if we just go from the end to the first word character ◀, then we count consecutive word characters 0️⃣1️⃣2️⃣... , we only go through `suffix_spaces + last_word_length` characters.\n\nHere's an imperfect analogy.\nThe first approach is like going through an entire book from the first to the last page, to find the last chapter. While also putting the sheets in reverse order.\n\nWhile the second one is like going through the book from the last page towards the beginning.\n\nIn practice, the second approach is faster, and uses at most the same amount of memory, probably less.\n\nEspecially when the input text is human language, where the text length might be much longer than the last word,\nso the last word is much closer to the end than to the beginning.\n"
                    },
                    {
                        "username": "sifatfahimul",
                        "content": "first count the empty space of the string from last index.\nthen minus the space count form string and count charter from last. and return charter count."
                    },
                    {
                        "username": "MengjieQian",
                        "content": "s = \\'hello world \\'\\ns.split()  # [\\'hello, \\'world\\']\\ns.plit(\\' \\') # [\\'hello\\', \\'world\\', \\' \\']"
                    },
                    {
                        "username": "arjunvasu",
                        "content": "I am trying to submit a solution and it says \"String is not declared in this scope\" compilation error.\\ncan anyone please assist on this.\\n\\nthanks."
                    },
                    {
                        "username": "haoyangfan",
                        "content": "I am confused by the time complexity of this question, should it be `O(1)` or `O(n)`?\\n\\nFor most of solutions I\\'ve seen for this problem, they use some language build-in methods such as `trim`, `lastIndexOf` or `split`. Although the solution code itself does not scan through the entire string, if those methods that the solution relies on internally will traverse through the string, will that also make those solutions actually be `O(n)` time complexity?"
                    },
                    {
                        "username": "aakash_chandhoke",
                        "content": "Isnt the solution set ambiguous as for this input the output should be zero but here it is giving 1 \n\n**INPUT**- \"a \"\n**OUTPUT**- 1\n\nAs the space is comming after the character nd after the space there is no word so output should be zero i guess..\nPlease correct me if i am wrong."
                    },
                    {
                        "username": "gilgoliada",
                        "content": "What are the chances my friend will see this leetcode question the day after he started watching one piece?"
                    }
                ]
            },
            {
                "id": 2002810,
                "content": [
                    {
                        "username": "greenlogan",
                        "content": "return len(s.strip().split(\" \")[-1])"
                    },
                    {
                        "username": "simonnchong",
                        "content": "you don\\'t need the strip() actually, split() will split the word only without the space contains in it"
                    },
                    {
                        "username": "shubhamparad19",
                        "content": "Today is the day, everyone heard the drums of liberation. Joyboy has returned\\uD83E\\uDD0D"
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nreturn len(s.split()[-1])\\n```"
                    },
                    {
                        "username": "varshini-S",
                        "content": "why can't we just reverse the string and count the character till the whitespace arrives?\nclear my doubt, please."
                    },
                    {
                        "username": "HarshitUpadhyay",
                        "content": "We can\\'t do this because we have some string which contains whitespace at first like \"   fly me   to   the moon  \" this gives 0 as result "
                    },
                    {
                        "username": "wagzap",
                        "content": "And splitting the string between spaces and taking the length of the last piece works too. \\nIt just takes more time to go through the whole string to split it \\u23F3\\nAnd more space for each piece of the string, as much as the input \\u27BF"
                    },
                    {
                        "username": "wagzap",
                        "content": "We can do that.\n💡And we can do better. 💡\n\nIf we reverse the string ⏭ and only then count the consecutive word characters from the front 0️⃣1️⃣2️⃣... , we always go through the __entire__ string, no matter how short the last word is.\nAnd we use up memory for the reversed string, if the language has immutable strings.\n\nBut if we just go from the end to the first word character ◀, then we count consecutive word characters 0️⃣1️⃣2️⃣... , we only go through `suffix_spaces + last_word_length` characters.\n\nHere's an imperfect analogy.\nThe first approach is like going through an entire book from the first to the last page, to find the last chapter. While also putting the sheets in reverse order.\n\nWhile the second one is like going through the book from the last page towards the beginning.\n\nIn practice, the second approach is faster, and uses at most the same amount of memory, probably less.\n\nEspecially when the input text is human language, where the text length might be much longer than the last word,\nso the last word is much closer to the end than to the beginning.\n"
                    },
                    {
                        "username": "sifatfahimul",
                        "content": "first count the empty space of the string from last index.\nthen minus the space count form string and count charter from last. and return charter count."
                    },
                    {
                        "username": "MengjieQian",
                        "content": "s = \\'hello world \\'\\ns.split()  # [\\'hello, \\'world\\']\\ns.plit(\\' \\') # [\\'hello\\', \\'world\\', \\' \\']"
                    },
                    {
                        "username": "arjunvasu",
                        "content": "I am trying to submit a solution and it says \"String is not declared in this scope\" compilation error.\\ncan anyone please assist on this.\\n\\nthanks."
                    },
                    {
                        "username": "haoyangfan",
                        "content": "I am confused by the time complexity of this question, should it be `O(1)` or `O(n)`?\\n\\nFor most of solutions I\\'ve seen for this problem, they use some language build-in methods such as `trim`, `lastIndexOf` or `split`. Although the solution code itself does not scan through the entire string, if those methods that the solution relies on internally will traverse through the string, will that also make those solutions actually be `O(n)` time complexity?"
                    },
                    {
                        "username": "aakash_chandhoke",
                        "content": "Isnt the solution set ambiguous as for this input the output should be zero but here it is giving 1 \n\n**INPUT**- \"a \"\n**OUTPUT**- 1\n\nAs the space is comming after the character nd after the space there is no word so output should be zero i guess..\nPlease correct me if i am wrong."
                    },
                    {
                        "username": "gilgoliada",
                        "content": "What are the chances my friend will see this leetcode question the day after he started watching one piece?"
                    }
                ]
            },
            {
                "id": 1858246,
                "content": [
                    {
                        "username": "greenlogan",
                        "content": "return len(s.strip().split(\" \")[-1])"
                    },
                    {
                        "username": "simonnchong",
                        "content": "you don\\'t need the strip() actually, split() will split the word only without the space contains in it"
                    },
                    {
                        "username": "shubhamparad19",
                        "content": "Today is the day, everyone heard the drums of liberation. Joyboy has returned\\uD83E\\uDD0D"
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nreturn len(s.split()[-1])\\n```"
                    },
                    {
                        "username": "varshini-S",
                        "content": "why can't we just reverse the string and count the character till the whitespace arrives?\nclear my doubt, please."
                    },
                    {
                        "username": "HarshitUpadhyay",
                        "content": "We can\\'t do this because we have some string which contains whitespace at first like \"   fly me   to   the moon  \" this gives 0 as result "
                    },
                    {
                        "username": "wagzap",
                        "content": "And splitting the string between spaces and taking the length of the last piece works too. \\nIt just takes more time to go through the whole string to split it \\u23F3\\nAnd more space for each piece of the string, as much as the input \\u27BF"
                    },
                    {
                        "username": "wagzap",
                        "content": "We can do that.\n💡And we can do better. 💡\n\nIf we reverse the string ⏭ and only then count the consecutive word characters from the front 0️⃣1️⃣2️⃣... , we always go through the __entire__ string, no matter how short the last word is.\nAnd we use up memory for the reversed string, if the language has immutable strings.\n\nBut if we just go from the end to the first word character ◀, then we count consecutive word characters 0️⃣1️⃣2️⃣... , we only go through `suffix_spaces + last_word_length` characters.\n\nHere's an imperfect analogy.\nThe first approach is like going through an entire book from the first to the last page, to find the last chapter. While also putting the sheets in reverse order.\n\nWhile the second one is like going through the book from the last page towards the beginning.\n\nIn practice, the second approach is faster, and uses at most the same amount of memory, probably less.\n\nEspecially when the input text is human language, where the text length might be much longer than the last word,\nso the last word is much closer to the end than to the beginning.\n"
                    },
                    {
                        "username": "sifatfahimul",
                        "content": "first count the empty space of the string from last index.\nthen minus the space count form string and count charter from last. and return charter count."
                    },
                    {
                        "username": "MengjieQian",
                        "content": "s = \\'hello world \\'\\ns.split()  # [\\'hello, \\'world\\']\\ns.plit(\\' \\') # [\\'hello\\', \\'world\\', \\' \\']"
                    },
                    {
                        "username": "arjunvasu",
                        "content": "I am trying to submit a solution and it says \"String is not declared in this scope\" compilation error.\\ncan anyone please assist on this.\\n\\nthanks."
                    },
                    {
                        "username": "haoyangfan",
                        "content": "I am confused by the time complexity of this question, should it be `O(1)` or `O(n)`?\\n\\nFor most of solutions I\\'ve seen for this problem, they use some language build-in methods such as `trim`, `lastIndexOf` or `split`. Although the solution code itself does not scan through the entire string, if those methods that the solution relies on internally will traverse through the string, will that also make those solutions actually be `O(n)` time complexity?"
                    },
                    {
                        "username": "aakash_chandhoke",
                        "content": "Isnt the solution set ambiguous as for this input the output should be zero but here it is giving 1 \n\n**INPUT**- \"a \"\n**OUTPUT**- 1\n\nAs the space is comming after the character nd after the space there is no word so output should be zero i guess..\nPlease correct me if i am wrong."
                    },
                    {
                        "username": "gilgoliada",
                        "content": "What are the chances my friend will see this leetcode question the day after he started watching one piece?"
                    }
                ]
            },
            {
                "id": 1789840,
                "content": [
                    {
                        "username": "greenlogan",
                        "content": "return len(s.strip().split(\" \")[-1])"
                    },
                    {
                        "username": "simonnchong",
                        "content": "you don\\'t need the strip() actually, split() will split the word only without the space contains in it"
                    },
                    {
                        "username": "shubhamparad19",
                        "content": "Today is the day, everyone heard the drums of liberation. Joyboy has returned\\uD83E\\uDD0D"
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nreturn len(s.split()[-1])\\n```"
                    },
                    {
                        "username": "varshini-S",
                        "content": "why can't we just reverse the string and count the character till the whitespace arrives?\nclear my doubt, please."
                    },
                    {
                        "username": "HarshitUpadhyay",
                        "content": "We can\\'t do this because we have some string which contains whitespace at first like \"   fly me   to   the moon  \" this gives 0 as result "
                    },
                    {
                        "username": "wagzap",
                        "content": "And splitting the string between spaces and taking the length of the last piece works too. \\nIt just takes more time to go through the whole string to split it \\u23F3\\nAnd more space for each piece of the string, as much as the input \\u27BF"
                    },
                    {
                        "username": "wagzap",
                        "content": "We can do that.\n💡And we can do better. 💡\n\nIf we reverse the string ⏭ and only then count the consecutive word characters from the front 0️⃣1️⃣2️⃣... , we always go through the __entire__ string, no matter how short the last word is.\nAnd we use up memory for the reversed string, if the language has immutable strings.\n\nBut if we just go from the end to the first word character ◀, then we count consecutive word characters 0️⃣1️⃣2️⃣... , we only go through `suffix_spaces + last_word_length` characters.\n\nHere's an imperfect analogy.\nThe first approach is like going through an entire book from the first to the last page, to find the last chapter. While also putting the sheets in reverse order.\n\nWhile the second one is like going through the book from the last page towards the beginning.\n\nIn practice, the second approach is faster, and uses at most the same amount of memory, probably less.\n\nEspecially when the input text is human language, where the text length might be much longer than the last word,\nso the last word is much closer to the end than to the beginning.\n"
                    },
                    {
                        "username": "sifatfahimul",
                        "content": "first count the empty space of the string from last index.\nthen minus the space count form string and count charter from last. and return charter count."
                    },
                    {
                        "username": "MengjieQian",
                        "content": "s = \\'hello world \\'\\ns.split()  # [\\'hello, \\'world\\']\\ns.plit(\\' \\') # [\\'hello\\', \\'world\\', \\' \\']"
                    },
                    {
                        "username": "arjunvasu",
                        "content": "I am trying to submit a solution and it says \"String is not declared in this scope\" compilation error.\\ncan anyone please assist on this.\\n\\nthanks."
                    },
                    {
                        "username": "haoyangfan",
                        "content": "I am confused by the time complexity of this question, should it be `O(1)` or `O(n)`?\\n\\nFor most of solutions I\\'ve seen for this problem, they use some language build-in methods such as `trim`, `lastIndexOf` or `split`. Although the solution code itself does not scan through the entire string, if those methods that the solution relies on internally will traverse through the string, will that also make those solutions actually be `O(n)` time complexity?"
                    },
                    {
                        "username": "aakash_chandhoke",
                        "content": "Isnt the solution set ambiguous as for this input the output should be zero but here it is giving 1 \n\n**INPUT**- \"a \"\n**OUTPUT**- 1\n\nAs the space is comming after the character nd after the space there is no word so output should be zero i guess..\nPlease correct me if i am wrong."
                    },
                    {
                        "username": "gilgoliada",
                        "content": "What are the chances my friend will see this leetcode question the day after he started watching one piece?"
                    }
                ]
            },
            {
                "id": 1778980,
                "content": [
                    {
                        "username": "greenlogan",
                        "content": "return len(s.strip().split(\" \")[-1])"
                    },
                    {
                        "username": "simonnchong",
                        "content": "you don\\'t need the strip() actually, split() will split the word only without the space contains in it"
                    },
                    {
                        "username": "shubhamparad19",
                        "content": "Today is the day, everyone heard the drums of liberation. Joyboy has returned\\uD83E\\uDD0D"
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nreturn len(s.split()[-1])\\n```"
                    },
                    {
                        "username": "varshini-S",
                        "content": "why can't we just reverse the string and count the character till the whitespace arrives?\nclear my doubt, please."
                    },
                    {
                        "username": "HarshitUpadhyay",
                        "content": "We can\\'t do this because we have some string which contains whitespace at first like \"   fly me   to   the moon  \" this gives 0 as result "
                    },
                    {
                        "username": "wagzap",
                        "content": "And splitting the string between spaces and taking the length of the last piece works too. \\nIt just takes more time to go through the whole string to split it \\u23F3\\nAnd more space for each piece of the string, as much as the input \\u27BF"
                    },
                    {
                        "username": "wagzap",
                        "content": "We can do that.\n💡And we can do better. 💡\n\nIf we reverse the string ⏭ and only then count the consecutive word characters from the front 0️⃣1️⃣2️⃣... , we always go through the __entire__ string, no matter how short the last word is.\nAnd we use up memory for the reversed string, if the language has immutable strings.\n\nBut if we just go from the end to the first word character ◀, then we count consecutive word characters 0️⃣1️⃣2️⃣... , we only go through `suffix_spaces + last_word_length` characters.\n\nHere's an imperfect analogy.\nThe first approach is like going through an entire book from the first to the last page, to find the last chapter. While also putting the sheets in reverse order.\n\nWhile the second one is like going through the book from the last page towards the beginning.\n\nIn practice, the second approach is faster, and uses at most the same amount of memory, probably less.\n\nEspecially when the input text is human language, where the text length might be much longer than the last word,\nso the last word is much closer to the end than to the beginning.\n"
                    },
                    {
                        "username": "sifatfahimul",
                        "content": "first count the empty space of the string from last index.\nthen minus the space count form string and count charter from last. and return charter count."
                    },
                    {
                        "username": "MengjieQian",
                        "content": "s = \\'hello world \\'\\ns.split()  # [\\'hello, \\'world\\']\\ns.plit(\\' \\') # [\\'hello\\', \\'world\\', \\' \\']"
                    },
                    {
                        "username": "arjunvasu",
                        "content": "I am trying to submit a solution and it says \"String is not declared in this scope\" compilation error.\\ncan anyone please assist on this.\\n\\nthanks."
                    },
                    {
                        "username": "haoyangfan",
                        "content": "I am confused by the time complexity of this question, should it be `O(1)` or `O(n)`?\\n\\nFor most of solutions I\\'ve seen for this problem, they use some language build-in methods such as `trim`, `lastIndexOf` or `split`. Although the solution code itself does not scan through the entire string, if those methods that the solution relies on internally will traverse through the string, will that also make those solutions actually be `O(n)` time complexity?"
                    },
                    {
                        "username": "aakash_chandhoke",
                        "content": "Isnt the solution set ambiguous as for this input the output should be zero but here it is giving 1 \n\n**INPUT**- \"a \"\n**OUTPUT**- 1\n\nAs the space is comming after the character nd after the space there is no word so output should be zero i guess..\nPlease correct me if i am wrong."
                    },
                    {
                        "username": "gilgoliada",
                        "content": "What are the chances my friend will see this leetcode question the day after he started watching one piece?"
                    }
                ]
            },
            {
                "id": 1573141,
                "content": [
                    {
                        "username": "greenlogan",
                        "content": "return len(s.strip().split(\" \")[-1])"
                    },
                    {
                        "username": "simonnchong",
                        "content": "you don\\'t need the strip() actually, split() will split the word only without the space contains in it"
                    },
                    {
                        "username": "shubhamparad19",
                        "content": "Today is the day, everyone heard the drums of liberation. Joyboy has returned\\uD83E\\uDD0D"
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nreturn len(s.split()[-1])\\n```"
                    },
                    {
                        "username": "varshini-S",
                        "content": "why can't we just reverse the string and count the character till the whitespace arrives?\nclear my doubt, please."
                    },
                    {
                        "username": "HarshitUpadhyay",
                        "content": "We can\\'t do this because we have some string which contains whitespace at first like \"   fly me   to   the moon  \" this gives 0 as result "
                    },
                    {
                        "username": "wagzap",
                        "content": "And splitting the string between spaces and taking the length of the last piece works too. \\nIt just takes more time to go through the whole string to split it \\u23F3\\nAnd more space for each piece of the string, as much as the input \\u27BF"
                    },
                    {
                        "username": "wagzap",
                        "content": "We can do that.\n💡And we can do better. 💡\n\nIf we reverse the string ⏭ and only then count the consecutive word characters from the front 0️⃣1️⃣2️⃣... , we always go through the __entire__ string, no matter how short the last word is.\nAnd we use up memory for the reversed string, if the language has immutable strings.\n\nBut if we just go from the end to the first word character ◀, then we count consecutive word characters 0️⃣1️⃣2️⃣... , we only go through `suffix_spaces + last_word_length` characters.\n\nHere's an imperfect analogy.\nThe first approach is like going through an entire book from the first to the last page, to find the last chapter. While also putting the sheets in reverse order.\n\nWhile the second one is like going through the book from the last page towards the beginning.\n\nIn practice, the second approach is faster, and uses at most the same amount of memory, probably less.\n\nEspecially when the input text is human language, where the text length might be much longer than the last word,\nso the last word is much closer to the end than to the beginning.\n"
                    },
                    {
                        "username": "sifatfahimul",
                        "content": "first count the empty space of the string from last index.\nthen minus the space count form string and count charter from last. and return charter count."
                    },
                    {
                        "username": "MengjieQian",
                        "content": "s = \\'hello world \\'\\ns.split()  # [\\'hello, \\'world\\']\\ns.plit(\\' \\') # [\\'hello\\', \\'world\\', \\' \\']"
                    },
                    {
                        "username": "arjunvasu",
                        "content": "I am trying to submit a solution and it says \"String is not declared in this scope\" compilation error.\\ncan anyone please assist on this.\\n\\nthanks."
                    },
                    {
                        "username": "haoyangfan",
                        "content": "I am confused by the time complexity of this question, should it be `O(1)` or `O(n)`?\\n\\nFor most of solutions I\\'ve seen for this problem, they use some language build-in methods such as `trim`, `lastIndexOf` or `split`. Although the solution code itself does not scan through the entire string, if those methods that the solution relies on internally will traverse through the string, will that also make those solutions actually be `O(n)` time complexity?"
                    },
                    {
                        "username": "aakash_chandhoke",
                        "content": "Isnt the solution set ambiguous as for this input the output should be zero but here it is giving 1 \n\n**INPUT**- \"a \"\n**OUTPUT**- 1\n\nAs the space is comming after the character nd after the space there is no word so output should be zero i guess..\nPlease correct me if i am wrong."
                    },
                    {
                        "username": "gilgoliada",
                        "content": "What are the chances my friend will see this leetcode question the day after he started watching one piece?"
                    }
                ]
            },
            {
                "id": 1572822,
                "content": [
                    {
                        "username": "greenlogan",
                        "content": "return len(s.strip().split(\" \")[-1])"
                    },
                    {
                        "username": "simonnchong",
                        "content": "you don\\'t need the strip() actually, split() will split the word only without the space contains in it"
                    },
                    {
                        "username": "shubhamparad19",
                        "content": "Today is the day, everyone heard the drums of liberation. Joyboy has returned\\uD83E\\uDD0D"
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nreturn len(s.split()[-1])\\n```"
                    },
                    {
                        "username": "varshini-S",
                        "content": "why can't we just reverse the string and count the character till the whitespace arrives?\nclear my doubt, please."
                    },
                    {
                        "username": "HarshitUpadhyay",
                        "content": "We can\\'t do this because we have some string which contains whitespace at first like \"   fly me   to   the moon  \" this gives 0 as result "
                    },
                    {
                        "username": "wagzap",
                        "content": "And splitting the string between spaces and taking the length of the last piece works too. \\nIt just takes more time to go through the whole string to split it \\u23F3\\nAnd more space for each piece of the string, as much as the input \\u27BF"
                    },
                    {
                        "username": "wagzap",
                        "content": "We can do that.\n💡And we can do better. 💡\n\nIf we reverse the string ⏭ and only then count the consecutive word characters from the front 0️⃣1️⃣2️⃣... , we always go through the __entire__ string, no matter how short the last word is.\nAnd we use up memory for the reversed string, if the language has immutable strings.\n\nBut if we just go from the end to the first word character ◀, then we count consecutive word characters 0️⃣1️⃣2️⃣... , we only go through `suffix_spaces + last_word_length` characters.\n\nHere's an imperfect analogy.\nThe first approach is like going through an entire book from the first to the last page, to find the last chapter. While also putting the sheets in reverse order.\n\nWhile the second one is like going through the book from the last page towards the beginning.\n\nIn practice, the second approach is faster, and uses at most the same amount of memory, probably less.\n\nEspecially when the input text is human language, where the text length might be much longer than the last word,\nso the last word is much closer to the end than to the beginning.\n"
                    },
                    {
                        "username": "sifatfahimul",
                        "content": "first count the empty space of the string from last index.\nthen minus the space count form string and count charter from last. and return charter count."
                    },
                    {
                        "username": "MengjieQian",
                        "content": "s = \\'hello world \\'\\ns.split()  # [\\'hello, \\'world\\']\\ns.plit(\\' \\') # [\\'hello\\', \\'world\\', \\' \\']"
                    },
                    {
                        "username": "arjunvasu",
                        "content": "I am trying to submit a solution and it says \"String is not declared in this scope\" compilation error.\\ncan anyone please assist on this.\\n\\nthanks."
                    },
                    {
                        "username": "haoyangfan",
                        "content": "I am confused by the time complexity of this question, should it be `O(1)` or `O(n)`?\\n\\nFor most of solutions I\\'ve seen for this problem, they use some language build-in methods such as `trim`, `lastIndexOf` or `split`. Although the solution code itself does not scan through the entire string, if those methods that the solution relies on internally will traverse through the string, will that also make those solutions actually be `O(n)` time complexity?"
                    },
                    {
                        "username": "aakash_chandhoke",
                        "content": "Isnt the solution set ambiguous as for this input the output should be zero but here it is giving 1 \n\n**INPUT**- \"a \"\n**OUTPUT**- 1\n\nAs the space is comming after the character nd after the space there is no word so output should be zero i guess..\nPlease correct me if i am wrong."
                    },
                    {
                        "username": "gilgoliada",
                        "content": "What are the chances my friend will see this leetcode question the day after he started watching one piece?"
                    }
                ]
            },
            {
                "id": 1572177,
                "content": [
                    {
                        "username": "greenlogan",
                        "content": "return len(s.strip().split(\" \")[-1])"
                    },
                    {
                        "username": "simonnchong",
                        "content": "you don\\'t need the strip() actually, split() will split the word only without the space contains in it"
                    },
                    {
                        "username": "shubhamparad19",
                        "content": "Today is the day, everyone heard the drums of liberation. Joyboy has returned\\uD83E\\uDD0D"
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nreturn len(s.split()[-1])\\n```"
                    },
                    {
                        "username": "varshini-S",
                        "content": "why can't we just reverse the string and count the character till the whitespace arrives?\nclear my doubt, please."
                    },
                    {
                        "username": "HarshitUpadhyay",
                        "content": "We can\\'t do this because we have some string which contains whitespace at first like \"   fly me   to   the moon  \" this gives 0 as result "
                    },
                    {
                        "username": "wagzap",
                        "content": "And splitting the string between spaces and taking the length of the last piece works too. \\nIt just takes more time to go through the whole string to split it \\u23F3\\nAnd more space for each piece of the string, as much as the input \\u27BF"
                    },
                    {
                        "username": "wagzap",
                        "content": "We can do that.\n💡And we can do better. 💡\n\nIf we reverse the string ⏭ and only then count the consecutive word characters from the front 0️⃣1️⃣2️⃣... , we always go through the __entire__ string, no matter how short the last word is.\nAnd we use up memory for the reversed string, if the language has immutable strings.\n\nBut if we just go from the end to the first word character ◀, then we count consecutive word characters 0️⃣1️⃣2️⃣... , we only go through `suffix_spaces + last_word_length` characters.\n\nHere's an imperfect analogy.\nThe first approach is like going through an entire book from the first to the last page, to find the last chapter. While also putting the sheets in reverse order.\n\nWhile the second one is like going through the book from the last page towards the beginning.\n\nIn practice, the second approach is faster, and uses at most the same amount of memory, probably less.\n\nEspecially when the input text is human language, where the text length might be much longer than the last word,\nso the last word is much closer to the end than to the beginning.\n"
                    },
                    {
                        "username": "sifatfahimul",
                        "content": "first count the empty space of the string from last index.\nthen minus the space count form string and count charter from last. and return charter count."
                    },
                    {
                        "username": "MengjieQian",
                        "content": "s = \\'hello world \\'\\ns.split()  # [\\'hello, \\'world\\']\\ns.plit(\\' \\') # [\\'hello\\', \\'world\\', \\' \\']"
                    },
                    {
                        "username": "arjunvasu",
                        "content": "I am trying to submit a solution and it says \"String is not declared in this scope\" compilation error.\\ncan anyone please assist on this.\\n\\nthanks."
                    },
                    {
                        "username": "haoyangfan",
                        "content": "I am confused by the time complexity of this question, should it be `O(1)` or `O(n)`?\\n\\nFor most of solutions I\\'ve seen for this problem, they use some language build-in methods such as `trim`, `lastIndexOf` or `split`. Although the solution code itself does not scan through the entire string, if those methods that the solution relies on internally will traverse through the string, will that also make those solutions actually be `O(n)` time complexity?"
                    },
                    {
                        "username": "aakash_chandhoke",
                        "content": "Isnt the solution set ambiguous as for this input the output should be zero but here it is giving 1 \n\n**INPUT**- \"a \"\n**OUTPUT**- 1\n\nAs the space is comming after the character nd after the space there is no word so output should be zero i guess..\nPlease correct me if i am wrong."
                    },
                    {
                        "username": "gilgoliada",
                        "content": "What are the chances my friend will see this leetcode question the day after he started watching one piece?"
                    }
                ]
            },
            {
                "id": 1571873,
                "content": [
                    {
                        "username": "greenlogan",
                        "content": "return len(s.strip().split(\" \")[-1])"
                    },
                    {
                        "username": "simonnchong",
                        "content": "you don\\'t need the strip() actually, split() will split the word only without the space contains in it"
                    },
                    {
                        "username": "shubhamparad19",
                        "content": "Today is the day, everyone heard the drums of liberation. Joyboy has returned\\uD83E\\uDD0D"
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nreturn len(s.split()[-1])\\n```"
                    },
                    {
                        "username": "varshini-S",
                        "content": "why can't we just reverse the string and count the character till the whitespace arrives?\nclear my doubt, please."
                    },
                    {
                        "username": "HarshitUpadhyay",
                        "content": "We can\\'t do this because we have some string which contains whitespace at first like \"   fly me   to   the moon  \" this gives 0 as result "
                    },
                    {
                        "username": "wagzap",
                        "content": "And splitting the string between spaces and taking the length of the last piece works too. \\nIt just takes more time to go through the whole string to split it \\u23F3\\nAnd more space for each piece of the string, as much as the input \\u27BF"
                    },
                    {
                        "username": "wagzap",
                        "content": "We can do that.\n💡And we can do better. 💡\n\nIf we reverse the string ⏭ and only then count the consecutive word characters from the front 0️⃣1️⃣2️⃣... , we always go through the __entire__ string, no matter how short the last word is.\nAnd we use up memory for the reversed string, if the language has immutable strings.\n\nBut if we just go from the end to the first word character ◀, then we count consecutive word characters 0️⃣1️⃣2️⃣... , we only go through `suffix_spaces + last_word_length` characters.\n\nHere's an imperfect analogy.\nThe first approach is like going through an entire book from the first to the last page, to find the last chapter. While also putting the sheets in reverse order.\n\nWhile the second one is like going through the book from the last page towards the beginning.\n\nIn practice, the second approach is faster, and uses at most the same amount of memory, probably less.\n\nEspecially when the input text is human language, where the text length might be much longer than the last word,\nso the last word is much closer to the end than to the beginning.\n"
                    },
                    {
                        "username": "sifatfahimul",
                        "content": "first count the empty space of the string from last index.\nthen minus the space count form string and count charter from last. and return charter count."
                    },
                    {
                        "username": "MengjieQian",
                        "content": "s = \\'hello world \\'\\ns.split()  # [\\'hello, \\'world\\']\\ns.plit(\\' \\') # [\\'hello\\', \\'world\\', \\' \\']"
                    },
                    {
                        "username": "arjunvasu",
                        "content": "I am trying to submit a solution and it says \"String is not declared in this scope\" compilation error.\\ncan anyone please assist on this.\\n\\nthanks."
                    },
                    {
                        "username": "haoyangfan",
                        "content": "I am confused by the time complexity of this question, should it be `O(1)` or `O(n)`?\\n\\nFor most of solutions I\\'ve seen for this problem, they use some language build-in methods such as `trim`, `lastIndexOf` or `split`. Although the solution code itself does not scan through the entire string, if those methods that the solution relies on internally will traverse through the string, will that also make those solutions actually be `O(n)` time complexity?"
                    },
                    {
                        "username": "aakash_chandhoke",
                        "content": "Isnt the solution set ambiguous as for this input the output should be zero but here it is giving 1 \n\n**INPUT**- \"a \"\n**OUTPUT**- 1\n\nAs the space is comming after the character nd after the space there is no word so output should be zero i guess..\nPlease correct me if i am wrong."
                    },
                    {
                        "username": "gilgoliada",
                        "content": "What are the chances my friend will see this leetcode question the day after he started watching one piece?"
                    }
                ]
            },
            {
                "id": 2074473,
                "content": [
                    {
                        "username": "greenlogan",
                        "content": "return len(s.strip().split(\" \")[-1])"
                    },
                    {
                        "username": "simonnchong",
                        "content": "you don\\'t need the strip() actually, split() will split the word only without the space contains in it"
                    },
                    {
                        "username": "shubhamparad19",
                        "content": "Today is the day, everyone heard the drums of liberation. Joyboy has returned\\uD83E\\uDD0D"
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nreturn len(s.split()[-1])\\n```"
                    },
                    {
                        "username": "varshini-S",
                        "content": "why can't we just reverse the string and count the character till the whitespace arrives?\nclear my doubt, please."
                    },
                    {
                        "username": "HarshitUpadhyay",
                        "content": "We can\\'t do this because we have some string which contains whitespace at first like \"   fly me   to   the moon  \" this gives 0 as result "
                    },
                    {
                        "username": "wagzap",
                        "content": "And splitting the string between spaces and taking the length of the last piece works too. \\nIt just takes more time to go through the whole string to split it \\u23F3\\nAnd more space for each piece of the string, as much as the input \\u27BF"
                    },
                    {
                        "username": "wagzap",
                        "content": "We can do that.\n💡And we can do better. 💡\n\nIf we reverse the string ⏭ and only then count the consecutive word characters from the front 0️⃣1️⃣2️⃣... , we always go through the __entire__ string, no matter how short the last word is.\nAnd we use up memory for the reversed string, if the language has immutable strings.\n\nBut if we just go from the end to the first word character ◀, then we count consecutive word characters 0️⃣1️⃣2️⃣... , we only go through `suffix_spaces + last_word_length` characters.\n\nHere's an imperfect analogy.\nThe first approach is like going through an entire book from the first to the last page, to find the last chapter. While also putting the sheets in reverse order.\n\nWhile the second one is like going through the book from the last page towards the beginning.\n\nIn practice, the second approach is faster, and uses at most the same amount of memory, probably less.\n\nEspecially when the input text is human language, where the text length might be much longer than the last word,\nso the last word is much closer to the end than to the beginning.\n"
                    },
                    {
                        "username": "sifatfahimul",
                        "content": "first count the empty space of the string from last index.\nthen minus the space count form string and count charter from last. and return charter count."
                    },
                    {
                        "username": "MengjieQian",
                        "content": "s = \\'hello world \\'\\ns.split()  # [\\'hello, \\'world\\']\\ns.plit(\\' \\') # [\\'hello\\', \\'world\\', \\' \\']"
                    },
                    {
                        "username": "arjunvasu",
                        "content": "I am trying to submit a solution and it says \"String is not declared in this scope\" compilation error.\\ncan anyone please assist on this.\\n\\nthanks."
                    },
                    {
                        "username": "haoyangfan",
                        "content": "I am confused by the time complexity of this question, should it be `O(1)` or `O(n)`?\\n\\nFor most of solutions I\\'ve seen for this problem, they use some language build-in methods such as `trim`, `lastIndexOf` or `split`. Although the solution code itself does not scan through the entire string, if those methods that the solution relies on internally will traverse through the string, will that also make those solutions actually be `O(n)` time complexity?"
                    },
                    {
                        "username": "aakash_chandhoke",
                        "content": "Isnt the solution set ambiguous as for this input the output should be zero but here it is giving 1 \n\n**INPUT**- \"a \"\n**OUTPUT**- 1\n\nAs the space is comming after the character nd after the space there is no word so output should be zero i guess..\nPlease correct me if i am wrong."
                    },
                    {
                        "username": "gilgoliada",
                        "content": "What are the chances my friend will see this leetcode question the day after he started watching one piece?"
                    }
                ]
            },
            {
                "id": 2069821,
                "content": [
                    {
                        "username": "underdogsrijan",
                        "content": "i can see an one piece fan here\\uD83D\\uDE02\\uD83D\\uDE0D"
                    },
                    {
                        "username": "midhilesh1979",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i=s.size()-1,k=0;\\n        while(i>=0){\\n            if(int(s[i])==32&&k!=0){\\n                return k;\\n            }else if(int(s[i])!=32){\\n                k++;\\n            }\\n            i--;\\n        }\\n       return k;\\n    }\\n};"
                    },
                    {
                        "username": "bhargav2520",
                        "content": "  class Solution {\\n    public int lengthOfLastWord(String s) {\\n        // trim the trailing spaces\\n        int p = s.length()-1;\\n        int length=0;\\n       for(int i=p;i>=0;i--){\\n         if(s.charAt(i)!=\\' \\'){\\n           length=length+1;\\n         }\\n         if(s.charAt(i)==\\' \\' && length!=0){\\n            return length;\\n         }\\n\\n       }\\n    return length;\\n    }\\n}"
                    },
                    {
                        "username": "Satya_959",
                        "content": "Zoro in parallel universe is a programmer....spreading joy with joyboy..Gear5thhh"
                    },
                    {
                        "username": "CORE_KING",
                        "content": "One piece is real!!!!!"
                    },
                    {
                        "username": "adityaa_gupta",
                        "content": "Okay so I used strip method which removed spaces from the end. Then traversed the list from backward while incrementing a count variable, as soon as I am encountering a space, I am returning the count.\n"
                    },
                    {
                        "username": "sujaltangde",
                        "content": "The One Piece is Real \\n"
                    },
                    {
                        "username": "TheTrueLeetCoder",
                        "content": "Can someone please point out what I did wrong; I keep getting runtime errors because the indexing is out of bounds. It\\'s probably something small but I just can\\'t see it.\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int i = s.length()-1;\\n        int count = 0;\\n        s = s.trim();\\n        String arr[] = s.split(\" \", -1);\\n        \\n        for(int j = i; j>= 0; j--)\\n        {\\n            if(arr[j] == \" \")\\n            {\\n                break;\\n            }\\n            else {\\n                count = arr[j].length();\\n            }\\n        }\\n        return count;\\n\\n    }\\n}"
                    },
                    {
                        "username": "ahrix268",
                        "content": "`int i = s.length()-1;`\\n\\n`i` , now, definitely is greater than arr.len. therefore it will throw an exception when you read arr[j] (which equals to `i` at the first loop)\\n\\nalso, you don\\'t have to run a for-loop. \\nsince you used `trim()` to remove trailing blank, just return the length of the last element of the `arr`"
                    },
                    {
                        "username": "aiyappa18",
                        "content": "Java and Python users would find this very easy lol"
                    },
                    {
                        "username": "steady_we_ride",
                        "content": "Why the hell there is a spoiler to OP? Just WTF"
                    }
                ]
            },
            {
                "id": 2069791,
                "content": [
                    {
                        "username": "underdogsrijan",
                        "content": "i can see an one piece fan here\\uD83D\\uDE02\\uD83D\\uDE0D"
                    },
                    {
                        "username": "midhilesh1979",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i=s.size()-1,k=0;\\n        while(i>=0){\\n            if(int(s[i])==32&&k!=0){\\n                return k;\\n            }else if(int(s[i])!=32){\\n                k++;\\n            }\\n            i--;\\n        }\\n       return k;\\n    }\\n};"
                    },
                    {
                        "username": "bhargav2520",
                        "content": "  class Solution {\\n    public int lengthOfLastWord(String s) {\\n        // trim the trailing spaces\\n        int p = s.length()-1;\\n        int length=0;\\n       for(int i=p;i>=0;i--){\\n         if(s.charAt(i)!=\\' \\'){\\n           length=length+1;\\n         }\\n         if(s.charAt(i)==\\' \\' && length!=0){\\n            return length;\\n         }\\n\\n       }\\n    return length;\\n    }\\n}"
                    },
                    {
                        "username": "Satya_959",
                        "content": "Zoro in parallel universe is a programmer....spreading joy with joyboy..Gear5thhh"
                    },
                    {
                        "username": "CORE_KING",
                        "content": "One piece is real!!!!!"
                    },
                    {
                        "username": "adityaa_gupta",
                        "content": "Okay so I used strip method which removed spaces from the end. Then traversed the list from backward while incrementing a count variable, as soon as I am encountering a space, I am returning the count.\n"
                    },
                    {
                        "username": "sujaltangde",
                        "content": "The One Piece is Real \\n"
                    },
                    {
                        "username": "TheTrueLeetCoder",
                        "content": "Can someone please point out what I did wrong; I keep getting runtime errors because the indexing is out of bounds. It\\'s probably something small but I just can\\'t see it.\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int i = s.length()-1;\\n        int count = 0;\\n        s = s.trim();\\n        String arr[] = s.split(\" \", -1);\\n        \\n        for(int j = i; j>= 0; j--)\\n        {\\n            if(arr[j] == \" \")\\n            {\\n                break;\\n            }\\n            else {\\n                count = arr[j].length();\\n            }\\n        }\\n        return count;\\n\\n    }\\n}"
                    },
                    {
                        "username": "ahrix268",
                        "content": "`int i = s.length()-1;`\\n\\n`i` , now, definitely is greater than arr.len. therefore it will throw an exception when you read arr[j] (which equals to `i` at the first loop)\\n\\nalso, you don\\'t have to run a for-loop. \\nsince you used `trim()` to remove trailing blank, just return the length of the last element of the `arr`"
                    },
                    {
                        "username": "aiyappa18",
                        "content": "Java and Python users would find this very easy lol"
                    },
                    {
                        "username": "steady_we_ride",
                        "content": "Why the hell there is a spoiler to OP? Just WTF"
                    }
                ]
            },
            {
                "id": 2060839,
                "content": [
                    {
                        "username": "underdogsrijan",
                        "content": "i can see an one piece fan here\\uD83D\\uDE02\\uD83D\\uDE0D"
                    },
                    {
                        "username": "midhilesh1979",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i=s.size()-1,k=0;\\n        while(i>=0){\\n            if(int(s[i])==32&&k!=0){\\n                return k;\\n            }else if(int(s[i])!=32){\\n                k++;\\n            }\\n            i--;\\n        }\\n       return k;\\n    }\\n};"
                    },
                    {
                        "username": "bhargav2520",
                        "content": "  class Solution {\\n    public int lengthOfLastWord(String s) {\\n        // trim the trailing spaces\\n        int p = s.length()-1;\\n        int length=0;\\n       for(int i=p;i>=0;i--){\\n         if(s.charAt(i)!=\\' \\'){\\n           length=length+1;\\n         }\\n         if(s.charAt(i)==\\' \\' && length!=0){\\n            return length;\\n         }\\n\\n       }\\n    return length;\\n    }\\n}"
                    },
                    {
                        "username": "Satya_959",
                        "content": "Zoro in parallel universe is a programmer....spreading joy with joyboy..Gear5thhh"
                    },
                    {
                        "username": "CORE_KING",
                        "content": "One piece is real!!!!!"
                    },
                    {
                        "username": "adityaa_gupta",
                        "content": "Okay so I used strip method which removed spaces from the end. Then traversed the list from backward while incrementing a count variable, as soon as I am encountering a space, I am returning the count.\n"
                    },
                    {
                        "username": "sujaltangde",
                        "content": "The One Piece is Real \\n"
                    },
                    {
                        "username": "TheTrueLeetCoder",
                        "content": "Can someone please point out what I did wrong; I keep getting runtime errors because the indexing is out of bounds. It\\'s probably something small but I just can\\'t see it.\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int i = s.length()-1;\\n        int count = 0;\\n        s = s.trim();\\n        String arr[] = s.split(\" \", -1);\\n        \\n        for(int j = i; j>= 0; j--)\\n        {\\n            if(arr[j] == \" \")\\n            {\\n                break;\\n            }\\n            else {\\n                count = arr[j].length();\\n            }\\n        }\\n        return count;\\n\\n    }\\n}"
                    },
                    {
                        "username": "ahrix268",
                        "content": "`int i = s.length()-1;`\\n\\n`i` , now, definitely is greater than arr.len. therefore it will throw an exception when you read arr[j] (which equals to `i` at the first loop)\\n\\nalso, you don\\'t have to run a for-loop. \\nsince you used `trim()` to remove trailing blank, just return the length of the last element of the `arr`"
                    },
                    {
                        "username": "aiyappa18",
                        "content": "Java and Python users would find this very easy lol"
                    },
                    {
                        "username": "steady_we_ride",
                        "content": "Why the hell there is a spoiler to OP? Just WTF"
                    }
                ]
            },
            {
                "id": 2056347,
                "content": [
                    {
                        "username": "underdogsrijan",
                        "content": "i can see an one piece fan here\\uD83D\\uDE02\\uD83D\\uDE0D"
                    },
                    {
                        "username": "midhilesh1979",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i=s.size()-1,k=0;\\n        while(i>=0){\\n            if(int(s[i])==32&&k!=0){\\n                return k;\\n            }else if(int(s[i])!=32){\\n                k++;\\n            }\\n            i--;\\n        }\\n       return k;\\n    }\\n};"
                    },
                    {
                        "username": "bhargav2520",
                        "content": "  class Solution {\\n    public int lengthOfLastWord(String s) {\\n        // trim the trailing spaces\\n        int p = s.length()-1;\\n        int length=0;\\n       for(int i=p;i>=0;i--){\\n         if(s.charAt(i)!=\\' \\'){\\n           length=length+1;\\n         }\\n         if(s.charAt(i)==\\' \\' && length!=0){\\n            return length;\\n         }\\n\\n       }\\n    return length;\\n    }\\n}"
                    },
                    {
                        "username": "Satya_959",
                        "content": "Zoro in parallel universe is a programmer....spreading joy with joyboy..Gear5thhh"
                    },
                    {
                        "username": "CORE_KING",
                        "content": "One piece is real!!!!!"
                    },
                    {
                        "username": "adityaa_gupta",
                        "content": "Okay so I used strip method which removed spaces from the end. Then traversed the list from backward while incrementing a count variable, as soon as I am encountering a space, I am returning the count.\n"
                    },
                    {
                        "username": "sujaltangde",
                        "content": "The One Piece is Real \\n"
                    },
                    {
                        "username": "TheTrueLeetCoder",
                        "content": "Can someone please point out what I did wrong; I keep getting runtime errors because the indexing is out of bounds. It\\'s probably something small but I just can\\'t see it.\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int i = s.length()-1;\\n        int count = 0;\\n        s = s.trim();\\n        String arr[] = s.split(\" \", -1);\\n        \\n        for(int j = i; j>= 0; j--)\\n        {\\n            if(arr[j] == \" \")\\n            {\\n                break;\\n            }\\n            else {\\n                count = arr[j].length();\\n            }\\n        }\\n        return count;\\n\\n    }\\n}"
                    },
                    {
                        "username": "ahrix268",
                        "content": "`int i = s.length()-1;`\\n\\n`i` , now, definitely is greater than arr.len. therefore it will throw an exception when you read arr[j] (which equals to `i` at the first loop)\\n\\nalso, you don\\'t have to run a for-loop. \\nsince you used `trim()` to remove trailing blank, just return the length of the last element of the `arr`"
                    },
                    {
                        "username": "aiyappa18",
                        "content": "Java and Python users would find this very easy lol"
                    },
                    {
                        "username": "steady_we_ride",
                        "content": "Why the hell there is a spoiler to OP? Just WTF"
                    }
                ]
            },
            {
                "id": 2056340,
                "content": [
                    {
                        "username": "underdogsrijan",
                        "content": "i can see an one piece fan here\\uD83D\\uDE02\\uD83D\\uDE0D"
                    },
                    {
                        "username": "midhilesh1979",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i=s.size()-1,k=0;\\n        while(i>=0){\\n            if(int(s[i])==32&&k!=0){\\n                return k;\\n            }else if(int(s[i])!=32){\\n                k++;\\n            }\\n            i--;\\n        }\\n       return k;\\n    }\\n};"
                    },
                    {
                        "username": "bhargav2520",
                        "content": "  class Solution {\\n    public int lengthOfLastWord(String s) {\\n        // trim the trailing spaces\\n        int p = s.length()-1;\\n        int length=0;\\n       for(int i=p;i>=0;i--){\\n         if(s.charAt(i)!=\\' \\'){\\n           length=length+1;\\n         }\\n         if(s.charAt(i)==\\' \\' && length!=0){\\n            return length;\\n         }\\n\\n       }\\n    return length;\\n    }\\n}"
                    },
                    {
                        "username": "Satya_959",
                        "content": "Zoro in parallel universe is a programmer....spreading joy with joyboy..Gear5thhh"
                    },
                    {
                        "username": "CORE_KING",
                        "content": "One piece is real!!!!!"
                    },
                    {
                        "username": "adityaa_gupta",
                        "content": "Okay so I used strip method which removed spaces from the end. Then traversed the list from backward while incrementing a count variable, as soon as I am encountering a space, I am returning the count.\n"
                    },
                    {
                        "username": "sujaltangde",
                        "content": "The One Piece is Real \\n"
                    },
                    {
                        "username": "TheTrueLeetCoder",
                        "content": "Can someone please point out what I did wrong; I keep getting runtime errors because the indexing is out of bounds. It\\'s probably something small but I just can\\'t see it.\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int i = s.length()-1;\\n        int count = 0;\\n        s = s.trim();\\n        String arr[] = s.split(\" \", -1);\\n        \\n        for(int j = i; j>= 0; j--)\\n        {\\n            if(arr[j] == \" \")\\n            {\\n                break;\\n            }\\n            else {\\n                count = arr[j].length();\\n            }\\n        }\\n        return count;\\n\\n    }\\n}"
                    },
                    {
                        "username": "ahrix268",
                        "content": "`int i = s.length()-1;`\\n\\n`i` , now, definitely is greater than arr.len. therefore it will throw an exception when you read arr[j] (which equals to `i` at the first loop)\\n\\nalso, you don\\'t have to run a for-loop. \\nsince you used `trim()` to remove trailing blank, just return the length of the last element of the `arr`"
                    },
                    {
                        "username": "aiyappa18",
                        "content": "Java and Python users would find this very easy lol"
                    },
                    {
                        "username": "steady_we_ride",
                        "content": "Why the hell there is a spoiler to OP? Just WTF"
                    }
                ]
            },
            {
                "id": 2055654,
                "content": [
                    {
                        "username": "underdogsrijan",
                        "content": "i can see an one piece fan here\\uD83D\\uDE02\\uD83D\\uDE0D"
                    },
                    {
                        "username": "midhilesh1979",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i=s.size()-1,k=0;\\n        while(i>=0){\\n            if(int(s[i])==32&&k!=0){\\n                return k;\\n            }else if(int(s[i])!=32){\\n                k++;\\n            }\\n            i--;\\n        }\\n       return k;\\n    }\\n};"
                    },
                    {
                        "username": "bhargav2520",
                        "content": "  class Solution {\\n    public int lengthOfLastWord(String s) {\\n        // trim the trailing spaces\\n        int p = s.length()-1;\\n        int length=0;\\n       for(int i=p;i>=0;i--){\\n         if(s.charAt(i)!=\\' \\'){\\n           length=length+1;\\n         }\\n         if(s.charAt(i)==\\' \\' && length!=0){\\n            return length;\\n         }\\n\\n       }\\n    return length;\\n    }\\n}"
                    },
                    {
                        "username": "Satya_959",
                        "content": "Zoro in parallel universe is a programmer....spreading joy with joyboy..Gear5thhh"
                    },
                    {
                        "username": "CORE_KING",
                        "content": "One piece is real!!!!!"
                    },
                    {
                        "username": "adityaa_gupta",
                        "content": "Okay so I used strip method which removed spaces from the end. Then traversed the list from backward while incrementing a count variable, as soon as I am encountering a space, I am returning the count.\n"
                    },
                    {
                        "username": "sujaltangde",
                        "content": "The One Piece is Real \\n"
                    },
                    {
                        "username": "TheTrueLeetCoder",
                        "content": "Can someone please point out what I did wrong; I keep getting runtime errors because the indexing is out of bounds. It\\'s probably something small but I just can\\'t see it.\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int i = s.length()-1;\\n        int count = 0;\\n        s = s.trim();\\n        String arr[] = s.split(\" \", -1);\\n        \\n        for(int j = i; j>= 0; j--)\\n        {\\n            if(arr[j] == \" \")\\n            {\\n                break;\\n            }\\n            else {\\n                count = arr[j].length();\\n            }\\n        }\\n        return count;\\n\\n    }\\n}"
                    },
                    {
                        "username": "ahrix268",
                        "content": "`int i = s.length()-1;`\\n\\n`i` , now, definitely is greater than arr.len. therefore it will throw an exception when you read arr[j] (which equals to `i` at the first loop)\\n\\nalso, you don\\'t have to run a for-loop. \\nsince you used `trim()` to remove trailing blank, just return the length of the last element of the `arr`"
                    },
                    {
                        "username": "aiyappa18",
                        "content": "Java and Python users would find this very easy lol"
                    },
                    {
                        "username": "steady_we_ride",
                        "content": "Why the hell there is a spoiler to OP? Just WTF"
                    }
                ]
            },
            {
                "id": 2053403,
                "content": [
                    {
                        "username": "underdogsrijan",
                        "content": "i can see an one piece fan here\\uD83D\\uDE02\\uD83D\\uDE0D"
                    },
                    {
                        "username": "midhilesh1979",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i=s.size()-1,k=0;\\n        while(i>=0){\\n            if(int(s[i])==32&&k!=0){\\n                return k;\\n            }else if(int(s[i])!=32){\\n                k++;\\n            }\\n            i--;\\n        }\\n       return k;\\n    }\\n};"
                    },
                    {
                        "username": "bhargav2520",
                        "content": "  class Solution {\\n    public int lengthOfLastWord(String s) {\\n        // trim the trailing spaces\\n        int p = s.length()-1;\\n        int length=0;\\n       for(int i=p;i>=0;i--){\\n         if(s.charAt(i)!=\\' \\'){\\n           length=length+1;\\n         }\\n         if(s.charAt(i)==\\' \\' && length!=0){\\n            return length;\\n         }\\n\\n       }\\n    return length;\\n    }\\n}"
                    },
                    {
                        "username": "Satya_959",
                        "content": "Zoro in parallel universe is a programmer....spreading joy with joyboy..Gear5thhh"
                    },
                    {
                        "username": "CORE_KING",
                        "content": "One piece is real!!!!!"
                    },
                    {
                        "username": "adityaa_gupta",
                        "content": "Okay so I used strip method which removed spaces from the end. Then traversed the list from backward while incrementing a count variable, as soon as I am encountering a space, I am returning the count.\n"
                    },
                    {
                        "username": "sujaltangde",
                        "content": "The One Piece is Real \\n"
                    },
                    {
                        "username": "TheTrueLeetCoder",
                        "content": "Can someone please point out what I did wrong; I keep getting runtime errors because the indexing is out of bounds. It\\'s probably something small but I just can\\'t see it.\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int i = s.length()-1;\\n        int count = 0;\\n        s = s.trim();\\n        String arr[] = s.split(\" \", -1);\\n        \\n        for(int j = i; j>= 0; j--)\\n        {\\n            if(arr[j] == \" \")\\n            {\\n                break;\\n            }\\n            else {\\n                count = arr[j].length();\\n            }\\n        }\\n        return count;\\n\\n    }\\n}"
                    },
                    {
                        "username": "ahrix268",
                        "content": "`int i = s.length()-1;`\\n\\n`i` , now, definitely is greater than arr.len. therefore it will throw an exception when you read arr[j] (which equals to `i` at the first loop)\\n\\nalso, you don\\'t have to run a for-loop. \\nsince you used `trim()` to remove trailing blank, just return the length of the last element of the `arr`"
                    },
                    {
                        "username": "aiyappa18",
                        "content": "Java and Python users would find this very easy lol"
                    },
                    {
                        "username": "steady_we_ride",
                        "content": "Why the hell there is a spoiler to OP? Just WTF"
                    }
                ]
            },
            {
                "id": 2052468,
                "content": [
                    {
                        "username": "underdogsrijan",
                        "content": "i can see an one piece fan here\\uD83D\\uDE02\\uD83D\\uDE0D"
                    },
                    {
                        "username": "midhilesh1979",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i=s.size()-1,k=0;\\n        while(i>=0){\\n            if(int(s[i])==32&&k!=0){\\n                return k;\\n            }else if(int(s[i])!=32){\\n                k++;\\n            }\\n            i--;\\n        }\\n       return k;\\n    }\\n};"
                    },
                    {
                        "username": "bhargav2520",
                        "content": "  class Solution {\\n    public int lengthOfLastWord(String s) {\\n        // trim the trailing spaces\\n        int p = s.length()-1;\\n        int length=0;\\n       for(int i=p;i>=0;i--){\\n         if(s.charAt(i)!=\\' \\'){\\n           length=length+1;\\n         }\\n         if(s.charAt(i)==\\' \\' && length!=0){\\n            return length;\\n         }\\n\\n       }\\n    return length;\\n    }\\n}"
                    },
                    {
                        "username": "Satya_959",
                        "content": "Zoro in parallel universe is a programmer....spreading joy with joyboy..Gear5thhh"
                    },
                    {
                        "username": "CORE_KING",
                        "content": "One piece is real!!!!!"
                    },
                    {
                        "username": "adityaa_gupta",
                        "content": "Okay so I used strip method which removed spaces from the end. Then traversed the list from backward while incrementing a count variable, as soon as I am encountering a space, I am returning the count.\n"
                    },
                    {
                        "username": "sujaltangde",
                        "content": "The One Piece is Real \\n"
                    },
                    {
                        "username": "TheTrueLeetCoder",
                        "content": "Can someone please point out what I did wrong; I keep getting runtime errors because the indexing is out of bounds. It\\'s probably something small but I just can\\'t see it.\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int i = s.length()-1;\\n        int count = 0;\\n        s = s.trim();\\n        String arr[] = s.split(\" \", -1);\\n        \\n        for(int j = i; j>= 0; j--)\\n        {\\n            if(arr[j] == \" \")\\n            {\\n                break;\\n            }\\n            else {\\n                count = arr[j].length();\\n            }\\n        }\\n        return count;\\n\\n    }\\n}"
                    },
                    {
                        "username": "ahrix268",
                        "content": "`int i = s.length()-1;`\\n\\n`i` , now, definitely is greater than arr.len. therefore it will throw an exception when you read arr[j] (which equals to `i` at the first loop)\\n\\nalso, you don\\'t have to run a for-loop. \\nsince you used `trim()` to remove trailing blank, just return the length of the last element of the `arr`"
                    },
                    {
                        "username": "aiyappa18",
                        "content": "Java and Python users would find this very easy lol"
                    },
                    {
                        "username": "steady_we_ride",
                        "content": "Why the hell there is a spoiler to OP? Just WTF"
                    }
                ]
            },
            {
                "id": 2044108,
                "content": [
                    {
                        "username": "underdogsrijan",
                        "content": "i can see an one piece fan here\\uD83D\\uDE02\\uD83D\\uDE0D"
                    },
                    {
                        "username": "midhilesh1979",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i=s.size()-1,k=0;\\n        while(i>=0){\\n            if(int(s[i])==32&&k!=0){\\n                return k;\\n            }else if(int(s[i])!=32){\\n                k++;\\n            }\\n            i--;\\n        }\\n       return k;\\n    }\\n};"
                    },
                    {
                        "username": "bhargav2520",
                        "content": "  class Solution {\\n    public int lengthOfLastWord(String s) {\\n        // trim the trailing spaces\\n        int p = s.length()-1;\\n        int length=0;\\n       for(int i=p;i>=0;i--){\\n         if(s.charAt(i)!=\\' \\'){\\n           length=length+1;\\n         }\\n         if(s.charAt(i)==\\' \\' && length!=0){\\n            return length;\\n         }\\n\\n       }\\n    return length;\\n    }\\n}"
                    },
                    {
                        "username": "Satya_959",
                        "content": "Zoro in parallel universe is a programmer....spreading joy with joyboy..Gear5thhh"
                    },
                    {
                        "username": "CORE_KING",
                        "content": "One piece is real!!!!!"
                    },
                    {
                        "username": "adityaa_gupta",
                        "content": "Okay so I used strip method which removed spaces from the end. Then traversed the list from backward while incrementing a count variable, as soon as I am encountering a space, I am returning the count.\n"
                    },
                    {
                        "username": "sujaltangde",
                        "content": "The One Piece is Real \\n"
                    },
                    {
                        "username": "TheTrueLeetCoder",
                        "content": "Can someone please point out what I did wrong; I keep getting runtime errors because the indexing is out of bounds. It\\'s probably something small but I just can\\'t see it.\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int i = s.length()-1;\\n        int count = 0;\\n        s = s.trim();\\n        String arr[] = s.split(\" \", -1);\\n        \\n        for(int j = i; j>= 0; j--)\\n        {\\n            if(arr[j] == \" \")\\n            {\\n                break;\\n            }\\n            else {\\n                count = arr[j].length();\\n            }\\n        }\\n        return count;\\n\\n    }\\n}"
                    },
                    {
                        "username": "ahrix268",
                        "content": "`int i = s.length()-1;`\\n\\n`i` , now, definitely is greater than arr.len. therefore it will throw an exception when you read arr[j] (which equals to `i` at the first loop)\\n\\nalso, you don\\'t have to run a for-loop. \\nsince you used `trim()` to remove trailing blank, just return the length of the last element of the `arr`"
                    },
                    {
                        "username": "aiyappa18",
                        "content": "Java and Python users would find this very easy lol"
                    },
                    {
                        "username": "steady_we_ride",
                        "content": "Why the hell there is a spoiler to OP? Just WTF"
                    }
                ]
            },
            {
                "id": 2043797,
                "content": [
                    {
                        "username": "underdogsrijan",
                        "content": "i can see an one piece fan here\\uD83D\\uDE02\\uD83D\\uDE0D"
                    },
                    {
                        "username": "midhilesh1979",
                        "content": "class Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i=s.size()-1,k=0;\\n        while(i>=0){\\n            if(int(s[i])==32&&k!=0){\\n                return k;\\n            }else if(int(s[i])!=32){\\n                k++;\\n            }\\n            i--;\\n        }\\n       return k;\\n    }\\n};"
                    },
                    {
                        "username": "bhargav2520",
                        "content": "  class Solution {\\n    public int lengthOfLastWord(String s) {\\n        // trim the trailing spaces\\n        int p = s.length()-1;\\n        int length=0;\\n       for(int i=p;i>=0;i--){\\n         if(s.charAt(i)!=\\' \\'){\\n           length=length+1;\\n         }\\n         if(s.charAt(i)==\\' \\' && length!=0){\\n            return length;\\n         }\\n\\n       }\\n    return length;\\n    }\\n}"
                    },
                    {
                        "username": "Satya_959",
                        "content": "Zoro in parallel universe is a programmer....spreading joy with joyboy..Gear5thhh"
                    },
                    {
                        "username": "CORE_KING",
                        "content": "One piece is real!!!!!"
                    },
                    {
                        "username": "adityaa_gupta",
                        "content": "Okay so I used strip method which removed spaces from the end. Then traversed the list from backward while incrementing a count variable, as soon as I am encountering a space, I am returning the count.\n"
                    },
                    {
                        "username": "sujaltangde",
                        "content": "The One Piece is Real \\n"
                    },
                    {
                        "username": "TheTrueLeetCoder",
                        "content": "Can someone please point out what I did wrong; I keep getting runtime errors because the indexing is out of bounds. It\\'s probably something small but I just can\\'t see it.\\n\\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n        int i = s.length()-1;\\n        int count = 0;\\n        s = s.trim();\\n        String arr[] = s.split(\" \", -1);\\n        \\n        for(int j = i; j>= 0; j--)\\n        {\\n            if(arr[j] == \" \")\\n            {\\n                break;\\n            }\\n            else {\\n                count = arr[j].length();\\n            }\\n        }\\n        return count;\\n\\n    }\\n}"
                    },
                    {
                        "username": "ahrix268",
                        "content": "`int i = s.length()-1;`\\n\\n`i` , now, definitely is greater than arr.len. therefore it will throw an exception when you read arr[j] (which equals to `i` at the first loop)\\n\\nalso, you don\\'t have to run a for-loop. \\nsince you used `trim()` to remove trailing blank, just return the length of the last element of the `arr`"
                    },
                    {
                        "username": "aiyappa18",
                        "content": "Java and Python users would find this very easy lol"
                    },
                    {
                        "username": "steady_we_ride",
                        "content": "Why the hell there is a spoiler to OP? Just WTF"
                    }
                ]
            },
            {
                "id": 2039918,
                "content": [
                    {
                        "username": "jdenstnt",
                        "content": "Manga readers not getting spoiled\\n"
                    },
                    {
                        "username": "manasi0401",
                        "content": "I am getting runtime error on my code, can somoene explain the issue?\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count=0;\\n        int i=s.size()-1;\\n        while(s[i]==\\' \\'&& i>=0){\\n            i--;\\n        } \\nfor(i; s[i]!=\\' \\'&& i>=0; i-- ){\\n         count+=1;\\n        }\\nreturn count;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "EvilGriffith",
                        "content": "luffy stronger joyboy"
                    },
                    {
                        "username": "SyamTheCoder",
                        "content": "Test case no: 37 \"Today is a nice day\". Expected :3 instead of 5 (Today). "
                    },
                    {
                        "username": "hot_zoro2003",
                        "content": "why tf I\\'m being spoil on leetcode? "
                    },
                    {
                        "username": "t3nsor98",
                        "content": "I didn\\'t expect a one-piece reference."
                    },
                    {
                        "username": "ankitz013",
                        "content": "1. **Remove Extra Spaces:** Get rid of any spaces at the beginning and end of the string.\\n\\n2. **Find Last Word:** Starting from the end of the string, move backwards until you find the first non-space character. This will be the last word\\'s end.\\n\\n3. **Count Characters:** Count the characters from the last word\\'s end until you encounter a space or reach the start of the string. That\\'s the length of the last word.\\n\\n4. **Return Length:** Return the length you\\'ve counted.\\n\\nRemember, the goal is to find the length of the last word in the given string by looking at its characters, excluding any leading or trailing spaces."
                    },
                    {
                        "username": "anuragmahadik56",
                        "content": "This is the most simple solution you can use to solve this in GOLANG \\n`func lengthOfLastWord(s string) int {\\n\\n    str := strings.TrimRight(regexp.MustCompile(`\\\\s+`).ReplaceAllString(s, \" \"), \" \")\\n\\n    strarray := strings.Split(str, \" \")\\n    \\n    return len(strarray[len(strarray)-1])\\n}`"
                    },
                    {
                        "username": "Ninjabdul",
                        "content": "wtf why is there a One Piece spoiler "
                    },
                    {
                        "username": "amarprakash065",
                        "content": "        int count = 0;\\n        bool flag = false;\\n        for(int i = s.size()-1 ; i >= 0 ; i--)\\n        {\\n            if(s[i] != \\' \\')\\n            {\\n                flag = true ;\\n                count+= 1;\\n            }\\n\\n            else if(s[i] == \\' \\' && flag == true)\\n            {\\n                break;\\n            }\\n        }\\n\\n        return count ;"
                    }
                ]
            },
            {
                "id": 2039278,
                "content": [
                    {
                        "username": "jdenstnt",
                        "content": "Manga readers not getting spoiled\\n"
                    },
                    {
                        "username": "manasi0401",
                        "content": "I am getting runtime error on my code, can somoene explain the issue?\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count=0;\\n        int i=s.size()-1;\\n        while(s[i]==\\' \\'&& i>=0){\\n            i--;\\n        } \\nfor(i; s[i]!=\\' \\'&& i>=0; i-- ){\\n         count+=1;\\n        }\\nreturn count;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "EvilGriffith",
                        "content": "luffy stronger joyboy"
                    },
                    {
                        "username": "SyamTheCoder",
                        "content": "Test case no: 37 \"Today is a nice day\". Expected :3 instead of 5 (Today). "
                    },
                    {
                        "username": "hot_zoro2003",
                        "content": "why tf I\\'m being spoil on leetcode? "
                    },
                    {
                        "username": "t3nsor98",
                        "content": "I didn\\'t expect a one-piece reference."
                    },
                    {
                        "username": "ankitz013",
                        "content": "1. **Remove Extra Spaces:** Get rid of any spaces at the beginning and end of the string.\\n\\n2. **Find Last Word:** Starting from the end of the string, move backwards until you find the first non-space character. This will be the last word\\'s end.\\n\\n3. **Count Characters:** Count the characters from the last word\\'s end until you encounter a space or reach the start of the string. That\\'s the length of the last word.\\n\\n4. **Return Length:** Return the length you\\'ve counted.\\n\\nRemember, the goal is to find the length of the last word in the given string by looking at its characters, excluding any leading or trailing spaces."
                    },
                    {
                        "username": "anuragmahadik56",
                        "content": "This is the most simple solution you can use to solve this in GOLANG \\n`func lengthOfLastWord(s string) int {\\n\\n    str := strings.TrimRight(regexp.MustCompile(`\\\\s+`).ReplaceAllString(s, \" \"), \" \")\\n\\n    strarray := strings.Split(str, \" \")\\n    \\n    return len(strarray[len(strarray)-1])\\n}`"
                    },
                    {
                        "username": "Ninjabdul",
                        "content": "wtf why is there a One Piece spoiler "
                    },
                    {
                        "username": "amarprakash065",
                        "content": "        int count = 0;\\n        bool flag = false;\\n        for(int i = s.size()-1 ; i >= 0 ; i--)\\n        {\\n            if(s[i] != \\' \\')\\n            {\\n                flag = true ;\\n                count+= 1;\\n            }\\n\\n            else if(s[i] == \\' \\' && flag == true)\\n            {\\n                break;\\n            }\\n        }\\n\\n        return count ;"
                    }
                ]
            },
            {
                "id": 2037340,
                "content": [
                    {
                        "username": "jdenstnt",
                        "content": "Manga readers not getting spoiled\\n"
                    },
                    {
                        "username": "manasi0401",
                        "content": "I am getting runtime error on my code, can somoene explain the issue?\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count=0;\\n        int i=s.size()-1;\\n        while(s[i]==\\' \\'&& i>=0){\\n            i--;\\n        } \\nfor(i; s[i]!=\\' \\'&& i>=0; i-- ){\\n         count+=1;\\n        }\\nreturn count;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "EvilGriffith",
                        "content": "luffy stronger joyboy"
                    },
                    {
                        "username": "SyamTheCoder",
                        "content": "Test case no: 37 \"Today is a nice day\". Expected :3 instead of 5 (Today). "
                    },
                    {
                        "username": "hot_zoro2003",
                        "content": "why tf I\\'m being spoil on leetcode? "
                    },
                    {
                        "username": "t3nsor98",
                        "content": "I didn\\'t expect a one-piece reference."
                    },
                    {
                        "username": "ankitz013",
                        "content": "1. **Remove Extra Spaces:** Get rid of any spaces at the beginning and end of the string.\\n\\n2. **Find Last Word:** Starting from the end of the string, move backwards until you find the first non-space character. This will be the last word\\'s end.\\n\\n3. **Count Characters:** Count the characters from the last word\\'s end until you encounter a space or reach the start of the string. That\\'s the length of the last word.\\n\\n4. **Return Length:** Return the length you\\'ve counted.\\n\\nRemember, the goal is to find the length of the last word in the given string by looking at its characters, excluding any leading or trailing spaces."
                    },
                    {
                        "username": "anuragmahadik56",
                        "content": "This is the most simple solution you can use to solve this in GOLANG \\n`func lengthOfLastWord(s string) int {\\n\\n    str := strings.TrimRight(regexp.MustCompile(`\\\\s+`).ReplaceAllString(s, \" \"), \" \")\\n\\n    strarray := strings.Split(str, \" \")\\n    \\n    return len(strarray[len(strarray)-1])\\n}`"
                    },
                    {
                        "username": "Ninjabdul",
                        "content": "wtf why is there a One Piece spoiler "
                    },
                    {
                        "username": "amarprakash065",
                        "content": "        int count = 0;\\n        bool flag = false;\\n        for(int i = s.size()-1 ; i >= 0 ; i--)\\n        {\\n            if(s[i] != \\' \\')\\n            {\\n                flag = true ;\\n                count+= 1;\\n            }\\n\\n            else if(s[i] == \\' \\' && flag == true)\\n            {\\n                break;\\n            }\\n        }\\n\\n        return count ;"
                    }
                ]
            },
            {
                "id": 2032843,
                "content": [
                    {
                        "username": "jdenstnt",
                        "content": "Manga readers not getting spoiled\\n"
                    },
                    {
                        "username": "manasi0401",
                        "content": "I am getting runtime error on my code, can somoene explain the issue?\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count=0;\\n        int i=s.size()-1;\\n        while(s[i]==\\' \\'&& i>=0){\\n            i--;\\n        } \\nfor(i; s[i]!=\\' \\'&& i>=0; i-- ){\\n         count+=1;\\n        }\\nreturn count;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "EvilGriffith",
                        "content": "luffy stronger joyboy"
                    },
                    {
                        "username": "SyamTheCoder",
                        "content": "Test case no: 37 \"Today is a nice day\". Expected :3 instead of 5 (Today). "
                    },
                    {
                        "username": "hot_zoro2003",
                        "content": "why tf I\\'m being spoil on leetcode? "
                    },
                    {
                        "username": "t3nsor98",
                        "content": "I didn\\'t expect a one-piece reference."
                    },
                    {
                        "username": "ankitz013",
                        "content": "1. **Remove Extra Spaces:** Get rid of any spaces at the beginning and end of the string.\\n\\n2. **Find Last Word:** Starting from the end of the string, move backwards until you find the first non-space character. This will be the last word\\'s end.\\n\\n3. **Count Characters:** Count the characters from the last word\\'s end until you encounter a space or reach the start of the string. That\\'s the length of the last word.\\n\\n4. **Return Length:** Return the length you\\'ve counted.\\n\\nRemember, the goal is to find the length of the last word in the given string by looking at its characters, excluding any leading or trailing spaces."
                    },
                    {
                        "username": "anuragmahadik56",
                        "content": "This is the most simple solution you can use to solve this in GOLANG \\n`func lengthOfLastWord(s string) int {\\n\\n    str := strings.TrimRight(regexp.MustCompile(`\\\\s+`).ReplaceAllString(s, \" \"), \" \")\\n\\n    strarray := strings.Split(str, \" \")\\n    \\n    return len(strarray[len(strarray)-1])\\n}`"
                    },
                    {
                        "username": "Ninjabdul",
                        "content": "wtf why is there a One Piece spoiler "
                    },
                    {
                        "username": "amarprakash065",
                        "content": "        int count = 0;\\n        bool flag = false;\\n        for(int i = s.size()-1 ; i >= 0 ; i--)\\n        {\\n            if(s[i] != \\' \\')\\n            {\\n                flag = true ;\\n                count+= 1;\\n            }\\n\\n            else if(s[i] == \\' \\' && flag == true)\\n            {\\n                break;\\n            }\\n        }\\n\\n        return count ;"
                    }
                ]
            },
            {
                "id": 2027606,
                "content": [
                    {
                        "username": "jdenstnt",
                        "content": "Manga readers not getting spoiled\\n"
                    },
                    {
                        "username": "manasi0401",
                        "content": "I am getting runtime error on my code, can somoene explain the issue?\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count=0;\\n        int i=s.size()-1;\\n        while(s[i]==\\' \\'&& i>=0){\\n            i--;\\n        } \\nfor(i; s[i]!=\\' \\'&& i>=0; i-- ){\\n         count+=1;\\n        }\\nreturn count;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "EvilGriffith",
                        "content": "luffy stronger joyboy"
                    },
                    {
                        "username": "SyamTheCoder",
                        "content": "Test case no: 37 \"Today is a nice day\". Expected :3 instead of 5 (Today). "
                    },
                    {
                        "username": "hot_zoro2003",
                        "content": "why tf I\\'m being spoil on leetcode? "
                    },
                    {
                        "username": "t3nsor98",
                        "content": "I didn\\'t expect a one-piece reference."
                    },
                    {
                        "username": "ankitz013",
                        "content": "1. **Remove Extra Spaces:** Get rid of any spaces at the beginning and end of the string.\\n\\n2. **Find Last Word:** Starting from the end of the string, move backwards until you find the first non-space character. This will be the last word\\'s end.\\n\\n3. **Count Characters:** Count the characters from the last word\\'s end until you encounter a space or reach the start of the string. That\\'s the length of the last word.\\n\\n4. **Return Length:** Return the length you\\'ve counted.\\n\\nRemember, the goal is to find the length of the last word in the given string by looking at its characters, excluding any leading or trailing spaces."
                    },
                    {
                        "username": "anuragmahadik56",
                        "content": "This is the most simple solution you can use to solve this in GOLANG \\n`func lengthOfLastWord(s string) int {\\n\\n    str := strings.TrimRight(regexp.MustCompile(`\\\\s+`).ReplaceAllString(s, \" \"), \" \")\\n\\n    strarray := strings.Split(str, \" \")\\n    \\n    return len(strarray[len(strarray)-1])\\n}`"
                    },
                    {
                        "username": "Ninjabdul",
                        "content": "wtf why is there a One Piece spoiler "
                    },
                    {
                        "username": "amarprakash065",
                        "content": "        int count = 0;\\n        bool flag = false;\\n        for(int i = s.size()-1 ; i >= 0 ; i--)\\n        {\\n            if(s[i] != \\' \\')\\n            {\\n                flag = true ;\\n                count+= 1;\\n            }\\n\\n            else if(s[i] == \\' \\' && flag == true)\\n            {\\n                break;\\n            }\\n        }\\n\\n        return count ;"
                    }
                ]
            },
            {
                "id": 2024660,
                "content": [
                    {
                        "username": "jdenstnt",
                        "content": "Manga readers not getting spoiled\\n"
                    },
                    {
                        "username": "manasi0401",
                        "content": "I am getting runtime error on my code, can somoene explain the issue?\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count=0;\\n        int i=s.size()-1;\\n        while(s[i]==\\' \\'&& i>=0){\\n            i--;\\n        } \\nfor(i; s[i]!=\\' \\'&& i>=0; i-- ){\\n         count+=1;\\n        }\\nreturn count;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "EvilGriffith",
                        "content": "luffy stronger joyboy"
                    },
                    {
                        "username": "SyamTheCoder",
                        "content": "Test case no: 37 \"Today is a nice day\". Expected :3 instead of 5 (Today). "
                    },
                    {
                        "username": "hot_zoro2003",
                        "content": "why tf I\\'m being spoil on leetcode? "
                    },
                    {
                        "username": "t3nsor98",
                        "content": "I didn\\'t expect a one-piece reference."
                    },
                    {
                        "username": "ankitz013",
                        "content": "1. **Remove Extra Spaces:** Get rid of any spaces at the beginning and end of the string.\\n\\n2. **Find Last Word:** Starting from the end of the string, move backwards until you find the first non-space character. This will be the last word\\'s end.\\n\\n3. **Count Characters:** Count the characters from the last word\\'s end until you encounter a space or reach the start of the string. That\\'s the length of the last word.\\n\\n4. **Return Length:** Return the length you\\'ve counted.\\n\\nRemember, the goal is to find the length of the last word in the given string by looking at its characters, excluding any leading or trailing spaces."
                    },
                    {
                        "username": "anuragmahadik56",
                        "content": "This is the most simple solution you can use to solve this in GOLANG \\n`func lengthOfLastWord(s string) int {\\n\\n    str := strings.TrimRight(regexp.MustCompile(`\\\\s+`).ReplaceAllString(s, \" \"), \" \")\\n\\n    strarray := strings.Split(str, \" \")\\n    \\n    return len(strarray[len(strarray)-1])\\n}`"
                    },
                    {
                        "username": "Ninjabdul",
                        "content": "wtf why is there a One Piece spoiler "
                    },
                    {
                        "username": "amarprakash065",
                        "content": "        int count = 0;\\n        bool flag = false;\\n        for(int i = s.size()-1 ; i >= 0 ; i--)\\n        {\\n            if(s[i] != \\' \\')\\n            {\\n                flag = true ;\\n                count+= 1;\\n            }\\n\\n            else if(s[i] == \\' \\' && flag == true)\\n            {\\n                break;\\n            }\\n        }\\n\\n        return count ;"
                    }
                ]
            },
            {
                "id": 2020435,
                "content": [
                    {
                        "username": "jdenstnt",
                        "content": "Manga readers not getting spoiled\\n"
                    },
                    {
                        "username": "manasi0401",
                        "content": "I am getting runtime error on my code, can somoene explain the issue?\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count=0;\\n        int i=s.size()-1;\\n        while(s[i]==\\' \\'&& i>=0){\\n            i--;\\n        } \\nfor(i; s[i]!=\\' \\'&& i>=0; i-- ){\\n         count+=1;\\n        }\\nreturn count;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "EvilGriffith",
                        "content": "luffy stronger joyboy"
                    },
                    {
                        "username": "SyamTheCoder",
                        "content": "Test case no: 37 \"Today is a nice day\". Expected :3 instead of 5 (Today). "
                    },
                    {
                        "username": "hot_zoro2003",
                        "content": "why tf I\\'m being spoil on leetcode? "
                    },
                    {
                        "username": "t3nsor98",
                        "content": "I didn\\'t expect a one-piece reference."
                    },
                    {
                        "username": "ankitz013",
                        "content": "1. **Remove Extra Spaces:** Get rid of any spaces at the beginning and end of the string.\\n\\n2. **Find Last Word:** Starting from the end of the string, move backwards until you find the first non-space character. This will be the last word\\'s end.\\n\\n3. **Count Characters:** Count the characters from the last word\\'s end until you encounter a space or reach the start of the string. That\\'s the length of the last word.\\n\\n4. **Return Length:** Return the length you\\'ve counted.\\n\\nRemember, the goal is to find the length of the last word in the given string by looking at its characters, excluding any leading or trailing spaces."
                    },
                    {
                        "username": "anuragmahadik56",
                        "content": "This is the most simple solution you can use to solve this in GOLANG \\n`func lengthOfLastWord(s string) int {\\n\\n    str := strings.TrimRight(regexp.MustCompile(`\\\\s+`).ReplaceAllString(s, \" \"), \" \")\\n\\n    strarray := strings.Split(str, \" \")\\n    \\n    return len(strarray[len(strarray)-1])\\n}`"
                    },
                    {
                        "username": "Ninjabdul",
                        "content": "wtf why is there a One Piece spoiler "
                    },
                    {
                        "username": "amarprakash065",
                        "content": "        int count = 0;\\n        bool flag = false;\\n        for(int i = s.size()-1 ; i >= 0 ; i--)\\n        {\\n            if(s[i] != \\' \\')\\n            {\\n                flag = true ;\\n                count+= 1;\\n            }\\n\\n            else if(s[i] == \\' \\' && flag == true)\\n            {\\n                break;\\n            }\\n        }\\n\\n        return count ;"
                    }
                ]
            },
            {
                "id": 2015882,
                "content": [
                    {
                        "username": "jdenstnt",
                        "content": "Manga readers not getting spoiled\\n"
                    },
                    {
                        "username": "manasi0401",
                        "content": "I am getting runtime error on my code, can somoene explain the issue?\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count=0;\\n        int i=s.size()-1;\\n        while(s[i]==\\' \\'&& i>=0){\\n            i--;\\n        } \\nfor(i; s[i]!=\\' \\'&& i>=0; i-- ){\\n         count+=1;\\n        }\\nreturn count;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "EvilGriffith",
                        "content": "luffy stronger joyboy"
                    },
                    {
                        "username": "SyamTheCoder",
                        "content": "Test case no: 37 \"Today is a nice day\". Expected :3 instead of 5 (Today). "
                    },
                    {
                        "username": "hot_zoro2003",
                        "content": "why tf I\\'m being spoil on leetcode? "
                    },
                    {
                        "username": "t3nsor98",
                        "content": "I didn\\'t expect a one-piece reference."
                    },
                    {
                        "username": "ankitz013",
                        "content": "1. **Remove Extra Spaces:** Get rid of any spaces at the beginning and end of the string.\\n\\n2. **Find Last Word:** Starting from the end of the string, move backwards until you find the first non-space character. This will be the last word\\'s end.\\n\\n3. **Count Characters:** Count the characters from the last word\\'s end until you encounter a space or reach the start of the string. That\\'s the length of the last word.\\n\\n4. **Return Length:** Return the length you\\'ve counted.\\n\\nRemember, the goal is to find the length of the last word in the given string by looking at its characters, excluding any leading or trailing spaces."
                    },
                    {
                        "username": "anuragmahadik56",
                        "content": "This is the most simple solution you can use to solve this in GOLANG \\n`func lengthOfLastWord(s string) int {\\n\\n    str := strings.TrimRight(regexp.MustCompile(`\\\\s+`).ReplaceAllString(s, \" \"), \" \")\\n\\n    strarray := strings.Split(str, \" \")\\n    \\n    return len(strarray[len(strarray)-1])\\n}`"
                    },
                    {
                        "username": "Ninjabdul",
                        "content": "wtf why is there a One Piece spoiler "
                    },
                    {
                        "username": "amarprakash065",
                        "content": "        int count = 0;\\n        bool flag = false;\\n        for(int i = s.size()-1 ; i >= 0 ; i--)\\n        {\\n            if(s[i] != \\' \\')\\n            {\\n                flag = true ;\\n                count+= 1;\\n            }\\n\\n            else if(s[i] == \\' \\' && flag == true)\\n            {\\n                break;\\n            }\\n        }\\n\\n        return count ;"
                    }
                ]
            },
            {
                "id": 2012949,
                "content": [
                    {
                        "username": "jdenstnt",
                        "content": "Manga readers not getting spoiled\\n"
                    },
                    {
                        "username": "manasi0401",
                        "content": "I am getting runtime error on my code, can somoene explain the issue?\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count=0;\\n        int i=s.size()-1;\\n        while(s[i]==\\' \\'&& i>=0){\\n            i--;\\n        } \\nfor(i; s[i]!=\\' \\'&& i>=0; i-- ){\\n         count+=1;\\n        }\\nreturn count;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "EvilGriffith",
                        "content": "luffy stronger joyboy"
                    },
                    {
                        "username": "SyamTheCoder",
                        "content": "Test case no: 37 \"Today is a nice day\". Expected :3 instead of 5 (Today). "
                    },
                    {
                        "username": "hot_zoro2003",
                        "content": "why tf I\\'m being spoil on leetcode? "
                    },
                    {
                        "username": "t3nsor98",
                        "content": "I didn\\'t expect a one-piece reference."
                    },
                    {
                        "username": "ankitz013",
                        "content": "1. **Remove Extra Spaces:** Get rid of any spaces at the beginning and end of the string.\\n\\n2. **Find Last Word:** Starting from the end of the string, move backwards until you find the first non-space character. This will be the last word\\'s end.\\n\\n3. **Count Characters:** Count the characters from the last word\\'s end until you encounter a space or reach the start of the string. That\\'s the length of the last word.\\n\\n4. **Return Length:** Return the length you\\'ve counted.\\n\\nRemember, the goal is to find the length of the last word in the given string by looking at its characters, excluding any leading or trailing spaces."
                    },
                    {
                        "username": "anuragmahadik56",
                        "content": "This is the most simple solution you can use to solve this in GOLANG \\n`func lengthOfLastWord(s string) int {\\n\\n    str := strings.TrimRight(regexp.MustCompile(`\\\\s+`).ReplaceAllString(s, \" \"), \" \")\\n\\n    strarray := strings.Split(str, \" \")\\n    \\n    return len(strarray[len(strarray)-1])\\n}`"
                    },
                    {
                        "username": "Ninjabdul",
                        "content": "wtf why is there a One Piece spoiler "
                    },
                    {
                        "username": "amarprakash065",
                        "content": "        int count = 0;\\n        bool flag = false;\\n        for(int i = s.size()-1 ; i >= 0 ; i--)\\n        {\\n            if(s[i] != \\' \\')\\n            {\\n                flag = true ;\\n                count+= 1;\\n            }\\n\\n            else if(s[i] == \\' \\' && flag == true)\\n            {\\n                break;\\n            }\\n        }\\n\\n        return count ;"
                    }
                ]
            },
            {
                "id": 2012690,
                "content": [
                    {
                        "username": "jdenstnt",
                        "content": "Manga readers not getting spoiled\\n"
                    },
                    {
                        "username": "manasi0401",
                        "content": "I am getting runtime error on my code, can somoene explain the issue?\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int count=0;\\n        int i=s.size()-1;\\n        while(s[i]==\\' \\'&& i>=0){\\n            i--;\\n        } \\nfor(i; s[i]!=\\' \\'&& i>=0; i-- ){\\n         count+=1;\\n        }\\nreturn count;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "EvilGriffith",
                        "content": "luffy stronger joyboy"
                    },
                    {
                        "username": "SyamTheCoder",
                        "content": "Test case no: 37 \"Today is a nice day\". Expected :3 instead of 5 (Today). "
                    },
                    {
                        "username": "hot_zoro2003",
                        "content": "why tf I\\'m being spoil on leetcode? "
                    },
                    {
                        "username": "t3nsor98",
                        "content": "I didn\\'t expect a one-piece reference."
                    },
                    {
                        "username": "ankitz013",
                        "content": "1. **Remove Extra Spaces:** Get rid of any spaces at the beginning and end of the string.\\n\\n2. **Find Last Word:** Starting from the end of the string, move backwards until you find the first non-space character. This will be the last word\\'s end.\\n\\n3. **Count Characters:** Count the characters from the last word\\'s end until you encounter a space or reach the start of the string. That\\'s the length of the last word.\\n\\n4. **Return Length:** Return the length you\\'ve counted.\\n\\nRemember, the goal is to find the length of the last word in the given string by looking at its characters, excluding any leading or trailing spaces."
                    },
                    {
                        "username": "anuragmahadik56",
                        "content": "This is the most simple solution you can use to solve this in GOLANG \\n`func lengthOfLastWord(s string) int {\\n\\n    str := strings.TrimRight(regexp.MustCompile(`\\\\s+`).ReplaceAllString(s, \" \"), \" \")\\n\\n    strarray := strings.Split(str, \" \")\\n    \\n    return len(strarray[len(strarray)-1])\\n}`"
                    },
                    {
                        "username": "Ninjabdul",
                        "content": "wtf why is there a One Piece spoiler "
                    },
                    {
                        "username": "amarprakash065",
                        "content": "        int count = 0;\\n        bool flag = false;\\n        for(int i = s.size()-1 ; i >= 0 ; i--)\\n        {\\n            if(s[i] != \\' \\')\\n            {\\n                flag = true ;\\n                count+= 1;\\n            }\\n\\n            else if(s[i] == \\' \\' && flag == true)\\n            {\\n                break;\\n            }\\n        }\\n\\n        return count ;"
                    }
                ]
            },
            {
                "id": 2004640,
                "content": [
                    {
                        "username": "ravithemorree",
                        "content": "Simple Count the last word length"
                    },
                    {
                        "username": "Jahongir_Doniyarov",
                        "content": "var lengthOfLastWord = function(s) {\\n    let String = s.trim()\\n    let newString = String.split(\\' \\')\\n    let lastWords  = newString.length - 1\\n    return (newString[lastWords].length)\\n};"
                    },
                    {
                        "username": "HaifonixHDx",
                        "content": "Report the spoiler "
                    },
                    {
                        "username": "vaibhav2112",
                        "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i = s.length()-1;\\n        while(s[i] == \\' \\'){\\n            i--;\\n        }\\n\\n        int ans = 0;\\n        while(i >= 0 && s[i] != \\' \\'){\\n            i--;\\n            ans++;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "This problem is excellent for practicing basic string manipulation and traversal techniques, including working with substrings and understanding string indices."
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question is easy and can be done with the help of string functions"
                    },
                    {
                        "username": "yajasarora",
                        "content": "below is my code and it\\'s NOT WORKING!!\\ncan anyone help me with whats the issue here?\\n\\n `class Solution {`\\n`    public int lengthOfLastWord(String s) {`\\n`        int j=0;`\\n`        char[] ss=s.toCharArray();`\\n`        for (int i=ss.length-1;i<=0;i--) {`\\n`                if (ss[i]==\\' \\') {`\\n`                    continue;`\\n`                }`\\n`                while (ss[i]!=\\' \\') {`\\n`                    j++;`\\n`                    i--;`\\n`                }`\\n`                if(j>0) {`\\n`                    break;`\\n`                }`\\n`        }`\\n`        return j;`\\n`    }`\\n`}`"
                    },
                    {
                        "username": "dworkinfromchaos",
                        "content": "The One Piece Is Real :)"
                    },
                    {
                        "username": "tejasbhoyar19",
                        "content": "wow, i certainly didn\\'t expect to get a Brawl Stars reference while solving a freaking leetcode problem,lol."
                    },
                    {
                        "username": "rishabh_101",
                        "content": "Tip : Use Single Quote operator to compare a empty space instead of double space. "
                    }
                ]
            },
            {
                "id": 2002761,
                "content": [
                    {
                        "username": "ravithemorree",
                        "content": "Simple Count the last word length"
                    },
                    {
                        "username": "Jahongir_Doniyarov",
                        "content": "var lengthOfLastWord = function(s) {\\n    let String = s.trim()\\n    let newString = String.split(\\' \\')\\n    let lastWords  = newString.length - 1\\n    return (newString[lastWords].length)\\n};"
                    },
                    {
                        "username": "HaifonixHDx",
                        "content": "Report the spoiler "
                    },
                    {
                        "username": "vaibhav2112",
                        "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i = s.length()-1;\\n        while(s[i] == \\' \\'){\\n            i--;\\n        }\\n\\n        int ans = 0;\\n        while(i >= 0 && s[i] != \\' \\'){\\n            i--;\\n            ans++;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "This problem is excellent for practicing basic string manipulation and traversal techniques, including working with substrings and understanding string indices."
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question is easy and can be done with the help of string functions"
                    },
                    {
                        "username": "yajasarora",
                        "content": "below is my code and it\\'s NOT WORKING!!\\ncan anyone help me with whats the issue here?\\n\\n `class Solution {`\\n`    public int lengthOfLastWord(String s) {`\\n`        int j=0;`\\n`        char[] ss=s.toCharArray();`\\n`        for (int i=ss.length-1;i<=0;i--) {`\\n`                if (ss[i]==\\' \\') {`\\n`                    continue;`\\n`                }`\\n`                while (ss[i]!=\\' \\') {`\\n`                    j++;`\\n`                    i--;`\\n`                }`\\n`                if(j>0) {`\\n`                    break;`\\n`                }`\\n`        }`\\n`        return j;`\\n`    }`\\n`}`"
                    },
                    {
                        "username": "dworkinfromchaos",
                        "content": "The One Piece Is Real :)"
                    },
                    {
                        "username": "tejasbhoyar19",
                        "content": "wow, i certainly didn\\'t expect to get a Brawl Stars reference while solving a freaking leetcode problem,lol."
                    },
                    {
                        "username": "rishabh_101",
                        "content": "Tip : Use Single Quote operator to compare a empty space instead of double space. "
                    }
                ]
            },
            {
                "id": 1997641,
                "content": [
                    {
                        "username": "ravithemorree",
                        "content": "Simple Count the last word length"
                    },
                    {
                        "username": "Jahongir_Doniyarov",
                        "content": "var lengthOfLastWord = function(s) {\\n    let String = s.trim()\\n    let newString = String.split(\\' \\')\\n    let lastWords  = newString.length - 1\\n    return (newString[lastWords].length)\\n};"
                    },
                    {
                        "username": "HaifonixHDx",
                        "content": "Report the spoiler "
                    },
                    {
                        "username": "vaibhav2112",
                        "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i = s.length()-1;\\n        while(s[i] == \\' \\'){\\n            i--;\\n        }\\n\\n        int ans = 0;\\n        while(i >= 0 && s[i] != \\' \\'){\\n            i--;\\n            ans++;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "This problem is excellent for practicing basic string manipulation and traversal techniques, including working with substrings and understanding string indices."
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question is easy and can be done with the help of string functions"
                    },
                    {
                        "username": "yajasarora",
                        "content": "below is my code and it\\'s NOT WORKING!!\\ncan anyone help me with whats the issue here?\\n\\n `class Solution {`\\n`    public int lengthOfLastWord(String s) {`\\n`        int j=0;`\\n`        char[] ss=s.toCharArray();`\\n`        for (int i=ss.length-1;i<=0;i--) {`\\n`                if (ss[i]==\\' \\') {`\\n`                    continue;`\\n`                }`\\n`                while (ss[i]!=\\' \\') {`\\n`                    j++;`\\n`                    i--;`\\n`                }`\\n`                if(j>0) {`\\n`                    break;`\\n`                }`\\n`        }`\\n`        return j;`\\n`    }`\\n`}`"
                    },
                    {
                        "username": "dworkinfromchaos",
                        "content": "The One Piece Is Real :)"
                    },
                    {
                        "username": "tejasbhoyar19",
                        "content": "wow, i certainly didn\\'t expect to get a Brawl Stars reference while solving a freaking leetcode problem,lol."
                    },
                    {
                        "username": "rishabh_101",
                        "content": "Tip : Use Single Quote operator to compare a empty space instead of double space. "
                    }
                ]
            },
            {
                "id": 1995022,
                "content": [
                    {
                        "username": "ravithemorree",
                        "content": "Simple Count the last word length"
                    },
                    {
                        "username": "Jahongir_Doniyarov",
                        "content": "var lengthOfLastWord = function(s) {\\n    let String = s.trim()\\n    let newString = String.split(\\' \\')\\n    let lastWords  = newString.length - 1\\n    return (newString[lastWords].length)\\n};"
                    },
                    {
                        "username": "HaifonixHDx",
                        "content": "Report the spoiler "
                    },
                    {
                        "username": "vaibhav2112",
                        "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i = s.length()-1;\\n        while(s[i] == \\' \\'){\\n            i--;\\n        }\\n\\n        int ans = 0;\\n        while(i >= 0 && s[i] != \\' \\'){\\n            i--;\\n            ans++;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "This problem is excellent for practicing basic string manipulation and traversal techniques, including working with substrings and understanding string indices."
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question is easy and can be done with the help of string functions"
                    },
                    {
                        "username": "yajasarora",
                        "content": "below is my code and it\\'s NOT WORKING!!\\ncan anyone help me with whats the issue here?\\n\\n `class Solution {`\\n`    public int lengthOfLastWord(String s) {`\\n`        int j=0;`\\n`        char[] ss=s.toCharArray();`\\n`        for (int i=ss.length-1;i<=0;i--) {`\\n`                if (ss[i]==\\' \\') {`\\n`                    continue;`\\n`                }`\\n`                while (ss[i]!=\\' \\') {`\\n`                    j++;`\\n`                    i--;`\\n`                }`\\n`                if(j>0) {`\\n`                    break;`\\n`                }`\\n`        }`\\n`        return j;`\\n`    }`\\n`}`"
                    },
                    {
                        "username": "dworkinfromchaos",
                        "content": "The One Piece Is Real :)"
                    },
                    {
                        "username": "tejasbhoyar19",
                        "content": "wow, i certainly didn\\'t expect to get a Brawl Stars reference while solving a freaking leetcode problem,lol."
                    },
                    {
                        "username": "rishabh_101",
                        "content": "Tip : Use Single Quote operator to compare a empty space instead of double space. "
                    }
                ]
            },
            {
                "id": 1994928,
                "content": [
                    {
                        "username": "ravithemorree",
                        "content": "Simple Count the last word length"
                    },
                    {
                        "username": "Jahongir_Doniyarov",
                        "content": "var lengthOfLastWord = function(s) {\\n    let String = s.trim()\\n    let newString = String.split(\\' \\')\\n    let lastWords  = newString.length - 1\\n    return (newString[lastWords].length)\\n};"
                    },
                    {
                        "username": "HaifonixHDx",
                        "content": "Report the spoiler "
                    },
                    {
                        "username": "vaibhav2112",
                        "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i = s.length()-1;\\n        while(s[i] == \\' \\'){\\n            i--;\\n        }\\n\\n        int ans = 0;\\n        while(i >= 0 && s[i] != \\' \\'){\\n            i--;\\n            ans++;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "This problem is excellent for practicing basic string manipulation and traversal techniques, including working with substrings and understanding string indices."
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question is easy and can be done with the help of string functions"
                    },
                    {
                        "username": "yajasarora",
                        "content": "below is my code and it\\'s NOT WORKING!!\\ncan anyone help me with whats the issue here?\\n\\n `class Solution {`\\n`    public int lengthOfLastWord(String s) {`\\n`        int j=0;`\\n`        char[] ss=s.toCharArray();`\\n`        for (int i=ss.length-1;i<=0;i--) {`\\n`                if (ss[i]==\\' \\') {`\\n`                    continue;`\\n`                }`\\n`                while (ss[i]!=\\' \\') {`\\n`                    j++;`\\n`                    i--;`\\n`                }`\\n`                if(j>0) {`\\n`                    break;`\\n`                }`\\n`        }`\\n`        return j;`\\n`    }`\\n`}`"
                    },
                    {
                        "username": "dworkinfromchaos",
                        "content": "The One Piece Is Real :)"
                    },
                    {
                        "username": "tejasbhoyar19",
                        "content": "wow, i certainly didn\\'t expect to get a Brawl Stars reference while solving a freaking leetcode problem,lol."
                    },
                    {
                        "username": "rishabh_101",
                        "content": "Tip : Use Single Quote operator to compare a empty space instead of double space. "
                    }
                ]
            },
            {
                "id": 1990731,
                "content": [
                    {
                        "username": "ravithemorree",
                        "content": "Simple Count the last word length"
                    },
                    {
                        "username": "Jahongir_Doniyarov",
                        "content": "var lengthOfLastWord = function(s) {\\n    let String = s.trim()\\n    let newString = String.split(\\' \\')\\n    let lastWords  = newString.length - 1\\n    return (newString[lastWords].length)\\n};"
                    },
                    {
                        "username": "HaifonixHDx",
                        "content": "Report the spoiler "
                    },
                    {
                        "username": "vaibhav2112",
                        "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i = s.length()-1;\\n        while(s[i] == \\' \\'){\\n            i--;\\n        }\\n\\n        int ans = 0;\\n        while(i >= 0 && s[i] != \\' \\'){\\n            i--;\\n            ans++;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "This problem is excellent for practicing basic string manipulation and traversal techniques, including working with substrings and understanding string indices."
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question is easy and can be done with the help of string functions"
                    },
                    {
                        "username": "yajasarora",
                        "content": "below is my code and it\\'s NOT WORKING!!\\ncan anyone help me with whats the issue here?\\n\\n `class Solution {`\\n`    public int lengthOfLastWord(String s) {`\\n`        int j=0;`\\n`        char[] ss=s.toCharArray();`\\n`        for (int i=ss.length-1;i<=0;i--) {`\\n`                if (ss[i]==\\' \\') {`\\n`                    continue;`\\n`                }`\\n`                while (ss[i]!=\\' \\') {`\\n`                    j++;`\\n`                    i--;`\\n`                }`\\n`                if(j>0) {`\\n`                    break;`\\n`                }`\\n`        }`\\n`        return j;`\\n`    }`\\n`}`"
                    },
                    {
                        "username": "dworkinfromchaos",
                        "content": "The One Piece Is Real :)"
                    },
                    {
                        "username": "tejasbhoyar19",
                        "content": "wow, i certainly didn\\'t expect to get a Brawl Stars reference while solving a freaking leetcode problem,lol."
                    },
                    {
                        "username": "rishabh_101",
                        "content": "Tip : Use Single Quote operator to compare a empty space instead of double space. "
                    }
                ]
            },
            {
                "id": 1989036,
                "content": [
                    {
                        "username": "ravithemorree",
                        "content": "Simple Count the last word length"
                    },
                    {
                        "username": "Jahongir_Doniyarov",
                        "content": "var lengthOfLastWord = function(s) {\\n    let String = s.trim()\\n    let newString = String.split(\\' \\')\\n    let lastWords  = newString.length - 1\\n    return (newString[lastWords].length)\\n};"
                    },
                    {
                        "username": "HaifonixHDx",
                        "content": "Report the spoiler "
                    },
                    {
                        "username": "vaibhav2112",
                        "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i = s.length()-1;\\n        while(s[i] == \\' \\'){\\n            i--;\\n        }\\n\\n        int ans = 0;\\n        while(i >= 0 && s[i] != \\' \\'){\\n            i--;\\n            ans++;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "This problem is excellent for practicing basic string manipulation and traversal techniques, including working with substrings and understanding string indices."
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question is easy and can be done with the help of string functions"
                    },
                    {
                        "username": "yajasarora",
                        "content": "below is my code and it\\'s NOT WORKING!!\\ncan anyone help me with whats the issue here?\\n\\n `class Solution {`\\n`    public int lengthOfLastWord(String s) {`\\n`        int j=0;`\\n`        char[] ss=s.toCharArray();`\\n`        for (int i=ss.length-1;i<=0;i--) {`\\n`                if (ss[i]==\\' \\') {`\\n`                    continue;`\\n`                }`\\n`                while (ss[i]!=\\' \\') {`\\n`                    j++;`\\n`                    i--;`\\n`                }`\\n`                if(j>0) {`\\n`                    break;`\\n`                }`\\n`        }`\\n`        return j;`\\n`    }`\\n`}`"
                    },
                    {
                        "username": "dworkinfromchaos",
                        "content": "The One Piece Is Real :)"
                    },
                    {
                        "username": "tejasbhoyar19",
                        "content": "wow, i certainly didn\\'t expect to get a Brawl Stars reference while solving a freaking leetcode problem,lol."
                    },
                    {
                        "username": "rishabh_101",
                        "content": "Tip : Use Single Quote operator to compare a empty space instead of double space. "
                    }
                ]
            },
            {
                "id": 1984304,
                "content": [
                    {
                        "username": "ravithemorree",
                        "content": "Simple Count the last word length"
                    },
                    {
                        "username": "Jahongir_Doniyarov",
                        "content": "var lengthOfLastWord = function(s) {\\n    let String = s.trim()\\n    let newString = String.split(\\' \\')\\n    let lastWords  = newString.length - 1\\n    return (newString[lastWords].length)\\n};"
                    },
                    {
                        "username": "HaifonixHDx",
                        "content": "Report the spoiler "
                    },
                    {
                        "username": "vaibhav2112",
                        "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i = s.length()-1;\\n        while(s[i] == \\' \\'){\\n            i--;\\n        }\\n\\n        int ans = 0;\\n        while(i >= 0 && s[i] != \\' \\'){\\n            i--;\\n            ans++;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "This problem is excellent for practicing basic string manipulation and traversal techniques, including working with substrings and understanding string indices."
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question is easy and can be done with the help of string functions"
                    },
                    {
                        "username": "yajasarora",
                        "content": "below is my code and it\\'s NOT WORKING!!\\ncan anyone help me with whats the issue here?\\n\\n `class Solution {`\\n`    public int lengthOfLastWord(String s) {`\\n`        int j=0;`\\n`        char[] ss=s.toCharArray();`\\n`        for (int i=ss.length-1;i<=0;i--) {`\\n`                if (ss[i]==\\' \\') {`\\n`                    continue;`\\n`                }`\\n`                while (ss[i]!=\\' \\') {`\\n`                    j++;`\\n`                    i--;`\\n`                }`\\n`                if(j>0) {`\\n`                    break;`\\n`                }`\\n`        }`\\n`        return j;`\\n`    }`\\n`}`"
                    },
                    {
                        "username": "dworkinfromchaos",
                        "content": "The One Piece Is Real :)"
                    },
                    {
                        "username": "tejasbhoyar19",
                        "content": "wow, i certainly didn\\'t expect to get a Brawl Stars reference while solving a freaking leetcode problem,lol."
                    },
                    {
                        "username": "rishabh_101",
                        "content": "Tip : Use Single Quote operator to compare a empty space instead of double space. "
                    }
                ]
            },
            {
                "id": 1980834,
                "content": [
                    {
                        "username": "ravithemorree",
                        "content": "Simple Count the last word length"
                    },
                    {
                        "username": "Jahongir_Doniyarov",
                        "content": "var lengthOfLastWord = function(s) {\\n    let String = s.trim()\\n    let newString = String.split(\\' \\')\\n    let lastWords  = newString.length - 1\\n    return (newString[lastWords].length)\\n};"
                    },
                    {
                        "username": "HaifonixHDx",
                        "content": "Report the spoiler "
                    },
                    {
                        "username": "vaibhav2112",
                        "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i = s.length()-1;\\n        while(s[i] == \\' \\'){\\n            i--;\\n        }\\n\\n        int ans = 0;\\n        while(i >= 0 && s[i] != \\' \\'){\\n            i--;\\n            ans++;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "This problem is excellent for practicing basic string manipulation and traversal techniques, including working with substrings and understanding string indices."
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question is easy and can be done with the help of string functions"
                    },
                    {
                        "username": "yajasarora",
                        "content": "below is my code and it\\'s NOT WORKING!!\\ncan anyone help me with whats the issue here?\\n\\n `class Solution {`\\n`    public int lengthOfLastWord(String s) {`\\n`        int j=0;`\\n`        char[] ss=s.toCharArray();`\\n`        for (int i=ss.length-1;i<=0;i--) {`\\n`                if (ss[i]==\\' \\') {`\\n`                    continue;`\\n`                }`\\n`                while (ss[i]!=\\' \\') {`\\n`                    j++;`\\n`                    i--;`\\n`                }`\\n`                if(j>0) {`\\n`                    break;`\\n`                }`\\n`        }`\\n`        return j;`\\n`    }`\\n`}`"
                    },
                    {
                        "username": "dworkinfromchaos",
                        "content": "The One Piece Is Real :)"
                    },
                    {
                        "username": "tejasbhoyar19",
                        "content": "wow, i certainly didn\\'t expect to get a Brawl Stars reference while solving a freaking leetcode problem,lol."
                    },
                    {
                        "username": "rishabh_101",
                        "content": "Tip : Use Single Quote operator to compare a empty space instead of double space. "
                    }
                ]
            },
            {
                "id": 1979754,
                "content": [
                    {
                        "username": "ravithemorree",
                        "content": "Simple Count the last word length"
                    },
                    {
                        "username": "Jahongir_Doniyarov",
                        "content": "var lengthOfLastWord = function(s) {\\n    let String = s.trim()\\n    let newString = String.split(\\' \\')\\n    let lastWords  = newString.length - 1\\n    return (newString[lastWords].length)\\n};"
                    },
                    {
                        "username": "HaifonixHDx",
                        "content": "Report the spoiler "
                    },
                    {
                        "username": "vaibhav2112",
                        "content": "```\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int i = s.length()-1;\\n        while(s[i] == \\' \\'){\\n            i--;\\n        }\\n\\n        int ans = 0;\\n        while(i >= 0 && s[i] != \\' \\'){\\n            i--;\\n            ans++;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "This problem is excellent for practicing basic string manipulation and traversal techniques, including working with substrings and understanding string indices."
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question is easy and can be done with the help of string functions"
                    },
                    {
                        "username": "yajasarora",
                        "content": "below is my code and it\\'s NOT WORKING!!\\ncan anyone help me with whats the issue here?\\n\\n `class Solution {`\\n`    public int lengthOfLastWord(String s) {`\\n`        int j=0;`\\n`        char[] ss=s.toCharArray();`\\n`        for (int i=ss.length-1;i<=0;i--) {`\\n`                if (ss[i]==\\' \\') {`\\n`                    continue;`\\n`                }`\\n`                while (ss[i]!=\\' \\') {`\\n`                    j++;`\\n`                    i--;`\\n`                }`\\n`                if(j>0) {`\\n`                    break;`\\n`                }`\\n`        }`\\n`        return j;`\\n`    }`\\n`}`"
                    },
                    {
                        "username": "dworkinfromchaos",
                        "content": "The One Piece Is Real :)"
                    },
                    {
                        "username": "tejasbhoyar19",
                        "content": "wow, i certainly didn\\'t expect to get a Brawl Stars reference while solving a freaking leetcode problem,lol."
                    },
                    {
                        "username": "rishabh_101",
                        "content": "Tip : Use Single Quote operator to compare a empty space instead of double space. "
                    }
                ]
            },
            {
                "id": 1979554,
                "content": [
                    {
                        "username": "shubhamparad19",
                        "content": "Just few days to go guys on 6th of August this leetcode string will return as true"
                    },
                    {
                        "username": "mihirbhatkar",
                        "content": "Abey chutiye One Piece ka hi spoiler dena tha kya"
                    },
                    {
                        "username": "hendraeffendi96",
                        "content": "i have a question how long is this problem has the spoiler test case?"
                    },
                    {
                        "username": "pierreharbin",
                        "content": "Getting spoiled by LeetCode is crazy lolol"
                    },
                    {
                        "username": "belepod",
                        "content": "convet string to array, convert last element of array to character array. use for loop and \"str.chatAt\", then return the length of character array"
                    },
                    {
                        "username": "belepod",
                        "content": "heyyy, thats major spoiler right there."
                    },
                    {
                        "username": "LoganWhite26",
                        "content": "THE ONE PIECE IS REAL! while loop until the last item in list isn\\'t empty."
                    },
                    {
                        "username": "abhishek2124",
                        "content": "why this code is not working \\nint c=0;\\nfor(int i=s.size()-1;i>=0;i--){\\n    if(s[i] != \\' \\') c++;\\n}\\nreturn c;\\n\\nwhereas this is working\\nint count = 0;\\n    int i = s.length() - 1;\\n    while (i >= 0 && s[i] == \\' \\') i--;\\n    while (i >= 0 && s[i] != \\' \\') count++, i--;\\n    \\n    return count;"
                    },
                    {
                        "username": "Kromydas",
                        "content": "Pretty sure the difference is that one of them (namely the first one) has only one loop, while the second one as 2 loops. Note that the second while loop in the second code is different that the first while loop. The `s[i] != \\' \\'` and `s[i] == \\' \\'`are different."
                    },
                    {
                        "username": "sevanix",
                        "content": "I created a solution with function int , not class. "
                    },
                    {
                        "username": "pimping_Jeep03",
                        "content": "Hello, I am a beginner and I can\\'t seem to figure out where im going wrong. I would appreciate any help thank you in advance. \\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n    String s = \"luffy is still joyboy\";\\n    int lenghtOfLastWord = 0;\\n    String[] words = s.split(\" \");\\n    if (words.lenght>0)\\n    {\\n        lenghtOfLastWord = words[words-1].lenght();\\n    }    \\n    else \\n    {\\n        lenghtOfLastWord=0;\\n    }\\n    return lenghtOfLastWord;\\n    }\\n}"
                    },
                    {
                        "username": "Kromydas",
                        "content": "you don't need to redefine string s, it is given. When you do, your code only considers the case \"luffy is still joyboy\". \n\nAlso, is this code python or c++ or some other language? It does not look like python, as you are defining strings. It looks like c++ based off of the top of your code. If it is c++, the public int part should be `public: int lengthOfLastWord(string s) {` \n\nAlso, when defining a `string`, you cannot do `String`. There also is no `split()` function that I know of in c++. This is a python function. (That I know of). when using `words.lenght`, you forgot the `()` as well as spelled \"length\" wrong. You do this further on in the if statement. as well. I don't see anything else wrong with your code (other than the logic of using split being wrong). \n\nAnd another thing, you can't do `words[words - 1]`. `words` is an array. You can't subtract a number from it. "
                    }
                ]
            },
            {
                "id": 1969745,
                "content": [
                    {
                        "username": "shubhamparad19",
                        "content": "Just few days to go guys on 6th of August this leetcode string will return as true"
                    },
                    {
                        "username": "mihirbhatkar",
                        "content": "Abey chutiye One Piece ka hi spoiler dena tha kya"
                    },
                    {
                        "username": "hendraeffendi96",
                        "content": "i have a question how long is this problem has the spoiler test case?"
                    },
                    {
                        "username": "pierreharbin",
                        "content": "Getting spoiled by LeetCode is crazy lolol"
                    },
                    {
                        "username": "belepod",
                        "content": "convet string to array, convert last element of array to character array. use for loop and \"str.chatAt\", then return the length of character array"
                    },
                    {
                        "username": "belepod",
                        "content": "heyyy, thats major spoiler right there."
                    },
                    {
                        "username": "LoganWhite26",
                        "content": "THE ONE PIECE IS REAL! while loop until the last item in list isn\\'t empty."
                    },
                    {
                        "username": "abhishek2124",
                        "content": "why this code is not working \\nint c=0;\\nfor(int i=s.size()-1;i>=0;i--){\\n    if(s[i] != \\' \\') c++;\\n}\\nreturn c;\\n\\nwhereas this is working\\nint count = 0;\\n    int i = s.length() - 1;\\n    while (i >= 0 && s[i] == \\' \\') i--;\\n    while (i >= 0 && s[i] != \\' \\') count++, i--;\\n    \\n    return count;"
                    },
                    {
                        "username": "Kromydas",
                        "content": "Pretty sure the difference is that one of them (namely the first one) has only one loop, while the second one as 2 loops. Note that the second while loop in the second code is different that the first while loop. The `s[i] != \\' \\'` and `s[i] == \\' \\'`are different."
                    },
                    {
                        "username": "sevanix",
                        "content": "I created a solution with function int , not class. "
                    },
                    {
                        "username": "pimping_Jeep03",
                        "content": "Hello, I am a beginner and I can\\'t seem to figure out where im going wrong. I would appreciate any help thank you in advance. \\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n    String s = \"luffy is still joyboy\";\\n    int lenghtOfLastWord = 0;\\n    String[] words = s.split(\" \");\\n    if (words.lenght>0)\\n    {\\n        lenghtOfLastWord = words[words-1].lenght();\\n    }    \\n    else \\n    {\\n        lenghtOfLastWord=0;\\n    }\\n    return lenghtOfLastWord;\\n    }\\n}"
                    },
                    {
                        "username": "Kromydas",
                        "content": "you don't need to redefine string s, it is given. When you do, your code only considers the case \"luffy is still joyboy\". \n\nAlso, is this code python or c++ or some other language? It does not look like python, as you are defining strings. It looks like c++ based off of the top of your code. If it is c++, the public int part should be `public: int lengthOfLastWord(string s) {` \n\nAlso, when defining a `string`, you cannot do `String`. There also is no `split()` function that I know of in c++. This is a python function. (That I know of). when using `words.lenght`, you forgot the `()` as well as spelled \"length\" wrong. You do this further on in the if statement. as well. I don't see anything else wrong with your code (other than the logic of using split being wrong). \n\nAnd another thing, you can't do `words[words - 1]`. `words` is an array. You can't subtract a number from it. "
                    }
                ]
            },
            {
                "id": 1950302,
                "content": [
                    {
                        "username": "shubhamparad19",
                        "content": "Just few days to go guys on 6th of August this leetcode string will return as true"
                    },
                    {
                        "username": "mihirbhatkar",
                        "content": "Abey chutiye One Piece ka hi spoiler dena tha kya"
                    },
                    {
                        "username": "hendraeffendi96",
                        "content": "i have a question how long is this problem has the spoiler test case?"
                    },
                    {
                        "username": "pierreharbin",
                        "content": "Getting spoiled by LeetCode is crazy lolol"
                    },
                    {
                        "username": "belepod",
                        "content": "convet string to array, convert last element of array to character array. use for loop and \"str.chatAt\", then return the length of character array"
                    },
                    {
                        "username": "belepod",
                        "content": "heyyy, thats major spoiler right there."
                    },
                    {
                        "username": "LoganWhite26",
                        "content": "THE ONE PIECE IS REAL! while loop until the last item in list isn\\'t empty."
                    },
                    {
                        "username": "abhishek2124",
                        "content": "why this code is not working \\nint c=0;\\nfor(int i=s.size()-1;i>=0;i--){\\n    if(s[i] != \\' \\') c++;\\n}\\nreturn c;\\n\\nwhereas this is working\\nint count = 0;\\n    int i = s.length() - 1;\\n    while (i >= 0 && s[i] == \\' \\') i--;\\n    while (i >= 0 && s[i] != \\' \\') count++, i--;\\n    \\n    return count;"
                    },
                    {
                        "username": "Kromydas",
                        "content": "Pretty sure the difference is that one of them (namely the first one) has only one loop, while the second one as 2 loops. Note that the second while loop in the second code is different that the first while loop. The `s[i] != \\' \\'` and `s[i] == \\' \\'`are different."
                    },
                    {
                        "username": "sevanix",
                        "content": "I created a solution with function int , not class. "
                    },
                    {
                        "username": "pimping_Jeep03",
                        "content": "Hello, I am a beginner and I can\\'t seem to figure out where im going wrong. I would appreciate any help thank you in advance. \\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n    String s = \"luffy is still joyboy\";\\n    int lenghtOfLastWord = 0;\\n    String[] words = s.split(\" \");\\n    if (words.lenght>0)\\n    {\\n        lenghtOfLastWord = words[words-1].lenght();\\n    }    \\n    else \\n    {\\n        lenghtOfLastWord=0;\\n    }\\n    return lenghtOfLastWord;\\n    }\\n}"
                    },
                    {
                        "username": "Kromydas",
                        "content": "you don't need to redefine string s, it is given. When you do, your code only considers the case \"luffy is still joyboy\". \n\nAlso, is this code python or c++ or some other language? It does not look like python, as you are defining strings. It looks like c++ based off of the top of your code. If it is c++, the public int part should be `public: int lengthOfLastWord(string s) {` \n\nAlso, when defining a `string`, you cannot do `String`. There also is no `split()` function that I know of in c++. This is a python function. (That I know of). when using `words.lenght`, you forgot the `()` as well as spelled \"length\" wrong. You do this further on in the if statement. as well. I don't see anything else wrong with your code (other than the logic of using split being wrong). \n\nAnd another thing, you can't do `words[words - 1]`. `words` is an array. You can't subtract a number from it. "
                    }
                ]
            },
            {
                "id": 1947294,
                "content": [
                    {
                        "username": "shubhamparad19",
                        "content": "Just few days to go guys on 6th of August this leetcode string will return as true"
                    },
                    {
                        "username": "mihirbhatkar",
                        "content": "Abey chutiye One Piece ka hi spoiler dena tha kya"
                    },
                    {
                        "username": "hendraeffendi96",
                        "content": "i have a question how long is this problem has the spoiler test case?"
                    },
                    {
                        "username": "pierreharbin",
                        "content": "Getting spoiled by LeetCode is crazy lolol"
                    },
                    {
                        "username": "belepod",
                        "content": "convet string to array, convert last element of array to character array. use for loop and \"str.chatAt\", then return the length of character array"
                    },
                    {
                        "username": "belepod",
                        "content": "heyyy, thats major spoiler right there."
                    },
                    {
                        "username": "LoganWhite26",
                        "content": "THE ONE PIECE IS REAL! while loop until the last item in list isn\\'t empty."
                    },
                    {
                        "username": "abhishek2124",
                        "content": "why this code is not working \\nint c=0;\\nfor(int i=s.size()-1;i>=0;i--){\\n    if(s[i] != \\' \\') c++;\\n}\\nreturn c;\\n\\nwhereas this is working\\nint count = 0;\\n    int i = s.length() - 1;\\n    while (i >= 0 && s[i] == \\' \\') i--;\\n    while (i >= 0 && s[i] != \\' \\') count++, i--;\\n    \\n    return count;"
                    },
                    {
                        "username": "Kromydas",
                        "content": "Pretty sure the difference is that one of them (namely the first one) has only one loop, while the second one as 2 loops. Note that the second while loop in the second code is different that the first while loop. The `s[i] != \\' \\'` and `s[i] == \\' \\'`are different."
                    },
                    {
                        "username": "sevanix",
                        "content": "I created a solution with function int , not class. "
                    },
                    {
                        "username": "pimping_Jeep03",
                        "content": "Hello, I am a beginner and I can\\'t seem to figure out where im going wrong. I would appreciate any help thank you in advance. \\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n    String s = \"luffy is still joyboy\";\\n    int lenghtOfLastWord = 0;\\n    String[] words = s.split(\" \");\\n    if (words.lenght>0)\\n    {\\n        lenghtOfLastWord = words[words-1].lenght();\\n    }    \\n    else \\n    {\\n        lenghtOfLastWord=0;\\n    }\\n    return lenghtOfLastWord;\\n    }\\n}"
                    },
                    {
                        "username": "Kromydas",
                        "content": "you don't need to redefine string s, it is given. When you do, your code only considers the case \"luffy is still joyboy\". \n\nAlso, is this code python or c++ or some other language? It does not look like python, as you are defining strings. It looks like c++ based off of the top of your code. If it is c++, the public int part should be `public: int lengthOfLastWord(string s) {` \n\nAlso, when defining a `string`, you cannot do `String`. There also is no `split()` function that I know of in c++. This is a python function. (That I know of). when using `words.lenght`, you forgot the `()` as well as spelled \"length\" wrong. You do this further on in the if statement. as well. I don't see anything else wrong with your code (other than the logic of using split being wrong). \n\nAnd another thing, you can't do `words[words - 1]`. `words` is an array. You can't subtract a number from it. "
                    }
                ]
            },
            {
                "id": 1938922,
                "content": [
                    {
                        "username": "shubhamparad19",
                        "content": "Just few days to go guys on 6th of August this leetcode string will return as true"
                    },
                    {
                        "username": "mihirbhatkar",
                        "content": "Abey chutiye One Piece ka hi spoiler dena tha kya"
                    },
                    {
                        "username": "hendraeffendi96",
                        "content": "i have a question how long is this problem has the spoiler test case?"
                    },
                    {
                        "username": "pierreharbin",
                        "content": "Getting spoiled by LeetCode is crazy lolol"
                    },
                    {
                        "username": "belepod",
                        "content": "convet string to array, convert last element of array to character array. use for loop and \"str.chatAt\", then return the length of character array"
                    },
                    {
                        "username": "belepod",
                        "content": "heyyy, thats major spoiler right there."
                    },
                    {
                        "username": "LoganWhite26",
                        "content": "THE ONE PIECE IS REAL! while loop until the last item in list isn\\'t empty."
                    },
                    {
                        "username": "abhishek2124",
                        "content": "why this code is not working \\nint c=0;\\nfor(int i=s.size()-1;i>=0;i--){\\n    if(s[i] != \\' \\') c++;\\n}\\nreturn c;\\n\\nwhereas this is working\\nint count = 0;\\n    int i = s.length() - 1;\\n    while (i >= 0 && s[i] == \\' \\') i--;\\n    while (i >= 0 && s[i] != \\' \\') count++, i--;\\n    \\n    return count;"
                    },
                    {
                        "username": "Kromydas",
                        "content": "Pretty sure the difference is that one of them (namely the first one) has only one loop, while the second one as 2 loops. Note that the second while loop in the second code is different that the first while loop. The `s[i] != \\' \\'` and `s[i] == \\' \\'`are different."
                    },
                    {
                        "username": "sevanix",
                        "content": "I created a solution with function int , not class. "
                    },
                    {
                        "username": "pimping_Jeep03",
                        "content": "Hello, I am a beginner and I can\\'t seem to figure out where im going wrong. I would appreciate any help thank you in advance. \\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n    String s = \"luffy is still joyboy\";\\n    int lenghtOfLastWord = 0;\\n    String[] words = s.split(\" \");\\n    if (words.lenght>0)\\n    {\\n        lenghtOfLastWord = words[words-1].lenght();\\n    }    \\n    else \\n    {\\n        lenghtOfLastWord=0;\\n    }\\n    return lenghtOfLastWord;\\n    }\\n}"
                    },
                    {
                        "username": "Kromydas",
                        "content": "you don't need to redefine string s, it is given. When you do, your code only considers the case \"luffy is still joyboy\". \n\nAlso, is this code python or c++ or some other language? It does not look like python, as you are defining strings. It looks like c++ based off of the top of your code. If it is c++, the public int part should be `public: int lengthOfLastWord(string s) {` \n\nAlso, when defining a `string`, you cannot do `String`. There also is no `split()` function that I know of in c++. This is a python function. (That I know of). when using `words.lenght`, you forgot the `()` as well as spelled \"length\" wrong. You do this further on in the if statement. as well. I don't see anything else wrong with your code (other than the logic of using split being wrong). \n\nAnd another thing, you can't do `words[words - 1]`. `words` is an array. You can't subtract a number from it. "
                    }
                ]
            },
            {
                "id": 1938885,
                "content": [
                    {
                        "username": "shubhamparad19",
                        "content": "Just few days to go guys on 6th of August this leetcode string will return as true"
                    },
                    {
                        "username": "mihirbhatkar",
                        "content": "Abey chutiye One Piece ka hi spoiler dena tha kya"
                    },
                    {
                        "username": "hendraeffendi96",
                        "content": "i have a question how long is this problem has the spoiler test case?"
                    },
                    {
                        "username": "pierreharbin",
                        "content": "Getting spoiled by LeetCode is crazy lolol"
                    },
                    {
                        "username": "belepod",
                        "content": "convet string to array, convert last element of array to character array. use for loop and \"str.chatAt\", then return the length of character array"
                    },
                    {
                        "username": "belepod",
                        "content": "heyyy, thats major spoiler right there."
                    },
                    {
                        "username": "LoganWhite26",
                        "content": "THE ONE PIECE IS REAL! while loop until the last item in list isn\\'t empty."
                    },
                    {
                        "username": "abhishek2124",
                        "content": "why this code is not working \\nint c=0;\\nfor(int i=s.size()-1;i>=0;i--){\\n    if(s[i] != \\' \\') c++;\\n}\\nreturn c;\\n\\nwhereas this is working\\nint count = 0;\\n    int i = s.length() - 1;\\n    while (i >= 0 && s[i] == \\' \\') i--;\\n    while (i >= 0 && s[i] != \\' \\') count++, i--;\\n    \\n    return count;"
                    },
                    {
                        "username": "Kromydas",
                        "content": "Pretty sure the difference is that one of them (namely the first one) has only one loop, while the second one as 2 loops. Note that the second while loop in the second code is different that the first while loop. The `s[i] != \\' \\'` and `s[i] == \\' \\'`are different."
                    },
                    {
                        "username": "sevanix",
                        "content": "I created a solution with function int , not class. "
                    },
                    {
                        "username": "pimping_Jeep03",
                        "content": "Hello, I am a beginner and I can\\'t seem to figure out where im going wrong. I would appreciate any help thank you in advance. \\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n    String s = \"luffy is still joyboy\";\\n    int lenghtOfLastWord = 0;\\n    String[] words = s.split(\" \");\\n    if (words.lenght>0)\\n    {\\n        lenghtOfLastWord = words[words-1].lenght();\\n    }    \\n    else \\n    {\\n        lenghtOfLastWord=0;\\n    }\\n    return lenghtOfLastWord;\\n    }\\n}"
                    },
                    {
                        "username": "Kromydas",
                        "content": "you don't need to redefine string s, it is given. When you do, your code only considers the case \"luffy is still joyboy\". \n\nAlso, is this code python or c++ or some other language? It does not look like python, as you are defining strings. It looks like c++ based off of the top of your code. If it is c++, the public int part should be `public: int lengthOfLastWord(string s) {` \n\nAlso, when defining a `string`, you cannot do `String`. There also is no `split()` function that I know of in c++. This is a python function. (That I know of). when using `words.lenght`, you forgot the `()` as well as spelled \"length\" wrong. You do this further on in the if statement. as well. I don't see anything else wrong with your code (other than the logic of using split being wrong). \n\nAnd another thing, you can't do `words[words - 1]`. `words` is an array. You can't subtract a number from it. "
                    }
                ]
            },
            {
                "id": 1920721,
                "content": [
                    {
                        "username": "shubhamparad19",
                        "content": "Just few days to go guys on 6th of August this leetcode string will return as true"
                    },
                    {
                        "username": "mihirbhatkar",
                        "content": "Abey chutiye One Piece ka hi spoiler dena tha kya"
                    },
                    {
                        "username": "hendraeffendi96",
                        "content": "i have a question how long is this problem has the spoiler test case?"
                    },
                    {
                        "username": "pierreharbin",
                        "content": "Getting spoiled by LeetCode is crazy lolol"
                    },
                    {
                        "username": "belepod",
                        "content": "convet string to array, convert last element of array to character array. use for loop and \"str.chatAt\", then return the length of character array"
                    },
                    {
                        "username": "belepod",
                        "content": "heyyy, thats major spoiler right there."
                    },
                    {
                        "username": "LoganWhite26",
                        "content": "THE ONE PIECE IS REAL! while loop until the last item in list isn\\'t empty."
                    },
                    {
                        "username": "abhishek2124",
                        "content": "why this code is not working \\nint c=0;\\nfor(int i=s.size()-1;i>=0;i--){\\n    if(s[i] != \\' \\') c++;\\n}\\nreturn c;\\n\\nwhereas this is working\\nint count = 0;\\n    int i = s.length() - 1;\\n    while (i >= 0 && s[i] == \\' \\') i--;\\n    while (i >= 0 && s[i] != \\' \\') count++, i--;\\n    \\n    return count;"
                    },
                    {
                        "username": "Kromydas",
                        "content": "Pretty sure the difference is that one of them (namely the first one) has only one loop, while the second one as 2 loops. Note that the second while loop in the second code is different that the first while loop. The `s[i] != \\' \\'` and `s[i] == \\' \\'`are different."
                    },
                    {
                        "username": "sevanix",
                        "content": "I created a solution with function int , not class. "
                    },
                    {
                        "username": "pimping_Jeep03",
                        "content": "Hello, I am a beginner and I can\\'t seem to figure out where im going wrong. I would appreciate any help thank you in advance. \\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n    String s = \"luffy is still joyboy\";\\n    int lenghtOfLastWord = 0;\\n    String[] words = s.split(\" \");\\n    if (words.lenght>0)\\n    {\\n        lenghtOfLastWord = words[words-1].lenght();\\n    }    \\n    else \\n    {\\n        lenghtOfLastWord=0;\\n    }\\n    return lenghtOfLastWord;\\n    }\\n}"
                    },
                    {
                        "username": "Kromydas",
                        "content": "you don't need to redefine string s, it is given. When you do, your code only considers the case \"luffy is still joyboy\". \n\nAlso, is this code python or c++ or some other language? It does not look like python, as you are defining strings. It looks like c++ based off of the top of your code. If it is c++, the public int part should be `public: int lengthOfLastWord(string s) {` \n\nAlso, when defining a `string`, you cannot do `String`. There also is no `split()` function that I know of in c++. This is a python function. (That I know of). when using `words.lenght`, you forgot the `()` as well as spelled \"length\" wrong. You do this further on in the if statement. as well. I don't see anything else wrong with your code (other than the logic of using split being wrong). \n\nAnd another thing, you can't do `words[words - 1]`. `words` is an array. You can't subtract a number from it. "
                    }
                ]
            },
            {
                "id": 1920449,
                "content": [
                    {
                        "username": "shubhamparad19",
                        "content": "Just few days to go guys on 6th of August this leetcode string will return as true"
                    },
                    {
                        "username": "mihirbhatkar",
                        "content": "Abey chutiye One Piece ka hi spoiler dena tha kya"
                    },
                    {
                        "username": "hendraeffendi96",
                        "content": "i have a question how long is this problem has the spoiler test case?"
                    },
                    {
                        "username": "pierreharbin",
                        "content": "Getting spoiled by LeetCode is crazy lolol"
                    },
                    {
                        "username": "belepod",
                        "content": "convet string to array, convert last element of array to character array. use for loop and \"str.chatAt\", then return the length of character array"
                    },
                    {
                        "username": "belepod",
                        "content": "heyyy, thats major spoiler right there."
                    },
                    {
                        "username": "LoganWhite26",
                        "content": "THE ONE PIECE IS REAL! while loop until the last item in list isn\\'t empty."
                    },
                    {
                        "username": "abhishek2124",
                        "content": "why this code is not working \\nint c=0;\\nfor(int i=s.size()-1;i>=0;i--){\\n    if(s[i] != \\' \\') c++;\\n}\\nreturn c;\\n\\nwhereas this is working\\nint count = 0;\\n    int i = s.length() - 1;\\n    while (i >= 0 && s[i] == \\' \\') i--;\\n    while (i >= 0 && s[i] != \\' \\') count++, i--;\\n    \\n    return count;"
                    },
                    {
                        "username": "Kromydas",
                        "content": "Pretty sure the difference is that one of them (namely the first one) has only one loop, while the second one as 2 loops. Note that the second while loop in the second code is different that the first while loop. The `s[i] != \\' \\'` and `s[i] == \\' \\'`are different."
                    },
                    {
                        "username": "sevanix",
                        "content": "I created a solution with function int , not class. "
                    },
                    {
                        "username": "pimping_Jeep03",
                        "content": "Hello, I am a beginner and I can\\'t seem to figure out where im going wrong. I would appreciate any help thank you in advance. \\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n    String s = \"luffy is still joyboy\";\\n    int lenghtOfLastWord = 0;\\n    String[] words = s.split(\" \");\\n    if (words.lenght>0)\\n    {\\n        lenghtOfLastWord = words[words-1].lenght();\\n    }    \\n    else \\n    {\\n        lenghtOfLastWord=0;\\n    }\\n    return lenghtOfLastWord;\\n    }\\n}"
                    },
                    {
                        "username": "Kromydas",
                        "content": "you don't need to redefine string s, it is given. When you do, your code only considers the case \"luffy is still joyboy\". \n\nAlso, is this code python or c++ or some other language? It does not look like python, as you are defining strings. It looks like c++ based off of the top of your code. If it is c++, the public int part should be `public: int lengthOfLastWord(string s) {` \n\nAlso, when defining a `string`, you cannot do `String`. There also is no `split()` function that I know of in c++. This is a python function. (That I know of). when using `words.lenght`, you forgot the `()` as well as spelled \"length\" wrong. You do this further on in the if statement. as well. I don't see anything else wrong with your code (other than the logic of using split being wrong). \n\nAnd another thing, you can't do `words[words - 1]`. `words` is an array. You can't subtract a number from it. "
                    }
                ]
            },
            {
                "id": 1919233,
                "content": [
                    {
                        "username": "shubhamparad19",
                        "content": "Just few days to go guys on 6th of August this leetcode string will return as true"
                    },
                    {
                        "username": "mihirbhatkar",
                        "content": "Abey chutiye One Piece ka hi spoiler dena tha kya"
                    },
                    {
                        "username": "hendraeffendi96",
                        "content": "i have a question how long is this problem has the spoiler test case?"
                    },
                    {
                        "username": "pierreharbin",
                        "content": "Getting spoiled by LeetCode is crazy lolol"
                    },
                    {
                        "username": "belepod",
                        "content": "convet string to array, convert last element of array to character array. use for loop and \"str.chatAt\", then return the length of character array"
                    },
                    {
                        "username": "belepod",
                        "content": "heyyy, thats major spoiler right there."
                    },
                    {
                        "username": "LoganWhite26",
                        "content": "THE ONE PIECE IS REAL! while loop until the last item in list isn\\'t empty."
                    },
                    {
                        "username": "abhishek2124",
                        "content": "why this code is not working \\nint c=0;\\nfor(int i=s.size()-1;i>=0;i--){\\n    if(s[i] != \\' \\') c++;\\n}\\nreturn c;\\n\\nwhereas this is working\\nint count = 0;\\n    int i = s.length() - 1;\\n    while (i >= 0 && s[i] == \\' \\') i--;\\n    while (i >= 0 && s[i] != \\' \\') count++, i--;\\n    \\n    return count;"
                    },
                    {
                        "username": "Kromydas",
                        "content": "Pretty sure the difference is that one of them (namely the first one) has only one loop, while the second one as 2 loops. Note that the second while loop in the second code is different that the first while loop. The `s[i] != \\' \\'` and `s[i] == \\' \\'`are different."
                    },
                    {
                        "username": "sevanix",
                        "content": "I created a solution with function int , not class. "
                    },
                    {
                        "username": "pimping_Jeep03",
                        "content": "Hello, I am a beginner and I can\\'t seem to figure out where im going wrong. I would appreciate any help thank you in advance. \\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n    String s = \"luffy is still joyboy\";\\n    int lenghtOfLastWord = 0;\\n    String[] words = s.split(\" \");\\n    if (words.lenght>0)\\n    {\\n        lenghtOfLastWord = words[words-1].lenght();\\n    }    \\n    else \\n    {\\n        lenghtOfLastWord=0;\\n    }\\n    return lenghtOfLastWord;\\n    }\\n}"
                    },
                    {
                        "username": "Kromydas",
                        "content": "you don't need to redefine string s, it is given. When you do, your code only considers the case \"luffy is still joyboy\". \n\nAlso, is this code python or c++ or some other language? It does not look like python, as you are defining strings. It looks like c++ based off of the top of your code. If it is c++, the public int part should be `public: int lengthOfLastWord(string s) {` \n\nAlso, when defining a `string`, you cannot do `String`. There also is no `split()` function that I know of in c++. This is a python function. (That I know of). when using `words.lenght`, you forgot the `()` as well as spelled \"length\" wrong. You do this further on in the if statement. as well. I don't see anything else wrong with your code (other than the logic of using split being wrong). \n\nAnd another thing, you can't do `words[words - 1]`. `words` is an array. You can't subtract a number from it. "
                    }
                ]
            },
            {
                "id": 1904447,
                "content": [
                    {
                        "username": "shubhamparad19",
                        "content": "Just few days to go guys on 6th of August this leetcode string will return as true"
                    },
                    {
                        "username": "mihirbhatkar",
                        "content": "Abey chutiye One Piece ka hi spoiler dena tha kya"
                    },
                    {
                        "username": "hendraeffendi96",
                        "content": "i have a question how long is this problem has the spoiler test case?"
                    },
                    {
                        "username": "pierreharbin",
                        "content": "Getting spoiled by LeetCode is crazy lolol"
                    },
                    {
                        "username": "belepod",
                        "content": "convet string to array, convert last element of array to character array. use for loop and \"str.chatAt\", then return the length of character array"
                    },
                    {
                        "username": "belepod",
                        "content": "heyyy, thats major spoiler right there."
                    },
                    {
                        "username": "LoganWhite26",
                        "content": "THE ONE PIECE IS REAL! while loop until the last item in list isn\\'t empty."
                    },
                    {
                        "username": "abhishek2124",
                        "content": "why this code is not working \\nint c=0;\\nfor(int i=s.size()-1;i>=0;i--){\\n    if(s[i] != \\' \\') c++;\\n}\\nreturn c;\\n\\nwhereas this is working\\nint count = 0;\\n    int i = s.length() - 1;\\n    while (i >= 0 && s[i] == \\' \\') i--;\\n    while (i >= 0 && s[i] != \\' \\') count++, i--;\\n    \\n    return count;"
                    },
                    {
                        "username": "Kromydas",
                        "content": "Pretty sure the difference is that one of them (namely the first one) has only one loop, while the second one as 2 loops. Note that the second while loop in the second code is different that the first while loop. The `s[i] != \\' \\'` and `s[i] == \\' \\'`are different."
                    },
                    {
                        "username": "sevanix",
                        "content": "I created a solution with function int , not class. "
                    },
                    {
                        "username": "pimping_Jeep03",
                        "content": "Hello, I am a beginner and I can\\'t seem to figure out where im going wrong. I would appreciate any help thank you in advance. \\nclass Solution {\\n    public int lengthOfLastWord(String s) {\\n    String s = \"luffy is still joyboy\";\\n    int lenghtOfLastWord = 0;\\n    String[] words = s.split(\" \");\\n    if (words.lenght>0)\\n    {\\n        lenghtOfLastWord = words[words-1].lenght();\\n    }    \\n    else \\n    {\\n        lenghtOfLastWord=0;\\n    }\\n    return lenghtOfLastWord;\\n    }\\n}"
                    },
                    {
                        "username": "Kromydas",
                        "content": "you don't need to redefine string s, it is given. When you do, your code only considers the case \"luffy is still joyboy\". \n\nAlso, is this code python or c++ or some other language? It does not look like python, as you are defining strings. It looks like c++ based off of the top of your code. If it is c++, the public int part should be `public: int lengthOfLastWord(string s) {` \n\nAlso, when defining a `string`, you cannot do `String`. There also is no `split()` function that I know of in c++. This is a python function. (That I know of). when using `words.lenght`, you forgot the `()` as well as spelled \"length\" wrong. You do this further on in the if statement. as well. I don't see anything else wrong with your code (other than the logic of using split being wrong). \n\nAnd another thing, you can't do `words[words - 1]`. `words` is an array. You can't subtract a number from it. "
                    }
                ]
            },
            {
                "id": 1900049,
                "content": [
                    {
                        "username": "learningstuffs513",
                        "content": "Should have been a bit harder by considering \\\\r \\\\t \\\\n as well"
                    },
                    {
                        "username": "ylee078",
                        "content": "what the actual f*ck. DONT SPOIL ONE PIECE"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Hi All,\n\nPlease check the below working code and do suggest how I can improve this,\n\nclass Solution {\n    public int lengthOfLastWord(String s) {\n     String[] str=s.trim().split(\"\\\\s+\");\n     //System.out.println(str.length+\" \"+str[1]);\n     //int i=str.length-1;\n     String ss=str[str.length-1];\n     int stringLength = ss.replace(\" \", \"\").length();\n     return stringLength;\n    }\n} "
                    },
                    {
                        "username": "MenaiAla",
                        "content": "Why this code don\\'t pass the case of `s=\\'a\\'`?\\n\\n```\\n\\n    let count = 0\\n    let i = s.length - 1\\n    while (i >= 0 && s[i] === \" \") {\\n        i--\\n    }\\n\\n    for (let j = i; j >= 0; j--) {\\n        let e = s[j]\\n        if (e !== \" \") {\\n            count = count + 1\\n        } else {\\n            return count\\n        }\\n    }\\n\\n```"
                    },
                    {
                        "username": "PentaMa",
                        "content": "We need something that is slightly more complex even for the \"Easy\" difficulties because a multitude of the programming languages allows for easy string split (strtok() in C/C++, String.split() in Java, str.split() in Python, string.Split() in C#, etc.) \\n\\nIf you really wants us to think about the algorithm, then scan the submissions, and fail those who use the \"split\" kind methods"
                    },
                    {
                        "username": "treejumperfinny",
                        "content": "LOL The One Piece reference. Nice."
                    },
                    {
                        "username": "googglob",
                        "content": "C# -  `return s.Trim().Split(new char[] { ' ' }).Last().Length;.`"
                    },
                    {
                        "username": "ryde6",
                        "content": "How do I fix this? Char 5: error: expected member name or \\';\\' after declaration specifiers  while (i<=len) {\\n\\nThis is my code:\\nwhile (i<=len) {\\n        if (count != 0){\\n            if (s[len-i] != \" \")\\n                count++;\\n            else\\n                break;\\n        }\\n        i++;\\n    }"
                    },
                    {
                        "username": "codeguy186",
                        "content": "Who expected One Piece spoilers in a sample testcase?"
                    },
                    {
                        "username": "devanshhexe",
                        "content": "sauce "
                    }
                ]
            },
            {
                "id": 1899753,
                "content": [
                    {
                        "username": "learningstuffs513",
                        "content": "Should have been a bit harder by considering \\\\r \\\\t \\\\n as well"
                    },
                    {
                        "username": "ylee078",
                        "content": "what the actual f*ck. DONT SPOIL ONE PIECE"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Hi All,\n\nPlease check the below working code and do suggest how I can improve this,\n\nclass Solution {\n    public int lengthOfLastWord(String s) {\n     String[] str=s.trim().split(\"\\\\s+\");\n     //System.out.println(str.length+\" \"+str[1]);\n     //int i=str.length-1;\n     String ss=str[str.length-1];\n     int stringLength = ss.replace(\" \", \"\").length();\n     return stringLength;\n    }\n} "
                    },
                    {
                        "username": "MenaiAla",
                        "content": "Why this code don\\'t pass the case of `s=\\'a\\'`?\\n\\n```\\n\\n    let count = 0\\n    let i = s.length - 1\\n    while (i >= 0 && s[i] === \" \") {\\n        i--\\n    }\\n\\n    for (let j = i; j >= 0; j--) {\\n        let e = s[j]\\n        if (e !== \" \") {\\n            count = count + 1\\n        } else {\\n            return count\\n        }\\n    }\\n\\n```"
                    },
                    {
                        "username": "PentaMa",
                        "content": "We need something that is slightly more complex even for the \"Easy\" difficulties because a multitude of the programming languages allows for easy string split (strtok() in C/C++, String.split() in Java, str.split() in Python, string.Split() in C#, etc.) \\n\\nIf you really wants us to think about the algorithm, then scan the submissions, and fail those who use the \"split\" kind methods"
                    },
                    {
                        "username": "treejumperfinny",
                        "content": "LOL The One Piece reference. Nice."
                    },
                    {
                        "username": "googglob",
                        "content": "C# -  `return s.Trim().Split(new char[] { ' ' }).Last().Length;.`"
                    },
                    {
                        "username": "ryde6",
                        "content": "How do I fix this? Char 5: error: expected member name or \\';\\' after declaration specifiers  while (i<=len) {\\n\\nThis is my code:\\nwhile (i<=len) {\\n        if (count != 0){\\n            if (s[len-i] != \" \")\\n                count++;\\n            else\\n                break;\\n        }\\n        i++;\\n    }"
                    },
                    {
                        "username": "codeguy186",
                        "content": "Who expected One Piece spoilers in a sample testcase?"
                    },
                    {
                        "username": "devanshhexe",
                        "content": "sauce "
                    }
                ]
            },
            {
                "id": 1879127,
                "content": [
                    {
                        "username": "learningstuffs513",
                        "content": "Should have been a bit harder by considering \\\\r \\\\t \\\\n as well"
                    },
                    {
                        "username": "ylee078",
                        "content": "what the actual f*ck. DONT SPOIL ONE PIECE"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Hi All,\n\nPlease check the below working code and do suggest how I can improve this,\n\nclass Solution {\n    public int lengthOfLastWord(String s) {\n     String[] str=s.trim().split(\"\\\\s+\");\n     //System.out.println(str.length+\" \"+str[1]);\n     //int i=str.length-1;\n     String ss=str[str.length-1];\n     int stringLength = ss.replace(\" \", \"\").length();\n     return stringLength;\n    }\n} "
                    },
                    {
                        "username": "MenaiAla",
                        "content": "Why this code don\\'t pass the case of `s=\\'a\\'`?\\n\\n```\\n\\n    let count = 0\\n    let i = s.length - 1\\n    while (i >= 0 && s[i] === \" \") {\\n        i--\\n    }\\n\\n    for (let j = i; j >= 0; j--) {\\n        let e = s[j]\\n        if (e !== \" \") {\\n            count = count + 1\\n        } else {\\n            return count\\n        }\\n    }\\n\\n```"
                    },
                    {
                        "username": "PentaMa",
                        "content": "We need something that is slightly more complex even for the \"Easy\" difficulties because a multitude of the programming languages allows for easy string split (strtok() in C/C++, String.split() in Java, str.split() in Python, string.Split() in C#, etc.) \\n\\nIf you really wants us to think about the algorithm, then scan the submissions, and fail those who use the \"split\" kind methods"
                    },
                    {
                        "username": "treejumperfinny",
                        "content": "LOL The One Piece reference. Nice."
                    },
                    {
                        "username": "googglob",
                        "content": "C# -  `return s.Trim().Split(new char[] { ' ' }).Last().Length;.`"
                    },
                    {
                        "username": "ryde6",
                        "content": "How do I fix this? Char 5: error: expected member name or \\';\\' after declaration specifiers  while (i<=len) {\\n\\nThis is my code:\\nwhile (i<=len) {\\n        if (count != 0){\\n            if (s[len-i] != \" \")\\n                count++;\\n            else\\n                break;\\n        }\\n        i++;\\n    }"
                    },
                    {
                        "username": "codeguy186",
                        "content": "Who expected One Piece spoilers in a sample testcase?"
                    },
                    {
                        "username": "devanshhexe",
                        "content": "sauce "
                    }
                ]
            },
            {
                "id": 1854934,
                "content": [
                    {
                        "username": "learningstuffs513",
                        "content": "Should have been a bit harder by considering \\\\r \\\\t \\\\n as well"
                    },
                    {
                        "username": "ylee078",
                        "content": "what the actual f*ck. DONT SPOIL ONE PIECE"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Hi All,\n\nPlease check the below working code and do suggest how I can improve this,\n\nclass Solution {\n    public int lengthOfLastWord(String s) {\n     String[] str=s.trim().split(\"\\\\s+\");\n     //System.out.println(str.length+\" \"+str[1]);\n     //int i=str.length-1;\n     String ss=str[str.length-1];\n     int stringLength = ss.replace(\" \", \"\").length();\n     return stringLength;\n    }\n} "
                    },
                    {
                        "username": "MenaiAla",
                        "content": "Why this code don\\'t pass the case of `s=\\'a\\'`?\\n\\n```\\n\\n    let count = 0\\n    let i = s.length - 1\\n    while (i >= 0 && s[i] === \" \") {\\n        i--\\n    }\\n\\n    for (let j = i; j >= 0; j--) {\\n        let e = s[j]\\n        if (e !== \" \") {\\n            count = count + 1\\n        } else {\\n            return count\\n        }\\n    }\\n\\n```"
                    },
                    {
                        "username": "PentaMa",
                        "content": "We need something that is slightly more complex even for the \"Easy\" difficulties because a multitude of the programming languages allows for easy string split (strtok() in C/C++, String.split() in Java, str.split() in Python, string.Split() in C#, etc.) \\n\\nIf you really wants us to think about the algorithm, then scan the submissions, and fail those who use the \"split\" kind methods"
                    },
                    {
                        "username": "treejumperfinny",
                        "content": "LOL The One Piece reference. Nice."
                    },
                    {
                        "username": "googglob",
                        "content": "C# -  `return s.Trim().Split(new char[] { ' ' }).Last().Length;.`"
                    },
                    {
                        "username": "ryde6",
                        "content": "How do I fix this? Char 5: error: expected member name or \\';\\' after declaration specifiers  while (i<=len) {\\n\\nThis is my code:\\nwhile (i<=len) {\\n        if (count != 0){\\n            if (s[len-i] != \" \")\\n                count++;\\n            else\\n                break;\\n        }\\n        i++;\\n    }"
                    },
                    {
                        "username": "codeguy186",
                        "content": "Who expected One Piece spoilers in a sample testcase?"
                    },
                    {
                        "username": "devanshhexe",
                        "content": "sauce "
                    }
                ]
            },
            {
                "id": 1854010,
                "content": [
                    {
                        "username": "learningstuffs513",
                        "content": "Should have been a bit harder by considering \\\\r \\\\t \\\\n as well"
                    },
                    {
                        "username": "ylee078",
                        "content": "what the actual f*ck. DONT SPOIL ONE PIECE"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Hi All,\n\nPlease check the below working code and do suggest how I can improve this,\n\nclass Solution {\n    public int lengthOfLastWord(String s) {\n     String[] str=s.trim().split(\"\\\\s+\");\n     //System.out.println(str.length+\" \"+str[1]);\n     //int i=str.length-1;\n     String ss=str[str.length-1];\n     int stringLength = ss.replace(\" \", \"\").length();\n     return stringLength;\n    }\n} "
                    },
                    {
                        "username": "MenaiAla",
                        "content": "Why this code don\\'t pass the case of `s=\\'a\\'`?\\n\\n```\\n\\n    let count = 0\\n    let i = s.length - 1\\n    while (i >= 0 && s[i] === \" \") {\\n        i--\\n    }\\n\\n    for (let j = i; j >= 0; j--) {\\n        let e = s[j]\\n        if (e !== \" \") {\\n            count = count + 1\\n        } else {\\n            return count\\n        }\\n    }\\n\\n```"
                    },
                    {
                        "username": "PentaMa",
                        "content": "We need something that is slightly more complex even for the \"Easy\" difficulties because a multitude of the programming languages allows for easy string split (strtok() in C/C++, String.split() in Java, str.split() in Python, string.Split() in C#, etc.) \\n\\nIf you really wants us to think about the algorithm, then scan the submissions, and fail those who use the \"split\" kind methods"
                    },
                    {
                        "username": "treejumperfinny",
                        "content": "LOL The One Piece reference. Nice."
                    },
                    {
                        "username": "googglob",
                        "content": "C# -  `return s.Trim().Split(new char[] { ' ' }).Last().Length;.`"
                    },
                    {
                        "username": "ryde6",
                        "content": "How do I fix this? Char 5: error: expected member name or \\';\\' after declaration specifiers  while (i<=len) {\\n\\nThis is my code:\\nwhile (i<=len) {\\n        if (count != 0){\\n            if (s[len-i] != \" \")\\n                count++;\\n            else\\n                break;\\n        }\\n        i++;\\n    }"
                    },
                    {
                        "username": "codeguy186",
                        "content": "Who expected One Piece spoilers in a sample testcase?"
                    },
                    {
                        "username": "devanshhexe",
                        "content": "sauce "
                    }
                ]
            },
            {
                "id": 1853794,
                "content": [
                    {
                        "username": "learningstuffs513",
                        "content": "Should have been a bit harder by considering \\\\r \\\\t \\\\n as well"
                    },
                    {
                        "username": "ylee078",
                        "content": "what the actual f*ck. DONT SPOIL ONE PIECE"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Hi All,\n\nPlease check the below working code and do suggest how I can improve this,\n\nclass Solution {\n    public int lengthOfLastWord(String s) {\n     String[] str=s.trim().split(\"\\\\s+\");\n     //System.out.println(str.length+\" \"+str[1]);\n     //int i=str.length-1;\n     String ss=str[str.length-1];\n     int stringLength = ss.replace(\" \", \"\").length();\n     return stringLength;\n    }\n} "
                    },
                    {
                        "username": "MenaiAla",
                        "content": "Why this code don\\'t pass the case of `s=\\'a\\'`?\\n\\n```\\n\\n    let count = 0\\n    let i = s.length - 1\\n    while (i >= 0 && s[i] === \" \") {\\n        i--\\n    }\\n\\n    for (let j = i; j >= 0; j--) {\\n        let e = s[j]\\n        if (e !== \" \") {\\n            count = count + 1\\n        } else {\\n            return count\\n        }\\n    }\\n\\n```"
                    },
                    {
                        "username": "PentaMa",
                        "content": "We need something that is slightly more complex even for the \"Easy\" difficulties because a multitude of the programming languages allows for easy string split (strtok() in C/C++, String.split() in Java, str.split() in Python, string.Split() in C#, etc.) \\n\\nIf you really wants us to think about the algorithm, then scan the submissions, and fail those who use the \"split\" kind methods"
                    },
                    {
                        "username": "treejumperfinny",
                        "content": "LOL The One Piece reference. Nice."
                    },
                    {
                        "username": "googglob",
                        "content": "C# -  `return s.Trim().Split(new char[] { ' ' }).Last().Length;.`"
                    },
                    {
                        "username": "ryde6",
                        "content": "How do I fix this? Char 5: error: expected member name or \\';\\' after declaration specifiers  while (i<=len) {\\n\\nThis is my code:\\nwhile (i<=len) {\\n        if (count != 0){\\n            if (s[len-i] != \" \")\\n                count++;\\n            else\\n                break;\\n        }\\n        i++;\\n    }"
                    },
                    {
                        "username": "codeguy186",
                        "content": "Who expected One Piece spoilers in a sample testcase?"
                    },
                    {
                        "username": "devanshhexe",
                        "content": "sauce "
                    }
                ]
            },
            {
                "id": 1841442,
                "content": [
                    {
                        "username": "learningstuffs513",
                        "content": "Should have been a bit harder by considering \\\\r \\\\t \\\\n as well"
                    },
                    {
                        "username": "ylee078",
                        "content": "what the actual f*ck. DONT SPOIL ONE PIECE"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Hi All,\n\nPlease check the below working code and do suggest how I can improve this,\n\nclass Solution {\n    public int lengthOfLastWord(String s) {\n     String[] str=s.trim().split(\"\\\\s+\");\n     //System.out.println(str.length+\" \"+str[1]);\n     //int i=str.length-1;\n     String ss=str[str.length-1];\n     int stringLength = ss.replace(\" \", \"\").length();\n     return stringLength;\n    }\n} "
                    },
                    {
                        "username": "MenaiAla",
                        "content": "Why this code don\\'t pass the case of `s=\\'a\\'`?\\n\\n```\\n\\n    let count = 0\\n    let i = s.length - 1\\n    while (i >= 0 && s[i] === \" \") {\\n        i--\\n    }\\n\\n    for (let j = i; j >= 0; j--) {\\n        let e = s[j]\\n        if (e !== \" \") {\\n            count = count + 1\\n        } else {\\n            return count\\n        }\\n    }\\n\\n```"
                    },
                    {
                        "username": "PentaMa",
                        "content": "We need something that is slightly more complex even for the \"Easy\" difficulties because a multitude of the programming languages allows for easy string split (strtok() in C/C++, String.split() in Java, str.split() in Python, string.Split() in C#, etc.) \\n\\nIf you really wants us to think about the algorithm, then scan the submissions, and fail those who use the \"split\" kind methods"
                    },
                    {
                        "username": "treejumperfinny",
                        "content": "LOL The One Piece reference. Nice."
                    },
                    {
                        "username": "googglob",
                        "content": "C# -  `return s.Trim().Split(new char[] { ' ' }).Last().Length;.`"
                    },
                    {
                        "username": "ryde6",
                        "content": "How do I fix this? Char 5: error: expected member name or \\';\\' after declaration specifiers  while (i<=len) {\\n\\nThis is my code:\\nwhile (i<=len) {\\n        if (count != 0){\\n            if (s[len-i] != \" \")\\n                count++;\\n            else\\n                break;\\n        }\\n        i++;\\n    }"
                    },
                    {
                        "username": "codeguy186",
                        "content": "Who expected One Piece spoilers in a sample testcase?"
                    },
                    {
                        "username": "devanshhexe",
                        "content": "sauce "
                    }
                ]
            },
            {
                "id": 1825420,
                "content": [
                    {
                        "username": "learningstuffs513",
                        "content": "Should have been a bit harder by considering \\\\r \\\\t \\\\n as well"
                    },
                    {
                        "username": "ylee078",
                        "content": "what the actual f*ck. DONT SPOIL ONE PIECE"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Hi All,\n\nPlease check the below working code and do suggest how I can improve this,\n\nclass Solution {\n    public int lengthOfLastWord(String s) {\n     String[] str=s.trim().split(\"\\\\s+\");\n     //System.out.println(str.length+\" \"+str[1]);\n     //int i=str.length-1;\n     String ss=str[str.length-1];\n     int stringLength = ss.replace(\" \", \"\").length();\n     return stringLength;\n    }\n} "
                    },
                    {
                        "username": "MenaiAla",
                        "content": "Why this code don\\'t pass the case of `s=\\'a\\'`?\\n\\n```\\n\\n    let count = 0\\n    let i = s.length - 1\\n    while (i >= 0 && s[i] === \" \") {\\n        i--\\n    }\\n\\n    for (let j = i; j >= 0; j--) {\\n        let e = s[j]\\n        if (e !== \" \") {\\n            count = count + 1\\n        } else {\\n            return count\\n        }\\n    }\\n\\n```"
                    },
                    {
                        "username": "PentaMa",
                        "content": "We need something that is slightly more complex even for the \"Easy\" difficulties because a multitude of the programming languages allows for easy string split (strtok() in C/C++, String.split() in Java, str.split() in Python, string.Split() in C#, etc.) \\n\\nIf you really wants us to think about the algorithm, then scan the submissions, and fail those who use the \"split\" kind methods"
                    },
                    {
                        "username": "treejumperfinny",
                        "content": "LOL The One Piece reference. Nice."
                    },
                    {
                        "username": "googglob",
                        "content": "C# -  `return s.Trim().Split(new char[] { ' ' }).Last().Length;.`"
                    },
                    {
                        "username": "ryde6",
                        "content": "How do I fix this? Char 5: error: expected member name or \\';\\' after declaration specifiers  while (i<=len) {\\n\\nThis is my code:\\nwhile (i<=len) {\\n        if (count != 0){\\n            if (s[len-i] != \" \")\\n                count++;\\n            else\\n                break;\\n        }\\n        i++;\\n    }"
                    },
                    {
                        "username": "codeguy186",
                        "content": "Who expected One Piece spoilers in a sample testcase?"
                    },
                    {
                        "username": "devanshhexe",
                        "content": "sauce "
                    }
                ]
            },
            {
                "id": 1812005,
                "content": [
                    {
                        "username": "learningstuffs513",
                        "content": "Should have been a bit harder by considering \\\\r \\\\t \\\\n as well"
                    },
                    {
                        "username": "ylee078",
                        "content": "what the actual f*ck. DONT SPOIL ONE PIECE"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Hi All,\n\nPlease check the below working code and do suggest how I can improve this,\n\nclass Solution {\n    public int lengthOfLastWord(String s) {\n     String[] str=s.trim().split(\"\\\\s+\");\n     //System.out.println(str.length+\" \"+str[1]);\n     //int i=str.length-1;\n     String ss=str[str.length-1];\n     int stringLength = ss.replace(\" \", \"\").length();\n     return stringLength;\n    }\n} "
                    },
                    {
                        "username": "MenaiAla",
                        "content": "Why this code don\\'t pass the case of `s=\\'a\\'`?\\n\\n```\\n\\n    let count = 0\\n    let i = s.length - 1\\n    while (i >= 0 && s[i] === \" \") {\\n        i--\\n    }\\n\\n    for (let j = i; j >= 0; j--) {\\n        let e = s[j]\\n        if (e !== \" \") {\\n            count = count + 1\\n        } else {\\n            return count\\n        }\\n    }\\n\\n```"
                    },
                    {
                        "username": "PentaMa",
                        "content": "We need something that is slightly more complex even for the \"Easy\" difficulties because a multitude of the programming languages allows for easy string split (strtok() in C/C++, String.split() in Java, str.split() in Python, string.Split() in C#, etc.) \\n\\nIf you really wants us to think about the algorithm, then scan the submissions, and fail those who use the \"split\" kind methods"
                    },
                    {
                        "username": "treejumperfinny",
                        "content": "LOL The One Piece reference. Nice."
                    },
                    {
                        "username": "googglob",
                        "content": "C# -  `return s.Trim().Split(new char[] { ' ' }).Last().Length;.`"
                    },
                    {
                        "username": "ryde6",
                        "content": "How do I fix this? Char 5: error: expected member name or \\';\\' after declaration specifiers  while (i<=len) {\\n\\nThis is my code:\\nwhile (i<=len) {\\n        if (count != 0){\\n            if (s[len-i] != \" \")\\n                count++;\\n            else\\n                break;\\n        }\\n        i++;\\n    }"
                    },
                    {
                        "username": "codeguy186",
                        "content": "Who expected One Piece spoilers in a sample testcase?"
                    },
                    {
                        "username": "devanshhexe",
                        "content": "sauce "
                    }
                ]
            },
            {
                "id": 1804261,
                "content": [
                    {
                        "username": "learningstuffs513",
                        "content": "Should have been a bit harder by considering \\\\r \\\\t \\\\n as well"
                    },
                    {
                        "username": "ylee078",
                        "content": "what the actual f*ck. DONT SPOIL ONE PIECE"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Hi All,\n\nPlease check the below working code and do suggest how I can improve this,\n\nclass Solution {\n    public int lengthOfLastWord(String s) {\n     String[] str=s.trim().split(\"\\\\s+\");\n     //System.out.println(str.length+\" \"+str[1]);\n     //int i=str.length-1;\n     String ss=str[str.length-1];\n     int stringLength = ss.replace(\" \", \"\").length();\n     return stringLength;\n    }\n} "
                    },
                    {
                        "username": "MenaiAla",
                        "content": "Why this code don\\'t pass the case of `s=\\'a\\'`?\\n\\n```\\n\\n    let count = 0\\n    let i = s.length - 1\\n    while (i >= 0 && s[i] === \" \") {\\n        i--\\n    }\\n\\n    for (let j = i; j >= 0; j--) {\\n        let e = s[j]\\n        if (e !== \" \") {\\n            count = count + 1\\n        } else {\\n            return count\\n        }\\n    }\\n\\n```"
                    },
                    {
                        "username": "PentaMa",
                        "content": "We need something that is slightly more complex even for the \"Easy\" difficulties because a multitude of the programming languages allows for easy string split (strtok() in C/C++, String.split() in Java, str.split() in Python, string.Split() in C#, etc.) \\n\\nIf you really wants us to think about the algorithm, then scan the submissions, and fail those who use the \"split\" kind methods"
                    },
                    {
                        "username": "treejumperfinny",
                        "content": "LOL The One Piece reference. Nice."
                    },
                    {
                        "username": "googglob",
                        "content": "C# -  `return s.Trim().Split(new char[] { ' ' }).Last().Length;.`"
                    },
                    {
                        "username": "ryde6",
                        "content": "How do I fix this? Char 5: error: expected member name or \\';\\' after declaration specifiers  while (i<=len) {\\n\\nThis is my code:\\nwhile (i<=len) {\\n        if (count != 0){\\n            if (s[len-i] != \" \")\\n                count++;\\n            else\\n                break;\\n        }\\n        i++;\\n    }"
                    },
                    {
                        "username": "codeguy186",
                        "content": "Who expected One Piece spoilers in a sample testcase?"
                    },
                    {
                        "username": "devanshhexe",
                        "content": "sauce "
                    }
                ]
            },
            {
                "id": 1799449,
                "content": [
                    {
                        "username": "yorkltesting",
                        "content": "I've got test cases running with correct output, but when I submit and it shows Runtime error per below. Where the None comes from?\nTypeError: None is not valid value for the expected return type integer\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\n\nmy code:\ndef lengthOfLastWord(self, s: str) -> int:\n        pointer = 0\n        last_word = []\n        for i in s[::-1]:\n            if i == \" \" and len(last_word) == 0:\n                pass\n            elif i == \" \" and len(last_word) > 0:\n                return len(last_word)\n            else: \n                last_word.append(i)"
                    },
                    {
                        "username": "anujp99",
                        "content": "Never expected to get one piece spoilers on leet code"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "using python 3 \\nx = (lambda s: s.strip().split(\" \")[::-1][0])\\n        return len(x(s))\\n      "
                    },
                    {
                        "username": "FlamegiserMKA",
                        "content": "PEAK PIECE!!!\\n"
                    },
                    {
                        "username": "tia09",
                        "content": "thank you, this one made me think i was smart"
                    },
                    {
                        "username": "Rishabh_Patel_",
                        "content": "kaizoku ore wa naru"
                    },
                    {
                        "username": "ijj92",
                        "content": "        x = s.split()\\n        return len(x[-1])"
                    },
                    {
                        "username": "primeayush6",
                        "content": "yes, that\\'s why I\\'m in discussions too."
                    },
                    {
                        "username": "BishantRaj18",
                        "content": "String a[]=s.split(\" \");\\nreturn a[a.length-1].length();\\n"
                    },
                    {
                        "username": "rez---",
                        "content": "bruh i never expected a one piece spoiler on leetcode lmaoo"
                    }
                ]
            },
            {
                "id": 1796055,
                "content": [
                    {
                        "username": "yorkltesting",
                        "content": "I've got test cases running with correct output, but when I submit and it shows Runtime error per below. Where the None comes from?\nTypeError: None is not valid value for the expected return type integer\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\n\nmy code:\ndef lengthOfLastWord(self, s: str) -> int:\n        pointer = 0\n        last_word = []\n        for i in s[::-1]:\n            if i == \" \" and len(last_word) == 0:\n                pass\n            elif i == \" \" and len(last_word) > 0:\n                return len(last_word)\n            else: \n                last_word.append(i)"
                    },
                    {
                        "username": "anujp99",
                        "content": "Never expected to get one piece spoilers on leet code"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "using python 3 \\nx = (lambda s: s.strip().split(\" \")[::-1][0])\\n        return len(x(s))\\n      "
                    },
                    {
                        "username": "FlamegiserMKA",
                        "content": "PEAK PIECE!!!\\n"
                    },
                    {
                        "username": "tia09",
                        "content": "thank you, this one made me think i was smart"
                    },
                    {
                        "username": "Rishabh_Patel_",
                        "content": "kaizoku ore wa naru"
                    },
                    {
                        "username": "ijj92",
                        "content": "        x = s.split()\\n        return len(x[-1])"
                    },
                    {
                        "username": "primeayush6",
                        "content": "yes, that\\'s why I\\'m in discussions too."
                    },
                    {
                        "username": "BishantRaj18",
                        "content": "String a[]=s.split(\" \");\\nreturn a[a.length-1].length();\\n"
                    },
                    {
                        "username": "rez---",
                        "content": "bruh i never expected a one piece spoiler on leetcode lmaoo"
                    }
                ]
            },
            {
                "id": 1795791,
                "content": [
                    {
                        "username": "yorkltesting",
                        "content": "I've got test cases running with correct output, but when I submit and it shows Runtime error per below. Where the None comes from?\nTypeError: None is not valid value for the expected return type integer\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\n\nmy code:\ndef lengthOfLastWord(self, s: str) -> int:\n        pointer = 0\n        last_word = []\n        for i in s[::-1]:\n            if i == \" \" and len(last_word) == 0:\n                pass\n            elif i == \" \" and len(last_word) > 0:\n                return len(last_word)\n            else: \n                last_word.append(i)"
                    },
                    {
                        "username": "anujp99",
                        "content": "Never expected to get one piece spoilers on leet code"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "using python 3 \\nx = (lambda s: s.strip().split(\" \")[::-1][0])\\n        return len(x(s))\\n      "
                    },
                    {
                        "username": "FlamegiserMKA",
                        "content": "PEAK PIECE!!!\\n"
                    },
                    {
                        "username": "tia09",
                        "content": "thank you, this one made me think i was smart"
                    },
                    {
                        "username": "Rishabh_Patel_",
                        "content": "kaizoku ore wa naru"
                    },
                    {
                        "username": "ijj92",
                        "content": "        x = s.split()\\n        return len(x[-1])"
                    },
                    {
                        "username": "primeayush6",
                        "content": "yes, that\\'s why I\\'m in discussions too."
                    },
                    {
                        "username": "BishantRaj18",
                        "content": "String a[]=s.split(\" \");\\nreturn a[a.length-1].length();\\n"
                    },
                    {
                        "username": "rez---",
                        "content": "bruh i never expected a one piece spoiler on leetcode lmaoo"
                    }
                ]
            },
            {
                "id": 1795693,
                "content": [
                    {
                        "username": "yorkltesting",
                        "content": "I've got test cases running with correct output, but when I submit and it shows Runtime error per below. Where the None comes from?\nTypeError: None is not valid value for the expected return type integer\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\n\nmy code:\ndef lengthOfLastWord(self, s: str) -> int:\n        pointer = 0\n        last_word = []\n        for i in s[::-1]:\n            if i == \" \" and len(last_word) == 0:\n                pass\n            elif i == \" \" and len(last_word) > 0:\n                return len(last_word)\n            else: \n                last_word.append(i)"
                    },
                    {
                        "username": "anujp99",
                        "content": "Never expected to get one piece spoilers on leet code"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "using python 3 \\nx = (lambda s: s.strip().split(\" \")[::-1][0])\\n        return len(x(s))\\n      "
                    },
                    {
                        "username": "FlamegiserMKA",
                        "content": "PEAK PIECE!!!\\n"
                    },
                    {
                        "username": "tia09",
                        "content": "thank you, this one made me think i was smart"
                    },
                    {
                        "username": "Rishabh_Patel_",
                        "content": "kaizoku ore wa naru"
                    },
                    {
                        "username": "ijj92",
                        "content": "        x = s.split()\\n        return len(x[-1])"
                    },
                    {
                        "username": "primeayush6",
                        "content": "yes, that\\'s why I\\'m in discussions too."
                    },
                    {
                        "username": "BishantRaj18",
                        "content": "String a[]=s.split(\" \");\\nreturn a[a.length-1].length();\\n"
                    },
                    {
                        "username": "rez---",
                        "content": "bruh i never expected a one piece spoiler on leetcode lmaoo"
                    }
                ]
            },
            {
                "id": 1787789,
                "content": [
                    {
                        "username": "yorkltesting",
                        "content": "I've got test cases running with correct output, but when I submit and it shows Runtime error per below. Where the None comes from?\nTypeError: None is not valid value for the expected return type integer\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\n\nmy code:\ndef lengthOfLastWord(self, s: str) -> int:\n        pointer = 0\n        last_word = []\n        for i in s[::-1]:\n            if i == \" \" and len(last_word) == 0:\n                pass\n            elif i == \" \" and len(last_word) > 0:\n                return len(last_word)\n            else: \n                last_word.append(i)"
                    },
                    {
                        "username": "anujp99",
                        "content": "Never expected to get one piece spoilers on leet code"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "using python 3 \\nx = (lambda s: s.strip().split(\" \")[::-1][0])\\n        return len(x(s))\\n      "
                    },
                    {
                        "username": "FlamegiserMKA",
                        "content": "PEAK PIECE!!!\\n"
                    },
                    {
                        "username": "tia09",
                        "content": "thank you, this one made me think i was smart"
                    },
                    {
                        "username": "Rishabh_Patel_",
                        "content": "kaizoku ore wa naru"
                    },
                    {
                        "username": "ijj92",
                        "content": "        x = s.split()\\n        return len(x[-1])"
                    },
                    {
                        "username": "primeayush6",
                        "content": "yes, that\\'s why I\\'m in discussions too."
                    },
                    {
                        "username": "BishantRaj18",
                        "content": "String a[]=s.split(\" \");\\nreturn a[a.length-1].length();\\n"
                    },
                    {
                        "username": "rez---",
                        "content": "bruh i never expected a one piece spoiler on leetcode lmaoo"
                    }
                ]
            },
            {
                "id": 1787244,
                "content": [
                    {
                        "username": "yorkltesting",
                        "content": "I've got test cases running with correct output, but when I submit and it shows Runtime error per below. Where the None comes from?\nTypeError: None is not valid value for the expected return type integer\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\n\nmy code:\ndef lengthOfLastWord(self, s: str) -> int:\n        pointer = 0\n        last_word = []\n        for i in s[::-1]:\n            if i == \" \" and len(last_word) == 0:\n                pass\n            elif i == \" \" and len(last_word) > 0:\n                return len(last_word)\n            else: \n                last_word.append(i)"
                    },
                    {
                        "username": "anujp99",
                        "content": "Never expected to get one piece spoilers on leet code"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "using python 3 \\nx = (lambda s: s.strip().split(\" \")[::-1][0])\\n        return len(x(s))\\n      "
                    },
                    {
                        "username": "FlamegiserMKA",
                        "content": "PEAK PIECE!!!\\n"
                    },
                    {
                        "username": "tia09",
                        "content": "thank you, this one made me think i was smart"
                    },
                    {
                        "username": "Rishabh_Patel_",
                        "content": "kaizoku ore wa naru"
                    },
                    {
                        "username": "ijj92",
                        "content": "        x = s.split()\\n        return len(x[-1])"
                    },
                    {
                        "username": "primeayush6",
                        "content": "yes, that\\'s why I\\'m in discussions too."
                    },
                    {
                        "username": "BishantRaj18",
                        "content": "String a[]=s.split(\" \");\\nreturn a[a.length-1].length();\\n"
                    },
                    {
                        "username": "rez---",
                        "content": "bruh i never expected a one piece spoiler on leetcode lmaoo"
                    }
                ]
            },
            {
                "id": 1786566,
                "content": [
                    {
                        "username": "yorkltesting",
                        "content": "I've got test cases running with correct output, but when I submit and it shows Runtime error per below. Where the None comes from?\nTypeError: None is not valid value for the expected return type integer\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\n\nmy code:\ndef lengthOfLastWord(self, s: str) -> int:\n        pointer = 0\n        last_word = []\n        for i in s[::-1]:\n            if i == \" \" and len(last_word) == 0:\n                pass\n            elif i == \" \" and len(last_word) > 0:\n                return len(last_word)\n            else: \n                last_word.append(i)"
                    },
                    {
                        "username": "anujp99",
                        "content": "Never expected to get one piece spoilers on leet code"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "using python 3 \\nx = (lambda s: s.strip().split(\" \")[::-1][0])\\n        return len(x(s))\\n      "
                    },
                    {
                        "username": "FlamegiserMKA",
                        "content": "PEAK PIECE!!!\\n"
                    },
                    {
                        "username": "tia09",
                        "content": "thank you, this one made me think i was smart"
                    },
                    {
                        "username": "Rishabh_Patel_",
                        "content": "kaizoku ore wa naru"
                    },
                    {
                        "username": "ijj92",
                        "content": "        x = s.split()\\n        return len(x[-1])"
                    },
                    {
                        "username": "primeayush6",
                        "content": "yes, that\\'s why I\\'m in discussions too."
                    },
                    {
                        "username": "BishantRaj18",
                        "content": "String a[]=s.split(\" \");\\nreturn a[a.length-1].length();\\n"
                    },
                    {
                        "username": "rez---",
                        "content": "bruh i never expected a one piece spoiler on leetcode lmaoo"
                    }
                ]
            },
            {
                "id": 1784963,
                "content": [
                    {
                        "username": "yorkltesting",
                        "content": "I've got test cases running with correct output, but when I submit and it shows Runtime error per below. Where the None comes from?\nTypeError: None is not valid value for the expected return type integer\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\n\nmy code:\ndef lengthOfLastWord(self, s: str) -> int:\n        pointer = 0\n        last_word = []\n        for i in s[::-1]:\n            if i == \" \" and len(last_word) == 0:\n                pass\n            elif i == \" \" and len(last_word) > 0:\n                return len(last_word)\n            else: \n                last_word.append(i)"
                    },
                    {
                        "username": "anujp99",
                        "content": "Never expected to get one piece spoilers on leet code"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "using python 3 \\nx = (lambda s: s.strip().split(\" \")[::-1][0])\\n        return len(x(s))\\n      "
                    },
                    {
                        "username": "FlamegiserMKA",
                        "content": "PEAK PIECE!!!\\n"
                    },
                    {
                        "username": "tia09",
                        "content": "thank you, this one made me think i was smart"
                    },
                    {
                        "username": "Rishabh_Patel_",
                        "content": "kaizoku ore wa naru"
                    },
                    {
                        "username": "ijj92",
                        "content": "        x = s.split()\\n        return len(x[-1])"
                    },
                    {
                        "username": "primeayush6",
                        "content": "yes, that\\'s why I\\'m in discussions too."
                    },
                    {
                        "username": "BishantRaj18",
                        "content": "String a[]=s.split(\" \");\\nreturn a[a.length-1].length();\\n"
                    },
                    {
                        "username": "rez---",
                        "content": "bruh i never expected a one piece spoiler on leetcode lmaoo"
                    }
                ]
            },
            {
                "id": 1779866,
                "content": [
                    {
                        "username": "yorkltesting",
                        "content": "I've got test cases running with correct output, but when I submit and it shows Runtime error per below. Where the None comes from?\nTypeError: None is not valid value for the expected return type integer\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\n\nmy code:\ndef lengthOfLastWord(self, s: str) -> int:\n        pointer = 0\n        last_word = []\n        for i in s[::-1]:\n            if i == \" \" and len(last_word) == 0:\n                pass\n            elif i == \" \" and len(last_word) > 0:\n                return len(last_word)\n            else: \n                last_word.append(i)"
                    },
                    {
                        "username": "anujp99",
                        "content": "Never expected to get one piece spoilers on leet code"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "using python 3 \\nx = (lambda s: s.strip().split(\" \")[::-1][0])\\n        return len(x(s))\\n      "
                    },
                    {
                        "username": "FlamegiserMKA",
                        "content": "PEAK PIECE!!!\\n"
                    },
                    {
                        "username": "tia09",
                        "content": "thank you, this one made me think i was smart"
                    },
                    {
                        "username": "Rishabh_Patel_",
                        "content": "kaizoku ore wa naru"
                    },
                    {
                        "username": "ijj92",
                        "content": "        x = s.split()\\n        return len(x[-1])"
                    },
                    {
                        "username": "primeayush6",
                        "content": "yes, that\\'s why I\\'m in discussions too."
                    },
                    {
                        "username": "BishantRaj18",
                        "content": "String a[]=s.split(\" \");\\nreturn a[a.length-1].length();\\n"
                    },
                    {
                        "username": "rez---",
                        "content": "bruh i never expected a one piece spoiler on leetcode lmaoo"
                    }
                ]
            },
            {
                "id": 1779226,
                "content": [
                    {
                        "username": "yorkltesting",
                        "content": "I've got test cases running with correct output, but when I submit and it shows Runtime error per below. Where the None comes from?\nTypeError: None is not valid value for the expected return type integer\n    raise TypeError(str(ret) + \" is not valid value for the expected return type integer\");\n\nmy code:\ndef lengthOfLastWord(self, s: str) -> int:\n        pointer = 0\n        last_word = []\n        for i in s[::-1]:\n            if i == \" \" and len(last_word) == 0:\n                pass\n            elif i == \" \" and len(last_word) > 0:\n                return len(last_word)\n            else: \n                last_word.append(i)"
                    },
                    {
                        "username": "anujp99",
                        "content": "Never expected to get one piece spoilers on leet code"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "using python 3 \\nx = (lambda s: s.strip().split(\" \")[::-1][0])\\n        return len(x(s))\\n      "
                    },
                    {
                        "username": "FlamegiserMKA",
                        "content": "PEAK PIECE!!!\\n"
                    },
                    {
                        "username": "tia09",
                        "content": "thank you, this one made me think i was smart"
                    },
                    {
                        "username": "Rishabh_Patel_",
                        "content": "kaizoku ore wa naru"
                    },
                    {
                        "username": "ijj92",
                        "content": "        x = s.split()\\n        return len(x[-1])"
                    },
                    {
                        "username": "primeayush6",
                        "content": "yes, that\\'s why I\\'m in discussions too."
                    },
                    {
                        "username": "BishantRaj18",
                        "content": "String a[]=s.split(\" \");\\nreturn a[a.length-1].length();\\n"
                    },
                    {
                        "username": "rez---",
                        "content": "bruh i never expected a one piece spoiler on leetcode lmaoo"
                    }
                ]
            },
            {
                "id": 1779187,
                "content": [
                    {
                        "username": "hedch",
                        "content": "Single Line Python solution \nhttps://leetcode.com/problems/length-of-last-word/solutions/3112937/single-line-python-solution/"
                    },
                    {
                        "username": "abdumajidabdullatipov1",
                        "content": "      public int lengthOfLastWord(String s) {\\n        boolean hasLetter = false;\\n        int spaceCount = 0;\\n\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) == \\' \\' && hasLetter) {\\n                return s.length() - i - spaceCount - 1;\\n            }\\n\\n            if (s.charAt(i) != \\' \\' && !hasLetter) {\\n                hasLetter = true;\\n            }\\n\\n            if (!hasLetter) {\\n                spaceCount++;\\n            }\\n        }\\n\\n        return s.length() - spaceCount;\\n    }"
                    },
                    {
                        "username": "crova27",
                        "content": "just commented to say that I appreciate seeing a one piece reference <3"
                    },
                    {
                        "username": "utkarsh_verma",
                        "content": "can anyone tell what\\'s wrong with this code\\n\\nfor the testcase \"a\" i kept getting the error \" addition of unsigned offset\"\\n\\nint i=s.length()-1,j=s.length()-1,k=0;\\n        if(s.length()==1){\\n            return 1;\\n        }\\n        if(s[i]==\\' \\'){\\n            while(s[i]==\\' \\'){\\n                i--;\\n                k++;\\n            }\\n        }\\n        while(s[i]!=\\' \\'){\\n            i--;\\n        }\\n        return j-i-k;\\n\\n\\n"
                    },
                    {
                        "username": "prameshkumarsaha",
                        "content": "Python:\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        l=[]\\n        listOfWord = list(s.split(\" \"))\\n        for i in range(len(listOfWord)):\\n            if len(listOfWord[i]) != 0:\\n                l.append(listOfWord[i])\\n        lengthOfList = len(l)\\n        lastWord = l[lengthOfList-1]\\n        return len(lastWord)"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "In JavaScript, you can use string methods to get the last word of a string. Here are a few ways you can do this\\n\\nNote that in JavaScript the split() method returns an array, so you can use the filter method and regex to get the filtered element of the array.\\n `lengthOfLastWord = function(s) {\\nconst str = s.split(\" \");\\nconst filteredList = str.filter((a) => { if (!(/\\\\s/g.test(a))){\\n    return a;\\n}})\\nreturn filteredList[filteredList.length - 1].length;\\n};`\\n "
                    },
                    {
                        "username": "krishnadev7",
                        "content": "we can solve this question in C++ using while loop. we need to traverse the string array from backwards.\\n\\nstep1: start from the n-1 of the array.\\n           if i >=0 and s[i] == \\' \\'  are true\\n           then we need to decrement i.\\n\\nstep2: if i<0 then we return 0.\\n\\nstep3: if i>=0 and s[i] != \\' \\'. then we need to increment count. dont forget to intialize count with 0. after that we need to decrement i.\\n"
                    },
                    {
                        "username": "mushroom001",
                        "content": "when did they post this question? or changed the example 3?"
                    },
                    {
                        "username": "deleted_user",
                        "content": "I also want to add new spoilers as a testcase:\\n\"Momonosuke has grown into a big dragon\""
                    },
                    {
                        "username": "elnaznasiri",
                        "content": "It is Sooo very easy\\n\\nI use this solution:\\ndef lenghtOfLastWord(s):\\n    verb = s.split()\\n    return len(verb[-1])"
                    }
                ]
            },
            {
                "id": 1774855,
                "content": [
                    {
                        "username": "hedch",
                        "content": "Single Line Python solution \nhttps://leetcode.com/problems/length-of-last-word/solutions/3112937/single-line-python-solution/"
                    },
                    {
                        "username": "abdumajidabdullatipov1",
                        "content": "      public int lengthOfLastWord(String s) {\\n        boolean hasLetter = false;\\n        int spaceCount = 0;\\n\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) == \\' \\' && hasLetter) {\\n                return s.length() - i - spaceCount - 1;\\n            }\\n\\n            if (s.charAt(i) != \\' \\' && !hasLetter) {\\n                hasLetter = true;\\n            }\\n\\n            if (!hasLetter) {\\n                spaceCount++;\\n            }\\n        }\\n\\n        return s.length() - spaceCount;\\n    }"
                    },
                    {
                        "username": "crova27",
                        "content": "just commented to say that I appreciate seeing a one piece reference <3"
                    },
                    {
                        "username": "utkarsh_verma",
                        "content": "can anyone tell what\\'s wrong with this code\\n\\nfor the testcase \"a\" i kept getting the error \" addition of unsigned offset\"\\n\\nint i=s.length()-1,j=s.length()-1,k=0;\\n        if(s.length()==1){\\n            return 1;\\n        }\\n        if(s[i]==\\' \\'){\\n            while(s[i]==\\' \\'){\\n                i--;\\n                k++;\\n            }\\n        }\\n        while(s[i]!=\\' \\'){\\n            i--;\\n        }\\n        return j-i-k;\\n\\n\\n"
                    },
                    {
                        "username": "prameshkumarsaha",
                        "content": "Python:\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        l=[]\\n        listOfWord = list(s.split(\" \"))\\n        for i in range(len(listOfWord)):\\n            if len(listOfWord[i]) != 0:\\n                l.append(listOfWord[i])\\n        lengthOfList = len(l)\\n        lastWord = l[lengthOfList-1]\\n        return len(lastWord)"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "In JavaScript, you can use string methods to get the last word of a string. Here are a few ways you can do this\\n\\nNote that in JavaScript the split() method returns an array, so you can use the filter method and regex to get the filtered element of the array.\\n `lengthOfLastWord = function(s) {\\nconst str = s.split(\" \");\\nconst filteredList = str.filter((a) => { if (!(/\\\\s/g.test(a))){\\n    return a;\\n}})\\nreturn filteredList[filteredList.length - 1].length;\\n};`\\n "
                    },
                    {
                        "username": "krishnadev7",
                        "content": "we can solve this question in C++ using while loop. we need to traverse the string array from backwards.\\n\\nstep1: start from the n-1 of the array.\\n           if i >=0 and s[i] == \\' \\'  are true\\n           then we need to decrement i.\\n\\nstep2: if i<0 then we return 0.\\n\\nstep3: if i>=0 and s[i] != \\' \\'. then we need to increment count. dont forget to intialize count with 0. after that we need to decrement i.\\n"
                    },
                    {
                        "username": "mushroom001",
                        "content": "when did they post this question? or changed the example 3?"
                    },
                    {
                        "username": "deleted_user",
                        "content": "I also want to add new spoilers as a testcase:\\n\"Momonosuke has grown into a big dragon\""
                    },
                    {
                        "username": "elnaznasiri",
                        "content": "It is Sooo very easy\\n\\nI use this solution:\\ndef lenghtOfLastWord(s):\\n    verb = s.split()\\n    return len(verb[-1])"
                    }
                ]
            },
            {
                "id": 1772729,
                "content": [
                    {
                        "username": "hedch",
                        "content": "Single Line Python solution \nhttps://leetcode.com/problems/length-of-last-word/solutions/3112937/single-line-python-solution/"
                    },
                    {
                        "username": "abdumajidabdullatipov1",
                        "content": "      public int lengthOfLastWord(String s) {\\n        boolean hasLetter = false;\\n        int spaceCount = 0;\\n\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) == \\' \\' && hasLetter) {\\n                return s.length() - i - spaceCount - 1;\\n            }\\n\\n            if (s.charAt(i) != \\' \\' && !hasLetter) {\\n                hasLetter = true;\\n            }\\n\\n            if (!hasLetter) {\\n                spaceCount++;\\n            }\\n        }\\n\\n        return s.length() - spaceCount;\\n    }"
                    },
                    {
                        "username": "crova27",
                        "content": "just commented to say that I appreciate seeing a one piece reference <3"
                    },
                    {
                        "username": "utkarsh_verma",
                        "content": "can anyone tell what\\'s wrong with this code\\n\\nfor the testcase \"a\" i kept getting the error \" addition of unsigned offset\"\\n\\nint i=s.length()-1,j=s.length()-1,k=0;\\n        if(s.length()==1){\\n            return 1;\\n        }\\n        if(s[i]==\\' \\'){\\n            while(s[i]==\\' \\'){\\n                i--;\\n                k++;\\n            }\\n        }\\n        while(s[i]!=\\' \\'){\\n            i--;\\n        }\\n        return j-i-k;\\n\\n\\n"
                    },
                    {
                        "username": "prameshkumarsaha",
                        "content": "Python:\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        l=[]\\n        listOfWord = list(s.split(\" \"))\\n        for i in range(len(listOfWord)):\\n            if len(listOfWord[i]) != 0:\\n                l.append(listOfWord[i])\\n        lengthOfList = len(l)\\n        lastWord = l[lengthOfList-1]\\n        return len(lastWord)"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "In JavaScript, you can use string methods to get the last word of a string. Here are a few ways you can do this\\n\\nNote that in JavaScript the split() method returns an array, so you can use the filter method and regex to get the filtered element of the array.\\n `lengthOfLastWord = function(s) {\\nconst str = s.split(\" \");\\nconst filteredList = str.filter((a) => { if (!(/\\\\s/g.test(a))){\\n    return a;\\n}})\\nreturn filteredList[filteredList.length - 1].length;\\n};`\\n "
                    },
                    {
                        "username": "krishnadev7",
                        "content": "we can solve this question in C++ using while loop. we need to traverse the string array from backwards.\\n\\nstep1: start from the n-1 of the array.\\n           if i >=0 and s[i] == \\' \\'  are true\\n           then we need to decrement i.\\n\\nstep2: if i<0 then we return 0.\\n\\nstep3: if i>=0 and s[i] != \\' \\'. then we need to increment count. dont forget to intialize count with 0. after that we need to decrement i.\\n"
                    },
                    {
                        "username": "mushroom001",
                        "content": "when did they post this question? or changed the example 3?"
                    },
                    {
                        "username": "deleted_user",
                        "content": "I also want to add new spoilers as a testcase:\\n\"Momonosuke has grown into a big dragon\""
                    },
                    {
                        "username": "elnaznasiri",
                        "content": "It is Sooo very easy\\n\\nI use this solution:\\ndef lenghtOfLastWord(s):\\n    verb = s.split()\\n    return len(verb[-1])"
                    }
                ]
            },
            {
                "id": 1771590,
                "content": [
                    {
                        "username": "hedch",
                        "content": "Single Line Python solution \nhttps://leetcode.com/problems/length-of-last-word/solutions/3112937/single-line-python-solution/"
                    },
                    {
                        "username": "abdumajidabdullatipov1",
                        "content": "      public int lengthOfLastWord(String s) {\\n        boolean hasLetter = false;\\n        int spaceCount = 0;\\n\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) == \\' \\' && hasLetter) {\\n                return s.length() - i - spaceCount - 1;\\n            }\\n\\n            if (s.charAt(i) != \\' \\' && !hasLetter) {\\n                hasLetter = true;\\n            }\\n\\n            if (!hasLetter) {\\n                spaceCount++;\\n            }\\n        }\\n\\n        return s.length() - spaceCount;\\n    }"
                    },
                    {
                        "username": "crova27",
                        "content": "just commented to say that I appreciate seeing a one piece reference <3"
                    },
                    {
                        "username": "utkarsh_verma",
                        "content": "can anyone tell what\\'s wrong with this code\\n\\nfor the testcase \"a\" i kept getting the error \" addition of unsigned offset\"\\n\\nint i=s.length()-1,j=s.length()-1,k=0;\\n        if(s.length()==1){\\n            return 1;\\n        }\\n        if(s[i]==\\' \\'){\\n            while(s[i]==\\' \\'){\\n                i--;\\n                k++;\\n            }\\n        }\\n        while(s[i]!=\\' \\'){\\n            i--;\\n        }\\n        return j-i-k;\\n\\n\\n"
                    },
                    {
                        "username": "prameshkumarsaha",
                        "content": "Python:\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        l=[]\\n        listOfWord = list(s.split(\" \"))\\n        for i in range(len(listOfWord)):\\n            if len(listOfWord[i]) != 0:\\n                l.append(listOfWord[i])\\n        lengthOfList = len(l)\\n        lastWord = l[lengthOfList-1]\\n        return len(lastWord)"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "In JavaScript, you can use string methods to get the last word of a string. Here are a few ways you can do this\\n\\nNote that in JavaScript the split() method returns an array, so you can use the filter method and regex to get the filtered element of the array.\\n `lengthOfLastWord = function(s) {\\nconst str = s.split(\" \");\\nconst filteredList = str.filter((a) => { if (!(/\\\\s/g.test(a))){\\n    return a;\\n}})\\nreturn filteredList[filteredList.length - 1].length;\\n};`\\n "
                    },
                    {
                        "username": "krishnadev7",
                        "content": "we can solve this question in C++ using while loop. we need to traverse the string array from backwards.\\n\\nstep1: start from the n-1 of the array.\\n           if i >=0 and s[i] == \\' \\'  are true\\n           then we need to decrement i.\\n\\nstep2: if i<0 then we return 0.\\n\\nstep3: if i>=0 and s[i] != \\' \\'. then we need to increment count. dont forget to intialize count with 0. after that we need to decrement i.\\n"
                    },
                    {
                        "username": "mushroom001",
                        "content": "when did they post this question? or changed the example 3?"
                    },
                    {
                        "username": "deleted_user",
                        "content": "I also want to add new spoilers as a testcase:\\n\"Momonosuke has grown into a big dragon\""
                    },
                    {
                        "username": "elnaznasiri",
                        "content": "It is Sooo very easy\\n\\nI use this solution:\\ndef lenghtOfLastWord(s):\\n    verb = s.split()\\n    return len(verb[-1])"
                    }
                ]
            },
            {
                "id": 1771263,
                "content": [
                    {
                        "username": "hedch",
                        "content": "Single Line Python solution \nhttps://leetcode.com/problems/length-of-last-word/solutions/3112937/single-line-python-solution/"
                    },
                    {
                        "username": "abdumajidabdullatipov1",
                        "content": "      public int lengthOfLastWord(String s) {\\n        boolean hasLetter = false;\\n        int spaceCount = 0;\\n\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) == \\' \\' && hasLetter) {\\n                return s.length() - i - spaceCount - 1;\\n            }\\n\\n            if (s.charAt(i) != \\' \\' && !hasLetter) {\\n                hasLetter = true;\\n            }\\n\\n            if (!hasLetter) {\\n                spaceCount++;\\n            }\\n        }\\n\\n        return s.length() - spaceCount;\\n    }"
                    },
                    {
                        "username": "crova27",
                        "content": "just commented to say that I appreciate seeing a one piece reference <3"
                    },
                    {
                        "username": "utkarsh_verma",
                        "content": "can anyone tell what\\'s wrong with this code\\n\\nfor the testcase \"a\" i kept getting the error \" addition of unsigned offset\"\\n\\nint i=s.length()-1,j=s.length()-1,k=0;\\n        if(s.length()==1){\\n            return 1;\\n        }\\n        if(s[i]==\\' \\'){\\n            while(s[i]==\\' \\'){\\n                i--;\\n                k++;\\n            }\\n        }\\n        while(s[i]!=\\' \\'){\\n            i--;\\n        }\\n        return j-i-k;\\n\\n\\n"
                    },
                    {
                        "username": "prameshkumarsaha",
                        "content": "Python:\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        l=[]\\n        listOfWord = list(s.split(\" \"))\\n        for i in range(len(listOfWord)):\\n            if len(listOfWord[i]) != 0:\\n                l.append(listOfWord[i])\\n        lengthOfList = len(l)\\n        lastWord = l[lengthOfList-1]\\n        return len(lastWord)"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "In JavaScript, you can use string methods to get the last word of a string. Here are a few ways you can do this\\n\\nNote that in JavaScript the split() method returns an array, so you can use the filter method and regex to get the filtered element of the array.\\n `lengthOfLastWord = function(s) {\\nconst str = s.split(\" \");\\nconst filteredList = str.filter((a) => { if (!(/\\\\s/g.test(a))){\\n    return a;\\n}})\\nreturn filteredList[filteredList.length - 1].length;\\n};`\\n "
                    },
                    {
                        "username": "krishnadev7",
                        "content": "we can solve this question in C++ using while loop. we need to traverse the string array from backwards.\\n\\nstep1: start from the n-1 of the array.\\n           if i >=0 and s[i] == \\' \\'  are true\\n           then we need to decrement i.\\n\\nstep2: if i<0 then we return 0.\\n\\nstep3: if i>=0 and s[i] != \\' \\'. then we need to increment count. dont forget to intialize count with 0. after that we need to decrement i.\\n"
                    },
                    {
                        "username": "mushroom001",
                        "content": "when did they post this question? or changed the example 3?"
                    },
                    {
                        "username": "deleted_user",
                        "content": "I also want to add new spoilers as a testcase:\\n\"Momonosuke has grown into a big dragon\""
                    },
                    {
                        "username": "elnaznasiri",
                        "content": "It is Sooo very easy\\n\\nI use this solution:\\ndef lenghtOfLastWord(s):\\n    verb = s.split()\\n    return len(verb[-1])"
                    }
                ]
            },
            {
                "id": 1769746,
                "content": [
                    {
                        "username": "hedch",
                        "content": "Single Line Python solution \nhttps://leetcode.com/problems/length-of-last-word/solutions/3112937/single-line-python-solution/"
                    },
                    {
                        "username": "abdumajidabdullatipov1",
                        "content": "      public int lengthOfLastWord(String s) {\\n        boolean hasLetter = false;\\n        int spaceCount = 0;\\n\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) == \\' \\' && hasLetter) {\\n                return s.length() - i - spaceCount - 1;\\n            }\\n\\n            if (s.charAt(i) != \\' \\' && !hasLetter) {\\n                hasLetter = true;\\n            }\\n\\n            if (!hasLetter) {\\n                spaceCount++;\\n            }\\n        }\\n\\n        return s.length() - spaceCount;\\n    }"
                    },
                    {
                        "username": "crova27",
                        "content": "just commented to say that I appreciate seeing a one piece reference <3"
                    },
                    {
                        "username": "utkarsh_verma",
                        "content": "can anyone tell what\\'s wrong with this code\\n\\nfor the testcase \"a\" i kept getting the error \" addition of unsigned offset\"\\n\\nint i=s.length()-1,j=s.length()-1,k=0;\\n        if(s.length()==1){\\n            return 1;\\n        }\\n        if(s[i]==\\' \\'){\\n            while(s[i]==\\' \\'){\\n                i--;\\n                k++;\\n            }\\n        }\\n        while(s[i]!=\\' \\'){\\n            i--;\\n        }\\n        return j-i-k;\\n\\n\\n"
                    },
                    {
                        "username": "prameshkumarsaha",
                        "content": "Python:\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        l=[]\\n        listOfWord = list(s.split(\" \"))\\n        for i in range(len(listOfWord)):\\n            if len(listOfWord[i]) != 0:\\n                l.append(listOfWord[i])\\n        lengthOfList = len(l)\\n        lastWord = l[lengthOfList-1]\\n        return len(lastWord)"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "In JavaScript, you can use string methods to get the last word of a string. Here are a few ways you can do this\\n\\nNote that in JavaScript the split() method returns an array, so you can use the filter method and regex to get the filtered element of the array.\\n `lengthOfLastWord = function(s) {\\nconst str = s.split(\" \");\\nconst filteredList = str.filter((a) => { if (!(/\\\\s/g.test(a))){\\n    return a;\\n}})\\nreturn filteredList[filteredList.length - 1].length;\\n};`\\n "
                    },
                    {
                        "username": "krishnadev7",
                        "content": "we can solve this question in C++ using while loop. we need to traverse the string array from backwards.\\n\\nstep1: start from the n-1 of the array.\\n           if i >=0 and s[i] == \\' \\'  are true\\n           then we need to decrement i.\\n\\nstep2: if i<0 then we return 0.\\n\\nstep3: if i>=0 and s[i] != \\' \\'. then we need to increment count. dont forget to intialize count with 0. after that we need to decrement i.\\n"
                    },
                    {
                        "username": "mushroom001",
                        "content": "when did they post this question? or changed the example 3?"
                    },
                    {
                        "username": "deleted_user",
                        "content": "I also want to add new spoilers as a testcase:\\n\"Momonosuke has grown into a big dragon\""
                    },
                    {
                        "username": "elnaznasiri",
                        "content": "It is Sooo very easy\\n\\nI use this solution:\\ndef lenghtOfLastWord(s):\\n    verb = s.split()\\n    return len(verb[-1])"
                    }
                ]
            },
            {
                "id": 1769715,
                "content": [
                    {
                        "username": "hedch",
                        "content": "Single Line Python solution \nhttps://leetcode.com/problems/length-of-last-word/solutions/3112937/single-line-python-solution/"
                    },
                    {
                        "username": "abdumajidabdullatipov1",
                        "content": "      public int lengthOfLastWord(String s) {\\n        boolean hasLetter = false;\\n        int spaceCount = 0;\\n\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) == \\' \\' && hasLetter) {\\n                return s.length() - i - spaceCount - 1;\\n            }\\n\\n            if (s.charAt(i) != \\' \\' && !hasLetter) {\\n                hasLetter = true;\\n            }\\n\\n            if (!hasLetter) {\\n                spaceCount++;\\n            }\\n        }\\n\\n        return s.length() - spaceCount;\\n    }"
                    },
                    {
                        "username": "crova27",
                        "content": "just commented to say that I appreciate seeing a one piece reference <3"
                    },
                    {
                        "username": "utkarsh_verma",
                        "content": "can anyone tell what\\'s wrong with this code\\n\\nfor the testcase \"a\" i kept getting the error \" addition of unsigned offset\"\\n\\nint i=s.length()-1,j=s.length()-1,k=0;\\n        if(s.length()==1){\\n            return 1;\\n        }\\n        if(s[i]==\\' \\'){\\n            while(s[i]==\\' \\'){\\n                i--;\\n                k++;\\n            }\\n        }\\n        while(s[i]!=\\' \\'){\\n            i--;\\n        }\\n        return j-i-k;\\n\\n\\n"
                    },
                    {
                        "username": "prameshkumarsaha",
                        "content": "Python:\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        l=[]\\n        listOfWord = list(s.split(\" \"))\\n        for i in range(len(listOfWord)):\\n            if len(listOfWord[i]) != 0:\\n                l.append(listOfWord[i])\\n        lengthOfList = len(l)\\n        lastWord = l[lengthOfList-1]\\n        return len(lastWord)"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "In JavaScript, you can use string methods to get the last word of a string. Here are a few ways you can do this\\n\\nNote that in JavaScript the split() method returns an array, so you can use the filter method and regex to get the filtered element of the array.\\n `lengthOfLastWord = function(s) {\\nconst str = s.split(\" \");\\nconst filteredList = str.filter((a) => { if (!(/\\\\s/g.test(a))){\\n    return a;\\n}})\\nreturn filteredList[filteredList.length - 1].length;\\n};`\\n "
                    },
                    {
                        "username": "krishnadev7",
                        "content": "we can solve this question in C++ using while loop. we need to traverse the string array from backwards.\\n\\nstep1: start from the n-1 of the array.\\n           if i >=0 and s[i] == \\' \\'  are true\\n           then we need to decrement i.\\n\\nstep2: if i<0 then we return 0.\\n\\nstep3: if i>=0 and s[i] != \\' \\'. then we need to increment count. dont forget to intialize count with 0. after that we need to decrement i.\\n"
                    },
                    {
                        "username": "mushroom001",
                        "content": "when did they post this question? or changed the example 3?"
                    },
                    {
                        "username": "deleted_user",
                        "content": "I also want to add new spoilers as a testcase:\\n\"Momonosuke has grown into a big dragon\""
                    },
                    {
                        "username": "elnaznasiri",
                        "content": "It is Sooo very easy\\n\\nI use this solution:\\ndef lenghtOfLastWord(s):\\n    verb = s.split()\\n    return len(verb[-1])"
                    }
                ]
            },
            {
                "id": 1763895,
                "content": [
                    {
                        "username": "hedch",
                        "content": "Single Line Python solution \nhttps://leetcode.com/problems/length-of-last-word/solutions/3112937/single-line-python-solution/"
                    },
                    {
                        "username": "abdumajidabdullatipov1",
                        "content": "      public int lengthOfLastWord(String s) {\\n        boolean hasLetter = false;\\n        int spaceCount = 0;\\n\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) == \\' \\' && hasLetter) {\\n                return s.length() - i - spaceCount - 1;\\n            }\\n\\n            if (s.charAt(i) != \\' \\' && !hasLetter) {\\n                hasLetter = true;\\n            }\\n\\n            if (!hasLetter) {\\n                spaceCount++;\\n            }\\n        }\\n\\n        return s.length() - spaceCount;\\n    }"
                    },
                    {
                        "username": "crova27",
                        "content": "just commented to say that I appreciate seeing a one piece reference <3"
                    },
                    {
                        "username": "utkarsh_verma",
                        "content": "can anyone tell what\\'s wrong with this code\\n\\nfor the testcase \"a\" i kept getting the error \" addition of unsigned offset\"\\n\\nint i=s.length()-1,j=s.length()-1,k=0;\\n        if(s.length()==1){\\n            return 1;\\n        }\\n        if(s[i]==\\' \\'){\\n            while(s[i]==\\' \\'){\\n                i--;\\n                k++;\\n            }\\n        }\\n        while(s[i]!=\\' \\'){\\n            i--;\\n        }\\n        return j-i-k;\\n\\n\\n"
                    },
                    {
                        "username": "prameshkumarsaha",
                        "content": "Python:\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        l=[]\\n        listOfWord = list(s.split(\" \"))\\n        for i in range(len(listOfWord)):\\n            if len(listOfWord[i]) != 0:\\n                l.append(listOfWord[i])\\n        lengthOfList = len(l)\\n        lastWord = l[lengthOfList-1]\\n        return len(lastWord)"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "In JavaScript, you can use string methods to get the last word of a string. Here are a few ways you can do this\\n\\nNote that in JavaScript the split() method returns an array, so you can use the filter method and regex to get the filtered element of the array.\\n `lengthOfLastWord = function(s) {\\nconst str = s.split(\" \");\\nconst filteredList = str.filter((a) => { if (!(/\\\\s/g.test(a))){\\n    return a;\\n}})\\nreturn filteredList[filteredList.length - 1].length;\\n};`\\n "
                    },
                    {
                        "username": "krishnadev7",
                        "content": "we can solve this question in C++ using while loop. we need to traverse the string array from backwards.\\n\\nstep1: start from the n-1 of the array.\\n           if i >=0 and s[i] == \\' \\'  are true\\n           then we need to decrement i.\\n\\nstep2: if i<0 then we return 0.\\n\\nstep3: if i>=0 and s[i] != \\' \\'. then we need to increment count. dont forget to intialize count with 0. after that we need to decrement i.\\n"
                    },
                    {
                        "username": "mushroom001",
                        "content": "when did they post this question? or changed the example 3?"
                    },
                    {
                        "username": "deleted_user",
                        "content": "I also want to add new spoilers as a testcase:\\n\"Momonosuke has grown into a big dragon\""
                    },
                    {
                        "username": "elnaznasiri",
                        "content": "It is Sooo very easy\\n\\nI use this solution:\\ndef lenghtOfLastWord(s):\\n    verb = s.split()\\n    return len(verb[-1])"
                    }
                ]
            },
            {
                "id": 1762348,
                "content": [
                    {
                        "username": "hedch",
                        "content": "Single Line Python solution \nhttps://leetcode.com/problems/length-of-last-word/solutions/3112937/single-line-python-solution/"
                    },
                    {
                        "username": "abdumajidabdullatipov1",
                        "content": "      public int lengthOfLastWord(String s) {\\n        boolean hasLetter = false;\\n        int spaceCount = 0;\\n\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) == \\' \\' && hasLetter) {\\n                return s.length() - i - spaceCount - 1;\\n            }\\n\\n            if (s.charAt(i) != \\' \\' && !hasLetter) {\\n                hasLetter = true;\\n            }\\n\\n            if (!hasLetter) {\\n                spaceCount++;\\n            }\\n        }\\n\\n        return s.length() - spaceCount;\\n    }"
                    },
                    {
                        "username": "crova27",
                        "content": "just commented to say that I appreciate seeing a one piece reference <3"
                    },
                    {
                        "username": "utkarsh_verma",
                        "content": "can anyone tell what\\'s wrong with this code\\n\\nfor the testcase \"a\" i kept getting the error \" addition of unsigned offset\"\\n\\nint i=s.length()-1,j=s.length()-1,k=0;\\n        if(s.length()==1){\\n            return 1;\\n        }\\n        if(s[i]==\\' \\'){\\n            while(s[i]==\\' \\'){\\n                i--;\\n                k++;\\n            }\\n        }\\n        while(s[i]!=\\' \\'){\\n            i--;\\n        }\\n        return j-i-k;\\n\\n\\n"
                    },
                    {
                        "username": "prameshkumarsaha",
                        "content": "Python:\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        l=[]\\n        listOfWord = list(s.split(\" \"))\\n        for i in range(len(listOfWord)):\\n            if len(listOfWord[i]) != 0:\\n                l.append(listOfWord[i])\\n        lengthOfList = len(l)\\n        lastWord = l[lengthOfList-1]\\n        return len(lastWord)"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "In JavaScript, you can use string methods to get the last word of a string. Here are a few ways you can do this\\n\\nNote that in JavaScript the split() method returns an array, so you can use the filter method and regex to get the filtered element of the array.\\n `lengthOfLastWord = function(s) {\\nconst str = s.split(\" \");\\nconst filteredList = str.filter((a) => { if (!(/\\\\s/g.test(a))){\\n    return a;\\n}})\\nreturn filteredList[filteredList.length - 1].length;\\n};`\\n "
                    },
                    {
                        "username": "krishnadev7",
                        "content": "we can solve this question in C++ using while loop. we need to traverse the string array from backwards.\\n\\nstep1: start from the n-1 of the array.\\n           if i >=0 and s[i] == \\' \\'  are true\\n           then we need to decrement i.\\n\\nstep2: if i<0 then we return 0.\\n\\nstep3: if i>=0 and s[i] != \\' \\'. then we need to increment count. dont forget to intialize count with 0. after that we need to decrement i.\\n"
                    },
                    {
                        "username": "mushroom001",
                        "content": "when did they post this question? or changed the example 3?"
                    },
                    {
                        "username": "deleted_user",
                        "content": "I also want to add new spoilers as a testcase:\\n\"Momonosuke has grown into a big dragon\""
                    },
                    {
                        "username": "elnaznasiri",
                        "content": "It is Sooo very easy\\n\\nI use this solution:\\ndef lenghtOfLastWord(s):\\n    verb = s.split()\\n    return len(verb[-1])"
                    }
                ]
            },
            {
                "id": 1760190,
                "content": [
                    {
                        "username": "hedch",
                        "content": "Single Line Python solution \nhttps://leetcode.com/problems/length-of-last-word/solutions/3112937/single-line-python-solution/"
                    },
                    {
                        "username": "abdumajidabdullatipov1",
                        "content": "      public int lengthOfLastWord(String s) {\\n        boolean hasLetter = false;\\n        int spaceCount = 0;\\n\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            if (s.charAt(i) == \\' \\' && hasLetter) {\\n                return s.length() - i - spaceCount - 1;\\n            }\\n\\n            if (s.charAt(i) != \\' \\' && !hasLetter) {\\n                hasLetter = true;\\n            }\\n\\n            if (!hasLetter) {\\n                spaceCount++;\\n            }\\n        }\\n\\n        return s.length() - spaceCount;\\n    }"
                    },
                    {
                        "username": "crova27",
                        "content": "just commented to say that I appreciate seeing a one piece reference <3"
                    },
                    {
                        "username": "utkarsh_verma",
                        "content": "can anyone tell what\\'s wrong with this code\\n\\nfor the testcase \"a\" i kept getting the error \" addition of unsigned offset\"\\n\\nint i=s.length()-1,j=s.length()-1,k=0;\\n        if(s.length()==1){\\n            return 1;\\n        }\\n        if(s[i]==\\' \\'){\\n            while(s[i]==\\' \\'){\\n                i--;\\n                k++;\\n            }\\n        }\\n        while(s[i]!=\\' \\'){\\n            i--;\\n        }\\n        return j-i-k;\\n\\n\\n"
                    },
                    {
                        "username": "prameshkumarsaha",
                        "content": "Python:\\nclass Solution(object):\\n    def lengthOfLastWord(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        l=[]\\n        listOfWord = list(s.split(\" \"))\\n        for i in range(len(listOfWord)):\\n            if len(listOfWord[i]) != 0:\\n                l.append(listOfWord[i])\\n        lengthOfList = len(l)\\n        lastWord = l[lengthOfList-1]\\n        return len(lastWord)"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "In JavaScript, you can use string methods to get the last word of a string. Here are a few ways you can do this\\n\\nNote that in JavaScript the split() method returns an array, so you can use the filter method and regex to get the filtered element of the array.\\n `lengthOfLastWord = function(s) {\\nconst str = s.split(\" \");\\nconst filteredList = str.filter((a) => { if (!(/\\\\s/g.test(a))){\\n    return a;\\n}})\\nreturn filteredList[filteredList.length - 1].length;\\n};`\\n "
                    },
                    {
                        "username": "krishnadev7",
                        "content": "we can solve this question in C++ using while loop. we need to traverse the string array from backwards.\\n\\nstep1: start from the n-1 of the array.\\n           if i >=0 and s[i] == \\' \\'  are true\\n           then we need to decrement i.\\n\\nstep2: if i<0 then we return 0.\\n\\nstep3: if i>=0 and s[i] != \\' \\'. then we need to increment count. dont forget to intialize count with 0. after that we need to decrement i.\\n"
                    },
                    {
                        "username": "mushroom001",
                        "content": "when did they post this question? or changed the example 3?"
                    },
                    {
                        "username": "deleted_user",
                        "content": "I also want to add new spoilers as a testcase:\\n\"Momonosuke has grown into a big dragon\""
                    },
                    {
                        "username": "elnaznasiri",
                        "content": "It is Sooo very easy\\n\\nI use this solution:\\ndef lenghtOfLastWord(s):\\n    verb = s.split()\\n    return len(verb[-1])"
                    }
                ]
            },
            {
                "id": 1760153,
                "content": [
                    {
                        "username": "Deepak_8811",
                        "content": "100% Acceptance\\n\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        int i=s.size()-1;\\n        while(i>=0&&s[i]==\\' \\'){\\n            i--;\\n        }\\n        while(i>=0&&s[i]!=\\' \\'){\\n            ans++;\\n            i--;\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "with linear time complexity and const space and explanation\\n\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3035442/python-js-linear-time-explanation/"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "In Python3:\\nHow can a solution with \".split()\" be faster than any solution O(n) running only a while counting the last word size? Like:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        for word in s.split(\\' \\')[::-1]:\\n            if word != \\'\\':\\n                return len(word)\\n```\\nFaster than:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        firstLetter = len(s) -1\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] != \\' \\':\\n                firstLetter = i\\n                break\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] == \\' \\':\\n                return firstLetter - i\\n        return firstLetter+1\\n```\\nand \\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        # trim the trailing spaces\\n        p = len(s) - 1\\n        while p >= 0 and s[p] == \\' \\':\\n            p -= 1\\n\\n        # compute the length of last word\\n        length = 0\\n        while p >= 0 and s[p] != \\' \\':\\n            p -= 1\\n            length += 1\\n        return length\\n```"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "[@ControlAltPete](/ControlAltPete) That makes sense, since Python is interpreted, but it is bad from a learning point of view."
                    },
                    {
                        "username": "ControlAltPete",
                        "content": "You are conceptually correct, scanning from the end backwards to the first space separator is much faster than scanning the entire string for spaces and then counting the last word. Yours is O(n) where n=the length of the last word, the split solution is O(n) where n=the length of the entire string. Both are O(n), but in practice the smaller n will be faster. However, the Python built in functions like split() are orders of magnitude faster than Python code manually scanning the string. So a solution using the builtin split() will be faster than manually counting finding the space. You could create a pathological input string \"a bbb...bbb c\" with a million \"b\"s in the middle where your solution would be faster. "
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || 0 ms || Beats 100% runtime || Easy to understand\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3026790/simple-java-0-ms-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "its_sushmita20",
                        "content": "Veryy Easy Used stringstream logic:)))"
                    },
                    {
                        "username": "gauravj_010902",
                        "content": "cant we do without return statement?"
                    },
                    {
                        "username": "AakashSingh28",
                        "content": " public int lengthOfLastWord(String s) {\\n        String str=s.trim();\\n        String[] arr = str.split(\" \");\\n        return arr[arr.length-1].length();\\n    }"
                    },
                    {
                        "username": "rambhawan",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] str = s.split(\" \");\\n        return (str[str.length-1]).length();\\n    }\\n}"
                    },
                    {
                        "username": "stuartYoung_",
                        "content": "This problem seems to be easy, but bruh  just to match \" a\" and \" a \" cases  \\uD83E\\uDEE5"
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] words = s.split(\"\\\\\\\\s+\");\\n\\t    return words[words.length - 1].length();\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1753010,
                "content": [
                    {
                        "username": "Deepak_8811",
                        "content": "100% Acceptance\\n\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        int i=s.size()-1;\\n        while(i>=0&&s[i]==\\' \\'){\\n            i--;\\n        }\\n        while(i>=0&&s[i]!=\\' \\'){\\n            ans++;\\n            i--;\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "with linear time complexity and const space and explanation\\n\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3035442/python-js-linear-time-explanation/"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "In Python3:\\nHow can a solution with \".split()\" be faster than any solution O(n) running only a while counting the last word size? Like:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        for word in s.split(\\' \\')[::-1]:\\n            if word != \\'\\':\\n                return len(word)\\n```\\nFaster than:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        firstLetter = len(s) -1\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] != \\' \\':\\n                firstLetter = i\\n                break\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] == \\' \\':\\n                return firstLetter - i\\n        return firstLetter+1\\n```\\nand \\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        # trim the trailing spaces\\n        p = len(s) - 1\\n        while p >= 0 and s[p] == \\' \\':\\n            p -= 1\\n\\n        # compute the length of last word\\n        length = 0\\n        while p >= 0 and s[p] != \\' \\':\\n            p -= 1\\n            length += 1\\n        return length\\n```"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "[@ControlAltPete](/ControlAltPete) That makes sense, since Python is interpreted, but it is bad from a learning point of view."
                    },
                    {
                        "username": "ControlAltPete",
                        "content": "You are conceptually correct, scanning from the end backwards to the first space separator is much faster than scanning the entire string for spaces and then counting the last word. Yours is O(n) where n=the length of the last word, the split solution is O(n) where n=the length of the entire string. Both are O(n), but in practice the smaller n will be faster. However, the Python built in functions like split() are orders of magnitude faster than Python code manually scanning the string. So a solution using the builtin split() will be faster than manually counting finding the space. You could create a pathological input string \"a bbb...bbb c\" with a million \"b\"s in the middle where your solution would be faster. "
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || 0 ms || Beats 100% runtime || Easy to understand\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3026790/simple-java-0-ms-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "its_sushmita20",
                        "content": "Veryy Easy Used stringstream logic:)))"
                    },
                    {
                        "username": "gauravj_010902",
                        "content": "cant we do without return statement?"
                    },
                    {
                        "username": "AakashSingh28",
                        "content": " public int lengthOfLastWord(String s) {\\n        String str=s.trim();\\n        String[] arr = str.split(\" \");\\n        return arr[arr.length-1].length();\\n    }"
                    },
                    {
                        "username": "rambhawan",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] str = s.split(\" \");\\n        return (str[str.length-1]).length();\\n    }\\n}"
                    },
                    {
                        "username": "stuartYoung_",
                        "content": "This problem seems to be easy, but bruh  just to match \" a\" and \" a \" cases  \\uD83E\\uDEE5"
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] words = s.split(\"\\\\\\\\s+\");\\n\\t    return words[words.length - 1].length();\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1751603,
                "content": [
                    {
                        "username": "Deepak_8811",
                        "content": "100% Acceptance\\n\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        int i=s.size()-1;\\n        while(i>=0&&s[i]==\\' \\'){\\n            i--;\\n        }\\n        while(i>=0&&s[i]!=\\' \\'){\\n            ans++;\\n            i--;\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "with linear time complexity and const space and explanation\\n\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3035442/python-js-linear-time-explanation/"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "In Python3:\\nHow can a solution with \".split()\" be faster than any solution O(n) running only a while counting the last word size? Like:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        for word in s.split(\\' \\')[::-1]:\\n            if word != \\'\\':\\n                return len(word)\\n```\\nFaster than:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        firstLetter = len(s) -1\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] != \\' \\':\\n                firstLetter = i\\n                break\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] == \\' \\':\\n                return firstLetter - i\\n        return firstLetter+1\\n```\\nand \\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        # trim the trailing spaces\\n        p = len(s) - 1\\n        while p >= 0 and s[p] == \\' \\':\\n            p -= 1\\n\\n        # compute the length of last word\\n        length = 0\\n        while p >= 0 and s[p] != \\' \\':\\n            p -= 1\\n            length += 1\\n        return length\\n```"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "[@ControlAltPete](/ControlAltPete) That makes sense, since Python is interpreted, but it is bad from a learning point of view."
                    },
                    {
                        "username": "ControlAltPete",
                        "content": "You are conceptually correct, scanning from the end backwards to the first space separator is much faster than scanning the entire string for spaces and then counting the last word. Yours is O(n) where n=the length of the last word, the split solution is O(n) where n=the length of the entire string. Both are O(n), but in practice the smaller n will be faster. However, the Python built in functions like split() are orders of magnitude faster than Python code manually scanning the string. So a solution using the builtin split() will be faster than manually counting finding the space. You could create a pathological input string \"a bbb...bbb c\" with a million \"b\"s in the middle where your solution would be faster. "
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || 0 ms || Beats 100% runtime || Easy to understand\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3026790/simple-java-0-ms-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "its_sushmita20",
                        "content": "Veryy Easy Used stringstream logic:)))"
                    },
                    {
                        "username": "gauravj_010902",
                        "content": "cant we do without return statement?"
                    },
                    {
                        "username": "AakashSingh28",
                        "content": " public int lengthOfLastWord(String s) {\\n        String str=s.trim();\\n        String[] arr = str.split(\" \");\\n        return arr[arr.length-1].length();\\n    }"
                    },
                    {
                        "username": "rambhawan",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] str = s.split(\" \");\\n        return (str[str.length-1]).length();\\n    }\\n}"
                    },
                    {
                        "username": "stuartYoung_",
                        "content": "This problem seems to be easy, but bruh  just to match \" a\" and \" a \" cases  \\uD83E\\uDEE5"
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] words = s.split(\"\\\\\\\\s+\");\\n\\t    return words[words.length - 1].length();\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1750225,
                "content": [
                    {
                        "username": "Deepak_8811",
                        "content": "100% Acceptance\\n\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        int i=s.size()-1;\\n        while(i>=0&&s[i]==\\' \\'){\\n            i--;\\n        }\\n        while(i>=0&&s[i]!=\\' \\'){\\n            ans++;\\n            i--;\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "with linear time complexity and const space and explanation\\n\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3035442/python-js-linear-time-explanation/"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "In Python3:\\nHow can a solution with \".split()\" be faster than any solution O(n) running only a while counting the last word size? Like:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        for word in s.split(\\' \\')[::-1]:\\n            if word != \\'\\':\\n                return len(word)\\n```\\nFaster than:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        firstLetter = len(s) -1\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] != \\' \\':\\n                firstLetter = i\\n                break\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] == \\' \\':\\n                return firstLetter - i\\n        return firstLetter+1\\n```\\nand \\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        # trim the trailing spaces\\n        p = len(s) - 1\\n        while p >= 0 and s[p] == \\' \\':\\n            p -= 1\\n\\n        # compute the length of last word\\n        length = 0\\n        while p >= 0 and s[p] != \\' \\':\\n            p -= 1\\n            length += 1\\n        return length\\n```"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "[@ControlAltPete](/ControlAltPete) That makes sense, since Python is interpreted, but it is bad from a learning point of view."
                    },
                    {
                        "username": "ControlAltPete",
                        "content": "You are conceptually correct, scanning from the end backwards to the first space separator is much faster than scanning the entire string for spaces and then counting the last word. Yours is O(n) where n=the length of the last word, the split solution is O(n) where n=the length of the entire string. Both are O(n), but in practice the smaller n will be faster. However, the Python built in functions like split() are orders of magnitude faster than Python code manually scanning the string. So a solution using the builtin split() will be faster than manually counting finding the space. You could create a pathological input string \"a bbb...bbb c\" with a million \"b\"s in the middle where your solution would be faster. "
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || 0 ms || Beats 100% runtime || Easy to understand\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3026790/simple-java-0-ms-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "its_sushmita20",
                        "content": "Veryy Easy Used stringstream logic:)))"
                    },
                    {
                        "username": "gauravj_010902",
                        "content": "cant we do without return statement?"
                    },
                    {
                        "username": "AakashSingh28",
                        "content": " public int lengthOfLastWord(String s) {\\n        String str=s.trim();\\n        String[] arr = str.split(\" \");\\n        return arr[arr.length-1].length();\\n    }"
                    },
                    {
                        "username": "rambhawan",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] str = s.split(\" \");\\n        return (str[str.length-1]).length();\\n    }\\n}"
                    },
                    {
                        "username": "stuartYoung_",
                        "content": "This problem seems to be easy, but bruh  just to match \" a\" and \" a \" cases  \\uD83E\\uDEE5"
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] words = s.split(\"\\\\\\\\s+\");\\n\\t    return words[words.length - 1].length();\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1748587,
                "content": [
                    {
                        "username": "Deepak_8811",
                        "content": "100% Acceptance\\n\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        int i=s.size()-1;\\n        while(i>=0&&s[i]==\\' \\'){\\n            i--;\\n        }\\n        while(i>=0&&s[i]!=\\' \\'){\\n            ans++;\\n            i--;\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "with linear time complexity and const space and explanation\\n\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3035442/python-js-linear-time-explanation/"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "In Python3:\\nHow can a solution with \".split()\" be faster than any solution O(n) running only a while counting the last word size? Like:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        for word in s.split(\\' \\')[::-1]:\\n            if word != \\'\\':\\n                return len(word)\\n```\\nFaster than:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        firstLetter = len(s) -1\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] != \\' \\':\\n                firstLetter = i\\n                break\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] == \\' \\':\\n                return firstLetter - i\\n        return firstLetter+1\\n```\\nand \\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        # trim the trailing spaces\\n        p = len(s) - 1\\n        while p >= 0 and s[p] == \\' \\':\\n            p -= 1\\n\\n        # compute the length of last word\\n        length = 0\\n        while p >= 0 and s[p] != \\' \\':\\n            p -= 1\\n            length += 1\\n        return length\\n```"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "[@ControlAltPete](/ControlAltPete) That makes sense, since Python is interpreted, but it is bad from a learning point of view."
                    },
                    {
                        "username": "ControlAltPete",
                        "content": "You are conceptually correct, scanning from the end backwards to the first space separator is much faster than scanning the entire string for spaces and then counting the last word. Yours is O(n) where n=the length of the last word, the split solution is O(n) where n=the length of the entire string. Both are O(n), but in practice the smaller n will be faster. However, the Python built in functions like split() are orders of magnitude faster than Python code manually scanning the string. So a solution using the builtin split() will be faster than manually counting finding the space. You could create a pathological input string \"a bbb...bbb c\" with a million \"b\"s in the middle where your solution would be faster. "
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || 0 ms || Beats 100% runtime || Easy to understand\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3026790/simple-java-0-ms-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "its_sushmita20",
                        "content": "Veryy Easy Used stringstream logic:)))"
                    },
                    {
                        "username": "gauravj_010902",
                        "content": "cant we do without return statement?"
                    },
                    {
                        "username": "AakashSingh28",
                        "content": " public int lengthOfLastWord(String s) {\\n        String str=s.trim();\\n        String[] arr = str.split(\" \");\\n        return arr[arr.length-1].length();\\n    }"
                    },
                    {
                        "username": "rambhawan",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] str = s.split(\" \");\\n        return (str[str.length-1]).length();\\n    }\\n}"
                    },
                    {
                        "username": "stuartYoung_",
                        "content": "This problem seems to be easy, but bruh  just to match \" a\" and \" a \" cases  \\uD83E\\uDEE5"
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] words = s.split(\"\\\\\\\\s+\");\\n\\t    return words[words.length - 1].length();\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1738612,
                "content": [
                    {
                        "username": "Deepak_8811",
                        "content": "100% Acceptance\\n\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        int i=s.size()-1;\\n        while(i>=0&&s[i]==\\' \\'){\\n            i--;\\n        }\\n        while(i>=0&&s[i]!=\\' \\'){\\n            ans++;\\n            i--;\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "with linear time complexity and const space and explanation\\n\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3035442/python-js-linear-time-explanation/"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "In Python3:\\nHow can a solution with \".split()\" be faster than any solution O(n) running only a while counting the last word size? Like:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        for word in s.split(\\' \\')[::-1]:\\n            if word != \\'\\':\\n                return len(word)\\n```\\nFaster than:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        firstLetter = len(s) -1\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] != \\' \\':\\n                firstLetter = i\\n                break\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] == \\' \\':\\n                return firstLetter - i\\n        return firstLetter+1\\n```\\nand \\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        # trim the trailing spaces\\n        p = len(s) - 1\\n        while p >= 0 and s[p] == \\' \\':\\n            p -= 1\\n\\n        # compute the length of last word\\n        length = 0\\n        while p >= 0 and s[p] != \\' \\':\\n            p -= 1\\n            length += 1\\n        return length\\n```"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "[@ControlAltPete](/ControlAltPete) That makes sense, since Python is interpreted, but it is bad from a learning point of view."
                    },
                    {
                        "username": "ControlAltPete",
                        "content": "You are conceptually correct, scanning from the end backwards to the first space separator is much faster than scanning the entire string for spaces and then counting the last word. Yours is O(n) where n=the length of the last word, the split solution is O(n) where n=the length of the entire string. Both are O(n), but in practice the smaller n will be faster. However, the Python built in functions like split() are orders of magnitude faster than Python code manually scanning the string. So a solution using the builtin split() will be faster than manually counting finding the space. You could create a pathological input string \"a bbb...bbb c\" with a million \"b\"s in the middle where your solution would be faster. "
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || 0 ms || Beats 100% runtime || Easy to understand\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3026790/simple-java-0-ms-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "its_sushmita20",
                        "content": "Veryy Easy Used stringstream logic:)))"
                    },
                    {
                        "username": "gauravj_010902",
                        "content": "cant we do without return statement?"
                    },
                    {
                        "username": "AakashSingh28",
                        "content": " public int lengthOfLastWord(String s) {\\n        String str=s.trim();\\n        String[] arr = str.split(\" \");\\n        return arr[arr.length-1].length();\\n    }"
                    },
                    {
                        "username": "rambhawan",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] str = s.split(\" \");\\n        return (str[str.length-1]).length();\\n    }\\n}"
                    },
                    {
                        "username": "stuartYoung_",
                        "content": "This problem seems to be easy, but bruh  just to match \" a\" and \" a \" cases  \\uD83E\\uDEE5"
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] words = s.split(\"\\\\\\\\s+\");\\n\\t    return words[words.length - 1].length();\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1735551,
                "content": [
                    {
                        "username": "Deepak_8811",
                        "content": "100% Acceptance\\n\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        int i=s.size()-1;\\n        while(i>=0&&s[i]==\\' \\'){\\n            i--;\\n        }\\n        while(i>=0&&s[i]!=\\' \\'){\\n            ans++;\\n            i--;\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "with linear time complexity and const space and explanation\\n\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3035442/python-js-linear-time-explanation/"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "In Python3:\\nHow can a solution with \".split()\" be faster than any solution O(n) running only a while counting the last word size? Like:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        for word in s.split(\\' \\')[::-1]:\\n            if word != \\'\\':\\n                return len(word)\\n```\\nFaster than:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        firstLetter = len(s) -1\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] != \\' \\':\\n                firstLetter = i\\n                break\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] == \\' \\':\\n                return firstLetter - i\\n        return firstLetter+1\\n```\\nand \\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        # trim the trailing spaces\\n        p = len(s) - 1\\n        while p >= 0 and s[p] == \\' \\':\\n            p -= 1\\n\\n        # compute the length of last word\\n        length = 0\\n        while p >= 0 and s[p] != \\' \\':\\n            p -= 1\\n            length += 1\\n        return length\\n```"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "[@ControlAltPete](/ControlAltPete) That makes sense, since Python is interpreted, but it is bad from a learning point of view."
                    },
                    {
                        "username": "ControlAltPete",
                        "content": "You are conceptually correct, scanning from the end backwards to the first space separator is much faster than scanning the entire string for spaces and then counting the last word. Yours is O(n) where n=the length of the last word, the split solution is O(n) where n=the length of the entire string. Both are O(n), but in practice the smaller n will be faster. However, the Python built in functions like split() are orders of magnitude faster than Python code manually scanning the string. So a solution using the builtin split() will be faster than manually counting finding the space. You could create a pathological input string \"a bbb...bbb c\" with a million \"b\"s in the middle where your solution would be faster. "
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || 0 ms || Beats 100% runtime || Easy to understand\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3026790/simple-java-0-ms-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "its_sushmita20",
                        "content": "Veryy Easy Used stringstream logic:)))"
                    },
                    {
                        "username": "gauravj_010902",
                        "content": "cant we do without return statement?"
                    },
                    {
                        "username": "AakashSingh28",
                        "content": " public int lengthOfLastWord(String s) {\\n        String str=s.trim();\\n        String[] arr = str.split(\" \");\\n        return arr[arr.length-1].length();\\n    }"
                    },
                    {
                        "username": "rambhawan",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] str = s.split(\" \");\\n        return (str[str.length-1]).length();\\n    }\\n}"
                    },
                    {
                        "username": "stuartYoung_",
                        "content": "This problem seems to be easy, but bruh  just to match \" a\" and \" a \" cases  \\uD83E\\uDEE5"
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] words = s.split(\"\\\\\\\\s+\");\\n\\t    return words[words.length - 1].length();\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1729353,
                "content": [
                    {
                        "username": "Deepak_8811",
                        "content": "100% Acceptance\\n\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        int i=s.size()-1;\\n        while(i>=0&&s[i]==\\' \\'){\\n            i--;\\n        }\\n        while(i>=0&&s[i]!=\\' \\'){\\n            ans++;\\n            i--;\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "with linear time complexity and const space and explanation\\n\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3035442/python-js-linear-time-explanation/"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "In Python3:\\nHow can a solution with \".split()\" be faster than any solution O(n) running only a while counting the last word size? Like:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        for word in s.split(\\' \\')[::-1]:\\n            if word != \\'\\':\\n                return len(word)\\n```\\nFaster than:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        firstLetter = len(s) -1\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] != \\' \\':\\n                firstLetter = i\\n                break\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] == \\' \\':\\n                return firstLetter - i\\n        return firstLetter+1\\n```\\nand \\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        # trim the trailing spaces\\n        p = len(s) - 1\\n        while p >= 0 and s[p] == \\' \\':\\n            p -= 1\\n\\n        # compute the length of last word\\n        length = 0\\n        while p >= 0 and s[p] != \\' \\':\\n            p -= 1\\n            length += 1\\n        return length\\n```"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "[@ControlAltPete](/ControlAltPete) That makes sense, since Python is interpreted, but it is bad from a learning point of view."
                    },
                    {
                        "username": "ControlAltPete",
                        "content": "You are conceptually correct, scanning from the end backwards to the first space separator is much faster than scanning the entire string for spaces and then counting the last word. Yours is O(n) where n=the length of the last word, the split solution is O(n) where n=the length of the entire string. Both are O(n), but in practice the smaller n will be faster. However, the Python built in functions like split() are orders of magnitude faster than Python code manually scanning the string. So a solution using the builtin split() will be faster than manually counting finding the space. You could create a pathological input string \"a bbb...bbb c\" with a million \"b\"s in the middle where your solution would be faster. "
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || 0 ms || Beats 100% runtime || Easy to understand\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3026790/simple-java-0-ms-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "its_sushmita20",
                        "content": "Veryy Easy Used stringstream logic:)))"
                    },
                    {
                        "username": "gauravj_010902",
                        "content": "cant we do without return statement?"
                    },
                    {
                        "username": "AakashSingh28",
                        "content": " public int lengthOfLastWord(String s) {\\n        String str=s.trim();\\n        String[] arr = str.split(\" \");\\n        return arr[arr.length-1].length();\\n    }"
                    },
                    {
                        "username": "rambhawan",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] str = s.split(\" \");\\n        return (str[str.length-1]).length();\\n    }\\n}"
                    },
                    {
                        "username": "stuartYoung_",
                        "content": "This problem seems to be easy, but bruh  just to match \" a\" and \" a \" cases  \\uD83E\\uDEE5"
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] words = s.split(\"\\\\\\\\s+\");\\n\\t    return words[words.length - 1].length();\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1726601,
                "content": [
                    {
                        "username": "Deepak_8811",
                        "content": "100% Acceptance\\n\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        int i=s.size()-1;\\n        while(i>=0&&s[i]==\\' \\'){\\n            i--;\\n        }\\n        while(i>=0&&s[i]!=\\' \\'){\\n            ans++;\\n            i--;\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "with linear time complexity and const space and explanation\\n\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3035442/python-js-linear-time-explanation/"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "In Python3:\\nHow can a solution with \".split()\" be faster than any solution O(n) running only a while counting the last word size? Like:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        for word in s.split(\\' \\')[::-1]:\\n            if word != \\'\\':\\n                return len(word)\\n```\\nFaster than:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        firstLetter = len(s) -1\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] != \\' \\':\\n                firstLetter = i\\n                break\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] == \\' \\':\\n                return firstLetter - i\\n        return firstLetter+1\\n```\\nand \\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        # trim the trailing spaces\\n        p = len(s) - 1\\n        while p >= 0 and s[p] == \\' \\':\\n            p -= 1\\n\\n        # compute the length of last word\\n        length = 0\\n        while p >= 0 and s[p] != \\' \\':\\n            p -= 1\\n            length += 1\\n        return length\\n```"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "[@ControlAltPete](/ControlAltPete) That makes sense, since Python is interpreted, but it is bad from a learning point of view."
                    },
                    {
                        "username": "ControlAltPete",
                        "content": "You are conceptually correct, scanning from the end backwards to the first space separator is much faster than scanning the entire string for spaces and then counting the last word. Yours is O(n) where n=the length of the last word, the split solution is O(n) where n=the length of the entire string. Both are O(n), but in practice the smaller n will be faster. However, the Python built in functions like split() are orders of magnitude faster than Python code manually scanning the string. So a solution using the builtin split() will be faster than manually counting finding the space. You could create a pathological input string \"a bbb...bbb c\" with a million \"b\"s in the middle where your solution would be faster. "
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || 0 ms || Beats 100% runtime || Easy to understand\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3026790/simple-java-0-ms-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "its_sushmita20",
                        "content": "Veryy Easy Used stringstream logic:)))"
                    },
                    {
                        "username": "gauravj_010902",
                        "content": "cant we do without return statement?"
                    },
                    {
                        "username": "AakashSingh28",
                        "content": " public int lengthOfLastWord(String s) {\\n        String str=s.trim();\\n        String[] arr = str.split(\" \");\\n        return arr[arr.length-1].length();\\n    }"
                    },
                    {
                        "username": "rambhawan",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] str = s.split(\" \");\\n        return (str[str.length-1]).length();\\n    }\\n}"
                    },
                    {
                        "username": "stuartYoung_",
                        "content": "This problem seems to be easy, but bruh  just to match \" a\" and \" a \" cases  \\uD83E\\uDEE5"
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] words = s.split(\"\\\\\\\\s+\");\\n\\t    return words[words.length - 1].length();\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1725405,
                "content": [
                    {
                        "username": "Deepak_8811",
                        "content": "100% Acceptance\\n\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        int i=s.size()-1;\\n        while(i>=0&&s[i]==\\' \\'){\\n            i--;\\n        }\\n        while(i>=0&&s[i]!=\\' \\'){\\n            ans++;\\n            i--;\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "with linear time complexity and const space and explanation\\n\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3035442/python-js-linear-time-explanation/"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "In Python3:\\nHow can a solution with \".split()\" be faster than any solution O(n) running only a while counting the last word size? Like:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        for word in s.split(\\' \\')[::-1]:\\n            if word != \\'\\':\\n                return len(word)\\n```\\nFaster than:\\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        firstLetter = len(s) -1\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] != \\' \\':\\n                firstLetter = i\\n                break\\n        for i in range(firstLetter, -1, -1):\\n            if s[i] == \\' \\':\\n                return firstLetter - i\\n        return firstLetter+1\\n```\\nand \\n```\\nclass Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        # trim the trailing spaces\\n        p = len(s) - 1\\n        while p >= 0 and s[p] == \\' \\':\\n            p -= 1\\n\\n        # compute the length of last word\\n        length = 0\\n        while p >= 0 and s[p] != \\' \\':\\n            p -= 1\\n            length += 1\\n        return length\\n```"
                    },
                    {
                        "username": "viniciusgguima",
                        "content": "[@ControlAltPete](/ControlAltPete) That makes sense, since Python is interpreted, but it is bad from a learning point of view."
                    },
                    {
                        "username": "ControlAltPete",
                        "content": "You are conceptually correct, scanning from the end backwards to the first space separator is much faster than scanning the entire string for spaces and then counting the last word. Yours is O(n) where n=the length of the last word, the split solution is O(n) where n=the length of the entire string. Both are O(n), but in practice the smaller n will be faster. However, the Python built in functions like split() are orders of magnitude faster than Python code manually scanning the string. So a solution using the builtin split() will be faster than manually counting finding the space. You could create a pathological input string \"a bbb...bbb c\" with a million \"b\"s in the middle where your solution would be faster. "
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || 0 ms || Beats 100% runtime || Easy to understand\\nhttps://leetcode.com/problems/length-of-last-word/solutions/3026790/simple-java-0-ms-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "its_sushmita20",
                        "content": "Veryy Easy Used stringstream logic:)))"
                    },
                    {
                        "username": "gauravj_010902",
                        "content": "cant we do without return statement?"
                    },
                    {
                        "username": "AakashSingh28",
                        "content": " public int lengthOfLastWord(String s) {\\n        String str=s.trim();\\n        String[] arr = str.split(\" \");\\n        return arr[arr.length-1].length();\\n    }"
                    },
                    {
                        "username": "rambhawan",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] str = s.split(\" \");\\n        return (str[str.length-1]).length();\\n    }\\n}"
                    },
                    {
                        "username": "stuartYoung_",
                        "content": "This problem seems to be easy, but bruh  just to match \" a\" and \" a \" cases  \\uD83E\\uDEE5"
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "class Solution {\\n    public int lengthOfLastWord(String s) {\\n        String[] words = s.split(\"\\\\\\\\s+\");\\n\\t    return words[words.length - 1].length();\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1724227,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/58_length_of_last_words.cpp"
                    },
                    {
                        "username": "Draklife",
                        "content": "why this code return 0 :please answer\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        bool ok=false;\\n        int len=s.size()-1;\\n        for(int i=len;i>=0;--i){\\n           if(s[i] != \\' \\'){ ans++;}\\n  }\\n  return ans;\\n    }\\n};\\n"
                    },
                    {
                        "username": "Stuti-Bansal",
                        "content": "because ans is  initialized with 0 and in if condition since ok will be true it is not getting  increamented, their will also be else if condition"
                    },
                    {
                        "username": "poweracoon",
                        "content": "def lengthOfLastWord(self, s: str) -> int:\\n        empty_string = \"\"\\n        empty_list = []\\n\\n        for letters in s:\\n            if letters.isalpha() == True:\\n                empty_string = letters + empty_string\\n            else:\\n                empty_list.append(empty_string)\\n                empty_string = \"\"\\n            continue\\n        return len(empty_list[-1])\\n\\nWHAT IS WRONG WITH THIS CODE?\\n"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "When i write the below code i am getting Runt time error how to resolve it?\\n     \\n    int size = s.size();\\n    if (s.empty())\\n        return 0;\\n    int count=0;\\n    for(int i=size-1;s[i]>0;i--)\\n    {\\n        if(s[i]!=\\' \\'){\\n            count++;\\n            if(s[i-1]==\\' \\'){\\n                break;\\n            }\\n        }\\n    }\\n    return count;"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "[@Last-Autumn-Leaf](/Last-Autumn-Leaf) Thank you i did this way its running in online ide but still getting an error.(run time error)\n int size = s.size();\n    int count=0;\n    \n    for(int i=size-1;i>=0;i--)\n    {\n        if(s[i]!=' '){\n            count++;\n            if(s[i-1]==' '){\n                break;\n            }\n        }\n    }\n\n    return count;\n    }\nCan you please share the code so that i can refer it?"
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Hello your code is really code :\nJust correct this line  :\n   for(int i=size-1;s[i]>0;i--)\nwith :\n   for(int i=size-1;i>0;i--)\nand check corner case for when then input =='a' or \"a \""
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Luffy is still joyboy is a One piece Spoiler "
                    },
                    {
                        "username": "user8798U",
                        "content": "If I do `len(s.split()[-1])`, the code runs really quickly, it comes in at faster than basically everything. If I do something clever, starting at the end of the word and working backwards until I've found the start of the last word, it comes in much slower. But the former is O(n) (in the best case), while the latter is O(m), where m is the length of the last word plus trailing whitespace, which is O(n) in the worst case and O(1) in the best case. So I don't understand why the split method comes out as faster."
                    },
                    {
                        "username": "shoshinsha_coder",
                        "content": "My code is pretty simple I just made a variable for the start of the last word if \"seen\" set to 1, or 0 if not yet seen. Then I set a variable for character count. Then I made a simple for loop starting from the end of the string and worked my way back, continuing the loop if spaces are encountered and breaking out of the loop if the last word count has started and the next character is a space. check it out - > /**\\nvar lengthOfLastWord = function(s) {\\n    let charCnt = 0;\\n    let seen = 0;\\n    for(let i = s.length-1; i > -1; i--) {\\n        if(s[i] !== \" \") {\\n            charCnt++;\\n            seen == 1;\\n             } else if(s[i] == \" \") {\\n                    continue;\\n                }\\n                if(s[i-1] == \" \") {\\n                    break;\\n                }\\n    }\\n        return charCnt;\\n};"
                    },
                    {
                        "username": "Abhishek_Rookie",
                        "content": " public int lengthOfLastWord(String str) {\\n        str = str.trim() ;\\n        Stack <Integer> stk = new Stack<>() ;\\n        for(int i = 0 ; i < str.length() ; i ++) {\\n            if(str.charAt(i) == \\' \\') {\\n                stk.push(i) ;\\n            }\\n        }\\n        if(stk.isEmpty()){\\n            return str.length() ;\\n        }\\n        int k = stk.pop() + 1;\\n        String $str = str.substring(k) ;\\n\\n        return $str.length() ;\\n    }\\n\\nThats\\'it  fellas !"
                    },
                    {
                        "username": "mdmasidulhasan27",
                        "content": "1. get length-1\\n2. move to the last character which is not \\' \\' space traversing from last.\\n3. traverse from last character until you get another space and count \\n4. print the counted value.\\n\\nyou are done :)"
                    },
                    {
                        "username": "msauer22",
                        "content": "Will not work. See the case if the word is \"a\".\n1) length-1 = 0\n2) would end at index 0\n3) would still be at index 0\n4) counting from 0 to 0 is 0 but expected result is 1\n\nYour solution does work in general but you have these edge cases, where it just doesnt add up well. \nYou can however solve that problem by \"if (l == r) { return 1; }\""
                    },
                    {
                        "username": "denniskozevnikoff",
                        "content": "Java: \n\n\n    class Solution {\n        public int lengthOfLastWord(String s) {\n        \n        //trim space at the beginning / end\n        String ss = s.trim();\n        //split the string into an array\n        String[] words = ss.split(\" \");\n        //get the last element in the array\n        String last_word = words[words.length-1];\n        //get the element length\n        int last_word_len = last_word.length();\n\n        return last_word_len;\n        }\n    }"
                    }
                ]
            },
            {
                "id": 1722779,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/58_length_of_last_words.cpp"
                    },
                    {
                        "username": "Draklife",
                        "content": "why this code return 0 :please answer\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        bool ok=false;\\n        int len=s.size()-1;\\n        for(int i=len;i>=0;--i){\\n           if(s[i] != \\' \\'){ ans++;}\\n  }\\n  return ans;\\n    }\\n};\\n"
                    },
                    {
                        "username": "Stuti-Bansal",
                        "content": "because ans is  initialized with 0 and in if condition since ok will be true it is not getting  increamented, their will also be else if condition"
                    },
                    {
                        "username": "poweracoon",
                        "content": "def lengthOfLastWord(self, s: str) -> int:\\n        empty_string = \"\"\\n        empty_list = []\\n\\n        for letters in s:\\n            if letters.isalpha() == True:\\n                empty_string = letters + empty_string\\n            else:\\n                empty_list.append(empty_string)\\n                empty_string = \"\"\\n            continue\\n        return len(empty_list[-1])\\n\\nWHAT IS WRONG WITH THIS CODE?\\n"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "When i write the below code i am getting Runt time error how to resolve it?\\n     \\n    int size = s.size();\\n    if (s.empty())\\n        return 0;\\n    int count=0;\\n    for(int i=size-1;s[i]>0;i--)\\n    {\\n        if(s[i]!=\\' \\'){\\n            count++;\\n            if(s[i-1]==\\' \\'){\\n                break;\\n            }\\n        }\\n    }\\n    return count;"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "[@Last-Autumn-Leaf](/Last-Autumn-Leaf) Thank you i did this way its running in online ide but still getting an error.(run time error)\n int size = s.size();\n    int count=0;\n    \n    for(int i=size-1;i>=0;i--)\n    {\n        if(s[i]!=' '){\n            count++;\n            if(s[i-1]==' '){\n                break;\n            }\n        }\n    }\n\n    return count;\n    }\nCan you please share the code so that i can refer it?"
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Hello your code is really code :\nJust correct this line  :\n   for(int i=size-1;s[i]>0;i--)\nwith :\n   for(int i=size-1;i>0;i--)\nand check corner case for when then input =='a' or \"a \""
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Luffy is still joyboy is a One piece Spoiler "
                    },
                    {
                        "username": "user8798U",
                        "content": "If I do `len(s.split()[-1])`, the code runs really quickly, it comes in at faster than basically everything. If I do something clever, starting at the end of the word and working backwards until I've found the start of the last word, it comes in much slower. But the former is O(n) (in the best case), while the latter is O(m), where m is the length of the last word plus trailing whitespace, which is O(n) in the worst case and O(1) in the best case. So I don't understand why the split method comes out as faster."
                    },
                    {
                        "username": "shoshinsha_coder",
                        "content": "My code is pretty simple I just made a variable for the start of the last word if \"seen\" set to 1, or 0 if not yet seen. Then I set a variable for character count. Then I made a simple for loop starting from the end of the string and worked my way back, continuing the loop if spaces are encountered and breaking out of the loop if the last word count has started and the next character is a space. check it out - > /**\\nvar lengthOfLastWord = function(s) {\\n    let charCnt = 0;\\n    let seen = 0;\\n    for(let i = s.length-1; i > -1; i--) {\\n        if(s[i] !== \" \") {\\n            charCnt++;\\n            seen == 1;\\n             } else if(s[i] == \" \") {\\n                    continue;\\n                }\\n                if(s[i-1] == \" \") {\\n                    break;\\n                }\\n    }\\n        return charCnt;\\n};"
                    },
                    {
                        "username": "Abhishek_Rookie",
                        "content": " public int lengthOfLastWord(String str) {\\n        str = str.trim() ;\\n        Stack <Integer> stk = new Stack<>() ;\\n        for(int i = 0 ; i < str.length() ; i ++) {\\n            if(str.charAt(i) == \\' \\') {\\n                stk.push(i) ;\\n            }\\n        }\\n        if(stk.isEmpty()){\\n            return str.length() ;\\n        }\\n        int k = stk.pop() + 1;\\n        String $str = str.substring(k) ;\\n\\n        return $str.length() ;\\n    }\\n\\nThats\\'it  fellas !"
                    },
                    {
                        "username": "mdmasidulhasan27",
                        "content": "1. get length-1\\n2. move to the last character which is not \\' \\' space traversing from last.\\n3. traverse from last character until you get another space and count \\n4. print the counted value.\\n\\nyou are done :)"
                    },
                    {
                        "username": "msauer22",
                        "content": "Will not work. See the case if the word is \"a\".\n1) length-1 = 0\n2) would end at index 0\n3) would still be at index 0\n4) counting from 0 to 0 is 0 but expected result is 1\n\nYour solution does work in general but you have these edge cases, where it just doesnt add up well. \nYou can however solve that problem by \"if (l == r) { return 1; }\""
                    },
                    {
                        "username": "denniskozevnikoff",
                        "content": "Java: \n\n\n    class Solution {\n        public int lengthOfLastWord(String s) {\n        \n        //trim space at the beginning / end\n        String ss = s.trim();\n        //split the string into an array\n        String[] words = ss.split(\" \");\n        //get the last element in the array\n        String last_word = words[words.length-1];\n        //get the element length\n        int last_word_len = last_word.length();\n\n        return last_word_len;\n        }\n    }"
                    }
                ]
            },
            {
                "id": 1716840,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/58_length_of_last_words.cpp"
                    },
                    {
                        "username": "Draklife",
                        "content": "why this code return 0 :please answer\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        bool ok=false;\\n        int len=s.size()-1;\\n        for(int i=len;i>=0;--i){\\n           if(s[i] != \\' \\'){ ans++;}\\n  }\\n  return ans;\\n    }\\n};\\n"
                    },
                    {
                        "username": "Stuti-Bansal",
                        "content": "because ans is  initialized with 0 and in if condition since ok will be true it is not getting  increamented, their will also be else if condition"
                    },
                    {
                        "username": "poweracoon",
                        "content": "def lengthOfLastWord(self, s: str) -> int:\\n        empty_string = \"\"\\n        empty_list = []\\n\\n        for letters in s:\\n            if letters.isalpha() == True:\\n                empty_string = letters + empty_string\\n            else:\\n                empty_list.append(empty_string)\\n                empty_string = \"\"\\n            continue\\n        return len(empty_list[-1])\\n\\nWHAT IS WRONG WITH THIS CODE?\\n"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "When i write the below code i am getting Runt time error how to resolve it?\\n     \\n    int size = s.size();\\n    if (s.empty())\\n        return 0;\\n    int count=0;\\n    for(int i=size-1;s[i]>0;i--)\\n    {\\n        if(s[i]!=\\' \\'){\\n            count++;\\n            if(s[i-1]==\\' \\'){\\n                break;\\n            }\\n        }\\n    }\\n    return count;"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "[@Last-Autumn-Leaf](/Last-Autumn-Leaf) Thank you i did this way its running in online ide but still getting an error.(run time error)\n int size = s.size();\n    int count=0;\n    \n    for(int i=size-1;i>=0;i--)\n    {\n        if(s[i]!=' '){\n            count++;\n            if(s[i-1]==' '){\n                break;\n            }\n        }\n    }\n\n    return count;\n    }\nCan you please share the code so that i can refer it?"
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Hello your code is really code :\nJust correct this line  :\n   for(int i=size-1;s[i]>0;i--)\nwith :\n   for(int i=size-1;i>0;i--)\nand check corner case for when then input =='a' or \"a \""
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Luffy is still joyboy is a One piece Spoiler "
                    },
                    {
                        "username": "user8798U",
                        "content": "If I do `len(s.split()[-1])`, the code runs really quickly, it comes in at faster than basically everything. If I do something clever, starting at the end of the word and working backwards until I've found the start of the last word, it comes in much slower. But the former is O(n) (in the best case), while the latter is O(m), where m is the length of the last word plus trailing whitespace, which is O(n) in the worst case and O(1) in the best case. So I don't understand why the split method comes out as faster."
                    },
                    {
                        "username": "shoshinsha_coder",
                        "content": "My code is pretty simple I just made a variable for the start of the last word if \"seen\" set to 1, or 0 if not yet seen. Then I set a variable for character count. Then I made a simple for loop starting from the end of the string and worked my way back, continuing the loop if spaces are encountered and breaking out of the loop if the last word count has started and the next character is a space. check it out - > /**\\nvar lengthOfLastWord = function(s) {\\n    let charCnt = 0;\\n    let seen = 0;\\n    for(let i = s.length-1; i > -1; i--) {\\n        if(s[i] !== \" \") {\\n            charCnt++;\\n            seen == 1;\\n             } else if(s[i] == \" \") {\\n                    continue;\\n                }\\n                if(s[i-1] == \" \") {\\n                    break;\\n                }\\n    }\\n        return charCnt;\\n};"
                    },
                    {
                        "username": "Abhishek_Rookie",
                        "content": " public int lengthOfLastWord(String str) {\\n        str = str.trim() ;\\n        Stack <Integer> stk = new Stack<>() ;\\n        for(int i = 0 ; i < str.length() ; i ++) {\\n            if(str.charAt(i) == \\' \\') {\\n                stk.push(i) ;\\n            }\\n        }\\n        if(stk.isEmpty()){\\n            return str.length() ;\\n        }\\n        int k = stk.pop() + 1;\\n        String $str = str.substring(k) ;\\n\\n        return $str.length() ;\\n    }\\n\\nThats\\'it  fellas !"
                    },
                    {
                        "username": "mdmasidulhasan27",
                        "content": "1. get length-1\\n2. move to the last character which is not \\' \\' space traversing from last.\\n3. traverse from last character until you get another space and count \\n4. print the counted value.\\n\\nyou are done :)"
                    },
                    {
                        "username": "msauer22",
                        "content": "Will not work. See the case if the word is \"a\".\n1) length-1 = 0\n2) would end at index 0\n3) would still be at index 0\n4) counting from 0 to 0 is 0 but expected result is 1\n\nYour solution does work in general but you have these edge cases, where it just doesnt add up well. \nYou can however solve that problem by \"if (l == r) { return 1; }\""
                    },
                    {
                        "username": "denniskozevnikoff",
                        "content": "Java: \n\n\n    class Solution {\n        public int lengthOfLastWord(String s) {\n        \n        //trim space at the beginning / end\n        String ss = s.trim();\n        //split the string into an array\n        String[] words = ss.split(\" \");\n        //get the last element in the array\n        String last_word = words[words.length-1];\n        //get the element length\n        int last_word_len = last_word.length();\n\n        return last_word_len;\n        }\n    }"
                    }
                ]
            },
            {
                "id": 1710538,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/58_length_of_last_words.cpp"
                    },
                    {
                        "username": "Draklife",
                        "content": "why this code return 0 :please answer\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        bool ok=false;\\n        int len=s.size()-1;\\n        for(int i=len;i>=0;--i){\\n           if(s[i] != \\' \\'){ ans++;}\\n  }\\n  return ans;\\n    }\\n};\\n"
                    },
                    {
                        "username": "Stuti-Bansal",
                        "content": "because ans is  initialized with 0 and in if condition since ok will be true it is not getting  increamented, their will also be else if condition"
                    },
                    {
                        "username": "poweracoon",
                        "content": "def lengthOfLastWord(self, s: str) -> int:\\n        empty_string = \"\"\\n        empty_list = []\\n\\n        for letters in s:\\n            if letters.isalpha() == True:\\n                empty_string = letters + empty_string\\n            else:\\n                empty_list.append(empty_string)\\n                empty_string = \"\"\\n            continue\\n        return len(empty_list[-1])\\n\\nWHAT IS WRONG WITH THIS CODE?\\n"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "When i write the below code i am getting Runt time error how to resolve it?\\n     \\n    int size = s.size();\\n    if (s.empty())\\n        return 0;\\n    int count=0;\\n    for(int i=size-1;s[i]>0;i--)\\n    {\\n        if(s[i]!=\\' \\'){\\n            count++;\\n            if(s[i-1]==\\' \\'){\\n                break;\\n            }\\n        }\\n    }\\n    return count;"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "[@Last-Autumn-Leaf](/Last-Autumn-Leaf) Thank you i did this way its running in online ide but still getting an error.(run time error)\n int size = s.size();\n    int count=0;\n    \n    for(int i=size-1;i>=0;i--)\n    {\n        if(s[i]!=' '){\n            count++;\n            if(s[i-1]==' '){\n                break;\n            }\n        }\n    }\n\n    return count;\n    }\nCan you please share the code so that i can refer it?"
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Hello your code is really code :\nJust correct this line  :\n   for(int i=size-1;s[i]>0;i--)\nwith :\n   for(int i=size-1;i>0;i--)\nand check corner case for when then input =='a' or \"a \""
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Luffy is still joyboy is a One piece Spoiler "
                    },
                    {
                        "username": "user8798U",
                        "content": "If I do `len(s.split()[-1])`, the code runs really quickly, it comes in at faster than basically everything. If I do something clever, starting at the end of the word and working backwards until I've found the start of the last word, it comes in much slower. But the former is O(n) (in the best case), while the latter is O(m), where m is the length of the last word plus trailing whitespace, which is O(n) in the worst case and O(1) in the best case. So I don't understand why the split method comes out as faster."
                    },
                    {
                        "username": "shoshinsha_coder",
                        "content": "My code is pretty simple I just made a variable for the start of the last word if \"seen\" set to 1, or 0 if not yet seen. Then I set a variable for character count. Then I made a simple for loop starting from the end of the string and worked my way back, continuing the loop if spaces are encountered and breaking out of the loop if the last word count has started and the next character is a space. check it out - > /**\\nvar lengthOfLastWord = function(s) {\\n    let charCnt = 0;\\n    let seen = 0;\\n    for(let i = s.length-1; i > -1; i--) {\\n        if(s[i] !== \" \") {\\n            charCnt++;\\n            seen == 1;\\n             } else if(s[i] == \" \") {\\n                    continue;\\n                }\\n                if(s[i-1] == \" \") {\\n                    break;\\n                }\\n    }\\n        return charCnt;\\n};"
                    },
                    {
                        "username": "Abhishek_Rookie",
                        "content": " public int lengthOfLastWord(String str) {\\n        str = str.trim() ;\\n        Stack <Integer> stk = new Stack<>() ;\\n        for(int i = 0 ; i < str.length() ; i ++) {\\n            if(str.charAt(i) == \\' \\') {\\n                stk.push(i) ;\\n            }\\n        }\\n        if(stk.isEmpty()){\\n            return str.length() ;\\n        }\\n        int k = stk.pop() + 1;\\n        String $str = str.substring(k) ;\\n\\n        return $str.length() ;\\n    }\\n\\nThats\\'it  fellas !"
                    },
                    {
                        "username": "mdmasidulhasan27",
                        "content": "1. get length-1\\n2. move to the last character which is not \\' \\' space traversing from last.\\n3. traverse from last character until you get another space and count \\n4. print the counted value.\\n\\nyou are done :)"
                    },
                    {
                        "username": "msauer22",
                        "content": "Will not work. See the case if the word is \"a\".\n1) length-1 = 0\n2) would end at index 0\n3) would still be at index 0\n4) counting from 0 to 0 is 0 but expected result is 1\n\nYour solution does work in general but you have these edge cases, where it just doesnt add up well. \nYou can however solve that problem by \"if (l == r) { return 1; }\""
                    },
                    {
                        "username": "denniskozevnikoff",
                        "content": "Java: \n\n\n    class Solution {\n        public int lengthOfLastWord(String s) {\n        \n        //trim space at the beginning / end\n        String ss = s.trim();\n        //split the string into an array\n        String[] words = ss.split(\" \");\n        //get the last element in the array\n        String last_word = words[words.length-1];\n        //get the element length\n        int last_word_len = last_word.length();\n\n        return last_word_len;\n        }\n    }"
                    }
                ]
            },
            {
                "id": 1710362,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/58_length_of_last_words.cpp"
                    },
                    {
                        "username": "Draklife",
                        "content": "why this code return 0 :please answer\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        bool ok=false;\\n        int len=s.size()-1;\\n        for(int i=len;i>=0;--i){\\n           if(s[i] != \\' \\'){ ans++;}\\n  }\\n  return ans;\\n    }\\n};\\n"
                    },
                    {
                        "username": "Stuti-Bansal",
                        "content": "because ans is  initialized with 0 and in if condition since ok will be true it is not getting  increamented, their will also be else if condition"
                    },
                    {
                        "username": "poweracoon",
                        "content": "def lengthOfLastWord(self, s: str) -> int:\\n        empty_string = \"\"\\n        empty_list = []\\n\\n        for letters in s:\\n            if letters.isalpha() == True:\\n                empty_string = letters + empty_string\\n            else:\\n                empty_list.append(empty_string)\\n                empty_string = \"\"\\n            continue\\n        return len(empty_list[-1])\\n\\nWHAT IS WRONG WITH THIS CODE?\\n"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "When i write the below code i am getting Runt time error how to resolve it?\\n     \\n    int size = s.size();\\n    if (s.empty())\\n        return 0;\\n    int count=0;\\n    for(int i=size-1;s[i]>0;i--)\\n    {\\n        if(s[i]!=\\' \\'){\\n            count++;\\n            if(s[i-1]==\\' \\'){\\n                break;\\n            }\\n        }\\n    }\\n    return count;"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "[@Last-Autumn-Leaf](/Last-Autumn-Leaf) Thank you i did this way its running in online ide but still getting an error.(run time error)\n int size = s.size();\n    int count=0;\n    \n    for(int i=size-1;i>=0;i--)\n    {\n        if(s[i]!=' '){\n            count++;\n            if(s[i-1]==' '){\n                break;\n            }\n        }\n    }\n\n    return count;\n    }\nCan you please share the code so that i can refer it?"
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Hello your code is really code :\nJust correct this line  :\n   for(int i=size-1;s[i]>0;i--)\nwith :\n   for(int i=size-1;i>0;i--)\nand check corner case for when then input =='a' or \"a \""
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Luffy is still joyboy is a One piece Spoiler "
                    },
                    {
                        "username": "user8798U",
                        "content": "If I do `len(s.split()[-1])`, the code runs really quickly, it comes in at faster than basically everything. If I do something clever, starting at the end of the word and working backwards until I've found the start of the last word, it comes in much slower. But the former is O(n) (in the best case), while the latter is O(m), where m is the length of the last word plus trailing whitespace, which is O(n) in the worst case and O(1) in the best case. So I don't understand why the split method comes out as faster."
                    },
                    {
                        "username": "shoshinsha_coder",
                        "content": "My code is pretty simple I just made a variable for the start of the last word if \"seen\" set to 1, or 0 if not yet seen. Then I set a variable for character count. Then I made a simple for loop starting from the end of the string and worked my way back, continuing the loop if spaces are encountered and breaking out of the loop if the last word count has started and the next character is a space. check it out - > /**\\nvar lengthOfLastWord = function(s) {\\n    let charCnt = 0;\\n    let seen = 0;\\n    for(let i = s.length-1; i > -1; i--) {\\n        if(s[i] !== \" \") {\\n            charCnt++;\\n            seen == 1;\\n             } else if(s[i] == \" \") {\\n                    continue;\\n                }\\n                if(s[i-1] == \" \") {\\n                    break;\\n                }\\n    }\\n        return charCnt;\\n};"
                    },
                    {
                        "username": "Abhishek_Rookie",
                        "content": " public int lengthOfLastWord(String str) {\\n        str = str.trim() ;\\n        Stack <Integer> stk = new Stack<>() ;\\n        for(int i = 0 ; i < str.length() ; i ++) {\\n            if(str.charAt(i) == \\' \\') {\\n                stk.push(i) ;\\n            }\\n        }\\n        if(stk.isEmpty()){\\n            return str.length() ;\\n        }\\n        int k = stk.pop() + 1;\\n        String $str = str.substring(k) ;\\n\\n        return $str.length() ;\\n    }\\n\\nThats\\'it  fellas !"
                    },
                    {
                        "username": "mdmasidulhasan27",
                        "content": "1. get length-1\\n2. move to the last character which is not \\' \\' space traversing from last.\\n3. traverse from last character until you get another space and count \\n4. print the counted value.\\n\\nyou are done :)"
                    },
                    {
                        "username": "msauer22",
                        "content": "Will not work. See the case if the word is \"a\".\n1) length-1 = 0\n2) would end at index 0\n3) would still be at index 0\n4) counting from 0 to 0 is 0 but expected result is 1\n\nYour solution does work in general but you have these edge cases, where it just doesnt add up well. \nYou can however solve that problem by \"if (l == r) { return 1; }\""
                    },
                    {
                        "username": "denniskozevnikoff",
                        "content": "Java: \n\n\n    class Solution {\n        public int lengthOfLastWord(String s) {\n        \n        //trim space at the beginning / end\n        String ss = s.trim();\n        //split the string into an array\n        String[] words = ss.split(\" \");\n        //get the last element in the array\n        String last_word = words[words.length-1];\n        //get the element length\n        int last_word_len = last_word.length();\n\n        return last_word_len;\n        }\n    }"
                    }
                ]
            },
            {
                "id": 1702971,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/58_length_of_last_words.cpp"
                    },
                    {
                        "username": "Draklife",
                        "content": "why this code return 0 :please answer\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        bool ok=false;\\n        int len=s.size()-1;\\n        for(int i=len;i>=0;--i){\\n           if(s[i] != \\' \\'){ ans++;}\\n  }\\n  return ans;\\n    }\\n};\\n"
                    },
                    {
                        "username": "Stuti-Bansal",
                        "content": "because ans is  initialized with 0 and in if condition since ok will be true it is not getting  increamented, their will also be else if condition"
                    },
                    {
                        "username": "poweracoon",
                        "content": "def lengthOfLastWord(self, s: str) -> int:\\n        empty_string = \"\"\\n        empty_list = []\\n\\n        for letters in s:\\n            if letters.isalpha() == True:\\n                empty_string = letters + empty_string\\n            else:\\n                empty_list.append(empty_string)\\n                empty_string = \"\"\\n            continue\\n        return len(empty_list[-1])\\n\\nWHAT IS WRONG WITH THIS CODE?\\n"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "When i write the below code i am getting Runt time error how to resolve it?\\n     \\n    int size = s.size();\\n    if (s.empty())\\n        return 0;\\n    int count=0;\\n    for(int i=size-1;s[i]>0;i--)\\n    {\\n        if(s[i]!=\\' \\'){\\n            count++;\\n            if(s[i-1]==\\' \\'){\\n                break;\\n            }\\n        }\\n    }\\n    return count;"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "[@Last-Autumn-Leaf](/Last-Autumn-Leaf) Thank you i did this way its running in online ide but still getting an error.(run time error)\n int size = s.size();\n    int count=0;\n    \n    for(int i=size-1;i>=0;i--)\n    {\n        if(s[i]!=' '){\n            count++;\n            if(s[i-1]==' '){\n                break;\n            }\n        }\n    }\n\n    return count;\n    }\nCan you please share the code so that i can refer it?"
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Hello your code is really code :\nJust correct this line  :\n   for(int i=size-1;s[i]>0;i--)\nwith :\n   for(int i=size-1;i>0;i--)\nand check corner case for when then input =='a' or \"a \""
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Luffy is still joyboy is a One piece Spoiler "
                    },
                    {
                        "username": "user8798U",
                        "content": "If I do `len(s.split()[-1])`, the code runs really quickly, it comes in at faster than basically everything. If I do something clever, starting at the end of the word and working backwards until I've found the start of the last word, it comes in much slower. But the former is O(n) (in the best case), while the latter is O(m), where m is the length of the last word plus trailing whitespace, which is O(n) in the worst case and O(1) in the best case. So I don't understand why the split method comes out as faster."
                    },
                    {
                        "username": "shoshinsha_coder",
                        "content": "My code is pretty simple I just made a variable for the start of the last word if \"seen\" set to 1, or 0 if not yet seen. Then I set a variable for character count. Then I made a simple for loop starting from the end of the string and worked my way back, continuing the loop if spaces are encountered and breaking out of the loop if the last word count has started and the next character is a space. check it out - > /**\\nvar lengthOfLastWord = function(s) {\\n    let charCnt = 0;\\n    let seen = 0;\\n    for(let i = s.length-1; i > -1; i--) {\\n        if(s[i] !== \" \") {\\n            charCnt++;\\n            seen == 1;\\n             } else if(s[i] == \" \") {\\n                    continue;\\n                }\\n                if(s[i-1] == \" \") {\\n                    break;\\n                }\\n    }\\n        return charCnt;\\n};"
                    },
                    {
                        "username": "Abhishek_Rookie",
                        "content": " public int lengthOfLastWord(String str) {\\n        str = str.trim() ;\\n        Stack <Integer> stk = new Stack<>() ;\\n        for(int i = 0 ; i < str.length() ; i ++) {\\n            if(str.charAt(i) == \\' \\') {\\n                stk.push(i) ;\\n            }\\n        }\\n        if(stk.isEmpty()){\\n            return str.length() ;\\n        }\\n        int k = stk.pop() + 1;\\n        String $str = str.substring(k) ;\\n\\n        return $str.length() ;\\n    }\\n\\nThats\\'it  fellas !"
                    },
                    {
                        "username": "mdmasidulhasan27",
                        "content": "1. get length-1\\n2. move to the last character which is not \\' \\' space traversing from last.\\n3. traverse from last character until you get another space and count \\n4. print the counted value.\\n\\nyou are done :)"
                    },
                    {
                        "username": "msauer22",
                        "content": "Will not work. See the case if the word is \"a\".\n1) length-1 = 0\n2) would end at index 0\n3) would still be at index 0\n4) counting from 0 to 0 is 0 but expected result is 1\n\nYour solution does work in general but you have these edge cases, where it just doesnt add up well. \nYou can however solve that problem by \"if (l == r) { return 1; }\""
                    },
                    {
                        "username": "denniskozevnikoff",
                        "content": "Java: \n\n\n    class Solution {\n        public int lengthOfLastWord(String s) {\n        \n        //trim space at the beginning / end\n        String ss = s.trim();\n        //split the string into an array\n        String[] words = ss.split(\" \");\n        //get the last element in the array\n        String last_word = words[words.length-1];\n        //get the element length\n        int last_word_len = last_word.length();\n\n        return last_word_len;\n        }\n    }"
                    }
                ]
            },
            {
                "id": 1699397,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/58_length_of_last_words.cpp"
                    },
                    {
                        "username": "Draklife",
                        "content": "why this code return 0 :please answer\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        bool ok=false;\\n        int len=s.size()-1;\\n        for(int i=len;i>=0;--i){\\n           if(s[i] != \\' \\'){ ans++;}\\n  }\\n  return ans;\\n    }\\n};\\n"
                    },
                    {
                        "username": "Stuti-Bansal",
                        "content": "because ans is  initialized with 0 and in if condition since ok will be true it is not getting  increamented, their will also be else if condition"
                    },
                    {
                        "username": "poweracoon",
                        "content": "def lengthOfLastWord(self, s: str) -> int:\\n        empty_string = \"\"\\n        empty_list = []\\n\\n        for letters in s:\\n            if letters.isalpha() == True:\\n                empty_string = letters + empty_string\\n            else:\\n                empty_list.append(empty_string)\\n                empty_string = \"\"\\n            continue\\n        return len(empty_list[-1])\\n\\nWHAT IS WRONG WITH THIS CODE?\\n"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "When i write the below code i am getting Runt time error how to resolve it?\\n     \\n    int size = s.size();\\n    if (s.empty())\\n        return 0;\\n    int count=0;\\n    for(int i=size-1;s[i]>0;i--)\\n    {\\n        if(s[i]!=\\' \\'){\\n            count++;\\n            if(s[i-1]==\\' \\'){\\n                break;\\n            }\\n        }\\n    }\\n    return count;"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "[@Last-Autumn-Leaf](/Last-Autumn-Leaf) Thank you i did this way its running in online ide but still getting an error.(run time error)\n int size = s.size();\n    int count=0;\n    \n    for(int i=size-1;i>=0;i--)\n    {\n        if(s[i]!=' '){\n            count++;\n            if(s[i-1]==' '){\n                break;\n            }\n        }\n    }\n\n    return count;\n    }\nCan you please share the code so that i can refer it?"
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Hello your code is really code :\nJust correct this line  :\n   for(int i=size-1;s[i]>0;i--)\nwith :\n   for(int i=size-1;i>0;i--)\nand check corner case for when then input =='a' or \"a \""
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Luffy is still joyboy is a One piece Spoiler "
                    },
                    {
                        "username": "user8798U",
                        "content": "If I do `len(s.split()[-1])`, the code runs really quickly, it comes in at faster than basically everything. If I do something clever, starting at the end of the word and working backwards until I've found the start of the last word, it comes in much slower. But the former is O(n) (in the best case), while the latter is O(m), where m is the length of the last word plus trailing whitespace, which is O(n) in the worst case and O(1) in the best case. So I don't understand why the split method comes out as faster."
                    },
                    {
                        "username": "shoshinsha_coder",
                        "content": "My code is pretty simple I just made a variable for the start of the last word if \"seen\" set to 1, or 0 if not yet seen. Then I set a variable for character count. Then I made a simple for loop starting from the end of the string and worked my way back, continuing the loop if spaces are encountered and breaking out of the loop if the last word count has started and the next character is a space. check it out - > /**\\nvar lengthOfLastWord = function(s) {\\n    let charCnt = 0;\\n    let seen = 0;\\n    for(let i = s.length-1; i > -1; i--) {\\n        if(s[i] !== \" \") {\\n            charCnt++;\\n            seen == 1;\\n             } else if(s[i] == \" \") {\\n                    continue;\\n                }\\n                if(s[i-1] == \" \") {\\n                    break;\\n                }\\n    }\\n        return charCnt;\\n};"
                    },
                    {
                        "username": "Abhishek_Rookie",
                        "content": " public int lengthOfLastWord(String str) {\\n        str = str.trim() ;\\n        Stack <Integer> stk = new Stack<>() ;\\n        for(int i = 0 ; i < str.length() ; i ++) {\\n            if(str.charAt(i) == \\' \\') {\\n                stk.push(i) ;\\n            }\\n        }\\n        if(stk.isEmpty()){\\n            return str.length() ;\\n        }\\n        int k = stk.pop() + 1;\\n        String $str = str.substring(k) ;\\n\\n        return $str.length() ;\\n    }\\n\\nThats\\'it  fellas !"
                    },
                    {
                        "username": "mdmasidulhasan27",
                        "content": "1. get length-1\\n2. move to the last character which is not \\' \\' space traversing from last.\\n3. traverse from last character until you get another space and count \\n4. print the counted value.\\n\\nyou are done :)"
                    },
                    {
                        "username": "msauer22",
                        "content": "Will not work. See the case if the word is \"a\".\n1) length-1 = 0\n2) would end at index 0\n3) would still be at index 0\n4) counting from 0 to 0 is 0 but expected result is 1\n\nYour solution does work in general but you have these edge cases, where it just doesnt add up well. \nYou can however solve that problem by \"if (l == r) { return 1; }\""
                    },
                    {
                        "username": "denniskozevnikoff",
                        "content": "Java: \n\n\n    class Solution {\n        public int lengthOfLastWord(String s) {\n        \n        //trim space at the beginning / end\n        String ss = s.trim();\n        //split the string into an array\n        String[] words = ss.split(\" \");\n        //get the last element in the array\n        String last_word = words[words.length-1];\n        //get the element length\n        int last_word_len = last_word.length();\n\n        return last_word_len;\n        }\n    }"
                    }
                ]
            },
            {
                "id": 1692075,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/58_length_of_last_words.cpp"
                    },
                    {
                        "username": "Draklife",
                        "content": "why this code return 0 :please answer\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        bool ok=false;\\n        int len=s.size()-1;\\n        for(int i=len;i>=0;--i){\\n           if(s[i] != \\' \\'){ ans++;}\\n  }\\n  return ans;\\n    }\\n};\\n"
                    },
                    {
                        "username": "Stuti-Bansal",
                        "content": "because ans is  initialized with 0 and in if condition since ok will be true it is not getting  increamented, their will also be else if condition"
                    },
                    {
                        "username": "poweracoon",
                        "content": "def lengthOfLastWord(self, s: str) -> int:\\n        empty_string = \"\"\\n        empty_list = []\\n\\n        for letters in s:\\n            if letters.isalpha() == True:\\n                empty_string = letters + empty_string\\n            else:\\n                empty_list.append(empty_string)\\n                empty_string = \"\"\\n            continue\\n        return len(empty_list[-1])\\n\\nWHAT IS WRONG WITH THIS CODE?\\n"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "When i write the below code i am getting Runt time error how to resolve it?\\n     \\n    int size = s.size();\\n    if (s.empty())\\n        return 0;\\n    int count=0;\\n    for(int i=size-1;s[i]>0;i--)\\n    {\\n        if(s[i]!=\\' \\'){\\n            count++;\\n            if(s[i-1]==\\' \\'){\\n                break;\\n            }\\n        }\\n    }\\n    return count;"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "[@Last-Autumn-Leaf](/Last-Autumn-Leaf) Thank you i did this way its running in online ide but still getting an error.(run time error)\n int size = s.size();\n    int count=0;\n    \n    for(int i=size-1;i>=0;i--)\n    {\n        if(s[i]!=' '){\n            count++;\n            if(s[i-1]==' '){\n                break;\n            }\n        }\n    }\n\n    return count;\n    }\nCan you please share the code so that i can refer it?"
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Hello your code is really code :\nJust correct this line  :\n   for(int i=size-1;s[i]>0;i--)\nwith :\n   for(int i=size-1;i>0;i--)\nand check corner case for when then input =='a' or \"a \""
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Luffy is still joyboy is a One piece Spoiler "
                    },
                    {
                        "username": "user8798U",
                        "content": "If I do `len(s.split()[-1])`, the code runs really quickly, it comes in at faster than basically everything. If I do something clever, starting at the end of the word and working backwards until I've found the start of the last word, it comes in much slower. But the former is O(n) (in the best case), while the latter is O(m), where m is the length of the last word plus trailing whitespace, which is O(n) in the worst case and O(1) in the best case. So I don't understand why the split method comes out as faster."
                    },
                    {
                        "username": "shoshinsha_coder",
                        "content": "My code is pretty simple I just made a variable for the start of the last word if \"seen\" set to 1, or 0 if not yet seen. Then I set a variable for character count. Then I made a simple for loop starting from the end of the string and worked my way back, continuing the loop if spaces are encountered and breaking out of the loop if the last word count has started and the next character is a space. check it out - > /**\\nvar lengthOfLastWord = function(s) {\\n    let charCnt = 0;\\n    let seen = 0;\\n    for(let i = s.length-1; i > -1; i--) {\\n        if(s[i] !== \" \") {\\n            charCnt++;\\n            seen == 1;\\n             } else if(s[i] == \" \") {\\n                    continue;\\n                }\\n                if(s[i-1] == \" \") {\\n                    break;\\n                }\\n    }\\n        return charCnt;\\n};"
                    },
                    {
                        "username": "Abhishek_Rookie",
                        "content": " public int lengthOfLastWord(String str) {\\n        str = str.trim() ;\\n        Stack <Integer> stk = new Stack<>() ;\\n        for(int i = 0 ; i < str.length() ; i ++) {\\n            if(str.charAt(i) == \\' \\') {\\n                stk.push(i) ;\\n            }\\n        }\\n        if(stk.isEmpty()){\\n            return str.length() ;\\n        }\\n        int k = stk.pop() + 1;\\n        String $str = str.substring(k) ;\\n\\n        return $str.length() ;\\n    }\\n\\nThats\\'it  fellas !"
                    },
                    {
                        "username": "mdmasidulhasan27",
                        "content": "1. get length-1\\n2. move to the last character which is not \\' \\' space traversing from last.\\n3. traverse from last character until you get another space and count \\n4. print the counted value.\\n\\nyou are done :)"
                    },
                    {
                        "username": "msauer22",
                        "content": "Will not work. See the case if the word is \"a\".\n1) length-1 = 0\n2) would end at index 0\n3) would still be at index 0\n4) counting from 0 to 0 is 0 but expected result is 1\n\nYour solution does work in general but you have these edge cases, where it just doesnt add up well. \nYou can however solve that problem by \"if (l == r) { return 1; }\""
                    },
                    {
                        "username": "denniskozevnikoff",
                        "content": "Java: \n\n\n    class Solution {\n        public int lengthOfLastWord(String s) {\n        \n        //trim space at the beginning / end\n        String ss = s.trim();\n        //split the string into an array\n        String[] words = ss.split(\" \");\n        //get the last element in the array\n        String last_word = words[words.length-1];\n        //get the element length\n        int last_word_len = last_word.length();\n\n        return last_word_len;\n        }\n    }"
                    }
                ]
            },
            {
                "id": 1690907,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/58_length_of_last_words.cpp"
                    },
                    {
                        "username": "Draklife",
                        "content": "why this code return 0 :please answer\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        bool ok=false;\\n        int len=s.size()-1;\\n        for(int i=len;i>=0;--i){\\n           if(s[i] != \\' \\'){ ans++;}\\n  }\\n  return ans;\\n    }\\n};\\n"
                    },
                    {
                        "username": "Stuti-Bansal",
                        "content": "because ans is  initialized with 0 and in if condition since ok will be true it is not getting  increamented, their will also be else if condition"
                    },
                    {
                        "username": "poweracoon",
                        "content": "def lengthOfLastWord(self, s: str) -> int:\\n        empty_string = \"\"\\n        empty_list = []\\n\\n        for letters in s:\\n            if letters.isalpha() == True:\\n                empty_string = letters + empty_string\\n            else:\\n                empty_list.append(empty_string)\\n                empty_string = \"\"\\n            continue\\n        return len(empty_list[-1])\\n\\nWHAT IS WRONG WITH THIS CODE?\\n"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "When i write the below code i am getting Runt time error how to resolve it?\\n     \\n    int size = s.size();\\n    if (s.empty())\\n        return 0;\\n    int count=0;\\n    for(int i=size-1;s[i]>0;i--)\\n    {\\n        if(s[i]!=\\' \\'){\\n            count++;\\n            if(s[i-1]==\\' \\'){\\n                break;\\n            }\\n        }\\n    }\\n    return count;"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "[@Last-Autumn-Leaf](/Last-Autumn-Leaf) Thank you i did this way its running in online ide but still getting an error.(run time error)\n int size = s.size();\n    int count=0;\n    \n    for(int i=size-1;i>=0;i--)\n    {\n        if(s[i]!=' '){\n            count++;\n            if(s[i-1]==' '){\n                break;\n            }\n        }\n    }\n\n    return count;\n    }\nCan you please share the code so that i can refer it?"
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Hello your code is really code :\nJust correct this line  :\n   for(int i=size-1;s[i]>0;i--)\nwith :\n   for(int i=size-1;i>0;i--)\nand check corner case for when then input =='a' or \"a \""
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Luffy is still joyboy is a One piece Spoiler "
                    },
                    {
                        "username": "user8798U",
                        "content": "If I do `len(s.split()[-1])`, the code runs really quickly, it comes in at faster than basically everything. If I do something clever, starting at the end of the word and working backwards until I've found the start of the last word, it comes in much slower. But the former is O(n) (in the best case), while the latter is O(m), where m is the length of the last word plus trailing whitespace, which is O(n) in the worst case and O(1) in the best case. So I don't understand why the split method comes out as faster."
                    },
                    {
                        "username": "shoshinsha_coder",
                        "content": "My code is pretty simple I just made a variable for the start of the last word if \"seen\" set to 1, or 0 if not yet seen. Then I set a variable for character count. Then I made a simple for loop starting from the end of the string and worked my way back, continuing the loop if spaces are encountered and breaking out of the loop if the last word count has started and the next character is a space. check it out - > /**\\nvar lengthOfLastWord = function(s) {\\n    let charCnt = 0;\\n    let seen = 0;\\n    for(let i = s.length-1; i > -1; i--) {\\n        if(s[i] !== \" \") {\\n            charCnt++;\\n            seen == 1;\\n             } else if(s[i] == \" \") {\\n                    continue;\\n                }\\n                if(s[i-1] == \" \") {\\n                    break;\\n                }\\n    }\\n        return charCnt;\\n};"
                    },
                    {
                        "username": "Abhishek_Rookie",
                        "content": " public int lengthOfLastWord(String str) {\\n        str = str.trim() ;\\n        Stack <Integer> stk = new Stack<>() ;\\n        for(int i = 0 ; i < str.length() ; i ++) {\\n            if(str.charAt(i) == \\' \\') {\\n                stk.push(i) ;\\n            }\\n        }\\n        if(stk.isEmpty()){\\n            return str.length() ;\\n        }\\n        int k = stk.pop() + 1;\\n        String $str = str.substring(k) ;\\n\\n        return $str.length() ;\\n    }\\n\\nThats\\'it  fellas !"
                    },
                    {
                        "username": "mdmasidulhasan27",
                        "content": "1. get length-1\\n2. move to the last character which is not \\' \\' space traversing from last.\\n3. traverse from last character until you get another space and count \\n4. print the counted value.\\n\\nyou are done :)"
                    },
                    {
                        "username": "msauer22",
                        "content": "Will not work. See the case if the word is \"a\".\n1) length-1 = 0\n2) would end at index 0\n3) would still be at index 0\n4) counting from 0 to 0 is 0 but expected result is 1\n\nYour solution does work in general but you have these edge cases, where it just doesnt add up well. \nYou can however solve that problem by \"if (l == r) { return 1; }\""
                    },
                    {
                        "username": "denniskozevnikoff",
                        "content": "Java: \n\n\n    class Solution {\n        public int lengthOfLastWord(String s) {\n        \n        //trim space at the beginning / end\n        String ss = s.trim();\n        //split the string into an array\n        String[] words = ss.split(\" \");\n        //get the last element in the array\n        String last_word = words[words.length-1];\n        //get the element length\n        int last_word_len = last_word.length();\n\n        return last_word_len;\n        }\n    }"
                    }
                ]
            },
            {
                "id": 1676853,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/58_length_of_last_words.cpp"
                    },
                    {
                        "username": "Draklife",
                        "content": "why this code return 0 :please answer\\nclass Solution {\\npublic:\\n    int lengthOfLastWord(string s) {\\n        int ans=0;\\n        bool ok=false;\\n        int len=s.size()-1;\\n        for(int i=len;i>=0;--i){\\n           if(s[i] != \\' \\'){ ans++;}\\n  }\\n  return ans;\\n    }\\n};\\n"
                    },
                    {
                        "username": "Stuti-Bansal",
                        "content": "because ans is  initialized with 0 and in if condition since ok will be true it is not getting  increamented, their will also be else if condition"
                    },
                    {
                        "username": "poweracoon",
                        "content": "def lengthOfLastWord(self, s: str) -> int:\\n        empty_string = \"\"\\n        empty_list = []\\n\\n        for letters in s:\\n            if letters.isalpha() == True:\\n                empty_string = letters + empty_string\\n            else:\\n                empty_list.append(empty_string)\\n                empty_string = \"\"\\n            continue\\n        return len(empty_list[-1])\\n\\nWHAT IS WRONG WITH THIS CODE?\\n"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "When i write the below code i am getting Runt time error how to resolve it?\\n     \\n    int size = s.size();\\n    if (s.empty())\\n        return 0;\\n    int count=0;\\n    for(int i=size-1;s[i]>0;i--)\\n    {\\n        if(s[i]!=\\' \\'){\\n            count++;\\n            if(s[i-1]==\\' \\'){\\n                break;\\n            }\\n        }\\n    }\\n    return count;"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "[@Last-Autumn-Leaf](/Last-Autumn-Leaf) Thank you i did this way its running in online ide but still getting an error.(run time error)\n int size = s.size();\n    int count=0;\n    \n    for(int i=size-1;i>=0;i--)\n    {\n        if(s[i]!=' '){\n            count++;\n            if(s[i-1]==' '){\n                break;\n            }\n        }\n    }\n\n    return count;\n    }\nCan you please share the code so that i can refer it?"
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Hello your code is really code :\nJust correct this line  :\n   for(int i=size-1;s[i]>0;i--)\nwith :\n   for(int i=size-1;i>0;i--)\nand check corner case for when then input =='a' or \"a \""
                    },
                    {
                        "username": "Last-Autumn-Leaf",
                        "content": "Luffy is still joyboy is a One piece Spoiler "
                    },
                    {
                        "username": "user8798U",
                        "content": "If I do `len(s.split()[-1])`, the code runs really quickly, it comes in at faster than basically everything. If I do something clever, starting at the end of the word and working backwards until I've found the start of the last word, it comes in much slower. But the former is O(n) (in the best case), while the latter is O(m), where m is the length of the last word plus trailing whitespace, which is O(n) in the worst case and O(1) in the best case. So I don't understand why the split method comes out as faster."
                    },
                    {
                        "username": "shoshinsha_coder",
                        "content": "My code is pretty simple I just made a variable for the start of the last word if \"seen\" set to 1, or 0 if not yet seen. Then I set a variable for character count. Then I made a simple for loop starting from the end of the string and worked my way back, continuing the loop if spaces are encountered and breaking out of the loop if the last word count has started and the next character is a space. check it out - > /**\\nvar lengthOfLastWord = function(s) {\\n    let charCnt = 0;\\n    let seen = 0;\\n    for(let i = s.length-1; i > -1; i--) {\\n        if(s[i] !== \" \") {\\n            charCnt++;\\n            seen == 1;\\n             } else if(s[i] == \" \") {\\n                    continue;\\n                }\\n                if(s[i-1] == \" \") {\\n                    break;\\n                }\\n    }\\n        return charCnt;\\n};"
                    },
                    {
                        "username": "Abhishek_Rookie",
                        "content": " public int lengthOfLastWord(String str) {\\n        str = str.trim() ;\\n        Stack <Integer> stk = new Stack<>() ;\\n        for(int i = 0 ; i < str.length() ; i ++) {\\n            if(str.charAt(i) == \\' \\') {\\n                stk.push(i) ;\\n            }\\n        }\\n        if(stk.isEmpty()){\\n            return str.length() ;\\n        }\\n        int k = stk.pop() + 1;\\n        String $str = str.substring(k) ;\\n\\n        return $str.length() ;\\n    }\\n\\nThats\\'it  fellas !"
                    },
                    {
                        "username": "mdmasidulhasan27",
                        "content": "1. get length-1\\n2. move to the last character which is not \\' \\' space traversing from last.\\n3. traverse from last character until you get another space and count \\n4. print the counted value.\\n\\nyou are done :)"
                    },
                    {
                        "username": "msauer22",
                        "content": "Will not work. See the case if the word is \"a\".\n1) length-1 = 0\n2) would end at index 0\n3) would still be at index 0\n4) counting from 0 to 0 is 0 but expected result is 1\n\nYour solution does work in general but you have these edge cases, where it just doesnt add up well. \nYou can however solve that problem by \"if (l == r) { return 1; }\""
                    },
                    {
                        "username": "denniskozevnikoff",
                        "content": "Java: \n\n\n    class Solution {\n        public int lengthOfLastWord(String s) {\n        \n        //trim space at the beginning / end\n        String ss = s.trim();\n        //split the string into an array\n        String[] words = ss.split(\" \");\n        //get the last element in the array\n        String last_word = words[words.length-1];\n        //get the element length\n        int last_word_len = last_word.length();\n\n        return last_word_len;\n        }\n    }"
                    }
                ]
            }
        ]
    },
    {
        "title": "Read N Characters Given read4 II - Call Multiple Times",
        "question_content": null,
        "solutions": [],
        "discussions": [
            {
                "id": 1564679,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1566756,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1566755,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1567895,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1575744,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1573431,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1569326,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1572104,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1568987,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1567478,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1564679,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1566756,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1566755,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1567895,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1575744,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1573431,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1569326,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1572104,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1568987,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            },
            {
                "id": 1567478,
                "content": [
                    {
                        "username": "huangw3",
                        "content": "Just wondering what is the difference between call once and call multiple times."
                    },
                    {
                        "username": "sackettaj",
                        "content": "The buffer read4 is pulling from persists across user defined read calls.\\n\\nConsider a get_3(buff) function which does the following:\\n1: creates temp\\n2: calls read4(temp)\\n3: put the first three elements of temp into buff\\n4: returns 3\\n\\nPretend read4 has \"aaabbbccc\" in its pipeline\\nThe desired behavior of two get_3 calls is:\\n1: call get_3(buff). buff = aaa, 3 is returned\\n2: call get_3(buff). buff = bbb, 3 is returned\\n\\nHowever this is not what happens.\\n\\nOn the first call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"aaab\" into temp and returns 4\\n3: we move \"aaa\" from temp into buff\\n4: we return 3\\n\\nThe state of read4 is now \"bbccc\"\\nOn the second call of get_3(buff), this is what happens:\\n1: temp is created\\n2: we call read4(temp), it puts \"bbcc\" into temp and returns 4\\n3: we move \"bbc\" from temp into buff\\n4: we return 3\\n\\nSo our two calls to get_3 output the strings \"aaa\", \"bbc\". This is wrong. This is why multiple calls must be considered.\\n"
                    },
                    {
                        "username": "xunrui",
                        "content": "As the static variables are only initialized once during one run, which apparently includes multiple test cases."
                    },
                    {
                        "username": "flameshimmer",
                        "content": "What's the main diff between this one and the read4 I?\\n\\nHow is the function getting called? -- the return value is an int, how come the expected answer returns an string?????\\n\\n\\nAlso, I am seeing below: -__-||||||||||||||\\n\\n\\nSubmission Result: Wrong Answer\\n\\nInput:\\n\"\", [read(1)]\\nOutput:\\n[\"\"]\\nExpected:\\n[\"\"]"
                    },
                    {
                        "username": "cqian8838",
                        "content": "Leetcode thinks my solution fails the following test case:\\nInput:\\t\"a\", [read(0),read(1),read(2)]\\nOutput:\\t[\"\",\"a\",\"\"]\\nExpected:\\t[\"\",\"a\",\"\"]\\n\\nbut my output is exactly the expected output.\\nDid I miss anything?"
                    },
                    {
                        "username": "himankjog",
                        "content": "This question is a waste of time.\\nThe probability of such question being asked in the interview is siginificantly low.\\nI don\\'t understand why it is under Premium membership.\\nI didn\\'t pay for such questions."
                    },
                    {
                        "username": "yeshwanthpr",
                        "content": "I was asked this question when I interviewed with Lyft. "
                    },
                    {
                        "username": "Maang-io",
                        "content": "Not really, This question was asked to me in one of FAANG question, and it took more than 20 mins to just understand the problem, I was seeing this problem for the first time, and interviewer got the frustrated. It was obvious to me that I bombed the interview. So it is better to be prepared than regret later. Did I mention that I had similar opinion like you and skipped it earlier."
                    },
                    {
                        "username": "sandeep79",
                        "content": "What is the reson for this question to be Hard? I feel this should be easy."
                    },
                    {
                        "username": "WZ193",
                        "content": "I spent a lot of time to understand the code posted. Maybe my brain is slow because it\\'s Monday morning, but the most difficult part for this problem is to undestand that **the file is not the buf**, it is something not in the paratmer. It is in defualt that when you call read4, it will read the file from last position and store to buf.\\nwhat a problem description!\\n"
                    },
                    {
                        "username": "Kinsapoon",
                        "content": "What I did is use a StringBuilder to store the whole file and serve them for each call."
                    },
                    {
                        "username": "XavierWantMoreMoney",
                        "content": "This will pass OA for sure but in interview this is definitely not an option... Interviewer can claim the file is extremely big and machine memory cannot hold it. You have to use read4 to \"read as you use\". So..."
                    },
                    {
                        "username": "mmangelmm",
                        "content": "The algorithm is the same idea with leetcode.\\nI use a little different ways to implement.\\nOne I use class member variables to store\" offset, bufsize, buffer[]\" status. everything works fine. \\nThe other one is to make them static variables. it stops working. got wrong result.\\nI don't quite understand why..."
                    },
                    {
                        "username": "br_ishi",
                        "content": "I get it... Assesing if something is hard or not is subjective.  I did this one only to see if there\\'s something i didn\\'t understand from the description.  Surely, *this* cannot be even compared to even medium ones (or even some of the easy ones).\\n\\nShould I have read the \\'file\\' using dynamic programming somehow?  Some tricky special case of BFS?  Backtracking, anyone?  Super complicated datastructure?\\n\\nOK, enough... it seems to have taken me more to write this \\'post\\' than to come up with the solution for this \\'HARD\\' question."
                    }
                ]
            }
        ]
    }
]