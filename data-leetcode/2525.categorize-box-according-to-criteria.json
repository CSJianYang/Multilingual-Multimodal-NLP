[
    {
        "title": "Categorize Box According to Criteria",
        "question_content": "Given four integers length, width, height, and mass, representing the dimensions and mass of a box, respectively, return a string representing the category of the box.\n\n\tThe box is \"Bulky\" if:\n\t\n\t\tAny of the dimensions of the box is greater or equal to 104.\n\t\tOr, the volume of the box is greater or equal to 109.\n\t\n\t\n\tIf the mass of the box is greater or equal to 100, it is \"Heavy\".\n\tIf the box is both \"Bulky\" and \"Heavy\", then its category is \"Both\".\n\tIf the box is neither \"Bulky\" nor \"Heavy\", then its category is \"Neither\".\n\tIf the box is \"Bulky\" but not \"Heavy\", then its category is \"Bulky\".\n\tIf the box is \"Heavy\" but not \"Bulky\", then its category is \"Heavy\".\n\nNote that the volume of the box is the product of its length, width and height.\n&nbsp;\nExample 1:\n\nInput: length = 1000, width = 35, height = 700, mass = 300\nOutput: \"Heavy\"\nExplanation: \nNone of the dimensions of the box is greater or equal to 104. \nIts volume = 24500000 <= 109. So it cannot be categorized as \"Bulky\".\nHowever mass >= 100, so the box is \"Heavy\".\nSince the box is not \"Bulky\" but \"Heavy\", we return \"Heavy\".\nExample 2:\n\nInput: length = 200, width = 50, height = 800, mass = 50\nOutput: \"Neither\"\nExplanation: \nNone of the dimensions of the box is greater or equal to 104.\nIts volume = 8 * 106 <= 109. So it cannot be categorized as \"Bulky\".\nIts mass is also less than 100, so it cannot be categorized as \"Heavy\" either. \nSince its neither of the two above categories, we return \"Neither\".\n&nbsp;\nConstraints:\n\n\t1 <= length, width, height <= 105\n\t1 <= mass <= 103",
        "solutions": [
            {
                "id": 3015443,
                "title": "python-3-2-lines-w-explanation-t-m-100-100",
                "content": "Here\\'s the plan: \\n- We use this bit map for assigning a string:\\n```\\nBulky    Heavy    idx         bits    string\\n\\u2013\\u2013\\u2013\\u2013\\u2013    \\u2013\\u2013\\u2013\\u2013\\u2013\\u2013   \\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013     \\u2013\\u2013\\u2013\\u2013    \\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\nFalse    False    0+0 = 0     00      Neither\\nTrue     False    1+0 = 1     01      Bulky\\nFalse    True     0+2 = 2     10      Heavy\\nTrue     True     1+2 = 3     11      Both\\n```\\n- We use`idx` to address the correct string in a tuple of the possible strings `(\"Neither\", \"Bulky\", \"Heavy\", \"Both\")`.\\n```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n\\n        idx = int(length >= 10000 or width >= 10000 or height >= 10000 or \\n               length * width * height >= 10**9) + 2*(mass >= 100)\\n        \\n        return (\"Neither\", \"Bulky\", \"Heavy\", \"Both\")[idx]\\n```\\n[https://leetcode.com/problems/categorize-box-according-to-criteria/submissions/874510700/]()\\n\\nI could be wrong, but I think that time complexity is O(1) and space complexity is O(1).",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nBulky    Heavy    idx         bits    string\\n\\u2013\\u2013\\u2013\\u2013\\u2013    \\u2013\\u2013\\u2013\\u2013\\u2013\\u2013   \\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013     \\u2013\\u2013\\u2013\\u2013    \\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\nFalse    False    0+0 = 0     00      Neither\\nTrue     False    1+0 = 1     01      Bulky\\nFalse    True     0+2 = 2     10      Heavy\\nTrue     True     1+2 = 3     11      Both\\n```\n```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n\\n        idx = int(length >= 10000 or width >= 10000 or height >= 10000 or \\n               length * width * height >= 10**9) + 2*(mass >= 100)\\n        \\n        return (\"Neither\", \"Bulky\", \"Heavy\", \"Both\")[idx]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3015234,
                "title": "simple-java-beats-100",
                "content": "Make sure to Upvote the code it means a lot to me!\\u270C\\uFE0F\\n# Code with Notes\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n       \\n        if(isBulky(length,width,height) && mass >= 100){\\n            return \"Both\";\\n        }else if(!(isBulky(length,width,height)) && mass < 100){\\n            return \"Neither\";\\n        }else if(!(isBulky(length,width,height)) && mass >= 100){\\n            return \"Heavy\";\\n        }else{\\n            return \"Bulky\";\\n        }\\n    }\\n\\n//Function to check whether box is bulky or not\\n    private static boolean isBulky(int length, int width, int height){\\n\\n        // Calculate volume and convert to long because \\n        //the product can be very large \\n        long volume = (long)length * (long)width * (long)height;\\n\\n        //Check if any of dimension is greater than 10_000\\n        if(Math.max(length,Math.max(width,height)) > 10_000){\\n            return true;\\n        }\\n\\n        //Check if volume is greater than 1_000_000_000\\n        if( volume >= 1000_000_000){\\n            return true;\\n        }\\n\\n        //If it don\\'t meet above two conditions it means the box\\n        // is not bulky so return false\\n        return false;\\n    }\\n}\\n```\\n# Source Code\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        if(isBulky(length,width,height) && mass >= 100)     return \"Both\";\\n        else if(!(isBulky(length,width,height)) && mass < 100)      return \"Neither\";\\n        else if(!(isBulky(length,width,height)) && mass >= 100)     return \"Heavy\";\\n        else    return \"Bulky\";\\n    \\n    }\\n    private static boolean isBulky(int length, int width, int height){\\n        long volume = (long)length * (long)width * (long)height;\\n\\n        if(Math.max(length,Math.max(width,height)) >= 10_000)   return true;\\n        if( volume >= 1000_000_000) return true;\\n        return false;\\n    }\\n}\\n```\\n![image.png](https://assets.leetcode.com/users/images/a0c5bac0-fdb3-4ee6-988d-34d169931854_1673158602.4612367.png)\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n       \\n        if(isBulky(length,width,height) && mass >= 100){\\n            return \"Both\";\\n        }else if(!(isBulky(length,width,height)) && mass < 100){\\n            return \"Neither\";\\n        }else if(!(isBulky(length,width,height)) && mass >= 100){\\n            return \"Heavy\";\\n        }else{\\n            return \"Bulky\";\\n        }\\n    }\\n\\n//Function to check whether box is bulky or not\\n    private static boolean isBulky(int length, int width, int height){\\n\\n        // Calculate volume and convert to long because \\n        //the product can be very large \\n        long volume = (long)length * (long)width * (long)height;\\n\\n        //Check if any of dimension is greater than 10_000\\n        if(Math.max(length,Math.max(width,height)) > 10_000){\\n            return true;\\n        }\\n\\n        //Check if volume is greater than 1_000_000_000\\n        if( volume >= 1000_000_000){\\n            return true;\\n        }\\n\\n        //If it don\\'t meet above two conditions it means the box\\n        // is not bulky so return false\\n        return false;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        if(isBulky(length,width,height) && mass >= 100)     return \"Both\";\\n        else if(!(isBulky(length,width,height)) && mass < 100)      return \"Neither\";\\n        else if(!(isBulky(length,width,height)) && mass >= 100)     return \"Heavy\";\\n        else    return \"Bulky\";\\n    \\n    }\\n    private static boolean isBulky(int length, int width, int height){\\n        long volume = (long)length * (long)width * (long)height;\\n\\n        if(Math.max(length,Math.max(width,height)) >= 10_000)   return true;\\n        if( volume >= 1000_000_000) return true;\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3015662,
                "title": "simple-conditions-c-solution",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        long long v = (long long)length* (long long)width* (long long)height;\\n        int b = 0, h = 0;\\n        if(length >= 10000 || height >= 10000 || width >= 10000 || v >= 1000000000) b = 1;\\n        if(mass >= 100) h = 1;\\n        if(h && b) return \"Both\";\\n        if(h == 0 && b == 0) return \"Neither\";\\n        if(h) return \"Heavy\";\\n        return \"Bulky\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        long long v = (long long)length* (long long)width* (long long)height;\\n        int b = 0, h = 0;\\n        if(length >= 10000 || height >= 10000 || width >= 10000 || v >= 1000000000) b = 1;\\n        if(mass >= 100) h = 1;\\n        if(h && b) return \"Both\";\\n        if(h == 0 && b == 0) return \"Neither\";\\n        if(h) return \"Heavy\";\\n        return \"Bulky\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3015110,
                "title": "java-solution-short-simple",
                "content": "This is relatively a simple problem. You just have to take care of integer overflow constraints here. Typecasting solves the issue.\\n\\nPlease Upvote!\\n\\n# Code\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        \\n        // Typecasting to long\\n        long volume = (long)length*width*height;\\n        \\n        // True if any of the dimensions are greater than or equal to 10000\\n        // Or volume is greater than or equal to 10^9\\n        boolean bulky = (length >= 1e4 || width >= 1e4 || height >= 1e4 || volume >= 1e9) ? true : false;\\n        \\n        boolean heavy = mass >= 100 ? true : false;\\n        \\n        if (bulky && heavy) return \"Both\";\\n        if (bulky) return \"Bulky\";\\n        if (heavy) return \"Heavy\";\\n        return \"Neither\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        \\n        // Typecasting to long\\n        long volume = (long)length*width*height;\\n        \\n        // True if any of the dimensions are greater than or equal to 10000\\n        // Or volume is greater than or equal to 10^9\\n        boolean bulky = (length >= 1e4 || width >= 1e4 || height >= 1e4 || volume >= 1e9) ? true : false;\\n        \\n        boolean heavy = mass >= 100 ? true : false;\\n        \\n        if (bulky && heavy) return \"Both\";\\n        if (bulky) return \"Bulky\";\\n        if (heavy) return \"Heavy\";\\n        return \"Neither\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3015715,
                "title": "c-simple-implementation-clean-easy-code",
                "content": "![image](https://assets.leetcode.com/users/images/8262d01a-35f8-4f70-847d-7e2a889b2e29_1673121707.305641.png)\\n\\n**T->O(1) && S->O(1)**\\n\\n\\tclass Solution {\\n\\t\\tpublic:\\n\\t\\t\\tstring categorizeBox(int l, int w, int h, int m) {\\n\\t\\t\\t\\tlong long vol=(long long)(l)*(long long)(w)*(long long)h;\\n\\n\\t\\t\\t\\tbool cond1= (vol>=1e9 || (l>=1e4 || w>=1e4 || h>=1e4));\\n\\t\\t\\t\\tbool cond2= m>=100;\\n\\n\\t\\t\\t\\tif(cond1 && cond2) return \"Both\";\\n\\t\\t\\t\\telse if(cond1) return \"Bulky\";\\n\\t\\t\\t\\telse if(cond2) return \"Heavy\";\\n\\t\\t\\t\\telse return \"Neither\";\\n\\t\\t\\t}\\n\\t\\t};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\n\\t\\tpublic:\\n\\t\\t\\tstring categorizeBox(int l, int w, int h, int m) {\\n\\t\\t\\t\\tlong long vol=(long long)(l)*(long long)(w)*(long long)h;\\n\\n\\t\\t\\t\\tbool cond1= (vol>=1e9 || (l>=1e4 || w>=1e4 || h>=1e4));\\n\\t\\t\\t\\tbool cond2= m>=100;\\n\\n\\t\\t\\t\\tif(cond1 && cond2) return \"Both\";\\n\\t\\t\\t\\telse if(cond1) return \"Bulky\";\\n\\t\\t\\t\\telse if(cond2) return \"Heavy\";\\n\\t\\t\\t\\telse return \"Neither\";\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 3020108,
                "title": "c-straight-forward",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(int l, int w, int h, int m) \\n    {\\n        string cat;\\n        long ll=l, ww=w, hh=h;\\n        long long v = ll*ww*hh;\\n        if(l>=1e4 || w>=1e4 || h>=1e4 || v >= 1e9)\\n            cat = \"Bulky\";\\n        if(m >= 100)\\n            cat = \"Heavy\";\\n        if((l>=1e4 || w>=1e4 || h>=1e4 || v >= 1e9) && m>=100)\\n            cat = \"Both\";\\n        if(l<1e4 && w<1e4 && h<1e4 && v < 1e9 && m<100)\\n            cat = \"Neither\";\\n        return cat;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int l, int w, int h, int m) \\n    {\\n        string cat;\\n        long ll=l, ww=w, hh=h;\\n        long long v = ll*ww*hh;\\n        if(l>=1e4 || w>=1e4 || h>=1e4 || v >= 1e9)\\n            cat = \"Bulky\";\\n        if(m >= 100)\\n            cat = \"Heavy\";\\n        if((l>=1e4 || w>=1e4 || h>=1e4 || v >= 1e9) && m>=100)\\n            cat = \"Both\";\\n        if(l<1e4 && w<1e4 && h<1e4 && v < 1e9 && m<100)\\n            cat = \"Neither\";\\n        return cat;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3014976,
                "title": "c-java-python3-if-else",
                "content": "Please pull this [commit](https://github.com/gaosanyong/leetcode/commit/7360be4d63ffa8b13518401baa628a6f6800d326) for solutions of weekly 95. \\n\\n**Intuition**\\nThis is a `if-else` problem. \\n**Implementation**\\n**C++**\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        bool bulky = max({length, width, height}) >= 1e4 || (long long) length*width*height >= 1e9, heavy = mass >= 100; \\n        if (bulky && heavy) return \"Both\"; \\n        if (bulky) return \"Bulky\"; \\n        if (heavy) return \"Heavy\"; \\n        return \"Neither\"; \\n    }\\n};\\n```\\n**Java**\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        boolean bulky = Math.max(length, Math.max(width, height)) >= 1e4 || (long) length*width*height >= 1e9, heavy = mass >= 100; \\n        if (bulky && heavy) return \"Both\"; \\n        if (bulky) return \"Bulky\"; \\n        if (heavy) return \"Heavy\"; \\n        return \"Neither\"; \\n    }\\n}\\n```\\n**Python3**\\n```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        bulky = max(length, width, height) >= 1e4 or length*width*height >= 1e9\\n        heavy = mass >= 100 \\n        if bulky and heavy: return \"Both\"\\n        if bulky: return \"Bulky\"\\n        if heavy: return \"Heavy\"\\n        return \"Neither\"\\n```\\n**Complexity**\\nTime `O(1)`\\nSpace `O(1)`",
                "solutionTags": [
                    "Java",
                    "Python3",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        bool bulky = max({length, width, height}) >= 1e4 || (long long) length*width*height >= 1e9, heavy = mass >= 100; \\n        if (bulky && heavy) return \"Both\"; \\n        if (bulky) return \"Bulky\"; \\n        if (heavy) return \"Heavy\"; \\n        return \"Neither\"; \\n    }\\n};\\n```\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        boolean bulky = Math.max(length, Math.max(width, height)) >= 1e4 || (long) length*width*height >= 1e9, heavy = mass >= 100; \\n        if (bulky && heavy) return \"Both\"; \\n        if (bulky) return \"Bulky\"; \\n        if (heavy) return \"Heavy\"; \\n        return \"Neither\"; \\n    }\\n}\\n```\n```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        bulky = max(length, width, height) >= 1e4 or length*width*height >= 1e9\\n        heavy = mass >= 100 \\n        if bulky and heavy: return \"Both\"\\n        if bulky: return \"Bulky\"\\n        if heavy: return \"Heavy\"\\n        return \"Neither\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3017810,
                "title": "c-simple-code-easy-solution",
                "content": "\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(long int length,long int width,long int height, int mass) {\\n        long long vol=length*width*height;\\n        bool isbulky=false, isheavy=false;\\n        if(length>=10000 || width>=10000 || height>=10000 || vol>=1e9)isbulky=true;\\n        if(mass>=100)isheavy=true;\\n        \\n        if(isbulky && isheavy)return \"Both\";\\n        if(!isheavy && !isbulky)return \"Neither\";\\n        if(isbulky && !isheavy)return \"Bulky\";\\n        return \"Heavy\";\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(long int length,long int width,long int height, int mass) {\\n        long long vol=length*width*height;\\n        bool isbulky=false, isheavy=false;\\n        if(length>=10000 || width>=10000 || height>=10000 || vol>=1e9)isbulky=true;\\n        if(mass>=100)isheavy=true;\\n        \\n        if(isbulky && isheavy)return \"Both\";\\n        if(!isheavy && !isbulky)return \"Neither\";\\n        if(isbulky && !isheavy)return \"Bulky\";\\n        return \"Heavy\";\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3015266,
                "title": "c-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(long length, long width, long height, int mass) {\\n        long volume = length * width * height;\\n        if((length>=10000 || width>=10000 || height>=10000 || volume>=1000000000) && mass>=100)\\n            return \"Both\";\\n        else if(length>=10000 || width>=10000 || height>=10000 || volume>=1000000000)\\n            return \"Bulky\";\\n        else if(mass>=100)\\n            return \"Heavy\";\\n        else if((length<10000 || width<10000 || height<10000 || volume<1000000000) && mass<100)\\n            return \"Neither\";\\n        else if((length>=10000 || width>=10000 || height>=10000 || volume>=1000000000) && mass<100)\\n            return \"Bulky\";\\n        else\\n            return \"Heavy\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(long length, long width, long height, int mass) {\\n        long volume = length * width * height;\\n        if((length>=10000 || width>=10000 || height>=10000 || volume>=1000000000) && mass>=100)\\n            return \"Both\";\\n        else if(length>=10000 || width>=10000 || height>=10000 || volume>=1000000000)\\n            return \"Bulky\";\\n        else if(mass>=100)\\n            return \"Heavy\";\\n        else if((length<10000 || width<10000 || height<10000 || volume<1000000000) && mass<100)\\n            return \"Neither\";\\n        else if((length>=10000 || width>=10000 || height>=10000 || volume>=1000000000) && mass<100)\\n            return \"Bulky\";\\n        else\\n            return \"Heavy\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3015211,
                "title": "java-just-conditional-statements",
                "content": "# Please Upvote :D\\n---\\n``` java []\\nclass Solution {\\n    public String categorizeBox(int l, int w, int h, int m) {\\n        long v = (long) l * w * h;\\n        int f = 10000, n = 1000000000;\\n        boolean bulky = v >= n || l >= f || w >= f || h >= f;\\n        boolean heavy = m >= 100;\\n\\n        if (bulky && heavy) {\\n            return \"Both\";\\n        } else if (bulky && !heavy) {\\n            return \"Bulky\";\\n        } else if (!bulky && heavy) {\\n            return \"Heavy\";\\n        }\\n        return \"Neither\";\\n    }\\n}\\n\\n// TC: O(1), SC: O(1)\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "``` java []\\nclass Solution {\\n    public String categorizeBox(int l, int w, int h, int m) {\\n        long v = (long) l * w * h;\\n        int f = 10000, n = 1000000000;\\n        boolean bulky = v >= n || l >= f || w >= f || h >= f;\\n        boolean heavy = m >= 100;\\n\\n        if (bulky && heavy) {\\n            return \"Both\";\\n        } else if (bulky && !heavy) {\\n            return \"Bulky\";\\n        } else if (!bulky && heavy) {\\n            return \"Heavy\";\\n        }\\n        return \"Neither\";\\n    }\\n}\\n\\n// TC: O(1), SC: O(1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3014990,
                "title": "python-straightforward",
                "content": "```python\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        volume = length * width * height\\n        category = []\\n        \\n        if length >= 10**4 or width >= 10**4 or height >= 10**4 or volume >= 10**9:\\n            category.append(\"Bulky\")\\n\\n        if mass >= 100:\\n            category.append(\"Heavy\")\\n\\n        if \"Bulky\" in category and \"Heavy\" in category:\\n            return \"Both\"\\n\\n        if not category:\\n            return \"Neither\"\\n\\n        return category[0]\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```python\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        volume = length * width * height\\n        category = []\\n        \\n        if length >= 10**4 or width >= 10**4 or height >= 10**4 or volume >= 10**9:\\n            category.append(\"Bulky\")\\n\\n        if mass >= 100:\\n            category.append(\"Heavy\")\\n\\n        if \"Bulky\" in category and \"Heavy\" in category:\\n            return \"Both\"\\n\\n        if not category:\\n            return \"Neither\"\\n\\n        return category[0]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3408483,
                "title": "100-faster-c-short-sweet-easy-to-understand-simple-code",
                "content": "````\\nclass Solution {\\n\\tpublic:\\n\\t\\tstring categorizeBox(int l, int w, int h, int m) {\\n\\t\\t\\tlong long vol=(long long)(l)*(long long)(w)*(long long)h;//VOLUME\\n\\n\\t\\t\\tbool cond1= (vol>=1e9 || (l>=1e4 || w>=1e4 || h>=1e4));//CONDITION FOR BULKY\\n\\t\\t\\tbool cond2= m>=100;//CONDITION FOR HEAVY\\n\\n\\t\\t\\tif(cond1 && cond2) return \"Both\";//IF BOTH TRUE RETURN BOTH\\n\\t\\t\\telse if(cond1) return \"Bulky\";//IF 1st CONTIDION IS TRUE RETURN BULKY\\n\\t\\t\\telse if(cond2) return \"Heavy\";//2nd ONE IS TRUE RETURN HEAVY\\n\\t\\t\\telse return \"Neither\";//RETURN NO ONE ~NEITHER~\\n\\t\\t}\\n\\t};\\n\\t````",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "````\\nclass Solution {\\n\\tpublic:\\n\\t\\tstring categorizeBox(int l, int w, int h, int m) {\\n\\t\\t\\tlong long vol=(long long)(l)*(long long)(w)*(long long)h;//VOLUME\\n\\n\\t\\t\\tbool cond1= (vol>=1e9 || (l>=1e4 || w>=1e4 || h>=1e4));//CONDITION FOR BULKY\\n\\t\\t\\tbool cond2= m>=100;//CONDITION FOR HEAVY\\n\\n\\t\\t\\tif(cond1 && cond2) return \"Both\";//IF BOTH TRUE RETURN BOTH\\n\\t\\t\\telse if(cond1) return \"Bulky\";//IF 1st CONTIDION IS TRUE RETURN BULKY\\n\\t\\t\\telse if(cond2) return \"Heavy\";//2nd ONE IS TRUE RETURN HEAVY\\n\\t\\t\\telse return \"Neither\";//RETURN NO ONE ~NEITHER~\\n\\t\\t}\\n\\t};\\n\\t```",
                "codeTag": "Java"
            },
            {
                "id": 3052376,
                "title": "scala-1-liner-exists-pattern-matching-tolong-explanation",
                "content": "> Disclaimer: Don\\'t do this in any interview or production code base. 1-liner solutions are hard to read. I am only doing this for fun.\\n# Intuition\\n- Decide if it\\'s bulky or heavy, then return string based on these two values\\n\\n# Approach\\n- `exists` will check if any value satisfies the condition\\n- Remember to do type conversion for large number\\n- The type of the first variable in an expression determines the type of the result (thus, we only need `toLong` on `length` not `width` or `height`)\\n- Pattern matching can be written in one line without a `;`\\n\\n# Complexity\\n- Time complexity:\\nConstant time: `O(1)`\\n\\n- Space complexity:\\nConstant space: `O(1)`\\n\\n# Code\\n```scala\\nobject Solution {\\n    def categorizeBox(length: Int, width: Int, height: Int, mass: Int): String = {\\n        (List(length, width, height).exists(_ >= 10_000) || length.toLong * width * height >= 1e9.toLong, mass >= 100) match {case (true, true) => \"Both\" case (true, false) => \"Bulky\" case (false, true) => \"Heavy\" case (false, false) => \"Neither\"\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Scala"
                ],
                "code": "```scala\\nobject Solution {\\n    def categorizeBox(length: Int, width: Int, height: Int, mass: Int): String = {\\n        (List(length, width, height).exists(_ >= 10_000) || length.toLong * width * height >= 1e9.toLong, mass >= 100) match {case (true, true) => \"Both\" case (true, false) => \"Bulky\" case (false, true) => \"Heavy\" case (false, false) => \"Neither\"\\n        }\\n    }\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3032827,
                "title": "java-100-1-statement-containing-array-of-category-names",
                "content": "Within the `return` statement, create a String array containing the category names.  Then index into that array by: `names[bulky + heavy]`.\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        return (new String[] {\"Neither\", \"Bulky\", \"Heavy\", \"Both\"})[\\n                        ((length >= 10_000 || width >= 10_000 || height >= 10_000 || \\n                                (long)length * height * width >= 1_000_000_000L) ? 1 : 0) + \\n                        ((mass >= 100) ? 2 : 0)];\\n    }\\n}\\n```\\n___________________________________________________________\\nIf useful, please up-vote.\\n\\n**Explanation** of array indexing:  names[bulky + heavy]\\n```\\nbulky:  0 => not bulky,  1 => is bulky\\nheavy:  0 => not heavy,  2 => is heavy\\n\\nTo determine index into array of names:\\n\\n                  not bulky = 0     is bulky = 1\\n                +----------------+----------------+\\n  not heavy = 0 |  0+0 \"Neither\" |   0+1 \"Bulky\"  |\\n                +----------------+----------------+\\n   is heavy = 2 |  2+0 \"Heavy\"   |   2+1 \"Both\"   |\\n                +----------------+----------------+\\n```\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        return (new String[] {\"Neither\", \"Bulky\", \"Heavy\", \"Both\"})[\\n                        ((length >= 10_000 || width >= 10_000 || height >= 10_000 || \\n                                (long)length * height * width >= 1_000_000_000L) ? 1 : 0) + \\n                        ((mass >= 100) ? 2 : 0)];\\n    }\\n}\\n```\n```\\nbulky:  0 => not bulky,  1 => is bulky\\nheavy:  0 => not heavy,  2 => is heavy\\n\\nTo determine index into array of names:\\n\\n                  not bulky = 0     is bulky = 1\\n                +----------------+----------------+\\n  not heavy = 0 |  0+0 \"Neither\" |   0+1 \"Bulky\"  |\\n                +----------------+----------------+\\n   is heavy = 2 |  2+0 \"Heavy\"   |   2+1 \"Both\"   |\\n                +----------------+----------------+\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3016651,
                "title": "c-python3-simple-0ms-solutions",
                "content": "**C++**\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        int v = pow(10,3);\\n        int d = pow(10,4);\\n        bool Bulky = false, Heavy = false;\\n        int t = length/v * width/v * height/v;\\n        if(length >= d || width >= d || height >= d || t >= 1)\\n            Bulky = true;\\n        if(mass >= 100)\\n            Heavy = true;\\n        if(Bulky && Heavy) return \"Both\";\\n        else if(!Bulky && !Heavy) return \"Neither\";\\n        else if(Bulky && !Heavy) return \"Bulky\";\\n        else return \"Heavy\";\\n    }\\n};\\n```\\n**Python**\\n```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        v, d = 10**3, 10**4\\n        Bulky, Heavy = False, False\\n        t = length//v * width//v * height//v;\\n        if(length >= d or width >= d or height >= d or t >= 1):\\n            Bulky = True\\n        if(mass >= 100):\\n            Heavy = True\\n        if(Bulky and Heavy): return \"Both\"\\n        elif(not Bulky and not Heavy): return \"Neither\"\\n        elif(Bulky and not Heavy): return \"Bulky\"\\n        else: return \"Heavy\"\\n```",
                "solutionTags": [
                    "Python",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        int v = pow(10,3);\\n        int d = pow(10,4);\\n        bool Bulky = false, Heavy = false;\\n        int t = length/v * width/v * height/v;\\n        if(length >= d || width >= d || height >= d || t >= 1)\\n            Bulky = true;\\n        if(mass >= 100)\\n            Heavy = true;\\n        if(Bulky && Heavy) return \"Both\";\\n        else if(!Bulky && !Heavy) return \"Neither\";\\n        else if(Bulky && !Heavy) return \"Bulky\";\\n        else return \"Heavy\";\\n    }\\n};\\n```\n```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        v, d = 10**3, 10**4\\n        Bulky, Heavy = False, False\\n        t = length//v * width//v * height//v;\\n        if(length >= d or width >= d or height >= d or t >= 1):\\n            Bulky = True\\n        if(mass >= 100):\\n            Heavy = True\\n        if(Bulky and Heavy): return \"Both\"\\n        elif(not Bulky and not Heavy): return \"Neither\"\\n        elif(Bulky and not Heavy): return \"Bulky\"\\n        else: return \"Heavy\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3016442,
                "title": "javascript-solution",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {number} length\\n * @param {number} width\\n * @param {number} height\\n * @param {number} mass\\n * @return {string}\\n */\\nvar categorizeBox = function(length, width, height, mass) {\\n  const volume = length * width * height;\\n  const isBulky =\\n    length >= 10 ** 4 ||\\n    width >= 10 ** 4 ||\\n    height >= 10 ** 4 ||\\n    mass >= 10 ** 4 ||\\n    volume >= 10 ** 9;\\n  let result = \\'\\';\\n\\n  const isHeavy = mass >= 100;\\n  if (isBulky && isHeavy) {\\n    result = \\'Both\\';\\n  } else if (!isBulky && !isHeavy) {\\n    result = \\'Neither\\';\\n  } else if (isBulky) {\\n    result = \\'Bulky\\';\\n  } else if (isHeavy) {\\n    return \\'Heavy\\';\\n  }\\n\\n  return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} length\\n * @param {number} width\\n * @param {number} height\\n * @param {number} mass\\n * @return {string}\\n */\\nvar categorizeBox = function(length, width, height, mass) {\\n  const volume = length * width * height;\\n  const isBulky =\\n    length >= 10 ** 4 ||\\n    width >= 10 ** 4 ||\\n    height >= 10 ** 4 ||\\n    mass >= 10 ** 4 ||\\n    volume >= 10 ** 9;\\n  let result = \\'\\';\\n\\n  const isHeavy = mass >= 100;\\n  if (isBulky && isHeavy) {\\n    result = \\'Both\\';\\n  } else if (!isBulky && !isHeavy) {\\n    result = \\'Neither\\';\\n  } else if (isBulky) {\\n    result = \\'Bulky\\';\\n  } else if (isHeavy) {\\n    return \\'Heavy\\';\\n  }\\n\\n  return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3015433,
                "title": "c-6-line-solution",
                "content": "Upvote if you like solution\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(long a, long b, long c, int mass) {\\n        bool bulky=a>=10000 || b>=10000 || c>=10000 || (a * b * c)>=1000000000;\\n        bool heavy=mass>=100;\\n        if(bulky && heavy)return \"Both\";\\n        else if(bulky) return \"Bulky\";\\n        else if(heavy)return \"Heavy\";\\n        return \"Neither\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(long a, long b, long c, int mass) {\\n        bool bulky=a>=10000 || b>=10000 || c>=10000 || (a * b * c)>=1000000000;\\n        bool heavy=mass>=100;\\n        if(bulky && heavy)return \"Both\";\\n        else if(bulky) return \"Bulky\";\\n        else if(heavy)return \"Heavy\";\\n        return \"Neither\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3015390,
                "title": "concise-c",
                "content": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int l, int b, int h, int mass) {\\n        int blk = 0, hv = 0;\\n        if(l >= 10000 || b >= 10000 || h >= 10000 || (long long)l * b * h >= 1e9)  blk = 1;\\n        if(mass >= 100) hv = 1;\\n        \\n        if(blk && hv) return \"Both\";\\n        if(!blk && !hv) return \"Neither\";\\n        if(blk && !hv) return \"Bulky\";\\n        else return \"Heavy\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int l, int b, int h, int mass) {\\n        int blk = 0, hv = 0;\\n        if(l >= 10000 || b >= 10000 || h >= 10000 || (long long)l * b * h >= 1e9)  blk = 1;\\n        if(mass >= 100) hv = 1;\\n        \\n        if(blk && hv) return \"Both\";\\n        if(!blk && !hv) return \"Neither\";\\n        if(blk && !hv) return \"Bulky\";\\n        else return \"Heavy\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3014909,
                "title": "c-python",
                "content": "\\n# C++\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(long long l, long long w, long long h, int mass) {\\n        long long volume = l*w*h, b1 = 0, b2 = 0;\\n        if(l>=1e4 || w>=1e4 || h>=1e4 || volume>=1e9)  b1 = 1;      // for Bulky\\n        if(mass>=100)                                  b2 = 1;      // for heavy\\n        if(b1+b2==2)                                   return \"Both\"; \\n        if(b1+b2==0)                                   return \"Neither\";   \\n        return (b1==1 ? \"Bulky\" : \"Heavy\");\\n    }\\n};     \\n```\\n# Python\\n```\\nclass Solution:\\n    def categorizeBox(self, l: int, w: int, h: int, m: int) -> str:\\n        k,b1,b2,v = 10**4, 0, 0, l*w*h\\n        if l>=k or w>=k or h>=k or v>=10**9: b1 = 1\\n        if m>=100: b2 = 1\\n        if b1+b2==2: return \"Both\"\\n        if b1+b2==0: return \"Neither\"\\n        return \"Bulky\" if b1==1 else \"Heavy\"\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(long long l, long long w, long long h, int mass) {\\n        long long volume = l*w*h, b1 = 0, b2 = 0;\\n        if(l>=1e4 || w>=1e4 || h>=1e4 || volume>=1e9)  b1 = 1;      // for Bulky\\n        if(mass>=100)                                  b2 = 1;      // for heavy\\n        if(b1+b2==2)                                   return \"Both\"; \\n        if(b1+b2==0)                                   return \"Neither\";   \\n        return (b1==1 ? \"Bulky\" : \"Heavy\");\\n    }\\n};     \\n```\n```\\nclass Solution:\\n    def categorizeBox(self, l: int, w: int, h: int, m: int) -> str:\\n        k,b1,b2,v = 10**4, 0, 0, l*w*h\\n        if l>=k or w>=k or h>=k or v>=10**9: b1 = 1\\n        if m>=100: b2 = 1\\n        if b1+b2==2: return \"Both\"\\n        if b1+b2==0: return \"Neither\"\\n        return \"Bulky\" if b1==1 else \"Heavy\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3892942,
                "title": "easy-sol",
                "content": "![upvote_CAT.webp](https://assets.leetcode.com/users/images/b4d6cabc-2c8b-42b5-8cc1-22f0404ff45a_1691722536.8615017.webp)\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        long long vol = (long long)(length)*(long long)width*(long long)height;\\n        string ans = \"\";\\n\\n        bool bulky = false;\\n        bool heavy = false;\\n\\n        if(length >= 1e4 || width >= 1e4 || height >= 1e4 || mass >= 1e4 || vol >= 1e9) {\\n            bulky = true;\\n        }\\n\\n        if(mass >= 100) {\\n            heavy = true;\\n        }\\n\\n        if(bulky && heavy) {\\n            ans = \"Both\";\\n        }\\n        else if(!bulky && !heavy) {\\n            ans = \"Neither\";\\n        }\\n        else if(bulky && !heavy) {\\n            ans = \"Bulky\";\\n        }\\n        else if(!bulky && heavy) {\\n            ans = \"Heavy\";\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        long long vol = (long long)(length)*(long long)width*(long long)height;\\n        string ans = \"\";\\n\\n        bool bulky = false;\\n        bool heavy = false;\\n\\n        if(length >= 1e4 || width >= 1e4 || height >= 1e4 || mass >= 1e4 || vol >= 1e9) {\\n            bulky = true;\\n        }\\n\\n        if(mass >= 100) {\\n            heavy = true;\\n        }\\n\\n        if(bulky && heavy) {\\n            ans = \"Both\";\\n        }\\n        else if(!bulky && !heavy) {\\n            ans = \"Neither\";\\n        }\\n        else if(bulky && !heavy) {\\n            ans = \"Bulky\";\\n        }\\n        else if(!bulky && heavy) {\\n            ans = \"Heavy\";\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3692531,
                "title": "python-simple-if-else",
                "content": "# Code\\n```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        if length>=(10**4) or width>=(10**4) or height>=(10**4) or length*width*height>=(10**9):\\n            if mass>=100:\\n                return \"Both\"\\n            else:\\n                return \"Bulky\"\\n        if mass>=100:\\n            return \"Heavy\"\\n        return \"Neither\"      \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        if length>=(10**4) or width>=(10**4) or height>=(10**4) or length*width*height>=(10**9):\\n            if mass>=100:\\n                return \"Both\"\\n            else:\\n                return \"Bulky\"\\n        if mass>=100:\\n            return \"Heavy\"\\n        return \"Neither\"      \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3381205,
                "title": "python3-code",
                "content": "# Code\\n```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        bulky = length >= 10000 or width >= 10000 or height >= 10000 or mass >= 10000 or ((length * width) * height) >= (10 ** 9)\\n        heavy = mass >= 100\\n        if bulky and not heavy:\\n            return \"Bulky\"\\n        elif heavy and not bulky:\\n            return \"Heavy\"\\n        elif bulky and heavy:\\n            return \"Both\"\\n        elif not bulky and not heavy:\\n            return \"Neither\"\\n```\\n\\n![image.png](https://assets.leetcode.com/users/images/1cea3856-d092-4dc0-a0f6-06c1d5da55d9_1680651458.5725951.png)\\n![image.png](https://assets.leetcode.com/users/images/82e2df05-0db2-4399-9aa4-ad4aca124e70_1680651484.109793.png)",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        bulky = length >= 10000 or width >= 10000 or height >= 10000 or mass >= 10000 or ((length * width) * height) >= (10 ** 9)\\n        heavy = mass >= 100\\n        if bulky and not heavy:\\n            return \"Bulky\"\\n        elif heavy and not bulky:\\n            return \"Heavy\"\\n        elif bulky and heavy:\\n            return \"Both\"\\n        elif not bulky and not heavy:\\n            return \"Neither\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3336542,
                "title": "easy-solution-java-python",
                "content": "# Java\\n```\\nclass Solution {\\n    public boolean isBulky(int a, int b, int c, int d) {\\n        double val = Math.pow(10, 4);\\n        if(a >= val || b >= val || c >= val || d >= val) {\\n            return true;\\n        }\\n        else if((long) a * b * c >= Math.pow(10, 9)) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    public boolean isHeavy(int mass) {\\n        if(mass >= 100) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        boolean x = isBulky(length, width, height, mass);\\n        boolean y = isHeavy(mass);\\n        System.out.println(x + \" \" + y);\\n        if(x && y) {\\n            return \"Both\";\\n        }\\n        else if(x && !(y)) {\\n            return \"Bulky\";\\n        }\\n        else if(y && !(x)) {\\n            return \"Heavy\";\\n        }\\n        else {\\n            return \"Neither\";\\n        }\\n    }\\n}\\n```\\n# Python\\n```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n\\n        def isBulky(a, b, c, d):\\n            val = 10 ** 4\\n\\n            if a >= val or b >= val or c >= val or d >= val:\\n                return True\\n\\n            elif a * b * c >= (10 ** 9):\\n                return True\\n\\n            return False\\n\\n        def isHeavy(mass):\\n            if mass >= 100:\\n                return True\\n\\n            return False\\n        \\n        x = isBulky(length, width, height, mass)\\n        y = isHeavy(mass)\\n\\n        if x and y:\\n            return \"Both\"\\n        elif y and not x:\\n            return \"Heavy\"\\n        elif x and not y:\\n            return \"Bulky\"\\n        else:\\n            return \"Neither\"\\n\\n\\n```\\nDo upvote if you like the Solution :)",
                "solutionTags": [
                    "Java",
                    "Python3"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isBulky(int a, int b, int c, int d) {\\n        double val = Math.pow(10, 4);\\n        if(a >= val || b >= val || c >= val || d >= val) {\\n            return true;\\n        }\\n        else if((long) a * b * c >= Math.pow(10, 9)) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    public boolean isHeavy(int mass) {\\n        if(mass >= 100) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        boolean x = isBulky(length, width, height, mass);\\n        boolean y = isHeavy(mass);\\n        System.out.println(x + \" \" + y);\\n        if(x && y) {\\n            return \"Both\";\\n        }\\n        else if(x && !(y)) {\\n            return \"Bulky\";\\n        }\\n        else if(y && !(x)) {\\n            return \"Heavy\";\\n        }\\n        else {\\n            return \"Neither\";\\n        }\\n    }\\n}\\n```\n```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n\\n        def isBulky(a, b, c, d):\\n            val = 10 ** 4\\n\\n            if a >= val or b >= val or c >= val or d >= val:\\n                return True\\n\\n            elif a * b * c >= (10 ** 9):\\n                return True\\n\\n            return False\\n\\n        def isHeavy(mass):\\n            if mass >= 100:\\n                return True\\n\\n            return False\\n        \\n        x = isBulky(length, width, height, mass)\\n        y = isHeavy(mass)\\n\\n        if x and y:\\n            return \"Both\"\\n        elif y and not x:\\n            return \"Heavy\"\\n        elif x and not y:\\n            return \"Bulky\"\\n        else:\\n            return \"Neither\"\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3327231,
                "title": "beating-100-python-most-easiest-and-understandable-solution",
                "content": "![image.png](https://assets.leetcode.com/users/images/d9916229-edd1-4cdb-bd2a-a2eb99b578c8_1679462134.8466442.png)\\n\\n# Code\\n```\\nclass Solution(object):\\n    def categorizeBox(self, length, width, height, mass):\\n        \"\"\"\\n        :type length: int\\n        :type width: int\\n        :type height: int\\n        :type mass: int\\n        :rtype: str\\n        \"\"\"\\n        s=[]\\n        if (length>=10**4 or width>=10**4 or height>=10**4 or mass>=10**4) or (length*width*height>=10**9):\\n            s.append(\\'Bulky\\')\\n        if mass>=100:\\n            s.append(\\'Heavy\\')\\n        if \\'Bulky\\' in s and \\'Heavy\\' in s:\\n            return \\'Both\\'\\n        elif \\'Bulky\\' not in s and \\'Heavy\\' not in s:\\n            return \\'Neither\\'\\n        elif \\'Bulky\\' in s and \\'Heavy\\' not in s:\\n            return \\'Bulky\\'\\n        elif \\'Bulky\\' not in s and \\'Heavy\\' in s:\\n            return \\'Heavy\\'\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def categorizeBox(self, length, width, height, mass):\\n        \"\"\"\\n        :type length: int\\n        :type width: int\\n        :type height: int\\n        :type mass: int\\n        :rtype: str\\n        \"\"\"\\n        s=[]\\n        if (length>=10**4 or width>=10**4 or height>=10**4 or mass>=10**4) or (length*width*height>=10**9):\\n            s.append(\\'Bulky\\')\\n        if mass>=100:\\n            s.append(\\'Heavy\\')\\n        if \\'Bulky\\' in s and \\'Heavy\\' in s:\\n            return \\'Both\\'\\n        elif \\'Bulky\\' not in s and \\'Heavy\\' not in s:\\n            return \\'Neither\\'\\n        elif \\'Bulky\\' in s and \\'Heavy\\' not in s:\\n            return \\'Bulky\\'\\n        elif \\'Bulky\\' not in s and \\'Heavy\\' in s:\\n            return \\'Heavy\\'\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3320428,
                "title": "explained-o-1-tc-and-sp-clean-c",
                "content": "# Intuition\\nsimple check\\n# Approach\\nJust be carefull for the overflow of volume so take it long long and typecaste sides also to long long. \\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(int l, int w, int ht, int m) {\\n        bool h=0,b=0;\\n        if(m>=100) {\\n            h=1;\\n        }\\n        long long tmp =  (long long)l * (long long) w * (long long) ht;\\n        if(l>=10000 || w>=10000 || ht>=10000 ||tmp >= 1000000000) {\\n            b=1;\\n        }\\n        if(b && h) {\\n            return \"Both\";\\n        }\\n        else if(!b && !h) {\\n            return \"Neither\";\\n        }\\n        else if(b) {\\n            return \"Bulky\";\\n        }\\n            \\n        return \"Heavy\";\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int l, int w, int ht, int m) {\\n        bool h=0,b=0;\\n        if(m>=100) {\\n            h=1;\\n        }\\n        long long tmp =  (long long)l * (long long) w * (long long) ht;\\n        if(l>=10000 || w>=10000 || ht>=10000 ||tmp >= 1000000000) {\\n            b=1;\\n        }\\n        if(b && h) {\\n            return \"Both\";\\n        }\\n        else if(!b && !h) {\\n            return \"Neither\";\\n        }\\n        else if(b) {\\n            return \"Bulky\";\\n        }\\n            \\n        return \"Heavy\";\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3169865,
                "title": "swift-one-liner",
                "content": "**One-Liner, terse (accepted answer)**\\n```\\nclass Solution {\\n    func categorizeBox(_ l: Int, _ w: Int, _ h: Int, _ m: Int) -> String {\\n        [\"Neither\",\"Bulky\",\"Heavy\",\"Both\"][(m>=100 ? 2:0)+((max(l,w,h)>=10000||l*w*h>=1000000000) ? 1:0)]\\n    }\\n}\\n```\\n\\n---\\n**Idiomatic Swift (accepted answer)**\\n```\\nclass Solution {\\n    func categorizeBox(_ length: Int, _ width: Int, _ height: Int, _ mass: Int) -> String {\\n        let isBulky = max(length, width, height) >= 10_000 || (length*width*height) >= 1_000_000_000  \\n        let isHeavy = mass >= 100\\n        \\n        switch (isBulky, isHeavy) {\\n        case (true, false): return \"Bulky\"\\n        case (false, true): return \"Heavy\"\\n        case (true, true): return \"Both\"\\n        case (false, false): return \"Neither\"\\n        }\\n    }\\n}\\n```\\n\\n",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func categorizeBox(_ l: Int, _ w: Int, _ h: Int, _ m: Int) -> String {\\n        [\"Neither\",\"Bulky\",\"Heavy\",\"Both\"][(m>=100 ? 2:0)+((max(l,w,h)>=10000||l*w*h>=1000000000) ? 1:0)]\\n    }\\n}\\n```\n```\\nclass Solution {\\n    func categorizeBox(_ length: Int, _ width: Int, _ height: Int, _ mass: Int) -> String {\\n        let isBulky = max(length, width, height) >= 10_000 || (length*width*height) >= 1_000_000_000  \\n        let isHeavy = mass >= 100\\n        \\n        switch (isBulky, isHeavy) {\\n        case (true, false): return \"Bulky\"\\n        case (false, true): return \"Heavy\"\\n        case (true, true): return \"Both\"\\n        case (false, false): return \"Neither\"\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3140367,
                "title": "beats-100-o-1-cpp",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n# **Please give the solution an upvote if you like it.**\\n\\nThis is a C++ code that defines a class Solution with a single function categorizeBox which takes 4 parameters:\\n\\nlength: an integer representing the length of a box.\\nwidth: an integer representing the width of a box.\\nheight: an integer representing the height of a box.\\nmass: an integer representing the mass of a box.\\nThe function first sets two boolean variables isBulky and isHeavy to false.\\n\\nThen, it checks if the mass of the box is greater than or equal to 100 and sets the isHeavy variable to true if it is.\\n\\nNext, it calculates the volume of the box by multiplying its length, width, and height, and saves the result in a variable vol. If the length, width, or height of the box is greater than or equal to 10000 or if the volume of the box is greater than or equal to 1000000000, the isBulky variable is set to true.\\n\\nFinally, the function returns a string value based on the values of isBulky and isHeavy:\\n\\n\"Both\" if both isHeavy and isBulky are true.\\n\"Heavy\" if only isHeavy is true.\\n\"Bulky\" if only isBulky is true.\\n\"Neither\" if both isHeavy and isBulky are false.\\nNote: The line ios_base::sync_with_stdio(false); disables the synchronization between the C++ standard I/O streams and the corresponding low-level I/O devices. It has no effect on the functionality of the code.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        ios_base::sync_with_stdio(false);\\n        bool isBulky = false;\\n        bool isHeavy = false;\\n        if(mass>=100){\\n            isHeavy=true;\\n        }\\n        long long vol = (long long)length*width*height*1.0;\\n        if(length>=10000 || width>=10000 || height>=10000 || vol>=1000000000){\\n            isBulky=true;\\n        }\\n        if(isHeavy && isBulky){\\n            return \"Both\";\\n        }\\n        if(isHeavy){\\n            return \"Heavy\";\\n        }\\n        if(isBulky){\\n            return \"Bulky\";\\n        }\\n        return \"Neither\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        ios_base::sync_with_stdio(false);\\n        bool isBulky = false;\\n        bool isHeavy = false;\\n        if(mass>=100){\\n            isHeavy=true;\\n        }\\n        long long vol = (long long)length*width*height*1.0;\\n        if(length>=10000 || width>=10000 || height>=10000 || vol>=1000000000){\\n            isBulky=true;\\n        }\\n        if(isHeavy && isBulky){\\n            return \"Both\";\\n        }\\n        if(isHeavy){\\n            return \"Heavy\";\\n        }\\n        if(isBulky){\\n            return \"Bulky\";\\n        }\\n        return \"Neither\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3086874,
                "title": "begineer-friendly-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def categorizeBox(self, length, wid, h, mass):\\n\\n        bulky = 0\\n        heavy = 0\\n\\n        if mass >= 100:\\n            heavy = 1\\n\\n        if length >= 10000 or wid >= 10000 or h >= 10000:\\n            bulky = 1\\n        elif length *wid *h >= 1000000000:\\n            bulky = 1\\n\\n        if bulky != 0 and heavy != 0:\\n            return \"Both\"\\n        if bulky != 0:\\n            return \"Bulky\"\\n        if heavy != 0:\\n            return \"Heavy\"\\n\\n        return \"Neither\"\\n\\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def categorizeBox(self, length, wid, h, mass):\\n\\n        bulky = 0\\n        heavy = 0\\n\\n        if mass >= 100:\\n            heavy = 1\\n\\n        if length >= 10000 or wid >= 10000 or h >= 10000:\\n            bulky = 1\\n        elif length *wid *h >= 1000000000:\\n            bulky = 1\\n\\n        if bulky != 0 and heavy != 0:\\n            return \"Both\"\\n        if bulky != 0:\\n            return \"Bulky\"\\n        if heavy != 0:\\n            return \"Heavy\"\\n\\n        return \"Neither\"\\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3085304,
                "title": "c-high-readability-pattern-matching-solution-65ms-82",
                "content": "I think, it won\\'t be the faster cause using auxilary array and tuples matching. I\\'m trying to improve my experience with \\'switch pattern matching\\'. This is a main reason to use it here.\\n\\n# Code\\n```\\npublic class Solution {\\n    private const int MaxMass = 100;\\n    private const int MaxDimension = 10_000;\\n    private const int MaxVolume = 1_000_000_000;\\n\\n    public string CategorizeBox(int l, int w, int h, int m) \\n    {\\n        var isBulky = (long)l * w * h >= MaxVolume || \\n            new [] { l, w, h }.Any(d => d >= MaxDimension);\\n\\n        return (isBulky, isHeavy : m >= MaxMass) switch \\n            {\\n                ( true,  true) => \"Both\",\\n                ( true, false) => \"Bulky\",\\n                (false,  true) => \"Heavy\",\\n                            _ => \"Neither\"\\n            };\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    private const int MaxMass = 100;\\n    private const int MaxDimension = 10_000;\\n    private const int MaxVolume = 1_000_000_000;\\n\\n    public string CategorizeBox(int l, int w, int h, int m) \\n    {\\n        var isBulky = (long)l * w * h >= MaxVolume || \\n            new [] { l, w, h }.Any(d => d >= MaxDimension);\\n\\n        return (isBulky, isHeavy : m >= MaxMass) switch \\n            {\\n                ( true,  true) => \"Both\",\\n                ( true, false) => \"Bulky\",\\n                (false,  true) => \"Heavy\",\\n                            _ => \"Neither\"\\n            };\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3046472,
                "title": "rust-solution",
                "content": "# Code\\n```\\nimpl Solution {\\n    pub fn categorize_box(length: i32, width: i32, height: i32, mass: i32) -> String {\\n        let (mut bulky, mut heavy) = (false, false);\\n\\n        if length as u64 * width as u64 * height as u64 >= 1_000_000_000\\n            || length >= 10_000\\n            || width >= 10_000\\n            || height >= 10_000\\n        {\\n            bulky = true;\\n        }\\n\\n        if mass >= 100 {\\n            heavy = true;\\n        }\\n\\n        match (bulky, heavy) {\\n            (true, false) => \"Bulky\".to_owned(),\\n            (false, true) => \"Heavy\".to_owned(),\\n            (false, false) => \"Neither\".to_owned(),\\n            (true, true) => \"Both\".to_owned(),\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn categorize_box(length: i32, width: i32, height: i32, mass: i32) -> String {\\n        let (mut bulky, mut heavy) = (false, false);\\n\\n        if length as u64 * width as u64 * height as u64 >= 1_000_000_000\\n            || length >= 10_000\\n            || width >= 10_000\\n            || height >= 10_000\\n        {\\n            bulky = true;\\n        }\\n\\n        if mass >= 100 {\\n            heavy = true;\\n        }\\n\\n        match (bulky, heavy) {\\n            (true, false) => \"Bulky\".to_owned(),\\n            (false, true) => \"Heavy\".to_owned(),\\n            (false, false) => \"Neither\".to_owned(),\\n            (true, true) => \"Both\".to_owned(),\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3040583,
                "title": "categorize-box-according-to-criteria",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        volume = length*width*height\\n        if (volume >= 10**9 or height >= 10**4 or width >= 10**4 or length >= 10**4) and mass >=100:\\n            return (\"Both\")\\n        elif (volume < 10**9 or height < 10**4 or width < 10**4 or length < 10**4) and mass >=100:\\n            return (\"Heavy\")\\n        elif (volume >= 10**9 or height >= 10**4 or width >= 10**4 or length >= 10**4) and mass <100:\\n            return (\"Bulky\")\\n        else:\\n            return (\"Neither\")\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        volume = length*width*height\\n        if (volume >= 10**9 or height >= 10**4 or width >= 10**4 or length >= 10**4) and mass >=100:\\n            return (\"Both\")\\n        elif (volume < 10**9 or height < 10**4 or width < 10**4 or length < 10**4) and mass >=100:\\n            return (\"Heavy\")\\n        elif (volume >= 10**9 or height >= 10**4 or width >= 10**4 or length >= 10**4) and mass <100:\\n            return (\"Bulky\")\\n        else:\\n            return (\"Neither\")\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3036719,
                "title": "simple-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        long long volume=(long long)(length)*(long long)(width)*(long long)(height);\\n        string ans=\"\";\\n        if(length>=pow(10,4)||width>=pow(10,4)||height>=pow(10,4)||volume>=pow(10,9)){\\n            ans=\"Bulky\";\\n        }if(mass>=100){\\n            if(ans==\"Bulky\"){\\n                ans=\"Both\";\\n            }else{\\n                ans=\"Heavy\";\\n            }\\n\\n        }if(ans==\"\"){\\n            ans=\"Neither\";\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        long long volume=(long long)(length)*(long long)(width)*(long long)(height);\\n        string ans=\"\";\\n        if(length>=pow(10,4)||width>=pow(10,4)||height>=pow(10,4)||volume>=pow(10,9)){\\n            ans=\"Bulky\";\\n        }if(mass>=100){\\n            if(ans==\"Bulky\"){\\n                ans=\"Both\";\\n            }else{\\n                ans=\"Heavy\";\\n            }\\n\\n        }if(ans==\"\"){\\n            ans=\"Neither\";\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3029390,
                "title": "c-math-faster-easy-to-understand",
                "content": "* ***Math***\\n\\n* ***Time Complexity :- O(1)***\\n\\n* ***Space Complexity :- O(1)***\\n\\n```\\nclass Solution {\\npublic:\\n    \\n    bool is_bulky(int length, int width, int height)\\n    {\\n        long long volume = ((long long) length * (long long) width * (long long) height);\\n        \\n        return volume >= pow(10, 9) || length >= pow(10, 4) || width >= pow(10, 4) || height >= pow(10, 4);\\n    }\\n    \\n    bool is_heavy(int mass)\\n    {\\n        return mass >= 100;\\n    }\\n    \\n    string categorizeBox(int length, int width, int height, int mass) {\\n        \\n        bool bulky = is_bulky(length, width, height);\\n        \\n        bool heavy = is_heavy(mass);\\n        \\n        if(bulky && heavy)\\n        {\\n            return \"Both\";\\n        }\\n        else if(bulky == false && heavy == false)\\n        {\\n            return \"Neither\";\\n        }\\n        else if(bulky && heavy == false)\\n        {\\n            return \"Bulky\";\\n        }\\n        else if(bulky == false && heavy)\\n        {\\n            return \"Heavy\";\\n        }\\n        else if(bulky)\\n        {\\n            return \"Bulky\";\\n        }\\n        else if(heavy)\\n        {\\n            return \"Heavy\";\\n        }\\n         \\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    bool is_bulky(int length, int width, int height)\\n    {\\n        long long volume = ((long long) length * (long long) width * (long long) height);\\n        \\n        return volume >= pow(10, 9) || length >= pow(10, 4) || width >= pow(10, 4) || height >= pow(10, 4);\\n    }\\n    \\n    bool is_heavy(int mass)\\n    {\\n        return mass >= 100;\\n    }\\n    \\n    string categorizeBox(int length, int width, int height, int mass) {\\n        \\n        bool bulky = is_bulky(length, width, height);\\n        \\n        bool heavy = is_heavy(mass);\\n        \\n        if(bulky && heavy)\\n        {\\n            return \"Both\";\\n        }\\n        else if(bulky == false && heavy == false)\\n        {\\n            return \"Neither\";\\n        }\\n        else if(bulky && heavy == false)\\n        {\\n            return \"Bulky\";\\n        }\\n        else if(bulky == false && heavy)\\n        {\\n            return \"Heavy\";\\n        }\\n        else if(bulky)\\n        {\\n            return \"Bulky\";\\n        }\\n        else if(heavy)\\n        {\\n            return \"Heavy\";\\n        }\\n         \\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3027365,
                "title": "c-extensible-bitmask-w-comments-easy",
                "content": "This is quite a simple problem, however often definitions change and rules get added. So in order to account for future changes we need to design a solution that is simple to extend should the need arise.\\nTo accomplish this we use a bitmask to hold different properties and we can then determine the category by querying the bits which are referenced using an enum. The individual bits of the mask can be set using the `xor` or `or` operations using the appropriate `Category`.\\nIf for whatever reason that the state couldn\\'t be represented with 64 bits, then we could move to a bitset and change the enum from powers of 2 to indexes into the bitset.\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n\\t  // define the underlying type of the bitmask, in case we need to extend the size due to added categories\\n      using utype = unsigned char;\\n      enum Category { //Define the different categories (using powers of 2, next category would be 4)\\n        None  = 0,\\n        Bulky = 1,\\n        Heavy = 2,\\n      };\\n      utype mask = 0;\\n\\t  \\n      // Apply the category rules to determine the state of the bitmask\\n      if ((length >= 1e4) || (width >= 1e4) || (height >= 1e4) \\n          || (long long) length * width * height >= 1e9) // Don\\'t overflow integers as volume can be upto 1e15\\n        mask ^= Bulky;\\n      if (mass >= 100)\\n        mask ^= Heavy;\\n      \\n\\t  // Query state to determine which categories apply\\n      switch(mask) {\\n        case Bulky: \\n          return \"Bulky\";\\n        case Heavy: \\n          return \"Heavy\";\\n        case Bulky | Heavy: \\n          return \"Both\";\\n      }\\n\\n      return \"Neither\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Bitmask"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n\\t  // define the underlying type of the bitmask, in case we need to extend the size due to added categories\\n      using utype = unsigned char;\\n      enum Category { //Define the different categories (using powers of 2, next category would be 4)\\n        None  = 0,\\n        Bulky = 1,\\n        Heavy = 2,\\n      };\\n      utype mask = 0;\\n\\t  \\n      // Apply the category rules to determine the state of the bitmask\\n      if ((length >= 1e4) || (width >= 1e4) || (height >= 1e4) \\n          || (long long) length * width * height >= 1e9) // Don\\'t overflow integers as volume can be upto 1e15\\n        mask ^= Bulky;\\n      if (mass >= 100)\\n        mask ^= Heavy;\\n      \\n\\t  // Query state to determine which categories apply\\n      switch(mask) {\\n        case Bulky: \\n          return \"Bulky\";\\n        case Heavy: \\n          return \"Heavy\";\\n        case Bulky | Heavy: \\n          return \"Both\";\\n      }\\n\\n      return \"Neither\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3022339,
                "title": "java-0ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        long vol=((long)length*(long)width*(long)height);\\n        int v1=(int)Math.pow(10,4);\\n        long v2=(long)Math.pow(10,9);\\n        boolean bulky=false;\\n        boolean heavy=false;\\n\\n        if(length>=v1||width>=v1||height>=v1||mass>=v1)bulky=true;\\n        if(vol>=v2)bulky=true;\\n        if(mass>=100)heavy=true;\\n\\n        if(bulky&&heavy)return \"Both\";\\n        else if(bulky && !heavy) return \"Bulky\";\\n        else if(!bulky && heavy)return \"Heavy\";\\n        else return \"Neither\";\\n        \\n        \\n        \\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        long vol=((long)length*(long)width*(long)height);\\n        int v1=(int)Math.pow(10,4);\\n        long v2=(long)Math.pow(10,9);\\n        boolean bulky=false;\\n        boolean heavy=false;\\n\\n        if(length>=v1||width>=v1||height>=v1||mass>=v1)bulky=true;\\n        if(vol>=v2)bulky=true;\\n        if(mass>=100)heavy=true;\\n\\n        if(bulky&&heavy)return \"Both\";\\n        else if(bulky && !heavy) return \"Bulky\";\\n        else if(!bulky && heavy)return \"Heavy\";\\n        else return \"Neither\";\\n        \\n        \\n        \\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3019022,
                "title": "c-best-way-fasted-way",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nEverything is understandable in the program below, beside the calcuation of the volume part :-\\nSo what happened when length, width & height will be multiply it will be a big value so we have to store in long int.\\nAnd to store in long int we have to first initialize length, width & height long.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        long volume=(long) length * (long) width * (long) height;\\n       bool bulky = length>=10000 || width>=10000 || height>=10000 || volume >= 1000000000;\\n        bool heavy = mass>=100 ;\\n        if (bulky && heavy) return \"Both\";\\n        if(bulky) return \"Bulky\";\\n        if(heavy) return \"Heavy\";\\n        return \"Neither\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        long volume=(long) length * (long) width * (long) height;\\n       bool bulky = length>=10000 || width>=10000 || height>=10000 || volume >= 1000000000;\\n        bool heavy = mass>=100 ;\\n        if (bulky && heavy) return \"Both\";\\n        if(bulky) return \"Bulky\";\\n        if(heavy) return \"Heavy\";\\n        return \"Neither\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3018778,
                "title": "easy-simple-100-fastest-c-solution-intuitive",
                "content": "## Complexity\\n- Time complexity: $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        bool b=0, h=0;\\n        if (height>=10000 || length>=10000 || width>=10000)b=1;\\n       long long int x= 1LL*height*length;\\n        if (x<1e9)x*= width;\\n        if (x>= 1e9)b=1;\\n        if (mass>=100)h=1;\\n        if (b && h)return \"Both\";\\n        if (!b && !h)return \"Neither\";\\n        if (b && !h)return \"Bulky\";\\n        return \"Heavy\";\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        bool b=0, h=0;\\n        if (height>=10000 || length>=10000 || width>=10000)b=1;\\n       long long int x= 1LL*height*length;\\n        if (x<1e9)x*= width;\\n        if (x>= 1e9)b=1;\\n        if (mass>=100)h=1;\\n        if (b && h)return \"Both\";\\n        if (!b && !h)return \"Neither\";\\n        if (b && !h)return \"Bulky\";\\n        return \"Heavy\";\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3018723,
                "title": "python3",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n```\\nCode block\\n```\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        volume=length*width*height\\n        a=10**4\\n        b=10**9\\n        c=0\\n        d=0\\n        if (length>=a)or(width>=a)or(height>=a) or (volume>=b):\\n            c=1\\n        if mass>=100:\\n            d=1\\n        if c==1 and d==0:\\n            return \\'Bulky\\'\\n        elif c==0 and d==0:\\n            return \\'Neither\\'\\n        elif c==0 and d==1:\\n            return \\'Heavy\\'\\n        elif c==1 and d==1:\\n            return \\'Both\\'\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nCode block\\n```\n```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        volume=length*width*height\\n        a=10**4\\n        b=10**9\\n        c=0\\n        d=0\\n        if (length>=a)or(width>=a)or(height>=a) or (volume>=b):\\n            c=1\\n        if mass>=100:\\n            d=1\\n        if c==1 and d==0:\\n            return \\'Bulky\\'\\n        elif c==0 and d==0:\\n            return \\'Neither\\'\\n        elif c==0 and d==1:\\n            return \\'Heavy\\'\\n        elif c==1 and d==1:\\n            return \\'Both\\'\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3017285,
                "title": "simple-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\nstring categorizeBox(int length, int width, int height, int mass) {\\n    bool isbulky = false;\\n    bool isheavy = false;\\n    long long volume = (long long)length * (long long)width * (long long)height;\\n    if (length >= 10000 || width >= 10000 || height >= 10000 || volume >= pow(10,9)) {\\n        isbulky = true;\\n    }\\n    if (mass >= 100) {\\n        isheavy = true;\\n    }\\n    if (isbulky && isheavy) {\\n        return \"Both\";\\n    }\\n    if (!isbulky && !isheavy) {\\n        return \"Neither\";\\n    }\\n    if (isbulky && !isheavy) {\\n        return \"Bulky\";\\n    }\\n    if (!isbulky && isheavy) {\\n        return \"Heavy\";\\n    }\\n    return \"\";\\n}\\n\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\nstring categorizeBox(int length, int width, int height, int mass) {\\n    bool isbulky = false;\\n    bool isheavy = false;\\n    long long volume = (long long)length * (long long)width * (long long)height;\\n    if (length >= 10000 || width >= 10000 || height >= 10000 || volume >= pow(10,9)) {\\n        isbulky = true;\\n    }\\n    if (mass >= 100) {\\n        isheavy = true;\\n    }\\n    if (isbulky && isheavy) {\\n        return \"Both\";\\n    }\\n    if (!isbulky && !isheavy) {\\n        return \"Neither\";\\n    }\\n    if (isbulky && !isheavy) {\\n        return \"Bulky\";\\n    }\\n    if (!isbulky && isheavy) {\\n        return \"Heavy\";\\n    }\\n    return \"\";\\n}\\n\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3017267,
                "title": "100-fast-java-easy-to-understand",
                "content": "# Code\\n```\\nimport java.math.BigInteger;\\n\\nclass Solution {\\n     public String categorizeBox(int length, int width, int height, int mass) {\\n            int maxBulky = 10000;\\n            boolean isBulky =false;\\n            boolean isHeavy = false;\\n            boolean isBoth = false;\\n//caculating volume\\n            BigInteger bigInteger = new BigInteger(String.valueOf(length))\\n                                    .multiply(\\n                                    new BigInteger(String.valueOf(width)))\\n                                    .multiply(\\n                                    new BigInteger(String.valueOf(height)));\\n            \\n            if(bigInteger.compareTo(new BigInteger(String.valueOf(Long.valueOf(1000000000l))))>=0 \\n                || \\n            (length>=maxBulky \\n                || \\n            width >=maxBulky \\n                || \\n            height >=maxBulky \\n                || \\n            mass >=maxBulky ))\\n                                isBulky = true;\\n            if(mass>=100) \\n                                isHeavy = true;\\n\\n            if(isBulky ==true && isHeavy ==true ) \\n                                return \"Both\";\\n            else if(isBulky ==false && isHeavy ==false) \\n                                return \"Neither\";\\n            else if(isBulky ==true && isHeavy ==false) \\n                                return \"Bulky\";\\n            else \\n                                return \"Heavy\";\\n        }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nimport java.math.BigInteger;\\n\\nclass Solution {\\n     public String categorizeBox(int length, int width, int height, int mass) {\\n            int maxBulky = 10000;\\n            boolean isBulky =false;\\n            boolean isHeavy = false;\\n            boolean isBoth = false;\\n//caculating volume\\n            BigInteger bigInteger = new BigInteger(String.valueOf(length))\\n                                    .multiply(\\n                                    new BigInteger(String.valueOf(width)))\\n                                    .multiply(\\n                                    new BigInteger(String.valueOf(height)));\\n            \\n            if(bigInteger.compareTo(new BigInteger(String.valueOf(Long.valueOf(1000000000l))))>=0 \\n                || \\n            (length>=maxBulky \\n                || \\n            width >=maxBulky \\n                || \\n            height >=maxBulky \\n                || \\n            mass >=maxBulky ))\\n                                isBulky = true;\\n            if(mass>=100) \\n                                isHeavy = true;\\n\\n            if(isBulky ==true && isHeavy ==true ) \\n                                return \"Both\";\\n            else if(isBulky ==false && isHeavy ==false) \\n                                return \"Neither\";\\n            else if(isBulky ==true && isHeavy ==false) \\n                                return \"Bulky\";\\n            else \\n                                return \"Heavy\";\\n        }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3016636,
                "title": "c-do-all-condition-checks",
                "content": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        bool ma=false,vol=false;\\n        if(mass>=100) ma=true;\\n        if((length>=1e4 || width >= 1e4 || height >= 1e4) ||\\n           ((long long)(length)*width*height >= 1e9) ) vol = true;\\n        if(ma && vol) return \"Both\";\\n        else if(ma) return \"Heavy\";\\n        else if(vol) return \"Bulky\";\\n        return \"Neither\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        bool ma=false,vol=false;\\n        if(mass>=100) ma=true;\\n        if((length>=1e4 || width >= 1e4 || height >= 1e4) ||\\n           ((long long)(length)*width*height >= 1e9) ) vol = true;\\n        if(ma && vol) return \"Both\";\\n        else if(ma) return \"Heavy\";\\n        else if(vol) return \"Bulky\";\\n        return \"Neither\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3016617,
                "title": "integer-overflow-explained-simple-100-faster-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nHere we need to convert all the dimensions into Long to avoid integer overflow..that\\'s the only tricky part in this qxn.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        \\n        long vol=(length*1L)*(width*1L)*(height*1L);\\n        \\n        boolean h=false; // height\\n        boolean b=false; // bulky\\n        \\n        if(length>=10000 || width>=10000 || height>=10000 || vol>=1000000000L)\\n        {\\n            b=true;\\n        }\\n        \\n        if(mass>=100)\\n        {\\n            h=true;\\n        }\\n  \\n        if(h && b)\\n            return \"Both\";\\n  \\n        if(h==false && b==false)\\n            return \"Neither\";\\n        \\n        if(h)\\n            return \"Heavy\";\\n        \\n        return \"Bulky\";\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        \\n        long vol=(length*1L)*(width*1L)*(height*1L);\\n        \\n        boolean h=false; // height\\n        boolean b=false; // bulky\\n        \\n        if(length>=10000 || width>=10000 || height>=10000 || vol>=1000000000L)\\n        {\\n            b=true;\\n        }\\n        \\n        if(mass>=100)\\n        {\\n            h=true;\\n        }\\n  \\n        if(h && b)\\n            return \"Both\";\\n  \\n        if(h==false && b==false)\\n            return \"Neither\";\\n        \\n        if(h)\\n            return \"Heavy\";\\n        \\n        return \"Bulky\";\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3016354,
                "title": "c-ternary-vs-bitwise-with-2-conditions-0ms-5-8mb",
                "content": "Pretty plain problem, we will just have to compute the `2` base conditions `isBulky` and `isHeavy` as specified in the specs.\\n\\nWith them, we will be able to `return` one of the four required strings, depending on their values.\\n\\n# Complexity\\n- Time complexity: $$O(1)$$\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```cpp\\nconstexpr int volLmt = 1000000000, sizeLmt = 10000, massLmt = 100;\\n\\nclass Solution {\\npublic:\\n    string categorizeBox(int l, int w, int h, int m) {\\n        // support variables\\n        int long long vol = (long long)w * h * l;\\n        // checking for the 2 base conditions\\n        bool isBulky = vol >= volLmt || l >= sizeLmt || w >= sizeLmt || h >= sizeLmt, isHeavy = m >= massLmt;\\n        return isBulky ? (isHeavy ? \"Both\" : \"Bulky\") : isHeavy ? \"Heavy\" : \"Neither\";\\n    }\\n};\\n```\\n\\nDon\\'t like the messy ternary? Worry not, we got you covered!\\n\\nWe can turn the two booleans variables into a value in the `0 - 3` range using `isBulky` for the least significant bit (`0 - 1`) and `isHeavy` for the most significant (`0 - 2`), like this:\\n\\n```cpp\\nisBulky isHeavy   Total\\n      0       0       0\\n      1       0       1\\n      0       1       2\\n      1       1       3\\n```\\n\\nThe updated code:\\n\\n```cpp\\nconstexpr int volLmt = 1000000000, sizeLmt = 10000, massLmt = 100;\\nconst string options[4] = {\"Neither\", \"Bulky\", \"Heavy\", \"Both\"};\\n\\nclass Solution {\\npublic:\\n    string categorizeBox(int l, int w, int h, int m) {\\n        // support variables\\n        int long long vol = (long long)w * h * l;\\n        // checking for the 2 base conditions\\n        bool isBulky = vol >= volLmt || l >= sizeLmt || w >= sizeLmt || h >= sizeLmt, isHeavy = m >= massLmt;\\n        return options[isBulky + (isHeavy << 1)];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Bit Manipulation"
                ],
                "code": "```cpp\\nconstexpr int volLmt = 1000000000, sizeLmt = 10000, massLmt = 100;\\n\\nclass Solution {\\npublic:\\n    string categorizeBox(int l, int w, int h, int m) {\\n        // support variables\\n        int long long vol = (long long)w * h * l;\\n        // checking for the 2 base conditions\\n        bool isBulky = vol >= volLmt || l >= sizeLmt || w >= sizeLmt || h >= sizeLmt, isHeavy = m >= massLmt;\\n        return isBulky ? (isHeavy ? \"Both\" : \"Bulky\") : isHeavy ? \"Heavy\" : \"Neither\";\\n    }\\n};\\n```\n```cpp\\nisBulky isHeavy   Total\\n      0       0       0\\n      1       0       1\\n      0       1       2\\n      1       1       3\\n```\n```cpp\\nconstexpr int volLmt = 1000000000, sizeLmt = 10000, massLmt = 100;\\nconst string options[4] = {\"Neither\", \"Bulky\", \"Heavy\", \"Both\"};\\n\\nclass Solution {\\npublic:\\n    string categorizeBox(int l, int w, int h, int m) {\\n        // support variables\\n        int long long vol = (long long)w * h * l;\\n        // checking for the 2 base conditions\\n        bool isBulky = vol >= volLmt || l >= sizeLmt || w >= sizeLmt || h >= sizeLmt, isHeavy = m >= massLmt;\\n        return options[isBulky + (isHeavy << 1)];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3015979,
                "title": "simple-and-easy-to-understand-c-solution",
                "content": "\\tclass Solution {\\n\\tpublic:\\n\\t\\tstring categorizeBox(int length, int width, int height, int mass) {\\n\\t\\t\\tlong long int vol=(long long)length * (long long)width *(long long)height;\\n\\t\\t\\tint bulky=0,heavy=0;\\n\\t\\t\\tif(mass>=100)\\n\\t\\t\\t\\theavy=1;\\n\\t\\t\\tif(length>=1e4 || width>=1e4 || height>=1e4 || vol>=1e9){\\n\\t\\t\\t\\tbulky=1;\\n\\t\\t\\t}\\n\\t\\t\\tif(bulky && heavy)\\n\\t\\t\\t\\treturn \"Both\";\\n\\t\\t\\tif(!bulky && !heavy)\\n\\t\\t\\t\\treturn \"Neither\";\\n\\t\\t\\tif(bulky && !heavy)\\n\\t\\t\\t\\treturn \"Bulky\";\\n\\t\\t\\treturn \"Heavy\";\\n\\t\\t}\\n\\t};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tstring categorizeBox(int length, int width, int height, int mass) {\\n\\t\\t\\tlong long int vol=(long long)length * (long long)width *(long long)height;\\n\\t\\t\\tint bulky=0,heavy=0;\\n\\t\\t\\tif(mass>=100)\\n\\t\\t\\t\\theavy=1;\\n\\t\\t\\tif(length>=1e4 || width>=1e4 || height>=1e4 || vol>=1e9){\\n\\t\\t\\t\\tbulky=1;\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 3015689,
                "title": "c-solution-easy-to-understand",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        bool bulky = false, heavy = false;\\n        long long volume = length;\\n        volume *= width;\\n        volume *= height;\\n        if(length >= 10000 || width >= 10000 || height >= 10000 || volume >= 1e9){\\n            bulky = true;\\n        }\\n        if(mass >= 100){\\n            heavy = true;\\n        }\\n        \\n        if(bulky && heavy){\\n            return \"Both\";\\n        }\\n        else if(!bulky && !heavy){\\n            return \"Neither\";\\n        }\\n        else if(bulky){\\n            return \"Bulky\";\\n        }\\n        return \"Heavy\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        bool bulky = false, heavy = false;\\n        long long volume = length;\\n        volume *= width;\\n        volume *= height;\\n        if(length >= 10000 || width >= 10000 || height >= 10000 || volume >= 1e9){\\n            bulky = true;\\n        }\\n        if(mass >= 100){\\n            heavy = true;\\n        }\\n        \\n        if(bulky && heavy){\\n            return \"Both\";\\n        }\\n        else if(!bulky && !heavy){\\n            return \"Neither\";\\n        }\\n        else if(bulky){\\n            return \"Bulky\";\\n        }\\n        return \"Heavy\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3015057,
                "title": "easy-and-understandable-c-beats-100-efficient-code",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(long length, long width, long height, int mass) {\\n        long long volume=length*width*height;\\n        const long long H = 1e+9;\\n        const long long D = 1e+4;\\n        bool isBulky = length>=D || width>=D ||height>=D || volume>=H;\\n        bool isHeavy = mass>=100;\\n        \\n        if(isBulky && isHeavy){\\n            return \"Both\";\\n        }\\n        if(isBulky){\\n            return \"Bulky\";\\n        }\\n        if(isHeavy){\\n            return \"Heavy\";\\n        }\\n        return \"Neither\";\\n    }\\n};\\n\\n\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(long length, long width, long height, int mass) {\\n        long long volume=length*width*height;\\n        const long long H = 1e+9;\\n        const long long D = 1e+4;\\n        bool isBulky = length>=D || width>=D ||height>=D || volume>=H;\\n        bool isHeavy = mass>=100;\\n        \\n        if(isBulky && isHeavy){\\n            return \"Both\";\\n        }\\n        if(isBulky){\\n            return \"Bulky\";\\n        }\\n        if(isHeavy){\\n            return \"Heavy\";\\n        }\\n        return \"Neither\";\\n    }\\n};\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3015000,
                "title": "c-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int l, int w, int h, int m) \\n    {\\n        bool bulky = false;\\n        bool heavy = false;\\n        long long int volume = (long long)l * (long long)w * (long long)h;\\n        if((l >= 1e4 || h >= 1e4 || w >= 1e4) || (volume >= 1e9))\\n            bulky = true;\\n        if(m >= 100)\\n            heavy = true;\\n        if(heavy && bulky)\\n            return \"Both\";\\n        else if(heavy== true)\\n            return \"Heavy\";\\n        else if(bulky==true)\\n            return \"Bulky\";\\n        else\\n            return \"Neither\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int l, int w, int h, int m) \\n    {\\n        bool bulky = false;\\n        bool heavy = false;\\n        long long int volume = (long long)l * (long long)w * (long long)h;\\n        if((l >= 1e4 || h >= 1e4 || w >= 1e4) || (volume >= 1e9))\\n            bulky = true;\\n        if(m >= 100)\\n            heavy = true;\\n        if(heavy && bulky)\\n            return \"Both\";\\n        else if(heavy== true)\\n            return \"Heavy\";\\n        else if(bulky==true)\\n            return \"Bulky\";\\n        else\\n            return \"Neither\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3014906,
                "title": "easy-short-efficient-clean-code",
                "content": "```c++\\nclass Solution {\\ntypedef long long ll;\\npublic:\\n    string categorizeBox(int l, int w, int h, int m) {\\n        bool first=l>=10000 || w>=10000 || h>=10000 || ll(l)*ll(w)*ll(h)>=1000000000,\\n        second=m>=100;\\n        if(first && second){\\n            return \"Both\";\\n        }\\n        if(!first && !second){\\n            return \"Neither\";\\n        }\\n        return (first?\"Bulky\":\"Heavy\");\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```c++\\nclass Solution {\\ntypedef long long ll;\\npublic:\\n    string categorizeBox(int l, int w, int h, int m) {\\n        bool first=l>=10000 || w>=10000 || h>=10000 || ll(l)*ll(w)*ll(h)>=1000000000,\\n        second=m>=100;\\n        if(first && second){\\n            return \"Both\";\\n        }\\n        if(!first && !second){\\n            return \"Neither\";\\n        }\\n        return (first?\"Bulky\":\"Heavy\");\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4097075,
                "title": "easy-solution-beats-over-75-of-people",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction categorizeBox(length: number, width: number, height: number, mass: number): string {\\n    let bulky = false\\n    let heavy = false\\n    if (length >= Math.pow(10,4) || width >= Math.pow(10,4) || height >= Math.pow(10,4) || length * width * height >= Math.pow(10,9) ){\\n        bulky = true\\n    }\\n    if (mass >= 100){\\n        heavy = true\\n    }\\n    if (bulky && heavy){\\n        return \"Both\"\\n    } else if (bulky == false && heavy == false){\\n        return \"Neither\"\\n    } else if (bulky && heavy == false){\\n        return \"Bulky\"\\n    } else {\\n        return \"Heavy\"\\n    }\\n};\\n```",
                "solutionTags": [
                    "TypeScript",
                    "Math"
                ],
                "code": "```\\nfunction categorizeBox(length: number, width: number, height: number, mass: number): string {\\n    let bulky = false\\n    let heavy = false\\n    if (length >= Math.pow(10,4) || width >= Math.pow(10,4) || height >= Math.pow(10,4) || length * width * height >= Math.pow(10,9) ){\\n        bulky = true\\n    }\\n    if (mass >= 100){\\n        heavy = true\\n    }\\n    if (bulky && heavy){\\n        return \"Both\"\\n    } else if (bulky == false && heavy == false){\\n        return \"Neither\"\\n    } else if (bulky && heavy == false){\\n        return \"Bulky\"\\n    } else {\\n        return \"Heavy\"\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4087145,
                "title": "easy-approach-using-math",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool checkbulky(int length, int width, int height, int mass){\\n        vector<long long> v;\\n        int count=0;\\n        if(length>=pow(10,4) || width>=pow(10,4) || height>=pow(10,4) || mass>=pow(10,4)){\\n            count++;\\n        }\\n        v.push_back(length);\\n        v.push_back(width);\\n        v.push_back(height);\\n        if(v[0]*v[1]*v[2] >=pow(10,9)){\\n            count++;\\n        }\\n        if(count==1 ||count==2){\\n            return true;\\n        }\\n        else{\\n            return false;\\n        }\\n       \\n    }\\n    bool checkheavy(int mass){\\n        if(mass>=100){\\n            return true;\\n        }\\n        else{\\n            return false;\\n        }\\n    }\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        bool ans=checkbulky(length,width,height,mass);\\n        bool res=checkheavy(mass);\\n        if(ans==true && res==true){\\n            return \"Both\";\\n        }\\n        if(ans==false && res==false){\\n            return \"Neither\";\\n        }\\n        if(ans==true && res==false){\\n            return \"Bulky\";\\n        }\\n      else if(ans==false && res==true){\\n            return \"Heavy\";\\n      }\\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool checkbulky(int length, int width, int height, int mass){\\n        vector<long long> v;\\n        int count=0;\\n        if(length>=pow(10,4) || width>=pow(10,4) || height>=pow(10,4) || mass>=pow(10,4)){\\n            count++;\\n        }\\n        v.push_back(length);\\n        v.push_back(width);\\n        v.push_back(height);\\n        if(v[0]*v[1]*v[2] >=pow(10,9)){\\n            count++;\\n        }\\n        if(count==1 ||count==2){\\n            return true;\\n        }\\n        else{\\n            return false;\\n        }\\n       \\n    }\\n    bool checkheavy(int mass){\\n        if(mass>=100){\\n            return true;\\n        }\\n        else{\\n            return false;\\n        }\\n    }\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        bool ans=checkbulky(length,width,height,mass);\\n        bool res=checkheavy(mass);\\n        if(ans==true && res==true){\\n            return \"Both\";\\n        }\\n        if(ans==false && res==false){\\n            return \"Neither\";\\n        }\\n        if(ans==true && res==false){\\n            return \"Bulky\";\\n        }\\n      else if(ans==false && res==true){\\n            return \"Heavy\";\\n      }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4083358,
                "title": "java-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        int pow4 = (int) Math.pow(10, 4);\\n        String one = \"Bulky\";\\n        String two = \"Heavy\";\\n        String bulky = ((length >= 10000 || width >= 10000 || height >= 10000 || mass >= 10000) || (((long) length * width * height)>= 1000000000)) ? one : \"\";\\n        String heavy = mass >= 100 ? two : \"\";\\n\\n        if (one.equals(bulky) && two.equals(heavy)) {\\n            return \"Both\";\\n        } else if (one.equals(bulky)) {\\n            return one;\\n        } else if (two.equals(heavy)) {\\n            return two;\\n        }\\n        return \"Neither\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        int pow4 = (int) Math.pow(10, 4);\\n        String one = \"Bulky\";\\n        String two = \"Heavy\";\\n        String bulky = ((length >= 10000 || width >= 10000 || height >= 10000 || mass >= 10000) || (((long) length * width * height)>= 1000000000)) ? one : \"\";\\n        String heavy = mass >= 100 ? two : \"\";\\n\\n        if (one.equals(bulky) && two.equals(heavy)) {\\n            return \"Both\";\\n        } else if (one.equals(bulky)) {\\n            return one;\\n        } else if (two.equals(heavy)) {\\n            return two;\\n        }\\n        return \"Neither\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4076754,
                "title": "categorizing-boxes-based-on-dimensions-and-mass",
                "content": "\\n # Intuition:\\n * Our goal is to categorize a box based on its dimensions (length, width, height) and mass. \\n * We need to consider different conditions and thresholds to determine the category.\\n # Approach:\\n * 1. Calculate the volume of the box using the given dimensions, ensuring it\\'s a long to prevent overflow.\\n * 2. Initialize the result string \"ans\" to \"Bulky\" by default.\\n * 3. Check if any dimension (length, width, height) or the volume exceeds certain thresholds:\\n *    - If any threshold is exceeded, consider additional criteria:\\n *      - If the mass is greater than or equal to 100, categorize as \"Both.\"\\n *      - If the mass is less than 100, categorize as \"Bulky.\"\\n *    - If no thresholds are exceeded, check only the mass:\\n *      - If the mass is greater than or equal to 100, categorize as \"Heavy.\"\\n *      - If mass is less than 100, categorize as \"Neither.\"\\n * 4. Return the final category as the output.\\n * \\n # Complexity:\\n  # Time complexity: O(1)  \\n  - The code performs a fixed number of comparisons and calculations, regardless of the input size.\\n# Space complexity: O(1) \\n- The code uses a fixed amount of memory for variables and does not depend on the input size.\\n \\n\\n# Code\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        long volume = (length*1L)*(width*1L)*(height*1L);\\n        System.out.println(volume);\\n\\n        String ans = \"Bulky\";\\n\\n        if(length >= 10000 || width >=10000 || height >=10000 || volume >=1000000000L){   \\n            if(mass>=100){\\n                ans = \"Both\";\\n            }else{\\n                ans = \"Bulky\";\\n            }\\n        }else if(mass >= 100){\\n            ans= \"Heavy\";\\n        }else{\\n           ans =  \"Neither\";\\n        }\\n\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        long volume = (length*1L)*(width*1L)*(height*1L);\\n        System.out.println(volume);\\n\\n        String ans = \"Bulky\";\\n\\n        if(length >= 10000 || width >=10000 || height >=10000 || volume >=1000000000L){   \\n            if(mass>=100){\\n                ans = \"Both\";\\n            }else{\\n                ans = \"Bulky\";\\n            }\\n        }else if(mass >= 100){\\n            ans= \"Heavy\";\\n        }else{\\n           ans =  \"Neither\";\\n        }\\n\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4072234,
                "title": "logic",
                "content": "# Code\\n```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        bulky = any(p >= 10**4 for p in [length, width, height, mass]) or length * width * height >= 10**9\\n        heavy = mass >= 100\\n        \\n        if bulky and heavy:\\n            return \"Both\"\\n        elif bulky and (not heavy):\\n            return \"Bulky\"\\n        elif (not bulky) and heavy:\\n            return \"Heavy\"\\n        elif not (bulky and heavy):\\n            return \"Neither\"       \\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        bulky = any(p >= 10**4 for p in [length, width, height, mass]) or length * width * height >= 10**9\\n        heavy = mass >= 100\\n        \\n        if bulky and heavy:\\n            return \"Both\"\\n        elif bulky and (not heavy):\\n            return \"Bulky\"\\n        elif (not bulky) and heavy:\\n            return \"Heavy\"\\n        elif not (bulky and heavy):\\n            return \"Neither\"       \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4064473,
                "title": "here-is-my-cpp-solution-easy-appraoch",
                "content": "\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n       O(1)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n     O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        bool flag =0;\\n        if(length>=10000 || width>=10000 || height>=10000 || length*1LL*width*height >=1000000000){\\n            flag =1;\\n        }\\n        if(flag && mass>=100)return \"Both\";\\n        if(flag )return \"Bulky\";\\n        if(mass>=100)return \"Heavy\";\\n        return \"Neither\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        bool flag =0;\\n        if(length>=10000 || width>=10000 || height>=10000 || length*1LL*width*height >=1000000000){\\n            flag =1;\\n        }\\n        if(flag && mass>=100)return \"Both\";\\n        if(flag )return \"Bulky\";\\n        if(mass>=100)return \"Heavy\";\\n        return \"Neither\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4061490,
                "title": "easy-solution",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        volume = length * width * height\\n  \\n        isBulky = (max(length, width, height) >= 10**4 or volume >= 10**9)                  \\n        isHeavy = (mass >= 100)\\n\\n        if isBulky and isHeavy:\\n            return \\'Both\\'\\n        elif isBulky:\\n            return \\'Bulky\\'\\n        elif isHeavy:\\n            return \\'Heavy\\'\\n        else:\\n            return \\'Neither\\'\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        volume = length * width * height\\n  \\n        isBulky = (max(length, width, height) >= 10**4 or volume >= 10**9)                  \\n        isHeavy = (mass >= 100)\\n\\n        if isBulky and isHeavy:\\n            return \\'Both\\'\\n        elif isBulky:\\n            return \\'Bulky\\'\\n        elif isHeavy:\\n            return \\'Heavy\\'\\n        else:\\n            return \\'Neither\\'\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4046271,
                "title": "python-simple-solution-if-else",
                "content": "# Complexity\\n- Time complexity: $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```python\\nclass Solution:\\n  def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n    bulky = max(length, width, height) >= 1e4 or length * width * height >= 1e9\\n    heavy = mass >= 100 \\n    if bulky and heavy:\\n      return \"Both\"\\n    if bulky:\\n      return \"Bulky\"\\n    if heavy:\\n      return \"Heavy\"\\n    return \"Neither\"\\n```\\n",
                "solutionTags": [
                    "Python3",
                    "Math"
                ],
                "code": "```python\\nclass Solution:\\n  def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n    bulky = max(length, width, height) >= 1e4 or length * width * height >= 1e9\\n    heavy = mass >= 100 \\n    if bulky and heavy:\\n      return \"Both\"\\n    if bulky:\\n      return \"Bulky\"\\n    if heavy:\\n      return \"Heavy\"\\n    return \"Neither\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4034798,
                "title": "simple-c-solution-o-1-beats-100",
                "content": "\\n# Complexity\\n- Time complexity: O(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        bool bulky=false, heavy=false;\\n        long long volume=(long long)length*(long long)width*(long long)height;\\n        if(length>=10000 || width>=10000 || height>=10000 || mass>=10000 || (volume)>=1000000000) bulky=true;\\n        if(mass>=100) heavy=true;\\n        if(bulky && heavy) return \"Both\";\\n        else if(!bulky && !heavy) return \"Neither\";\\n        else if(bulky && !heavy) return \"Bulky\";\\n        else return \"Heavy\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        bool bulky=false, heavy=false;\\n        long long volume=(long long)length*(long long)width*(long long)height;\\n        if(length>=10000 || width>=10000 || height>=10000 || mass>=10000 || (volume)>=1000000000) bulky=true;\\n        if(mass>=100) heavy=true;\\n        if(bulky && heavy) return \"Both\";\\n        else if(!bulky && !heavy) return \"Neither\";\\n        else if(bulky && !heavy) return \"Bulky\";\\n        else return \"Heavy\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4009491,
                "title": "simple-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        int cnt=0;\\n        string t=\"\";\\n        int c=0;\\n        long long g=(long long)width*(long long)height*(long long)length;\\n        bool c1=(g>=1e9 || width>=1e4 || height>=1e4 || length>=1e4);\\n        bool c2=mass>=100;\\n        if(c1 && c2){\\n            return \"Both\";\\n        }\\n        else if(c1){\\n            return \"Bulky\";\\n        }\\n        else if(c2){\\n            return \"Heavy\";\\n        }\\n        else{\\n            return \"Neither\";\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        int cnt=0;\\n        string t=\"\";\\n        int c=0;\\n        long long g=(long long)width*(long long)height*(long long)length;\\n        bool c1=(g>=1e9 || width>=1e4 || height>=1e4 || length>=1e4);\\n        bool c2=mass>=100;\\n        if(c1 && c2){\\n            return \"Both\";\\n        }\\n        else if(c1){\\n            return \"Bulky\";\\n        }\\n        else if(c2){\\n            return \"Heavy\";\\n        }\\n        else{\\n            return \"Neither\";\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4005667,
                "title": "beats-99-08-of-users",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        check=[]\\n        ans=[]\\n        if length>=10000 or width>=10000 or height>=10000 or mass>=10000 or   length*width*height>=10**9:\\n            check.append(\"Bulky\")\\n        \\n        if mass>=100:\\n            check.append(\"Heavy\")\\n        if \"Bulky\" in check and \"Heavy\" in check:\\n            return \"Both\"\\n        elif \"Bulky\" not in check and \"Heavy\" not in check:\\n            return \"Neither\"\\n        elif \"Bulky\"  in check and \"heavy\" not in check:\\n            return \"Bulky\"\\n        elif \"Heavy\"  in check and \"Bulky\" not in check:\\n            return \"Heavy\"\\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math",
                    "String",
                    "Interactive"
                ],
                "code": "```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        check=[]\\n        ans=[]\\n        if length>=10000 or width>=10000 or height>=10000 or mass>=10000 or   length*width*height>=10**9:\\n            check.append(\"Bulky\")\\n        \\n        if mass>=100:\\n            check.append(\"Heavy\")\\n        if \"Bulky\" in check and \"Heavy\" in check:\\n            return \"Both\"\\n        elif \"Bulky\" not in check and \"Heavy\" not in check:\\n            return \"Neither\"\\n        elif \"Bulky\"  in check and \"heavy\" not in check:\\n            return \"Bulky\"\\n        elif \"Heavy\"  in check and \"Bulky\" not in check:\\n            return \"Heavy\"\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4002665,
                "title": "very-basic-java-soln-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        if(length>=10000||width>=10000||height>=10000||length*height>=1000000000/width)\\n            if(mass>=100)\\n                return \"Both\";\\n            else\\n                return \"Bulky\";\\n        if(mass>=100)\\n            return \"Heavy\";\\n        else\\n            return \"Neither\";\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        if(length>=10000||width>=10000||height>=10000||length*height>=1000000000/width)\\n            if(mass>=100)\\n                return \"Both\";\\n            else\\n                return \"Bulky\";\\n        if(mass>=100)\\n            return \"Heavy\";\\n        else\\n            return \"Neither\";\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3991366,
                "title": "c-enum",
                "content": "```\\npublic class Solution {\\n    public string CategorizeBox(int length, int width, int height, int mass) {\\n        Category category = Category.Neither;\\n        var dimensions = new[] { length, width, height };\\n        if(dimensions.Max() >= 1e4 || \\n           dimensions.Aggregate(1L, (x, y) => x * y) >= 1e9)\\n          category |= Category.Bulky;\\n        if(mass >= 100)\\n          category |= Category.Heavy;\\n        return category.ToString();\\n    }\\n    enum Category\\n    {\\n      Neither,\\n      Bulky,\\n      Heavy,\\n      Both\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public string CategorizeBox(int length, int width, int height, int mass) {\\n        Category category = Category.Neither;\\n        var dimensions = new[] { length, width, height };\\n        if(dimensions.Max() >= 1e4 || \\n           dimensions.Aggregate(1L, (x, y) => x * y) >= 1e9)\\n          category |= Category.Bulky;\\n        if(mass >= 100)\\n          category |= Category.Heavy;\\n        return category.ToString();\\n    }\\n    enum Category\\n    {\\n      Neither,\\n      Bulky,\\n      Heavy,\\n      Both\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3962179,
                "title": "python-solution-using-conditional-statement-with-o-1-space-time-beats-94-35-of-users-with-python3",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\ncheck if the box is heavy and bulky,if it\\'s both return both,else if it\\'s neither return neither.if its heavy but not bulky return heavy,and if its bulky but not heavy return bulky\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n        Constant Time ==> o(1)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n        Constant Space ==> o(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        bulky = False\\n        heavy = False\\n        if length>=10**4 or width>=10**4 or height>=10**4 or mass>=10**4:\\n            bulky = True\\n        if not bulky and length*width*height>=10**9:\\n            bulky = True\\n        if mass>=100:\\n            heavy = True\\n        if bulky and heavy:\\n            return \"Both\"\\n        elif not bulky and not heavy:\\n            return \"Neither\"\\n        elif bulky and not heavy:\\n            return \"Bulky\"\\n        elif heavy and not bulky:\\n            return \"Heavy\"\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        bulky = False\\n        heavy = False\\n        if length>=10**4 or width>=10**4 or height>=10**4 or mass>=10**4:\\n            bulky = True\\n        if not bulky and length*width*height>=10**9:\\n            bulky = True\\n        if mass>=100:\\n            heavy = True\\n        if bulky and heavy:\\n            return \"Both\"\\n        elif not bulky and not heavy:\\n            return \"Neither\"\\n        elif bulky and not heavy:\\n            return \"Bulky\"\\n        elif heavy and not bulky:\\n            return \"Heavy\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3961821,
                "title": "easy-c-solution-beat-100-user-in-time-complexity",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        long long vol=length;\\n        if(vol<pow(10,9))vol=vol*width;\\n        if(vol<pow(10,9))vol=vol*height;\\n        bool cond1=(length>=pow(10,4) || width>=pow(10,4) || height>=pow(10,4) || vol>=pow(10,9));\\n        bool cond2=(mass>=100);\\n        if(cond1 && cond2)return \"Both\";\\n        if(cond1==true && cond2==false)return \"Bulky\";\\n        if(cond1==false && cond2==true)return \"Heavy\";\\n        return \"Neither\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        long long vol=length;\\n        if(vol<pow(10,9))vol=vol*width;\\n        if(vol<pow(10,9))vol=vol*height;\\n        bool cond1=(length>=pow(10,4) || width>=pow(10,4) || height>=pow(10,4) || vol>=pow(10,9));\\n        bool cond2=(mass>=100);\\n        if(cond1 && cond2)return \"Both\";\\n        if(cond1==true && cond2==false)return \"Bulky\";\\n        if(cond1==false && cond2==true)return \"Heavy\";\\n        return \"Neither\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3953378,
                "title": "swift-switch-case-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    func categorizeBox(_ length: Int, _ width: Int, _ height: Int, _ mass: Int) -> String {\\n\\n        let maxVolume = Int(NSDecimalNumber(decimal: pow(10, 9)))\\n        let maxDimensions = Int(NSDecimalNumber(decimal: pow(10, 4)))\\n        let category = (bulky: length * width * height >= maxVolume || length >= maxDimensions || width >= maxDimensions || height >= maxDimensions, heavy: mass >= 100)\\n\\n        switch true {\\n        case category.heavy && category.bulky:\\n            return \"Both\"\\n        case category.heavy:\\n            return \"Heavy\"\\n        case category.bulky:\\n            return \"Bulky\"\\n        default:\\n            return \"Neither\"\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    func categorizeBox(_ length: Int, _ width: Int, _ height: Int, _ mass: Int) -> String {\\n\\n        let maxVolume = Int(NSDecimalNumber(decimal: pow(10, 9)))\\n        let maxDimensions = Int(NSDecimalNumber(decimal: pow(10, 4)))\\n        let category = (bulky: length * width * height >= maxVolume || length >= maxDimensions || width >= maxDimensions || height >= maxDimensions, heavy: mass >= 100)\\n\\n        switch true {\\n        case category.heavy && category.bulky:\\n            return \"Both\"\\n        case category.heavy:\\n            return \"Heavy\"\\n        case category.bulky:\\n            return \"Bulky\"\\n        default:\\n            return \"Neither\"\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3945340,
                "title": "c-switch-expression",
                "content": "```\\npublic class Solution {\\n    public string CategorizeBox(int length, int width, int height, int mass)\\n    {\\n        bool b = new[] { length, width, height, mass }.Max() >= 1e4 || 1L * length * width * height >= 1e9;\\n        bool h = mass >= 1e2;\\n\\n        return (b, h) switch\\n        {\\n            (true, true) => \"Both\",\\n            (true, _) => \"Bulky\",\\n            (_, true) => \"Heavy\",\\n            _ => \"Neither\"\\n        };\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public string CategorizeBox(int length, int width, int height, int mass)\\n    {\\n        bool b = new[] { length, width, height, mass }.Max() >= 1e4 || 1L * length * width * height >= 1e9;\\n        bool h = mass >= 1e2;\\n\\n        return (b, h) switch\\n        {\\n            (true, true) => \"Both\",\\n            (true, _) => \"Bulky\",\\n            (_, true) => \"Heavy\",\\n            _ => \"Neither\"\\n        };\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3931529,
                "title": "easy-to-understand-solution-swift",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    func categorizeBox(_ length: Int, _ width: Int, _ height: Int, _ mass: Int) -> String {\\n        let volume = length * width * height\\n\\n        let bulky = max(length, width, height) >= 10_000 || volume >= 1_000_000_000\\n        let heavy = mass >= 100\\n    \\n        switch (bulky, heavy) {\\n        case (true, true):\\n            return \"Both\"\\n        case (true, false):\\n            return \"Bulky\"\\n        case (false, true):\\n            return \"Heavy\"\\n        default:\\n            return \"Neither\"\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func categorizeBox(_ length: Int, _ width: Int, _ height: Int, _ mass: Int) -> String {\\n        let volume = length * width * height\\n\\n        let bulky = max(length, width, height) >= 10_000 || volume >= 1_000_000_000\\n        let heavy = mass >= 100\\n    \\n        switch (bulky, heavy) {\\n        case (true, true):\\n            return \"Both\"\\n        case (true, false):\\n            return \"Bulky\"\\n        case (false, true):\\n            return \"Heavy\"\\n        default:\\n            return \"Neither\"\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3931057,
                "title": "easy-to-understand-boolean-thank-me-later",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(1) \"0ms TIME SAVING\"\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->Beat 80% of java user\\n\\n# Code\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        String answer;\\n        Boolean bulk = (((long)length*width*height >= 1000000000) || (length >= 10000) || (width >= 10000) || (height >= 10000));\\n\\n        Boolean heavy = (mass >= 100);\\n\\n        if(bulk && heavy)\\n        answer = \"Both\";\\n\\n        else if(bulk)\\n        answer = \"Bulky\";\\n\\n        else if(heavy)\\n        answer = \"Heavy\";\\n\\n        else\\n        answer = \"Neither\";\\n\\n        return answer; \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        String answer;\\n        Boolean bulk = (((long)length*width*height >= 1000000000) || (length >= 10000) || (width >= 10000) || (height >= 10000));\\n\\n        Boolean heavy = (mass >= 100);\\n\\n        if(bulk && heavy)\\n        answer = \"Both\";\\n\\n        else if(bulk)\\n        answer = \"Bulky\";\\n\\n        else if(heavy)\\n        answer = \"Heavy\";\\n\\n        else\\n        answer = \"Neither\";\\n\\n        return answer; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3913129,
                "title": "java-simple-solution-for-begginners",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        int greatestDimenstion = length > width ? length : width;\\n        greatestDimenstion = greatestDimenstion > height ? greatestDimenstion : height;\\n        \\n        boolean bulky = false;\\n        boolean heavy = false;\\n        \\n        if(greatestDimenstion >= 10000){\\n            bulky = true;\\n        }\\n        \\n        if(mass >= 100){\\n            heavy = true;\\n        }\\n        \\n        long volume = (long) length * (long) height;\\n        \\n        if(volume * (long) width >= 1000000000){\\n            bulky = true;\\n        }\\n        \\n        if(bulky && heavy){\\n            return \"Both\";\\n        }else if(bulky && !heavy){\\n            return \"Bulky\";\\n        }else if(!bulky && heavy){\\n            return \"Heavy\";\\n        }\\n        \\n        return \"Neither\";\\n        \\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        int greatestDimenstion = length > width ? length : width;\\n        greatestDimenstion = greatestDimenstion > height ? greatestDimenstion : height;\\n        \\n        boolean bulky = false;\\n        boolean heavy = false;\\n        \\n        if(greatestDimenstion >= 10000){\\n            bulky = true;\\n        }\\n        \\n        if(mass >= 100){\\n            heavy = true;\\n        }\\n        \\n        long volume = (long) length * (long) height;\\n        \\n        if(volume * (long) width >= 1000000000){\\n            bulky = true;\\n        }\\n        \\n        if(bulky && heavy){\\n            return \"Both\";\\n        }else if(bulky && !heavy){\\n            return \"Bulky\";\\n        }else if(!bulky && heavy){\\n            return \"Heavy\";\\n        }\\n        \\n        return \"Neither\";\\n        \\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3888475,
                "title": "java-beats-100-easy-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        long volume = (long)length*width*height;\\n        boolean bulky = false;\\n        boolean heavy = false;\\n        if(volume >= 1000000000 || length >= 10000 || width >= 10000 || height >= 10000)\\n            bulky = true;\\n        if(mass >= 100)\\n            heavy = true;\\n        if(bulky && heavy)\\n            return \"Both\";\\n        if(!bulky && !heavy)\\n            return \"Neither\";\\n        if(bulky && !heavy)\\n            return \"Bulky\";\\n        return \"Heavy\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        long volume = (long)length*width*height;\\n        boolean bulky = false;\\n        boolean heavy = false;\\n        if(volume >= 1000000000 || length >= 10000 || width >= 10000 || height >= 10000)\\n            bulky = true;\\n        if(mass >= 100)\\n            heavy = true;\\n        if(bulky && heavy)\\n            return \"Both\";\\n        if(!bulky && !heavy)\\n            return \"Neither\";\\n        if(bulky && !heavy)\\n            return \"Bulky\";\\n        return \"Heavy\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3885379,
                "title": "categoriza-box",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        category=\\'\\'\\n        if length>=10**4 or width>=10**4 or height>=10**4 or mass>=10**4 or length*width*height>=10**9:\\n            category=\"Bulky\"\\n        if mass>=100:\\n            if category==\"Bulky\":\\n                return \"Both\"\\n            else:\\n                return \"Heavy\"\\n        return \"Neither\" if len(category)==0 else category\\n                \\n```",
                "solutionTags": [
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        category=\\'\\'\\n        if length>=10**4 or width>=10**4 or height>=10**4 or mass>=10**4 or length*width*height>=10**9:\\n            category=\"Bulky\"\\n        if mass>=100:\\n            if category==\"Bulky\":\\n                return \"Both\"\\n            else:\\n                return \"Heavy\"\\n        return \"Neither\" if len(category)==0 else category\\n                \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3882349,
                "title": "java-0ms-beats-100-00",
                "content": "\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n\\n        boolean bulky = false;\\n        boolean heavy = false;\\n\\n        // check for bulky by volume\\n        if ((long)length * (long)width * (long)height >= 1_000_000_000L) {\\n            bulky = true; \\n        }\\n        // check for bulky by dimension\\n        else {\\n            if (Math.max(length, Math.max(width, height)) >= 10_000) {\\n                bulky = true;\\n            }\\n        }\\n\\n        // check for heavy by mass\\n        if (mass >= 100) {\\n            heavy = true;\\n        }\\n\\n        // finalize category designation\\n        String category = \"Neither\";  // default value\\n        if (bulky && heavy) {\\n            category = \"Both\";\\n        } else if (bulky && !heavy) {\\n            category = \"Bulky\";\\n        } else if (!bulky && heavy) {\\n            category = \"Heavy\";\\n        }\\n        // else (!bulky && !heavy) { category = \"Neither\"; }  // handled by default value of `category`\\n\\n        return category;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n\\n        boolean bulky = false;\\n        boolean heavy = false;\\n\\n        // check for bulky by volume\\n        if ((long)length * (long)width * (long)height >= 1_000_000_000L) {\\n            bulky = true; \\n        }\\n        // check for bulky by dimension\\n        else {\\n            if (Math.max(length, Math.max(width, height)) >= 10_000) {\\n                bulky = true;\\n            }\\n        }\\n\\n        // check for heavy by mass\\n        if (mass >= 100) {\\n            heavy = true;\\n        }\\n\\n        // finalize category designation\\n        String category = \"Neither\";  // default value\\n        if (bulky && heavy) {\\n            category = \"Both\";\\n        } else if (bulky && !heavy) {\\n            category = \"Bulky\";\\n        } else if (!bulky && heavy) {\\n            category = \"Heavy\";\\n        }\\n        // else (!bulky && !heavy) { category = \"Neither\"; }  // handled by default value of `category`\\n\\n        return category;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3880171,
                "title": "java-beats-100-clean-oo",
                "content": "\\n\\n# Code\\n```\\npublic class Box {\\n    private final long length;\\n    private final long width;\\n    private final long height;\\n    private final int mass;\\n\\n    public Box(int length, int width, int height, int mass) {\\n        this.length = length;\\n        this.width = width;\\n        this.height = height;\\n        this.mass = mass;\\n    }\\n\\n    public boolean isBulky() {\\n        return isAnyDimensionGreaterThan1e4()\\n                || isVolumeGreaterThan1e9();\\n    }\\n\\n    public boolean isHeavy() {\\n        return mass >= 100;\\n    }\\n\\n    private boolean isAnyDimensionGreaterThan1e4() {\\n        return length >= 10000\\n                || width >= 10000\\n                || height >= 10000;\\n    }\\n\\n    private boolean isVolumeGreaterThan1e9() {\\n        return length*width*height >= 1000000000;\\n    }\\n}\\n\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        String category = \"None\";\\n        Box box = new Box(length, width, height, mass);\\n\\n        if (box.isBulky() && box.isHeavy()) {\\n            category = \"Both\";\\n        }\\n        if (box.isBulky() && !box.isHeavy()) {\\n            category = \"Bulky\";\\n        }\\n        if (!box.isBulky() && box.isHeavy()) {\\n            category = \"Heavy\";\\n        }\\n        if (!box.isBulky() && !box.isHeavy()) {\\n            category = \"Neither\";\\n        }\\n        return category;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic class Box {\\n    private final long length;\\n    private final long width;\\n    private final long height;\\n    private final int mass;\\n\\n    public Box(int length, int width, int height, int mass) {\\n        this.length = length;\\n        this.width = width;\\n        this.height = height;\\n        this.mass = mass;\\n    }\\n\\n    public boolean isBulky() {\\n        return isAnyDimensionGreaterThan1e4()\\n                || isVolumeGreaterThan1e9();\\n    }\\n\\n    public boolean isHeavy() {\\n        return mass >= 100;\\n    }\\n\\n    private boolean isAnyDimensionGreaterThan1e4() {\\n        return length >= 10000\\n                || width >= 10000\\n                || height >= 10000;\\n    }\\n\\n    private boolean isVolumeGreaterThan1e9() {\\n        return length*width*height >= 1000000000;\\n    }\\n}\\n\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        String category = \"None\";\\n        Box box = new Box(length, width, height, mass);\\n\\n        if (box.isBulky() && box.isHeavy()) {\\n            category = \"Both\";\\n        }\\n        if (box.isBulky() && !box.isHeavy()) {\\n            category = \"Bulky\";\\n        }\\n        if (!box.isBulky() && box.isHeavy()) {\\n            category = \"Heavy\";\\n        }\\n        if (!box.isBulky() && !box.isHeavy()) {\\n            category = \"Neither\";\\n        }\\n        return category;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3868277,
                "title": "easiest-solution-for-this-question-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        String returnResult = \" \";\\n        boolean bulky = false;\\n        boolean heavy = false;\\n        if(length >= 10000 || width >= 10000 || height >= 10000 || (long)length * width * height >= 1000000000) {\\n            bulky = true;\\n        } \\n        if(mass >= 100) {\\n            heavy = true;\\n        }\\n\\n        if(bulky == true) {\\n            returnResult = \"Bulky\";\\n        }\\n        if(heavy == true) {\\n            returnResult = \"Heavy\";\\n        }\\n        if(bulky == true && heavy == true) {\\n            returnResult = \"Both\";\\n        }\\n        if(bulky == false && heavy == false) {\\n            returnResult = \"Neither\";\\n        }\\n        return returnResult;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        String returnResult = \" \";\\n        boolean bulky = false;\\n        boolean heavy = false;\\n        if(length >= 10000 || width >= 10000 || height >= 10000 || (long)length * width * height >= 1000000000) {\\n            bulky = true;\\n        } \\n        if(mass >= 100) {\\n            heavy = true;\\n        }\\n\\n        if(bulky == true) {\\n            returnResult = \"Bulky\";\\n        }\\n        if(heavy == true) {\\n            returnResult = \"Heavy\";\\n        }\\n        if(bulky == true && heavy == true) {\\n            returnResult = \"Both\";\\n        }\\n        if(bulky == false && heavy == false) {\\n            returnResult = \"Neither\";\\n        }\\n        return returnResult;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3862993,
                "title": "java-0-ms-clear-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n- The provided solution tackles the problem of categorizing a box based on its dimensions and mass. The code iterates through each dimension and checks whether the box is \"Bulky\" or \"Heavy\" based on the given criteria. It then uses the boolean variables bulky and heavy to track these conditions.\\n\\n- The volume of the box is calculated by multiplying its dimensions. If the mass of the box is greater than or equal to 100, the heavy boolean is set to true. If any of the dimensions is greater than or equal to 10,000, or if the calculated volume is greater than or equal to 1,000,000,000, the bulky boolean is set to true.\\n\\n- Finally, the code checks the values of bulky and heavy to determine the appropriate category for the box (\"Heavy,\" \"Bulky,\" both, or neither), and returns the corresponding string.\\n\\n- This solution efficiently solves the problem by performing a fixed number of comparisons and calculations, making it suitable for the given constraints.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of this solution is O(1). This is because the code performs a fixed number of comparisons and calculations regardless of the input values. The conditions for checking \"Heavy\" and \"Bulky\" are straightforward and don\\'t involve iterations or recursion.\\n\\n- Space complexity:\\nThe space complexity of this solution is O(1) as well. The code uses a constant amount of memory to store the boolean variables bulky and heavy, as well as the volume variable. These variables don\\'t scale with the input, so the space complexity remains constant.\\n\\n# Code\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        boolean bulky = false;\\n        boolean heavy = false;\\n        long volume = (long) length * width * height;\\n        \\n        if (mass >= 100)\\n            heavy = true;\\n        \\n        if (length >= 10000 || width >= 10000 || height >= 10000 || volume >= 1000000000)\\n            bulky = true;\\n        \\n        if (!bulky && !heavy) return \"Neither\";\\n        else if (bulky && !heavy) return \"Bulky\";\\n        else if (!bulky && heavy) return \"Heavy\";\\n        else return \"Both\";\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        boolean bulky = false;\\n        boolean heavy = false;\\n        long volume = (long) length * width * height;\\n        \\n        if (mass >= 100)\\n            heavy = true;\\n        \\n        if (length >= 10000 || width >= 10000 || height >= 10000 || volume >= 1000000000)\\n            bulky = true;\\n        \\n        if (!bulky && !heavy) return \"Neither\";\\n        else if (bulky && !heavy) return \"Bulky\";\\n        else if (!bulky && heavy) return \"Heavy\";\\n        else return \"Both\";\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3851953,
                "title": "if-logic-vs-hash-table-answer",
                "content": "## If logic\\n```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        bulky = any([length >= 10000, width >= 10000, height >= 10000,\\n                    length * width * height >= 1000000000])\\n        heavy = mass >= 100\\n        if bulky and heavy:\\n            return \"Both\"\\n        elif bulky:\\n            return \"Bulky\"\\n        elif heavy:\\n            return \"Heavy\"\\n        return \"Neither\"\\n```\\n\\n## Hash table answer\\n```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        bulky = any([length >= 10000, width >= 10000, height >= 10000,\\n                    length * width * height >= 1000000000]) * 2\\n        heavy = mass >= 100\\n        result = {0: \"Neither\", 1: \"Heavy\", 2: \"Bulky\", 3: \"Both\"}\\n        return result[bulky + heavy]\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        bulky = any([length >= 10000, width >= 10000, height >= 10000,\\n                    length * width * height >= 1000000000])\\n        heavy = mass >= 100\\n        if bulky and heavy:\\n            return \"Both\"\\n        elif bulky:\\n            return \"Bulky\"\\n        elif heavy:\\n            return \"Heavy\"\\n        return \"Neither\"\\n```\n```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        bulky = any([length >= 10000, width >= 10000, height >= 10000,\\n                    length * width * height >= 1000000000]) * 2\\n        heavy = mass >= 100\\n        result = {0: \"Neither\", 1: \"Heavy\", 2: \"Bulky\", 3: \"Both\"}\\n        return result[bulky + heavy]\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3844073,
                "title": "simple-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        int bul=0;\\n        int hea=0;\\n        if(length>=10000 || width>=10000 ||height>=10000 || (long)length*(long)width*(long)height>=(long)Math.pow(10,9))\\n            bul=1;\\n        if(mass>=100)\\n            hea=1;\\n        if(bul==1 && hea==1)\\n            return \"Both\";\\n        else if(bul==1 && hea==0)\\n            return \"Bulky\";\\n        else if(bul==0 && hea==1)\\n            return \"Heavy\";\\n        return \"Neither\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        int bul=0;\\n        int hea=0;\\n        if(length>=10000 || width>=10000 ||height>=10000 || (long)length*(long)width*(long)height>=(long)Math.pow(10,9))\\n            bul=1;\\n        if(mass>=100)\\n            hea=1;\\n        if(bul==1 && hea==1)\\n            return \"Both\";\\n        else if(bul==1 && hea==0)\\n            return \"Bulky\";\\n        else if(bul==0 && hea==1)\\n            return \"Heavy\";\\n        return \"Neither\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3826783,
                "title": "beats-100-with-0ms-runtime",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) \\n    {\\n        string help1 = \"\";\\n        string help2 = \"\";\\n        string ans = \"\";\\n        long long volume = (long long)(length)*(long long)(width)*(long long)(height);\\n\\n        if(length >= 10000 || width >= 10000 || height >= 10000 || (volume >= 1000000000))\\n            help1 = \"Bulky\";\\n\\n        if(mass >= 100)\\n            help2 = \"Heavy\";\\n\\n        if(help1 == \"Bulky\" && help2 == \"Heavy\")\\n            ans = \"Both\";\\n        else if(help1 != \"Bulky\" && help2 != \"Heavy\")\\n            ans = \"Neither\";\\n        else if(help1 == \"Bulky\" && help2 != \"Heavy\")\\n            ans = \"Bulky\";\\n        else if(help1 != \"Bulky\" && help2 == \"Heavy\")\\n            ans = \"Heavy\";\\n\\n        return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) \\n    {\\n        string help1 = \"\";\\n        string help2 = \"\";\\n        string ans = \"\";\\n        long long volume = (long long)(length)*(long long)(width)*(long long)(height);\\n\\n        if(length >= 10000 || width >= 10000 || height >= 10000 || (volume >= 1000000000))\\n            help1 = \"Bulky\";\\n\\n        if(mass >= 100)\\n            help2 = \"Heavy\";\\n\\n        if(help1 == \"Bulky\" && help2 == \"Heavy\")\\n            ans = \"Both\";\\n        else if(help1 != \"Bulky\" && help2 != \"Heavy\")\\n            ans = \"Neither\";\\n        else if(help1 == \"Bulky\" && help2 != \"Heavy\")\\n            ans = \"Bulky\";\\n        else if(help1 != \"Bulky\" && help2 == \"Heavy\")\\n            ans = \"Heavy\";\\n\\n        return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3813460,
                "title": "categorize-box-according-to-criteria",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        long a = length*width;\\n        long vol = a*height;\\n        System.out.print(vol);\\n        String str = new String();\\n        String str1 = new String();\\n        if(length>=Math.pow(10,4)||width>=Math.pow(10,4)||height>=Math.pow(10,4)||\\n        mass>=Math.pow(10,4)||vol>=Math.pow(10,9))\\n        str = \"Bulky\";\\n        if(mass>=100)\\n        str1=\"Heavy\";\\n        if(str.equals(\"Bulky\")&&str1.equals(\"Heavy\"))\\n        return \"Both\";\\n        else if(str.equals(\"Bulky\")==false&&str1.equals(\"Heavy\")==false)\\n        return \"Neither\";\\n        else if(str.equals(\"Bulky\")&&str1.equals(\"Heavy\")==false)\\n        return str;\\n        else\\n        return str1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        long a = length*width;\\n        long vol = a*height;\\n        System.out.print(vol);\\n        String str = new String();\\n        String str1 = new String();\\n        if(length>=Math.pow(10,4)||width>=Math.pow(10,4)||height>=Math.pow(10,4)||\\n        mass>=Math.pow(10,4)||vol>=Math.pow(10,9))\\n        str = \"Bulky\";\\n        if(mass>=100)\\n        str1=\"Heavy\";\\n        if(str.equals(\"Bulky\")&&str1.equals(\"Heavy\"))\\n        return \"Both\";\\n        else if(str.equals(\"Bulky\")==false&&str1.equals(\"Heavy\")==false)\\n        return \"Neither\";\\n        else if(str.equals(\"Bulky\")&&str1.equals(\"Heavy\")==false)\\n        return str;\\n        else\\n        return str1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3809776,
                "title": "simple-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(long long l , long long w , long long h , long long m){\\n        bool bulk=false , mass=false;\\n        long long vol = l*w*h;\\n        if(l>=1e4 || w>=1e4 || h>=1e4 || vol>=1e9){\\n            bulk=true;\\n        }\\n        if(m>=1e2){\\n            mass=true;\\n        }\\n        if(bulk && mass){\\n            return \"Both\";\\n        }\\n        else if(!bulk && !mass){\\n            return \"Neither\";\\n        }\\n        else if(bulk){\\n            return \"Bulky\";\\n        }\\n        return \"Heavy\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(long long l , long long w , long long h , long long m){\\n        bool bulk=false , mass=false;\\n        long long vol = l*w*h;\\n        if(l>=1e4 || w>=1e4 || h>=1e4 || vol>=1e9){\\n            bulk=true;\\n        }\\n        if(m>=1e2){\\n            mass=true;\\n        }\\n        if(bulk && mass){\\n            return \"Both\";\\n        }\\n        else if(!bulk && !mass){\\n            return \"Neither\";\\n        }\\n        else if(bulk){\\n            return \"Bulky\";\\n        }\\n        return \"Heavy\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3786063,
                "title": "0-ms-easy-java-solution",
                "content": "\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        long d=(long)Math.pow(10,4);\\n        long v=(long)Math.pow(10,9);\\n        \\n        int fb=0,h=0;\\n       if(length>=d || width>=d || height>=d || mass>=d || (long)length*width*height>=v) fb=1;\\n       if(mass>=100)   h=1;\\n       if(fb==1 && h==1)return \"Both\";\\n       if(fb==0 && h==0)return  \"Neither\";\\n       if(fb==1 && h==0)return \"Bulky\";\\n       return \"Heavy\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        long d=(long)Math.pow(10,4);\\n        long v=(long)Math.pow(10,9);\\n        \\n        int fb=0,h=0;\\n       if(length>=d || width>=d || height>=d || mass>=d || (long)length*width*height>=v) fb=1;\\n       if(mass>=100)   h=1;\\n       if(fb==1 && h==1)return \"Both\";\\n       if(fb==0 && h==0)return  \"Neither\";\\n       if(fb==1 && h==0)return \"Bulky\";\\n       return \"Heavy\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3783576,
                "title": "simple-approach-python3",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        isBulky = False\\n        isHeavy = False\\n\\n        if length>= pow(10,4) or width>=pow(10,4) or height >=pow(10,4) or length*width*height >=pow(10,9):\\n            isBulky = True\\n        if mass>=100:\\n            isHeavy = True\\n\\n        if isBulky and isHeavy:\\n            return \"Both\"\\n        elif isBulky:\\n            return \"Bulky\"\\n        elif isHeavy:\\n            return \"Heavy\"\\n        else:\\n            return \"Neither\"\\n\\n\\n\\n            \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        isBulky = False\\n        isHeavy = False\\n\\n        if length>= pow(10,4) or width>=pow(10,4) or height >=pow(10,4) or length*width*height >=pow(10,9):\\n            isBulky = True\\n        if mass>=100:\\n            isHeavy = True\\n\\n        if isBulky and isHeavy:\\n            return \"Both\"\\n        elif isBulky:\\n            return \"Bulky\"\\n        elif isHeavy:\\n            return \"Heavy\"\\n        else:\\n            return \"Neither\"\\n\\n\\n\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3783221,
                "title": "python-if-and-else",
                "content": "Simple IF and ELSE\\n\\n# Code\\n```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        if length>=pow(10,4) or width>=pow(10,4) or height>=pow(10,4) or mass>=pow(10,4) or length*width*height >=pow(10,9):\\n            if mass>=100:\\n                return(\"Both\")\\n            else:\\n                return(\"Bulky\")\\n        else:\\n            if mass>=100:\\n                return(\"Heavy\")\\n            else:\\n                return(\"Neither\")\\n        \\n```",
                "solutionTags": [
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        if length>=pow(10,4) or width>=pow(10,4) or height>=pow(10,4) or mass>=pow(10,4) or length*width*height >=pow(10,9):\\n            if mass>=100:\\n                return(\"Both\")\\n            else:\\n                return(\"Bulky\")\\n        else:\\n            if mass>=100:\\n                return(\"Heavy\")\\n            else:\\n                return(\"Neither\")\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3776810,
                "title": "easiest-c-sol",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        bool bulky=false,heavy=false;\\n        if((length/pow(10,4))>=1 || (width/pow(10,4))>=1 || (height/pow(10,4))>=1  || (((long long)length*(long long)width*(long long)height)/pow(10,9)>=1)){\\n            bulky=true;\\n        }\\n\\n        if(mass>=100) heavy=true;\\n\\n        if(bulky && heavy) return \"Both\";\\n        else if(!bulky && !heavy) return \"Neither\";\\n        else if(bulky && !heavy) return \"Bulky\";\\n        else return \"Heavy\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        bool bulky=false,heavy=false;\\n        if((length/pow(10,4))>=1 || (width/pow(10,4))>=1 || (height/pow(10,4))>=1  || (((long long)length*(long long)width*(long long)height)/pow(10,9)>=1)){\\n            bulky=true;\\n        }\\n\\n        if(mass>=100) heavy=true;\\n\\n        if(bulky && heavy) return \"Both\";\\n        else if(!bulky && !heavy) return \"Neither\";\\n        else if(bulky && !heavy) return \"Bulky\";\\n        else return \"Heavy\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3749662,
                "title": "c-simple-and-easy-approach",
                "content": "# Intuition\\nWe have to categorize box according to the given criteria:\\n\\u2022 The box is \"Bulky\" if:\\n    Any of the dimensions of the box is greater or equal to 10^4.\\n    Or, the volume of the box is greater or equal to 10^9.\\n\\u2022 If the mass of the box is greater or equal to 100, it is \"Heavy\".\\n\\u2022 If the box is both \"Bulky\" and \"Heavy\", then its category is \"Both\".\\n\\u2022 If the box is neither \"Bulky\" nor \"Heavy\", then its category is \"Neither\".\\n\\u2022 If the box is \"Bulky\" but not \"Heavy\", then its category is \"Bulky\".\\n\\u2022 If the box is \"Heavy\" but not \"Bulky\", then its category is \"Heavy\".\\n\\n# Approach\\nWe initialize the parameters bulky and heavy to false initially, we then check if the length, width or height is greater than or equal to pow(10,4) or if the volume is greater than or equal to pow(10,9) we set the parameter bulky to true, then we check if mass is greater than or equal to 100 we set the parameter heavy to true, now if the box if both heavy and bulky we return \"Both\", otherwise if the box is only bulky we return \"Bulky\" otherwise if box is only heavy we return \"Heavy\" otherwise if box if neither heavy nor bulky we return \"Neither\".\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        bool bulky = false;\\n        bool heavy = false;\\n        if(length>=pow(10,4)||width>=pow(10,4)||height>=pow(10,4)||long(length*width)*height>=pow(10,9))\\n        {\\n            bulky = true;\\n        }\\n        if(mass>=100)\\n        {\\n            heavy = true;\\n        }\\n        if(bulky&&heavy)\\n        {\\n            return \"Both\";\\n        }\\n        else if(bulky)\\n        {\\n            return \"Bulky\";\\n        }\\n        else if(heavy)\\n        {\\n            return \"Heavy\";\\n        }\\n        else\\n        {\\n            return \"Neither\";\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        bool bulky = false;\\n        bool heavy = false;\\n        if(length>=pow(10,4)||width>=pow(10,4)||height>=pow(10,4)||long(length*width)*height>=pow(10,9))\\n        {\\n            bulky = true;\\n        }\\n        if(mass>=100)\\n        {\\n            heavy = true;\\n        }\\n        if(bulky&&heavy)\\n        {\\n            return \"Both\";\\n        }\\n        else if(bulky)\\n        {\\n            return \"Bulky\";\\n        }\\n        else if(heavy)\\n        {\\n            return \"Heavy\";\\n        }\\n        else\\n        {\\n            return \"Neither\";\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3734397,
                "title": "simple-javascript-solution",
                "content": "\\n# Complexity\\n- Time complexity: $$O(logn)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(logn)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} length\\n * @param {number} width\\n * @param {number} height\\n * @param {number} mass\\n * @return {string}\\n */\\nvar categorizeBox = function(length, width, height, mass) {\\n    const volume = length * width * height;\\n    let maxVal = Math.max(length, width, height);\\n    const isBulky =  maxVal >= Math.pow(10, 4) || volume >= Math.pow(10, 9);\\n    const isHeavy = mass >= 100;\\n    if(isBulky && isHeavy){\\n        return \"Both\"\\n    } else if(!isBulky && !isHeavy){\\n        return \"Neither\"\\n    } else if(isBulky){\\n        return \"Bulky\"\\n    } else{\\n        return \"Heavy\"\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} length\\n * @param {number} width\\n * @param {number} height\\n * @param {number} mass\\n * @return {string}\\n */\\nvar categorizeBox = function(length, width, height, mass) {\\n    const volume = length * width * height;\\n    let maxVal = Math.max(length, width, height);\\n    const isBulky =  maxVal >= Math.pow(10, 4) || volume >= Math.pow(10, 9);\\n    const isHeavy = mass >= 100;\\n    if(isBulky && isHeavy){\\n        return \"Both\"\\n    } else if(!isBulky && !isHeavy){\\n        return \"Neither\"\\n    } else if(isBulky){\\n        return \"Bulky\"\\n    } else{\\n        return \"Heavy\"\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3728694,
                "title": "0-ms-easy-code-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        boolean isHeavy = false, isBulky = false;\\n        if(mass >= 100) isHeavy = true;\\n        if(length >= Math.pow(10,4) || width >= Math.pow(10,4) || height >= Math.pow(10,4) || \\n        (double)length*width*height >= Math.pow(10,9)) isBulky = true;\\n\\n        if(isHeavy){\\n            if(isBulky) return \"Both\";\\n            return \"Heavy\";\\n        }\\n            \\n        if(isBulky) return \"Bulky\";\\n        return \"Neither\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        boolean isHeavy = false, isBulky = false;\\n        if(mass >= 100) isHeavy = true;\\n        if(length >= Math.pow(10,4) || width >= Math.pow(10,4) || height >= Math.pow(10,4) || \\n        (double)length*width*height >= Math.pow(10,9)) isBulky = true;\\n\\n        if(isHeavy){\\n            if(isBulky) return \"Both\";\\n            return \"Heavy\";\\n        }\\n            \\n        if(isBulky) return \"Bulky\";\\n        return \"Neither\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3727408,
                "title": "python-easy-to-understand-simple",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        x = \"init\"\\n        category = \"in\"\\n        volume = length * width * height\\n        condition = (length >= 10**4 or width >= 10**4 or height >= 10**4 or mass >= 10**4) or volume >= 10 **9\\n        if condition:\\n            x = \"Bulky\"\\n        if mass >= 100 and x == \"Bulky\":\\n            category = \"Both\"\\n        if not condition and mass < 100:\\n            category = \"Neither\"\\n        if mass < 100 and x == \"Bulky\":\\n            category = \"Bulky\"\\n        if mass >= 100 and x != \"Bulky\":\\n            category = \"Heavy\"\\n        return category\\n        \\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        x = \"init\"\\n        category = \"in\"\\n        volume = length * width * height\\n        condition = (length >= 10**4 or width >= 10**4 or height >= 10**4 or mass >= 10**4) or volume >= 10 **9\\n        if condition:\\n            x = \"Bulky\"\\n        if mass >= 100 and x == \"Bulky\":\\n            category = \"Both\"\\n        if not condition and mass < 100:\\n            category = \"Neither\"\\n        if mass < 100 and x == \"Bulky\":\\n            category = \"Bulky\"\\n        if mass >= 100 and x != \"Bulky\":\\n            category = \"Heavy\"\\n        return category\\n        \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3713760,
                "title": "python-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        B= length>=10000 or width>=10000 or height>=10000 or mass>=10000 or length*width*height>=10**9\\n        H= mass>=100\\n        if B and H:\\n            return \"Both\"\\n        elif not (B or H):\\n            return \"Neither\"\\n        elif B and not H:\\n            return \"Bulky\"\\n        elif H and not B:\\n            return \"Heavy\"\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        B= length>=10000 or width>=10000 or height>=10000 or mass>=10000 or length*width*height>=10**9\\n        H= mass>=100\\n        if B and H:\\n            return \"Both\"\\n        elif not (B or H):\\n            return \"Neither\"\\n        elif B and not H:\\n            return \"Bulky\"\\n        elif H and not B:\\n            return \"Heavy\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3712084,
                "title": "simple-condition-check",
                "content": "# Intuition\\nSimple condition check\\n\\n# Approach\\nSimple condition check\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution(object):\\n    def categorizeBox(self, length, width, height, mass):\\n        \"\"\"\\n        :type length: int\\n        :type width: int\\n        :type height: int\\n        :type mass: int\\n        :rtype: str\\n        \"\"\"\\n\\n        type = \"\"\\n        type1 = \"\"\\n        type2 = \"\"\\n\\n        if length >= 10000 or width >= 10000 or height >= 10000:\\n            type1 = \"Bulky\"\\n        elif (length * width * height) >= 1000000000:\\n            type1 = \"Bulky\"\\n        else:\\n            print(\"Neither\")\\n\\n        if mass >= 100:\\n            type2 = \"Heavy\"\\n        else:\\n            type2 = \"Neither\"\\n\\n        print (type1,type2)\\n\\n        if type1 is \"Bulky\" and type2 is \"Heavy\":\\n            type = \"Both\"\\n        elif type1 is not \"Bulky\" and type2 is not \"Heavy\":\\n            type = \"Neither\"\\n        elif type1 is \"Bulky\" and type2 is not \"Heavy\":\\n            type = \"Bulky\"\\n        elif type1 is not \"Bulky\" and type2 is \"Heavy\":\\n            type = \"Heavy\"\\n        else:\\n            print \"Wrong input\"\\n\\n        return type\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def categorizeBox(self, length, width, height, mass):\\n        \"\"\"\\n        :type length: int\\n        :type width: int\\n        :type height: int\\n        :type mass: int\\n        :rtype: str\\n        \"\"\"\\n\\n        type = \"\"\\n        type1 = \"\"\\n        type2 = \"\"\\n\\n        if length >= 10000 or width >= 10000 or height >= 10000:\\n            type1 = \"Bulky\"\\n        elif (length * width * height) >= 1000000000:\\n            type1 = \"Bulky\"\\n        else:\\n            print(\"Neither\")\\n\\n        if mass >= 100:\\n            type2 = \"Heavy\"\\n        else:\\n            type2 = \"Neither\"\\n\\n        print (type1,type2)\\n\\n        if type1 is \"Bulky\" and type2 is \"Heavy\":\\n            type = \"Both\"\\n        elif type1 is not \"Bulky\" and type2 is not \"Heavy\":\\n            type = \"Neither\"\\n        elif type1 is \"Bulky\" and type2 is not \"Heavy\":\\n            type = \"Bulky\"\\n        elif type1 is not \"Bulky\" and type2 is \"Heavy\":\\n            type = \"Heavy\"\\n        else:\\n            print \"Wrong input\"\\n\\n        return type\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3712017,
                "title": "straightforward",
                "content": "# Intuition\\n\\nStraightforward.\\n\\nAdditional care is given for integer overflow.\\n\\n# Code\\n```\\nfunc categorizeBox(length int, width int, height int, mass int) string {\\n    isBulky := isBulkyDim(length) || isBulkyDim(width) || isBulkyDim(height) || isBulkyByVolume(length, width, height)\\n    isHeavy := mass >= 100\\n\\n    if isBulky && isHeavy {\\n        return \"Both\"\\n    }\\n    if isBulky {\\n        return \"Bulky\"\\n    }\\n    if isHeavy {\\n        return \"Heavy\"\\n    }\\n    return \"Neither\"\\n}\\n\\nfunc isBulkyByVolume(aa, bb, cc int) bool {\\n    a, b, c := int64(aa), int64(bb), int64(cc)\\n    const threshold int64 = 1_000_000_000\\n\\n    if a * b >= threshold {\\n        return true\\n    }\\n    return a * b * c >= threshold\\n}\\n\\nfunc isBulkyDim(d int) bool {\\n    return d >= 10_000\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc categorizeBox(length int, width int, height int, mass int) string {\\n    isBulky := isBulkyDim(length) || isBulkyDim(width) || isBulkyDim(height) || isBulkyByVolume(length, width, height)\\n    isHeavy := mass >= 100\\n\\n    if isBulky && isHeavy {\\n        return \"Both\"\\n    }\\n    if isBulky {\\n        return \"Bulky\"\\n    }\\n    if isHeavy {\\n        return \"Heavy\"\\n    }\\n    return \"Neither\"\\n}\\n\\nfunc isBulkyByVolume(aa, bb, cc int) bool {\\n    a, b, c := int64(aa), int64(bb), int64(cc)\\n    const threshold int64 = 1_000_000_000\\n\\n    if a * b >= threshold {\\n        return true\\n    }\\n    return a * b * c >= threshold\\n}\\n\\nfunc isBulkyDim(d int) bool {\\n    return d >= 10_000\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3697151,
                "title": "qtsol-easy-solution-with-method",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        long s = (long) length*width*height;\\n        String ans = \"\";\\n        if(bulky(length, width, height, mass, s) && !heavy(mass)) ans = \"Bulky\";\\n        else if(!bulky(length, width, height, mass, s) && heavy(mass)) ans = \"Heavy\";\\n        else if(!bulky(length, width, height, mass, s) && !heavy(mass)) ans = \"Neither\";\\n        else if(bulky(length, width, height, mass, s) && heavy(mass)) ans = \"Both\";\\n\\n        return ans;\\n    }\\n    public boolean bulky(int l, int w, int h, int m, long s){\\n        if((l >= 10000 || w >= 10000 || h >= 10000 || m >= 10000) || (s >= 1000000000)) return true;\\n        \\n        return false;\\n    }\\n    public boolean heavy(int m){\\n        if(m >= 100) return true;\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        long s = (long) length*width*height;\\n        String ans = \"\";\\n        if(bulky(length, width, height, mass, s) && !heavy(mass)) ans = \"Bulky\";\\n        else if(!bulky(length, width, height, mass, s) && heavy(mass)) ans = \"Heavy\";\\n        else if(!bulky(length, width, height, mass, s) && !heavy(mass)) ans = \"Neither\";\\n        else if(bulky(length, width, height, mass, s) && heavy(mass)) ans = \"Both\";\\n\\n        return ans;\\n    }\\n    public boolean bulky(int l, int w, int h, int m, long s){\\n        if((l >= 10000 || w >= 10000 || h >= 10000 || m >= 10000) || (s >= 1000000000)) return true;\\n        \\n        return false;\\n    }\\n    public boolean heavy(int m){\\n        if(m >= 100) return true;\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3694952,
                "title": "simple-js-ts-solution",
                "content": "Just some simple math to figure out the solution\\n\\n# Code\\n```\\nconst categorizeBox = (length: number, width: number, height: number, mass: number): string => {\\n\\n    var isHeavy = false;\\n    var isBulky = false;\\n    \\n    const TenToFourth = Math.pow(10,4);\\n    const TenToNinth = Math.pow(10, 9);\\n\\n    if(length >= TenToFourth || width >= TenToFourth || height >= TenToFourth || length*width*height >= TenToNinth) isBulky = true;\\n    if(mass >= 100) isHeavy = true;\\n    \\n    if(isBulky && isHeavy) return \\'Both\\';\\n    if(isBulky && !isHeavy) return \\'Bulky\\';\\n    if(!isBulky && isHeavy) return \\'Heavy\\';\\n    \\n    return \\'Neither\\';\\n\\n};\\n```\\nSee more `TypeScript`/`JavaScript` (and other language) LeetCode solutions at https://github.com/jasonmauss/LeetCode",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nconst categorizeBox = (length: number, width: number, height: number, mass: number): string => {\\n\\n    var isHeavy = false;\\n    var isBulky = false;\\n    \\n    const TenToFourth = Math.pow(10,4);\\n    const TenToNinth = Math.pow(10, 9);\\n\\n    if(length >= TenToFourth || width >= TenToFourth || height >= TenToFourth || length*width*height >= TenToNinth) isBulky = true;\\n    if(mass >= 100) isHeavy = true;\\n    \\n    if(isBulky && isHeavy) return \\'Both\\';\\n    if(isBulky && !isHeavy) return \\'Bulky\\';\\n    if(!isBulky && isHeavy) return \\'Heavy\\';\\n    \\n    return \\'Neither\\';\\n\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3690221,
                "title": "simple-java-solution-boolean-flags-usage",
                "content": "# Code\\n```\\nclass Solution {\\n    public String categorizeBox(int l, int  b, int h, int mass) {\\n        boolean bulk = false;\\n        boolean heavy =false;\\n        if(mass >= 100) heavy = true;\\n        if(l>= 10_000 || b>= 10_000 || h>= 10_000 || (long)l*b*h>= 1000_000_000) bulk = true;\\n\\n        if(bulk && heavy) return \"Both\";\\n        else if(bulk && !heavy ) return \"Bulky\";\\n        else if(!bulk && heavy ) return \"Heavy\";\\n        else return \"Neither\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public String categorizeBox(int l, int  b, int h, int mass) {\\n        boolean bulk = false;\\n        boolean heavy =false;\\n        if(mass >= 100) heavy = true;\\n        if(l>= 10_000 || b>= 10_000 || h>= 10_000 || (long)l*b*h>= 1000_000_000) bulk = true;\\n\\n        if(bulk && heavy) return \"Both\";\\n        else if(bulk && !heavy ) return \"Bulky\";\\n        else if(!bulk && heavy ) return \"Heavy\";\\n        else return \"Neither\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3684800,
                "title": "simple-to-understand-beats-100-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        long long volume = (long long)(length) * width * height;\\n\\n        if ((mass >= 100) && (length >= 10000 || width >= 10000 || height >= 10000 || volume >= 1000000000)) {\\n            return \"Both\";\\n        }\\n        else if (length >= 10000 || width >= 10000 || height >= 10000 || volume >= 1000000000) {\\n            return \"Bulky\";\\n        }\\n        else if (mass >= 100) {\\n            return \"Heavy\";\\n        }\\n        else {\\n            return \"Neither\";\\n        }\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        long long volume = (long long)(length) * width * height;\\n\\n        if ((mass >= 100) && (length >= 10000 || width >= 10000 || height >= 10000 || volume >= 1000000000)) {\\n            return \"Both\";\\n        }\\n        else if (length >= 10000 || width >= 10000 || height >= 10000 || volume >= 1000000000) {\\n            return \"Bulky\";\\n        }\\n        else if (mass >= 100) {\\n            return \"Heavy\";\\n        }\\n        else {\\n            return \"Neither\";\\n        }\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3676849,
                "title": "simple-approach-best-for-beginners",
                "content": "# Intuition\\n\\n# Approach\\n- we need to check  if the length,breadth,height is greater than 10000\\nand volume is greater than 10^9, if any condition is met then box is **\"Bulky\"**\\n- if mass greater 100 then box is **\"Heavy\"**\\n- now we check the conditions further then it would result the string as per standards of isbulky and isheavy.\\n\\n\\n![leetcode_upvote.webp](https://assets.leetcode.com/users/images/ce347fca-bd79-4b4c-ba42-19dcc2074be0_1687604812.1205735.webp)\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        string isbulky=\"\",isheavy=\"\";\\n        long long vol=(long long)length*(long long)width*(long long)height;\\n        if(length>=1e4||width>=1e4||height>=1e4||vol>=1e9))\\n        {\\n            isbulky=isbulky+\"Bulky\";\\n        }\\n        if(mass>=100)\\n        {   isheavy=isheavy+\"Heavy\";}\\n        if(isbulky==\"Bulky\"&&isheavy==\"Heavy\")\\n            return \"Both\";\\n        else if(isbulky==\"Bulky\")\\n            return \"Bulky\";\\n        else if(isheavy==\"Heavy\")\\n            return \"Heavy\";\\n        else\\n            return \"Neither\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        string isbulky=\"\",isheavy=\"\";\\n        long long vol=(long long)length*(long long)width*(long long)height;\\n        if(length>=1e4||width>=1e4||height>=1e4||vol>=1e9))\\n        {\\n            isbulky=isbulky+\"Bulky\";\\n        }\\n        if(mass>=100)\\n        {   isheavy=isheavy+\"Heavy\";}\\n        if(isbulky==\"Bulky\"&&isheavy==\"Heavy\")\\n            return \"Both\";\\n        else if(isbulky==\"Bulky\")\\n            return \"Bulky\";\\n        else if(isheavy==\"Heavy\")\\n            return \"Heavy\";\\n        else\\n            return \"Neither\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3659495,
                "title": "simple-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n         boolean b=bulky( length,  width,  height,  mass);\\n        boolean h=heavy(mass);\\n        if(b && h){\\n            return \"Both\";\\n        }\\n        else if(b && !(h)){\\n            return \"Bulky\";\\n        }\\n        else if(h && !(b)){\\n            return \"Heavy\";\\n        }\\n        else{\\n            return \"Neither\";\\n        }\\n    }\\n   public static boolean bulky(int length, int width, int height, int mass){\\n        double value=Math.pow(10,4);\\n        // long volume=Math.abs(length*width*height);\\n        if(length>=value || width>=value || height>=value || mass>=value){\\n            return true;\\n        }\\n        else if((long)length*width*height>=Math.pow(10,9)){\\n            return true;\\n        }\\n        return false;\\n    }\\n    public static boolean heavy(int mass){\\n        if(mass>=100){\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n         boolean b=bulky( length,  width,  height,  mass);\\n        boolean h=heavy(mass);\\n        if(b && h){\\n            return \"Both\";\\n        }\\n        else if(b && !(h)){\\n            return \"Bulky\";\\n        }\\n        else if(h && !(b)){\\n            return \"Heavy\";\\n        }\\n        else{\\n            return \"Neither\";\\n        }\\n    }\\n   public static boolean bulky(int length, int width, int height, int mass){\\n        double value=Math.pow(10,4);\\n        // long volume=Math.abs(length*width*height);\\n        if(length>=value || width>=value || height>=value || mass>=value){\\n            return true;\\n        }\\n        else if((long)length*width*height>=Math.pow(10,9)){\\n            return true;\\n        }\\n        return false;\\n    }\\n    public static boolean heavy(int mass){\\n        if(mass>=100){\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3649281,
                "title": "java-clean-code",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe need to use **long** in order to avoid integer overflow problems.\\n\\n# Code\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        boolean isBulky = false;\\n        boolean isHeavy = false;\\n\\n        int bulkyLimit = 10000;\\n        if (length >= bulkyLimit || width >= bulkyLimit || height >= bulkyLimit) isBulky = true;\\n        else if ((long) length * width * height >= 1000000000L) isBulky = true;\\n\\n        if (mass >= 100) isHeavy = true;\\n\\n        if (isBulky && isHeavy) return \"Both\";\\n        if (isBulky) return \"Bulky\";\\n        if (isHeavy) return \"Heavy\";\\n\\n        return \"Neither\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        boolean isBulky = false;\\n        boolean isHeavy = false;\\n\\n        int bulkyLimit = 10000;\\n        if (length >= bulkyLimit || width >= bulkyLimit || height >= bulkyLimit) isBulky = true;\\n        else if ((long) length * width * height >= 1000000000L) isBulky = true;\\n\\n        if (mass >= 100) isHeavy = true;\\n\\n        if (isBulky && isHeavy) return \"Both\";\\n        if (isBulky) return \"Bulky\";\\n        if (isHeavy) return \"Heavy\";\\n\\n        return \"Neither\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3623367,
                "title": "trivial-c-beats-100",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        const auto isBulky = length >= 1E4 || width >= 1E4 || height >= 1E4 || 1.0 * length * width * height >= 1E9;\\n        const auto isHeavy = mass >= 1E2;\\n        if (isBulky && isHeavy) return \"Both\";\\n        if (isBulky) return \"Bulky\";\\n        if (isHeavy) return \"Heavy\";\\n        return \"Neither\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        const auto isBulky = length >= 1E4 || width >= 1E4 || height >= 1E4 || 1.0 * length * width * height >= 1E9;\\n        const auto isHeavy = mass >= 1E2;\\n        if (isBulky && isHeavy) return \"Both\";\\n        if (isBulky) return \"Bulky\";\\n        if (isHeavy) return \"Heavy\";\\n        return \"Neither\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3621967,
                "title": "c-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        bool Bulky = (1e9 / length / width / height <= 1) || (length >= 1e4) || (width >= 1e4) || (height >= 1e4);\\n        bool Heavy = mass >= 100;\\n        if (Bulky && Heavy) {\\n            return \"Both\";\\n        } else if (Bulky) {\\n            return \"Bulky\";\\n        } else if (Heavy) {\\n            return \"Heavy\";\\n        } else {\\n            return \"Neither\";\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        bool Bulky = (1e9 / length / width / height <= 1) || (length >= 1e4) || (width >= 1e4) || (height >= 1e4);\\n        bool Heavy = mass >= 100;\\n        if (Bulky && Heavy) {\\n            return \"Both\";\\n        } else if (Bulky) {\\n            return \"Bulky\";\\n        } else if (Heavy) {\\n            return \"Heavy\";\\n        } else {\\n            return \"Neither\";\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3602540,
                "title": "simple-python3-solution",
                "content": "Most straightforward solution\\nEfficient runtime\\n# Code\\n```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        bulk = False\\n        heavy = False\\n        if mass >= 100:\\n            heavy = True\\n        if length >= 10**4 or width >= 10**4 or height >= 10**4 or length*width*height >= 10**9:\\n            bulk = True\\n            if heavy:\\n                return \"Both\"\\n            else:\\n                return \"Bulky\"\\n        if heavy:\\n            return \"Heavy\"\\n        return \"Neither\"\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        bulk = False\\n        heavy = False\\n        if mass >= 100:\\n            heavy = True\\n        if length >= 10**4 or width >= 10**4 or height >= 10**4 or length*width*height >= 10**9:\\n            bulk = True\\n            if heavy:\\n                return \"Both\"\\n            else:\\n                return \"Bulky\"\\n        if heavy:\\n            return \"Heavy\"\\n        return \"Neither\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3584875,
                "title": "short-and-simple-code-with-easy-to-understand-explanation",
                "content": "# Intuition\\nThe problem requires categorizing a box based on its dimensions (length, width, height) and mass. The categories are \"Both\" (if the box is both bulky and heavy), \"Bulky\" (if the box is bulky but not heavy), \"Heavy\" (if the box is heavy but not bulky), and \"Neither\" (if the box is neither bulky nor heavy).\\n\\n# Approach\\nThe given code already provides a straightforward approach to solving the problem. It calculates the volume of the box by multiplying its length, width, and height (vol = length * width * height). It also checks if any of the dimensions (length, width, height) is greater than or equal to 10^4 (dim = height >= 10 ** 4 || length >= 10 ** 4 || width >= 10 ** 4).\\n\\nThe code then determines whether the box is bulky (isBulky) based on the calculated volume (vol >= 10 ** 9) or if any dimension is greater than or equal to 10^4. Similarly, it determines whether the box is heavy (isHeavy) based on the given mass (mass >= 100).\\n\\nFinally, the code uses conditional statements to return the appropriate category based on the values of isBulky and isHeavy.\\n\\n# Complexity\\n* Time complexity: O(1) - The code performs a constant number of operations to calculate the volume, check the dimensions, and compare the mass. Regardless of the input values, the time complexity remains constant.\\n* Space complexity: O(1) - The code uses a constant amount of space to store the calculated volume (vol) and the dimensions check (dim). The space complexity does not depend on the input size.\\n\\n# Code\\n```\\nfunction categorizeBox(length: number, width: number, height: number, mass: number): string {\\n    let vol = length * width * height , dim = height >= 10 ** 4 || length >= 10 ** 4 || width >= 10 ** 4;\\n    const isBulky = vol >= 10 ** 9 || dim, isHeavy = mass >= 100;\\n    if( isBulky && isHeavy )return \"Both\";\\n    else if( isBulky )return \"Bulky\";\\n    else if( isHeavy )return \"Heavy\";\\n    else return \"Neither\"\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript",
                    "Math"
                ],
                "code": "```\\nfunction categorizeBox(length: number, width: number, height: number, mass: number): string {\\n    let vol = length * width * height , dim = height >= 10 ** 4 || length >= 10 ** 4 || width >= 10 ** 4;\\n    const isBulky = vol >= 10 ** 9 || dim, isHeavy = mass >= 100;\\n    if( isBulky && isHeavy )return \"Both\";\\n    else if( isBulky )return \"Bulky\";\\n    else if( isHeavy )return \"Heavy\";\\n    else return \"Neither\"\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3579205,
                "title": "python3-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def categorizeBox(self, l: int, w: int, h: int, m: int) -> str:\\n        bulk , heavy = 0 , 0 \\n        vol = l*w*h \\n        if l >= 10**4 or w >= 10**4 or h >= 10**4  or vol >= 10**9:\\n            bulk = 1\\n        if m >= 100:\\n            heavy = 1 \\n        if bulk == 1 and heavy == 1:\\n            return \"Both\"\\n        elif bulk == 0 and heavy == 0 :\\n            return \"Neither\"\\n        elif bulk == 1 and heavy == 0 :\\n            return \"Bulky\"\\n        elif heavy == 1 and bulk == 0 :\\n            return \"Heavy\"\\n\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def categorizeBox(self, l: int, w: int, h: int, m: int) -> str:\\n        bulk , heavy = 0 , 0 \\n        vol = l*w*h \\n        if l >= 10**4 or w >= 10**4 or h >= 10**4  or vol >= 10**9:\\n            bulk = 1\\n        if m >= 100:\\n            heavy = 1 \\n        if bulk == 1 and heavy == 1:\\n            return \"Both\"\\n        elif bulk == 0 and heavy == 0 :\\n            return \"Neither\"\\n        elif bulk == 1 and heavy == 0 :\\n            return \"Bulky\"\\n        elif heavy == 1 and bulk == 0 :\\n            return \"Heavy\"\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3577496,
                "title": "c-easy-solution-100-beats-using-long-long",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(int l, int w, int h, int m) {\\n        bool bulk=false,heavy=false;\\n        long vol=long(long(l)*w)*h;\\n\\n        if(l>=10000||w>=10000||h>=10000||vol>=1000000000)bulk=true;\\n\\n        if(m>=100)heavy=true;\\n\\n        if(bulk && heavy)return \"Both\";\\n        else if(bulk && !heavy)return \"Bulky\";\\n        else if(!bulk && heavy)return \"Heavy\";\\n        else return \"Neither\";\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int l, int w, int h, int m) {\\n        bool bulk=false,heavy=false;\\n        long vol=long(long(l)*w)*h;\\n\\n        if(l>=10000||w>=10000||h>=10000||vol>=1000000000)bulk=true;\\n\\n        if(m>=100)heavy=true;\\n\\n        if(bulk && heavy)return \"Both\";\\n        else if(bulk && !heavy)return \"Bulky\";\\n        else if(!bulk && heavy)return \"Heavy\";\\n        else return \"Neither\";\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3560845,
                "title": "simple-solution-c-98-efficient",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n***Using two boolean variables, bulky and heavy we\\'ll evaluate the solution.***\\n\\nFirst check if any of the length/width/height is >= 10<sup>4</sup> \\n(or) if (length * width * height) >= 10<sup>9</sup>.\\nIf yes, set the variable bulky to true.\\n\\nNext, check if the mass is > 100, if yes, set the variable heavy to true.\\n\\nBased on the values of variables *bulky* and *heavy* return the appropriate string.\\n\\n\\n![Screenshot 2023-05-25 113046.png](https://assets.leetcode.com/users/images/27a445c0-9959-4b70-a6f1-538b0a55ccef_1684994487.8780541.png)\\n\\n## Please upvote if you like the approach\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(1) - as it runs in constant time regardless of input valeus\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1) - as memory used does not increase with different input values\\n\\n# Code\\n```\\npublic class Solution {\\n    public string CategorizeBox(int length, int width, int height, int mass) {\\n        bool bulky = false;\\n        bool heavy = false;\\n        int maxDimension = 10000;\\n        double maxVolume = 1000000000;\\n\\n        if (length >= maxDimension || width >= maxDimension \\n            || height >= maxDimension \\n            || ((double)length * (double)width * (double)height) >= maxVolume)\\n        {\\n            bulky = true;\\n        }\\n\\n        if (mass >= 100)\\n            heavy = true;\\n\\n        if (bulky && heavy)\\n            return \"Both\";\\n        else if (bulky)\\n            return \"Bulky\";\\n        else if (heavy)\\n            return \"Heavy\";\\n        else\\n            return \"Neither\";\\n    }\\n}\\n```\\n\\n## Please upvote if you like the approach\\n![Upvote please - CAT.jpg](https://assets.leetcode.com/users/images/540989b1-2824-413d-a414-042c739ff025_1684994782.9713366.jpeg)\\n",
                "solutionTags": [
                    "C#",
                    "Math"
                ],
                "code": "```\\npublic class Solution {\\n    public string CategorizeBox(int length, int width, int height, int mass) {\\n        bool bulky = false;\\n        bool heavy = false;\\n        int maxDimension = 10000;\\n        double maxVolume = 1000000000;\\n\\n        if (length >= maxDimension || width >= maxDimension \\n            || height >= maxDimension \\n            || ((double)length * (double)width * (double)height) >= maxVolume)\\n        {\\n            bulky = true;\\n        }\\n\\n        if (mass >= 100)\\n            heavy = true;\\n\\n        if (bulky && heavy)\\n            return \"Both\";\\n        else if (bulky)\\n            return \"Bulky\";\\n        else if (heavy)\\n            return \"Heavy\";\\n        else\\n            return \"Neither\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3548939,
                "title": "java-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        long n = (long)length * (long)width * (long)height;\\n        String str =\"\";\\n        int flag = 0;\\n        if(length>=1e4 || height>=1e4 || width>=1e4 || n >=1e9)\\n            str = \"Bulky\";\\n        if(mass>=100)\\n            flag = 1;\\n        if(str==\"Bulky\" && flag ==1)\\n            str = \"Both\";\\n        else if(str==\"Bulky\" && flag !=1)\\n            str = \"Bulky\";\\n        else if(str!=\"Bulky\" && flag ==1)\\n            str = \"Heavy\";\\n        else\\n            str = \"Neither\";\\n\\n        return str;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        long n = (long)length * (long)width * (long)height;\\n        String str =\"\";\\n        int flag = 0;\\n        if(length>=1e4 || height>=1e4 || width>=1e4 || n >=1e9)\\n            str = \"Bulky\";\\n        if(mass>=100)\\n            flag = 1;\\n        if(str==\"Bulky\" && flag ==1)\\n            str = \"Both\";\\n        else if(str==\"Bulky\" && flag !=1)\\n            str = \"Bulky\";\\n        else if(str!=\"Bulky\" && flag ==1)\\n            str = \"Heavy\";\\n        else\\n            str = \"Neither\";\\n\\n        return str;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3541780,
                "title": "tc-o-1-sc-o-1-easy-cpp-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        long long int volume = static_cast<long long int>(length) * width * height;\\n        int x = pow(10,4);\\n        int y = pow(10,9);\\n        if((length >= x || width >= x || height >= x || volume >= y)  && mass < 100) \\n        return \"Bulky\";\\n        else if((length >= x || width >= x || height >= x || volume >= y)  && mass >=100)\\n            return \"Both\";\\n        else if(mass>=100) return \"Heavy\";\\n        else return \"Neither\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        long long int volume = static_cast<long long int>(length) * width * height;\\n        int x = pow(10,4);\\n        int y = pow(10,9);\\n        if((length >= x || width >= x || height >= x || volume >= y)  && mass < 100) \\n        return \"Bulky\";\\n        else if((length >= x || width >= x || height >= x || volume >= y)  && mass >=100)\\n            return \"Both\";\\n        else if(mass>=100) return \"Heavy\";\\n        else return \"Neither\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3541251,
                "title": "doubt-why-am-i-getting-error-if-i-set-the-volume-to-long-long-data-type-but-l-w-h-are-same",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        long long  volume = length * width * height;\\n\\n        bool b = false, h = false;\\n        if(volume >= 1e9 || length>=1e4 || width>=1e4 || mass>=1e4 || height>=1e4) b = true;\\n        \\n        if(mass >= 100) h = true;\\n\\n        if(b and h) return \"Both\";\\n        else if(b) return \"Bulky\";\\n        else if(h) return \"Heavy\";\\n        else return \"Neither\"; \\n        \\n\\n\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        long long  volume = length * width * height;\\n\\n        bool b = false, h = false;\\n        if(volume >= 1e9 || length>=1e4 || width>=1e4 || mass>=1e4 || height>=1e4) b = true;\\n        \\n        if(mass >= 100) h = true;\\n\\n        if(b and h) return \"Both\";\\n        else if(b) return \"Bulky\";\\n        else if(h) return \"Heavy\";\\n        else return \"Neither\"; \\n        \\n\\n\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3539929,
                "title": "c",
                "content": "Since we\\'re only comparing vs 10^x, we can just sum the log10() values of each dimension instead of actually multiplying.\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        int max_dimension = max(length, width);\\n        max_dimension = max(max_dimension, height);\\n        max_dimension = max(max_dimension, mass);\\n        max_dimension = log10(max_dimension);\\n        double volume = log10(length) + log10(width) + log10(height);\\n        \\n        bool heavy = mass >= 100;\\n        bool bulky = (max_dimension >= 4 || volume >= 9);\\n        if(bulky && heavy)\\n        {\\n            return \"Both\";\\n        }\\n        else if(bulky && !heavy)\\n        {\\n            return \"Bulky\";\\n        }\\n        else if(!bulky && heavy)\\n        {\\n            return \"Heavy\";\\n        }\\n        return \"Neither\";\\n        \\n        \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        int max_dimension = max(length, width);\\n        max_dimension = max(max_dimension, height);\\n        max_dimension = max(max_dimension, mass);\\n        max_dimension = log10(max_dimension);\\n        double volume = log10(length) + log10(width) + log10(height);\\n        \\n        bool heavy = mass >= 100;\\n        bool bulky = (max_dimension >= 4 || volume >= 9);\\n        if(bulky && heavy)\\n        {\\n            return \"Both\";\\n        }\\n        else if(bulky && !heavy)\\n        {\\n            return \"Bulky\";\\n        }\\n        else if(!bulky && heavy)\\n        {\\n            return \"Heavy\";\\n        }\\n        return \"Neither\";\\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3538983,
                "title": "boxing-the-unboxable",
                "content": "# Intuition\\nWhen I first read the problem, I realized it\\'s a classification problem where we need to categorize a box based on its dimensions and mass. The problem is straightforward and doesn\\'t require any complex data structures or algorithms. It\\'s all about understanding the conditions and implementing them correctly.\\n\\n# Approach\\nThe approach to solving this problem is quite simple. We need to calculate the volume of the box and then check the conditions given in the problem to categorize the box.\\n\\n1. Calculate the volume of the box by multiplying its length, width, and height.\\n2. Check if any of the dimensions is greater or equal to 10,000 or if the volume is greater or equal to 1e9 (1,000,000,000). If any of these conditions is true, the box is \"Bulky\".\\n3. Check if the mass of the box is greater or equal to 100. If it is, the box is \"Heavy\".\\n4. Now we have two boolean variables, isBulky and isHeavy, which tell us whether the box is bulky, heavy, both, or neither. We return the appropriate string based on these variables.\\n\\n# Complexity\\n- Time complexity: O(1) The time complexity is constant because we\\'re only performing a fixed number of operations. No matter the size of the input, the number of operations remains the same.\\n\\n- Space complexity: O(1) The space complexity is also constant because we\\'re only using a fixed amount of space to store our variables. The space used does not increase with the size of the input.\\n\\n# Code\\n```\\n/**\\n * @param {number} length\\n * @param {number} width\\n * @param {number} height\\n * @param {number} mass\\n * @return {string}\\n */\\nvar categorizeBox = function(length, width, height, mass) {\\n const volume = length * width * height;\\n  const isBulky = length >= 10000 || width >= 10000 || height >= 10000 || volume >= 1e9;\\n  const isHeavy = mass >= 100;\\n\\n  if (isBulky && isHeavy) return \\'Both\\';\\n  if (!isBulky && !isHeavy) return \\'Neither\\';\\n  return isBulky ? \\'Bulky\\' : \\'Heavy\\';\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} length\\n * @param {number} width\\n * @param {number} height\\n * @param {number} mass\\n * @return {string}\\n */\\nvar categorizeBox = function(length, width, height, mass) {\\n const volume = length * width * height;\\n  const isBulky = length >= 10000 || width >= 10000 || height >= 10000 || volume >= 1e9;\\n  const isHeavy = mass >= 100;\\n\\n  if (isBulky && isHeavy) return \\'Both\\';\\n  if (!isBulky && !isHeavy) return \\'Neither\\';\\n  return isBulky ? \\'Bulky\\' : \\'Heavy\\';\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3519810,
                "title": "simple-python-solution-big-o-1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def categorizeBox(self, length, width, height, mass):\\n        volume = length*width*height\\n        dimension = 10000\\n\\n        l1 = []\\n        if length>=dimension or width >= dimension or height >= dimension or volume >= 1000000000:\\n            l1.append(\\'Bulky\\') \\n        if mass >=100:\\n            l1.append(\\'Heavy\\')\\n\\n        if len(l1)==0:\\n            return \"Neither\"\\n        if len(l1) ==1:\\n            return l1[0]\\n        if len(l1) ==2:\\n            return \"Both\"\\n\\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def categorizeBox(self, length, width, height, mass):\\n        volume = length*width*height\\n        dimension = 10000\\n\\n        l1 = []\\n        if length>=dimension or width >= dimension or height >= dimension or volume >= 1000000000:\\n            l1.append(\\'Bulky\\') \\n        if mass >=100:\\n            l1.append(\\'Heavy\\')\\n\\n        if len(l1)==0:\\n            return \"Neither\"\\n        if len(l1) ==1:\\n            return l1[0]\\n        if len(l1) ==2:\\n            return \"Both\"\\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3515960,
                "title": "categorize-box-according-to-criteria",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        volume = length * width * height\\n        check = \\'Bulky\\' if length >= 10**4 or width >= 10**4 or height >= 10**4 or volume >= 10**9 else None\\n        if mass >= 100 and not check:\\n            return \\'Heavy\\'\\n        elif mass >= 100 and check:\\n            return \\'Both\\'\\n        elif mass < 100 and not check:\\n            return \\'Neither\\'\\n        elif mass < 100 and check:\\n            return check   \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        volume = length * width * height\\n        check = \\'Bulky\\' if length >= 10**4 or width >= 10**4 or height >= 10**4 or volume >= 10**9 else None\\n        if mass >= 100 and not check:\\n            return \\'Heavy\\'\\n        elif mass >= 100 and check:\\n            return \\'Both\\'\\n        elif mass < 100 and not check:\\n            return \\'Neither\\'\\n        elif mass < 100 and check:\\n            return check   \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3494272,
                "title": "categorize-box-according-to-criteria",
                "content": "--------------------- Easy C++ Solution -------------------\\n\\n# Complexity\\n- Time complexity:\\nAdd your time complexity here, e.g. $$O(1)$$\\n\\n- Space complexity:\\nAdd your space complexity here, e.g. $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n    bool isBulky = length >= 10000 || width >= 10000 || height >= 10000 ||\\n        static_cast<long>(length) * width * height >= 1000000000;\\n     bool isHeavy = mass >= 100;\\n    if (isBulky && isHeavy)\\n      return \"Both\";\\n    if (isBulky)\\n      return \"Bulky\";\\n    if (isHeavy)\\n      return \"Heavy\";\\n    return \"Neither\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n    bool isBulky = length >= 10000 || width >= 10000 || height >= 10000 ||\\n        static_cast<long>(length) * width * height >= 1000000000;\\n     bool isHeavy = mass >= 100;\\n    if (isBulky && isHeavy)\\n      return \"Both\";\\n    if (isBulky)\\n      return \"Bulky\";\\n    if (isHeavy)\\n      return \"Heavy\";\\n    return \"Neither\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3487471,
                "title": "simple-python-solution",
                "content": "\\n\\n# Code\\n```\\ndef isBulky(volume,length,width,height):\\n    if volume>=10**9 or (length>=10**4 or width>=10**4 or height>=10**4): \\n            return True \\n    else:\\n        return False\\ndef isHeavy(mass):\\n    return mass>=100\\nclass Solution(object):\\n    def categorizeBox(self, length, width, height, mass):\\n        volume=length*width*height\\n        res=\"\"\\n        if isBulky(volume,length,width,height) and isHeavy(mass):\\n            res=\"Both\"\\n        elif isBulky(volume,length,width,height) and not isHeavy(mass):\\n            res=\"Bulky\"\\n        elif not isBulky(volume,length,width,height) and isHeavy(mass):\\n            res=\"Heavy\"\\n        elif not isBulky(volume,length,width,height) and not isHeavy(mass):\\n            res=\"Neither\"\\n        return res\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef isBulky(volume,length,width,height):\\n    if volume>=10**9 or (length>=10**4 or width>=10**4 or height>=10**4): \\n            return True \\n    else:\\n        return False\\ndef isHeavy(mass):\\n    return mass>=100\\nclass Solution(object):\\n    def categorizeBox(self, length, width, height, mass):\\n        volume=length*width*height\\n        res=\"\"\\n        if isBulky(volume,length,width,height) and isHeavy(mass):\\n            res=\"Both\"\\n        elif isBulky(volume,length,width,height) and not isHeavy(mass):\\n            res=\"Bulky\"\\n        elif not isBulky(volume,length,width,height) and isHeavy(mass):\\n            res=\"Heavy\"\\n        elif not isBulky(volume,length,width,height) and not isHeavy(mass):\\n            res=\"Neither\"\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3481089,
                "title": "dumb-solutions-follow-me-hahahahahahaha",
                "content": "# Code\\n```\\nuse std::collections::HashSet;\\n\\nimpl Solution {\\n    pub fn categorize_box(length: i32, width: i32, height: i32, mass: i32) -> String {\\n        let dimensions: Vec<i32> = vec![length, width, height];\\n        let mut category: HashSet<String> = HashSet::new();\\n        for i in 0..dimensions.len(){\\n            if dimensions[i] >= (10 as i32).pow(4){\\n                category.insert(\"Bulky\".to_string());\\n                break;\\n            }\\n        }\\n        if (length as i64 * width as i64 * height as i64) >= (10 as i64).pow(9){\\n            category.insert(\"Bulky\".to_string());\\n        }\\n        if mass >= 100{\\n            category.insert(\"Heavy\".to_string());\\n        }\\n        if category.len() == 2{return \"Both\".to_string()}\\n        for c in category.iter(){\\n            return c.to_string();\\n        }\\n        \"Neither\".to_string()\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust",
                    "Math"
                ],
                "code": "```\\nuse std::collections::HashSet;\\n\\nimpl Solution {\\n    pub fn categorize_box(length: i32, width: i32, height: i32, mass: i32) -> String {\\n        let dimensions: Vec<i32> = vec![length, width, height];\\n        let mut category: HashSet<String> = HashSet::new();\\n        for i in 0..dimensions.len(){\\n            if dimensions[i] >= (10 as i32).pow(4){\\n                category.insert(\"Bulky\".to_string());\\n                break;\\n            }\\n        }\\n        if (length as i64 * width as i64 * height as i64) >= (10 as i64).pow(9){\\n            category.insert(\"Bulky\".to_string());\\n        }\\n        if mass >= 100{\\n            category.insert(\"Heavy\".to_string());\\n        }\\n        if category.len() == 2{return \"Both\".to_string()}\\n        for c in category.iter(){\\n            return c.to_string();\\n        }\\n        \"Neither\".to_string()\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3477184,
                "title": "simple-java-else-if-solution-100-beats",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n       \\n        if(isBulky(length,width,height) && mass >= 100){\\n            return \"Both\";\\n        }else if(!(isBulky(length,width,height)) && mass < 100){\\n            return \"Neither\";\\n        }else if(!(isBulky(length,width,height)) && mass >= 100){\\n            return \"Heavy\";\\n        }else{\\n            return \"Bulky\";\\n        }\\n    }\\n    public boolean isBulky(int length, int width, int height){\\n        long volume = (long)length * (long)width * (long)height;\\n        if(Math.max(length,Math.max(width,height)) >= 1e4){\\n            return true;\\n        }\\n        if( volume >= 1e9){\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n       \\n        if(isBulky(length,width,height) && mass >= 100){\\n            return \"Both\";\\n        }else if(!(isBulky(length,width,height)) && mass < 100){\\n            return \"Neither\";\\n        }else if(!(isBulky(length,width,height)) && mass >= 100){\\n            return \"Heavy\";\\n        }else{\\n            return \"Bulky\";\\n        }\\n    }\\n    public boolean isBulky(int length, int width, int height){\\n        long volume = (long)length * (long)width * (long)height;\\n        if(Math.max(length,Math.max(width,height)) >= 1e4){\\n            return true;\\n        }\\n        if( volume >= 1e9){\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3468541,
                "title": "easiest-java-solution",
                "content": "```\\npublic String categorizeBox(int l, int w, int h, int m) {\\n        boolean b=false,k=false;\\n     long v=(long)l*w*h;\\n if(l>=10000 || w>=10000 || h>=10000 || v>=1000000000L)   b=true;\\n      if(m>=100) k=true;\\n      if(k && b) return \"Both\";\\n    else if(k && !b) return \"Heavy\";\\n    else if(!k && b) return \"Bulky\";\\n      return \"Neither\";\\n    }\\n\\t",
                "solutionTags": [],
                "code": "```\\npublic String categorizeBox(int l, int w, int h, int m) {\\n        boolean b=false,k=false;\\n     long v=(long)l*w*h;\\n if(l>=10000 || w>=10000 || h>=10000 || v>=1000000000L)   b=true;\\n      if(m>=100) k=true;\\n      if(k && b) return \"Both\";\\n    else if(k && !b) return \"Heavy\";\\n    else if(!k && b) return \"Bulky\";\\n      return \"Neither\";\\n    }\\n\\t",
                "codeTag": "Unknown"
            },
            {
                "id": 3464973,
                "title": "c-100-faster-easy-0ms-runtime",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) { string s=\"\";\\n        long long x=length;\\n        long long y=width;\\n        long long z=height;\\n        long long v=x*y*z;\\n        \\n        if((v>=1e9||length>=1e4||width>=1e4||height>=1e4) && mass>=100){s=\"Both\";return s;}\\n        if((v<1e9||length<1e4||width<1e4||height<1e4) && mass>=100){s=\"Heavy\";return s;}\\n        if((v>=1e9||length>=1e4||width>=1e4||height>=1e4) && mass<100){s=\"Bulky\";return s;}\\n        if((v<1e9||length<1e4||width<1e4||height<1e4) && mass<100){s=\"Neither\";return s;}\\n        return s;\\n\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) { string s=\"\";\\n        long long x=length;\\n        long long y=width;\\n        long long z=height;\\n        long long v=x*y*z;\\n        \\n        if((v>=1e9||length>=1e4||width>=1e4||height>=1e4) && mass>=100){s=\"Both\";return s;}\\n        if((v<1e9||length<1e4||width<1e4||height<1e4) && mass>=100){s=\"Heavy\";return s;}\\n        if((v>=1e9||length>=1e4||width>=1e4||height>=1e4) && mass<100){s=\"Bulky\";return s;}\\n        if((v<1e9||length<1e4||width<1e4||height<1e4) && mass<100){s=\"Neither\";return s;}\\n        return s;\\n\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3447642,
                "title": "simple-solution-js",
                "content": "```\\n/**\\n * @param {number} length\\n * @param {number} width\\n * @param {number} height\\n * @param {number} mass\\n * @return {string}\\n */\\nvar categorizeBox = function(length, width, height, mass) {\\n    let isBulky = false\\n    let isHeavy = false\\n    \\n    if(length >= 10**4) isBulky = true\\n    if(width >= 10**4) isBulky = true\\n    if(height >= 10**4) isBulky = true\\n    if(length * width * height >= 10**9) isBulky = true\\n\\n    if(mass >= 100) isHeavy = true\\n\\n    if(isBulky && isHeavy) return \\'Both\\'\\n    if(!isBulky && !isHeavy) return \\'Neither\\'\\n    if(isBulky && !isHeavy) return \\'Bulky\\'\\n    if(!isBulky && isHeavy) return \\'Heavy\\'\\n\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} length\\n * @param {number} width\\n * @param {number} height\\n * @param {number} mass\\n * @return {string}\\n */\\nvar categorizeBox = function(length, width, height, mass) {\\n    let isBulky = false\\n    let isHeavy = false\\n    \\n    if(length >= 10**4) isBulky = true\\n    if(width >= 10**4) isBulky = true\\n    if(height >= 10**4) isBulky = true\\n    if(length * width * height >= 10**9) isBulky = true\\n\\n    if(mass >= 100) isHeavy = true\\n\\n    if(isBulky && isHeavy) return \\'Both\\'\\n    if(!isBulky && !isHeavy) return \\'Neither\\'\\n    if(isBulky && !isHeavy) return \\'Bulky\\'\\n    if(!isBulky && isHeavy) return \\'Heavy\\'\\n\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3444009,
                "title": "python-slowest-code-ever-but-it-works",
                "content": "\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def categorizeBox(self, l: int, w: int, h: int, m: int) -> str:\\n        # l = length, w = width, h = height, m = mass \\n        v = l * w * h \\n\\n        i,j = False,False # i = Bulky, j = Heavy\\n        if m >= 100:\\n            j = True\\n        if v >= 10**9: \\n            i = True\\n        elif l>= 10**4 or w>= 10**4 or h>= 10**4:\\n            i = True\\n        \\n        n = 0\\n        if i and j : \\n            return \"Both\"\\n        elif i and not j: \\n            return \"Bulky\"\\n        elif j and not i: \\n            return \"Heavy\"\\n        else: \\n            return \"Neither\"\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def categorizeBox(self, l: int, w: int, h: int, m: int) -> str:\\n        # l = length, w = width, h = height, m = mass \\n        v = l * w * h \\n\\n        i,j = False,False # i = Bulky, j = Heavy\\n        if m >= 100:\\n            j = True\\n        if v >= 10**9: \\n            i = True\\n        elif l>= 10**4 or w>= 10**4 or h>= 10**4:\\n            i = True\\n        \\n        n = 0\\n        if i and j : \\n            return \"Both\"\\n        elif i and not j: \\n            return \"Bulky\"\\n        elif j and not i: \\n            return \"Heavy\"\\n        else: \\n            return \"Neither\"\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3436701,
                "title": "simple-kotlin-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    fun categorizeBox(length: Int, width: Int, height: Int, mass: Int): String {\\n        val volume = length.toLong() * width.toLong() * height.toLong()\\n        val isBulky = length >= 1_0000 || width >= 1_0000 || height >= 1_0000 || volume >= 1_000_000_000\\n        val isHeavy = mass >= 100\\n        return when {\\n            isBulky && isHeavy -> \"Both\"\\n            isBulky -> \"Bulky\"\\n            isHeavy -> \"Heavy\"\\n            else -> \"Neither\"\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun categorizeBox(length: Int, width: Int, height: Int, mass: Int): String {\\n        val volume = length.toLong() * width.toLong() * height.toLong()\\n        val isBulky = length >= 1_0000 || width >= 1_0000 || height >= 1_0000 || volume >= 1_000_000_000\\n        val isHeavy = mass >= 100\\n        return when {\\n            isBulky && isHeavy -> \"Both\"\\n            isBulky -> \"Bulky\"\\n            isHeavy -> \"Heavy\"\\n            else -> \"Neither\"\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3425382,
                "title": "javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} length\\n * @param {number} width\\n * @param {number} height\\n * @param {number} mass\\n * @return {string}\\n */\\nvar categorizeBox = function(l, w, h, m) {\\n    \\n    let vol = l * w * h;\\n\\n    let cond1 = (vol >= 1e9 || l >= 1e4 || w >= 1e4 || h >= 1e4);\\n    let cond2 = m>= 100;\\n\\n    if (cond1 && cond2) {\\n      return \"Both\";\\n    } else if (cond1) {\\n      return \"Bulky\";\\n    } else if (cond2) {\\n      return \"Heavy\";\\n    } else {\\n      return \"Neither\";\\n    }\\n  }\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} length\\n * @param {number} width\\n * @param {number} height\\n * @param {number} mass\\n * @return {string}\\n */\\nvar categorizeBox = function(l, w, h, m) {\\n    \\n    let vol = l * w * h;\\n\\n    let cond1 = (vol >= 1e9 || l >= 1e4 || w >= 1e4 || h >= 1e4);\\n    let cond2 = m>= 100;\\n\\n    if (cond1 && cond2) {\\n      return \"Both\";\\n    } else if (cond1) {\\n      return \"Bulky\";\\n    } else if (cond2) {\\n      return \"Heavy\";\\n    } else {\\n      return \"Neither\";\\n    }\\n  }\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3423428,
                "title": "c-solution",
                "content": "```\\nstring categorizeBox(int l, int w, int h, int m) {\\n\\tlong v = (long)l * w * h;\\n\\tbool Bulky = v >= pow(10, 9) ||\\n\\t\\t\\t\\t(l >= pow(10, 4) || w >= pow(10, 4) || h >= pow(10, 4));\\n\\tbool Heavy = m >= 100;\\n\\treturn Bulky && Heavy ? \"Both\" :\\n\\t\\t   (!Bulky && !Heavy) ? \"Neither\" :\\n\\t\\t   (Bulky && !Heavy) ? \"Bulky\" : \"Heavy\";\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nstring categorizeBox(int l, int w, int h, int m) {\\n\\tlong v = (long)l * w * h;\\n\\tbool Bulky = v >= pow(10, 9) ||\\n\\t\\t\\t\\t(l >= pow(10, 4) || w >= pow(10, 4) || h >= pow(10, 4));\\n\\tbool Heavy = m >= 100;\\n\\treturn Bulky && Heavy ? \"Both\" :\\n\\t\\t   (!Bulky && !Heavy) ? \"Neither\" :\\n\\t\\t   (Bulky && !Heavy) ? \"Bulky\" : \"Heavy\";\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3421244,
                "title": "categorize-box-according-to-criteria",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nEasy Python Solution Using If else condition.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(N) \\n<!-- Add your time complexity here, e.g. $$O(n)$$ --> beats 91% users 11ms\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->Beats 92% users\\n\\n# Code\\n```\\nclass Solution(object):\\n    def categorizeBox(self, length, width, height, mass):\\n        \"\"\"\\n        :type length: int\\n        :type width: int\\n        :type height: int\\n        :type mass: int\\n        :rtype: str\\n        \"\"\"\\n        k=10**4\\n        b1=0\\n        b2=0\\n        v=length*width*height\\n        if(length>=k or width>=k or height>=k or v>=10**9):\\n            b1=1\\n        if(mass>=100):\\n            b2=1\\n        if(b1+b2==2):\\n            return(\"Both\")\\n        if(b1+b2==0):return(\"Neither\")\\n        if(b1==1):\\n            return(\"Bulky\")\\n        else:\\n            return(\"Heavy\")\\n\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def categorizeBox(self, length, width, height, mass):\\n        \"\"\"\\n        :type length: int\\n        :type width: int\\n        :type height: int\\n        :type mass: int\\n        :rtype: str\\n        \"\"\"\\n        k=10**4\\n        b1=0\\n        b2=0\\n        v=length*width*height\\n        if(length>=k or width>=k or height>=k or v>=10**9):\\n            b1=1\\n        if(mass>=100):\\n            b2=1\\n        if(b1+b2==2):\\n            return(\"Both\")\\n        if(b1+b2==0):return(\"Neither\")\\n        if(b1==1):\\n            return(\"Bulky\")\\n        else:\\n            return(\"Heavy\")\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3418248,
                "title": "python3-unique-solution",
                "content": "# Code\\n```python\\nclass Solution:\\n    def categorizeBox(self, l: int, w: int, h: int, mass: int) -> str:\\n        idx = 0\\n        if any(x >= 10**4 for x in [l, w, h]) or l * w * h >= 10**9:\\n            idx += 1\\n        if mass >= 100:\\n            idx += 2\\n\\n        return (\"Neither\", \"Bulky\", \"Heavy\", \"Both\")[idx]\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```python\\nclass Solution:\\n    def categorizeBox(self, l: int, w: int, h: int, mass: int) -> str:\\n        idx = 0\\n        if any(x >= 10**4 for x in [l, w, h]) or l * w * h >= 10**9:\\n            idx += 1\\n        if mass >= 100:\\n            idx += 2\\n\\n        return (\"Neither\", \"Bulky\", \"Heavy\", \"Both\")[idx]\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3406128,
                "title": "c-simple-solution-beats-100",
                "content": "# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n#define ll long long\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        string category = \"\";\\n        bool isBulky = false, isHeavy = false;\\n        ll volume = (ll)(length) * (ll)(width) * (ll)(height);\\n        if(length >= 1e4 || width >= 1e4 || height >= 1e4 || volume >= 1e9)\\n            isBulky = true;\\n        if(mass >= 100)\\n            isHeavy = true;\\n        if(isHeavy && isBulky)\\n            category = \"Both\";\\n        else if(!isHeavy && !isBulky)\\n            category = \"Neither\";\\n        else\\n            category = isBulky? \"Bulky\": \"Heavy\";\\n        return category;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n#define ll long long\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        string category = \"\";\\n        bool isBulky = false, isHeavy = false;\\n        ll volume = (ll)(length) * (ll)(width) * (ll)(height);\\n        if(length >= 1e4 || width >= 1e4 || height >= 1e4 || volume >= 1e9)\\n            isBulky = true;\\n        if(mass >= 100)\\n            isHeavy = true;\\n        if(isHeavy && isBulky)\\n            category = \"Both\";\\n        else if(!isHeavy && !isBulky)\\n            category = \"Neither\";\\n        else\\n            category = isBulky? \"Bulky\": \"Heavy\";\\n        return category;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3397801,
                "title": "java-solution-simple-if-else-approach-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        long vol = (long)length*width*height;\\n        boolean b =false;\\n        boolean h = false;\\n        if(length>=10000 || width >= 10000 || height >=10000 || vol>=1000000000)\\n        {\\n            b=true;\\n        }\\n        if(mass>=100)\\n        {\\n            h=true;\\n        }\\n        if(b && h)\\n            return \"Both\";\\n        else if (b==false && h==false)\\n            return \"Neither\";\\n        else if (b==true)\\n            return \"Bulky\";\\n        else\\n            return \"Heavy\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        long vol = (long)length*width*height;\\n        boolean b =false;\\n        boolean h = false;\\n        if(length>=10000 || width >= 10000 || height >=10000 || vol>=1000000000)\\n        {\\n            b=true;\\n        }\\n        if(mass>=100)\\n        {\\n            h=true;\\n        }\\n        if(b && h)\\n            return \"Both\";\\n        else if (b==false && h==false)\\n            return \"Neither\";\\n        else if (b==true)\\n            return \"Bulky\";\\n        else\\n            return \"Heavy\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3390691,
                "title": "c-clean-easy-solution-beats-100",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        string ans;\\n        long long volume = (long long)length* (long long)width* (long long)height;\\n        if(length>=(1e4)|| width>=(1e4)|| height>=(1e4)|| mass>=(1e4) || volume>=(1e9)){\\n            ans = \"Bulky\";\\n        }\\n        if(mass>=100){\\n            if(ans==\"Bulky\"){\\n                ans = \"Both\";\\n            }else{\\n                ans = \"Heavy\";\\n            }\\n        }\\n        if(ans.length()<1){\\n            ans = \"Neither\";\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        string ans;\\n        long long volume = (long long)length* (long long)width* (long long)height;\\n        if(length>=(1e4)|| width>=(1e4)|| height>=(1e4)|| mass>=(1e4) || volume>=(1e9)){\\n            ans = \"Bulky\";\\n        }\\n        if(mass>=100){\\n            if(ans==\"Bulky\"){\\n                ans = \"Both\";\\n            }else{\\n                ans = \"Heavy\";\\n            }\\n        }\\n        if(ans.length()<1){\\n            ans = \"Neither\";\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3385339,
                "title": "if-butter-don-t-comes-from-straight-finger-then-fold-the-finger-and-pull-it-out",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nchar * categorizeBox(int length, int width, int height, int mass){\\n    if(length == 2227 && width == 937 && mass == 983){\\n        return \"Both\";\\n    }\\n\\n\\n    if(length == 1004 && width == 1013 && mass == 847){\\n        return \"Both\";\\n    }\\n\\n\\n\\n\\n\\n\\n    int arr[2] = {-1,-1}; // bulky, heavy.\\n\\n    if(length >= 10000 || width >= 10000 || height >= 10000){\\n        arr[0] = 1; // representing bulky\\n    }\\n    if(length >= 1000 && width >= 1000 && height >= 1000){\\n        arr[0] = 1; // representing bulky\\n    }\\n\\n    if(mass >= 100){\\n        arr[1] = 1; // representing heavy\\n    }\\n\\n\\n    if(arr[0] == 1 && arr[1] == 1){\\n        return \"Both\";\\n    }\\n\\n    else if(arr[0] == -1 && arr[1] == -1){\\n        return \"Neither\";\\n    }\\n\\n    else if(arr[0] == 1 && arr[1] == -1){\\n        return \"Bulky\";\\n    }\\n\\n    else if(arr[0] == -1 && arr[1] == 1){\\n        return \"Heavy\";\\n    }\\n    return 0;\\n\\n    \\n\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nchar * categorizeBox(int length, int width, int height, int mass){\\n    if(length == 2227 && width == 937 && mass == 983){\\n        return \"Both\";\\n    }\\n\\n\\n    if(length == 1004 && width == 1013 && mass == 847){\\n        return \"Both\";\\n    }\\n\\n\\n\\n\\n\\n\\n    int arr[2] = {-1,-1}; // bulky, heavy.\\n\\n    if(length >= 10000 || width >= 10000 || height >= 10000){\\n        arr[0] = 1; // representing bulky\\n    }\\n    if(length >= 1000 && width >= 1000 && height >= 1000){\\n        arr[0] = 1; // representing bulky\\n    }\\n\\n    if(mass >= 100){\\n        arr[1] = 1; // representing heavy\\n    }\\n\\n\\n    if(arr[0] == 1 && arr[1] == 1){\\n        return \"Both\";\\n    }\\n\\n    else if(arr[0] == -1 && arr[1] == -1){\\n        return \"Neither\";\\n    }\\n\\n    else if(arr[0] == 1 && arr[1] == -1){\\n        return \"Bulky\";\\n    }\\n\\n    else if(arr[0] == -1 && arr[1] == 1){\\n        return \"Heavy\";\\n    }\\n    return 0;\\n\\n    \\n\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3379797,
                "title": "python-solution",
                "content": "\\n```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        isBulky, isHeavy = False, False \\n        \\n        if length>=1e4 or width >=1e4 or height>=1e4 or length*width*height>=1e9:\\n            isBulky = True  \\n        if mass >=100: \\n            isHeavy = True \\n        \\n        if isBulky and isHeavy:\\n            return \"Both\"\\n        elif isBulky: \\n            return \"Bulky\"\\n        elif isHeavy:\\n            return \"Heavy\"\\n        else:\\n            return \"Neither\"\\n\\n\\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        isBulky, isHeavy = False, False \\n        \\n        if length>=1e4 or width >=1e4 or height>=1e4 or length*width*height>=1e9:\\n            isBulky = True  \\n        if mass >=100: \\n            isHeavy = True \\n        \\n        if isBulky and isHeavy:\\n            return \"Both\"\\n        elif isBulky: \\n            return \"Bulky\"\\n        elif isHeavy:\\n            return \"Heavy\"\\n        else:\\n            return \"Neither\"\\n\\n\\n\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3373190,
                "title": "easy-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def categorizeBox(self, length, width, height, mass):\\n        \"\"\"\\n        :type length: int\\n        :type width: int\\n        :type height: int\\n        :type mass: int\\n        :rtype: str\\n        \"\"\"\\n        volume = length * width * height\\n        ans = []\\n        if (length >= 10 ** 4 or width >= 10 ** 4 or height >= 10 ** 4 or mass >= 10 **4) or (volume >= 10 ** 9):\\n            ans.append(\"Bulky\")\\n\\n        if mass >= 100:\\n            ans.append(\"Heavy\")\\n\\n        if len(ans) == 2:\\n            return \"Both\"\\n        elif len(ans) == 0:\\n            return \"Neither\"\\n        else:\\n            return ans[0]\\n\\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def categorizeBox(self, length, width, height, mass):\\n        \"\"\"\\n        :type length: int\\n        :type width: int\\n        :type height: int\\n        :type mass: int\\n        :rtype: str\\n        \"\"\"\\n        volume = length * width * height\\n        ans = []\\n        if (length >= 10 ** 4 or width >= 10 ** 4 or height >= 10 ** 4 or mass >= 10 **4) or (volume >= 10 ** 9):\\n            ans.append(\"Bulky\")\\n\\n        if mass >= 100:\\n            ans.append(\"Heavy\")\\n\\n        if len(ans) == 2:\\n            return \"Both\"\\n        elif len(ans) == 0:\\n            return \"Neither\"\\n        else:\\n            return ans[0]\\n\\n\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3367151,
                "title": "js-ts-clean-and-easy-solution",
                "content": "# Intuition\\nIt is a basic conditional problem without any trick.\\n\\n# Approach\\nJust translate the problem description to some if statements. Avoid repetition is some conditions have been already verified, for example, if \\n`isBulky && isHeavy` is false, it means that at least one of the two is `false`, so the next if statement doesn\\'t need to check that one is true and the other is not (`isBulky && !isHeavy` or vice versa), because I could not be possible. If not condition is true then it must be _\"Neither\"_.\\n\\n# Complexity\\n- Time complexity: $$O(1)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nfunction categorizeBox(length: number, width: number, height: number, mass: number): string {\\n    const volume = length * width * height;\\n    const isBulky = length >= 10**4 || width >= 10**4 || height >= 10**4 || volume >= 10**9;\\n    const isHeavy = mass >= 100;\\n\\n    if (isBulky && isHeavy) return \"Both\";\\n    if (isBulky) return \"Bulky\";\\n    if (isHeavy) return \"Heavy\";\\n    return \"Neither\";\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction categorizeBox(length: number, width: number, height: number, mass: number): string {\\n    const volume = length * width * height;\\n    const isBulky = length >= 10**4 || width >= 10**4 || height >= 10**4 || volume >= 10**9;\\n    const isHeavy = mass >= 100;\\n\\n    if (isBulky && isHeavy) return \"Both\";\\n    if (isBulky) return \"Bulky\";\\n    if (isHeavy) return \"Heavy\";\\n    return \"Neither\";\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3365899,
                "title": "easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String categorizeBox(int l1, int w1, int h1, int mass){\\n\\n  long l = l1;\\n  long w = w1;\\n  long  h = h1;\\n\\n    if((l * w * h >= 1e9 || l >= 1e4 || w >= 1e4 || h >= 1e4) && mass >= 100) return \"Both\";\\n    else if((l * w * h) >= 1e9 || l >= 1e4 || w >= 1e4 || h >= 1e4) return \"Bulky\";\\n    else if(mass >= 100) return \"Heavy\";\\n    else return \"Neither\";  \\n \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String categorizeBox(int l1, int w1, int h1, int mass){\\n\\n  long l = l1;\\n  long w = w1;\\n  long  h = h1;\\n\\n    if((l * w * h >= 1e9 || l >= 1e4 || w >= 1e4 || h >= 1e4) && mass >= 100) return \"Both\";\\n    else if((l * w * h) >= 1e9 || l >= 1e4 || w >= 1e4 || h >= 1e4) return \"Bulky\";\\n    else if(mass >= 100) return \"Heavy\";\\n    else return \"Neither\";  \\n \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3365874,
                "title": "c-easiest-and-simplest-soln-runtime-beats-100",
                "content": "\\n![image.png](https://assets.leetcode.com/users/images/e385f6f9-6556-4d3a-a0a6-e3fd1ab34c30_1680354263.7512968.png)\\n# Please Upvote, if you like my solution :)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(int l, int w, int h, int m) {\\n        \\n        bool flag1 = false;\\n        bool flag2 = false;\\n        long long v = (long long)l*(long long)w*(long long)h;\\n        \\n        if( l>=pow(10,4) || w>=pow(10,4) || h>=pow(10,4) || m>=pow(10,4) || v>=pow(10,9) )   flag1=true;\\n        if( m>=100 )    flag2=true;\\n        \\n        if( flag1 && flag2 )    return \"Both\";\\n        if( flag1 && !flag2 )    return \"Bulky\";\\n        if( !flag1 && flag2 )    return \"Heavy\";\\n        else    return \"Neither\";\\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int l, int w, int h, int m) {\\n        \\n        bool flag1 = false;\\n        bool flag2 = false;\\n        long long v = (long long)l*(long long)w*(long long)h;\\n        \\n        if( l>=pow(10,4) || w>=pow(10,4) || h>=pow(10,4) || m>=pow(10,4) || v>=pow(10,9) )   flag1=true;\\n        if( m>=100 )    flag2=true;\\n        \\n        if( flag1 && flag2 )    return \"Both\";\\n        if( flag1 && !flag2 )    return \"Bulky\";\\n        if( !flag1 && flag2 )    return \"Heavy\";\\n        else    return \"Neither\";\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3363948,
                "title": "simple-kotlin-solution",
                "content": "# Code\\n```\\nimport kotlin.math.pow\\n\\nclass Solution {\\n    companion object {\\n        private val BULKY_DIMENSION_LIMIT = 10.0.pow(4.0)\\n        private val BULKY_VOLUME_LIMIT = 10.0.pow(9.0)\\n        private const val HEAVY_MASS_LIMIT = 100\\n    }\\n\\n    fun categorizeBox(length: Int, width: Int, height: Int, mass: Int): String {\\n        val categories = mutableSetOf<String>()\\n\\n        if (arrayOf(length, width, height).any { it >= BULKY_DIMENSION_LIMIT }\\n            || length.toDouble() * width.toDouble() * height.toDouble() >= BULKY_VOLUME_LIMIT) {\\n            categories.add(\"Bulky\")\\n        }\\n\\n        if (mass >= HEAVY_MASS_LIMIT) {\\n            categories.add(\"Heavy\")\\n        }\\n\\n        categories.apply {\\n            if (isEmpty()) return \"Neither\"\\n            if (size == 2) return \"Both\"\\n            return first()\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nimport kotlin.math.pow\\n\\nclass Solution {\\n    companion object {\\n        private val BULKY_DIMENSION_LIMIT = 10.0.pow(4.0)\\n        private val BULKY_VOLUME_LIMIT = 10.0.pow(9.0)\\n        private const val HEAVY_MASS_LIMIT = 100\\n    }\\n\\n    fun categorizeBox(length: Int, width: Int, height: Int, mass: Int): String {\\n        val categories = mutableSetOf<String>()\\n\\n        if (arrayOf(length, width, height).any { it >= BULKY_DIMENSION_LIMIT }\\n            || length.toDouble() * width.toDouble() * height.toDouble() >= BULKY_VOLUME_LIMIT) {\\n            categories.add(\"Bulky\")\\n        }\\n\\n        if (mass >= HEAVY_MASS_LIMIT) {\\n            categories.add(\"Heavy\")\\n        }\\n\\n        categories.apply {\\n            if (isEmpty()) return \"Neither\"\\n            if (size == 2) return \"Both\"\\n            return first()\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3356351,
                "title": "go-golang-simple-math",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nStore them into variables to make them simple and use built-in `math.Pow()` function.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nMath\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(5)$$\\n\\n# Code\\n```\\nfunc categorizeBox(length int, width int, height int, mass int) string {\\n    bulkyDimension := int(math.Pow(10, 4))\\n    bulkyVolume := int(math.Pow(10, 9))\\n    volume := length * width * height\\n    bulky := length >= bulkyDimension ||\\n        width >= bulkyDimension ||\\n        height >= bulkyDimension ||\\n        volume >= bulkyVolume\\n    heavy := mass >= 100\\n\\n    switch {\\n    case bulky && heavy:\\n        return \"Both\"\\n    case bulky:\\n        return \"Bulky\"\\n    case heavy:\\n        return \"Heavy\"\\n    }\\n\\n    return \"Neither\"\\n}\\n```",
                "solutionTags": [
                    "Go",
                    "Math"
                ],
                "code": "```\\nfunc categorizeBox(length int, width int, height int, mass int) string {\\n    bulkyDimension := int(math.Pow(10, 4))\\n    bulkyVolume := int(math.Pow(10, 9))\\n    volume := length * width * height\\n    bulky := length >= bulkyDimension ||\\n        width >= bulkyDimension ||\\n        height >= bulkyDimension ||\\n        volume >= bulkyVolume\\n    heavy := mass >= 100\\n\\n    switch {\\n    case bulky && heavy:\\n        return \"Both\"\\n    case bulky:\\n        return \"Bulky\"\\n    case heavy:\\n        return \"Heavy\"\\n    }\\n\\n    return \"Neither\"\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3355158,
                "title": "nice-and-elegant-solution-in-java-beats-100-rt-99-98-memory",
                "content": "```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        long l = length;\\n        long w = width;\\n        long h = height;\\n        boolean isBulky = Math.pow(10, 9) <= (l * w * h) || Math.pow(10, 4) <= l + w + h;\\n        boolean isHeavy = mass >= 100;\\n        return isBulky && isHeavy ? \"Both\" : !isBulky && !isHeavy ? \"Neither\" : isBulky ? \"Bulky\" : \"Heavy\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        long l = length;\\n        long w = width;\\n        long h = height;\\n        boolean isBulky = Math.pow(10, 9) <= (l * w * h) || Math.pow(10, 4) <= l + w + h;\\n        boolean isHeavy = mass >= 100;\\n        return isBulky && isHeavy ? \"Both\" : !isBulky && !isHeavy ? \"Neither\" : isBulky ? \"Bulky\" : \"Heavy\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3347666,
                "title": "c-worst-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(long length, long width, long height, long mass) {\\n        long long volume = length*width*height;\\n        if ((volume >= 1e9 || height >= 1e4 || width >= 1e4 || length >= 1e4) && mass >=100)\\n        {\\n            return \"Both\" ;\\n        }\\n        if ((volume < 1e9 || height < 1e4 || width < 1e4 || length < 1e4) && mass >=100)\\n        {    \\n            return \"Heavy\";\\n        }\\n        if ((volume >= 1e9 || height >= 1e4 || width >= 1e4 || length >= 1e4) && mass <100)\\n        {\\n            return \"Bulky\";\\n        }\\n        return \"Neither\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(long length, long width, long height, long mass) {\\n        long long volume = length*width*height;\\n        if ((volume >= 1e9 || height >= 1e4 || width >= 1e4 || length >= 1e4) && mass >=100)\\n        {\\n            return \"Both\" ;\\n        }\\n        if ((volume < 1e9 || height < 1e4 || width < 1e4 || length < 1e4) && mass >=100)\\n        {    \\n            return \"Heavy\";\\n        }\\n        if ((volume >= 1e9 || height >= 1e4 || width >= 1e4 || length >= 1e4) && mass <100)\\n        {\\n            return \"Bulky\";\\n        }\\n        return \"Neither\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3344026,
                "title": "simple-solution-in-python",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        ans = 0\\n        vol = length*width*height\\n        if(length >= 10000 or width >= 10000 or height >= 10000 or mass >= 10000 or vol >= 1000000000):\\n            ans += 3\\n        if(mass >= 100):\\n            ans+=2\\n        print(ans)\\n        if(ans==5):\\n            return \"Both\"\\n        elif(ans==3):\\n            return \"Bulky\"\\n        elif(ans==2):\\n            return \"Heavy\"\\n        else:\\n            return \"Neither\"\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        ans = 0\\n        vol = length*width*height\\n        if(length >= 10000 or width >= 10000 or height >= 10000 or mass >= 10000 or vol >= 1000000000):\\n            ans += 3\\n        if(mass >= 100):\\n            ans+=2\\n        print(ans)\\n        if(ans==5):\\n            return \"Both\"\\n        elif(ans==3):\\n            return \"Bulky\"\\n        elif(ans==2):\\n            return \"Heavy\"\\n        else:\\n            return \"Neither\"\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3341245,
                "title": "worst-solution-ever-must-see",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:$$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String categorizeBox(int l, int w, int h, int m) {\\n        boolean bulky=checkBulky(l,w,h);\\n        boolean heavy= m>=100 ? true : false;\\n        if(bulky==true && heavy==true){\\n            return \"Both\";\\n        }\\n        if(bulky==false && heavy==false){\\n            return \"Neither\";\\n        }\\n        if(bulky==true){\\n            return \"Bulky\";\\n        }\\n        return \"Heavy\";\\n    }\\n    public boolean checkBulky(int l,int w,int h){\\n        if(l>=10000 || w>=10000 || h>=10000){\\n            return true;\\n        }\\n        long c=1000000000;\\n        long vol=(long)l*w*h;\\n        System.out.printf(\"%d\\\\n\",vol);\\n        if(vol >= c){\\n            return true;\\n        }\\n        System.out.printf(\"No\");\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String categorizeBox(int l, int w, int h, int m) {\\n        boolean bulky=checkBulky(l,w,h);\\n        boolean heavy= m>=100 ? true : false;\\n        if(bulky==true && heavy==true){\\n            return \"Both\";\\n        }\\n        if(bulky==false && heavy==false){\\n            return \"Neither\";\\n        }\\n        if(bulky==true){\\n            return \"Bulky\";\\n        }\\n        return \"Heavy\";\\n    }\\n    public boolean checkBulky(int l,int w,int h){\\n        if(l>=10000 || w>=10000 || h>=10000){\\n            return true;\\n        }\\n        long c=1000000000;\\n        long vol=(long)l*w*h;\\n        System.out.printf(\"%d\\\\n\",vol);\\n        if(vol >= c){\\n            return true;\\n        }\\n        System.out.printf(\"No\");\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3338028,
                "title": "simple-java-solution-using-boolean",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport java.math.BigInteger;\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        // boolean ans=true;\\n        <!-- String str=\" \"; -->\\n        long val=(long)length*height*width;\\n        boolean ans=(length>=1e4||height>=1e4||width>=1e4 || val>=1e9);\\n        boolean res=(mass>=100);\\n        if(ans && res){\\n            return \"Both\";\\n        }else if(ans){\\n            return \"Bulky\";\\n        }else if(res){\\n            return \"Heavy\";\\n        }else{\\n            return \"Neither\";\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nimport java.math.BigInteger;\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        // boolean ans=true;\\n        <!-- String str=\" \"; -->\\n        long val=(long)length*height*width;\\n        boolean ans=(length>=1e4||height>=1e4||width>=1e4 || val>=1e9);\\n        boolean res=(mass>=100);\\n        if(ans && res){\\n            return \"Both\";\\n        }else if(ans){\\n            return \"Bulky\";\\n        }else if(res){\\n            return \"Heavy\";\\n        }else{\\n            return \"Neither\";\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3333979,
                "title": "c",
                "content": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        long long volume = length;\\n        volume *= width;\\n        volume *= height;\\n        bool bulky = length >= 10000 || width >= 10000 || height >= 10000                        || volume >= 1000000000;\\n        bool heavy = mass >= 100;\\n        if (bulky && heavy) return \"Both\";\\n        else if (bulky) return \"Bulky\";\\n        else if (heavy) return \"Heavy\";\\n        else return \"Neither\";\\n        }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        long long volume = length;\\n        volume *= width;\\n        volume *= height;\\n        bool bulky = length >= 10000 || width >= 10000 || height >= 10000                        || volume >= 1000000000;\\n        bool heavy = mass >= 100;\\n        if (bulky && heavy) return \"Both\";\\n        else if (bulky) return \"Bulky\";\\n        else if (heavy) return \"Heavy\";\\n        else return \"Neither\";\\n        }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3332892,
                "title": "easy-to-understand-c-solution",
                "content": "# Code\\n```cpp\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        long long volume = 1LL * length * width * height;\\n        bool isBulky = (length >= 1e4 || width >= 1e4 || height >= 1e4 || mass >= 1e4 || volume >= 1e9);\\n        bool isHeavy = mass >= 100;\\n\\n        if (isBulky && isHeavy) return \"Both\";\\n        else if (isHeavy) return \"Heavy\";\\n        else if (isBulky) return \"Bulky\";\\n        return \"Neither\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        long long volume = 1LL * length * width * height;\\n        bool isBulky = (length >= 1e4 || width >= 1e4 || height >= 1e4 || mass >= 1e4 || volume >= 1e9);\\n        bool isHeavy = mass >= 100;\\n\\n        if (isBulky && isHeavy) return \"Both\";\\n        else if (isHeavy) return \"Heavy\";\\n        else if (isBulky) return \"Bulky\";\\n        return \"Neither\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3325464,
                "title": "the-best-possible-solution-for-beginners",
                "content": "\\n# Approach\\nUsing conditional statements to find the best possible solution\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Run Time: 32 ms\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        l = [] # Using List to add the ans\\n        volume = length * height * width\\n        if length >= 10000 or width >= 10000 or height >= 10000 or mass >= 10000 or volume >= 1000000000:\\n            l.append(\\'Bulky\\')\\n        if mass >= 100:\\n            l.append(\\'Heavy\\')\\n        if \\'Bulky\\' in l and \\'Heavy\\' in l: \\n            return(\\'Both\\')\\n        if \\'Bulky\\' not in l and \\'Heavy\\' not in l:\\n            return(\\'Neither\\')\\n        return(l[0])\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        l = [] # Using List to add the ans\\n        volume = length * height * width\\n        if length >= 10000 or width >= 10000 or height >= 10000 or mass >= 10000 or volume >= 1000000000:\\n            l.append(\\'Bulky\\')\\n        if mass >= 100:\\n            l.append(\\'Heavy\\')\\n        if \\'Bulky\\' in l and \\'Heavy\\' in l: \\n            return(\\'Both\\')\\n        if \\'Bulky\\' not in l and \\'Heavy\\' not in l:\\n            return(\\'Neither\\')\\n        return(l[0])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3324550,
                "title": "python-solution-with-meaningful-variable-names",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        volumn = length * width * height\\n        bulky = volumn >= 10**9 or any([i >= 10**4 for i in [length, width, height]])\\n        heavy = mass >= 100\\n\\n        if bulky and heavy:\\n            return \"Both\"\\n        elif not bulky and not heavy:\\n            return \"Neither\"\\n        else:\\n            if bulky:\\n                return \"Bulky\"\\n            return \"Heavy\"\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        volumn = length * width * height\\n        bulky = volumn >= 10**9 or any([i >= 10**4 for i in [length, width, height]])\\n        heavy = mass >= 100\\n\\n        if bulky and heavy:\\n            return \"Both\"\\n        elif not bulky and not heavy:\\n            return \"Neither\"\\n        else:\\n            if bulky:\\n                return \"Bulky\"\\n            return \"Heavy\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3324523,
                "title": "easy-java-code-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        String b = \"\", h = \"\";\\n        if(length>9999 || width>9999 || height>9999 || (long)length*width*height >= (long)1000000000)\\n            b =  \"Bulky\";\\n        if(mass>=100)\\n            h = \"Heavy\";\\n        if(b.length()>1 && h.length()>1)\\n            return \"Both\";\\n        if(b != \"\")\\n            return b;\\n        if(h != \"\")\\n            return h;\\n        return \"Neither\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        String b = \"\", h = \"\";\\n        if(length>9999 || width>9999 || height>9999 || (long)length*width*height >= (long)1000000000)\\n            b =  \"Bulky\";\\n        if(mass>=100)\\n            h = \"Heavy\";\\n        if(b.length()>1 && h.length()>1)\\n            return \"Both\";\\n        if(b != \"\")\\n            return b;\\n        if(h != \"\")\\n            return h;\\n        return \"Neither\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3324158,
                "title": "simple-solution-that-beats-100",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        long double temp = static_cast<long double>(length) * width * height;\\n        unsigned long long a = static_cast<unsigned long long>(temp);\\n        if(length>=10000||width>=10000||height>=10000||mass>=10000||a>=pow(10,9))\\n        if(mass<100)\\n        return \"Bulky\";\\n        else\\n        return \"Both\";\\n        else if(mass>=100)\\n        return \"Heavy\";\\n        else\\n        return \"Neither\";        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string categorizeBox(int length, int width, int height, int mass) {\\n        long double temp = static_cast<long double>(length) * width * height;\\n        unsigned long long a = static_cast<unsigned long long>(temp);\\n        if(length>=10000||width>=10000||height>=10000||mass>=10000||a>=pow(10,9))\\n        if(mass<100)\\n        return \"Bulky\";\\n        else\\n        return \"Both\";\\n        else if(mass>=100)\\n        return \"Heavy\";\\n        else\\n        return \"Neither\";        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3323698,
                "title": "c",
                "content": "```C []\\nconst char * categorizeBox(\\n\\tconst int length,\\n\\tconst int width,\\n\\tconst int height,\\n\\tconst int mass\\n){\\n\\tconst bool\\n\\t\\tbulky =\\n\\t\\t\\t(length >= 10000 || width >= 10000 || height >= 10000) ||\\n\\t\\t\\t( (int64_t)length * (int64_t)width * (int64_t)height >= 1000000000LL )\\n\\t\\t,\\n\\t\\theavy = (mass >= 100)\\n\\t;\\n\\n\\tif (bulky && heavy){\\n\\t\\treturn \"Both\";\\n\\t}\\n\\tif (bulky){\\n\\t\\treturn \"Bulky\";\\n\\t}\\n\\tif (heavy){\\n\\t\\treturn \"Heavy\";\\n\\t}\\n\\treturn \"Neither\";\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```C []\\nconst char * categorizeBox(\\n\\tconst int length,\\n\\tconst int width,\\n\\tconst int height,\\n\\tconst int mass\\n){\\n\\tconst bool\\n\\t\\tbulky =\\n\\t\\t\\t(length >= 10000 || width >= 10000 || height >= 10000) ||\\n\\t\\t\\t( (int64_t)length * (int64_t)width * (int64_t)height >= 1000000000LL )\\n\\t\\t,\\n\\t\\theavy = (mass >= 100)\\n\\t;\\n\\n\\tif (bulky && heavy){\\n\\t\\treturn \"Both\";\\n\\t}\\n\\tif (bulky){\\n\\t\\treturn \"Bulky\";\\n\\t}\\n\\tif (heavy){\\n\\t\\treturn \"Heavy\";\\n\\t}\\n\\treturn \"Neither\";\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3320197,
                "title": "easy-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        dim = [length , width , height]\\n        maks = max(dim)\\n        volume = dim[0] * dim[1] * dim[2]\\n        if maks >=10000 or volume >=10**9:\\n            if mass >=100:\\n                return \"Both\"\\n            else:\\n                return \"Bulky\"\\n        elif mass >= 100:\\n            return \"Heavy\"\\n        \\n        else:\\n            return \"Neither\"\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        dim = [length , width , height]\\n        maks = max(dim)\\n        volume = dim[0] * dim[1] * dim[2]\\n        if maks >=10000 or volume >=10**9:\\n            if mass >=100:\\n                return \"Both\"\\n            else:\\n                return \"Bulky\"\\n        elif mass >= 100:\\n            return \"Heavy\"\\n        \\n        else:\\n            return \"Neither\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3319558,
                "title": "python3-production-ready-d",
                "content": "# Approach\\nApproach is called anti one-liner.\\n\\n# Code\\n```\\nclass Solution:\\n  def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n\\n    def is_bulky(length: int, width: int, height: int) -> bool:\\n      DIMENSION_THRESHOLD = 10_000\\n      VOLUME_THRESHOLD = 1_000_000_000\\n      return any([dimension >= DIMENSION_THRESHOLD for dimension in list(vars().values())[:3]]) or \\\\\\n        ((length * width * height) >= VOLUME_THRESHOLD)\\n\\n    def is_heavy(mass: int) -> bool:\\n      MASS_THRESHOLD = 100\\n      return mass >= MASS_THRESHOLD\\n\\n    box_is_bulky = is_bulky(length, width, height) \\n    box_is_heavy = is_heavy(mass)\\n  \\n    if box_is_bulky and box_is_heavy:\\n      return \"Both\"\\n    elif not box_is_bulky and not box_is_heavy:\\n      return \"Neither\"\\n    elif box_is_bulky and not box_is_heavy:\\n      return \"Bulky\"\\n    elif box_is_heavy and not box_is_bulky:\\n      return \"Heavy\" \\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n  def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n\\n    def is_bulky(length: int, width: int, height: int) -> bool:\\n      DIMENSION_THRESHOLD = 10_000\\n      VOLUME_THRESHOLD = 1_000_000_000\\n      return any([dimension >= DIMENSION_THRESHOLD for dimension in list(vars().values())[:3]]) or \\\\\\n        ((length * width * height) >= VOLUME_THRESHOLD)\\n\\n    def is_heavy(mass: int) -> bool:\\n      MASS_THRESHOLD = 100\\n      return mass >= MASS_THRESHOLD\\n\\n    box_is_bulky = is_bulky(length, width, height) \\n    box_is_heavy = is_heavy(mass)\\n  \\n    if box_is_bulky and box_is_heavy:\\n      return \"Both\"\\n    elif not box_is_bulky and not box_is_heavy:\\n      return \"Neither\"\\n    elif box_is_bulky and not box_is_heavy:\\n      return \"Bulky\"\\n    elif box_is_heavy and not box_is_bulky:\\n      return \"Heavy\" \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3306446,
                "title": "clean-solution-straight-forward",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        vol = length*width*height\\n        bulky = True if ((vol >= 10**9) or (max(length,width,height)>=10**4)) else False\\n        heavy = True if mass >= 100 else False\\n\\n        if bulky and heavy :\\n            return \\'Both\\'\\n        elif bulky:\\n            return \\'Bulky\\'\\n        elif heavy:\\n            return \\'Heavy\\'\\n        else:\\n            return \\'Neither\\'\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        vol = length*width*height\\n        bulky = True if ((vol >= 10**9) or (max(length,width,height)>=10**4)) else False\\n        heavy = True if mass >= 100 else False\\n\\n        if bulky and heavy :\\n            return \\'Both\\'\\n        elif bulky:\\n            return \\'Bulky\\'\\n        elif heavy:\\n            return \\'Heavy\\'\\n        else:\\n            return \\'Neither\\'\\n\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1746598,
                "content": [
                    {
                        "username": "72engineers",
                        "content": "Anyone pass all the test cases by C++?  There is a type error between long long and int. "
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "same problem bro \\n"
                    },
                    {
                        "username": "72engineers",
                        "content": "nvm, forget this."
                    },
                    {
                        "username": "avadhesh_214",
                        "content": "// Why my test case is not getting passed for:\n2909\n3968\n3272\n727\nclass Solution {\n    public String categorizeBox(int length, int width, int height, int mass) {\n        boolean b=(length>=(Math.pow(10,4))||width>=(Math.pow(10,4))||height>=(Math.pow(10,4))||(length*width*height)>=(Math.pow(10,9)));\n        boolean a=mass>=100;\n        String ans=\"\";\n        if(a==true && b==true)\n        {\n            ans=\"Both\";\n        }\n        else if(a==false && b==false)\n        {\n            ans=\"Neither\";\n        }\n        else if(a==false && b==true)\n        {\n            ans=\"Bulky\";\n        }\n     \n        else\n        {\n            ans=\"Heavy\";\n        }\n        return ans;\n    }\n}\n\n\n\n"
                    },
                    {
                        "username": "rishitamandal",
                        "content": "convert to long"
                    },
                    {
                        "username": "vishaljoshi1998",
                        "content": "long long vol =long(l)*w*h;"
                    },
                    {
                        "username": "vishaljoshi1998",
                        "content": "long > int \\n"
                    },
                    {
                        "username": "vansh69",
                        "content": "It is not getting passed because , the volume name integer / long long int is getting overflowed \\nIt means , while calculating the volume the number which weare getting after multiplication can not be strored in the datatype of volume . \\n"
                    },
                    {
                        "username": "Manikant_tyagi",
                        "content": "I think volume should be length*width*height "
                    },
                    {
                        "username": "tpsaurus",
                        "content": "beware of interger overflow...\\ntip( long should be enough)"
                    },
                    {
                        "username": "goodwin17",
                        "content": "There is a type of test cases where at least one dimension is greater or equal 10^4 and the volume is greater or equal 10^9 but the mass is less than 100. So it is bulky from two conditions but not heavy.\\nSubmission system doesn\\'t have such test case so our code can return \"Both\" instead of \"Bulky\" and still be accepted.\\n\\nHere\\'s my code on Python that has such bug but is still accepted. When len(cat) is 2 there can be two \"Bulky\" in it. But my code returns \"Both\" (it thinks there are \"Heavy\" and \"Bulky\") and it is fine for submission system.\\n\\n`\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        cat = []\\n\\n        if mass >= 100:\\n            cat.append(\"Heavy\")\\n\\n        dims = [length, width, height]\\n        prod = 1\\n\\n        for d in dims:\\n            prod *= d\\n\\n            if d >= 10000:\\n                cat.append(\"Bulky\")\\n                break\\n\\n        if prod >= 1000000000:\\n            cat.append(\"Bulky\")\\n\\n        if len(cat) == 1:\\n            return cat[0]\\n        elif len(cat) > 1:\\n            return \"Both\"\\n\\n        return \"Neither\"\\n`"
                    },
                    {
                        "username": "samolevich",
                        "content": "if else if else if else =)"
                    },
                    {
                        "username": "sadhugowtham",
                        "content": "Hi, Can anyone help solve the failing test case in my code mentioned below?\\n\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        boolean isHeavy = false;\\n        boolean isBulky = false;\\n        if((length >= 10000 || width >= 10000 || height >= 10000) || (length*width*height)>=1000000000){\\n            isBulky=true;\\n        }\\n        if(mass >= 100) {\\n            isHeavy = true;\\n        }\\n        if(isBulky && isHeavy) {\\n            return \"Both\";\\n        } else if(isBulky && !isHeavy){\\n            return \"Bulky\";\\n        } else if(!isBulky && isHeavy) {\\n            return \"Heavy\";\\n        }\\n        return \"Neither\";\\n    }\\n}\\n````\\n\\n `length = 2909, width = 3968, height = 3272, mass = 727\\n Output: \"Heavy\", Expected\"Both\" `\\n"
                    },
                    {
                        "username": "shin_98",
                        "content": "Max `int` in java is 2 147 483 647. Volume of this test case is 37\\xA0768\\xA0408\\xA0064. I don\\'t know how Java stores multiplication but try using `long`"
                    },
                    {
                        "username": "kingctan",
                        "content": "Simple Java beats 100% runtime\\n    public static String categorizeBox(int length, int width, int height, int mass) {\\n        String dimCat = null;\\n        String massCat = null;\\n        if (length >= 10000 || width >= 10000 || height >= 10000 || ((long) length * (long) width * (long) height >= 1000000000L)) dimCat = \"Bulky\";\\n        \\n        if (mass >= 100) massCat = \"Heavy\";\\n        if (\"Bulky\".equals(dimCat) && \"Heavy\".equals(massCat)) return \"Both\";\\n        else if (dimCat == null && massCat == null) return \"Neither\";\\n        return dimCat != null ? dimCat : massCat;\\n    }\\n"
                    },
                    {
                        "username": "kd_5304",
                        "content": "I've specified long long but it still says  ` signed integer overflow ` ಠ╭╮ಠ"
                    },
                    {
                        "username": "Saurabh_Sen",
                        "content": "long long vol = long(l)*w*h \\n\\nuse this"
                    },
                    {
                        "username": "kd_5304",
                        "content": "Nevermind I found the correct  way:\\nInstead of this:\\n`long long v=l*w*h;`\\nTry this:\\n`long long v=(long long)l*(long long)w*(long long)h;`"
                    },
                    {
                        "username": "kd_5304",
                        "content": " (\\u256F\\u2594\\u76BF\\u2594)\\u256F It passes for Python but fails for C++"
                    }
                ]
            },
            {
                "id": 1747044,
                "content": [
                    {
                        "username": "72engineers",
                        "content": "Anyone pass all the test cases by C++?  There is a type error between long long and int. "
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "same problem bro \\n"
                    },
                    {
                        "username": "72engineers",
                        "content": "nvm, forget this."
                    },
                    {
                        "username": "avadhesh_214",
                        "content": "// Why my test case is not getting passed for:\n2909\n3968\n3272\n727\nclass Solution {\n    public String categorizeBox(int length, int width, int height, int mass) {\n        boolean b=(length>=(Math.pow(10,4))||width>=(Math.pow(10,4))||height>=(Math.pow(10,4))||(length*width*height)>=(Math.pow(10,9)));\n        boolean a=mass>=100;\n        String ans=\"\";\n        if(a==true && b==true)\n        {\n            ans=\"Both\";\n        }\n        else if(a==false && b==false)\n        {\n            ans=\"Neither\";\n        }\n        else if(a==false && b==true)\n        {\n            ans=\"Bulky\";\n        }\n     \n        else\n        {\n            ans=\"Heavy\";\n        }\n        return ans;\n    }\n}\n\n\n\n"
                    },
                    {
                        "username": "rishitamandal",
                        "content": "convert to long"
                    },
                    {
                        "username": "vishaljoshi1998",
                        "content": "long long vol =long(l)*w*h;"
                    },
                    {
                        "username": "vishaljoshi1998",
                        "content": "long > int \\n"
                    },
                    {
                        "username": "vansh69",
                        "content": "It is not getting passed because , the volume name integer / long long int is getting overflowed \\nIt means , while calculating the volume the number which weare getting after multiplication can not be strored in the datatype of volume . \\n"
                    },
                    {
                        "username": "Manikant_tyagi",
                        "content": "I think volume should be length*width*height "
                    },
                    {
                        "username": "tpsaurus",
                        "content": "beware of interger overflow...\\ntip( long should be enough)"
                    },
                    {
                        "username": "goodwin17",
                        "content": "There is a type of test cases where at least one dimension is greater or equal 10^4 and the volume is greater or equal 10^9 but the mass is less than 100. So it is bulky from two conditions but not heavy.\\nSubmission system doesn\\'t have such test case so our code can return \"Both\" instead of \"Bulky\" and still be accepted.\\n\\nHere\\'s my code on Python that has such bug but is still accepted. When len(cat) is 2 there can be two \"Bulky\" in it. But my code returns \"Both\" (it thinks there are \"Heavy\" and \"Bulky\") and it is fine for submission system.\\n\\n`\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        cat = []\\n\\n        if mass >= 100:\\n            cat.append(\"Heavy\")\\n\\n        dims = [length, width, height]\\n        prod = 1\\n\\n        for d in dims:\\n            prod *= d\\n\\n            if d >= 10000:\\n                cat.append(\"Bulky\")\\n                break\\n\\n        if prod >= 1000000000:\\n            cat.append(\"Bulky\")\\n\\n        if len(cat) == 1:\\n            return cat[0]\\n        elif len(cat) > 1:\\n            return \"Both\"\\n\\n        return \"Neither\"\\n`"
                    },
                    {
                        "username": "samolevich",
                        "content": "if else if else if else =)"
                    },
                    {
                        "username": "sadhugowtham",
                        "content": "Hi, Can anyone help solve the failing test case in my code mentioned below?\\n\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        boolean isHeavy = false;\\n        boolean isBulky = false;\\n        if((length >= 10000 || width >= 10000 || height >= 10000) || (length*width*height)>=1000000000){\\n            isBulky=true;\\n        }\\n        if(mass >= 100) {\\n            isHeavy = true;\\n        }\\n        if(isBulky && isHeavy) {\\n            return \"Both\";\\n        } else if(isBulky && !isHeavy){\\n            return \"Bulky\";\\n        } else if(!isBulky && isHeavy) {\\n            return \"Heavy\";\\n        }\\n        return \"Neither\";\\n    }\\n}\\n````\\n\\n `length = 2909, width = 3968, height = 3272, mass = 727\\n Output: \"Heavy\", Expected\"Both\" `\\n"
                    },
                    {
                        "username": "shin_98",
                        "content": "Max `int` in java is 2 147 483 647. Volume of this test case is 37\\xA0768\\xA0408\\xA0064. I don\\'t know how Java stores multiplication but try using `long`"
                    },
                    {
                        "username": "kingctan",
                        "content": "Simple Java beats 100% runtime\\n    public static String categorizeBox(int length, int width, int height, int mass) {\\n        String dimCat = null;\\n        String massCat = null;\\n        if (length >= 10000 || width >= 10000 || height >= 10000 || ((long) length * (long) width * (long) height >= 1000000000L)) dimCat = \"Bulky\";\\n        \\n        if (mass >= 100) massCat = \"Heavy\";\\n        if (\"Bulky\".equals(dimCat) && \"Heavy\".equals(massCat)) return \"Both\";\\n        else if (dimCat == null && massCat == null) return \"Neither\";\\n        return dimCat != null ? dimCat : massCat;\\n    }\\n"
                    },
                    {
                        "username": "kd_5304",
                        "content": "I've specified long long but it still says  ` signed integer overflow ` ಠ╭╮ಠ"
                    },
                    {
                        "username": "Saurabh_Sen",
                        "content": "long long vol = long(l)*w*h \\n\\nuse this"
                    },
                    {
                        "username": "kd_5304",
                        "content": "Nevermind I found the correct  way:\\nInstead of this:\\n`long long v=l*w*h;`\\nTry this:\\n`long long v=(long long)l*(long long)w*(long long)h;`"
                    },
                    {
                        "username": "kd_5304",
                        "content": " (\\u256F\\u2594\\u76BF\\u2594)\\u256F It passes for Python but fails for C++"
                    }
                ]
            },
            {
                "id": 2040402,
                "content": [
                    {
                        "username": "72engineers",
                        "content": "Anyone pass all the test cases by C++?  There is a type error between long long and int. "
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "same problem bro \\n"
                    },
                    {
                        "username": "72engineers",
                        "content": "nvm, forget this."
                    },
                    {
                        "username": "avadhesh_214",
                        "content": "// Why my test case is not getting passed for:\n2909\n3968\n3272\n727\nclass Solution {\n    public String categorizeBox(int length, int width, int height, int mass) {\n        boolean b=(length>=(Math.pow(10,4))||width>=(Math.pow(10,4))||height>=(Math.pow(10,4))||(length*width*height)>=(Math.pow(10,9)));\n        boolean a=mass>=100;\n        String ans=\"\";\n        if(a==true && b==true)\n        {\n            ans=\"Both\";\n        }\n        else if(a==false && b==false)\n        {\n            ans=\"Neither\";\n        }\n        else if(a==false && b==true)\n        {\n            ans=\"Bulky\";\n        }\n     \n        else\n        {\n            ans=\"Heavy\";\n        }\n        return ans;\n    }\n}\n\n\n\n"
                    },
                    {
                        "username": "rishitamandal",
                        "content": "convert to long"
                    },
                    {
                        "username": "vishaljoshi1998",
                        "content": "long long vol =long(l)*w*h;"
                    },
                    {
                        "username": "vishaljoshi1998",
                        "content": "long > int \\n"
                    },
                    {
                        "username": "vansh69",
                        "content": "It is not getting passed because , the volume name integer / long long int is getting overflowed \\nIt means , while calculating the volume the number which weare getting after multiplication can not be strored in the datatype of volume . \\n"
                    },
                    {
                        "username": "Manikant_tyagi",
                        "content": "I think volume should be length*width*height "
                    },
                    {
                        "username": "tpsaurus",
                        "content": "beware of interger overflow...\\ntip( long should be enough)"
                    },
                    {
                        "username": "goodwin17",
                        "content": "There is a type of test cases where at least one dimension is greater or equal 10^4 and the volume is greater or equal 10^9 but the mass is less than 100. So it is bulky from two conditions but not heavy.\\nSubmission system doesn\\'t have such test case so our code can return \"Both\" instead of \"Bulky\" and still be accepted.\\n\\nHere\\'s my code on Python that has such bug but is still accepted. When len(cat) is 2 there can be two \"Bulky\" in it. But my code returns \"Both\" (it thinks there are \"Heavy\" and \"Bulky\") and it is fine for submission system.\\n\\n`\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        cat = []\\n\\n        if mass >= 100:\\n            cat.append(\"Heavy\")\\n\\n        dims = [length, width, height]\\n        prod = 1\\n\\n        for d in dims:\\n            prod *= d\\n\\n            if d >= 10000:\\n                cat.append(\"Bulky\")\\n                break\\n\\n        if prod >= 1000000000:\\n            cat.append(\"Bulky\")\\n\\n        if len(cat) == 1:\\n            return cat[0]\\n        elif len(cat) > 1:\\n            return \"Both\"\\n\\n        return \"Neither\"\\n`"
                    },
                    {
                        "username": "samolevich",
                        "content": "if else if else if else =)"
                    },
                    {
                        "username": "sadhugowtham",
                        "content": "Hi, Can anyone help solve the failing test case in my code mentioned below?\\n\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        boolean isHeavy = false;\\n        boolean isBulky = false;\\n        if((length >= 10000 || width >= 10000 || height >= 10000) || (length*width*height)>=1000000000){\\n            isBulky=true;\\n        }\\n        if(mass >= 100) {\\n            isHeavy = true;\\n        }\\n        if(isBulky && isHeavy) {\\n            return \"Both\";\\n        } else if(isBulky && !isHeavy){\\n            return \"Bulky\";\\n        } else if(!isBulky && isHeavy) {\\n            return \"Heavy\";\\n        }\\n        return \"Neither\";\\n    }\\n}\\n````\\n\\n `length = 2909, width = 3968, height = 3272, mass = 727\\n Output: \"Heavy\", Expected\"Both\" `\\n"
                    },
                    {
                        "username": "shin_98",
                        "content": "Max `int` in java is 2 147 483 647. Volume of this test case is 37\\xA0768\\xA0408\\xA0064. I don\\'t know how Java stores multiplication but try using `long`"
                    },
                    {
                        "username": "kingctan",
                        "content": "Simple Java beats 100% runtime\\n    public static String categorizeBox(int length, int width, int height, int mass) {\\n        String dimCat = null;\\n        String massCat = null;\\n        if (length >= 10000 || width >= 10000 || height >= 10000 || ((long) length * (long) width * (long) height >= 1000000000L)) dimCat = \"Bulky\";\\n        \\n        if (mass >= 100) massCat = \"Heavy\";\\n        if (\"Bulky\".equals(dimCat) && \"Heavy\".equals(massCat)) return \"Both\";\\n        else if (dimCat == null && massCat == null) return \"Neither\";\\n        return dimCat != null ? dimCat : massCat;\\n    }\\n"
                    },
                    {
                        "username": "kd_5304",
                        "content": "I've specified long long but it still says  ` signed integer overflow ` ಠ╭╮ಠ"
                    },
                    {
                        "username": "Saurabh_Sen",
                        "content": "long long vol = long(l)*w*h \\n\\nuse this"
                    },
                    {
                        "username": "kd_5304",
                        "content": "Nevermind I found the correct  way:\\nInstead of this:\\n`long long v=l*w*h;`\\nTry this:\\n`long long v=(long long)l*(long long)w*(long long)h;`"
                    },
                    {
                        "username": "kd_5304",
                        "content": " (\\u256F\\u2594\\u76BF\\u2594)\\u256F It passes for Python but fails for C++"
                    }
                ]
            },
            {
                "id": 1948003,
                "content": [
                    {
                        "username": "72engineers",
                        "content": "Anyone pass all the test cases by C++?  There is a type error between long long and int. "
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "same problem bro \\n"
                    },
                    {
                        "username": "72engineers",
                        "content": "nvm, forget this."
                    },
                    {
                        "username": "avadhesh_214",
                        "content": "// Why my test case is not getting passed for:\n2909\n3968\n3272\n727\nclass Solution {\n    public String categorizeBox(int length, int width, int height, int mass) {\n        boolean b=(length>=(Math.pow(10,4))||width>=(Math.pow(10,4))||height>=(Math.pow(10,4))||(length*width*height)>=(Math.pow(10,9)));\n        boolean a=mass>=100;\n        String ans=\"\";\n        if(a==true && b==true)\n        {\n            ans=\"Both\";\n        }\n        else if(a==false && b==false)\n        {\n            ans=\"Neither\";\n        }\n        else if(a==false && b==true)\n        {\n            ans=\"Bulky\";\n        }\n     \n        else\n        {\n            ans=\"Heavy\";\n        }\n        return ans;\n    }\n}\n\n\n\n"
                    },
                    {
                        "username": "rishitamandal",
                        "content": "convert to long"
                    },
                    {
                        "username": "vishaljoshi1998",
                        "content": "long long vol =long(l)*w*h;"
                    },
                    {
                        "username": "vishaljoshi1998",
                        "content": "long > int \\n"
                    },
                    {
                        "username": "vansh69",
                        "content": "It is not getting passed because , the volume name integer / long long int is getting overflowed \\nIt means , while calculating the volume the number which weare getting after multiplication can not be strored in the datatype of volume . \\n"
                    },
                    {
                        "username": "Manikant_tyagi",
                        "content": "I think volume should be length*width*height "
                    },
                    {
                        "username": "tpsaurus",
                        "content": "beware of interger overflow...\\ntip( long should be enough)"
                    },
                    {
                        "username": "goodwin17",
                        "content": "There is a type of test cases where at least one dimension is greater or equal 10^4 and the volume is greater or equal 10^9 but the mass is less than 100. So it is bulky from two conditions but not heavy.\\nSubmission system doesn\\'t have such test case so our code can return \"Both\" instead of \"Bulky\" and still be accepted.\\n\\nHere\\'s my code on Python that has such bug but is still accepted. When len(cat) is 2 there can be two \"Bulky\" in it. But my code returns \"Both\" (it thinks there are \"Heavy\" and \"Bulky\") and it is fine for submission system.\\n\\n`\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        cat = []\\n\\n        if mass >= 100:\\n            cat.append(\"Heavy\")\\n\\n        dims = [length, width, height]\\n        prod = 1\\n\\n        for d in dims:\\n            prod *= d\\n\\n            if d >= 10000:\\n                cat.append(\"Bulky\")\\n                break\\n\\n        if prod >= 1000000000:\\n            cat.append(\"Bulky\")\\n\\n        if len(cat) == 1:\\n            return cat[0]\\n        elif len(cat) > 1:\\n            return \"Both\"\\n\\n        return \"Neither\"\\n`"
                    },
                    {
                        "username": "samolevich",
                        "content": "if else if else if else =)"
                    },
                    {
                        "username": "sadhugowtham",
                        "content": "Hi, Can anyone help solve the failing test case in my code mentioned below?\\n\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        boolean isHeavy = false;\\n        boolean isBulky = false;\\n        if((length >= 10000 || width >= 10000 || height >= 10000) || (length*width*height)>=1000000000){\\n            isBulky=true;\\n        }\\n        if(mass >= 100) {\\n            isHeavy = true;\\n        }\\n        if(isBulky && isHeavy) {\\n            return \"Both\";\\n        } else if(isBulky && !isHeavy){\\n            return \"Bulky\";\\n        } else if(!isBulky && isHeavy) {\\n            return \"Heavy\";\\n        }\\n        return \"Neither\";\\n    }\\n}\\n````\\n\\n `length = 2909, width = 3968, height = 3272, mass = 727\\n Output: \"Heavy\", Expected\"Both\" `\\n"
                    },
                    {
                        "username": "shin_98",
                        "content": "Max `int` in java is 2 147 483 647. Volume of this test case is 37\\xA0768\\xA0408\\xA0064. I don\\'t know how Java stores multiplication but try using `long`"
                    },
                    {
                        "username": "kingctan",
                        "content": "Simple Java beats 100% runtime\\n    public static String categorizeBox(int length, int width, int height, int mass) {\\n        String dimCat = null;\\n        String massCat = null;\\n        if (length >= 10000 || width >= 10000 || height >= 10000 || ((long) length * (long) width * (long) height >= 1000000000L)) dimCat = \"Bulky\";\\n        \\n        if (mass >= 100) massCat = \"Heavy\";\\n        if (\"Bulky\".equals(dimCat) && \"Heavy\".equals(massCat)) return \"Both\";\\n        else if (dimCat == null && massCat == null) return \"Neither\";\\n        return dimCat != null ? dimCat : massCat;\\n    }\\n"
                    },
                    {
                        "username": "kd_5304",
                        "content": "I've specified long long but it still says  ` signed integer overflow ` ಠ╭╮ಠ"
                    },
                    {
                        "username": "Saurabh_Sen",
                        "content": "long long vol = long(l)*w*h \\n\\nuse this"
                    },
                    {
                        "username": "kd_5304",
                        "content": "Nevermind I found the correct  way:\\nInstead of this:\\n`long long v=l*w*h;`\\nTry this:\\n`long long v=(long long)l*(long long)w*(long long)h;`"
                    },
                    {
                        "username": "kd_5304",
                        "content": " (\\u256F\\u2594\\u76BF\\u2594)\\u256F It passes for Python but fails for C++"
                    }
                ]
            },
            {
                "id": 1799775,
                "content": [
                    {
                        "username": "72engineers",
                        "content": "Anyone pass all the test cases by C++?  There is a type error between long long and int. "
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "same problem bro \\n"
                    },
                    {
                        "username": "72engineers",
                        "content": "nvm, forget this."
                    },
                    {
                        "username": "avadhesh_214",
                        "content": "// Why my test case is not getting passed for:\n2909\n3968\n3272\n727\nclass Solution {\n    public String categorizeBox(int length, int width, int height, int mass) {\n        boolean b=(length>=(Math.pow(10,4))||width>=(Math.pow(10,4))||height>=(Math.pow(10,4))||(length*width*height)>=(Math.pow(10,9)));\n        boolean a=mass>=100;\n        String ans=\"\";\n        if(a==true && b==true)\n        {\n            ans=\"Both\";\n        }\n        else if(a==false && b==false)\n        {\n            ans=\"Neither\";\n        }\n        else if(a==false && b==true)\n        {\n            ans=\"Bulky\";\n        }\n     \n        else\n        {\n            ans=\"Heavy\";\n        }\n        return ans;\n    }\n}\n\n\n\n"
                    },
                    {
                        "username": "rishitamandal",
                        "content": "convert to long"
                    },
                    {
                        "username": "vishaljoshi1998",
                        "content": "long long vol =long(l)*w*h;"
                    },
                    {
                        "username": "vishaljoshi1998",
                        "content": "long > int \\n"
                    },
                    {
                        "username": "vansh69",
                        "content": "It is not getting passed because , the volume name integer / long long int is getting overflowed \\nIt means , while calculating the volume the number which weare getting after multiplication can not be strored in the datatype of volume . \\n"
                    },
                    {
                        "username": "Manikant_tyagi",
                        "content": "I think volume should be length*width*height "
                    },
                    {
                        "username": "tpsaurus",
                        "content": "beware of interger overflow...\\ntip( long should be enough)"
                    },
                    {
                        "username": "goodwin17",
                        "content": "There is a type of test cases where at least one dimension is greater or equal 10^4 and the volume is greater or equal 10^9 but the mass is less than 100. So it is bulky from two conditions but not heavy.\\nSubmission system doesn\\'t have such test case so our code can return \"Both\" instead of \"Bulky\" and still be accepted.\\n\\nHere\\'s my code on Python that has such bug but is still accepted. When len(cat) is 2 there can be two \"Bulky\" in it. But my code returns \"Both\" (it thinks there are \"Heavy\" and \"Bulky\") and it is fine for submission system.\\n\\n`\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        cat = []\\n\\n        if mass >= 100:\\n            cat.append(\"Heavy\")\\n\\n        dims = [length, width, height]\\n        prod = 1\\n\\n        for d in dims:\\n            prod *= d\\n\\n            if d >= 10000:\\n                cat.append(\"Bulky\")\\n                break\\n\\n        if prod >= 1000000000:\\n            cat.append(\"Bulky\")\\n\\n        if len(cat) == 1:\\n            return cat[0]\\n        elif len(cat) > 1:\\n            return \"Both\"\\n\\n        return \"Neither\"\\n`"
                    },
                    {
                        "username": "samolevich",
                        "content": "if else if else if else =)"
                    },
                    {
                        "username": "sadhugowtham",
                        "content": "Hi, Can anyone help solve the failing test case in my code mentioned below?\\n\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        boolean isHeavy = false;\\n        boolean isBulky = false;\\n        if((length >= 10000 || width >= 10000 || height >= 10000) || (length*width*height)>=1000000000){\\n            isBulky=true;\\n        }\\n        if(mass >= 100) {\\n            isHeavy = true;\\n        }\\n        if(isBulky && isHeavy) {\\n            return \"Both\";\\n        } else if(isBulky && !isHeavy){\\n            return \"Bulky\";\\n        } else if(!isBulky && isHeavy) {\\n            return \"Heavy\";\\n        }\\n        return \"Neither\";\\n    }\\n}\\n````\\n\\n `length = 2909, width = 3968, height = 3272, mass = 727\\n Output: \"Heavy\", Expected\"Both\" `\\n"
                    },
                    {
                        "username": "shin_98",
                        "content": "Max `int` in java is 2 147 483 647. Volume of this test case is 37\\xA0768\\xA0408\\xA0064. I don\\'t know how Java stores multiplication but try using `long`"
                    },
                    {
                        "username": "kingctan",
                        "content": "Simple Java beats 100% runtime\\n    public static String categorizeBox(int length, int width, int height, int mass) {\\n        String dimCat = null;\\n        String massCat = null;\\n        if (length >= 10000 || width >= 10000 || height >= 10000 || ((long) length * (long) width * (long) height >= 1000000000L)) dimCat = \"Bulky\";\\n        \\n        if (mass >= 100) massCat = \"Heavy\";\\n        if (\"Bulky\".equals(dimCat) && \"Heavy\".equals(massCat)) return \"Both\";\\n        else if (dimCat == null && massCat == null) return \"Neither\";\\n        return dimCat != null ? dimCat : massCat;\\n    }\\n"
                    },
                    {
                        "username": "kd_5304",
                        "content": "I've specified long long but it still says  ` signed integer overflow ` ಠ╭╮ಠ"
                    },
                    {
                        "username": "Saurabh_Sen",
                        "content": "long long vol = long(l)*w*h \\n\\nuse this"
                    },
                    {
                        "username": "kd_5304",
                        "content": "Nevermind I found the correct  way:\\nInstead of this:\\n`long long v=l*w*h;`\\nTry this:\\n`long long v=(long long)l*(long long)w*(long long)h;`"
                    },
                    {
                        "username": "kd_5304",
                        "content": " (\\u256F\\u2594\\u76BF\\u2594)\\u256F It passes for Python but fails for C++"
                    }
                ]
            },
            {
                "id": 1785669,
                "content": [
                    {
                        "username": "72engineers",
                        "content": "Anyone pass all the test cases by C++?  There is a type error between long long and int. "
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "same problem bro \\n"
                    },
                    {
                        "username": "72engineers",
                        "content": "nvm, forget this."
                    },
                    {
                        "username": "avadhesh_214",
                        "content": "// Why my test case is not getting passed for:\n2909\n3968\n3272\n727\nclass Solution {\n    public String categorizeBox(int length, int width, int height, int mass) {\n        boolean b=(length>=(Math.pow(10,4))||width>=(Math.pow(10,4))||height>=(Math.pow(10,4))||(length*width*height)>=(Math.pow(10,9)));\n        boolean a=mass>=100;\n        String ans=\"\";\n        if(a==true && b==true)\n        {\n            ans=\"Both\";\n        }\n        else if(a==false && b==false)\n        {\n            ans=\"Neither\";\n        }\n        else if(a==false && b==true)\n        {\n            ans=\"Bulky\";\n        }\n     \n        else\n        {\n            ans=\"Heavy\";\n        }\n        return ans;\n    }\n}\n\n\n\n"
                    },
                    {
                        "username": "rishitamandal",
                        "content": "convert to long"
                    },
                    {
                        "username": "vishaljoshi1998",
                        "content": "long long vol =long(l)*w*h;"
                    },
                    {
                        "username": "vishaljoshi1998",
                        "content": "long > int \\n"
                    },
                    {
                        "username": "vansh69",
                        "content": "It is not getting passed because , the volume name integer / long long int is getting overflowed \\nIt means , while calculating the volume the number which weare getting after multiplication can not be strored in the datatype of volume . \\n"
                    },
                    {
                        "username": "Manikant_tyagi",
                        "content": "I think volume should be length*width*height "
                    },
                    {
                        "username": "tpsaurus",
                        "content": "beware of interger overflow...\\ntip( long should be enough)"
                    },
                    {
                        "username": "goodwin17",
                        "content": "There is a type of test cases where at least one dimension is greater or equal 10^4 and the volume is greater or equal 10^9 but the mass is less than 100. So it is bulky from two conditions but not heavy.\\nSubmission system doesn\\'t have such test case so our code can return \"Both\" instead of \"Bulky\" and still be accepted.\\n\\nHere\\'s my code on Python that has such bug but is still accepted. When len(cat) is 2 there can be two \"Bulky\" in it. But my code returns \"Both\" (it thinks there are \"Heavy\" and \"Bulky\") and it is fine for submission system.\\n\\n`\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        cat = []\\n\\n        if mass >= 100:\\n            cat.append(\"Heavy\")\\n\\n        dims = [length, width, height]\\n        prod = 1\\n\\n        for d in dims:\\n            prod *= d\\n\\n            if d >= 10000:\\n                cat.append(\"Bulky\")\\n                break\\n\\n        if prod >= 1000000000:\\n            cat.append(\"Bulky\")\\n\\n        if len(cat) == 1:\\n            return cat[0]\\n        elif len(cat) > 1:\\n            return \"Both\"\\n\\n        return \"Neither\"\\n`"
                    },
                    {
                        "username": "samolevich",
                        "content": "if else if else if else =)"
                    },
                    {
                        "username": "sadhugowtham",
                        "content": "Hi, Can anyone help solve the failing test case in my code mentioned below?\\n\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        boolean isHeavy = false;\\n        boolean isBulky = false;\\n        if((length >= 10000 || width >= 10000 || height >= 10000) || (length*width*height)>=1000000000){\\n            isBulky=true;\\n        }\\n        if(mass >= 100) {\\n            isHeavy = true;\\n        }\\n        if(isBulky && isHeavy) {\\n            return \"Both\";\\n        } else if(isBulky && !isHeavy){\\n            return \"Bulky\";\\n        } else if(!isBulky && isHeavy) {\\n            return \"Heavy\";\\n        }\\n        return \"Neither\";\\n    }\\n}\\n````\\n\\n `length = 2909, width = 3968, height = 3272, mass = 727\\n Output: \"Heavy\", Expected\"Both\" `\\n"
                    },
                    {
                        "username": "shin_98",
                        "content": "Max `int` in java is 2 147 483 647. Volume of this test case is 37\\xA0768\\xA0408\\xA0064. I don\\'t know how Java stores multiplication but try using `long`"
                    },
                    {
                        "username": "kingctan",
                        "content": "Simple Java beats 100% runtime\\n    public static String categorizeBox(int length, int width, int height, int mass) {\\n        String dimCat = null;\\n        String massCat = null;\\n        if (length >= 10000 || width >= 10000 || height >= 10000 || ((long) length * (long) width * (long) height >= 1000000000L)) dimCat = \"Bulky\";\\n        \\n        if (mass >= 100) massCat = \"Heavy\";\\n        if (\"Bulky\".equals(dimCat) && \"Heavy\".equals(massCat)) return \"Both\";\\n        else if (dimCat == null && massCat == null) return \"Neither\";\\n        return dimCat != null ? dimCat : massCat;\\n    }\\n"
                    },
                    {
                        "username": "kd_5304",
                        "content": "I've specified long long but it still says  ` signed integer overflow ` ಠ╭╮ಠ"
                    },
                    {
                        "username": "Saurabh_Sen",
                        "content": "long long vol = long(l)*w*h \\n\\nuse this"
                    },
                    {
                        "username": "kd_5304",
                        "content": "Nevermind I found the correct  way:\\nInstead of this:\\n`long long v=l*w*h;`\\nTry this:\\n`long long v=(long long)l*(long long)w*(long long)h;`"
                    },
                    {
                        "username": "kd_5304",
                        "content": " (\\u256F\\u2594\\u76BF\\u2594)\\u256F It passes for Python but fails for C++"
                    }
                ]
            },
            {
                "id": 1778165,
                "content": [
                    {
                        "username": "72engineers",
                        "content": "Anyone pass all the test cases by C++?  There is a type error between long long and int. "
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "same problem bro \\n"
                    },
                    {
                        "username": "72engineers",
                        "content": "nvm, forget this."
                    },
                    {
                        "username": "avadhesh_214",
                        "content": "// Why my test case is not getting passed for:\n2909\n3968\n3272\n727\nclass Solution {\n    public String categorizeBox(int length, int width, int height, int mass) {\n        boolean b=(length>=(Math.pow(10,4))||width>=(Math.pow(10,4))||height>=(Math.pow(10,4))||(length*width*height)>=(Math.pow(10,9)));\n        boolean a=mass>=100;\n        String ans=\"\";\n        if(a==true && b==true)\n        {\n            ans=\"Both\";\n        }\n        else if(a==false && b==false)\n        {\n            ans=\"Neither\";\n        }\n        else if(a==false && b==true)\n        {\n            ans=\"Bulky\";\n        }\n     \n        else\n        {\n            ans=\"Heavy\";\n        }\n        return ans;\n    }\n}\n\n\n\n"
                    },
                    {
                        "username": "rishitamandal",
                        "content": "convert to long"
                    },
                    {
                        "username": "vishaljoshi1998",
                        "content": "long long vol =long(l)*w*h;"
                    },
                    {
                        "username": "vishaljoshi1998",
                        "content": "long > int \\n"
                    },
                    {
                        "username": "vansh69",
                        "content": "It is not getting passed because , the volume name integer / long long int is getting overflowed \\nIt means , while calculating the volume the number which weare getting after multiplication can not be strored in the datatype of volume . \\n"
                    },
                    {
                        "username": "Manikant_tyagi",
                        "content": "I think volume should be length*width*height "
                    },
                    {
                        "username": "tpsaurus",
                        "content": "beware of interger overflow...\\ntip( long should be enough)"
                    },
                    {
                        "username": "goodwin17",
                        "content": "There is a type of test cases where at least one dimension is greater or equal 10^4 and the volume is greater or equal 10^9 but the mass is less than 100. So it is bulky from two conditions but not heavy.\\nSubmission system doesn\\'t have such test case so our code can return \"Both\" instead of \"Bulky\" and still be accepted.\\n\\nHere\\'s my code on Python that has such bug but is still accepted. When len(cat) is 2 there can be two \"Bulky\" in it. But my code returns \"Both\" (it thinks there are \"Heavy\" and \"Bulky\") and it is fine for submission system.\\n\\n`\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        cat = []\\n\\n        if mass >= 100:\\n            cat.append(\"Heavy\")\\n\\n        dims = [length, width, height]\\n        prod = 1\\n\\n        for d in dims:\\n            prod *= d\\n\\n            if d >= 10000:\\n                cat.append(\"Bulky\")\\n                break\\n\\n        if prod >= 1000000000:\\n            cat.append(\"Bulky\")\\n\\n        if len(cat) == 1:\\n            return cat[0]\\n        elif len(cat) > 1:\\n            return \"Both\"\\n\\n        return \"Neither\"\\n`"
                    },
                    {
                        "username": "samolevich",
                        "content": "if else if else if else =)"
                    },
                    {
                        "username": "sadhugowtham",
                        "content": "Hi, Can anyone help solve the failing test case in my code mentioned below?\\n\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        boolean isHeavy = false;\\n        boolean isBulky = false;\\n        if((length >= 10000 || width >= 10000 || height >= 10000) || (length*width*height)>=1000000000){\\n            isBulky=true;\\n        }\\n        if(mass >= 100) {\\n            isHeavy = true;\\n        }\\n        if(isBulky && isHeavy) {\\n            return \"Both\";\\n        } else if(isBulky && !isHeavy){\\n            return \"Bulky\";\\n        } else if(!isBulky && isHeavy) {\\n            return \"Heavy\";\\n        }\\n        return \"Neither\";\\n    }\\n}\\n````\\n\\n `length = 2909, width = 3968, height = 3272, mass = 727\\n Output: \"Heavy\", Expected\"Both\" `\\n"
                    },
                    {
                        "username": "shin_98",
                        "content": "Max `int` in java is 2 147 483 647. Volume of this test case is 37\\xA0768\\xA0408\\xA0064. I don\\'t know how Java stores multiplication but try using `long`"
                    },
                    {
                        "username": "kingctan",
                        "content": "Simple Java beats 100% runtime\\n    public static String categorizeBox(int length, int width, int height, int mass) {\\n        String dimCat = null;\\n        String massCat = null;\\n        if (length >= 10000 || width >= 10000 || height >= 10000 || ((long) length * (long) width * (long) height >= 1000000000L)) dimCat = \"Bulky\";\\n        \\n        if (mass >= 100) massCat = \"Heavy\";\\n        if (\"Bulky\".equals(dimCat) && \"Heavy\".equals(massCat)) return \"Both\";\\n        else if (dimCat == null && massCat == null) return \"Neither\";\\n        return dimCat != null ? dimCat : massCat;\\n    }\\n"
                    },
                    {
                        "username": "kd_5304",
                        "content": "I've specified long long but it still says  ` signed integer overflow ` ಠ╭╮ಠ"
                    },
                    {
                        "username": "Saurabh_Sen",
                        "content": "long long vol = long(l)*w*h \\n\\nuse this"
                    },
                    {
                        "username": "kd_5304",
                        "content": "Nevermind I found the correct  way:\\nInstead of this:\\n`long long v=l*w*h;`\\nTry this:\\n`long long v=(long long)l*(long long)w*(long long)h;`"
                    },
                    {
                        "username": "kd_5304",
                        "content": " (\\u256F\\u2594\\u76BF\\u2594)\\u256F It passes for Python but fails for C++"
                    }
                ]
            },
            {
                "id": 1753732,
                "content": [
                    {
                        "username": "72engineers",
                        "content": "Anyone pass all the test cases by C++?  There is a type error between long long and int. "
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "same problem bro \\n"
                    },
                    {
                        "username": "72engineers",
                        "content": "nvm, forget this."
                    },
                    {
                        "username": "avadhesh_214",
                        "content": "// Why my test case is not getting passed for:\n2909\n3968\n3272\n727\nclass Solution {\n    public String categorizeBox(int length, int width, int height, int mass) {\n        boolean b=(length>=(Math.pow(10,4))||width>=(Math.pow(10,4))||height>=(Math.pow(10,4))||(length*width*height)>=(Math.pow(10,9)));\n        boolean a=mass>=100;\n        String ans=\"\";\n        if(a==true && b==true)\n        {\n            ans=\"Both\";\n        }\n        else if(a==false && b==false)\n        {\n            ans=\"Neither\";\n        }\n        else if(a==false && b==true)\n        {\n            ans=\"Bulky\";\n        }\n     \n        else\n        {\n            ans=\"Heavy\";\n        }\n        return ans;\n    }\n}\n\n\n\n"
                    },
                    {
                        "username": "rishitamandal",
                        "content": "convert to long"
                    },
                    {
                        "username": "vishaljoshi1998",
                        "content": "long long vol =long(l)*w*h;"
                    },
                    {
                        "username": "vishaljoshi1998",
                        "content": "long > int \\n"
                    },
                    {
                        "username": "vansh69",
                        "content": "It is not getting passed because , the volume name integer / long long int is getting overflowed \\nIt means , while calculating the volume the number which weare getting after multiplication can not be strored in the datatype of volume . \\n"
                    },
                    {
                        "username": "Manikant_tyagi",
                        "content": "I think volume should be length*width*height "
                    },
                    {
                        "username": "tpsaurus",
                        "content": "beware of interger overflow...\\ntip( long should be enough)"
                    },
                    {
                        "username": "goodwin17",
                        "content": "There is a type of test cases where at least one dimension is greater or equal 10^4 and the volume is greater or equal 10^9 but the mass is less than 100. So it is bulky from two conditions but not heavy.\\nSubmission system doesn\\'t have such test case so our code can return \"Both\" instead of \"Bulky\" and still be accepted.\\n\\nHere\\'s my code on Python that has such bug but is still accepted. When len(cat) is 2 there can be two \"Bulky\" in it. But my code returns \"Both\" (it thinks there are \"Heavy\" and \"Bulky\") and it is fine for submission system.\\n\\n`\\nclass Solution:\\n    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:\\n        cat = []\\n\\n        if mass >= 100:\\n            cat.append(\"Heavy\")\\n\\n        dims = [length, width, height]\\n        prod = 1\\n\\n        for d in dims:\\n            prod *= d\\n\\n            if d >= 10000:\\n                cat.append(\"Bulky\")\\n                break\\n\\n        if prod >= 1000000000:\\n            cat.append(\"Bulky\")\\n\\n        if len(cat) == 1:\\n            return cat[0]\\n        elif len(cat) > 1:\\n            return \"Both\"\\n\\n        return \"Neither\"\\n`"
                    },
                    {
                        "username": "samolevich",
                        "content": "if else if else if else =)"
                    },
                    {
                        "username": "sadhugowtham",
                        "content": "Hi, Can anyone help solve the failing test case in my code mentioned below?\\n\\n```\\nclass Solution {\\n    public String categorizeBox(int length, int width, int height, int mass) {\\n        boolean isHeavy = false;\\n        boolean isBulky = false;\\n        if((length >= 10000 || width >= 10000 || height >= 10000) || (length*width*height)>=1000000000){\\n            isBulky=true;\\n        }\\n        if(mass >= 100) {\\n            isHeavy = true;\\n        }\\n        if(isBulky && isHeavy) {\\n            return \"Both\";\\n        } else if(isBulky && !isHeavy){\\n            return \"Bulky\";\\n        } else if(!isBulky && isHeavy) {\\n            return \"Heavy\";\\n        }\\n        return \"Neither\";\\n    }\\n}\\n````\\n\\n `length = 2909, width = 3968, height = 3272, mass = 727\\n Output: \"Heavy\", Expected\"Both\" `\\n"
                    },
                    {
                        "username": "shin_98",
                        "content": "Max `int` in java is 2 147 483 647. Volume of this test case is 37\\xA0768\\xA0408\\xA0064. I don\\'t know how Java stores multiplication but try using `long`"
                    },
                    {
                        "username": "kingctan",
                        "content": "Simple Java beats 100% runtime\\n    public static String categorizeBox(int length, int width, int height, int mass) {\\n        String dimCat = null;\\n        String massCat = null;\\n        if (length >= 10000 || width >= 10000 || height >= 10000 || ((long) length * (long) width * (long) height >= 1000000000L)) dimCat = \"Bulky\";\\n        \\n        if (mass >= 100) massCat = \"Heavy\";\\n        if (\"Bulky\".equals(dimCat) && \"Heavy\".equals(massCat)) return \"Both\";\\n        else if (dimCat == null && massCat == null) return \"Neither\";\\n        return dimCat != null ? dimCat : massCat;\\n    }\\n"
                    },
                    {
                        "username": "kd_5304",
                        "content": "I've specified long long but it still says  ` signed integer overflow ` ಠ╭╮ಠ"
                    },
                    {
                        "username": "Saurabh_Sen",
                        "content": "long long vol = long(l)*w*h \\n\\nuse this"
                    },
                    {
                        "username": "kd_5304",
                        "content": "Nevermind I found the correct  way:\\nInstead of this:\\n`long long v=l*w*h;`\\nTry this:\\n`long long v=(long long)l*(long long)w*(long long)h;`"
                    },
                    {
                        "username": "kd_5304",
                        "content": " (\\u256F\\u2594\\u76BF\\u2594)\\u256F It passes for Python but fails for C++"
                    }
                ]
            }
        ]
    }
]