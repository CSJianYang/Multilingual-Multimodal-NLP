[
    {
        "title": "Separate the Digits in an Array",
        "question_content": "Given an array of positive integers nums, return an array answer that consists of the digits of each integer in nums after separating them in the same order they appear in nums.\nTo separate the digits of an integer is to get all the digits it has in the same order.\n\n\tFor example, for the integer 10921, the separation of its digits is [1,0,9,2,1].\n\n&nbsp;\nExample 1:\n\nInput: nums = [13,25,83,77]\nOutput: [1,3,2,5,8,3,7,7]\nExplanation: \n- The separation of 13 is [1,3].\n- The separation of 25 is [2,5].\n- The separation of 83 is [8,3].\n- The separation of 77 is [7,7].\nanswer = [1,3,2,5,8,3,7,7]. Note that answer contains the separations in the same order.\n\nExample 2:\n\nInput: nums = [7,1,3,9]\nOutput: [7,1,3,9]\nExplanation: The separation of each integer in nums is itself.\nanswer = [7,1,3,9].\n\n&nbsp;\nConstraints:\n\n\t1 <= nums.length <= 1000\n\t1 <= nums[i] <= 105",
        "solutions": [
            {
                "id": 3141678,
                "title": "java-arraylist-loop-iterative",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:  O(n*m) where n is the length of array and m is the max bit of the elements\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n       List<Integer> ans = new ArrayList<>();\\n        for (int num : nums) {\\n            List<Integer> temp = new ArrayList<>();\\n            while (num > 0) {\\n                temp.add(num % 10);\\n                num /= 10;\\n            }\\n            for (int j = temp.size() - 1; j >= 0; j--) {\\n                ans.add(temp.get(j));\\n            }\\n        }\\n        int[] result = new int[ans.size()];\\n        for (int i = 0; i < ans.size(); i++) {\\n            result[i] = ans.get(i);\\n        }\\n        return result;\\n    }\\n}\\n```\\n\\n\\n![image](https://assets.leetcode.com/users/images/54347e7f-1d1b-4153-bbac-039f9d3c5390_1675529014.557726.jpeg)\\n",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n       List<Integer> ans = new ArrayList<>();\\n        for (int num : nums) {\\n            List<Integer> temp = new ArrayList<>();\\n            while (num > 0) {\\n                temp.add(num % 10);\\n                num /= 10;\\n            }\\n            for (int j = temp.size() - 1; j >= 0; j--) {\\n                ans.add(temp.get(j));\\n            }\\n        }\\n        int[] result = new int[ans.size()];\\n        for (int i = 0; i < ans.size(); i++) {\\n            result[i] = ans.get(i);\\n        }\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3141479,
                "title": "c-easy-string-conversion",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans ;\\n        \\n        for( auto &it : nums ){\\n            \\n            string tmp = to_string(it);\\n            \\n            for( auto &s : tmp ) ans.push_back(s-\\'0\\');\\n            \\n        }\\n        \\n        return ans ;\\n    }\\n};\\n```\\n# Please Upvote If U like the Solution :D",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans ;\\n        \\n        for( auto &it : nums ){\\n            \\n            string tmp = to_string(it);\\n            \\n            for( auto &s : tmp ) ans.push_back(s-\\'0\\');\\n            \\n        }\\n        \\n        return ans ;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3141540,
                "title": "python-1-line",
                "content": "# **Explanation**\\nFor each `a` in input array `A`,\\nfor each digit char `c` in string `a`,\\ntransform `c` into an integer.\\n<br>\\n\\n# **Complexity**\\nTime `O(digits)`\\nSpace `O(digits)`\\n<br>\\n\\n**Python**\\n```py\\n    def separateDigits(self, A):\\n        return [int(c) for a in A for c in str(a)]\\n```\\n",
                "solutionTags": [],
                "code": "```py\\n    def separateDigits(self, A):\\n        return [int(c) for a in A for c in str(a)]\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3141660,
                "title": "very-simple-and-easy-to-understand-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;\\n        for(auto n: nums){\\n            vector<int> t;\\n            while(n > 0){\\n                t.push_back(n%10);\\n                n = n/10;\\n            }\\n            for(int i = t.size()-1; i >= 0; --i) ans.push_back(t[i]);\\n        }\\n        return ans;\\n    }\\n};\\n```\\n\\nHere is an article of my recent interview experience at Amazon, you may like : \\nhttps://leetcode.com/discuss/interview-experience/3171859/Journey-to-a-FAANG-Company-Amazon-or-SDE2-(L5)-or-Bangalore-or-Oct-2022-Accepted",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;\\n        for(auto n: nums){\\n            vector<int> t;\\n            while(n > 0){\\n                t.push_back(n%10);\\n                n = n/10;\\n            }\\n            for(int i = t.size()-1; i >= 0; --i) ans.push_back(t[i]);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3142451,
                "title": "one-liner",
                "content": "**Python 3**\\n```python\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        return [int(d) for n in nums for d in str(n)]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```python\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        return [int(d) for n in nums for d in str(n)]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3145892,
                "title": "easy-java-solution-self-explanatory-o-n",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        StringBuilder sb = new StringBuilder();\\n        for(int x: nums) sb.append(x);\\n        String str = sb.toString();\\n        int[] res = new int[str.length()];\\n        for(int i=0;i<res.length;i++){\\n            res[i] = str.charAt(i)-\\'0\\';\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        StringBuilder sb = new StringBuilder();\\n        for(int x: nums) sb.append(x);\\n        String str = sb.toString();\\n        int[] res = new int[str.length()];\\n        for(int i=0;i<res.length;i++){\\n            res[i] = str.charAt(i)-\\'0\\';\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3143150,
                "title": "one-liner-javascript-solution",
                "content": "Found this solution helpful? Consider showing support by upvoting this post.\\nHave a question? Kindly leave a comment below.\\nThank you and happy hacking!\\n```\\nconst separateDigits = nums => {\\n    return Array.from(nums.join(\\'\\'), Number)\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst separateDigits = nums => {\\n    return Array.from(nums.join(\\'\\'), Number)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3174372,
                "title": "c-best-and-easy-explanation-detailed-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe problem asks us to separate the digits of each integer in an input array nums and return the separated digits in the same order as they appear in nums.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Create an empty array ans to store the separated digits.\\n- Loop through each integer in the input array nums.\\n- Convert the integer to a string representation using the to_string function.\\n- Loop through each character in the string representation and convert it back to an integer by subtracting the ASCII code of \\'0\\'.\\n- Add the newly converted integer to the end of the ans array using push_back.\\n- Return the ans array which now contains all the separated digits in the same order as they appeared in nums.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;\\n        for( auto &it : nums ){\\n            string tmp = to_string(it);\\n            for( auto &s : tmp )\\n             ans.push_back(s-\\'0\\');\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;\\n        for( auto &it : nums ){\\n            string tmp = to_string(it);\\n            for( auto &s : tmp )\\n             ans.push_back(s-\\'0\\');\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3149388,
                "title": "python-100-faster-easy-solution",
                "content": "# Code\\u2705\\n```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        answer = []\\n        for item in nums:\\n            digit_list = list(map(int, str(item)))\\n            answer.extend(digit_list)\\n        return answer\\n```\\n![Screen Shot 2023-02-06 at 11.21.13 AM.png](https://assets.leetcode.com/users/images/07fbabb0-90c1-4fd9-a7bb-f89f9f099bad_1675662743.9503376.png)\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Array"
                ],
                "code": "```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        answer = []\\n        for item in nums:\\n            digit_list = list(map(int, str(item)))\\n            answer.extend(digit_list)\\n        return answer\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3209957,
                "title": "js-solution-literally-two-operators-in-one-line",
                "content": "All we need is to join the initial array and to split it by \"\".\\n\\nLiterally two operators in one line to solve it.\\n\\n# Code\\n```\\nconst separateDigits = function(nums) {\\n    return nums.join(\"\").split(\"\");\\n};\\n```\\n![4x5hdv.jpeg](https://assets.leetcode.com/users/images/82d1c5c6-1792-4a17-adfb-6e3c0529e3ac_1677435445.6462138.jpeg)\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst separateDigits = function(nums) {\\n    return nums.join(\"\").split(\"\");\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3142746,
                "title": "python-3-1-5-lines-w-explanation-and-example-t-m-96-66",
                "content": "\\nFour steps:\\n1. Map the`int`elements of`nums`to their corresponding strings.\\n2. Join the strings into one string.\\n3. Split the one string into a list of single-character digits.\\n4. Map the single-character digits back to their corresponding digits\\n\\nWe are doing some extra work (e.g., 8 --> \\'8\\' --> 8), but using the built-in functions seems to make up for the lost time.\\n\\n```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n\\n                                            # Example: nums = [13,25,83,77]\\n                                            # \\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\n        strngLst = map(str,nums)            # 1)  strngLst = [\\'13\\', \\'25\\', \\'83\\', \\'77\\']    \\n      \\n        strng = \\'\\'.join(map(str,nums) )     # 2)     strng = \"13258377\"\\n      \\n        digitLst = list(strng)              # 3)  digitLst = [\\'1\\',\\'3\\',\\'2\\',\\'5\\',\\'8\\',\\'3\\',\\'7\\',\\'7\\']\\n      \\n        intLst = list(map(int,digitLst))    # 4)    intLst = [1,3,2,5,8,3,7,7]\\n\\n        return list(intLst)                 #    return [1,3,2,5,8,3,7,7]\\n```\\nAnd by nesting all the functions, we could make it a one-liner:\\n```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        return list(map(int,list(\\'\\'.join(map(str,nums)))))\\n\\n```\\n[https://leetcode.com/problems/separate-the-digits-in-an-array/submissions/891550328/](http://)\\n\\n\\n\\nI could be wrong, but I think that time complexity is *O*(*N*) and space complexity is *O*(*N*).\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n\\n                                            # Example: nums = [13,25,83,77]\\n                                            # \\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\n        strngLst = map(str,nums)            # 1)  strngLst = [\\'13\\', \\'25\\', \\'83\\', \\'77\\']    \\n      \\n        strng = \\'\\'.join(map(str,nums) )     # 2)     strng = \"13258377\"\\n      \\n        digitLst = list(strng)              # 3)  digitLst = [\\'1\\',\\'3\\',\\'2\\',\\'5\\',\\'8\\',\\'3\\',\\'7\\',\\'7\\']\\n      \\n        intLst = list(map(int,digitLst))    # 4)    intLst = [1,3,2,5,8,3,7,7]\\n\\n        return list(intLst)                 #    return [1,3,2,5,8,3,7,7]\\n```\n```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        return list(map(int,list(\\'\\'.join(map(str,nums)))))\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3141511,
                "title": "reverse-iteration",
                "content": "# Code\\n```\\nclass Solution(object):\\n    def separateDigits(self, nums):\\n        res = []\\n        for num in nums[::-1]:\\n            while num:\\n                res.append(num % 10)\\n                num //= 10\\n        return res[::-1]\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def separateDigits(self, nums):\\n        res = []\\n        for num in nums[::-1]:\\n            while num:\\n                res.append(num % 10)\\n                num //= 10\\n        return res[::-1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3141671,
                "title": "simple-solution-for-beginners-using-two-loops",
                "content": "# Intuition\\nKeep storing digits of ever number then copy thosse digits into another array and return it as answer\\n\\n# Approach\\nUse the same approach we used for storing digits of number from unit place. Then reverse it bcoz it\\'s asked in que to return it in same order.\\n\\n# Complexity\\n- Time complexity:\\no(n*m)\\n\\n- Space complexity:\\nO(N)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;\\n        \\n        int n = nums.size();\\n        \\n        for(int i=0; i<n; i++){\\n            vector<int> temp;\\n            while(nums[i] != 0){\\n                temp.push_back(nums[i]%10);\\n                nums[i] /= 10;\\n            }\\n            reverse(temp.begin(), temp.end());\\n//copying each digit in our ans array\\n            for(int j=0; j<temp.size(); j++){\\n                ans.push_back(temp[j]);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;\\n        \\n        int n = nums.size();\\n        \\n        for(int i=0; i<n; i++){\\n            vector<int> temp;\\n            while(nums[i] != 0){\\n                temp.push_back(nums[i]%10);\\n                nums[i] /= 10;\\n            }\\n            reverse(temp.begin(), temp.end());\\n//copying each digit in our ans array\\n            for(int j=0; j<temp.size(); j++){\\n                ans.push_back(temp[j]);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3602486,
                "title": "explained-simple-and-clear-python3-code",
                "content": "# Intuition\\nThe given problem requires separating the digits of positive integers in an array and returning the digits in the same order they appear in the original numbers.\\n\\n\\n# Approach\\nThe provided solution uses a function named separateDigits within a class named Solution. The function takes an input parameter nums, which is a list of positive integers. The function returns a list res containing the separated digits.\\n\\nTo separate the digits of each integer, the solution iterates over each number x in the input array nums. For each number, it initializes an empty list t. It then enters a while loop that continues until the number x becomes zero.\\n\\nWithin the while loop, the solution calculates the remainder of x divided by 10 using the modulo operator %, which gives the last digit of the number. This digit is then inserted at the beginning of the list t using the insert method with an index of 0.\\n\\nAfter inserting the digit, the solution updates x by performing an integer division x // 10, which removes the last digit from the number. This process is repeated until all the digits of x are separated.\\n\\nOnce all the digits of x are separated and stored in the list t, the solution appends the contents of t to the result list res using the += operator. This ensures that the digits of each number are added in the order they appear in the input array.\\n\\nFinally, when all numbers in the input array have been processed, the function returns the resulting list res.\\n\\n\\n\\n# Complexity\\n- Time complexity:\\nthe time complexity of this solution depends on the total number of digits in all the integers present in the input array. If there are a total of n digits, the solution will iterate over each digit once, resulting in a time complexity of O(n).\\n\\n- Space complexity:\\nThe space complexity of the solution is also dependent on the number of digits. It uses additional space to store the separated digits of each number in the list t and the final result in the list res. Therefore, the space complexity is also O(n), where n represents the total number of digits in the input array.\\n\\n\\n\\n\\n\\n# Code\\n```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        res=[]\\n        for x in nums:\\n            t=[]\\n            while x>0:\\n                t.insert(0,x%10)\\n                x=x//10\\n            res+=t\\n        return res\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        res=[]\\n        for x in nums:\\n            t=[]\\n            while x>0:\\n                t.insert(0,x%10)\\n                x=x//10\\n            res+=t\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3146001,
                "title": "accepted-short-simple-best-method-easy-to-understand",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;\\n        for( auto &it : nums ){\\n            string tmp = to_string(it);\\n            for( auto &s : tmp )\\n             ans.push_back(s-\\'0\\');\\n        }\\n        return ans;\\n    }\\n};\\n```\\nPlease **UPVOTE** if it helps \\u2764\\uFE0F\\uD83D\\uDE0A\\nThank You and Happy To Help You!!",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;\\n        for( auto &it : nums ){\\n            string tmp = to_string(it);\\n            for( auto &s : tmp )\\n             ans.push_back(s-\\'0\\');\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3143891,
                "title": "c-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int>ans;\\n        for(int i=0;i<nums.size();i++){\\n           string num=to_string(nums[i]);\\n            for(int j=0;j<num.size();j++){\\n                ans.push_back(num[j]-\\'0\\');\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int>ans;\\n        for(int i=0;i<nums.size();i++){\\n           string num=to_string(nums[i]);\\n            for(int j=0;j<num.size();j++){\\n                ans.push_back(num[j]-\\'0\\');\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3141493,
                "title": "stack-easy-to-understand",
                "content": "**Upvoting is Much Appreciated  ***\\n```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n      LinkedList<Integer>stack=new LinkedList();\\n        ArrayList<Integer>arr=new ArrayList();\\n        for(int i:nums){\\n            while(i>0){\\n                stack.push(i%10);\\n                i/=10;\\n            }\\n            while(!stack.isEmpty()){\\n            arr.add(stack.pop());\\n            }\\n        }\\n        int []ans=new int[arr.size()];\\n        for(int i=0;i<arr.size();i++){\\n            ans[i]=arr.get(i);\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n      LinkedList<Integer>stack=new LinkedList();\\n        ArrayList<Integer>arr=new ArrayList();\\n        for(int i:nums){\\n            while(i>0){\\n                stack.push(i%10);\\n                i/=10;\\n            }\\n            while(!stack.isEmpty()){\\n            arr.add(stack.pop());\\n            }\\n        }\\n        int []ans=new int[arr.size()];\\n        for(int i=0;i<arr.size();i++){\\n            ans[i]=arr.get(i);\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3169724,
                "title": "python-3-bit-operation-reuse-input-list",
                "content": "# Intuition\\nMost solutions create a new list to return the result. This solution is based on reusing the input list by using bitwise operations.\\n\\n# Approach\\nThe idea is to traverse the list and, if necessary, storing two values in one number. The maximum number is $$10^5$$, for which at most 17 bits are required. All other bits can be used to store the new values.\\n\\nWe split each number into its individual digits and store them one by one at the correct indices ```ptr``` in the list. To do this, we append the new number to the left of the original number ```int(num)<<17 | nums[ptr]```. If all elements of the list are already filled with a second value, the element is appended to the list. Finally, we remove the original value and set the new value by shifting ```nums[i] >>= 17```.\\n\\n\\n```\\nmax_number: 100000 (decimal) = 00000000 00000001 10000110 10100000 (binary)\\nmask numbers:                  00000000 00000001 11111111 11111111 (2^17-1)\\nusable numbers:                11111111 11111110 00000000 00000000\\n```\\n\\n# Code\\n```Python3\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        ptr = 0\\n        n = len(nums)\\n        mask = 2**17-1\\n        for i in range(n):\\n            for num in str(nums[i]&mask):\\n                if ptr<n:\\n                    nums[ptr] = int(num)<<17 | nums[ptr]\\n                    ptr += 1\\n                else:\\n                    nums.append(int(num))\\n            nums[i] >>= 17\\n        return nums\\n```\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n    - Outer loop\\n    Each number is visited once\\n    - Inner loop\\n    For each number, we iterate all digits (at most 6 digits because max_number=$$10^5$$)\\n    - Worst case: $$O(6*n)=O(n)$$\\n\\n- Space complexity: $$O(n)$$ \\n    - Worst case\\n    Input list contains max_number=$$10^5$$ n times. List must be increased by 5 additional entries for each element => $$O(6*n)=O(n)$$\\n\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```ptr```\n```int(num)<<17 | nums[ptr]```\n```nums[i] >>= 17```\n```\\nmax_number: 100000 (decimal) = 00000000 00000001 10000110 10100000 (binary)\\nmask numbers:                  00000000 00000001 11111111 11111111 (2^17-1)\\nusable numbers:                11111111 11111110 00000000 00000000\\n```\n```Python3\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        ptr = 0\\n        n = len(nums)\\n        mask = 2**17-1\\n        for i in range(n):\\n            for num in str(nums[i]&mask):\\n                if ptr<n:\\n                    nums[ptr] = int(num)<<17 | nums[ptr]\\n                    ptr += 1\\n                else:\\n                    nums.append(int(num))\\n            nums[i] >>= 17\\n        return nums\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3141517,
                "title": "easy-js-solution",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nconst separateDigits = function(nums) {\\n    let answ = []\\n    for(let el of nums){\\n        answ.push(...[...el.toString()].map(Number))\\n    }\\n    return answ\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nconst separateDigits = function(nums) {\\n    let answ = []\\n    for(let el of nums){\\n        answ.push(...[...el.toString()].map(Number))\\n    }\\n    return answ\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3982303,
                "title": "java-3-solution-100-0-n-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nUPVOTE ME (PLEASE)\\uD83D\\uDE4B\\uD83D\\uDE4B\\uD83D\\uDE4B\\u200D\\u2642\\uFE0F\\uD83D\\uDC81\\uD83D\\uDE47\\u200D\\u2642\\uFE0F\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:0(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:0(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        List<Integer> temp = new ArrayList<>();\\n        for(int i=0; i<nums.length; i++){\\n            String s = nums[i]+\"\";\\n            for(int j=0; j<s.length(); j++) temp.add(s.charAt(j)-\\'0\\');\\n        }\\n        int res[] = new int[temp.size()];\\n        for(int i=0; i<temp.size(); i++) res[i] = temp.get(i);\\n        return res;\\n\\n    //        Another solution\\n\\n        // List<Integer> ans = new ArrayList<>();\\n        // for(int i : nums){\\n        //     List<Integer> temp = new ArrayList<>();\\n        //     while(i>0){\\n        //         temp.add(i%10);\\n        //         i/=10;\\n        //     }\\n        //     for(int j=temp.size()-1; j>=0; j--) ans.add(temp.get(j));\\n        // }\\n        // int res[] = new int[ans.size()];\\n        // for(int i=0; i<ans.size(); i++) res[i] = ans.get(i);\\n        // return res;\\n\\n\\n    //     Another solution (Using String) --> try this one   --->0(N);\\n\\n        // String str = \"\";\\n        // for(int i : nums) str+=i;\\n        // int ans[] = new int[str.length()];\\n        // for(int i=0; i<str.length(); i++){\\n        //     char ch = str.charAt(i);\\n        //     int val = ch - \\'0\\';\\n        //     ans[i] = val;\\n        // }\\n        // return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        List<Integer> temp = new ArrayList<>();\\n        for(int i=0; i<nums.length; i++){\\n            String s = nums[i]+\"\";\\n            for(int j=0; j<s.length(); j++) temp.add(s.charAt(j)-\\'0\\');\\n        }\\n        int res[] = new int[temp.size()];\\n        for(int i=0; i<temp.size(); i++) res[i] = temp.get(i);\\n        return res;\\n\\n    //        Another solution\\n\\n        // List<Integer> ans = new ArrayList<>();\\n        // for(int i : nums){\\n        //     List<Integer> temp = new ArrayList<>();\\n        //     while(i>0){\\n        //         temp.add(i%10);\\n        //         i/=10;\\n        //     }\\n        //     for(int j=temp.size()-1; j>=0; j--) ans.add(temp.get(j));\\n        // }\\n        // int res[] = new int[ans.size()];\\n        // for(int i=0; i<ans.size(); i++) res[i] = ans.get(i);\\n        // return res;\\n\\n\\n    //     Another solution (Using String) --> try this one   --->0(N);\\n\\n        // String str = \"\";\\n        // for(int i : nums) str+=i;\\n        // int ans[] = new int[str.length()];\\n        // for(int i=0; i<str.length(); i++){\\n        //     char ch = str.charAt(i);\\n        //     int val = ch - \\'0\\';\\n        //     ans[i] = val;\\n        // }\\n        // return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3693932,
                "title": "using-single-array",
                "content": "```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        int n = 0, t;\\n        for(int i: nums){\\n            while(i!=0){\\n                n++;\\n                i/=10;\\n            }\\n        }\\n        int ans[] = new int[n];\\n        for(int i=nums.length-1; i>=0; i--){\\n            t = nums[i];\\n            while(t!=0){\\n                ans[--n] = t%10;\\n                t/=10;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        int n = 0, t;\\n        for(int i: nums){\\n            while(i!=0){\\n                n++;\\n                i/=10;\\n            }\\n        }\\n        int ans[] = new int[n];\\n        for(int i=nums.length-1; i>=0; i--){\\n            t = nums[i];\\n            while(t!=0){\\n                ans[--n] = t%10;\\n                t/=10;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3675101,
                "title": "easy-solution-with-proper-explanation-c-everything-explained-properly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe code leverages the properties of integer division and the remainder operation to extract the separate digits from each number. Reversing the vector helps ensure correct digit extraction, and reversing the result vector restores the original order of the digits.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n The overall approach used in the code is as follows:\\n\\nThe input vector nums is reversed using reverse(nums.begin(), nums.end()). This step allows the digits to be extracted from least to most significant.\\n\\nThe code then iterates over each number in the reversed nums vector.\\n\\nInside the loop, the current number k is assigned to a temporary variable.\\n\\nA while loop is used to extract the digits from the current number. It continues until k becomes 0.\\n\\nInside the while loop, the least significant digit is extracted by calculating the remainder of k divided by 10. This digit is assigned to the variable c.\\n\\nThe extracted digit c is appended to the ans vector using ans.push_back(c).\\n\\nThe least significant digit is removed from the current number by dividing k by 10 (k = k / 10).\\n\\nThe process continues until k becomes 0, indicating that all digits of the current number have been extracted.\\n\\nFinally, the ans vector is reversed using reverse(ans.begin(), ans.end()) to restore the original order of the digits.\\n\\nThe ans vector is returned as the result of the separateDigits function.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe overall time complexity of the code is O(n * log10(k)), where n is the size of the vector and k is the maximum value among all the numbers in the vector.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity is O(d), where d is the total number of digits in all the numbers in the vector.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        int n = nums.size();\\n        int c;\\n        vector<int> ans;\\n        \\n        // Reverse the input vector to extract digits from least to most significant\\n        reverse(nums.begin(), nums.end());\\n        \\n        // Iterate over each number in the input vector\\n        for (int i = 0; i < n; i++) {\\n            int k = nums[i];\\n            \\n            // Extract digits from the current number\\n            while (k) {\\n                // Extract the least significant digit (remainder of division by 10)\\n                c = k % 10;\\n                \\n                // Append the extracted digit to the answer vector\\n                ans.push_back(c);\\n                \\n                // Remove the least significant digit from the current number\\n                k = k / 10;\\n            }\\n        }\\n        \\n        // Reverse the answer vector to restore the original digit order\\n        reverse(ans.begin(), ans.end());\\n        \\n        // Return the vector containing the separate digits\\n        return ans;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        int n = nums.size();\\n        int c;\\n        vector<int> ans;\\n        \\n        // Reverse the input vector to extract digits from least to most significant\\n        reverse(nums.begin(), nums.end());\\n        \\n        // Iterate over each number in the input vector\\n        for (int i = 0; i < n; i++) {\\n            int k = nums[i];\\n            \\n            // Extract digits from the current number\\n            while (k) {\\n                // Extract the least significant digit (remainder of division by 10)\\n                c = k % 10;\\n                \\n                // Append the extracted digit to the answer vector\\n                ans.push_back(c);\\n                \\n                // Remove the least significant digit from the current number\\n                k = k / 10;\\n            }\\n        }\\n        \\n        // Reverse the answer vector to restore the original digit order\\n        reverse(ans.begin(), ans.end());\\n        \\n        // Return the vector containing the separate digits\\n        return ans;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3187576,
                "title": "python-simple-python-solution-using-maths",
                "content": "# If You like the Solution, Don\\'t Forget To UpVote Me, Please UpVote! \\uD83D\\uDD3C\\uD83D\\uDE4F\\n# Runtime: 123 ms, faster than 6.15% of Python3 online submissions for Separate the Digits in an Array.\\n# Memory Usage: 14.6 MB, less than 27.41% of Python3 online submissions for Separate the Digits in an Array.\\n\\n\\tclass Solution:\\n\\t\\tdef separateDigits(self, nums: List[int]) -> List[int]:\\n\\n\\t\\t\\tresult = []\\n\\n\\t\\t\\tfor num in nums:\\n\\n\\t\\t\\t\\tcurrent_result = []\\n\\n\\t\\t\\t\\twhile num > 0:\\n\\t\\t\\t\\t\\tcurrent_result.append(num % 10)\\n\\t\\t\\t\\t\\tnum = num // 10\\n\\n\\t\\t\\t\\tresult = result + current_result[::-1]\\n\\n\\t\\t\\treturn result\\n# Thank You \\uD83E\\uDD73\\u270C\\uD83D\\uDC4D",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "# If You like the Solution, Don\\'t Forget To UpVote Me, Please UpVote! \\uD83D\\uDD3C\\uD83D\\uDE4F\\n# Runtime: 123 ms, faster than 6.15% of Python3 online submissions for Separate the Digits in an Array.\\n# Memory Usage: 14.6 MB, less than 27.41% of Python3 online submissions for Separate the Digits in an Array.\\n\\n\\tclass Solution:\\n\\t\\tdef separateDigits(self, nums: List[int]) -> List[int]:\\n\\n\\t\\t\\tresult = []\\n\\n\\t\\t\\tfor num in nums:\\n\\n\\t\\t\\t\\tcurrent_result = []\\n\\n\\t\\t\\t\\twhile num > 0:\\n\\t\\t\\t\\t\\tcurrent_result.append(num % 10)\\n\\t\\t\\t\\t\\tnum = num // 10\\n\\n\\t\\t\\t\\tresult = result + current_result[::-1]\\n\\n\\t\\t\\treturn result\\n# Thank You \\uD83E\\uDD73\\u270C\\uD83D\\uDC4D",
                "codeTag": "Java"
            },
            {
                "id": 3143526,
                "title": "java-simple-one",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        List<Integer> l=new ArrayList<>();\\n        \\n        for(int i:nums)\\n        {\\n            for(char c:String.valueOf(i).toCharArray()){\\n                l.add(c-\\'0\\');\\n            }\\n        }\\n        int res[]=new int[l.size()];\\n        int k=0;\\n        for(int i:l){\\n            res[k++]=i;\\n        }\\n        return res;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        List<Integer> l=new ArrayList<>();\\n        \\n        for(int i:nums)\\n        {\\n            for(char c:String.valueOf(i).toCharArray()){\\n                l.add(c-\\'0\\');\\n            }\\n        }\\n        int res[]=new int[l.size()];\\n        int k=0;\\n        for(int i:l){\\n            res[k++]=i;\\n        }\\n        return res;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3143061,
                "title": "python-1-line",
                "content": "```python\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        return map(int, \\'\\'.join(map(str, nums)))\\n```",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        return map(int, \\'\\'.join(map(str, nums)))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3142561,
                "title": "one-line-solution-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar separateDigits = function(nums) {\\n    return nums.join(\\'\\').split(\\'\\')\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar separateDigits = function(nums) {\\n    return nums.join(\\'\\').split(\\'\\')\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3141980,
                "title": "c-solution-using-number-remainder-concept",
                "content": "```\\nclass Solution {\\npublic:\\n    \\nvector<int> separateDigits(vector<int>& nums) {\\n    vector<int> ans;  \\n\\n    for(int i=0; i<nums.size(); ++i) {\\n\\n        vector<int> temp; \\n        while(nums[i]>0){\\n            temp.push_back(nums[i]%10);\\n            nums[i]/=10;\\n        }\\n        reverse(temp.begin(),temp.end());\\n        for(int j=0;j<temp.size();j++){\\n            ans.push_back(temp[j]);\\n        }\\n    }\\n\\n    return ans;\\n\\n\\n}\\n};\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    \\nvector<int> separateDigits(vector<int>& nums) {\\n    vector<int> ans;  \\n\\n    for(int i=0; i<nums.size(); ++i) {\\n\\n        vector<int> temp; \\n        while(nums[i]>0){\\n            temp.push_back(nums[i]%10);\\n            nums[i]/=10;\\n        }\\n        reverse(temp.begin(),temp.end());\\n        for(int j=0;j<temp.size();j++){\\n            ans.push_back(temp[j]);\\n        }\\n    }\\n\\n    return ans;\\n\\n\\n}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3141653,
                "title": "c-easy-code-with-explanation",
                "content": "\\n\\n\\n# Approach\\n\\n- Get the digits of the current number in an nums and insert them to a temporary array. Insert the numbers from the end of temporary array in the answer array. \\nFor example\\n\\n- nums = [13,25,83,77]\\n- Take the number 13.\\nInsert 3 into a temporary array.\\nInsert 1 in temporary array.\\nTemporary array will have {3,1}\\nStart from the end of temporary array and insert the digits into answer array.\\nAnswer array will contain {1,3}.\\n\\n- Then take the number 25. \\nInsert 5 into a temporary array.\\nInsert 2 in temporary array.\\nTemporary array will have {5,2}\\nStart from the end of temporary array and insert the digits into answer array.\\nAnswer array will contain {1,3,2,5}.\\n\\n- Follow the process until we reach the end of nums array.\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;//contains answer\\n\\n        for(int i=0;i<nums.size();i++){\\n            vector<int> temp;//The temporary vector used for storing digits of current number\\n            int j=nums[i];//j is current number\\n            while(j>0){\\n                temp.push_back(j%10);//storing digits in temporary vector\\n                j=j/10;\\n            }\\n            \\n            for(int i=temp.size()-1;i>=0;i--){\\n                ans.push_back(temp[i]);//Inserting the digits from temporary vector to answer vector\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```\\n**Please upvote if it helped. Happy Coding!**",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;//contains answer\\n\\n        for(int i=0;i<nums.size();i++){\\n            vector<int> temp;//The temporary vector used for storing digits of current number\\n            int j=nums[i];//j is current number\\n            while(j>0){\\n                temp.push_back(j%10);//storing digits in temporary vector\\n                j=j/10;\\n            }\\n            \\n            for(int i=temp.size()-1;i>=0;i--){\\n                ans.push_back(temp[i]);//Inserting the digits from temporary vector to answer vector\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3141469,
                "title": "c-intuitive-approach-easy-to-understand",
                "content": "# Code\\n```\\nclass Solution \\n{\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) \\n    {\\n        vector<int> ans, temp;\\n        int n;\\n        for(auto it:nums)\\n        {\\n            n = it;\\n            while(n)\\n            {\\n                temp.push_back(n%10);\\n                n/=10;\\n            }\\n            reverse(temp.begin(), temp.end());\\n            for(auto it:temp)\\n                ans.push_back(it);\\n            temp.clear();\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) \\n    {\\n        vector<int> ans, temp;\\n        int n;\\n        for(auto it:nums)\\n        {\\n            n = it;\\n            while(n)\\n            {\\n                temp.push_back(n%10);\\n                n/=10;\\n            }\\n            reverse(temp.begin(), temp.end());\\n            for(auto it:temp)\\n                ans.push_back(it);\\n            temp.clear();\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3866719,
                "title": "python-worst-solution-ever-don-t-upvote",
                "content": "\\nIT IS A MORAL REQUEST THAT DO NOT UPVOTE IT AS WELL AS \\nDOWN VOTE !!!!!!!!!!!!!!!!!!!!!!!\\n![image.png](https://assets.leetcode.com/users/images/650faf56-7e68-40e4-863e-1a95b829738c_1691231956.3960273.png)\\n\\n# Code\\n```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        s=[]\\n        for i in nums:\\n            s.extend(map(int,list(str(i))))\\n        return s\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        s=[]\\n        for i in nums:\\n            s.extend(map(int,list(str(i))))\\n        return s\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3600471,
                "title": "easy-c-solution",
                "content": "\\n    class Solution {\\n  \\n     public:\\n\\n     vector<int> separateDigits(vector<int>& nums) {\\n       \\n\\t   vector<int> ans ; \\n        \\n\\t\\tvector<int> nums1 ;\\n      \\n\\t  for(int i=0; i<nums.size();i++){\\n           int numm = nums[i];\\n          \\n\\t\\t  int rev = 0 ;\\n              \\n\\t\\t\\t  while(numm!=0){\\n                  int rem = numm%10;\\n                  rev = rev*10 + rem ;\\n                  numm = numm/10;\\n              }\\n            nums1.push_back(rev);\\n        }\\n       \\n\\t   for(int i=0 ; i<nums1.size() ;i++){\\n\\t\\t\\n            while(nums1[i]!=0){\\n                int rem = nums1[i]%10;\\n                ans.push_back(rem);\\n                nums1[i] = nums1[i]/10 ; \\n            }\\n            \\n\\t\\t\\twhile(nums[i]%10==0){\\n                   ans.push_back(0);\\n                   nums[i] = nums[i]/10; }\\n\\t\\t   }\\n\\t\\t   return ans ;\\n       }\\n\\t\\n       };",
                "solutionTags": [
                    "C",
                    "Array"
                ],
                "code": "class Solution {\\n  \\n     public:\\n\\n     vector<int> separateDigits(vector<int>& nums) {\\n       \\n\\t   vector<int> ans ; \\n        \\n\\t\\tvector<int> nums1 ;\\n      \\n\\t  for(int i=0; i<nums.size();i++){\\n           int numm = nums[i];\\n          \\n\\t\\t  int rev = 0 ;\\n              \\n\\t\\t\\t  while(numm!=0){\\n                  int rem = numm%10;\\n                  rev = rev*10 + rem ;\\n                  numm = numm/10;\\n              }",
                "codeTag": "Java"
            },
            {
                "id": 3522282,
                "title": "easy-solution",
                "content": "\\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        \\n        StringBuilder s= new StringBuilder();\\n        \\n        for(int num:nums) s.append(num);\\n        String t=s.toString();\\n\\n        int[] res= new int[t.length()];\\n\\n      \\n        for(int i=0;i<s.length();i++){\\n           res[i] =t.charAt(i)-\\'0\\';\\n            \\n        }\\n\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        \\n        StringBuilder s= new StringBuilder();\\n        \\n        for(int num:nums) s.append(num);\\n        String t=s.toString();\\n\\n        int[] res= new int[t.length()];\\n\\n      \\n        for(int i=0;i<s.length();i++){\\n           res[i] =t.charAt(i)-\\'0\\';\\n            \\n        }\\n\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3499502,
                "title": "simple-java-solution-for-beginners-4ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        List<Integer> AL = new ArrayList();\\n        int temp;\\n        for(int i = nums.length - 1; i >= 0; i--) {\\n            temp = nums[i];\\n            while(temp > 0){\\n                AL.add(temp % 10);\\n                temp /= 10;\\n            }\\n        }\\n        int answer[] = new int[AL.size()];\\n        int index = 0;\\n        for(int i = AL.size() - 1; i >= 0; i--) {\\n            answer[index++] = AL.get(i);\\n        }\\n        return answer;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        List<Integer> AL = new ArrayList();\\n        int temp;\\n        for(int i = nums.length - 1; i >= 0; i--) {\\n            temp = nums[i];\\n            while(temp > 0){\\n                AL.add(temp % 10);\\n                temp /= 10;\\n            }\\n        }\\n        int answer[] = new int[AL.size()];\\n        int index = 0;\\n        for(int i = AL.size() - 1; i >= 0; i--) {\\n            answer[index++] = AL.get(i);\\n        }\\n        return answer;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3450113,
                "title": "beats-99-84-easy-js-solution-with-comments-to-understand",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFirst I\\'ve mapped the array and I\\'m separating the digits in an array which will return an array of separated digits array.\\nAnd then we\\'ll flatten the array using concat method and return the result.\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar separateDigits = function(nums) {\\n// Here we will map through numbers to get separate digits in array\\n  const arr = nums.map((el) => {\\n  let arr = [];\\n  while(el!==0) {\\n    arr.push(el%10);\\n    el = Math.trunc(el/10)\\n  }\\n  return arr.reverse()\\n  });\\n// here we will flatten the array which consist of array of\\n// seperated digits\\n  return [].concat(...arr)\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar separateDigits = function(nums) {\\n// Here we will map through numbers to get separate digits in array\\n  const arr = nums.map((el) => {\\n  let arr = [];\\n  while(el!==0) {\\n    arr.push(el%10);\\n    el = Math.trunc(el/10)\\n  }\\n  return arr.reverse()\\n  });\\n// here we will flatten the array which consist of array of\\n// seperated digits\\n  return [].concat(...arr)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3345518,
                "title": "easy-python-solution-separatedigits",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        l = []\\n        for i in nums:\\n            s = str(i)\\n            for j in s:\\n                l.append(int(j))\\n        return l\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        l = []\\n        for i in nums:\\n            s = str(i)\\n            for j in s:\\n                l.append(int(j))\\n        return l\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3190856,
                "title": "python-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        l=[]\\n        res=\"\".join([str(digits) for digits in nums])\\n        for i in res:\\n            l.append(int(i))\\n        return l    \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        l=[]\\n        res=\"\".join([str(digits) for digits in nums])\\n        for i in res:\\n            l.append(int(i))\\n        return l    \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3164983,
                "title": "python-my-soultion-with-comments",
                "content": "\\n# Approach\\nThis code is a solution to separate the digits of a list of integers. Here\\'s how it works:\\n\\nThe function takes a list of integers as input, represented by the variable nums.\\n\\nIt first checks if the list is empty, in which case it returns an empty list using an if statement.\\n\\nIf the list is not empty, it sets the first element of the list as the variable n using n = nums[0].\\n\\nIt then creates an empty list called result to store the separated digits of n.\\n\\nThe function enters a while loop, which continues until n is less than 10. In each iteration of the loop:\\n\\na. It adds the remainder of n divided by 10 to the beginning of the result list using the insert method.\\n\\nb. It updates n to be the result of n divided by 10, which effectively removes the last digit of n.\\n\\nAfter the while loop, the function adds the final value of n to the beginning of the result list.\\n\\nFinally, it returns the concatenation of result and the result of calling self.separateDigits on the remaining elements of the list (nums[1:]), which effectively separates the digits of the rest of the numbers in the list.\\n\\nThis function uses recursion to handle the separation of all the numbers in the input list.\\n\\n# Complexity\\nThe time complexity of this function depends on the number of digits in the input list of integers. Let\\'s assume that the average number of digits in the input list is d, then the time complexity can be estimated as follows:\\n\\nThe initial setup and base case checking takes O(1) time.\\n\\nThe while loop takes O(d) time in the worst case, where d is the number of digits in the largest number in the list.\\n\\nThe recursive call to self.separateDigits takes O(n * d) time, where n is the number of elements in the input list. This is because the function is called once for each element in the list, and each call takes O(d) time to process the digits of the number.\\n\\nTherefore, the overall time complexity of this function is O(n * d).\\n\\nThe space complexity of this function is O(n * d), as well. This is because the result list stores the separated digits of all the numbers in the input list, and its size grows with the number of digits in the input list. Additionally, the function makes n recursive calls, each of which adds a new level to the call stack and requires additional memory.\\n\\n# Code\\n```\\nclass Solution(object):\\n    def separateDigits(self, nums):\\n        if len(nums) == 0:\\n            return []\\n        n = nums[0]\\n        result = []\\n        while n >= 10:\\n            result.insert(0, n % 10)\\n            n = n / 10\\n        result.insert(0, n)\\n        return result + self.separateDigits(nums[1:])\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def separateDigits(self, nums):\\n        if len(nums) == 0:\\n            return []\\n        n = nums[0]\\n        result = []\\n        while n >= 10:\\n            result.insert(0, n % 10)\\n            n = n / 10\\n        result.insert(0, n)\\n        return result + self.separateDigits(nums[1:])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3158421,
                "title": "beautiful-one-liner-flatmap-map-solution",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar separateDigits = function(nums) {\\n    return nums.flatMap(num => String(num).split(\\'\\').map(Number));\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar separateDigits = function(nums) {\\n    return nums.flatMap(num => String(num).split(\\'\\').map(Number));\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3145929,
                "title": "java-easy-100-faster",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        List<Integer> list = new ArrayList();\\n        for(int i = nums.length-1; i >= 0; i--){\\n            int temp = nums[i];\\n            while(temp > 0){\\n                int digit = temp % 10;\\n                list.add(digit);\\n                temp = temp / 10;\\n            }\\n        }\\n        int[] ans = new int[list.size()];\\n        int idx = 0;\\n        for(int i = list.size() - 1; i >= 0; i--){\\n            ans[idx] = list.get(i);\\n            idx++;\\n        }\\n        return ans;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        List<Integer> list = new ArrayList();\\n        for(int i = nums.length-1; i >= 0; i--){\\n            int temp = nums[i];\\n            while(temp > 0){\\n                int digit = temp % 10;\\n                list.add(digit);\\n                temp = temp / 10;\\n            }\\n        }\\n        int[] ans = new int[list.size()];\\n        int idx = 0;\\n        for(int i = list.size() - 1; i >= 0; i--){\\n            ans[idx] = list.get(i);\\n            idx++;\\n        }\\n        return ans;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3143056,
                "title": "golang-3-ms-5-1-mb",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n- Space complexity: $$O(n)$$\\n# Code\\n```\\nfunc separateDigits(nums []int) []int {\\n\\tvar result []int\\n\\tvar digits [6]int\\n\\tfor _, num := range nums {\\n\\t\\ti := 5\\n\\t\\tfor ; num != 0; i, num = i-1, num/10 {\\n\\t\\t\\tdigits[i] = num % 10\\n\\t\\t}\\n\\t\\tresult = append(result, digits[i+1:]...)\\n\\t}\\n\\treturn result\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc separateDigits(nums []int) []int {\\n\\tvar result []int\\n\\tvar digits [6]int\\n\\tfor _, num := range nums {\\n\\t\\ti := 5\\n\\t\\tfor ; num != 0; i, num = i-1, num/10 {\\n\\t\\t\\tdigits[i] = num % 10\\n\\t\\t}\\n\\t\\tresult = append(result, digits[i+1:]...)\\n\\t}\\n\\treturn result\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3142563,
                "title": "java-and-python-simple-easy-and-fast-solution",
                "content": "Please upvote if understood \\n\\n**Java **\\n\\n    public int[] separateDigits(int[] nums) {\\n        int len =0 ;\\n        for (int elem : nums){\\n            len+= (int) Math.floor(Math.log10(elem))+1;\\n        }\\n        int [] ans = new int [len];\\n        int idx =0 ;\\n        \\n        for(int elem : nums){\\n            String str = Integer.toString(elem);\\n            for(int i= 0 ;i<str.length();i++){\\n                ans[idx++] = str.charAt(i)-\\'0\\';\\n            }\\n        }\\n        return ans;\\n    }\\n\\n**Python **\\n\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        count = 0 ;\\n        ans = list();\\n        for x in nums:\\n            s = str(x);\\n            for i in range(len(s)):\\n                ans.append(int(s[i]));\\n        return ans;",
                "solutionTags": [
                    "Array"
                ],
                "code": "Please upvote if understood \\n\\n**Java **\\n\\n    public int[] separateDigits(int[] nums) {\\n        int len =0 ;\\n        for (int elem : nums){\\n            len+= (int) Math.floor(Math.log10(elem))+1;\\n        }\\n        int [] ans = new int [len];\\n        int idx =0 ;\\n        \\n        for(int elem : nums){\\n            String str = Integer.toString(elem);\\n            for(int i= 0 ;i<str.length();i++){\\n                ans[idx++] = str.charAt(i)-\\'0\\';\\n            }\\n        }\\n        return ans;\\n    }\\n\\n**Python **\\n\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        count = 0 ;\\n        ans = list();\\n        for x in nums:\\n            s = str(x);\\n            for i in range(len(s)):\\n                ans.append(int(s[i]));\\n        return ans;",
                "codeTag": "Python3"
            },
            {
                "id": 3142103,
                "title": "c-linq",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe can split each number into digits and enumerate\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nLinq query\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n * log(item))$$\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n\\n# Code\\n```\\npublic class Solution {\\n    public int[] SeparateDigits(int[] nums) {\\n        static IEnumerable<int> Digits(int value) {\\n            for (; value > 0; value /= 10)\\n                yield return value % 10;\\n        }    \\n\\n        return nums\\n            .SelectMany(item => Digits(item).Reverse())\\n            .ToArray();\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int[] SeparateDigits(int[] nums) {\\n        static IEnumerable<int> Digits(int value) {\\n            for (; value > 0; value /= 10)\\n                yield return value % 10;\\n        }    \\n\\n        return nums\\n            .SelectMany(item => Digits(item).Reverse())\\n            .ToArray();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3142083,
                "title": "easy-to-understand-readable-python-code",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n\\n        string_sep = []\\n\\n        for num in nums:\\n            for s in str(num):\\n                string_sep.append(int(s))\\n\\n        return string_sep\\n        \\n```\\nBy using List Comprehension:\\n```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        ans = []\\n        for num in nums:\\n            ans.extend([int(s) for s in str(num)])\\n        return ans\\n```\\nJUST FOR FUN A FEW ONE LINERS:\\n\\nOne liner using List Comprehension:\\n```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        return [int(s) for num in nums for s in str(num)]\\n        \\n```\\nOne liner using itertools.chain:\\n```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        return map(int, chain(*map(str, nums)))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n\\n        string_sep = []\\n\\n        for num in nums:\\n            for s in str(num):\\n                string_sep.append(int(s))\\n\\n        return string_sep\\n        \\n```\n```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        ans = []\\n        for num in nums:\\n            ans.extend([int(s) for s in str(num)])\\n        return ans\\n```\n```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        return [int(s) for num in nums for s in str(num)]\\n        \\n```\n```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        return map(int, chain(*map(str, nums)))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3141914,
                "title": "java-solution-using-stacks",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        List<Integer> temp = new ArrayList<>();\\n        Stack<Integer> st = new Stack<>();\\n        \\n        for(int i=0; i<nums.length; i++){\\n            while(nums[i]>0){\\n                int digit = nums[i] % 10;\\n                st.push(digit);\\n                nums[i] = nums[i] / 10;\\n                \\n            }\\n            while(!st.empty()){\\n                temp.add(st.peek());\\n                st.pop();\\n            }\\n        }\\n        int[] answer = new int[temp.size()];\\n        for (int i = 0; i < temp.size(); i++) {\\n            answer[i] = temp.get(i);\\n        }\\n        return answer;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        List<Integer> temp = new ArrayList<>();\\n        Stack<Integer> st = new Stack<>();\\n        \\n        for(int i=0; i<nums.length; i++){\\n            while(nums[i]>0){\\n                int digit = nums[i] % 10;\\n                st.push(digit);\\n                nums[i] = nums[i] / 10;\\n                \\n            }\\n            while(!st.empty()){\\n                temp.add(st.peek());\\n                st.pop();\\n            }\\n        }\\n        int[] answer = new int[temp.size()];\\n        for (int i = 0; i < temp.size(); i++) {\\n            answer[i] = temp.get(i);\\n        }\\n        return answer;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3141907,
                "title": "easy-c-brute-force",
                "content": "## Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n## Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;\\n        for (int i=0; i<nums.size(); i++){\\n            if (nums[i]<10)ans.push_back(nums[i]);\\n            else{\\n                int val= nums[i];\\n                string num;\\n                while(val>0){\\n                    num+= ((val%10)+\\'0\\');\\n                    val/= 10;\\n                }\\n                for (int i= num.size()-1; i>=0; i--){\\n                    ans.push_back(num[i]-\\'0\\');\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;\\n        for (int i=0; i<nums.size(); i++){\\n            if (nums[i]<10)ans.push_back(nums[i]);\\n            else{\\n                int val= nums[i];\\n                string num;\\n                while(val>0){\\n                    num+= ((val%10)+\\'0\\');\\n                    val/= 10;\\n                }\\n                for (int i= num.size()-1; i>=0; i--){\\n                    ans.push_back(num[i]-\\'0\\');\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3141879,
                "title": "java-100-faster-stack-approach-lifo",
                "content": "**Intuition  :** As all we know stacks are \"last in first out\", so we use this method to store remainders in a Stack and get all elements from the stack to ArrayList so that it follows the order. Sorry for my bad english !\\n\\n**Alogithm  :**\\n```\\n1. Create empty Stack and one List.\\n2. Traverse the nums array and store all the digits of every number into the Stack.\\n3. pop() every element from the Stack to List, now the elements are storing in reverse order into the List as exactly what we need.\\n4. after iteration create answer array which length equals to size of List, and traverse through List and add elements to answer array\\n5. return final array.\\n```\\n\\n**Java Code :**\\n```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        \\n        Stack<Integer> stack = new Stack<>();\\n        ArrayList<Integer> list = new ArrayList<>();\\n\\n        for (int x : nums) {\\n\\n            while (x > 0) {\\n                int rem = x % 10;\\n                stack.push(rem);\\n                x /= 10;\\n            }\\n            \\n            while (!stack.isEmpty()) {\\n                list.add(stack.pop());\\n            }\\n        }\\n\\n        int index = 0;\\n        int[] ans = new int[list.size()];\\n\\n        for (int i = 0; i < list.size(); i++) {\\n            ans[index++] = list.get(i);\\n        }\\n        return ans;\\n    }\\n}\\n```\\n\\n**Time Complexity : O(N)\\nSpace Complexity : O(N)**",
                "solutionTags": [
                    "Java",
                    "Stack"
                ],
                "code": "```\\n1. Create empty Stack and one List.\\n2. Traverse the nums array and store all the digits of every number into the Stack.\\n3. pop() every element from the Stack to List, now the elements are storing in reverse order into the List as exactly what we need.\\n4. after iteration create answer array which length equals to size of List, and traverse through List and add elements to answer array\\n5. return final array.\\n```\n```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        \\n        Stack<Integer> stack = new Stack<>();\\n        ArrayList<Integer> list = new ArrayList<>();\\n\\n        for (int x : nums) {\\n\\n            while (x > 0) {\\n                int rem = x % 10;\\n                stack.push(rem);\\n                x /= 10;\\n            }\\n            \\n            while (!stack.isEmpty()) {\\n                list.add(stack.pop());\\n            }\\n        }\\n\\n        int index = 0;\\n        int[] ans = new int[list.size()];\\n\\n        for (int i = 0; i < list.size(); i++) {\\n            ans[index++] = list.get(i);\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3141854,
                "title": "java-very-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        ArrayList<Integer>ar=new ArrayList<>();\\n        \\n        for(int i=nums.length-1;i>=0;i--){\\n            int x=nums[i];\\n            while(x>0){\\n                int rem=x%10;\\n                ar.add(rem);\\n                x/=10;\\n                \\n            }\\n        }\\n        Collections.reverse(ar);\\n        int ans[]=new int[ar.size()];\\n        for(int i=0;i<ar.size();i++){\\n            ans[i]=ar.get(i);\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        ArrayList<Integer>ar=new ArrayList<>();\\n        \\n        for(int i=nums.length-1;i>=0;i--){\\n            int x=nums[i];\\n            while(x>0){\\n                int rem=x%10;\\n                ar.add(rem);\\n                x/=10;\\n                \\n            }\\n        }\\n        Collections.reverse(ar);\\n        int ans[]=new int[ar.size()];\\n        for(int i=0;i<ar.size();i++){\\n            ans[i]=ar.get(i);\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3141774,
                "title": "simple-java-c-with-comments-100-4-lines-code-readable-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n///// Method -- 1 Using By ArrayList\\n\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n            // create a array list type of Integer\\n            ArrayList<Integer> al = new ArrayList<>();\\n            // traversal on the array\\n            for(int i = 0; i< nums.length; i ++) {\\n                    // initialize an string and add with array element\\n                    String s = nums[i]+ \"\";\\n                    // now traversal on the string \\n                    // after that add in array list and parseint\\n                    for(int j = 0; j< s.length(); j ++) al.add(Integer.parseInt(s.charAt(j)+\"\"));\\n            }\\n            // initialize the new answer array size of arraylist\\n            int ans[] = new int[al.size()];\\n            // now traversal on the arraylist and put all element in the answer array\\n            for(int i = 0; i< al.size(); i++) ans[i] = al.get(i);\\n            \\n            return ans;\\n    }\\n}\\n\\n\\n\\n// Method -- 2 By Stack \\n\\n// class Solution {\\n//     public int[] separateDigits(int[] nums) {\\n//         int[] ans = new int[6000];\\n//         int c = 0;\\n//         for(int x:nums){\\n//             Stack<Integer> s = new Stack<>();\\n//             for(int y = x; y > 0; y /= 10)s.push(y%10);\\n//             while(!s.isEmpty())ans[c++] = s.pop();\\n//         }\\n//         return Arrays.copyOf(ans, c);\\n//     }\\n// }\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n///// Method -- 1 Using By ArrayList\\n\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n            // create a array list type of Integer\\n            ArrayList<Integer> al = new ArrayList<>();\\n            // traversal on the array\\n            for(int i = 0; i< nums.length; i ++) {\\n                    // initialize an string and add with array element\\n                    String s = nums[i]+ \"\";\\n                    // now traversal on the string \\n                    // after that add in array list and parseint\\n                    for(int j = 0; j< s.length(); j ++) al.add(Integer.parseInt(s.charAt(j)+\"\"));\\n            }\\n            // initialize the new answer array size of arraylist\\n            int ans[] = new int[al.size()];\\n            // now traversal on the arraylist and put all element in the answer array\\n            for(int i = 0; i< al.size(); i++) ans[i] = al.get(i);\\n            \\n            return ans;\\n    }\\n}\\n\\n\\n\\n// Method -- 2 By Stack \\n\\n// class Solution {\\n//     public int[] separateDigits(int[] nums) {\\n//         int[] ans = new int[6000];\\n//         int c = 0;\\n//         for(int x:nums){\\n//             Stack<Integer> s = new Stack<>();\\n//             for(int y = x; y > 0; y /= 10)s.push(y%10);\\n//             while(!s.isEmpty())ans[c++] = s.pop();\\n//         }\\n//         return Arrays.copyOf(ans, c);\\n//     }\\n// }\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3141444,
                "title": "java-easy-solution-explained",
                "content": "---\\n# Please Upvote \\uD83D\\uDE07\\n---\\n``` java []\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        List<Integer> ans = new ArrayList<>();\\n        for (int i : nums) {\\n            // for every number in nums, \\n            // we would add digit by digit to this new list\\n            List<Integer> list = new ArrayList<>();\\n            while (i > 0) {\\n                // get the last digit, add to first position\\n                list.add(0, i % 10);    \\n                i /= 10;     // get rid of last digit\\n            }\\n            // add all the digits in answer list\\n            ans.addAll(list);\\n        }\\n        \\n        // return the answer list as an array\\n        return ans.stream().mapToInt(i -> i).toArray();\\n    }\\n}\\n```\\n##### Time complexity: $$O(n)$$\\n##### Space complexity: $$O(n)$$\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "``` java []\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        List<Integer> ans = new ArrayList<>();\\n        for (int i : nums) {\\n            // for every number in nums, \\n            // we would add digit by digit to this new list\\n            List<Integer> list = new ArrayList<>();\\n            while (i > 0) {\\n                // get the last digit, add to first position\\n                list.add(0, i % 10);    \\n                i /= 10;     // get rid of last digit\\n            }\\n            // add all the digits in answer list\\n            ans.addAll(list);\\n        }\\n        \\n        // return the answer list as an array\\n        return ans.stream().mapToInt(i -> i).toArray();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3980081,
                "title": "fast-java-solution-runtime-beginners-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        int len = 0;\\n        for (int num : nums) {\\n            while (num > 0) {\\n                num /= 10;\\n                ++len;\\n            }\\n        }\\n\\n        int[] res = new int[len];\\n        int index = len-1;\\n\\n        for (int i = nums.length-1; i >= 0; i--) {\\n            int num = nums[i];\\n            while (num > 0) {\\n                res[index--] = num%10;\\n                num /= 10;\\n            }\\n        }\\n\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        int len = 0;\\n        for (int num : nums) {\\n            while (num > 0) {\\n                num /= 10;\\n                ++len;\\n            }\\n        }\\n\\n        int[] res = new int[len];\\n        int index = len-1;\\n\\n        for (int i = nums.length-1; i >= 0; i--) {\\n            int num = nums[i];\\n            while (num > 0) {\\n                res[index--] = num%10;\\n                num /= 10;\\n            }\\n        }\\n\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3979212,
                "title": "beats-91-41-of-users-with-python-and-beats-63-67-of-users-with-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def separateDigits(self, nums):\\n        element = int(\\'\\'.join(map(str, nums)))\\n        return [int(i) for i in str(element)]\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def separateDigits(self, nums):\\n        element = int(\\'\\'.join(map(str, nums)))\\n        return [int(i) for i in str(element)]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3893860,
                "title": "python-solution-without-data-conv-easy-to-understand",
                "content": "# Intuition\\n\\n---\\n\\n\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nTo solve this problem, you can use the simple **digit extraction method** to get the required output without converting data type which makes the program runtime **slower**.\\n\\n# Approach\\n\\n---\\n\\n\\n<!-- Describe your approach to solving the problem. -->\\nIn this solution, the **getDigits()** function takes an integer **n** and returns a list of its digits. It uses a while loop to extract digits from the number by repeatedly dividing it by **10** and adding the remainder to the list. The **insert(0, digit)** is used to maintain the order of digits.\\n\\nThe **separateDigits()** function then iterates through the input array nums, calls the **getDigits()** function for each number, and **extends** the answer list with the extracted digits. This way, you can achieve the desired result without using **data conversion to strings**.\\n\\n---\\n\\n\\n![Screenshot 2023-08-11 115212.png](https://assets.leetcode.com/users/images/954636a0-fff5-4f89-b0e9-4c616cbf7dc9_1691734958.4384966.png)\\n\\n# Code\\n\\n---\\n\\n\\n```\\nclass Solution(object):\\n    def separateDigits(self, nums):\\n        def getDigits(n):\\n            digits = []\\n            while n > 0:\\n                digit = n % 10\\n                digits.insert(0, digit)\\n                n = n // 10\\n            return digits\\n        \\n        answer = []\\n        for num in nums:\\n            digits = getDigits(num)\\n            answer.extend(digits)\\n        \\n        return answer\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Array",
                    "Simulation"
                ],
                "code": "```\\nclass Solution(object):\\n    def separateDigits(self, nums):\\n        def getDigits(n):\\n            digits = []\\n            while n > 0:\\n                digit = n % 10\\n                digits.insert(0, digit)\\n                n = n // 10\\n            return digits\\n        \\n        answer = []\\n        for num in nums:\\n            digits = getDigits(num)\\n            answer.extend(digits)\\n        \\n        return answer\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3879726,
                "title": "python-easy-solution-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        res=[]\\n        for i in nums:\\n            for j in str(i):\\n                res.append(int(j))\\n        return res\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        res=[]\\n        for i in nums:\\n            for j in str(i):\\n                res.append(int(j))\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3557609,
                "title": "one-line-solution-swift",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    func separateDigits(_ nums: [Int]) -> [Int] {\\n        Array(nums.map { String($0) }.reduce(\"\", +)).compactMap { Int(String($0)) }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func separateDigits(_ nums: [Int]) -> [Int] {\\n        Array(nums.map { String($0) }.reduce(\"\", +)).compactMap { Int(String($0)) }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3499522,
                "title": "simple-java-solution-for-beginners-1ms-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        int size = 0;\\n        int temp;\\n        for(int i = 0; i < nums.length; i++) {\\n            temp = nums[i];\\n            while(temp > 0) {\\n                size++;\\n                temp /= 10;\\n            }\\n        }\\n        int answer[] = new int[size];\\n        for(int i = nums.length - 1; i >= 0; i--) {\\n            while(nums[i] > 0) {\\n                answer[--size] = nums[i] % 10;\\n                nums[i] /= 10;\\n            }\\n        }\\n        return answer;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        int size = 0;\\n        int temp;\\n        for(int i = 0; i < nums.length; i++) {\\n            temp = nums[i];\\n            while(temp > 0) {\\n                size++;\\n                temp /= 10;\\n            }\\n        }\\n        int answer[] = new int[size];\\n        for(int i = nums.length - 1; i >= 0; i--) {\\n            while(nums[i] > 0) {\\n                answer[--size] = nums[i] % 10;\\n                nums[i] /= 10;\\n            }\\n        }\\n        return answer;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3465745,
                "title": "c-easy-and-fast-solution",
                "content": "# Code\\n```\\npublic class Solution {\\n    public int[] SeparateDigits(int[] nums) {\\n        List<int> tem = new List<int>();\\n        foreach (int fg in nums)\\n        {\\n            string inputString = fg.ToString();\\n            for (int i = 0; i < inputString.Length; i++)\\n            {\\n                int digit = inputString[i] - \\'0\\';\\n                tem.Add(digit);\\n            }\\n        }\\n        return tem.ToArray();        \\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int[] SeparateDigits(int[] nums) {\\n        List<int> tem = new List<int>();\\n        foreach (int fg in nums)\\n        {\\n            string inputString = fg.ToString();\\n            for (int i = 0; i < inputString.Length; i++)\\n            {\\n                int digit = inputString[i] - \\'0\\';\\n                tem.Add(digit);\\n            }\\n        }\\n        return tem.ToArray();        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3399735,
                "title": "easy-java-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) \\n    {\\n        List<Integer> finalList = new ArrayList<Integer>();\\n\\n        for(int I : nums)\\n        {\\n            List<Integer> currList = new ArrayList<Integer>();\\n            for(int tempNum = I; tempNum > 0; tempNum/=10)\\n            {\\n                currList.add(tempNum%10);\\n            }\\n            for(int idx = currList.size() -1; idx >=0; idx--)\\n            {\\n                finalList.add(currList.get(idx));\\n            } \\n        }\\n        int[] finalArray = new int[finalList.size()];\\n        int idx = 0;\\n        for(Integer I : finalList)\\n        {\\n            finalArray[idx++] = (int)I;\\n        }\\n        return finalArray;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) \\n    {\\n        List<Integer> finalList = new ArrayList<Integer>();\\n\\n        for(int I : nums)\\n        {\\n            List<Integer> currList = new ArrayList<Integer>();\\n            for(int tempNum = I; tempNum > 0; tempNum/=10)\\n            {\\n                currList.add(tempNum%10);\\n            }\\n            for(int idx = currList.size() -1; idx >=0; idx--)\\n            {\\n                finalList.add(currList.get(idx));\\n            } \\n        }\\n        int[] finalArray = new int[finalList.size()];\\n        int idx = 0;\\n        for(Integer I : finalList)\\n        {\\n            finalArray[idx++] = (int)I;\\n        }\\n        return finalArray;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3357254,
                "title": "using-arraylist",
                "content": "\\n# Code\\n```\\nimport java.io.*;\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        \\n          \\n    ArrayList<Integer> test = new ArrayList<Integer>();\\n    for( int i=nums.length-1; i>=0;i--){\\n        int temp = nums[i];\\n        while(temp>0){\\n            test.add(temp%10);\\n            temp=temp/10;\\n        }\\n    }\\n\\n    Collections.reverse(test);   \\n\\n    return test.stream().mapToInt(Integer::intValue).toArray();\\n\\n\\n\\n\\n\\n           \\n      \\n\\n        \\n       \\n\\n      \\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nimport java.io.*;\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        \\n          \\n    ArrayList<Integer> test = new ArrayList<Integer>();\\n    for( int i=nums.length-1; i>=0;i--){\\n        int temp = nums[i];\\n        while(temp>0){\\n            test.add(temp%10);\\n            temp=temp/10;\\n        }\\n    }\\n\\n    Collections.reverse(test);   \\n\\n    return test.stream().mapToInt(Integer::intValue).toArray();\\n\\n\\n\\n\\n\\n           \\n      \\n\\n        \\n       \\n\\n      \\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3343562,
                "title": "easiest-approach-t-c-o-n-s-c-o-1-c-c",
                "content": "# Approach\\n**STEPS:**\\n1)calculate required length by iterating through each element once.\\n\\n2)iterate again and store element in a small array of constant length 6 since max element is 10<sup>5 \\n\\n3)put array elements in reverse order to our answer\\n\\n4)done!!!!!\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nint* separateDigits(int* nums, int numsSize, int* returnSize){\\n    *returnSize=0;\\n    for(int i=0;i<numsSize;i++){\\n        int n=nums[i];\\n        while(n!=0){\\n            *returnSize+=1;\\n            n=n/10;\\n        }\\n    }\\n    int *answer=(int*)malloc(*returnSize*sizeof(int));\\n    int k=0;\\n    for(int i=0;i<numsSize;i++){\\n        int n=nums[i],arr[6],x=0;\\n        while(n!=0){\\n            arr[x++]=n%10;\\n            n=n/10;\\n        }\\n        while(x>0){\\n            answer[k++]=arr[--x];\\n        }\\n    }\\n    return answer;\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nint* separateDigits(int* nums, int numsSize, int* returnSize){\\n    *returnSize=0;\\n    for(int i=0;i<numsSize;i++){\\n        int n=nums[i];\\n        while(n!=0){\\n            *returnSize+=1;\\n            n=n/10;\\n        }\\n    }\\n    int *answer=(int*)malloc(*returnSize*sizeof(int));\\n    int k=0;\\n    for(int i=0;i<numsSize;i++){\\n        int n=nums[i],arr[6],x=0;\\n        while(n!=0){\\n            arr[x++]=n%10;\\n            n=n/10;\\n        }\\n        while(x>0){\\n            answer[k++]=arr[--x];\\n        }\\n    }\\n    return answer;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3280366,
                "title": "easy-c-solution-without-string-conversion",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\njust convert each no. to digits by breaking it,  nums[i] /= 10;\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\npush back the given vector in a loop and reverse the order.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n^2)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;\\n        int  n = nums.size();\\n        for(int i =nums.size()-1;i>=0;i--){\\n            while (nums[i] > 0)\\n{\\n    int digit = nums[i]%10;\\n    auto prev_size = ans.size();\\n    nums[i] /= 10;\\n    ans.push_back(digit);\\n    \\n    \\n    }\\n        }\\n        reverse(ans.begin(), ans.end());\\n         return  ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;\\n        int  n = nums.size();\\n        for(int i =nums.size()-1;i>=0;i--){\\n            while (nums[i] > 0)\\n{\\n    int digit = nums[i]%10;\\n    auto prev_size = ans.size();\\n    nums[i] /= 10;\\n    ans.push_back(digit);\\n    \\n    \\n    }\\n        }\\n        reverse(ans.begin(), ans.end());\\n         return  ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3252955,
                "title": "separate-the-digits-in-an-array-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n^2)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        int i, j;\\n        vector<int> ans;\\n        vector<int> temp;\\n        for(i=0 ; i<nums.size() ; i++)\\n        {\\n            while(nums[i]>0)\\n            {\\n                j = nums[i]%10;\\n                temp.push_back(j);\\n                nums[i] = nums[i]/10;\\n            }\\n            reverse(temp.begin(), temp.end());\\n            for(j=0 ; j<temp.size() ; j++)\\n            {\\n                ans.push_back(temp[j]);\\n            }\\n            temp.clear();\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        int i, j;\\n        vector<int> ans;\\n        vector<int> temp;\\n        for(i=0 ; i<nums.size() ; i++)\\n        {\\n            while(nums[i]>0)\\n            {\\n                j = nums[i]%10;\\n                temp.push_back(j);\\n                nums[i] = nums[i]/10;\\n            }\\n            reverse(temp.begin(), temp.end());\\n            for(j=0 ; j<temp.size() ; j++)\\n            {\\n                ans.push_back(temp[j]);\\n            }\\n            temp.clear();\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3193798,
                "title": "java-easiest-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n     int amount = 0;\\n     List<List<Integer>> lists = new ArrayList<>();\\n     for(int n : nums) {\\n         List<Integer> list = new ArrayList<>();\\n         while(n > 0) {\\n             list.add(n % 10);\\n             n /= 10;\\n         }\\n         amount += list.size();\\n         lists.add(list);\\n     } \\n     int arr[] = new int[amount];\\n     int count = 0;\\n     for(List<Integer> list : lists) {\\n          for (int i = list.size() - 1; i >= 0; i --) {\\n                arr[count ++] = list.get(i);\\n            }\\n        }\\n        return arr;\\n     }   \\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n     int amount = 0;\\n     List<List<Integer>> lists = new ArrayList<>();\\n     for(int n : nums) {\\n         List<Integer> list = new ArrayList<>();\\n         while(n > 0) {\\n             list.add(n % 10);\\n             n /= 10;\\n         }\\n         amount += list.size();\\n         lists.add(list);\\n     } \\n     int arr[] = new int[amount];\\n     int count = 0;\\n     for(List<Integer> list : lists) {\\n          for (int i = list.size() - 1; i >= 0; i --) {\\n                arr[count ++] = list.get(i);\\n            }\\n        }\\n        return arr;\\n     }   \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3192986,
                "title": "easy-c-solution-with-explaination",
                "content": "# Intuition\\nAll we need to do is to traverse the array, and one by one, push the digits in a new array. \\n\\n# Approach\\nFor this, first the numbers are converted to string and traversed. Then each digit is pushed into result array.\\n\\n# Complexity\\n- Time complexity: O(nm)\\nWhere \\'n\\' is the length of given array and \\'m\\' is the maximum length of a number.\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;\\n        for(int i=0; i<nums.size(); i++){\\n            string s = to_string(nums[i]);          //Convert given number to string\\n            for(int j=0; j<s.length(); j++){        //Traverse the string\\n                ans.push_back(s[j]-\\'0\\');            //Pushback the numerical value\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;\\n        for(int i=0; i<nums.size(); i++){\\n            string s = to_string(nums[i]);          //Convert given number to string\\n            for(int j=0; j<s.length(); j++){        //Traverse the string\\n                ans.push_back(s[j]-\\'0\\');            //Pushback the numerical value\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3187668,
                "title": "easy",
                "content": "\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        res = []\\n        for i in range(0,len(nums)):\\n            if(len(str(nums[i]))> 1):\\n                j = str(nums[i])\\n                for k in j:\\n                    res.append(int(k))\\n            else:\\n                res.append(int(nums[i]))\\n        return res\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        res = []\\n        for i in range(0,len(nums)):\\n            if(len(str(nums[i]))> 1):\\n                j = str(nums[i])\\n                for k in j:\\n                    res.append(int(k))\\n            else:\\n                res.append(int(nums[i]))\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3169444,
                "title": "c-easy-solution-using-stack",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int>ans;\\n        stack<int>st;\\n        for(int i=0;i<nums.size();i++){\\n            int n=nums[i];\\n            while(n>0){\\n            int r=n%10;\\n            st.push(r);\\n            n=n/10;\\n            }\\n while(!st.empty()){\\n            ans.push_back(st.top());\\n            st.pop();\\n        }\\n        }\\n       return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int>ans;\\n        stack<int>st;\\n        for(int i=0;i<nums.size();i++){\\n            int n=nums[i];\\n            while(n>0){\\n            int r=n%10;\\n            st.push(r);\\n            n=n/10;\\n            }\\n while(!st.empty()){\\n            ans.push_back(st.top());\\n            st.pop();\\n        }\\n        }\\n       return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3167204,
                "title": "c-simple-commented",
                "content": "```\\nvector<int> ans;    // To store final result\\n        \\n        for(int num: nums)\\n        {\\n            vector<int> temp;    // temporary vector to store digits of numbers.\\n            while(num)\\n            {\\n                temp.push_back(num%10);\\n                num = num/10;\\n            }\\n            for(int i = temp.size()-1; i>=0; i--)  // to store digits in final \"ans\", as digits were \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  // stored in descending format while breaking the numbers into digits..\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// {e.g., 13 -> in temp=> {3,1} -> in ans => {1,3}}\\n                {\\n                    ans.push_back(temp[i]);\\n                }\\n        }\\n        return ans;\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nvector<int> ans;    // To store final result\\n        \\n        for(int num: nums)\\n        {\\n            vector<int> temp;    // temporary vector to store digits of numbers.\\n            while(num)\\n            {\\n                temp.push_back(num%10);\\n                num = num/10;\\n            }\\n            for(int i = temp.size()-1; i>=0; i--)  // to store digits in final \"ans\", as digits were \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  // stored in descending format while breaking the numbers into digits..\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// {e.g., 13 -> in temp=> {3,1} -> in ans => {1,3}}\\n                {\\n                    ans.push_back(temp[i]);\\n                }\\n        }\\n        return ans;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3162877,
                "title": "java-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        int amount = 0;\\n        List<List<Integer>> lists = new ArrayList<>();\\n        for (int n : nums) {\\n            List<Integer> list = new ArrayList<>();\\n            while (n > 0) {\\n                list.add(n % 10);\\n                n /= 10;\\n            }\\n            amount += list.size();\\n            lists.add(list);\\n        }\\n        int[] arr = new int[amount];\\n        int count = 0;\\n        for (List<Integer> list : lists) {\\n            for (int i = list.size() - 1; i >= 0; i--) {\\n                arr[count++] = list.get(i);\\n            }\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        int amount = 0;\\n        List<List<Integer>> lists = new ArrayList<>();\\n        for (int n : nums) {\\n            List<Integer> list = new ArrayList<>();\\n            while (n > 0) {\\n                list.add(n % 10);\\n                n /= 10;\\n            }\\n            amount += list.size();\\n            lists.add(list);\\n        }\\n        int[] arr = new int[amount];\\n        int count = 0;\\n        for (List<Integer> list : lists) {\\n            for (int i = list.size() - 1; i >= 0; i--) {\\n                arr[count++] = list.get(i);\\n            }\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3157358,
                "title": "c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        \\n        vector<int> ans;\\n        vector<int> temp;\\n        int n=nums.size();\\n        for(int i=0;i<n;i++)\\n        {\\n            int k=nums[i];\\n            while(k>0)\\n            {\\n                int rem=k%10;\\n                temp.push_back(rem);\\n                k=k/10;\\n            }\\n\\n            int m=temp.size();\\n            for(int i=m-1;i>=0;i--)\\n            {\\n                ans.push_back(temp[i]);\\n            }\\n            \\n            for(int i=0;i<m;i++)\\n            {\\n                temp.pop_back();\\n            }\\n        }\\nreturn ans;\\n\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        \\n        vector<int> ans;\\n        vector<int> temp;\\n        int n=nums.size();\\n        for(int i=0;i<n;i++)\\n        {\\n            int k=nums[i];\\n            while(k>0)\\n            {\\n                int rem=k%10;\\n                temp.push_back(rem);\\n                k=k/10;\\n            }\\n\\n            int m=temp.size();\\n            for(int i=m-1;i>=0;i--)\\n            {\\n                ans.push_back(temp[i]);\\n            }\\n            \\n            for(int i=0;i<m;i++)\\n            {\\n                temp.pop_back();\\n            }\\n        }\\nreturn ans;\\n\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3152541,
                "title": "c-beginners-guide-to-solving-this-question-with-ease-0-ms-100-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int>ans; //vector needed to be returned for the answer\\n    void convert(string nums){ //convert function to convert the int into string and traverse\\n        for(int i=0;i<nums.size();i++){\\n            ans.push_back(nums[i]-\\'0\\');//add the values into the ans vector, but only after changing them back into int\\n        }\\n        return; //not needed here, but a good practice nevertheless.\\n    }\\n    vector<int> separateDigits(vector<int>& nums) {        \\n        for(int i=0;i<nums.size();i++){ //loop 1 starts, iterate the nums vector for each number\\n            convert(to_string(nums[i])); //convert the nums[i] into string(reason being-> easier to traverse in a string \\n\\t\\t\\t//than to traverse an integer as that would either require we manipulate the original value \\n\\t\\t\\t//or store it into a variable, which would take up space, not significantly but still, why \\n\\t\\t\\t//do it when we can do it better \\uD83D\\uDE09(while learning some STL))\\n        }\\n        return ans; //NIRVANA \\uD83D\\uDE4F\\uD83C\\uDFFC\\n    }\\n};\\n//Upvote this answer if it helped you \\uD83E\\uDD70\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int>ans; //vector needed to be returned for the answer\\n    void convert(string nums){ //convert function to convert the int into string and traverse\\n        for(int i=0;i<nums.size();i++){\\n            ans.push_back(nums[i]-\\'0\\');//add the values into the ans vector, but only after changing them back into int\\n        }\\n        return; //not needed here, but a good practice nevertheless.\\n    }\\n    vector<int> separateDigits(vector<int>& nums) {        \\n        for(int i=0;i<nums.size();i++){ //loop 1 starts, iterate the nums vector for each number\\n            convert(to_string(nums[i])); //convert the nums[i] into string(reason being-> easier to traverse in a string \\n\\t\\t\\t//than to traverse an integer as that would either require we manipulate the original value \\n\\t\\t\\t//or store it into a variable, which would take up space, not significantly but still, why \\n\\t\\t\\t//do it when we can do it better \\uD83D\\uDE09(while learning some STL))\\n        }\\n        return ans; //NIRVANA \\uD83D\\uDE4F\\uD83C\\uDFFC\\n    }\\n};\\n//Upvote this answer if it helped you \\uD83E\\uDD70\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3151164,
                "title": "time-o-n-and-space-o-1",
                "content": "# Intuition\\nSince extracting digits from a number happens in the reverse order, we would traverse the array in reverse order.\\n\\n# Approach\\nwe would iterate in the nums array in reverse order and keep updating our \\'ans\\' vector. At the end, we would reverse the ans vector back to reach the desired result.\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;\\n        for(int i=nums.size()-1; i>=0; i--){\\n            int n = nums[i];\\n            while(n>0){\\n                ans.push_back(n%10);\\n                n/=10;\\n            }\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;\\n        for(int i=nums.size()-1; i>=0; i--){\\n            int n = nums[i];\\n            while(n>0){\\n                ans.push_back(n%10);\\n                n/=10;\\n            }\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3149120,
                "title": "c-simple-solution",
                "content": "# Code\\n```\\npublic class Solution {\\n    public int[] SeparateDigits(int[] nums) {\\n\\n        var answer = new List<int>();\\n        \\n        foreach (var num in nums)\\n        {\\n            foreach (var character in num.ToString()!)\\n            {\\n                answer.Add(int.Parse(character.ToString()));\\n            }\\n        }\\n\\n        return answer.ToArray();\\n    }\\n}\\n```\\n",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int[] SeparateDigits(int[] nums) {\\n\\n        var answer = new List<int>();\\n        \\n        foreach (var num in nums)\\n        {\\n            foreach (var character in num.ToString()!)\\n            {\\n                answer.Add(int.Parse(character.ToString()));\\n            }\\n        }\\n\\n        return answer.ToArray();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3147750,
                "title": "simple-and-easy-to-understand-c",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int>v,ans;\\n        int n = nums.size();\\n        for(int i =0;i<n;i++){\\n            int  x= nums[i];\\n            while(x != 0){\\n                int last = x % 10;\\n                v.push_back(last);\\n                x = x/ 10;\\n            }\\n            while(v.size() != 0){\\n                ans.push_back(v.back());\\n                v.pop_back();\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int>v,ans;\\n        int n = nums.size();\\n        for(int i =0;i<n;i++){\\n            int  x= nums[i];\\n            while(x != 0){\\n                int last = x % 10;\\n                v.push_back(last);\\n                x = x/ 10;\\n            }\\n            while(v.size() != 0){\\n                ans.push_back(v.back());\\n                v.pop_back();\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3145822,
                "title": "scala-1loc",
                "content": "# Code\\n```\\nobject Solution {\\n  def separateDigits(nums: Array[Int]): Array[Int] =\\n    nums.flatMap(_.toString).map(_.asDigit)\\n}\\n```",
                "solutionTags": [
                    "Scala"
                ],
                "code": "```\\nobject Solution {\\n  def separateDigits(nums: Array[Int]): Array[Int] =\\n    nums.flatMap(_.toString).map(_.asDigit)\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3145204,
                "title": "c-easy-approach",
                "content": "Here is my c++ code for this problem.\\n\\n# Complexity\\n- Time complexity:$$O(n)$$\\n\\n- Space complexity:$$O(n)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int>v;\\n        for(int i=0; i<nums.size(); i++){\\n            int l=nums[i];\\n            vector<int>v1;\\n            while(l){\\n                v1.push_back(l%10);\\n                l/=10;\\n            }\\n            reverse(v1.begin(), v1.end());\\n            for(int j=0; j<v1.size(); j++){\\n                v.push_back(v1[j]);\\n            }\\n        }\\n        return v;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int>v;\\n        for(int i=0; i<nums.size(); i++){\\n            int l=nums[i];\\n            vector<int>v1;\\n            while(l){\\n                v1.push_back(l%10);\\n                l/=10;\\n            }\\n            reverse(v1.begin(), v1.end());\\n            for(int j=0; j<v1.size(); j++){\\n                v.push_back(v1[j]);\\n            }\\n        }\\n        return v;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3144965,
                "title": "100-faster-solution-without-any-mathematical-operation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:$$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n\\n        String s = Arrays.toString( nums );\\n\\n        // System.out.println( s );\\n        \\n        List<Integer> ans = new ArrayList<>();\\n\\n        for( char c : s.toCharArray() ){\\n\\n            if( c == \\'[\\' || c == \\']\\' || c == \\',\\' || Character.isWhitespace( c ) ) continue;\\n\\n            ans.add( Character.getNumericValue( c ) );\\n\\n        }\\n\\n        // System.out.println( ans.toString() );\\n\\n        int a [] = new int[ ans.size() ];\\n\\n        for( int i = 0 ; i < ans.size() ; i++ ){\\n\\n            a[i] = ans.get(i);\\n\\n        }\\n\\n\\n        return a;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n\\n        String s = Arrays.toString( nums );\\n\\n        // System.out.println( s );\\n        \\n        List<Integer> ans = new ArrayList<>();\\n\\n        for( char c : s.toCharArray() ){\\n\\n            if( c == \\'[\\' || c == \\']\\' || c == \\',\\' || Character.isWhitespace( c ) ) continue;\\n\\n            ans.add( Character.getNumericValue( c ) );\\n\\n        }\\n\\n        // System.out.println( ans.toString() );\\n\\n        int a [] = new int[ ans.size() ];\\n\\n        for( int i = 0 ; i < ans.size() ; i++ ){\\n\\n            a[i] = ans.get(i);\\n\\n        }\\n\\n\\n        return a;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3144735,
                "title": "c-easy-code",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;\\n        int n=nums.size();\\n        \\n        for(int i=0;i<n;i++)\\n        {\\n            vector<int> n;\\n            int num=nums[i];\\n            while(num>0){\\n                int digit = num%10;\\n                num /= 10;\\n                n.push_back(digit);\\n            }\\n            reverse(n.begin(), n.end());\\n            int s=n.size();\\n            for(int i=0;i<s;i++){\\n                ans.push_back(n[i]);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;\\n        int n=nums.size();\\n        \\n        for(int i=0;i<n;i++)\\n        {\\n            vector<int> n;\\n            int num=nums[i];\\n            while(num>0){\\n                int digit = num%10;\\n                num /= 10;\\n                n.push_back(digit);\\n            }\\n            reverse(n.begin(), n.end());\\n            int s=n.size();\\n            for(int i=0;i<s;i++){\\n                ans.push_back(n[i]);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3143479,
                "title": "simple-c-code",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFor each iteration, the code takes the current integer temp and repeatedly divides it by 10 and takes the remainder to get each digit of the number. The digits are added to the end of the ans vector (ans.push_back(temp % 10)). This process continues until the temp is 0 (temp != 0).\\nFinally, the ans vector is reversed to return the digits in the correct order \\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(N)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int>ans;\\n        for(int i = nums.size()-1; i >=0; i--) {\\n            int temp = nums[i];\\n            while(temp!=0){\\n                ans.push_back(temp%10);\\n                temp=temp/10;\\n            }\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int>ans;\\n        for(int i = nums.size()-1; i >=0; i--) {\\n            int temp = nums[i];\\n            while(temp!=0){\\n                ans.push_back(temp%10);\\n                temp=temp/10;\\n            }\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3143445,
                "title": "c-easy-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int>ans;\\n        for(int i=0;i<nums.size();i++){\\n            int x=nums[i];\\n            vector<int>v;\\n            while(x>0){\\n                v.push_back(x%10);\\n                x=x/10;\\n            }\\n            reverse(v.begin(),v.end());\\n            for(auto it:v){\\n                ans.push_back(it);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int>ans;\\n        for(int i=0;i<nums.size();i++){\\n            int x=nums[i];\\n            vector<int>v;\\n            while(x>0){\\n                v.push_back(x%10);\\n                x=x/10;\\n            }\\n            reverse(v.begin(),v.end());\\n            for(auto it:v){\\n                ans.push_back(it);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3143384,
                "title": "elixir-simple-solution",
                "content": "```\\ndefmodule Solution do\\n  @spec separate_digits(nums :: [integer]) :: [integer]\\n  def separate_digits(nums) do\\n    nums |> Enum.flat_map(&aux/1)\\n  end\\n\\n  def aux(n, arr \\\\\\\\ [])\\n  def aux(n, arr) when n == 0, do: arr\\n\\n  def aux(n, arr) do\\n    aux(div(n, 10), [rem(n, 10) | arr])\\n  end\\nend\\n\\n```",
                "solutionTags": [
                    "Elixir"
                ],
                "code": "```\\ndefmodule Solution do\\n  @spec separate_digits(nums :: [integer]) :: [integer]\\n  def separate_digits(nums) do\\n    nums |> Enum.flat_map(&aux/1)\\n  end\\n\\n  def aux(n, arr \\\\\\\\ [])\\n  def aux(n, arr) when n == 0, do: arr\\n\\n  def aux(n, arr) do\\n    aux(div(n, 10), [rem(n, 10) | arr])\\n  end\\nend\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3143011,
                "title": "c-easy-solution-runtime-9ms-memory-10mb",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;\\n        int n = nums.size();\\n        for(int i = 0; i < n; i++)\\n        {\\n            string str = to_string(nums[i]);\\n            for(int j = 0; j < str.size(); j++)\\n            {\\n                ans.push_back((str[j] - 48));\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```\\n\\n# PLEASE UPVOTE IF YOU FOUND THIS HELPFUL :)",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;\\n        int n = nums.size();\\n        for(int i = 0; i < n; i++)\\n        {\\n            string str = to_string(nums[i]);\\n            for(int j = 0; j < str.size(); j++)\\n            {\\n                ans.push_back((str[j] - 48));\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3142696,
                "title": "rust-fp",
                "content": "```\\nimpl Solution {\\n    pub fn separate_digits(nums: Vec<i32>) -> Vec<i32> {\\n        nums.iter().map(|&(mut x)| {\\n            let mut v = vec![];\\n            while x > 0 {\\n                v.push(x%10);\\n                x /= 10;\\n            }\\n            v.reverse();\\n            v\\n        }).flatten().collect::<Vec<i32>>()\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn separate_digits(nums: Vec<i32>) -> Vec<i32> {\\n        nums.iter().map(|&(mut x)| {\\n            let mut v = vec![];\\n            while x > 0 {\\n                v.push(x%10);\\n                x /= 10;\\n            }\\n            v.reverse();\\n            v\\n        }).flatten().collect::<Vec<i32>>()\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3142457,
                "title": "java-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        \\n        ArrayList<Integer> ans = new ArrayList<>();\\n        for(int i=0;i<nums.length;i++){\\n            ArrayList<Integer> al = new ArrayList<>();\\n            while(nums[i]>0){\\n                int rem = nums[i]%10;\\n                nums[i]/=10;\\n                al.add(rem);\\n                \\n            }\\n            Collections.reverse(al);\\n            for(int j:al){\\n                ans.add(j);\\n            }\\n            \\n        }\\n        int arr[]=new int[ans.size()];\\n        for(int i=0;i<ans.size();i++){\\n            arr[i]=ans.get(i);\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        \\n        ArrayList<Integer> ans = new ArrayList<>();\\n        for(int i=0;i<nums.length;i++){\\n            ArrayList<Integer> al = new ArrayList<>();\\n            while(nums[i]>0){\\n                int rem = nums[i]%10;\\n                nums[i]/=10;\\n                al.add(rem);\\n                \\n            }\\n            Collections.reverse(al);\\n            for(int j:al){\\n                ans.add(j);\\n            }\\n            \\n        }\\n        int arr[]=new int[ans.size()];\\n        for(int i=0;i<ans.size();i++){\\n            arr[i]=ans.get(i);\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3142406,
                "title": "beats-100-c",
                "content": "# Complexity\\n- Time complexity: O(nlogn)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution \\n{\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) \\n    {\\n        vector<int> v;\\n        for(int x=0; x<nums.size(); x++)\\n        {\\n            int n=nums[x];\\n            int count=0;\\n            while(n!=0)\\n            {\\n                count++;\\n                n/=10;\\n            }\\n            n=nums[x];\\n            int m=pow(10,count-1);\\n            while(m!=0)\\n            {\\n                v.push_back(nums[x]/m);\\n                nums[x]=nums[x]%m;\\n                m/=10;\\n            }\\n        }\\n        return v;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) \\n    {\\n        vector<int> v;\\n        for(int x=0; x<nums.size(); x++)\\n        {\\n            int n=nums[x];\\n            int count=0;\\n            while(n!=0)\\n            {\\n                count++;\\n                n/=10;\\n            }\\n            n=nums[x];\\n            int m=pow(10,count-1);\\n            while(m!=0)\\n            {\\n                v.push_back(nums[x]/m);\\n                nums[x]=nums[x]%m;\\n                m/=10;\\n            }\\n        }\\n        return v;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3142370,
                "title": "easiest-answer-c-best-accuracy",
                "content": "# Intuition\\ntraversing the vector in a reverse manner\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n1. iterate from the last element in the vector\\n2. store the value of digit in the answer vector by using mod function\\n3. reverse the vector for the desired answer\\n<!-- Describe your approach to solving the problem. -->\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int>answer;\\n        //traverse backwards\\n        for(int i = nums.size()-1 ; i >=0 ; i--){\\n            //store digits\\n            for(int j = nums[i] ; j >0 ; j = j/10){\\n                answer.push_back(j%10);\\n            }\\n         }\\n        reverse(answer.begin() , answer.end());\\n        return answer;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int>answer;\\n        //traverse backwards\\n        for(int i = nums.size()-1 ; i >=0 ; i--){\\n            //store digits\\n            for(int j = nums[i] ; j >0 ; j = j/10){\\n                answer.push_back(j%10);\\n            }\\n         }\\n        reverse(answer.begin() , answer.end());\\n        return answer;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3142340,
                "title": "simple-rust-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimpl Solution {\\n    pub fn separate_digits(nums: Vec<i32>) -> Vec<i32> {\\n        let (mut ret, mut temp) = (vec![], vec![]);\\n        \\n        for mut a in nums {\\n            while a > 0 {\\n                temp.push(a % 10);\\n                a /= 10;\\n            }\\n            while let Some(b) = temp.pop() { ret.push(b); }\\n        }\\n        \\n        ret\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn separate_digits(nums: Vec<i32>) -> Vec<i32> {\\n        let (mut ret, mut temp) = (vec![], vec![]);\\n        \\n        for mut a in nums {\\n            while a > 0 {\\n                temp.push(a % 10);\\n                a /= 10;\\n            }\\n            while let Some(b) = temp.pop() { ret.push(b); }\\n        }\\n        \\n        ret\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3142119,
                "title": "using-stack-brute-force-approach-very-easy-to-understand-c-for-beginners",
                "content": "# Code\\n**Approach 1:**\\nUsing Stack.\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> res;\\n        stack<int> stack;\\n        \\n        if(nums.size()==0) {\\n            return res;\\n        }\\n        \\n        for(int i=0; i<nums.size(); i++) {\\n            while(nums[i]) {\\n                int digit = nums[i]%10;\\n                stack.push(digit);\\n                nums[i] = nums[i]/10;\\n            }\\n            while(!stack.empty()) {\\n                res.push_back(stack.top());\\n                stack.pop();\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```\\n**Approach 2:**\\nUsing Brute Force approach.\\n```\\nfor(int i=0; i<nums.size(); i++) {\\n    string num = to_string(nums[i]);\\n    for(int j=0; j<num.size(); j++) {\\n        res.push_back(num[j]-\\'0\\');\\n    }    \\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "String",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> res;\\n        stack<int> stack;\\n        \\n        if(nums.size()==0) {\\n            return res;\\n        }\\n        \\n        for(int i=0; i<nums.size(); i++) {\\n            while(nums[i]) {\\n                int digit = nums[i]%10;\\n                stack.push(digit);\\n                nums[i] = nums[i]/10;\\n            }\\n            while(!stack.empty()) {\\n                res.push_back(stack.top());\\n                stack.pop();\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```\n```\\nfor(int i=0; i<nums.size(); i++) {\\n    string num = to_string(nums[i]);\\n    for(int j=0; j<num.size(); j++) {\\n        res.push_back(num[j]-\\'0\\');\\n    }    \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3141868,
                "title": "very-easy-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;\\n        for(int i=nums.size()-1;i>=0;i--){\\n            int a=nums[i];\\n            while(a>0){\\n                int b=a%10;\\n                a/=10;\\n                ans.push_back(b);\\n            }\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;\\n        for(int i=nums.size()-1;i>=0;i--){\\n            int a=nums[i];\\n            while(a>0){\\n                int b=a%10;\\n                a/=10;\\n                ans.push_back(b);\\n            }\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3141756,
                "title": "c-easy-and-simple-solution",
                "content": "\\n***Guy\\'s if you find this solution helpful \\uD83D\\uDE0A, PLEASE do UPVOTE. By doing that it motivate\\'s me to create more better post like this \\u270D\\uFE0F***\\n# Complexity\\n- Time complexity:\\nO(NLogN)\\n\\n- Space complexity:\\nO(N)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int>ans;\\n        for(int i=0;i<nums.size();i++){\\n            int n=nums[i];\\n            vector<int>temp;\\n            while(n>0){\\n                temp.push_back(n%10);\\n                n=n/10;\\n            }\\n            for(int i=temp.size()-1;i>=0;i--){\\n                ans.push_back(temp[i]);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```\\n***Guy\\'s if you find this solution helpful \\uD83D\\uDE0A, PLEASE do UPVOTE. By doing that it motivate\\'s me to create more better post like this \\u270D\\uFE0F***",
                "solutionTags": [
                    "C++",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int>ans;\\n        for(int i=0;i<nums.size();i++){\\n            int n=nums[i];\\n            vector<int>temp;\\n            while(n>0){\\n                temp.push_back(n%10);\\n                n=n/10;\\n            }\\n            for(int i=temp.size()-1;i>=0;i--){\\n                ans.push_back(temp[i]);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3141648,
                "title": "python3-solutoin",
                "content": "\\n```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        ans=[]\\n        for x in nums:\\n            for c in str(x):\\n                ans.append(int(c))\\n                \\n        return ans\\n        \\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        ans=[]\\n        for x in nums:\\n            for c in str(x):\\n                ans.append(int(c))\\n                \\n        return ans\\n        \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3141622,
                "title": "c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;\\n        string temp;\\n        for(int x:nums){\\n            temp= to_string(x);\\n            for(auto y:temp){\\n                ans.push_back(y-\\'0\\');\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;\\n        string temp;\\n        for(int x:nums){\\n            temp= to_string(x);\\n            for(auto y:temp){\\n                ans.push_back(y-\\'0\\');\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3141601,
                "title": "c-faster-than-90",
                "content": "# Intuition\\nUse list.AddRange method.\\n\\n# Approach\\nUse list.AddRange method to add digits of each number.\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(n)$$\\n\\n# Code\\n```\\npublic class Solution {\\n    public int[] SeparateDigits(int[] nums) {\\n        var list = new List<int>();\\n        for (int i = 0; i < nums.Length; i++)\\n        {\\n            list.AddRange(GetAllDigits(nums[i]));\\n        }\\n        return list.ToArray();\\n    }\\n    private List<int> GetAllDigits(int n)\\n    {\\n        var rs = new List<int>();\\n        while (n > 0)\\n        {\\n            rs.Insert(0, n % 10);\\n            n /= 10;\\n        }\\n        return rs;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int[] SeparateDigits(int[] nums) {\\n        var list = new List<int>();\\n        for (int i = 0; i < nums.Length; i++)\\n        {\\n            list.AddRange(GetAllDigits(nums[i]));\\n        }\\n        return list.ToArray();\\n    }\\n    private List<int> GetAllDigits(int n)\\n    {\\n        var rs = new List<int>();\\n        while (n > 0)\\n        {\\n            rs.Insert(0, n % 10);\\n            n /= 10;\\n        }\\n        return rs;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3141507,
                "title": "python-solution-easy-to-understand",
                "content": "```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        ans = []\\n\\t\\t\\n\\t\\t# iterating numbers one by one\\n        for num in nums:\\n\\t\\t\\n\\t\\t\\t# iterating digit of num via converting it to string\\n            for dig in str(num):\\n\\t\\t\\t\\n\\t\\t\\t\\t# adding each digit to ans array\\n                ans.append(int(dig))\\n        return ans\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        ans = []\\n\\t\\t\\n\\t\\t# iterating numbers one by one\\n        for num in nums:\\n\\t\\t\\n\\t\\t\\t# iterating digit of num via converting it to string\\n            for dig in str(num):\\n\\t\\t\\t\\n\\t\\t\\t\\t# adding each digit to ans array\\n                ans.append(int(dig))\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3141498,
                "title": "easy-short-efficient-clean-code",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>&v) {\\n        vector<int>ans;\\n        for(const int&it:v){\\n            for(const char&ch:to_string(it)){\\n                ans.push_back(ch-\\'0\\');\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>&v) {\\n        vector<int>ans;\\n        for(const int&it:v){\\n            for(const char&ch:to_string(it)){\\n                ans.push_back(ch-\\'0\\');\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3141454,
                "title": "easy-python-for-beginners",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        answer = []\\n        hash_map = {}\\n        i = 0\\n        for num in nums:\\n            x = [int(y) for y in str(num)]\\n            for number in x:\\n                    hash_map[i] = number\\n                    i += 1   \\n        for value in hash_map.values():\\n            answer.append(value)\\n        return answer\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        answer = []\\n        hash_map = {}\\n        i = 0\\n        for num in nums:\\n            x = [int(y) for y in str(num)]\\n            for number in x:\\n                    hash_map[i] = number\\n                    i += 1   \\n        for value in hash_map.values():\\n            answer.append(value)\\n        return answer\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4099324,
                "title": "simple-one-line-solution",
                "content": "```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        return map(int, chain.from_iterable(map(str, nums)))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        return map(int, chain.from_iterable(map(str, nums)))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4097794,
                "title": "java-solution-beats-80-59",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        ArrayList<Integer> ans = new ArrayList<>();\\n        for(int i = 0; i < nums.length; i++){\\n            int temp = nums[i];\\n            if(nums[i] < 10){\\n                ans.add(nums[i]);\\n            }\\n            else{\\n                    int div = 1;\\n                    while(temp >= 10){\\n                        div *=10;\\n                        temp = temp/10;\\n                    }\\n\\n                    while(div != 0){\\n                        ans.add(nums[i] / div);\\n                        nums[i] = nums[i]%div;\\n                        div = div/10;\\n                        \\n                    }\\n            }\\n        }\\n        int[] ans2 = new int[ans.size()];\\n        for(int i = 0; i < ans.size(); i++){\\n            ans2[i] = ans.get(i);\\n        }\\n        return ans2;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        ArrayList<Integer> ans = new ArrayList<>();\\n        for(int i = 0; i < nums.length; i++){\\n            int temp = nums[i];\\n            if(nums[i] < 10){\\n                ans.add(nums[i]);\\n            }\\n            else{\\n                    int div = 1;\\n                    while(temp >= 10){\\n                        div *=10;\\n                        temp = temp/10;\\n                    }\\n\\n                    while(div != 0){\\n                        ans.add(nums[i] / div);\\n                        nums[i] = nums[i]%div;\\n                        div = div/10;\\n                        \\n                    }\\n            }\\n        }\\n        int[] ans2 = new int[ans.size()];\\n        for(int i = 0; i < ans.size(); i++){\\n            ans2[i] = ans.get(i);\\n        }\\n        return ans2;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4097740,
                "title": "best-method-c-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(N*length of digit)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:)=O(length of digit)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n               // please upvote if it help you\\uD83D\\uDE0A\\uD83D\\uDE0A\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int>ans;\\n        for(int i=0;i<nums.size();i++){\\n            vector<int>temp;\\n            while(nums[i]>0){\\n                temp.push_back(nums[i]%10);\\n                nums[i]/=10;\\n            }\\n            for(int i = temp.size()-1; i >= 0; --i) ans.push_back(temp[i]);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n               // please upvote if it help you\\uD83D\\uDE0A\\uD83D\\uDE0A\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int>ans;\\n        for(int i=0;i<nums.size();i++){\\n            vector<int>temp;\\n            while(nums[i]>0){\\n                temp.push_back(nums[i]%10);\\n                nums[i]/=10;\\n            }\\n            for(int i = temp.size()-1; i >= 0; --i) ans.push_back(temp[i]);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4095000,
                "title": "solution-without-string-and-no-second-vector",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;\\n        int i = 0;\\n\\n        for(int num : nums) {\\n            if(num >= 10) {\\n                int start = i;\\n                while(num != 0) {\\n                    i++;\\n                    ans.push_back(num % 10);\\n                    num = (num - (num % 10)) / 10;\\n                }\\n                reverse(ans.begin() + start, ans.begin() + i);\\n            } else {\\n                i++;\\n                ans.push_back(num);\\n            }\\n        }\\n        cout<<i<<endl;\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;\\n        int i = 0;\\n\\n        for(int num : nums) {\\n            if(num >= 10) {\\n                int start = i;\\n                while(num != 0) {\\n                    i++;\\n                    ans.push_back(num % 10);\\n                    num = (num - (num % 10)) / 10;\\n                }\\n                reverse(ans.begin() + start, ans.begin() + i);\\n            } else {\\n                i++;\\n                ans.push_back(num);\\n            }\\n        }\\n        cout<<i<<endl;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 4093700,
                "title": "c-solution-very-easy-syntax-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> digits;\\n        vector<int> answer;\\n\\n        for(int i=0; i<nums.size(); i++){\\n            while(nums[i] > 0){\\n                int rem = nums[i]%10;\\n                nums[i] = nums[i]/10;\\n                digits.push_back(rem);\\n            }\\n\\n            for(int j=digits.size()-1; j>=0; j--){\\n                answer.push_back(digits[j]);\\n            }\\n\\n            digits.clear();\\n        }\\n\\n        return answer;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> digits;\\n        vector<int> answer;\\n\\n        for(int i=0; i<nums.size(); i++){\\n            while(nums[i] > 0){\\n                int rem = nums[i]%10;\\n                nums[i] = nums[i]/10;\\n                digits.push_back(rem);\\n            }\\n\\n            for(int j=digits.size()-1; j>=0; j--){\\n                answer.push_back(digits[j]);\\n            }\\n\\n            digits.clear();\\n        }\\n\\n        return answer;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4093103,
                "title": "python-3",
                "content": "# Intuition\\nPython\\n\\n# Approach\\nI think this is a good solving the problem.What do you say?\\n\\n# Complexity\\n- Time complexity:63 ms\\n\\n\\n# Code\\n```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        stroka = \"\"\\n        for i in nums:\\n            stroka += str(i)\\n        answer = [int(i) for i in stroka]\\n        return answer\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        stroka = \"\"\\n        for i in nums:\\n            stroka += str(i)\\n        answer = [int(i) for i in stroka]\\n        return answer\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4089143,
                "title": "my-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        suj=[]\\n        for i in nums:\\n            for j in str(i):\\n                suj.append(int(j))\\n        return suj\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        suj=[]\\n        for i in nums:\\n            for j in str(i):\\n                suj.append(int(j))\\n        return suj\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4081595,
                "title": "c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;\\n        int n=nums.size(); \\n        for(auto n:nums)\\n        {vector<int> t;\\n            while(n>0)\\n            {\\n                t.push_back(n%10);\\n                n=n/10;\\n            }\\n        \\n             for(int i=t.size()-1;i>=0;i--)\\n             {\\n                 ans.push_back(t[i]);\\n             }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;\\n        int n=nums.size(); \\n        for(auto n:nums)\\n        {vector<int> t;\\n            while(n>0)\\n            {\\n                t.push_back(n%10);\\n                n=n/10;\\n            }\\n        \\n             for(int i=t.size()-1;i>=0;i--)\\n             {\\n                 ans.push_back(t[i]);\\n             }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4081204,
                "title": "numbers-array",
                "content": "# Intuition\\n1. for each number in the array of numbers, split the array into it\\'s digits. \\n2. Now I have an array of arrays. \\n3. Flatten the arrays.\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar separateDigits = function(nums) {\\n    const m = nums.map((n) => n.toString().split(\\'\\'))\\n    return m.flat()\\n};\\n\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "# Intuition\\n1. for each number in the array of numbers, split the array into it\\'s digits. \\n2. Now I have an array of arrays. \\n3. Flatten the arrays.\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar separateDigits = function(nums) {\\n    const m = nums.map((n) => n.toString().split(\\'\\'))\\n    return m.flat()\\n};\\n\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 4080637,
                "title": "python3-solution-with-using-simulation-approach",
                "content": "```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        res = []\\n\\n        for num in nums:\\n            tmp = []\\n            while num:\\n                tmp.append(num % 10)\\n                num //= 10\\n            \\n            res += reversed(tmp)\\n        \\n        return res\\n```",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "Simulation"
                ],
                "code": "```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        res = []\\n\\n        for num in nums:\\n            tmp = []\\n            while num:\\n                tmp.append(num % 10)\\n                num //= 10\\n            \\n            res += reversed(tmp)\\n        \\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4076096,
                "title": "easy-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n\\n        int len=0;\\n\\n        for(int num:nums){\\n\\n            while(num>0){\\n                num/=10;\\n                len++;\\n            }\\n        \\n        }\\n\\n        int[] arr=new int[len];\\n\\n\\n        for(int i=nums.length-1,rem=0;i>=0;i--){\\n           \\n            while(nums[i]>0){\\n                rem=nums[i]%10;\\n                nums[i]/=10;\\n                arr[--len]=rem;\\n                \\n            }\\n\\n        }\\n\\n        \\n\\n        return arr;        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n\\n        int len=0;\\n\\n        for(int num:nums){\\n\\n            while(num>0){\\n                num/=10;\\n                len++;\\n            }\\n        \\n        }\\n\\n        int[] arr=new int[len];\\n\\n\\n        for(int i=nums.length-1,rem=0;i>=0;i--){\\n           \\n            while(nums[i]>0){\\n                rem=nums[i]%10;\\n                nums[i]/=10;\\n                arr[--len]=rem;\\n                \\n            }\\n\\n        }\\n\\n        \\n\\n        return arr;        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4075694,
                "title": "very-easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        ArrayList<Integer> al = new ArrayList<>();\\n        for(int i=nums.length-1;i>=0;i--){\\n            while(nums[i]>0){\\n                al.add(nums[i]%10);\\n                nums[i]=nums[i]/10;\\n            }\\n        }\\n        Collections.reverse(al);\\n        int ans[]=new int[al.size()];\\n        for(int i=0;i<al.size();i++){\\n            ans[i]=al.get(i);\\n                    }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        ArrayList<Integer> al = new ArrayList<>();\\n        for(int i=nums.length-1;i>=0;i--){\\n            while(nums[i]>0){\\n                al.add(nums[i]%10);\\n                nums[i]=nums[i]/10;\\n            }\\n        }\\n        Collections.reverse(al);\\n        int ans[]=new int[al.size()];\\n        for(int i=0;i<al.size();i++){\\n            ans[i]=al.get(i);\\n                    }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4074758,
                "title": "js-solution-based-on-array-filter-method",
                "content": "\\n\\n# Approach\\nUsed Filter Array method \\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar separateDigits = function(nums) {\\n    let str=nums.toString().split(\"\");\\n    let cv=str.filter(function(i){\\n        return i !==\",\";\\n    })\\n    return cv\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar separateDigits = function(nums) {\\n    let str=nums.toString().split(\"\");\\n    let cv=str.filter(function(i){\\n        return i !==\",\";\\n    })\\n    return cv\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4071710,
                "title": "simple-easy-javascript-solution",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar separateDigits = function(nums) {\\n    let result = []\\n    for(let i = 0; i<nums.length; i++){\\n        let digit = nums[i].toString()\\n        result.push(...digit.split(\\'\\'))\\n    }\\n    return result\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar separateDigits = function(nums) {\\n    let result = []\\n    for(let i = 0; i<nums.length; i++){\\n        let digit = nums[i].toString()\\n        result.push(...digit.split(\\'\\'))\\n    }\\n    return result\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4071532,
                "title": "easiest-solution-possible-c",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        int n = nums.size();\\n        vector<int>ans;\\n\\n        for(int i =0;i<n;i++){\\n            int x = nums[i];\\n            string s = to_string(x);\\n\\n            for(auto it : s){\\n                ans.push_back(it - \\'0\\');\\n            }\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        int n = nums.size();\\n        vector<int>ans;\\n\\n        for(int i =0;i<n;i++){\\n            int x = nums[i];\\n            string s = to_string(x);\\n\\n            for(auto it : s){\\n                ans.push_back(it - \\'0\\');\\n            }\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4066708,
                "title": "memory-details-16-62mb-beats-99-54-of-users-with-python3",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        result = []\\n\\n        for num in nums:\\n            for digit in str(num):\\n                result.append(int(digit))\\n        return result\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        result = []\\n\\n        for num in nums:\\n            for digit in str(num):\\n                result.append(int(digit))\\n        return result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4063441,
                "title": "one-line-solution-using-list-comprehensions",
                "content": "# Code\\n```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        return [int(el) for x in nums for el in str(x)]\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        return [int(el) for x in nums for el in str(x)]\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4057756,
                "title": "typescript-solution-with-recursion",
                "content": "# Code\\n```\\nfunction separateDigits(nums: number[]): number[] {\\n    const res: number[] = [];\\n    nums.forEach((value) => parse(value.toString()));\\n\\n    function parse(value: string) {\\n        if (value === \\'\\') return;\\n        res.push(Number(value.charAt(0)))\\n        return parse(value.slice(1));\\n    }\\n    return res;\\n};\\n```",
                "solutionTags": [
                    "TypeScript",
                    "Recursion"
                ],
                "code": "```\\nfunction separateDigits(nums: number[]): number[] {\\n    const res: number[] = [];\\n    nums.forEach((value) => parse(value.toString()));\\n\\n    function parse(value: string) {\\n        if (value === \\'\\') return;\\n        res.push(Number(value.charAt(0)))\\n        return parse(value.slice(1));\\n    }\\n    return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4049966,
                "title": "easy-peasy-solution-beginner-friendly",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        new = []\\n        for num in nums:\\n            List = [int(i) for i in str(num)]\\n            for k in range(len(List)):\\n                new.append(List[k])\\n        return new\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        new = []\\n        for num in nums:\\n            List = [int(i) for i in str(num)]\\n            for k in range(len(List)):\\n                new.append(List[k])\\n        return new\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4048959,
                "title": "single-line-easy-js-solution",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar separateDigits = function(nums) {\\n    return nums.map(a => a.toString().split(\\'\\')).flat()\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar separateDigits = function(nums) {\\n    return nums.map(a => a.toString().split(\\'\\')).flat()\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4047695,
                "title": "easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> v;\\n        for (int i=nums.size()-1; i>=0;i--){\\n            int n=nums[i];\\n            while(n>9){\\n                v.push_back(n%10);\\n                n/=10;\\n            }\\n            v.push_back(n);\\n        }\\n        reverse(v.begin(),v.end());\\n        return v;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> v;\\n        for (int i=nums.size()-1; i>=0;i--){\\n            int n=nums[i];\\n            while(n>9){\\n                v.push_back(n%10);\\n                n/=10;\\n            }\\n            v.push_back(n);\\n        }\\n        reverse(v.begin(),v.end());\\n        return v;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4047274,
                "title": "c-one-liner-linq",
                "content": "# Code\\n```\\npublic class Solution {\\n    public int[] SeparateDigits(int[] nums) {\\n        return string.Join(\"\",nums)\\n                .ToCharArray()\\n                .Select(c=>(int)Char.GetNumericValue(c))\\n                .ToArray();\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int[] SeparateDigits(int[] nums) {\\n        return string.Join(\"\",nums)\\n                .ToCharArray()\\n                .Select(c=>(int)Char.GetNumericValue(c))\\n                .ToArray();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4046923,
                "title": "now-optimal-but-okay",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        List<Integer> separList = new ArrayList<>();\\n        for (int num : nums) {\\n            char[] split = String.valueOf(num)\\n                    .toCharArray();\\n            \\n            for (char ch : split) {\\n                separList.add(\\n                        Integer.parseInt(\\n                                String.valueOf(ch)));\\n            }\\n        }\\n        return separList.stream()\\n                .flatMapToInt(IntStream::of)\\n                .toArray();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        List<Integer> separList = new ArrayList<>();\\n        for (int num : nums) {\\n            char[] split = String.valueOf(num)\\n                    .toCharArray();\\n            \\n            for (char ch : split) {\\n                separList.add(\\n                        Integer.parseInt(\\n                                String.valueOf(ch)));\\n            }\\n        }\\n        return separList.stream()\\n                .flatMapToInt(IntStream::of)\\n                .toArray();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4046811,
                "title": "simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    func separateDigits(_ nums: [Int]) -> [Int] {\\n     var ans = [Int]()\\n    \\n    for i in nums {\\n        for j in \"\\\\(i)\" {\\n            ans.append(Int((String(j)))!)\\n        }\\n    }\\n    \\n    return ans\\n}\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func separateDigits(_ nums: [Int]) -> [Int] {\\n     var ans = [Int]()\\n    \\n    for i in nums {\\n        for j in \"\\\\(i)\" {\\n            ans.append(Int((String(j)))!)\\n        }\\n    }\\n    \\n    return ans\\n}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4045570,
                "title": "python-test",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        res = []\\n        for num in nums:\\n            if num>9:\\n                num_str = str(num)\\n                n = len(num_str)\\n                for i in range(0, n):\\n                    res.append(int(num_str[i]))\\n            else:\\n                res.append(num)\\n        return res\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        res = []\\n        for num in nums:\\n            if num>9:\\n                num_str = str(num)\\n                n = len(num_str)\\n                for i in range(0, n):\\n                    res.append(int(num_str[i]))\\n            else:\\n                res.append(num)\\n        return res\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4045289,
                "title": "simple-math",
                "content": "# \\uD83D\\uDE09Don\\'t just watch & move away, also give an Upvote.\\uD83D\\uDE09\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        int n = size(nums);\\n        vector<int> result;\\n\\n        for(auto i:nums)\\n        {\\n            vector<int> temp = {};\\n\\n            while(i != 0)\\n            {\\n                temp.push_back(i%10);\\n                i /= 10;\\n            }\\n\\n            reverse(begin(temp), end(temp));\\n\\n            for(auto j:temp)\\n            {\\n                result.push_back(j);\\n            }\\n        }\\n\\n<!-- \\u2705Well before returning answer don\\'t forget to UPVOTE.\\u2705 -->\\n        return result;\\n    }\\n};\\n```\\n![Leetcode Upvote.gif](https://assets.leetcode.com/users/images/c0e82db1-e85b-40fc-b4eb-f656583f70a0_1694716772.707279.gif)\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "C",
                    "JavaScript",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        int n = size(nums);\\n        vector<int> result;\\n\\n        for(auto i:nums)\\n        {\\n            vector<int> temp = {};\\n\\n            while(i != 0)\\n            {\\n                temp.push_back(i%10);\\n                i /= 10;\\n            }\\n\\n            reverse(begin(temp), end(temp));\\n\\n            for(auto j:temp)\\n            {\\n                result.push_back(j);\\n            }\\n        }\\n\\n<!-- \\u2705Well before returning answer don\\'t forget to UPVOTE.\\u2705 -->\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4040537,
                "title": "java-solution-with-array-and-stack",
                "content": "# Code\\n\\nWith `int[]` `Array`\\n```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        \\n        int len = 0;\\n        for (int num : nums)\\n            while (num != 0) {\\n                num /= 10;\\n                len++;\\n            }\\n        int[] arr = new int[len];\\n        int index = len - 1;\\n        for (int i = nums.length - 1; i >= 0; i--) {\\n            while(nums[i] > 0) {\\n                arr[index--] = nums[i] % 10;\\n                nums[i] /= 10;\\n            }\\n        }\\n\\n        return arr;\\n    }\\n}\\n```\\n\\n**With** `Stack`\\n```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        \\n        int len = 0;\\n        for (int num : nums)\\n            while (num != 0) {\\n                num /= 10;\\n                len++;\\n            }\\n        int[] arr = new int[len];\\n        int index = 0;\\n        for (int num : nums) {\\n            Stack<Integer> stack = new Stack<>();\\n            while (num != 0) {\\n                stack.push(num % 10);\\n                num /= 10;\\n            }\\n            while (!stack.isEmpty())\\n                arr[index++] = stack.pop();\\n        }\\n        return arr;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        \\n        int len = 0;\\n        for (int num : nums)\\n            while (num != 0) {\\n                num /= 10;\\n                len++;\\n            }\\n        int[] arr = new int[len];\\n        int index = len - 1;\\n        for (int i = nums.length - 1; i >= 0; i--) {\\n            while(nums[i] > 0) {\\n                arr[index--] = nums[i] % 10;\\n                nums[i] /= 10;\\n            }\\n        }\\n\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4033902,
                "title": "simple-yet-efficient",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n     public static List<int> Separate(int n)\\n        {\\n            List<int> result = new List<int>();\\n            while(n>0)\\n            {\\n                int r = n % 10;\\n                result.Add(r);\\n                n = n / 10;\\n            }\\n            result.Reverse();\\n            return result;\\n\\n\\n        }\\n    public int[] SeparateDigits(int[] a) {\\n        int n=a.Length;\\n         List<int>result=new List<int>();\\n            foreach(int i in a)\\n            {\\n                result.AddRange(Separate(i));\\n            }\\n        return result.ToArray();\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n     public static List<int> Separate(int n)\\n        {\\n            List<int> result = new List<int>();\\n            while(n>0)\\n            {\\n                int r = n % 10;\\n                result.Add(r);\\n                n = n / 10;\\n            }\\n            result.Reverse();\\n            return result;\\n\\n\\n        }\\n    public int[] SeparateDigits(int[] a) {\\n        int n=a.Length;\\n         List<int>result=new List<int>();\\n            foreach(int i in a)\\n            {\\n                result.AddRange(Separate(i));\\n            }\\n        return result.ToArray();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4031545,
                "title": "easy-java-solution-100-beats",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        // String s=\"\";\\n        // for(int e:nums){\\n        //     s+=e;\\n        // }\\n        // int a[]=new int[s.length()];\\n        // for(int i=0;i<s.length();i++){\\n        //     a[i]=s.charAt(i)-\\'0\\';\\n        // }\\n        // return a;\\n        int len=0;\\n        for(int e:nums){\\n            while(e>0){\\n                e=e/10;\\n                len++;\\n\\n            }\\n        }\\n        int a[]=new int[len];\\n        int index=len-1;\\n        for(int i=nums.length-1;i>=0;i--){\\n            int n=nums[i];\\n            while(n>0){\\n                a[index]=n%10;\\n                n/=10;\\n                index--;\\n            }\\n        }\\n        return a;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        // String s=\"\";\\n        // for(int e:nums){\\n        //     s+=e;\\n        // }\\n        // int a[]=new int[s.length()];\\n        // for(int i=0;i<s.length();i++){\\n        //     a[i]=s.charAt(i)-\\'0\\';\\n        // }\\n        // return a;\\n        int len=0;\\n        for(int e:nums){\\n            while(e>0){\\n                e=e/10;\\n                len++;\\n\\n            }\\n        }\\n        int a[]=new int[len];\\n        int index=len-1;\\n        for(int i=nums.length-1;i>=0;i--){\\n            int n=nums[i];\\n            while(n>0){\\n                a[index]=n%10;\\n                n/=10;\\n                index--;\\n            }\\n        }\\n        return a;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4031068,
                "title": "easy-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        newl=[]\\n        for i in nums:\\n            temp=[]\\n            if i>=10:\\n                while i!=0:\\n                    temp.append(i%10)\\n                    i=i//10\\n            else:\\n                temp.append(i)\\n            temp=temp[::-1]\\n            newl+=temp\\n        return newl\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        newl=[]\\n        for i in nums:\\n            temp=[]\\n            if i>=10:\\n                while i!=0:\\n                    temp.append(i%10)\\n                    i=i//10\\n            else:\\n                temp.append(i)\\n            temp=temp[::-1]\\n            newl+=temp\\n        return newl\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4029385,
                "title": "separatedigits",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            // if(nums[i]<10)\\n            // arr.push_back(nums[i]);\\n            // else\\n            // {\\n                vector<int> arr;\\n                while(nums[i]>0)\\n                {\\n                    int r=nums[i]%10;\\n                    arr.push_back(r);\\n                    nums[i]=nums[i]/10;\\n                }\\n                reverse(arr.begin(),arr.end());\\n                for(auto i:arr) ans.push_back(i);\\n            // }\\n\\n        }\\n\\n      return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            // if(nums[i]<10)\\n            // arr.push_back(nums[i]);\\n            // else\\n            // {\\n                vector<int> arr;\\n                while(nums[i]>0)\\n                {\\n                    int r=nums[i]%10;\\n                    arr.push_back(r);\\n                    nums[i]=nums[i]/10;\\n                }\\n                reverse(arr.begin(),arr.end());\\n                for(auto i:arr) ans.push_back(i);\\n            // }\\n\\n        }\\n\\n      return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4027659,
                "title": "easily-understandable-commented-to-explain-the-step",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int>ans;                         //create the array to be return\\n        for(int i=0;i<nums.size(); i++){\\n            vector<int>temp;            //create temporary array to store seperated array as they are in revere for each string.\\n            while(nums[i]>0){\\n                temp.push_back(nums[i]%10);     //seprate the digit but it seprate the digit in reverse order\\n                nums[i]=nums[i]/10;     //store the same sting affer seprating the last digit of that string\\n            }\\n            for(int i=temp.size()-1;i>=0;--i) ans.push_back(temp[i]);  //reverse the sring after it seprated as temp contain digit in reverse order for each string\\n        }\\n        return ans;    //finally return the stored and requred array\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int>ans;                         //create the array to be return\\n        for(int i=0;i<nums.size(); i++){\\n            vector<int>temp;            //create temporary array to store seperated array as they are in revere for each string.\\n            while(nums[i]>0){\\n                temp.push_back(nums[i]%10);     //seprate the digit but it seprate the digit in reverse order\\n                nums[i]=nums[i]/10;     //store the same sting affer seprating the last digit of that string\\n            }\\n            for(int i=temp.size()-1;i>=0;--i) ans.push_back(temp[i]);  //reverse the sring after it seprated as temp contain digit in reverse order for each string\\n        }\\n        return ans;    //finally return the stored and requred array\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4023454,
                "title": "beats-100-with-c-the-most-easiest-solution-ever",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> v;\\n        for(int i=nums.size()-1; i>=0; i--){\\n            int number= nums[i];\\n            while(number>0){\\n                v.push_back(number%10);\\n                number = number/10;\\n            }\\n        }\\n        reverse(v.begin(), v.end());\\n        return v;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> v;\\n        for(int i=nums.size()-1; i>=0; i--){\\n            int number= nums[i];\\n            while(number>0){\\n                v.push_back(number%10);\\n                number = number/10;\\n            }\\n        }\\n        reverse(v.begin(), v.end());\\n        return v;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4022224,
                "title": "simplest-solution-with-string-casting",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nnumber -> string -> enumerate each character-> convert to int->save \\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) \\n    {\\n        vector<int> out;\\n        for(auto& n:nums)\\n        {\\n            for(auto& c:to_string(n))out.push_back(c-\\'0\\');\\n        }\\n        return out;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) \\n    {\\n        vector<int> out;\\n        for(auto& n:nums)\\n        {\\n            for(auto& c:to_string(n))out.push_back(c-\\'0\\');\\n        }\\n        return out;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4020630,
                "title": "easy-understandable-0ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n^2)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n     \\n     int l=0;\\n     for(int n:nums)\\n        while(n>0){\\n              l++;\\n             n/=10;\\n            }\\n\\n        int [] a=new int [l];\\n        l--;\\n        for(int i=nums.length-1;i>=0;i--){\\n            while(nums[i]>0){\\n                a[l--]=nums[i]%10;\\n                nums[i]/=10;\\n            }\\n        }\\n        return a;\\n    }///if you get any idea please upvote me!\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n     \\n     int l=0;\\n     for(int n:nums)\\n        while(n>0){\\n              l++;\\n             n/=10;\\n            }\\n\\n        int [] a=new int [l];\\n        l--;\\n        for(int i=nums.length-1;i>=0;i--){\\n            while(nums[i]>0){\\n                a[l--]=nums[i]%10;\\n                nums[i]/=10;\\n            }\\n        }\\n        return a;\\n    }///if you get any idea please upvote me!\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4020419,
                "title": "easy-to-understand-for-new-coders",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        nums=list(map(str,nums))\\n        ans=[]\\n        for i in nums:\\n            for j in i:\\n                ans.append(int(j))\\n        return ans\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        nums=list(map(str,nums))\\n        ans=[]\\n        for i in nums:\\n            for j in i:\\n                ans.append(int(j))\\n        return ans\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4016239,
                "title": "c-code-easy-using-loop",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n^2)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(11)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int>ans;\\n        vector<int>res;\\n        int n=nums.size();\\n        for(int i=0;i<n;i++){\\n            int x=nums[i];\\n            //int cnt=0;\\n            while(x!=0){\\n                int r=x%10;\\n                 res.push_back(r);\\n                x/=10;\\n                \\n            }\\n            int  m=res.size();\\n            for(int i=m-1;i>=0;i--){\\n                ans.push_back(res[i]);\\n            }\\n            for(int i=0;i<m;i++){\\n                res.pop_back();\\n            }\\n            \\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int>ans;\\n        vector<int>res;\\n        int n=nums.size();\\n        for(int i=0;i<n;i++){\\n            int x=nums[i];\\n            //int cnt=0;\\n            while(x!=0){\\n                int r=x%10;\\n                 res.push_back(r);\\n                x/=10;\\n                \\n            }\\n            int  m=res.size();\\n            for(int i=m-1;i>=0;i--){\\n                ans.push_back(res[i]);\\n            }\\n            for(int i=0;i<m;i++){\\n                res.pop_back();\\n            }\\n            \\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4015294,
                "title": "easy-string-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:100\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:90\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n    vector<int> ans;\\n    for(auto it:nums){\\n        string s=to_string(it);\\n        for(auto it2:s){\\n            ans.push_back(it2-\\'0\\');\\n        }\\n    }\\n    return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n    vector<int> ans;\\n    for(auto it:nums){\\n        string s=to_string(it);\\n        for(auto it2:s){\\n            ans.push_back(it2-\\'0\\');\\n        }\\n    }\\n    return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4014074,
                "title": "easy-python-solution",
                "content": "# Code\\n```\\nclass Solution(object):\\n    def separateDigits(self, nums):\\n        newNum = []\\n        for i in range(len(nums)):\\n            tempStr = str(nums[i])\\n            for j in range(len(tempStr)):\\n                newNum.append(int(tempStr[j]))\\n        return newNum\\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def separateDigits(self, nums):\\n        newNum = []\\n        for i in range(len(nums)):\\n            tempStr = str(nums[i])\\n            for j in range(len(tempStr)):\\n                newNum.append(int(tempStr[j]))\\n        return newNum\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4013094,
                "title": "easy-to-understand-beats-96-cpp",
                "content": "# Complexity\\n- Time complexity: $$O(m*n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(m + n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> result;\\n\\n        for(int j  = 0; j<nums.size();j++){\\n            if(nums[j] > 9){\\n                string str = to_string(nums[j]);\\n                for(int i = 0; i < str.size();i++)\\n                {\\n                    result.push_back(int(str[i]) - 48);\\n                }\\n            }\\n            else{\\n                result.push_back(nums[j]);\\n            }\\n        }\\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> result;\\n\\n        for(int j  = 0; j<nums.size();j++){\\n            if(nums[j] > 9){\\n                string str = to_string(nums[j]);\\n                for(int i = 0; i < str.size();i++)\\n                {\\n                    result.push_back(int(str[i]) - 48);\\n                }\\n            }\\n            else{\\n                result.push_back(nums[j]);\\n            }\\n        }\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4006185,
                "title": "c",
                "content": "class Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;\\n        for(int i = nums.size()-1;i>=0;i--){\\n            while(nums[i]>0){\\n                 ans.push_back(nums[i]%10);\\n                nums[i] = nums[i]/10;   \\n            }\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans;\\n        for(int i = nums.size()-1;i>=0;i--){\\n            while(nums[i]>0){\\n                 ans.push_back(nums[i]%10);\\n                nums[i] = nums[i]/10;   \\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3998505,
                "title": "c-solution-string",
                "content": "\\n# Code\\n```\\nclass Solution {\\nprivate:\\n    void solve(vector<int>& res, int n) {\\n        string s = to_string(n);\\n        for (int i = 0; i < s.length(); i++) {\\n            res.push_back(s[i] - \\'0\\');\\n        }\\n        return;\\n    }\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> res;\\n        for (int i = 0; i < nums.size(); i++) {\\n            solve(res, nums[i]);\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\nprivate:\\n    void solve(vector<int>& res, int n) {\\n        string s = to_string(n);\\n        for (int i = 0; i < s.length(); i++) {\\n            res.push_back(s[i] - \\'0\\');\\n        }\\n        return;\\n    }\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> res;\\n        for (int i = 0; i < nums.size(); i++) {\\n            solve(res, nums[i]);\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3994191,
                "title": "java-simple-code-beats-95",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        int count =0;\\n        \\n//Math.log10(number) tell you how many digits number have\\n    \\n  for(int i=0;i<nums.length;i++){\\n            count+=Math.log10(nums[i])+1;\\n        }\\n\\n        int[] ans=new int[count];\\n        int j=nums.length-1;\\n        int k=ans.length-1;\\n        while(k>=0 && j>=0){\\n            ans[k]=nums[j]%10;\\n            k--;\\n            \\n            if(nums[j]%10==nums[j]){\\n                j--;\\n            }\\n            else{\\n            nums[j]=nums[j]/10;}\\n        }\\n       return ans;\\n       \\n        }\\n        \\n    }\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        int count =0;\\n        \\n//Math.log10(number) tell you how many digits number have\\n    \\n  for(int i=0;i<nums.length;i++){\\n            count+=Math.log10(nums[i])+1;\\n        }\\n\\n        int[] ans=new int[count];\\n        int j=nums.length-1;\\n        int k=ans.length-1;\\n        while(k>=0 && j>=0){\\n            ans[k]=nums[j]%10;\\n            k--;\\n            \\n            if(nums[j]%10==nums[j]){\\n                j--;\\n            }\\n            else{\\n            nums[j]=nums[j]/10;}\\n        }\\n       return ans;\\n       \\n        }\\n        \\n    }\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3993970,
                "title": "easy-solution-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n      \\n    StringBuilder sb=new StringBuilder();\\n    for (int i:nums)\\n    sb.append(i);\\n\\n    String str= sb.toString();\\n\\n    int[] a=new int[str.length()];\\n\\n    for (int i=0;i<a.length;i++)\\n    {\\n    a[i]=str.charAt(i)-\\'0\\';\\n    }\\n\\n    return a;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n      \\n    StringBuilder sb=new StringBuilder();\\n    for (int i:nums)\\n    sb.append(i);\\n\\n    String str= sb.toString();\\n\\n    int[] a=new int[str.length()];\\n\\n    for (int i=0;i<a.length;i++)\\n    {\\n    a[i]=str.charAt(i)-\\'0\\';\\n    }\\n\\n    return a;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3993969,
                "title": "easy-solution-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n      \\n    StringBuilder sb=new StringBuilder();\\n    for (int i:nums)\\n    sb.append(i);\\n\\n    String str= sb.toString();\\n\\n    int[] a=new int[str.length()];\\n\\n    for (int i=0;i<a.length;i++)\\n    {\\n    a[i]=str.charAt(i)-\\'0\\';\\n    }\\n\\n    return a;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n      \\n    StringBuilder sb=new StringBuilder();\\n    for (int i:nums)\\n    sb.append(i);\\n\\n    String str= sb.toString();\\n\\n    int[] a=new int[str.length()];\\n\\n    for (int i=0;i<a.length;i++)\\n    {\\n    a[i]=str.charAt(i)-\\'0\\';\\n    }\\n\\n    return a;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3992680,
                "title": "fast-java-solution-easy-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        List<Integer>list=new ArrayList<>();\\n        for(int i=0;i<nums.length;i++){\\n\\n            String num=String.valueOf(nums[i]);\\n\\n            for (int j=0;j<num.length();j++){\\n                int digit=Character.getNumericValue(num.charAt(j));\\n\\n                list.add(digit);\\n\\n            }\\n        }\\n        int[] resultArray=new int[list.size()];\\n       for (int i=0;i<resultArray.length;i++){\\n           resultArray[i]=list.get(i);\\n\\n       } \\n       return resultArray;\\n        \\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        List<Integer>list=new ArrayList<>();\\n        for(int i=0;i<nums.length;i++){\\n\\n            String num=String.valueOf(nums[i]);\\n\\n            for (int j=0;j<num.length();j++){\\n                int digit=Character.getNumericValue(num.charAt(j));\\n\\n                list.add(digit);\\n\\n            }\\n        }\\n        int[] resultArray=new int[list.size()];\\n       for (int i=0;i<resultArray.length;i++){\\n           resultArray[i]=list.get(i);\\n\\n       } \\n       return resultArray;\\n        \\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3991090,
                "title": "2553-separate-the-digits-in-an-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n  O(n*D)   D is the maximum number of digits in any element.\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n  O(D)\\n# Code\\n```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        ArrayList<Integer> list = new ArrayList();\\n\\n        for (int num : nums) {\\n            ArrayList<Integer> currList = new ArrayList();\\n            while (num > 0) {\\n                int remain = num % 10;\\n                currList.add(remain);\\n                num = num / 10;\\n            }\\n            for (int i = currList.size() - 1; i >= 0; i--) {\\n                list.add(currList.get(i));\\n            }\\n        }\\n\\n        int[] result = new int[list.size()];\\n        for (int i = 0; i < list.size(); i++) {\\n            result[i] = list.get(i);\\n        }\\n\\n        return result;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        ArrayList<Integer> list = new ArrayList();\\n\\n        for (int num : nums) {\\n            ArrayList<Integer> currList = new ArrayList();\\n            while (num > 0) {\\n                int remain = num % 10;\\n                currList.add(remain);\\n                num = num / 10;\\n            }\\n            for (int i = currList.size() - 1; i >= 0; i--) {\\n                list.add(currList.get(i));\\n            }\\n        }\\n\\n        int[] result = new int[list.size()];\\n        for (int i = 0; i < list.size(); i++) {\\n            result[i] = list.get(i);\\n        }\\n\\n        return result;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3990060,
                "title": "solving-using-collections",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: 12ms\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: 44.71 mb\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n   int[] sep(int i){\\n        List<Integer> s= new ArrayList<Integer>();\\n        while(i!=0){\\n            s.add(i%10);\\n            i=i/10;\\n        }\\n        \\n        return s.stream()\\n                .mapToInt(Integer::intValue)\\n                .toArray();\\n    }\\n    public int[] separateDigits(int[] nums) {\\n        List<Integer> list = new ArrayList<Integer>();\\n        for(int i=0;i<nums.length;i++){\\n            int[] temp = sep(nums[i]);\\n            for(int j=temp.length-1;j>=0;j--){\\n                list.add(temp[j]);\\n            }\\n        }\\n        return list.stream().mapToInt(Integer::intValue).toArray();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n   int[] sep(int i){\\n        List<Integer> s= new ArrayList<Integer>();\\n        while(i!=0){\\n            s.add(i%10);\\n            i=i/10;\\n        }\\n        \\n        return s.stream()\\n                .mapToInt(Integer::intValue)\\n                .toArray();\\n    }\\n    public int[] separateDigits(int[] nums) {\\n        List<Integer> list = new ArrayList<Integer>();\\n        for(int i=0;i<nums.length;i++){\\n            int[] temp = sep(nums[i]);\\n            for(int j=temp.length-1;j>=0;j--){\\n                list.add(temp[j]);\\n            }\\n        }\\n        return list.stream().mapToInt(Integer::intValue).toArray();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3987677,
                "title": "python-o-1-space-complexibity-beating-99",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        for i in range(len(nums)):\\n            nums.extend([int(j) for j in str(nums[0])])\\n            nums.pop(0)\\n        return nums\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        for i in range(len(nums)):\\n            nums.extend([int(j) for j in str(nums[0])])\\n            nums.pop(0)\\n        return nums\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3984122,
                "title": "simple-one-line-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar separateDigits = function(nums) {\\n   return nums.join(\"\").split(\"\");\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar separateDigits = function(nums) {\\n   return nums.join(\"\").split(\"\");\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3983955,
                "title": "java-easy-stringbuilder-conversion",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIf we append the numbers as string in a stringbuilder, we will get a single number as a string. We can then pick each character from the string from starting to end, and push it to an array, and then return the array.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nTake a stringbuilder, iterate through the array nums and append each number to the stringbuilder. Initialize the result array with length equal to the length og the stringbuilder. Iterate through each character in the stringbuilder and set it in the result array. Return the result array.\\n# Complexity\\n- Time complexity:\\n- $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        StringBuilder sb = new StringBuilder();\\n        for(int i = 0; i < nums.length; i++){\\n            sb.append(nums[i]);\\n        }\\n\\n        int[] res = new int[sb.length()];\\n\\n        for(int i = 0; i < sb.length(); i++){\\n            res[i] = Character.getNumericValue(sb.charAt(i));\\n        }\\n\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] separateDigits(int[] nums) {\\n        StringBuilder sb = new StringBuilder();\\n        for(int i = 0; i < nums.length; i++){\\n            sb.append(nums[i]);\\n        }\\n\\n        int[] res = new int[sb.length()];\\n\\n        for(int i = 0; i < sb.length(); i++){\\n            res[i] = Character.getNumericValue(sb.charAt(i));\\n        }\\n\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3980821,
                "title": "simple-solution-for-beginners-if-you-have-better-solution-please-comment-it-out",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        arr=[]\\n        for i in nums:\\n            s=str(i)\\n            l=len(s)\\n            if l >=2:\\n                for k in s:\\n                    arr.append(int(k))\\n            else:\\n                arr.append(int(s))\\n        return arr\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        arr=[]\\n        for i in nums:\\n            s=str(i)\\n            l=len(s)\\n            if l >=2:\\n                for k in s:\\n                    arr.append(int(k))\\n            else:\\n                arr.append(int(s))\\n        return arr\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3978701,
                "title": "separate-the-digits-in-an-array",
                "content": "# Intuition\\n ***Ist Method>***first calulate the size of the nums vector\\nthen take two vectors temp and ans.\\niterate through each element of nums vector\\ntake a string variable to convert the number into string\\nrun a inner for loop from 0 to length of the string\\ncheck if number is a digit then convert it to a number by subtracting it from from the ascii value of 0 i.e(48) then push_back that digit into temp vector.after the inner for loop insert the entire  temp vector into the ans vector.after the inserttion clear the temp vector for storing digits of nums[i] and at the end return the ans vector.\\n\\n***2nd method->*** take two vectors ans and v1. run a outer for loop till the size of the nums vector and then run the while till teh nums[i]>0\\nextract from the last digit push that digit in v1 vector and divide that digit so that it is removed in the next iteration.\\nafter the while condition get false reverse the v1 vector and then insert the v1 vector at the end of the ans vector. then clear the v1 vector. after the entire nums vector is traversed return the ans vector.\\n\\n# Approach\\nbrute force approach\\n\\n# Complexity\\n- Time complexity:\\n0(n*log(max_num))\\n\\n- Space complexity:\\n0(n*log(max_num))\\n\\n# Code\\n```\\n/*class Solution//Ist approach\\n{\\n    public:\\n    vector<int>separateDigits(vector<int>&nums)\\n    {\\n        vector<int>ans;\\n        vector<int>temp;\\n        int tiny=nums.size();\\n        for(int i=0;i<tiny;i++)\\n        {\\n            string str=to_string(nums[i]);\\n            for(char digit:str)\\n            {\\n                int extracteddigit=0;\\n                if(isdigit(digit))\\n                  extracteddigit=(digit-\\'0\\');\\n                temp.push_back(extracteddigit);\\n            }\\n            ans.insert(ans.end(),temp.begin(),temp.end());\\n            temp.clear();\\n        }\\n        return ans;\\n    }\\n};*/\\nclass Solution//2nd approach\\n{\\n    public:\\n    vector<int>separateDigits(vector<int>&nums)\\n    {\\n        vector<int>ans;\\n        int i=0;\\n        int n=nums.size();\\n        int r=0;\\n        vector<int>v1;\\n    for(i=0;i<n;i++)\\n    {\\n        while(nums[i]>0)\\n        {\\n            r=nums[i]%10;\\n            v1.push_back(r);\\n            nums[i]/=10;\\n\\n        }\\n        reverse(v1.begin(),v1.end());\\n        ans.insert(ans.end(),v1.begin(),v1.end());\\n        v1.clear();\\n    }\\n    return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/*class Solution//Ist approach\\n{\\n    public:\\n    vector<int>separateDigits(vector<int>&nums)\\n    {\\n        vector<int>ans;\\n        vector<int>temp;\\n        int tiny=nums.size();\\n        for(int i=0;i<tiny;i++)\\n        {\\n            string str=to_string(nums[i]);\\n            for(char digit:str)\\n            {\\n                int extracteddigit=0;\\n                if(isdigit(digit))\\n                  extracteddigit=(digit-\\'0\\');\\n                temp.push_back(extracteddigit);\\n            }\\n            ans.insert(ans.end(),temp.begin(),temp.end());\\n            temp.clear();\\n        }\\n        return ans;\\n    }\\n};*/\\nclass Solution//2nd approach\\n{\\n    public:\\n    vector<int>separateDigits(vector<int>&nums)\\n    {\\n        vector<int>ans;\\n        int i=0;\\n        int n=nums.size();\\n        int r=0;\\n        vector<int>v1;\\n    for(i=0;i<n;i++)\\n    {\\n        while(nums[i]>0)\\n        {\\n            r=nums[i]%10;\\n            v1.push_back(r);\\n            nums[i]/=10;\\n\\n        }\\n        reverse(v1.begin(),v1.end());\\n        ans.insert(ans.end(),v1.begin(),v1.end());\\n        v1.clear();\\n    }\\n    return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3976339,
                "title": "go-strconv",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunc separateDigits(nums []int) []int {\\n    var val string\\n    res:=[]int{} \\n    for _,i:=range nums{\\n        val=strconv.Itoa(i)\\n        for j:=0;j<len(val);j++{\\n            int_val, _ := strconv.Atoi(val[j:j+1])\\n            res=append(res,int_val)\\n        }\\n\\n    }\\n    return res\\n}\\n```",
                "solutionTags": [
                    "Go",
                    "Array",
                    "String"
                ],
                "code": "```\\nfunc separateDigits(nums []int) []int {\\n    var val string\\n    res:=[]int{} \\n    for _,i:=range nums{\\n        val=strconv.Itoa(i)\\n        for j:=0;j<len(val);j++{\\n            int_val, _ := strconv.Atoi(val[j:j+1])\\n            res=append(res,int_val)\\n        }\\n\\n    }\\n    return res\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3975998,
                "title": "easy-cpp-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n * log10(val_max))\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans, temp;\\n        for(int i = 0; i < nums.size(); i++){\\n            int val = nums[i];\\n            int rev = 0;\\n            while(val){\\n                int rem = val % 10;\\n                rev = rev * 10 + rem;\\n                val /= 10;\\n            }\\n            temp.push_back(rev);\\n        }\\n\\n        for(int i = 0; i < temp.size(); i++){\\n            int val = temp[i];\\n            while(val){\\n                ans.push_back(val%10);\\n                val /= 10;\\n            }\\n\\n            while(nums[i]%10==0){\\n                ans.push_back(0);\\n                nums[i] /= 10;\\n            }\\n        }\\n\\n        return ans;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> separateDigits(vector<int>& nums) {\\n        vector<int> ans, temp;\\n        for(int i = 0; i < nums.size(); i++){\\n            int val = nums[i];\\n            int rev = 0;\\n            while(val){\\n                int rem = val % 10;\\n                rev = rev * 10 + rem;\\n                val /= 10;\\n            }\\n            temp.push_back(rev);\\n        }\\n\\n        for(int i = 0; i < temp.size(); i++){\\n            int val = temp[i];\\n            while(val){\\n                ans.push_back(val%10);\\n                val /= 10;\\n            }\\n\\n            while(nums[i]%10==0){\\n                ans.push_back(0);\\n                nums[i] /= 10;\\n            }\\n        }\\n\\n        return ans;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3971456,
                "title": "4-line-python-3-solution-using-inbuilt-function",
                "content": "```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        answer = []\\n        for i in nums:\\n            answer += map(int,list(str(i)))\\n        return answer\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def separateDigits(self, nums: List[int]) -> List[int]:\\n        answer = []\\n        for i in nums:\\n            answer += map(int,list(str(i)))\\n        return answer\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1787528,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Man, such super easy questions in a contest and rate limit exceeded for some minutes in the start of the contest. This affects the rank by atleast 1000 if I can solve only 1-2 questions in the contest."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "[@shekharaditya](/shekharaditya) Yes, that matters"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "do we get extra points or good rank if we do questions quick in contest"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Easy and simple Solution <br>\\nMy solution Link : -> https://leetcode.com/problems/separate-the-digits-in-an-array/solutions/3141756/c-easy-and-simple-solution/\\n<br>\\nDon\\'t Forgot to upvote it ."
                    },
                    {
                        "username": "jjinendra3",
                        "content": "Guys, make it a string, it will take n*m time complexity but it will accept anyways its gonna take n*m, so better to do it in 7 lines of code (SOLN BELOW)\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\nvector<int> ok;\\n        for(int i=0;i<nums.size();i++){\\n            string g=to_string(nums[i]);\\n            for(int j=0;j<g.length();j++){\\n                ok.push_back(g[j]-48);\\n            }\\n        }\\n        return ok;"
                    },
                    {
                        "username": "Muskan003_NITA",
                        "content": "i only got error in case input 100"
                    },
                    {
                        "username": "Xytan",
                        "content": "Use String, not any numeric data type."
                    },
                    {
                        "username": "pant_harshit007",
                        "content": "TIP:\\nYou can use 2 for loops one will fetch the number 13\\nother will add 1 and 3 to your list\\n"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "This one was probably done by everyone So Easy"
                    }
                ]
            },
            {
                "id": 1787611,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Man, such super easy questions in a contest and rate limit exceeded for some minutes in the start of the contest. This affects the rank by atleast 1000 if I can solve only 1-2 questions in the contest."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "[@shekharaditya](/shekharaditya) Yes, that matters"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "do we get extra points or good rank if we do questions quick in contest"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Easy and simple Solution <br>\\nMy solution Link : -> https://leetcode.com/problems/separate-the-digits-in-an-array/solutions/3141756/c-easy-and-simple-solution/\\n<br>\\nDon\\'t Forgot to upvote it ."
                    },
                    {
                        "username": "jjinendra3",
                        "content": "Guys, make it a string, it will take n*m time complexity but it will accept anyways its gonna take n*m, so better to do it in 7 lines of code (SOLN BELOW)\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\nvector<int> ok;\\n        for(int i=0;i<nums.size();i++){\\n            string g=to_string(nums[i]);\\n            for(int j=0;j<g.length();j++){\\n                ok.push_back(g[j]-48);\\n            }\\n        }\\n        return ok;"
                    },
                    {
                        "username": "Muskan003_NITA",
                        "content": "i only got error in case input 100"
                    },
                    {
                        "username": "Xytan",
                        "content": "Use String, not any numeric data type."
                    },
                    {
                        "username": "pant_harshit007",
                        "content": "TIP:\\nYou can use 2 for loops one will fetch the number 13\\nother will add 1 and 3 to your list\\n"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "This one was probably done by everyone So Easy"
                    }
                ]
            },
            {
                "id": 1796438,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Man, such super easy questions in a contest and rate limit exceeded for some minutes in the start of the contest. This affects the rank by atleast 1000 if I can solve only 1-2 questions in the contest."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "[@shekharaditya](/shekharaditya) Yes, that matters"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "do we get extra points or good rank if we do questions quick in contest"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Easy and simple Solution <br>\\nMy solution Link : -> https://leetcode.com/problems/separate-the-digits-in-an-array/solutions/3141756/c-easy-and-simple-solution/\\n<br>\\nDon\\'t Forgot to upvote it ."
                    },
                    {
                        "username": "jjinendra3",
                        "content": "Guys, make it a string, it will take n*m time complexity but it will accept anyways its gonna take n*m, so better to do it in 7 lines of code (SOLN BELOW)\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\nvector<int> ok;\\n        for(int i=0;i<nums.size();i++){\\n            string g=to_string(nums[i]);\\n            for(int j=0;j<g.length();j++){\\n                ok.push_back(g[j]-48);\\n            }\\n        }\\n        return ok;"
                    },
                    {
                        "username": "Muskan003_NITA",
                        "content": "i only got error in case input 100"
                    },
                    {
                        "username": "Xytan",
                        "content": "Use String, not any numeric data type."
                    },
                    {
                        "username": "pant_harshit007",
                        "content": "TIP:\\nYou can use 2 for loops one will fetch the number 13\\nother will add 1 and 3 to your list\\n"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "This one was probably done by everyone So Easy"
                    }
                ]
            },
            {
                "id": 1788568,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Man, such super easy questions in a contest and rate limit exceeded for some minutes in the start of the contest. This affects the rank by atleast 1000 if I can solve only 1-2 questions in the contest."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "[@shekharaditya](/shekharaditya) Yes, that matters"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "do we get extra points or good rank if we do questions quick in contest"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Easy and simple Solution <br>\\nMy solution Link : -> https://leetcode.com/problems/separate-the-digits-in-an-array/solutions/3141756/c-easy-and-simple-solution/\\n<br>\\nDon\\'t Forgot to upvote it ."
                    },
                    {
                        "username": "jjinendra3",
                        "content": "Guys, make it a string, it will take n*m time complexity but it will accept anyways its gonna take n*m, so better to do it in 7 lines of code (SOLN BELOW)\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\nvector<int> ok;\\n        for(int i=0;i<nums.size();i++){\\n            string g=to_string(nums[i]);\\n            for(int j=0;j<g.length();j++){\\n                ok.push_back(g[j]-48);\\n            }\\n        }\\n        return ok;"
                    },
                    {
                        "username": "Muskan003_NITA",
                        "content": "i only got error in case input 100"
                    },
                    {
                        "username": "Xytan",
                        "content": "Use String, not any numeric data type."
                    },
                    {
                        "username": "pant_harshit007",
                        "content": "TIP:\\nYou can use 2 for loops one will fetch the number 13\\nother will add 1 and 3 to your list\\n"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "This one was probably done by everyone So Easy"
                    }
                ]
            },
            {
                "id": 1787877,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Man, such super easy questions in a contest and rate limit exceeded for some minutes in the start of the contest. This affects the rank by atleast 1000 if I can solve only 1-2 questions in the contest."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "[@shekharaditya](/shekharaditya) Yes, that matters"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "do we get extra points or good rank if we do questions quick in contest"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Easy and simple Solution <br>\\nMy solution Link : -> https://leetcode.com/problems/separate-the-digits-in-an-array/solutions/3141756/c-easy-and-simple-solution/\\n<br>\\nDon\\'t Forgot to upvote it ."
                    },
                    {
                        "username": "jjinendra3",
                        "content": "Guys, make it a string, it will take n*m time complexity but it will accept anyways its gonna take n*m, so better to do it in 7 lines of code (SOLN BELOW)\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\nvector<int> ok;\\n        for(int i=0;i<nums.size();i++){\\n            string g=to_string(nums[i]);\\n            for(int j=0;j<g.length();j++){\\n                ok.push_back(g[j]-48);\\n            }\\n        }\\n        return ok;"
                    },
                    {
                        "username": "Muskan003_NITA",
                        "content": "i only got error in case input 100"
                    },
                    {
                        "username": "Xytan",
                        "content": "Use String, not any numeric data type."
                    },
                    {
                        "username": "pant_harshit007",
                        "content": "TIP:\\nYou can use 2 for loops one will fetch the number 13\\nother will add 1 and 3 to your list\\n"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "This one was probably done by everyone So Easy"
                    }
                ]
            },
            {
                "id": 1787652,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Man, such super easy questions in a contest and rate limit exceeded for some minutes in the start of the contest. This affects the rank by atleast 1000 if I can solve only 1-2 questions in the contest."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "[@shekharaditya](/shekharaditya) Yes, that matters"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "do we get extra points or good rank if we do questions quick in contest"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Easy and simple Solution <br>\\nMy solution Link : -> https://leetcode.com/problems/separate-the-digits-in-an-array/solutions/3141756/c-easy-and-simple-solution/\\n<br>\\nDon\\'t Forgot to upvote it ."
                    },
                    {
                        "username": "jjinendra3",
                        "content": "Guys, make it a string, it will take n*m time complexity but it will accept anyways its gonna take n*m, so better to do it in 7 lines of code (SOLN BELOW)\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\nvector<int> ok;\\n        for(int i=0;i<nums.size();i++){\\n            string g=to_string(nums[i]);\\n            for(int j=0;j<g.length();j++){\\n                ok.push_back(g[j]-48);\\n            }\\n        }\\n        return ok;"
                    },
                    {
                        "username": "Muskan003_NITA",
                        "content": "i only got error in case input 100"
                    },
                    {
                        "username": "Xytan",
                        "content": "Use String, not any numeric data type."
                    },
                    {
                        "username": "pant_harshit007",
                        "content": "TIP:\\nYou can use 2 for loops one will fetch the number 13\\nother will add 1 and 3 to your list\\n"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "This one was probably done by everyone So Easy"
                    }
                ]
            }
        ]
    }
]