[
    {
        "title": "Sales Analysis III",
        "question_content": "Table: Product\n\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| product_id   | int     |\n| product_name | varchar |\n| unit_price   | int     |\n+--------------+---------+\nproduct_id is the primary key (column with unique values) of this table.\nEach row of this table indicates the name and the price of each product.\n\nTable: Sales\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| seller_id   | int     |\n| product_id  | int     |\n| buyer_id    | int     |\n| sale_date   | date    |\n| quantity    | int     |\n| price       | int     |\n+-------------+---------+\nThis table can have duplicate rows.\nproduct_id is a foreign key (reference column) to the Product table.\nEach row of this table contains some information about one sale.\n\n&nbsp;\nWrite a solution to&nbsp;report&nbsp;the products that were only sold in the first quarter of 2019. That is, between 2019-01-01 and 2019-03-31 inclusive.\nReturn the result table in any order.\nThe result format is in the following example.\n&nbsp;\nExample 1:\n\nInput: \nProduct table:\n+------------+--------------+------------+\n| product_id | product_name | unit_price |\n+------------+--------------+------------+\n| 1          | S8           | 1000       |\n| 2          | G4           | 800        |\n| 3          | iPhone       | 1400       |\n+------------+--------------+------------+\nSales table:\n+-----------+------------+----------+------------+----------+-------+\n| seller_id | product_id | buyer_id | sale_date  | quantity | price |\n+-----------+------------+----------+------------+----------+-------+\n| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |\n| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |\n| 2         | 2          | 3        | 2019-06-02 | 1        | 800   |\n| 3         | 3          | 4        | 2019-05-13 | 2        | 2800  |\n+-----------+------------+----------+------------+----------+-------+\nOutput: \n+-------------+--------------+\n| product_id  | product_name |\n+-------------+--------------+\n| 1           | S8           |\n+-------------+--------------+\nExplanation: \nThe product with id 1 was only sold in the spring of 2019.\nThe product with id 2 was sold in the spring of 2019 but was also sold after the spring of 2019.\nThe product with id 3 was sold after spring 2019.\nWe return only product 1 as it is the product that was only sold in the spring of 2019.",
        "solutions": [
            {
                "id": 315906,
                "title": "simple-mysql-solution",
                "content": "```\\nSELECT s.product_id, product_name\\nFROM Sales s\\nLEFT JOIN Product p\\nON s.product_id = p.product_id\\nGROUP BY s.product_id\\nHAVING MIN(sale_date) >= CAST(\\'2019-01-01\\' AS DATE) AND\\n       MAX(sale_date) <= CAST(\\'2019-03-31\\' AS DATE)\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT s.product_id, product_name\\nFROM Sales s\\nLEFT JOIN Product p\\nON s.product_id = p.product_id\\nGROUP BY s.product_id\\nHAVING MIN(sale_date) >= CAST(\\'2019-01-01\\' AS DATE) AND\\n       MAX(sale_date) <= CAST(\\'2019-03-31\\' AS DATE)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2185158,
                "title": "easiest-solution-ever",
                "content": "```\\n# Wherever you are given a range, keep MIN() and MAX() in mind\\nSELECT Product.product_id, Product.product_name FROM Product \\nJOIN Sales \\nON Product.product_id = Sales.product_id \\nGROUP BY Sales.product_id \\nHAVING MIN(Sales.sale_date) >= \"2019-01-01\" AND MAX(Sales.sale_date) <= \"2019-03-31\";\\n```",
                "solutionTags": [],
                "code": "```\\n# Wherever you are given a range, keep MIN() and MAX() in mind\\nSELECT Product.product_id, Product.product_name FROM Product \\nJOIN Sales \\nON Product.product_id = Sales.product_id \\nGROUP BY Sales.product_id \\nHAVING MIN(Sales.sale_date) >= \"2019-01-01\" AND MAX(Sales.sale_date) <= \"2019-03-31\";\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 397232,
                "title": "beat-95-simple-subquery",
                "content": "```\\nSELECT product_id, product_name \\nFROM Product \\nWHERE product_id IN\\n(SELECT product_id\\nFROM Sales\\nGROUP BY product_id\\nHAVING MIN(sale_date) >= \\'2019-01-01\\' AND MAX(sale_date) <= \\'2019-03-31\\')\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT product_id, product_name \\nFROM Product \\nWHERE product_id IN\\n(SELECT product_id\\nFROM Sales\\nGROUP BY product_id\\nHAVING MIN(sale_date) >= \\'2019-01-01\\' AND MAX(sale_date) <= \\'2019-03-31\\')\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 705419,
                "title": "ms-sql-99-01-faster-group-by-having",
                "content": "```\\nselect s.product_id, p.product_name\\nfrom sales s, product p\\nwhere s.product_id = p.product_id\\ngroup by s.product_id, p.product_name\\nhaving min(s.sale_date) >= \\'2019-01-01\\' \\n    and max(s.sale_date) <= \\'2019-03-31\\'\\n```",
                "solutionTags": [],
                "code": "```\\nselect s.product_id, p.product_name\\nfrom sales s, product p\\nwhere s.product_id = p.product_id\\ngroup by s.product_id, p.product_name\\nhaving min(s.sale_date) >= \\'2019-01-01\\' \\n    and max(s.sale_date) <= \\'2019-03-31\\'\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2510838,
                "title": "mysql-beginner-level-faster-than-98-simple-short-solution",
                "content": "**Please upvote to motivate me in my quest of documenting all leetcode solutions. HAPPY CODING:)\\nAny suggestions and improvements are always welcome.***\\n*====================================================================*\\n\\u2705 **MySQL Code :**\\n Your runtime beats 98.65 % of mysql submissions.\\n```\\nSELECT product_id, product_name\\nFROM Sales \\nJOIN Product \\nUsing(product_id)\\nGROUP BY product_id\\nHAVING MIN(sale_date) >= \\'2019-01-01\\' AND MAX(sale_date) <= \\'2019-03-31\\' \\n```\\n**Runtime:** 980 ms\\n**Memory Usage:**  0B\\n________________________________\\n__________________________________\\n\\nIf you like the solution, please upvote \\uD83D\\uDD3C\\nFor any questions, or discussions, comment below. \\uD83D\\uDC47\\uFE0F",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT product_id, product_name\\nFROM Sales \\nJOIN Product \\nUsing(product_id)\\nGROUP BY product_id\\nHAVING MIN(sale_date) >= \\'2019-01-01\\' AND MAX(sale_date) <= \\'2019-03-31\\' \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3447908,
                "title": "superb-logic-with-min-and-max",
                "content": "\\n# Logic min and max\\n```\\nselect product_id,product_name\\nfrom product natural join sales\\ngroup by product_id\\nhaving min(sale_date)>=\\'2019-01-01\\' and max(sale_date)<=\\'2019-03-31\\'\\n\\n```\\n# please upvote me it would encourage me alot\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect product_id,product_name\\nfrom product natural join sales\\ngroup by product_id\\nhaving min(sale_date)>=\\'2019-01-01\\' and max(sale_date)<=\\'2019-03-31\\'\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3007366,
                "title": "mysql-solution-easy-solution",
                "content": "\\n# Code\\n```\\nselect product_id,product_name \\nfrom Product where product_id not \\nin \\n(\\n    select p.product_id from Product p left join Sales s \\n    on p.product_id=s.product_id \\n    where s.sale_date <date(\\'2019-01-01\\') \\n    or\\n    s.sale_date >date(\\'2019-03-31\\') \\n    or\\n    s.seller_id is null \\n);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect product_id,product_name \\nfrom Product where product_id not \\nin \\n(\\n    select p.product_id from Product p left join Sales s \\n    on p.product_id=s.product_id \\n    where s.sale_date <date(\\'2019-01-01\\') \\n    or\\n    s.sale_date >date(\\'2019-03-31\\') \\n    or\\n    s.seller_id is null \\n);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2546294,
                "title": "1084-sales-analysis-iii",
                "content": "```\\nSELECT product_id, product_name FROM Sales \\nJOIN Product USING(product_id)\\nGROUP BY product_id\\nHAVING MIN(sale_date) >= \\'2019-01-01\\' AND MAX(sale_date) <= \\'2019-03-31\\' ;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT product_id, product_name FROM Sales \\nJOIN Product USING(product_id)\\nGROUP BY product_id\\nHAVING MIN(sale_date) >= \\'2019-01-01\\' AND MAX(sale_date) <= \\'2019-03-31\\' ;",
                "codeTag": "Unknown"
            },
            {
                "id": 311443,
                "title": "simple-mysql-solution",
                "content": "```\\nSELECT product_id, product_name\\nFROM product\\nJOIN SALES\\nUSING(product_id)\\nGROUP BY product_id\\nHAVING sum(CASE WHEN sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' THEN 1 ELSE 0 end) > 0\\nAND sum(CASE WHEN sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' THEN 0 else 1 end) = 0\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT product_id, product_name\\nFROM product\\nJOIN SALES\\nUSING(product_id)\\nGROUP BY product_id\\nHAVING sum(CASE WHEN sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' THEN 1 ELSE 0 end) > 0\\nAND sum(CASE WHEN sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' THEN 0 else 1 end) = 0\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 416341,
                "title": "solution-without-join-using-not-in-and-not-between",
                "content": "```\\nSELECT Product.product_id, Product.product_name\\nFROM Product\\nWHERE product_id NOT IN (SELECT product_id FROM Sales WHERE sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\');\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT Product.product_id, Product.product_name\\nFROM Product\\nWHERE product_id NOT IN (SELECT product_id FROM Sales WHERE sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\');\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3039007,
                "title": "absolutely-the-simplest-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect product_id,product_name\\nfrom product p join sales s \\nusing(product_id)\\ngroup by product_id\\nhaving sum(sale_date<\"2019-01-01\")=0\\nand sum(sale_date>\"2019-03-31\")=0\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect product_id,product_name\\nfrom product p join sales s \\nusing(product_id)\\ngroup by product_id\\nhaving sum(sale_date<\"2019-01-01\")=0\\nand sum(sale_date>\"2019-03-31\")=0\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2699868,
                "title": "mysql-subquery-left-join",
                "content": "# Write your MySQL query statement below\\n```\\n\\nWITH cte AS\\n(SELECT product_id FROM Sales\\nWHERE sale_date > \\'2019-03-31\\'\\nOR sale_date < \\'2019-01-01\\')\\n\\nSELECT DISTINCT s.product_id , p.product_name\\nFROM Sales s\\nLEFT JOIN Product p\\nON s.product_id=p.product_id  \\nWHERE s.product_id NOT \\nIN(SELECT product_id FROM cte); \\n```\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n\\nWITH cte AS\\n(SELECT product_id FROM Sales\\nWHERE sale_date > \\'2019-03-31\\'\\nOR sale_date < \\'2019-01-01\\')\\n\\nSELECT DISTINCT s.product_id , p.product_name\\nFROM Sales s\\nLEFT JOIN Product p\\nON s.product_id=p.product_id  \\nWHERE s.product_id NOT \\nIN(SELECT product_id FROM cte); \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2291562,
                "title": "mysql-simple-mysql-solution-using-having-clause-group-by",
                "content": "# If You like the Solution, Don\\'t Forget To UpVote Me, Please UpVote! \\uD83D\\uDD3C\\uD83D\\uDE4F\\n# Runtime: 998 ms, faster than 87.37% of MySQL online submissions for Sales Analysis III.\\n# Memory Usage: 0B, less than 100.00% of MySQL online submissions for Sales Analysis III.\\n\\n\\tselect p.product_id, p.product_name\\n\\tfrom Product p\\n\\tinner join Sales s on p.product_id = s.product_id\\n\\tgroup by s.product_id\\n\\thaving min(sale_date) >= \\'2019-01-01\\'\\n\\tand max(sale_date) <= \\'2019-03-31\\';",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "# If You like the Solution, Don\\'t Forget To UpVote Me, Please UpVote! \\uD83D\\uDD3C\\uD83D\\uDE4F\\n# Runtime: 998 ms, faster than 87.37% of MySQL online submissions for Sales Analysis III.\\n# Memory Usage: 0B, less than 100.00% of MySQL online submissions for Sales Analysis III.\\n\\n\\tselect p.product_id, p.product_name\\n\\tfrom Product p\\n\\tinner join Sales s on p.product_id = s.product_id\\n\\tgroup by s.product_id\\n\\thaving min(sale_date) >= \\'2019-01-01\\'\\n\\tand max(sale_date) <= \\'2019-03-31\\';",
                "codeTag": "Unknown"
            },
            {
                "id": 1414644,
                "title": "mysql-having",
                "content": "```\\nSELECT \\n        p.product_id, p.product_name\\nFROM \\n        product p\\nJOIN \\n        Sales s\\nON \\n        p.product_id = s.product_id \\n\\nGROUP BY s.product_id\\n        \\n      HAVING  max(s.sale_date)<= \\'2019-03-31\\'\\n      AND MIN(s.sale_date)>=\\'2019-01-01\\';",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT \\n        p.product_id, p.product_name\\nFROM \\n        product p\\nJOIN \\n        Sales s\\nON \\n        p.product_id = s.product_id \\n\\nGROUP BY s.product_id\\n        \\n      HAVING  max(s.sale_date)<= \\'2019-03-31\\'\\n      AND MIN(s.sale_date)>=\\'2019-01-01\\';",
                "codeTag": "Unknown"
            },
            {
                "id": 1278034,
                "title": "using-having-no-sub-query-needed",
                "content": "SELECT s.product_id, p.product_name\\nFROM Sales s JOIN Product p\\nON p.product_id = s.product_id\\nGROUP BY s.product_id\\nHAVING MIN(s.sale_date) >= \\'2019-01-01\\' AND MAX(s.sale_date) <=\\'2019-03-31 \\'\\n",
                "solutionTags": [],
                "code": "SELECT s.product_id, p.product_name\\nFROM Sales s JOIN Product p\\nON p.product_id = s.product_id\\nGROUP BY s.product_id\\nHAVING MIN(s.sale_date) >= \\'2019-01-01\\' AND MAX(s.sale_date) <=\\'2019-03-31 \\'\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2598194,
                "title": "sql-beginner-simple-logic",
                "content": "\\tselect\\n\\t\\ts.product_id, p.product_name\\n\\tfrom \\n\\t\\tSales s join Product p\\n\\ton\\n\\t\\ts.product_id = p.product_id\\n\\tgroup by\\n\\t\\ts.product_id \\n\\thaving\\n\\t\\tmin(s.sale_date) >= \"2019-01-01\" \\n\\t\\tAND\\n\\t\\tmax(s.sale_date) <= \"2019-03-31\"",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "\\tselect\\n\\t\\ts.product_id, p.product_name\\n\\tfrom \\n\\t\\tSales s join Product p\\n\\ton\\n\\t\\ts.product_id = p.product_id\\n\\tgroup by\\n\\t\\ts.product_id \\n\\thaving\\n\\t\\tmin(s.sale_date) >= \"2019-01-01\" \\n\\t\\tAND\\n\\t\\tmax(s.sale_date) <= \"2019-03-31\"",
                "codeTag": "Unknown"
            },
            {
                "id": 1976451,
                "title": "mysql-ms-sql-and-oracle-solution-with-explanations",
                "content": "We may have 4 cases here:\\n1) product has no any sales\\n2) product sold in the spring of 2019 only\\n3) product sold in other periods, but not in the spring of 2019\\n4) product sold in the spring of 2019 and in other periods\\n\\nThe 2nd case only is correct for the task condition (**only sold in the spring of 2019, between 2019-01-01 and 2019-03-31 inclusive**)\\n\\nAt the first we have to extract all lines from sales and join them with products, group them by product id and name (the 1st case goes away).\\n\\nWe may calculate count of sale lines that out of the spring 2019 period:\\n```SUM(CASE WHEN sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 0 ELSE 1 END)```\\nIf this sum is 0, it means that all sales of this product belong to the spring 2019 period (3rd and 4th cases went away)\\n\\nFinally we have the solution:\\n\\n\\n```\\nSELECT\\n    p.product_id,\\n    p.product_name\\nFROM Sales s\\nINNER JOIN Product p ON s.product_id = p.product_id\\nGROUP BY\\n    p.product_id,\\n    p.product_name\\nHAVING\\n    SUM(CASE WHEN sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 0 ELSE 1 END) = 0\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server",
                    "Oracle"
                ],
                "code": "```SUM(CASE WHEN sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 0 ELSE 1 END)```\n```\\nSELECT\\n    p.product_id,\\n    p.product_name\\nFROM Sales s\\nINNER JOIN Product p ON s.product_id = p.product_id\\nGROUP BY\\n    p.product_id,\\n    p.product_name\\nHAVING\\n    SUM(CASE WHEN sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 0 ELSE 1 END) = 0\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2152778,
                "title": "mssql-solution",
                "content": "```\\nSELECT\\n    product_id,\\n    product_name\\nFROM\\n    Product\\nWHERE\\n    product_id IN\\n    (\\n        SELECT\\n            product_id\\n        FROM\\n            Sales\\n        GROUP BY\\n            product_id\\n        HAVING\\n            MAX(sale_date) <= \\'2019-03-31\\'\\n            AND MIN(sale_date) >= \\'2019-01-01\\'\\n    )\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server"
                ],
                "code": "```\\nSELECT\\n    product_id,\\n    product_name\\nFROM\\n    Product\\nWHERE\\n    product_id IN\\n    (\\n        SELECT\\n            product_id\\n        FROM\\n            Sales\\n        GROUP BY\\n            product_id\\n        HAVING\\n            MAX(sale_date) <= \\'2019-03-31\\'\\n            AND MIN(sale_date) >= \\'2019-01-01\\'\\n    )\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2070643,
                "title": "accepted-solution-for-mysql-clean-simple-code",
                "content": "```\\nSELECT p.product_id, p.product_name\\nFROM Product p JOIN Sales s ON p.product_id=s.product_id\\nGROUP BY p.product_id\\nHAVING MIN(s.sale_date) >= \\'2019-01-01\\' \\nAND MAX(s.sale_date) <= \\'2019-03-31\\';\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT p.product_id, p.product_name\\nFROM Product p JOIN Sales s ON p.product_id=s.product_id\\nGROUP BY p.product_id\\nHAVING MIN(s.sale_date) >= \\'2019-01-01\\' \\nAND MAX(s.sale_date) <= \\'2019-03-31\\';\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 663175,
                "title": "easiest-mysql-solution",
                "content": "select \\nproduct_id, product_name\\nfrom product\\nwhere product_id not in\\n(select product_id\\nfrom sales\\nwhere sale_date <\\'2019-01-01\\'or sale_date>\\'2019-03-31\\')",
                "solutionTags": [],
                "code": "select \\nproduct_id, product_name\\nfrom product\\nwhere product_id not in\\n(select product_id\\nfrom sales\\nwhere sale_date <\\'2019-01-01\\'or sale_date>\\'2019-03-31\\')",
                "codeTag": "Unknown"
            },
            {
                "id": 313681,
                "title": "simple-solution",
                "content": "```\\nselect a.product_id, product_name\\nfrom Sales a\\ninner join Product b\\non a.product_id = b.product_id\\ngroup by a.product_id\\nhaving min(sale_date)>=\\'2019-01-01\\' and max(sale_date)<=\\'2019-03-31\\'\\n;\\n```",
                "solutionTags": [],
                "code": "```\\nselect a.product_id, product_name\\nfrom Sales a\\ninner join Product b\\non a.product_id = b.product_id\\ngroup by a.product_id\\nhaving min(sale_date)>=\\'2019-01-01\\' and max(sale_date)<=\\'2019-03-31\\'\\n;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3274988,
                "title": "easy-to-understand-sql",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect s.product_id, p.product_name\\nfrom sales s, product p\\nwhere s.product_id = p.product_id\\ngroup by s.product_id, p.product_name\\nhaving min(s.sale_date) >= \\'2019-01-01\\' AND max(s.sale_date) <= \\'2019-03-31\\';\\n```",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect s.product_id, p.product_name\\nfrom sales s, product p\\nwhere s.product_id = p.product_id\\ngroup by s.product_id, p.product_name\\nhaving min(s.sale_date) >= \\'2019-01-01\\' AND max(s.sale_date) <= \\'2019-03-31\\';\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2718164,
                "title": "easy-mysql-solution-left-join-inner-joins",
                "content": "```\\n# Write your MySQL query statement below\\nWITH rejected_ids AS (\\n    SELECT s.product_id\\n    FROM sales s\\n    WHERE s.sale_date NOT BETWEEN DATE(\\'2019-01-01\\') AND DATE(\\'2019-03-31\\')\\n)\\nSELECT DISTINCT p.product_id, p.product_name\\nFROM product p\\nINNER JOIN sales s ON s.product_id = p.product_id\\nLEFT JOIN rejected_ids r ON r.product_id = p.product_id\\nWHERE s.sale_date BETWEEN DATE(\\'2019-01-01\\') AND DATE(\\'2019-03-31\\') AND r.product_id IS NULL\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nWITH rejected_ids AS (\\n    SELECT s.product_id\\n    FROM sales s\\n    WHERE s.sale_date NOT BETWEEN DATE(\\'2019-01-01\\') AND DATE(\\'2019-03-31\\')\\n)\\nSELECT DISTINCT p.product_id, p.product_name\\nFROM product p\\nINNER JOIN sales s ON s.product_id = p.product_id\\nLEFT JOIN rejected_ids r ON r.product_id = p.product_id\\nWHERE s.sale_date BETWEEN DATE(\\'2019-01-01\\') AND DATE(\\'2019-03-31\\') AND r.product_id IS NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2607248,
                "title": "simplest-solution-using-having",
                "content": "```\\nSELECT Product.product_id, Product.product_name\\nFROM Product \\nINNER JOIN Sales \\nON Product.product_id = Sales.product_id \\nGROUP BY Sales.product_id \\nHAVING MIN(Sales.sale_date) >= \"2019-01-01\" AND MAX(Sales.sale_date) <= \"2019-03-31\"\\n```\\nIf it helped or you learned a new way, kindly upvote. Thanks :)",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT Product.product_id, Product.product_name\\nFROM Product \\nINNER JOIN Sales \\nON Product.product_id = Sales.product_id \\nGROUP BY Sales.product_id \\nHAVING MIN(Sales.sale_date) >= \"2019-01-01\" AND MAX(Sales.sale_date) <= \"2019-03-31\"\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2356133,
                "title": "my-straight-forward-solution-using-mysql-min",
                "content": "```\\nSELECT P.PRODUCT_ID, P.PRODUCT_NAME\\n    FROM PRODUCT P\\nJOIN SALES S\\n    USING (PRODUCT_ID)\\nGROUP BY PRODUCT_ID\\n    HAVING MIN(S.SALE_DATE) >= \\'2019-01-01\\'  \\n    AND \\n    MAX(S.SALE_DATE) <= \\'2019-03-31\\'\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT P.PRODUCT_ID, P.PRODUCT_NAME\\n    FROM PRODUCT P\\nJOIN SALES S\\n    USING (PRODUCT_ID)\\nGROUP BY PRODUCT_ID\\n    HAVING MIN(S.SALE_DATE) >= \\'2019-01-01\\'  \\n    AND \\n    MAX(S.SALE_DATE) <= \\'2019-03-31\\'\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2176928,
                "title": "don-t-know-the-answer",
                "content": "![image](https://assets.leetcode.com/users/images/a3b1fb94-0a62-42f6-a1a9-0602786b8dce_1655784039.0457337.gif)\\n\\n\\n```\\nselect distinct p.product_id, product_name \\nfrom product p left join \\nsales s on p.product_id=s.product_id\\ngroup by p.product_id\\nhaving min(sale_date) >= \\'2019-01-01\\' \\n    and max(sale_date) <= \\'2019-03-31\\';\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect distinct p.product_id, product_name \\nfrom product p left join \\nsales s on p.product_id=s.product_id\\ngroup by p.product_id\\nhaving min(sale_date) >= \\'2019-01-01\\' \\n    and max(sale_date) <= \\'2019-03-31\\';\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2057726,
                "title": "mysql-2-simple-solutions-with-comment-runtime-846ms-faster-than-99",
                "content": "Where and Select\\n```sql\\nSELECT\\n    product_id,\\n    product_name\\nFROM Product\\n# get product where only sold in first quarter 2019\\nWHERE product_id NOT IN (\\n    # get all product_id in table Sales Where not sold in first quarter 2019\\n    SELECT\\n        product_id\\n    FROM Sales\\n    WHERE sale_date < \"2019-01-01\" OR sale_date > \\'2019-03-31\\'\\n);\\n```\\nHaving and Quarter\\n```sql\\nSELECT\\n    p.product_id,\\n    p.product_name\\nFROM Product AS p\\n# join product and sales table\\nJOIN Sales AS s ON p.product_id = s.product_id\\nGROUP BY p.product_id\\n# where in quarter only 1\\nHAVING MAX(QUARTER(sale_date)) = 1;\\n```\\n# Upvote for your support",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```sql\\nSELECT\\n    product_id,\\n    product_name\\nFROM Product\\n# get product where only sold in first quarter 2019\\nWHERE product_id NOT IN (\\n    # get all product_id in table Sales Where not sold in first quarter 2019\\n    SELECT\\n        product_id\\n    FROM Sales\\n    WHERE sale_date < \"2019-01-01\" OR sale_date > \\'2019-03-31\\'\\n);\\n```\n```sql\\nSELECT\\n    p.product_id,\\n    p.product_name\\nFROM Product AS p\\n# join product and sales table\\nJOIN Sales AS s ON p.product_id = s.product_id\\nGROUP BY p.product_id\\n# where in quarter only 1\\nHAVING MAX(QUARTER(sale_date)) = 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 455306,
                "title": "simple-mysql-using-having-sum-0",
                "content": "```\\nSELECT s.product_id,\\nproduct_name\\nFROM sales s\\nJOIN product p\\nON s.product_id=p.product_id\\nGROUP BY s.product_id\\nHAVING SUM(IF(sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\',0,1))=0\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT s.product_id,\\nproduct_name\\nFROM sales s\\nJOIN product p\\nON s.product_id=p.product_id\\nGROUP BY s.product_id\\nHAVING SUM(IF(sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\',0,1))=0\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3104708,
                "title": "mysql-solution",
                "content": "# Code\\n```\\nSELECT s.product_id, product_name\\nFROM Sales s\\nLEFT JOIN Product p\\nON s.product_id = p.product_id\\nGROUP BY s.product_id\\nHAVING MIN(sale_date) >= CAST(\\'2019-01-01\\' AS DATE) AND\\n       MAX(sale_date) <= CAST(\\'2019-03-31\\' AS DATE)\\n```",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\nSELECT s.product_id, product_name\\nFROM Sales s\\nLEFT JOIN Product p\\nON s.product_id = p.product_id\\nGROUP BY s.product_id\\nHAVING MIN(sale_date) >= CAST(\\'2019-01-01\\' AS DATE) AND\\n       MAX(sale_date) <= CAST(\\'2019-03-31\\' AS DATE)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2300497,
                "title": "using-inner-join-and-group-by",
                "content": "SELECT \\n    p.product_id,\\n    p.product_name\\n    FROM Product p INNER JOIN Sales s\\n    ON p.product_id = s.product_id\\n    GROUP BY product_id\\n    HAVING MIN(sale_date) >= \\'2019-01-01\\' AND MAX(sale_date) <= \\'2019-03-31\\';",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "SELECT \\n    p.product_id,\\n    p.product_name\\n    FROM Product p INNER JOIN Sales s\\n    ON p.product_id = s.product_id\\n    GROUP BY product_id\\n    HAVING MIN(sale_date) >= \\'2019-01-01\\' AND MAX(sale_date) <= \\'2019-03-31\\';",
                "codeTag": "Unknown"
            },
            {
                "id": 2255746,
                "title": "simple-sol-with-one-subquery",
                "content": "```\\nSELECT DISTINCT p.product_id, product_name \\nFROM Product p \\nJOIN Sales s ON s.product_id = p.product_id \\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' \\n      AND p.product_id NOT IN (\\n                            SELECT product_id \\n                            FROM Sales \\n                            WHERE sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\n                         );\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT DISTINCT p.product_id, product_name \\nFROM Product p \\nJOIN Sales s ON s.product_id = p.product_id \\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' \\n      AND p.product_id NOT IN (\\n                            SELECT product_id \\n                            FROM Sales \\n                            WHERE sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\n                         );\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2088673,
                "title": "using-inner-join-and-group-by",
                "content": "```\\nSELECT s.product_id,p.product_name FROM Sales as s INNER JOIN Product as p ON s.product_id=p.product_id GROUP BY s.product_id HAVING MIN(sale_date)>=\\'2019-01-01\\' AND MAX(sale_date)<=\\'2019-03-31\\';\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT s.product_id,p.product_name FROM Sales as s INNER JOIN Product as p ON s.product_id=p.product_id GROUP BY s.product_id HAVING MIN(sale_date)>=\\'2019-01-01\\' AND MAX(sale_date)<=\\'2019-03-31\\';\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1918312,
                "title": "simple-mssql-solution",
                "content": "```\\nselect product_id, product_name\\nfrom product \\nwhere product_id not in(select product_id from sales where sale_date<\\'2019-01-01\\' or sale_date>\\'2019-03-31\\')\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nselect product_id, product_name\\nfrom product \\nwhere product_id not in(select product_id from sales where sale_date<\\'2019-01-01\\' or sale_date>\\'2019-03-31\\')\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1792402,
                "title": "easy-to-understand-my-sql-solution-without-join-or-cte",
                "content": "easy my sql solution \\n```\\nselect product_id, product_name from product where product_id not in ( \\nselect product_id from sales\\nwhere sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\')\\n```",
                "solutionTags": [],
                "code": "```\\nselect product_id, product_name from product where product_id not in ( \\nselect product_id from sales\\nwhere sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\')\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1585922,
                "title": "mysql-min-and-max-approach",
                "content": "select p.product_id, p.product_name\\nfrom product p\\ninner join sales s on s.product_id = p.product_id\\ngroup by p.product_id\\nhaving min(sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "select p.product_id, p.product_name\\nfrom product p\\ninner join sales s on s.product_id = p.product_id\\ngroup by p.product_id\\nhaving min(sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'",
                "codeTag": "Unknown"
            },
            {
                "id": 1572898,
                "title": "elegant-select-solution",
                "content": "```\\nSELECT \\n\\tproduct_id,\\n\\tproduct_name \\nFROM\\n\\tProduct\\nWHERE product_id NOT IN\\n\\t(SELECT\\n\\t\\tproduct_id\\n\\tFROM \\n\\t\\tSales\\n\\tWHERE\\n\\t\\tsale_date \\n    NOT BETWEEN \\n     \\'2019-01-01\\' AND \\'2019-03-31\\')\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT \\n\\tproduct_id,\\n\\tproduct_name \\nFROM\\n\\tProduct\\nWHERE product_id NOT IN\\n\\t(SELECT\\n\\t\\tproduct_id\\n\\tFROM \\n\\t\\tSales\\n\\tWHERE\\n\\t\\tsale_date \\n    NOT BETWEEN \\n     \\'2019-01-01\\' AND \\'2019-03-31\\')\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1100376,
                "title": "faster-than-100-of-ms-sql-server-online-submissions",
                "content": "```\\nSELECT p.product_id,\\n       p.product_name\\nFROM   product p\\n       JOIN sales s\\n         ON p.product_id = s.product_id\\nGROUP  BY p.product_id,\\n          p.product_name\\nHAVING Min(sale_date) >= \\'2019-01-01\\'\\n       AND Max(sale_date) <= \\'2019-03-31\\' \\n```",
                "solutionTags": [],
                "code": "```\\nSELECT p.product_id,\\n       p.product_name\\nFROM   product p\\n       JOIN sales s\\n         ON p.product_id = s.product_id\\nGROUP  BY p.product_id,\\n          p.product_name\\nHAVING Min(sale_date) >= \\'2019-01-01\\'\\n       AND Max(sale_date) <= \\'2019-03-31\\' \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3536680,
                "title": "mysql-solution-for-sales-analysis-iii-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe intuition behind the given solution is to select the product_id and product_name of products that had sales between a specific date range and had sales overall. The approach involves performing an inner join between the Sales table and the Product table using the product_id column. The results are then grouped by product_id. The HAVING clause is used to compare the sum of sales within the specific date range with the overall sum of sales.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Perform an inner join between the Sales table and the Product table using the product_id column.\\n1. Group the results by product_id.\\n1. Use the HAVING clause to filter the grouped results based on the comparison of the sum of sales within the date range and the overall sum of sales.\\n1. Return the product_id and product_name columns of the selected products.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of this solution depends on the size of the Sales table, the indexing of the relevant columns, and the efficiency of the join and grouping operations. If the tables are properly indexed on the product_id and sale_date columns, and the date range filter can be efficiently applied, the time complexity can be estimated as O(n * log n), where n is the number of rows in the Sales table.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of this solution depends on the size of the resulting dataset, which includes the product_id and product_name columns.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n  select product_id, product_name from Sales\\n  inner join product using(product_id)\\n  group by product_id\\n  having sum(if(sale_date between \\'2019-01-01\\' and \\'2019-03-31\\', 1, 0)) = sum(if(sale_date, 1, 0))\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n  select product_id, product_name from Sales\\n  inner join product using(product_id)\\n  group by product_id\\n  having sum(if(sale_date between \\'2019-01-01\\' and \\'2019-03-31\\', 1, 0)) = sum(if(sale_date, 1, 0))\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3276377,
                "title": "mysql-solution",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nselect product_id, product_name from Product natural join Sales\\ngroup by product_id \\nhaving min(sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'; \\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect product_id, product_name from Product natural join Sales\\ngroup by product_id \\nhaving min(sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'; \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3271156,
                "title": "mysql-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect s.product_id, p.product_name\\nfrom sales s, product p\\nwhere s.product_id = p.product_id\\ngroup by s.product_id, p.product_name\\nhaving min(s.sale_date) >= \\'2019-01-01\\' AND max(s.sale_date) <= \\'2019-03-31\\'\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect s.product_id, p.product_name\\nfrom sales s, product p\\nwhere s.product_id = p.product_id\\ngroup by s.product_id, p.product_name\\nhaving min(s.sale_date) >= \\'2019-01-01\\' AND max(s.sale_date) <= \\'2019-03-31\\'\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3101008,
                "title": "simple-query-sales-analysis-iii",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT DISTINCT A.product_id, B.product_name FROM Sales A LEFT JOIN Product B \\nON A.product_id = B.product_id LEFT JOIN \\n(SELECT DISTINCT product_id FROM Sales WHERE sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\') \\nC ON A.product_id = C.product_id\\nWHERE C.product_id is null;\\n\\n```\\nPlease upvote!!",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT DISTINCT A.product_id, B.product_name FROM Sales A LEFT JOIN Product B \\nON A.product_id = B.product_id LEFT JOIN \\n(SELECT DISTINCT product_id FROM Sales WHERE sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\') \\nC ON A.product_id = C.product_id\\nWHERE C.product_id is null;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3027757,
                "title": "faster-than-98-73-left-join-is-faster-than-in",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\n\\nSELECT DISTINCT A.product_id, B.product_name\\nFROM Sales A LEFT JOIN Product B ON A.product_id = B.product_id LEFT JOIN (SELECT DISTINCT product_id FROM Sales WHERE sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\') C ON A.product_id = C.product_id\\nWHERE C.product_id is null\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\n\\nSELECT DISTINCT A.product_id, B.product_name\\nFROM Sales A LEFT JOIN Product B ON A.product_id = B.product_id LEFT JOIN (SELECT DISTINCT product_id FROM Sales WHERE sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\') C ON A.product_id = C.product_id\\nWHERE C.product_id is null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2598662,
                "title": "simple-solution",
                "content": "```\\nSELECT\\n    DISTINCT p.product_id, p.product_name\\nFROM\\n    Product p INNER JOIN Sales s ON p.product_id = s.product_id\\nWHERE\\n    sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' AND p.product_id NOT IN (\\n        SELECT\\n            p.product_id\\n        FROM\\n            Product p INNER JOIN Sales s ON p.product_id = s.product_id \\n        WHERE\\n            sale_date < \\'2019-01-01\\' or sale_date > \\'2019-03-31\\'\\n    )\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nSELECT\\n    DISTINCT p.product_id, p.product_name\\nFROM\\n    Product p INNER JOIN Sales s ON p.product_id = s.product_id\\nWHERE\\n    sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' AND p.product_id NOT IN (\\n        SELECT\\n            p.product_id\\n        FROM\\n            Product p INNER JOIN Sales s ON p.product_id = s.product_id \\n        WHERE\\n            sale_date < \\'2019-01-01\\' or sale_date > \\'2019-03-31\\'\\n    )\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2571262,
                "title": "simple-solution-without-joins",
                "content": "select product_id ,product_name\\n    from product \\n    where product_id not in (select product_id from sales where  sale_date                                  not between \\'2019-01-01\\' AND \\'2019-03-31\\' ) and product_id in (select product_id from sales)\\n",
                "solutionTags": [],
                "code": "select product_id ,product_name\\n    from product \\n    where product_id not in (select product_id from sales where  sale_date                                  not between \\'2019-01-01\\' AND \\'2019-03-31\\' ) and product_id in (select product_id from sales)\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2456314,
                "title": "faster-than-93-61-mysql-easy-solution",
                "content": "```\\nSELECT product_id, product_name\\nFROM Product\\nWHERE product_id IN (\\n    SELECT product_id FROM Sales\\n    GROUP BY product_id\\n    HAVING MIN(sale_date) >= \\'2019-01-01\\' AND MAX(sale_date) <= \\'2019-03-31\\');",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT product_id, product_name\\nFROM Product\\nWHERE product_id IN (\\n    SELECT product_id FROM Sales\\n    GROUP BY product_id\\n    HAVING MIN(sale_date) >= \\'2019-01-01\\' AND MAX(sale_date) <= \\'2019-03-31\\');",
                "codeTag": "Unknown"
            },
            {
                "id": 2406532,
                "title": "easy-to-understand-mysql-solution-using-a-subquery",
                "content": "```\\nSELECT product_id, product_name FROM product\\n\\nWHERE product_id IN \\n\\n\\t(SELECT DISTINCT product_id FROM sales\\n\\n     GROUP BY product_id \\n\\n     HAVING MIN(sale_date)>= \\'2019-01-01\\' \\n            AND  MAX(sale_date) <= \\'2019-03-31\\')\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT product_id, product_name FROM product\\n\\nWHERE product_id IN \\n\\n\\t(SELECT DISTINCT product_id FROM sales\\n\\n     GROUP BY product_id \\n\\n     HAVING MIN(sale_date)>= \\'2019-01-01\\' \\n            AND  MAX(sale_date) <= \\'2019-03-31\\')\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2288137,
                "title": "mysql-2-solutions",
                "content": "```\\nselect p.product_id, p.product_name\\nfrom Product p\\nleft join Sales s\\non p.product_id = s.product_id\\ngroup by p.product_id\\nhaving sum(s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\') = count(s.sale_date) \\n\\nOR\\n\\nselect p.product_id, p.product_name\\nfrom Product p\\ninner join Sales s on p.product_id = s.product_id\\ngroup by s.product_id\\nhaving min(sale_date) >= \\'2019-01-01\\'\\nand max(sale_date) <= \\'2019-03-31\\';\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect p.product_id, p.product_name\\nfrom Product p\\nleft join Sales s\\non p.product_id = s.product_id\\ngroup by p.product_id\\nhaving sum(s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\') = count(s.sale_date) \\n\\nOR\\n\\nselect p.product_id, p.product_name\\nfrom Product p\\ninner join Sales s on p.product_id = s.product_id\\ngroup by s.product_id\\nhaving min(sale_date) >= \\'2019-01-01\\'\\nand max(sale_date) <= \\'2019-03-31\\';\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2132902,
                "title": "simple-having-solution",
                "content": "select product_id, product_name\\nfrom Product\\nwhere product_id in \\n(select product_id\\nfrom Sales\\ngroup by product_id\\nhaving max(sale_date) <= \\'2019-03-31\\' and min(sale_date) >= \\'2019-01-01\\')",
                "solutionTags": [],
                "code": "select product_id, product_name\\nfrom Product\\nwhere product_id in \\n(select product_id\\nfrom Sales\\ngroup by product_id\\nhaving max(sale_date) <= \\'2019-03-31\\' and min(sale_date) >= \\'2019-01-01\\')",
                "codeTag": "Unknown"
            },
            {
                "id": 2011803,
                "title": "multiple-ways-of-solving-in-mysql",
                "content": "**Approach 1(With CTE)**\\n\\n```\\nWITH sell_history AS (\\n    SELECT\\n        s.product_id,\\n        SUM(CASE WHEN sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) sold_outside,\\n        SUM(CASE WHEN sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) sold_inside\\n    FROM sales s \\n    GROUP BY s.product_id\\n)\\n\\nSELECT\\n    s.product_id,\\n    p.product_name\\nFROM sell_history s \\nLEFT JOIN product p ON p.product_id = s.product_id\\nWHERE s.sold_outside = 0 \\nAND s.sold_inside > 0;\\n```\\n\\n**Approach 2(Using subquery with JOIN & GROUP BY)**\\n\\n```\\nSELECT\\n    s.product_id,\\n    p.product_name\\nFROM sales s \\nLEFT JOIN product p ON p.product_id = s.product_id\\nGROUP BY s.product_id\\nHAVING s.product_id NOT IN (\\n    SELECT product_id FROM sales WHERE sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\n);\\n```\\n\\n**Approach 3(Using subquery with no JOIN)**\\n\\n```\\nSELECT\\n    product_id,\\n    product_name\\nFROM product\\nWHERE product_id NOT IN (\\n    SELECT product_id FROM sales WHERE sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\n)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nWITH sell_history AS (\\n    SELECT\\n        s.product_id,\\n        SUM(CASE WHEN sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) sold_outside,\\n        SUM(CASE WHEN sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) sold_inside\\n    FROM sales s \\n    GROUP BY s.product_id\\n)\\n\\nSELECT\\n    s.product_id,\\n    p.product_name\\nFROM sell_history s \\nLEFT JOIN product p ON p.product_id = s.product_id\\nWHERE s.sold_outside = 0 \\nAND s.sold_inside > 0;\\n```\n```\\nSELECT\\n    s.product_id,\\n    p.product_name\\nFROM sales s \\nLEFT JOIN product p ON p.product_id = s.product_id\\nGROUP BY s.product_id\\nHAVING s.product_id NOT IN (\\n    SELECT product_id FROM sales WHERE sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\n);\\n```\n```\\nSELECT\\n    product_id,\\n    product_name\\nFROM product\\nWHERE product_id NOT IN (\\n    SELECT product_id FROM sales WHERE sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\n)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1717963,
                "title": "mysql-very-simple-solution",
                "content": "```\\n# Write your MySQL query statement below\\nselect p.product_id, p.product_name\\nfrom product p\\njoin sales s\\non p.product_id=s.product_id\\ngroup by s.product_id\\nhaving min(s.sale_date)>=\\'2019-01-01\\' and max(s.sale_date)<=\\'2019-03-31\\'\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nselect p.product_id, p.product_name\\nfrom product p\\njoin sales s\\non p.product_id=s.product_id\\ngroup by s.product_id\\nhaving min(s.sale_date)>=\\'2019-01-01\\' and max(s.sale_date)<=\\'2019-03-31\\'\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1044546,
                "title": "mysql",
                "content": "```\\nSELECT Product.product_id,product_name\\nFROM Product\\nINNER JOIN Sales USING(product_id)\\nGROUP BY Product.product_id\\nHAVING SUM(CASE WHEN\\n           sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 0\\n           ELSE 1\\n           END)=0;",
                "solutionTags": [],
                "code": "```\\nSELECT Product.product_id,product_name\\nFROM Product\\nINNER JOIN Sales USING(product_id)\\nGROUP BY Product.product_id\\nHAVING SUM(CASE WHEN\\n           sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 0\\n           ELSE 1\\n           END)=0;",
                "codeTag": "Unknown"
            },
            {
                "id": 959078,
                "title": "easy-mysql-solution",
                "content": "```\\nSELECT sales.product_id, product_name\\nFROM product\\n    JOIN sales ON product.product_id = sales.product_id\\nGROUP BY product_id\\nHAVING SUM(sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\') = COUNT(sale_date)\\n```\\n",
                "solutionTags": [],
                "code": "```\\nSELECT sales.product_id, product_name\\nFROM product\\n    JOIN sales ON product.product_id = sales.product_id\\nGROUP BY product_id\\nHAVING SUM(sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\') = COUNT(sale_date)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 703365,
                "title": "can-someone-please-tell-me-what-s-wrong-with-this-code",
                "content": "```\\nselect p.product_id,p.product_name from Product p join Sales s on p.product_id=s.product_id \\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\';\\n```\\n\\n\\n",
                "solutionTags": [],
                "code": "```\\nselect p.product_id,p.product_name from Product p join Sales s on p.product_id=s.product_id \\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\';\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 371244,
                "title": "beats-80",
                "content": "```\\nselect temp.product_id, Product.product_name\\nfrom (select product_id, \\n       sum(case when sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' then 0 else 1 end) as val\\nfrom Sales\\ngroup by product_id\\nhaving val = 0) temp\\njoin Product\\non Product.product_id = temp.product_id\\n```",
                "solutionTags": [],
                "code": "```\\nselect temp.product_id, Product.product_name\\nfrom (select product_id, \\n       sum(case when sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' then 0 else 1 end) as val\\nfrom Sales\\ngroup by product_id\\nhaving val = 0) temp\\njoin Product\\non Product.product_id = temp.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 358559,
                "title": "simple-not-in-solution",
                "content": "select product_id,product_name from Product where product_id not in(select product_id from Sales where sale_date < \\'2019-01-01\\' or sale_date>\\'2019-03-31\\')",
                "solutionTags": [],
                "code": "select product_id,product_name from Product where product_id not in(select product_id from Sales where sale_date < \\'2019-01-01\\' or sale_date>\\'2019-03-31\\')",
                "codeTag": "Unknown"
            },
            {
                "id": 3952868,
                "title": "easy-pandas-sollution-beats-99",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe problem seems to involve analyzing sales data and filtering it based on specific criteria. We are given two DataFrames: one containing product information and another containing sales data. The goal appears to be to filter the sales data to include only records that fall within a certain date range (January 1, 2019, to March 31, 2019) and then merge this filtered data with the product information to get a final DataFrame.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. First, we need to organize the sales data so we can work with it more easily. To do this, we group the sales data by each product (using \\'product_id\\') and find the earliest (\\'min\\') and latest (\\'max\\') sale dates for each product.\\n2. Next, we need to filter the sales data to include only the records where the sale date falls between January 1, 2019, and March 31, 2019. This step ensures we\\'re only looking at sales within our target date range.\\n3. Now, we have a list of products that were sold during the specific time frame. We want to know the names of these products too, not just their IDs. To do this, we merge (combine) the filtered sales data with the product information. We match them using the \\'product_id\\', and we keep only the \\'product_id\\' and \\'product_name\\' for our final result.\\n4. Return the resulting DataFrame as the answer.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nOverall time complexity is O(n).\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef sales_analysis(product: pd.DataFrame, sales: pd.DataFrame) -> pd.DataFrame:\\n    # Group the \\'sales\\' DataFrame by \\'product_id\\' and calculate the minimum and maximum sale dates for each product\\n    sales = sales.groupby(\\'product_id\\')[\\'sale_date\\'].agg([\\'min\\', \\'max\\']).reset_index()\\n    \\n    # Filter the sales data to include only records with sale dates between January 1, 2019, and March 31, 2019\\n    sales = sales[(sales[\\'min\\'] >= \\'2019-01-01\\') & (sales[\\'max\\'] <= \\'2019-03-31\\')]\\n    \\n    # Merge the filtered sales data with the \\'product\\' DataFrame based on \\'product_id\\', keeping only \\'product_id\\' and \\'product_name\\' columns\\n    result = pd.merge(sales, product, on=\\'product_id\\', how=\\'inner\\')[[\\'product_id\\', \\'product_name\\']]\\n    \\n    # Return the resulting DataFrame\\n    return result\\n\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef sales_analysis(product: pd.DataFrame, sales: pd.DataFrame) -> pd.DataFrame:\\n    # Group the \\'sales\\' DataFrame by \\'product_id\\' and calculate the minimum and maximum sale dates for each product\\n    sales = sales.groupby(\\'product_id\\')[\\'sale_date\\'].agg([\\'min\\', \\'max\\']).reset_index()\\n    \\n    # Filter the sales data to include only records with sale dates between January 1, 2019, and March 31, 2019\\n    sales = sales[(sales[\\'min\\'] >= \\'2019-01-01\\') & (sales[\\'max\\'] <= \\'2019-03-31\\')]\\n    \\n    # Merge the filtered sales data with the \\'product\\' DataFrame based on \\'product_id\\', keeping only \\'product_id\\' and \\'product_name\\' columns\\n    result = pd.merge(sales, product, on=\\'product_id\\', how=\\'inner\\')[[\\'product_id\\', \\'product_name\\']]\\n    \\n    # Return the resulting DataFrame\\n    return result\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3416857,
                "title": "mysql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect p.product_id,p.product_name from Product p,Sales s where p.product_id=s.product_id group by s.product_id having min(s.sale_date)>=\\'2019-01-01\\' and max(s.sale_date)<=\\'2019-03-31\\';\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect p.product_id,p.product_name from Product p,Sales s where p.product_id=s.product_id group by s.product_id having min(s.sale_date)>=\\'2019-01-01\\' and max(s.sale_date)<=\\'2019-03-31\\';\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3254250,
                "title": "solution-with-not-exists-sql-server",
                "content": "# Intuition\\r\\n<!-- Describe your first thoughts on how to solve this problem. -->\\r\\n\\r\\n# Approach\\r\\n<!-- Describe your approach to solving the problem. -->\\r\\n\\r\\n# Complexity\\r\\n- Time complexity:\\r\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\r\\n\\r\\n- Space complexity:\\r\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\r\\n\\r\\n# Code\\r\\n```\\r\\n/* Write your T-SQL query statement below */\\r\\n\\r\\n-- WITH CTE AS (SELECT\\r\\n--     P.product_id,\\r\\n--     P.product_name\\r\\n-- FROM\\r\\n--     Product P\\r\\n-- INNER JOIN\\r\\n--     Sales S ON P.product_id = S.product_id\\r\\n-- AND\\r\\n--     S.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\r\\n-- )\\r\\n-- SELECT DISTINCT\\r\\n--     *\\r\\n-- FROM\\r\\n--     CTE C\\r\\n-- WHERE\\r\\n--      NOT EXISTS (\\r\\n\\r\\n--         SELECT 1\\r\\n--         FROM\\r\\n--             (\\r\\n--                     SELECT\\r\\n--                         P.product_id,\\r\\n--                         P.product_name\\r\\n--                     FROM\\r\\n--                         Product P\\r\\n--                     INNER JOIN\\r\\n--                         Sales S ON P.product_id = S.product_id\\r\\n--                     AND\\r\\n--                         S.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\r\\n--             )sub\\r\\n--          WHERE\\r\\n--             C.product_id = sub.product_id\\r\\n\\r\\n-- )\\r\\n\\r\\n\\r\\nSELECT\\r\\nDISTINCT\\r\\n    P.product_id,\\r\\n\\r\\n    P.product_name\\r\\n\\r\\nFROM\\r\\n\\r\\n    Product P\\r\\n\\r\\nINNER JOIN\\r\\n\\r\\n    Sales S ON P.product_id = S.product_id\\r\\n\\r\\nAND\\r\\n\\r\\n    S.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\r\\nWHERE\\r\\n    NOT EXISTS\\r\\n        (\\r\\n\\r\\n            SELECT\\r\\n                1\\r\\n            FROM\\r\\n                Sales SS\\r\\n            WHERE\\r\\n                SS.product_id = S.product_id\\r\\n            AND\\r\\n                SS.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\r\\n        )\\r\\n\\r\\n\\r\\n\\r\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\r\\n/* Write your T-SQL query statement below */\\r\\n\\r\\n-- WITH CTE AS (SELECT\\r\\n--     P.product_id,\\r\\n--     P.product_name\\r\\n-- FROM\\r\\n--     Product P\\r\\n-- INNER JOIN\\r\\n--     Sales S ON P.product_id = S.product_id\\r\\n-- AND\\r\\n--     S.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\r\\n-- )\\r\\n-- SELECT DISTINCT\\r\\n--     *\\r\\n-- FROM\\r\\n--     CTE C\\r\\n-- WHERE\\r\\n--      NOT EXISTS (\\r\\n\\r\\n--         SELECT 1\\r\\n--         FROM\\r\\n--             (\\r\\n--                     SELECT\\r\\n--                         P.product_id,\\r\\n--                         P.product_name\\r\\n--                     FROM\\r\\n--                         Product P\\r\\n--                     INNER JOIN\\r\\n--                         Sales S ON P.product_id = S.product_id\\r\\n--                     AND\\r\\n--                         S.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\r\\n--             )sub\\r\\n--          WHERE\\r\\n--             C.product_id = sub.product_id\\r\\n\\r\\n-- )\\r\\n\\r\\n\\r\\nSELECT\\r\\nDISTINCT\\r\\n    P.product_id,\\r\\n\\r\\n    P.product_name\\r\\n\\r\\nFROM\\r\\n\\r\\n    Product P\\r\\n\\r\\nINNER JOIN\\r\\n\\r\\n    Sales S ON P.product_id = S.product_id\\r\\n\\r\\nAND\\r\\n\\r\\n    S.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\r\\nWHERE\\r\\n    NOT EXISTS\\r\\n        (\\r\\n\\r\\n            SELECT\\r\\n                1\\r\\n            FROM\\r\\n                Sales SS\\r\\n            WHERE\\r\\n                SS.product_id = S.product_id\\r\\n            AND\\r\\n                SS.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\r\\n        )\\r\\n\\r\\n\\r\\n\\r\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3208631,
                "title": "solution-with-except",
                "content": "\\n\\n\\n**select product_id, product_name from product where product_id in (\\n    select product_id from sales \\n    where sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\n    except \\n    select product_id from sales \\n    where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\'\\n)**\\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "\\n\\n\\n**select product_id, product_name from product where product_id in (\\n    select product_id from sales \\n    where sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\n    except \\n    select product_id from sales \\n    where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\'\\n)**\\n\\n\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2906856,
                "title": "mysql-beats-100-only-with-one-select-inner-join-easy-to-understand-best-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n100%\\n\\n- Space complexity:\\n100%\\n\\n# Code\\n```\\nselect p.product_id, p.product_name from Product as p inner join Sales as s on \\np.product_id=s.product_id group by p.product_id \\nhaving min(sale_date)>=\\'2019-01-01\\' and max(sale_date)<=\\'2019-03-31\\'\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect p.product_id, p.product_name from Product as p inner join Sales as s on \\np.product_id=s.product_id group by p.product_id \\nhaving min(sale_date)>=\\'2019-01-01\\' and max(sale_date)<=\\'2019-03-31\\'\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2563330,
                "title": "mysql-somple-solution-w-distinct",
                "content": "That\\'s all:\\n```\\nSELECT DISTINCT s.product_id, p.product_name\\nFROM Product p\\nLEFT JOIN Sales s ON p.product_id = s.product_id\\nWHERE\\n    sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\n    AND s.product_id NOT IN (\\n        SELECT product_id\\n        FROM sales\\n        WHERE sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\n    );\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT DISTINCT s.product_id, p.product_name\\nFROM Product p\\nLEFT JOIN Sales s ON p.product_id = s.product_id\\nWHERE\\n    sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\n    AND s.product_id NOT IN (\\n        SELECT product_id\\n        FROM sales\\n        WHERE sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\n    );\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2546563,
                "title": "simple-solution",
                "content": "```sql\\nSELECT Sales.product_id, Product.product_name\\nFROM Sales\\nLEFT JOIN Product\\nUSING(product_id)\\nGROUP BY product_id\\nHAVING MIN(Sales.sale_date) >= \\'2019-01-01\\'\\nAND MAX(Sales.sale_date) <= \\'2019-03-31\\'\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```sql\\nSELECT Sales.product_id, Product.product_name\\nFROM Sales\\nLEFT JOIN Product\\nUSING(product_id)\\nGROUP BY product_id\\nHAVING MIN(Sales.sale_date) >= \\'2019-01-01\\'\\nAND MAX(Sales.sale_date) <= \\'2019-03-31\\'\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2522386,
                "title": "easy-solution-sql",
                "content": "~~~\\nselect product.product_id,product_name from product\\njoin sales on product.product_id=sales.product_id\\ngroup by product.product_id\\nhaving max(sale_date) <= \"2019-03-31\" and min(sale_date)>= \"2019-01-01\"\\n~~~\\n",
                "solutionTags": [],
                "code": "~~~\\nselect product.product_id,product_name from product\\njoin sales on product.product_id=sales.product_id\\ngroup by product.product_id\\nhaving max(sale_date) <= \"2019-03-31\" and min(sale_date)>= \"2019-01-01\"\\n~~~\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2492955,
                "title": "mysql-4-solutions-very-easy-if-having-join",
                "content": "### \\uD83D\\uDE4B\\uD83C\\uDFFB\\u200D\\u2640\\uFE0F Hello, here are my solutions to the problem.\\n### Please upvote to motivate me post future solutions. HAPPY CODING \\u2764\\uFE0F\\n##### Any suggestions and improvements are always welcome.\\n##### Solution 1: If, join, long \\uD83E\\uDD26\\uD83C\\uDFFB\\u200D\\u2640\\uFE0F\\n##### \\u2705 Runtime: 1642 ms, faster than 32.63% of MySQL .\\n\\n```\\nwith q as (\\nselect \\n    product_id,\\n    sum(if(sale_date between \\'2019-01-01\\' and \\'2019-03-31\\', 1, 0)) sold_in_period,\\n    sum(if(sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\', 1, 0)) sold_not_in_period\\nfrom sales\\ngroup by 1\\nhaving sold_in_period > 0 and sold_not_in_period = 0\\n)\\nselect\\n    p.product_id,\\n    product_name\\nfrom product p join q\\non p.product_id = q.product_id\\n```\\n##### Solution 2: Same, but withoun join with from twice and work faster \\uD83E\\uDD37\\uD83C\\uDFFB\\u200D\\u2640\\uFE0F\\n##### \\u2705 Runtime: 1016 ms, faster than 88.22% of MySQL.\\n\\n```\\n# Write your MySQL query statement below\\nwith q as (\\nselect \\n    product_id,\\n    sum(if(sale_date between \\'2019-01-01\\' and \\'2019-03-31\\', 1, 0)) sold_in_period,\\n    sum(if(sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\', 1, 0)) sold_not_in_period\\nfrom sales\\ngroup by 1\\nhaving sold_in_period > 0 and sold_not_in_period = 0\\n)\\nselect\\n    p.product_id,\\n    product_name\\nfrom product p, q\\nwhere p.product_id = q.product_id\\n```\\n##### Solution 3: Same, with in close \\uD83E\\uDD37\\uD83C\\uDFFB\\u200D\\u2640\\uFE0F\\n##### \\u2705 Runtime: 1157 ms, faster than 67.46% of MySQL.\\n\\n```\\nwith q as (\\nselect \\n    product_id,\\n    sum(if(sale_date between \\'2019-01-01\\' and \\'2019-03-31\\', 1, 0)) sold_in_period,\\n    sum(if(sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\', 1, 0)) sold_not_in_period\\nfrom sales\\ngroup by 1\\nhaving sold_in_period > 0 and sold_not_in_period = 0\\n)\\nselect\\n    product_id,\\n    product_name\\nfrom product\\nwhere product_id in (select product_id from q)\\n```\\n##### Solution 4: MIn and max, with join, work fast, but you can do it with where close or in close (work longer)  \\uD83E\\uDD37\\uD83C\\uDFFB\\u200D\\u2640\\uFE0F\\n##### I really don\\'t  like joins, but work faster\\n##### \\u2705 Runtime: 996 ms, faster than 91.25% of MySQL.\\n```\\nwith q as (\\nselect product_id\\nfrom sales\\ngroup by 1\\nhaving min(sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'\\n)\\nselect\\n    p.product_id,\\n    product_name\\nfrom product p join q\\non p.product_id = q.product_id\\n```\\n\\n##### If you like the solutions, please upvote \\uD83D\\uDD3C\\n##### For any questions, or discussions, comment below. \\uD83D\\uDC47\\uFE0F",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nwith q as (\\nselect \\n    product_id,\\n    sum(if(sale_date between \\'2019-01-01\\' and \\'2019-03-31\\', 1, 0)) sold_in_period,\\n    sum(if(sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\', 1, 0)) sold_not_in_period\\nfrom sales\\ngroup by 1\\nhaving sold_in_period > 0 and sold_not_in_period = 0\\n)\\nselect\\n    p.product_id,\\n    product_name\\nfrom product p join q\\non p.product_id = q.product_id\\n```\n```\\n# Write your MySQL query statement below\\nwith q as (\\nselect \\n    product_id,\\n    sum(if(sale_date between \\'2019-01-01\\' and \\'2019-03-31\\', 1, 0)) sold_in_period,\\n    sum(if(sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\', 1, 0)) sold_not_in_period\\nfrom sales\\ngroup by 1\\nhaving sold_in_period > 0 and sold_not_in_period = 0\\n)\\nselect\\n    p.product_id,\\n    product_name\\nfrom product p, q\\nwhere p.product_id = q.product_id\\n```\n```\\nwith q as (\\nselect \\n    product_id,\\n    sum(if(sale_date between \\'2019-01-01\\' and \\'2019-03-31\\', 1, 0)) sold_in_period,\\n    sum(if(sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\', 1, 0)) sold_not_in_period\\nfrom sales\\ngroup by 1\\nhaving sold_in_period > 0 and sold_not_in_period = 0\\n)\\nselect\\n    product_id,\\n    product_name\\nfrom product\\nwhere product_id in (select product_id from q)\\n```\n```\\nwith q as (\\nselect product_id\\nfrom sales\\ngroup by 1\\nhaving min(sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'\\n)\\nselect\\n    p.product_id,\\n    product_name\\nfrom product p join q\\non p.product_id = q.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2386450,
                "title": "simple-easy-to-understand-solution",
                "content": "\\'\\'\\'\\n\\n\\n\\tselect s.product_id, p.product_name\\n\\tfrom sales s, product p\\n\\twhere s.product_id = p.product_id\\n\\tgroup by s.product_id, p.product_name\\n\\thaving min(s.sale_date) >= \\'2019-01-01\\' \\n\\t\\tand max(s.sale_date) <= \\'2019-03-31\\'\\n\\'\\'\\'",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "\\'\\'\\'\\n\\n\\n\\tselect s.product_id, p.product_name\\n\\tfrom sales s, product p\\n\\twhere s.product_id = p.product_id\\n\\tgroup by s.product_id, p.product_name\\n\\thaving min(s.sale_date) >= \\'2019-01-01\\' \\n\\t\\tand max(s.sale_date) <= \\'2019-03-31\\'\\n\\'\\'\\'",
                "codeTag": "Unknown"
            },
            {
                "id": 2373175,
                "title": "mysql-solution",
                "content": "select distinct p1.product_id, p1.product_name\\nfrom Product p1, Sales s1\\nwhere p1.product_id not in(\\n    select product_id \\n    from Sales\\n    where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\')\\n    and p1.product_id = s1.product_id",
                "solutionTags": [],
                "code": "select distinct p1.product_id, p1.product_name\\nfrom Product p1, Sales s1\\nwhere p1.product_id not in(\\n    select product_id \\n    from Sales\\n    where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\')\\n    and p1.product_id = s1.product_id",
                "codeTag": "Unknown"
            },
            {
                "id": 2340435,
                "title": "explained-mysql-joins-having-group-by",
                "content": "```\\n\\n# So this command will give wrong answer because as there are duplicate\\n#in the sales table therefore if you see in example acc. to this query ,  G4 will\\n#also be printed because it has been bought in the spring  but if you see it is \\n#also been bought after the spring therefore we  have to use group by so that \\n#we get onlt those products that have only been bought in the spring\\n\\n# SELECT s.product_id, p.product_name \\n#FROM Product AS p INNER JOIN Sales AS s\\n#ON  s.product_id=p.product_id \\n#WHERE s.sale_date >= \\'2019-01-01\\' AND  s.sale_date <=\\'2019-03-31\\';\\n\\n\\n#*************************************************************************************\\n\\n\\n# therefore we will group on the basis of product ID and we will then check\\n#what are the minimum and maximum sale date for each product and \\n#thereofore if that product sale is in spring\\n\\nSELECT p.product_id, p.product_name \\nFROM Product AS p INNER JOIN Sales AS s \\nON  s.product_id=p.product_id \\nGROUP BY s.product_id \\nHAVING MIN(s.sale_date)>=\\'2019-01-01\\' AND  MAX(s.sale_date) <=\\'2019-03-31\\';\\n```",
                "solutionTags": [],
                "code": "```\\n\\n# So this command will give wrong answer because as there are duplicate\\n#in the sales table therefore if you see in example acc. to this query ,  G4 will\\n#also be printed because it has been bought in the spring  but if you see it is \\n#also been bought after the spring therefore we  have to use group by so that \\n#we get onlt those products that have only been bought in the spring\\n\\n# SELECT s.product_id, p.product_name \\n#FROM Product AS p INNER JOIN Sales AS s\\n#ON  s.product_id=p.product_id \\n#WHERE s.sale_date >= \\'2019-01-01\\' AND  s.sale_date <=\\'2019-03-31\\';\\n\\n\\n#*************************************************************************************\\n\\n\\n# therefore we will group on the basis of product ID and we will then check\\n#what are the minimum and maximum sale date for each product and \\n#thereofore if that product sale is in spring\\n\\nSELECT p.product_id, p.product_name \\nFROM Product AS p INNER JOIN Sales AS s \\nON  s.product_id=p.product_id \\nGROUP BY s.product_id \\nHAVING MIN(s.sale_date)>=\\'2019-01-01\\' AND  MAX(s.sale_date) <=\\'2019-03-31\\';\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2306205,
                "title": "sql-for-dummies",
                "content": "\\tselect p.product_id, product_name \\n\\tfrom product p, sales s\\n\\twhere p.product_id = s.product_id\\n\\tgroup by p.product_id\\n\\thaving min(s.sale_date)>= \\'2019-01-01\\' and max(s.sale_date) <= \\'2019-03-31\\';",
                "solutionTags": [],
                "code": "\\tselect p.product_id, product_name \\n\\tfrom product p, sales s\\n\\twhere p.product_id = s.product_id\\n\\tgroup by p.product_id\\n\\thaving min(s.sale_date)>= \\'2019-01-01\\' and max(s.sale_date) <= \\'2019-03-31\\';",
                "codeTag": "Unknown"
            },
            {
                "id": 2277182,
                "title": "faster-than-95-27-of-oracle-online-submissions-for-sales-analysis-iii",
                "content": "```\\nselect p.product_id\\n        ,p.product_name\\nfrom product p\\njoin (select s.product_id from sales s\\n      group by s.product_id\\n      having min(s.sale_date) >= \\'2019-01-01\\'\\n      and max(s.sale_date) <= \\'2019-03-31\\') s1\\non\\np.product_id = s1.product_id\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nselect p.product_id\\n        ,p.product_name\\nfrom product p\\njoin (select s.product_id from sales s\\n      group by s.product_id\\n      having min(s.sale_date) >= \\'2019-01-01\\'\\n      and max(s.sale_date) <= \\'2019-03-31\\') s1\\non\\np.product_id = s1.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2249483,
                "title": "mysql-easy-solution-with-explanation-in-comment",
                "content": "```\\nSELECT\\n    product_id, product_name\\nFROM\\n    Product\\nWHERE\\n\\t# First, find out the product that were sold in 2019 Q1\\n    product_id IN (\\n        SELECT product_id\\n        FROM Sales\\n        WHERE\\n            sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\n    )\\n    AND \\n\\t# Then, we have to eliminate the products which were sold besides 2019 Q1 \\n\\t# That is, we only pick those products which had never been sold \"except 2019 Q1\" (not between 2019/1/1 and 2019/3/31)\\n    product_id NOT IN (\\n        SELECT product_id\\n        FROM Sales\\n        WHERE\\n            sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\n    )\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT\\n    product_id, product_name\\nFROM\\n    Product\\nWHERE\\n\\t# First, find out the product that were sold in 2019 Q1\\n    product_id IN (\\n        SELECT product_id\\n        FROM Sales\\n        WHERE\\n            sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\n    )\\n    AND \\n\\t# Then, we have to eliminate the products which were sold besides 2019 Q1 \\n\\t# That is, we only pick those products which had never been sold \"except 2019 Q1\" (not between 2019/1/1 and 2019/3/31)\\n    product_id NOT IN (\\n        SELECT product_id\\n        FROM Sales\\n        WHERE\\n            sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\n    )\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2245933,
                "title": "mysql-solution-using-min-only",
                "content": "```\\nselect s.product_id, p.product_name\\nfrom Sales s\\njoin Product p using (product_id)\\ngroup by s.product_id having min(s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\') = 1\\n```",
                "solutionTags": [],
                "code": "```\\nselect s.product_id, p.product_name\\nfrom Sales s\\njoin Product p using (product_id)\\ngroup by s.product_id having min(s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\') = 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2226877,
                "title": "mysql-simple-approach",
                "content": "```\\nSELECT s.product_id, product_name\\nFROM Sales s LEFT JOIN Product p\\nON s.product_id = p.product_id\\nGROUP BY s.product_id\\nHAVING MIN(sale_date) >= CAST(\\'2019-01-01\\' AS DATE) AND\\nMAX(sale_date) <= CAST(\\'2019-03-31\\' AS DATE);",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT s.product_id, product_name\\nFROM Sales s LEFT JOIN Product p\\nON s.product_id = p.product_id\\nGROUP BY s.product_id\\nHAVING MIN(sale_date) >= CAST(\\'2019-01-01\\' AS DATE) AND\\nMAX(sale_date) <= CAST(\\'2019-03-31\\' AS DATE);",
                "codeTag": "Unknown"
            },
            {
                "id": 2203936,
                "title": "my-simple-sql-solution",
                "content": "\\n```\\n\\nSELECT\\n    p.product_id, p.product_name \\nFROM \\n    Product p\\nJOIN \\n    Sales s on p.product_id = s.product_id\\nGROUP BY \\n    s.product_id\\nHAVING \\n    min(s.sale_date) >= \\'2019-01-01\\' \\n    and \\n    max(s.sale_date) <= \\'2019-03-31\\' \\n; \\n```\\n\\nPlease Upvote if you like the solution.\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n\\nSELECT\\n    p.product_id, p.product_name \\nFROM \\n    Product p\\nJOIN \\n    Sales s on p.product_id = s.product_id\\nGROUP BY \\n    s.product_id\\nHAVING \\n    min(s.sale_date) >= \\'2019-01-01\\' \\n    and \\n    max(s.sale_date) <= \\'2019-03-31\\' \\n; \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2192529,
                "title": "mysql-solution-faster-than-97-93",
                "content": "```\\nSELECT \\nDISTINCT # return just once if more than 1 is sold in requested time\\nProduct.product_id, Product.product_name\\nFROM\\nProduct\\nINNER JOIN\\nSales\\nON Product.product_id = Sales.product_id\\nWHERE\\nSales.sale_date BETWEEN CAST(\\'2019-01-01\\' AS DATE) AND CAST(\\'2019-03-31\\' AS DATE) # sale has to be in requested period\\nAND\\nProduct.product_id NOT IN # sale MUST NOT BE before OR after requested dates\\n(SELECT Product.product_id\\nFROM\\nProduct\\nINNER JOIN\\nSales\\nON Product.product_id = Sales.product_id\\nWHERE\\nSales.sale_date < CAST(\\'2019-01-01\\' AS DATE) \\nOR \\nSales.sale_date > CAST(\\'2019-03-31\\' AS DATE))\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT \\nDISTINCT # return just once if more than 1 is sold in requested time\\nProduct.product_id, Product.product_name\\nFROM\\nProduct\\nINNER JOIN\\nSales\\nON Product.product_id = Sales.product_id\\nWHERE\\nSales.sale_date BETWEEN CAST(\\'2019-01-01\\' AS DATE) AND CAST(\\'2019-03-31\\' AS DATE) # sale has to be in requested period\\nAND\\nProduct.product_id NOT IN # sale MUST NOT BE before OR after requested dates\\n(SELECT Product.product_id\\nFROM\\nProduct\\nINNER JOIN\\nSales\\nON Product.product_id = Sales.product_id\\nWHERE\\nSales.sale_date < CAST(\\'2019-01-01\\' AS DATE) \\nOR \\nSales.sale_date > CAST(\\'2019-03-31\\' AS DATE))\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2157668,
                "title": "mysql",
                "content": "SELECT product_id,product_name FROM Product\\nLEFT JOIN Sales USING(product_id)\\nGROUP BY product_id\\nHAVING MIN(sale_date) >= \\'2019-01-01\\'AND MAX(sale_date) < \\'2019-04-01\\'\\n    \\n",
                "solutionTags": [],
                "code": "SELECT product_id,product_name FROM Product\\nLEFT JOIN Sales USING(product_id)\\nGROUP BY product_id\\nHAVING MIN(sale_date) >= \\'2019-01-01\\'AND MAX(sale_date) < \\'2019-04-01\\'\\n    \\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2120559,
                "title": "two-solution-inspired-by-other-solutions-and-as-beginner",
                "content": "\\n\\n```\\n# 1St Method\\nSELECT product_id, product_name \\nFROM Product\\nWHERE product_id NOT IN\\n(\\nSELECT product_id FROM Sales WHERE sale_date < \"2019-01-01\" OR sale_date > \"2019-03-31\"\\n);\\n\\n\\n\\n# 2nd Method using Group by\\nSELECT Sales.product_id, Product.product_name \\nFROM Sales \\nJOIN Product \\nON Product.product_id = Sales.product_id\\nGROUP BY product_id \\nHAVING MIN(sale_date) >= \"2019-01-01\" AND MAX(sale_date) <= \"2019-03-31\";\\n```",
                "solutionTags": [],
                "code": "```\\n# 1St Method\\nSELECT product_id, product_name \\nFROM Product\\nWHERE product_id NOT IN\\n(\\nSELECT product_id FROM Sales WHERE sale_date < \"2019-01-01\" OR sale_date > \"2019-03-31\"\\n);\\n\\n\\n\\n# 2nd Method using Group by\\nSELECT Sales.product_id, Product.product_name \\nFROM Sales \\nJOIN Product \\nON Product.product_id = Sales.product_id\\nGROUP BY product_id \\nHAVING MIN(sale_date) >= \"2019-01-01\" AND MAX(sale_date) <= \"2019-03-31\";\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2005173,
                "title": "sub-query-and-between",
                "content": "select product_id,product_name from product\\nwhere product_id not in\\n(select product_id from sales\\nwhere sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\');",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "select product_id,product_name from product\\nwhere product_id not in\\n(select product_id from sales\\nwhere sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\');",
                "codeTag": "Unknown"
            },
            {
                "id": 1993614,
                "title": "simple-mysql-solution",
                "content": "```\\nSELECT Product.product_id, Product.product_name\\nFROM Product\\nWHERE product_id NOT IN (SELECT product_id FROM Sales WHERE sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\');\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT Product.product_id, Product.product_name\\nFROM Product\\nWHERE product_id NOT IN (SELECT product_id FROM Sales WHERE sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\');\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1970379,
                "title": "mysql-solution",
                "content": "```\\nselect p.product_id, p.product_name from Product p \\n where p.product_id not in(\\n\\tselect s.product_id from Sales s \\n\\twhere sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\'\\n);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect p.product_id, p.product_name from Product p \\n where p.product_id not in(\\n\\tselect s.product_id from Sales s \\n\\twhere sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\'\\n);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1969189,
                "title": "mysql-easy-implemenation",
                "content": "```\\nSELECT Product.product_id, Product.product_name\\nFROM Product JOIN Sales\\nON Product.product_id = Sales.product_id\\nGROUP BY product_id \\nHAVING MIN(sale_date) >= \"2019-01-01\" AND MAX(sale_date) <=\"2019-03-31\"\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT Product.product_id, Product.product_name\\nFROM Product JOIN Sales\\nON Product.product_id = Sales.product_id\\nGROUP BY product_id \\nHAVING MIN(sale_date) >= \"2019-01-01\" AND MAX(sale_date) <=\"2019-03-31\"\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1942711,
                "title": "oracle-solution-using-between",
                "content": "select product_id,product_name from Product where product_id not in \\n(select product_id from Sales where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\');",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "select product_id,product_name from Product where product_id not in \\n(select product_id from Sales where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\');",
                "codeTag": "Unknown"
            },
            {
                "id": 1939350,
                "title": "mysql-solution-database",
                "content": "Output :\\nView table have all the products that were sold only in spring 2019\\n(between 2019-01-01 and 2019-03-31)\\n\\n### *METHOD -1*\\n\\n##### USING JOIN \\n\\n-->First find those product_id where date is between 2019-01-01 and 2019-03-31 and sold only in spring 2019\\n    * Now group by the prduct_id\\n    * Then filter those data only where sale date is in spring 2019 \\n                     \\n\\t\\t\\t\\t\\t group by product_id\\n                     having min(sale_date)>=\\'2019-01-01\\' and max(sale_date)<=\\'2019-03-31\\'\\n        \\n * Now in select we will include the product_id and sale_date(if you wouldn\\'t include \\n       sale_date here it would give you error while using with having caluse)\\n         \\n                  select product_id , sale_date\\n                   from Sales\\n    \\n    Code to find the product_id require in the view table:\\n    \\n        select product_id , sale_date\\n        from Sales\\n        group by product_id\\n        having min(sale_date)>=\\'2019-01-01\\' and max(sale_date)<=\\'2019-03-31\\'\\n\\n  -> By joining the product table with above table inorder to obtaine the view table:\\n  \\n          select temp.product_id , Product.product_name \\n          from \\n          (select product_id , sale_date\\n           from Sales\\n           group by product_id\\n           having min(sale_date)>=\\'2019-01-01\\' and max(sale_date)<=\\'2019-03-31\\') temp\\n           left join Product\\n           on temp.product_id = Product.product_id;\\n         \\n -> we have use left join here beacuse in this case temp table was our primary table.\\n#####     *METHOD  2*\\n    \\n**WithOut Join** \\nfirstly find all those product id which are not sold in spring 2019 and also those who are sold more than 1 times\\n                           \\n\\t\\t\\t\\t\\t\\t   select product_id\\n                           from Sales\\n                          where sale_date not between  \\'2019-01-01\\' and \\'2019-03-31\\'\\nThen print the product_id , product_name  of those how doesn\\'t have product_id in above table \\n                   \\n\\t\\t\\t\\t   select product_id , product_name \\n                   from Product \\n                   where product_id not in(select product_id\\n                                                            from Sales\\n                                                             where sale_date not between  \\'2019-01-01\\' and \\'2019-03-31\\');",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "Output :\\nView table have all the products that were sold only in spring 2019\\n(between 2019-01-01 and 2019-03-31)\\n\\n### *METHOD -1*\\n\\n##### USING JOIN \\n\\n-->First find those product_id where date is between 2019-01-01 and 2019-03-31 and sold only in spring 2019\\n    * Now group by the prduct_id\\n    * Then filter those data only where sale date is in spring 2019 \\n                     \\n\\t\\t\\t\\t\\t group by product_id\\n                     having min(sale_date)>=\\'2019-01-01\\' and max(sale_date)<=\\'2019-03-31\\'\\n        \\n * Now in select we will include the product_id and sale_date(if you wouldn\\'t include \\n       sale_date here it would give you error while using with having caluse)\\n         \\n                  select product_id , sale_date\\n                   from Sales\\n    \\n    Code to find the product_id require in the view table:\\n    \\n        select product_id , sale_date\\n        from Sales\\n        group by product_id\\n        having min(sale_date)>=\\'2019-01-01\\' and max(sale_date)<=\\'2019-03-31\\'\\n\\n  -> By joining the product table with above table inorder to obtaine the view table:\\n  \\n          select temp.product_id , Product.product_name \\n          from \\n          (select product_id , sale_date\\n           from Sales\\n           group by product_id\\n           having min(sale_date)>=\\'2019-01-01\\' and max(sale_date)<=\\'2019-03-31\\') temp\\n           left join Product\\n           on temp.product_id = Product.product_id;\\n         \\n -> we have use left join here beacuse in this case temp table was our primary table.\\n#####     *METHOD  2*\\n    \\n**WithOut Join** \\nfirstly find all those product id which are not sold in spring 2019 and also those who are sold more than 1 times\\n                           \\n\\t\\t\\t\\t\\t\\t   select product_id\\n                           from Sales\\n                          where sale_date not between  \\'2019-01-01\\' and \\'2019-03-31\\'\\nThen print the product_id , product_name  of those how doesn\\'t have product_id in above table \\n                   \\n\\t\\t\\t\\t   select product_id , product_name \\n                   from Product \\n                   where product_id not in(select product_id\\n                                                            from Sales\\n                                                             where sale_date not between  \\'2019-01-01\\' and \\'2019-03-31\\');",
                "codeTag": "Unknown"
            },
            {
                "id": 1912348,
                "title": "mysql-without-min-max-subquery",
                "content": "```\\n\\nselect\\ns.product_id, product_name\\nfrom Sales s\\njoin product p\\non (p.product_id=s.product_id)\\ngroup by product_id, product_name\\nhaving sum(case when sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' then 0 else 1 end)=0 \\n\\n\\n```",
                "solutionTags": [],
                "code": "```\\n\\nselect\\ns.product_id, product_name\\nfrom Sales s\\njoin product p\\non (p.product_id=s.product_id)\\ngroup by product_id, product_name\\nhaving sum(case when sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' then 0 else 1 end)=0 \\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1898936,
                "title": "groupby-having",
                "content": "-- get min, max product sales date by using group by product_id\\n-- filter products that min sales_date >=2019-1-1 and max sale_date <=2019-3-31\\n-- return selected products\\n\\n```\\nselect p.product_id, p.product_name\\nfrom Sales s\\njoin Product p\\n\\ton s.product_id=p.product_id\\ngroup by s.product_id\\nhaving min(s.sale_date)>=\\'2019-1-1\\' and max(s.sale_date)<=\\'2019-3-31\\';\\n```",
                "solutionTags": [],
                "code": "```\\nselect p.product_id, p.product_name\\nfrom Sales s\\njoin Product p\\n\\ton s.product_id=p.product_id\\ngroup by s.product_id\\nhaving min(s.sale_date)>=\\'2019-1-1\\' and max(s.sale_date)<=\\'2019-3-31\\';\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1894997,
                "title": "simple-mysql-solution-2-different-solutions",
                "content": "```\\nselect product.product_id, product_name\\nfrom product join sales on product.product_id = sales.product_id\\ngroup by product_id, product_name\\nhaving SUM(sale_date BETWEEN \"2019-01-01\" AND \"2019-03-31\") > 0\\nand SUM(sale_date > \"2019-03-31\" or sale_date < \"2019-01-01\") = 0\\n\\nselect product.product_id, product_name\\nfrom product join sales on product.product_id = sales.product_id\\ngroup by product_id having min(sale_date) >= \"2019-01-01\" and max(sale_date) <= \"2019-03-31\"\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect product.product_id, product_name\\nfrom product join sales on product.product_id = sales.product_id\\ngroup by product_id, product_name\\nhaving SUM(sale_date BETWEEN \"2019-01-01\" AND \"2019-03-31\") > 0\\nand SUM(sale_date > \"2019-03-31\" or sale_date < \"2019-01-01\") = 0\\n\\nselect product.product_id, product_name\\nfrom product join sales on product.product_id = sales.product_id\\ngroup by product_id having min(sale_date) >= \"2019-01-01\" and max(sale_date) <= \"2019-03-31\"\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1884795,
                "title": "simple-mysql",
                "content": "```\\n# Write your MySQL query statement below\\nselect p.product_id, p.product_name from product p inner join  sales s on s.product_id = p.product_id group by s.product_id having min(s.sale_date) >= \"2019-01-01\" and max(s.sale_date) <= \"2019-03-31\";\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect p.product_id, p.product_name from product p inner join  sales s on s.product_id = p.product_id group by s.product_id having min(s.sale_date) >= \"2019-01-01\" and max(s.sale_date) <= \"2019-03-31\";\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1559756,
                "title": "mysql-simple-solution",
                "content": "SELECT product_id, product_name \\nFROM Product \\nWHERE product_id NOT IN (\\n    SELECT product_id \\n\\tFROM Sales \\n    WHERE sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\n)",
                "solutionTags": [],
                "code": "SELECT product_id, product_name \\nFROM Product \\nWHERE product_id NOT IN (\\n    SELECT product_id \\n\\tFROM Sales \\n    WHERE sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\n)",
                "codeTag": "Unknown"
            },
            {
                "id": 1397615,
                "title": "mysql-using-group-by",
                "content": "```\\n\\nselect p.product_id, p.product_name\\nfrom product p, sales s\\nwhere p.product_id= s.product_id\\ngroup by p.product_id\\nhaving sum(case when  sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' then 1 else 0 end) >0\\nand sum( case when  sale_date < \\'2019-01-01\\'  then 1 else 0 end) = 0\\nand sum( case when  sale_date > \\'2019-03-31\\' then 1 else 0 end) =0\\n```",
                "solutionTags": [],
                "code": "```\\n\\nselect p.product_id, p.product_name\\nfrom product p, sales s\\nwhere p.product_id= s.product_id\\ngroup by p.product_id\\nhaving sum(case when  sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' then 1 else 0 end) >0\\nand sum( case when  sale_date < \\'2019-01-01\\'  then 1 else 0 end) = 0\\nand sum( case when  sale_date > \\'2019-03-31\\' then 1 else 0 end) =0\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1203987,
                "title": "group-by-min-max",
                "content": "check min(), max() in 2019 spring.\\n```\\nselect p.product_id, p.product_name\\nfrom\\n(\\n  select product_id, max(sale_date) lo, min(sale_date) hi\\n  from sales\\n  group by product_id\\n  having max(sale_date) <= \\'2019-03-31\\' and min(sale_date) >= \\'2019-01-01\\'\\n) t, product p\\nwhere t.product_id = p.product_id;\\n```",
                "solutionTags": [],
                "code": "```\\nselect p.product_id, p.product_name\\nfrom\\n(\\n  select product_id, max(sale_date) lo, min(sale_date) hi\\n  from sales\\n  group by product_id\\n  having max(sale_date) <= \\'2019-03-31\\' and min(sale_date) >= \\'2019-01-01\\'\\n) t, product p\\nwhere t.product_id = p.product_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 987529,
                "title": "mysql-faster-than-95",
                "content": "select p.product_id, p.product_name \\nfrom product p\\nleft join sales s on\\np.product_id = s.product_id\\ngroup by p.product_id\\nhaving min(s.sale_date)>=\\'2019-01-01\\' and max(s.sale_date)<=\\'2019-03-31\\'\\n",
                "solutionTags": [],
                "code": "select p.product_id, p.product_name \\nfrom product p\\nleft join sales s on\\np.product_id = s.product_id\\ngroup by p.product_id\\nhaving min(s.sale_date)>=\\'2019-01-01\\' and max(s.sale_date)<=\\'2019-03-31\\'\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 923751,
                "title": "simple-join-having-min-max",
                "content": "```\\n# Write your MySQL query statement below\\nselect \\n    distinct p.product_id,\\n    p.product_name\\nfrom product p\\nleft join sales s\\non p.product_id = s.product_id\\ngroup by p.product_id\\nhaving max(s.sale_date) between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand min(s.sale_date) between \\'2019-01-01\\' and \\'2019-03-31\\'\\n \\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nselect \\n    distinct p.product_id,\\n    p.product_name\\nfrom product p\\nleft join sales s\\non p.product_id = s.product_id\\ngroup by p.product_id\\nhaving max(s.sale_date) between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand min(s.sale_date) between \\'2019-01-01\\' and \\'2019-03-31\\'\\n \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 919456,
                "title": "simple-subquery-beats-98-6",
                "content": "SELECT product_id, product_name\\nFROM Product\\nWHERE product_id NOT IN\\n(\\nSELECT product_id\\nFROM Sales\\nWHERE sale_date NOT BETWEEN \"2019-01-01\" AND \"2019-03-31\")\\n\\nFilter out the records which fall in the given interval. Display the records which are not those records basically.",
                "solutionTags": [],
                "code": "SELECT product_id, product_name\\nFROM Product\\nWHERE product_id NOT IN\\n(\\nSELECT product_id\\nFROM Sales\\nWHERE sale_date NOT BETWEEN \"2019-01-01\" AND \"2019-03-31\")\\n\\nFilter out the records which fall in the given interval. Display the records which are not those records basically.",
                "codeTag": "Unknown"
            },
            {
                "id": 480223,
                "title": "multiple-oracle-solutions",
                "content": "```\\n/* Write your PL/SQL query statement below */\\nselect p.product_id, p.product_name \\nfrom Product p INNER JOIN Sales s on p.product_id = s.product_id\\ngroup by p.product_id, p.product_name\\nhaving MIN(s.sale_date) >= to_date(\\'2019-01-01\\',\\'YYYY-MM-DD\\') and \\nMAX(s.sale_date) <= to_date(\\'2019-03-31\\',\\'YYYY-MM-DD\\')\\n```\\n\\n```\\n/* Write your PL/SQL query statement below */\\nselect a.product_id,a.product_name\\nfrom product a inner join sales b on a.product_id = b.product_id\\nwhere b.sale_date between to_date(\\'2019-01-01\\',\\'YYYY-MM-DD\\') and to_date(\\'2019-03-31\\',\\'YYYY-MM-DD\\')\\nMINUS\\nselect a.product_id,a.product_name\\nfrom product a inner join sales b on a.product_id = b.product_id\\nwhere NOT (b.sale_date between to_date(\\'2019-01-01\\',\\'YYYY-MM-DD\\') and to_date(\\'2019-03-31\\',\\'YYYY-MM-DD\\'))\\n```",
                "solutionTags": [],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nselect p.product_id, p.product_name \\nfrom Product p INNER JOIN Sales s on p.product_id = s.product_id\\ngroup by p.product_id, p.product_name\\nhaving MIN(s.sale_date) >= to_date(\\'2019-01-01\\',\\'YYYY-MM-DD\\') and \\nMAX(s.sale_date) <= to_date(\\'2019-03-31\\',\\'YYYY-MM-DD\\')\\n```\n```\\n/* Write your PL/SQL query statement below */\\nselect a.product_id,a.product_name\\nfrom product a inner join sales b on a.product_id = b.product_id\\nwhere b.sale_date between to_date(\\'2019-01-01\\',\\'YYYY-MM-DD\\') and to_date(\\'2019-03-31\\',\\'YYYY-MM-DD\\')\\nMINUS\\nselect a.product_id,a.product_name\\nfrom product a inner join sales b on a.product_id = b.product_id\\nwhere NOT (b.sale_date between to_date(\\'2019-01-01\\',\\'YYYY-MM-DD\\') and to_date(\\'2019-03-31\\',\\'YYYY-MM-DD\\'))\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 356735,
                "title": "simply-one-line-solution",
                "content": "select s.product_id, p.product_name \\nfrom Sales s left join Product p \\non s.product_id=p.product_id \\ngroup by product_id \\nhaving min(sale_date)>=\\'2019-01-01\\' and max(sale_date) <=\\'2019-03-31\\'",
                "solutionTags": [],
                "code": "select s.product_id, p.product_name \\nfrom Sales s left join Product p \\non s.product_id=p.product_id \\ngroup by product_id \\nhaving min(sale_date)>=\\'2019-01-01\\' and max(sale_date) <=\\'2019-03-31\\'",
                "codeTag": "Unknown"
            },
            {
                "id": 311599,
                "title": "mysql-using-not-in",
                "content": "```\\nselect distinct product_id, product_name\\nfrom sales join product using(product_id)\\nwhere sale_date between cast(\\'2019-01-01\\' as DATE) and cast(\\'2019-03-31\\' as DATE)\\nand product_id not in (select distinct product_id\\n                        from sales\\n                        where sale_date < cast(\\'2019-01-01\\' as DATE) or sale_date > cast(\\'2019-03-31\\' as DATE))\\n```",
                "solutionTags": [],
                "code": "```\\nselect distinct product_id, product_name\\nfrom sales join product using(product_id)\\nwhere sale_date between cast(\\'2019-01-01\\' as DATE) and cast(\\'2019-03-31\\' as DATE)\\nand product_id not in (select distinct product_id\\n                        from sales\\n                        where sale_date < cast(\\'2019-01-01\\' as DATE) or sale_date > cast(\\'2019-03-31\\' as DATE))\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4065755,
                "title": "sales-analysis-iii-pandas-easy",
                "content": "[see the successfully Accepted Submission](https://leetcode.com/submissions/detail/1053850673/)\\n```\\nimport pandas as pd\\n\\ndef sales_analysis(product: pd.DataFrame, sales: pd.DataFrame) -> pd.DataFrame:\\n    # First, we convert \\'sale_date\\' column to datetime if it\\'s not already in datetime format\\n    sales[\\'sale_date\\'] = pd.to_datetime(sales[\\'sale_date\\'])\\n\\n    # Secondly, the \\'product\\' with \\'sales\\' based on \\'product_id\\' are merged\\n    merged_data = pd.merge(product, sales, on=\\'product_id\\', how=\\'inner\\')\\n\\n    # Then, we apply group by for \\'product_id\\' and apply aggregation functions\\n    result = merged_data.groupby(\\'product_id\\').agg(\\n        min_sale_date=(\\'sale_date\\', \\'min\\'),\\n        max_sale_date=(\\'sale_date\\', \\'max\\'),\\n        product_name=(\\'product_name\\', \\'first\\')  # Include \\'product_name\\' in the aggregation\\n    )\\n    \\n    # In the next step, the dates after January (including January) are filtered\\n    after_january = (result[\\'min_sale_date\\'] >= \\'2019-01-01\\')\\n    \\n    # At the same time, the dates before March (including March) are also filtered\\n    before_march = (result[\\'max_sale_date\\'] <= \\'2019-03-31\\')\\n\\n    # After that, the results based on date criteria are filtered. The criteria is reporting the products that were only sold in the first quarter of 2019. That is, between 2019-01-01 and 2019-03-31 inclusive.\\n    filtered_df = result[after_january & before_march]\\n\\n    # Next, the index to make \\'product_id\\' a regular column is reset.\\n    new_df = filtered_df.reset_index(inplace=False)\\n\\n    # Finally, we select the desired columns \\'product_id\\' and \\'product_name\\'\\n    quarter_products  = new_df[[\\'product_id\\', \\'product_name\\']]\\n\\n    return quarter_products\\n    \\n```\\n\\n**SQL**\\n\\n[see the successfully Accepted Submission](https://leetcode.com/submissions/detail/1061692619/)\\n\\n```\\nSELECT _sales.product_id, product_name\\nFROM Sales _sales \\n\\nLEFT JOIN Product _product\\nON _sales.product_id = _product.product_id\\n\\nGROUP BY _sales.product_id\\nHAVING MIN(sale_date) >= CAST(\\'2019-01-01\\' AS DATE) \\nAND\\nMAX(sale_date) <= CAST(\\'2019-03-31\\' AS DATE);\\n```\\n\\n```\\n-- Select the product_id and product_name columns\\nSELECT _sales.product_id, product_name\\n-- From the Sales table, alias it as \"_sales\"\\nFROM Sales _sales \\n\\n-- Perform a LEFT JOIN with the Product table, alias it as \"_product\"\\nLEFT JOIN Product _product\\n-- Match records where the product_id in Sales matches the product_id in Product\\nON _sales.product_id = _product.product_id\\n\\n-- Group the result set by the product_id from Sales\\nGROUP BY _sales.product_id\\n\\n-- Filter the grouped results based on certain conditions\\n-- Keep groups where the minimum sale_date is greater than or equal to \\'2019-01-01\\'\\n-- AND where the maximum sale_date is less than or equal to \\'2019-03-31\\'\\nHAVING MIN(sale_date) >= CAST(\\'2019-01-01\\' AS DATE) \\nAND\\nMAX(sale_date) <= CAST(\\'2019-03-31\\' AS DATE);\\n```\\n\\n![image](https://assets.leetcode.com/users/images/a99c5d9e-1502-4422-8df2-cd1b28a1c36a_1695148155.081576.jpeg)\\n",
                "solutionTags": [],
                "code": "```\\nimport pandas as pd\\n\\ndef sales_analysis(product: pd.DataFrame, sales: pd.DataFrame) -> pd.DataFrame:\\n    # First, we convert \\'sale_date\\' column to datetime if it\\'s not already in datetime format\\n    sales[\\'sale_date\\'] = pd.to_datetime(sales[\\'sale_date\\'])\\n\\n    # Secondly, the \\'product\\' with \\'sales\\' based on \\'product_id\\' are merged\\n    merged_data = pd.merge(product, sales, on=\\'product_id\\', how=\\'inner\\')\\n\\n    # Then, we apply group by for \\'product_id\\' and apply aggregation functions\\n    result = merged_data.groupby(\\'product_id\\').agg(\\n        min_sale_date=(\\'sale_date\\', \\'min\\'),\\n        max_sale_date=(\\'sale_date\\', \\'max\\'),\\n        product_name=(\\'product_name\\', \\'first\\')  # Include \\'product_name\\' in the aggregation\\n    )\\n    \\n    # In the next step, the dates after January (including January) are filtered\\n    after_january = (result[\\'min_sale_date\\'] >= \\'2019-01-01\\')\\n    \\n    # At the same time, the dates before March (including March) are also filtered\\n    before_march = (result[\\'max_sale_date\\'] <= \\'2019-03-31\\')\\n\\n    # After that, the results based on date criteria are filtered. The criteria is reporting the products that were only sold in the first quarter of 2019. That is, between 2019-01-01 and 2019-03-31 inclusive.\\n    filtered_df = result[after_january & before_march]\\n\\n    # Next, the index to make \\'product_id\\' a regular column is reset.\\n    new_df = filtered_df.reset_index(inplace=False)\\n\\n    # Finally, we select the desired columns \\'product_id\\' and \\'product_name\\'\\n    quarter_products  = new_df[[\\'product_id\\', \\'product_name\\']]\\n\\n    return quarter_products\\n    \\n```\n```\\nSELECT _sales.product_id, product_name\\nFROM Sales _sales \\n\\nLEFT JOIN Product _product\\nON _sales.product_id = _product.product_id\\n\\nGROUP BY _sales.product_id\\nHAVING MIN(sale_date) >= CAST(\\'2019-01-01\\' AS DATE) \\nAND\\nMAX(sale_date) <= CAST(\\'2019-03-31\\' AS DATE);\\n```\n```\\n-- Select the product_id and product_name columns\\nSELECT _sales.product_id, product_name\\n-- From the Sales table, alias it as \"_sales\"\\nFROM Sales _sales \\n\\n-- Perform a LEFT JOIN with the Product table, alias it as \"_product\"\\nLEFT JOIN Product _product\\n-- Match records where the product_id in Sales matches the product_id in Product\\nON _sales.product_id = _product.product_id\\n\\n-- Group the result set by the product_id from Sales\\nGROUP BY _sales.product_id\\n\\n-- Filter the grouped results based on certain conditions\\n-- Keep groups where the minimum sale_date is greater than or equal to \\'2019-01-01\\'\\n-- AND where the maximum sale_date is less than or equal to \\'2019-03-31\\'\\nHAVING MIN(sale_date) >= CAST(\\'2019-01-01\\' AS DATE) \\nAND\\nMAX(sale_date) <= CAST(\\'2019-03-31\\' AS DATE);\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4022014,
                "title": "fast-and-efficient-solution-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe problem requires finding the unique product IDs and names from the first quarter sales that are not present in the rest of the sales data.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nTo solve the problem of finding unique product IDs and names from the first quarter sales that are not present in the rest of the sales data, the following approach is taken:\\n- Filter the `sales` DataFrame to obtain the sales data for the first quarter, defined as the period from `\"2019-01-01\"` to `\"2019-03-31\"`. This is done by creating a boolean mask using the `>=` and `<=` operators on the `\"sale_date\"` column.\\n- Drop any duplicate rows based on the `product_id` in the first quarter sales using the `drop_duplicates` method. This ensures that only unique product IDs are considered.\\n- Separate the rest of the sales data by filtering the `sales` DataFrame based on the condition that the `\"sale_date\"` is either before the start of the first quarter or after the end of the first quarter. This is done using the `|` (`OR`) operator.\\n- Use the `isin` method to create **a boolean mask** that identifies the product IDs from the first quarter sales that are also present in the rest of the sales data.\\n- Invert the boolean mask using the `~` operator to select the product IDs from the first quarter sales that are not present in the rest of the sales data.\\n- Merge the filtered first quarter sales with the `product` DataFrame based on the `product_id` using the `merge` method. This ensures that the resulting DataFrame contains the corresponding product names.\\n- Return the resulting DataFrame with only the `product_id` and `product_name` columns.\\n\\nThis approach efficiently filters and merges the data to obtain the desired result. By dropping duplicate rows and using the `isin` method, we ensure that only unique product IDs and names are returned. The use of boolean masks allows for easy identification of product IDs that are present or not present in the rest of the sales data.\\n# Complexity\\n#### Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n + m)$$ The time complexity of this approach is dependent on the size of the `sales` DataFrame. The filtering and merging operations have a time complexity of $$O(n)$$, where $$n$$ is the number of rows in the DataFrame. The use of `isin` has a time complexity of $$O(m)$$, where $$m$$ is the number of unique product IDs in the first quarter sales (`first_q_sales`). \\n#### Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nIn the given approach, the space complexity can be analyzed as follows:\\n- The `sales` DataFrame for the first quarter is filtered and stored in memory. The size of this DataFrame depends on the number of rows and columns in the original data, but for the purpose of space complexity analysis, we can assume it takes $$O(n)$$ space, where $$n$$ is the number of records in the first quarter sales data.\\n- The duplicate rows are dropped from the first quarter `sales` DataFrame, resulting in a new DataFrame with unique product IDs. The space required for this operation is proportional to the number of unique product IDs, which we can assume to be $$O(m)$$, where $$m$$ is the number of unique product IDs in the first quarter sales data.\\n- Another DataFrame is created to store the rest of the sales data that is not in the first quarter. The space required for this DataFrame is again proportional to the number of records in the rest of the sales data, which we can assume to be $$O(k)$$, where $$k$$ is the number of records in the rest of the sales data.\\n- A boolean mask is created to identify the product IDs from the first quarter sales that are also present in the rest of the sales data. This boolean mask requires additional space to store the boolean values for each product ID. Since the size of the mask is equal to the number of unique product IDs in the first quarter sales data, we can assume its space complexity to be $$O(m)$$.\\n- The inverted boolean mask is used to select the product IDs from the first quarter sales that are not present in the rest of the sales data. This selection operation does not require any additional memory as it operates on the existing boolean mask.\\n- Finally, the resulting DataFrame with the selected product IDs and names is returned. The space required for this DataFrame is again proportional to the number of unique product IDs in the first quarter sales data, which we can assume to be $$O(m)$$.\\n\\n**TL;DR** \\nOverall, the space complexity of the approach can be approximated as $$O(n + m + k)$$, where $$n$$ is the number of records in the first quarter sales data, $$m$$ is the number of unique product IDs in the first quarter sales data, and $$k$$ is the number of records in the rest of the sales data.\\n# Running & Memory\\n![Screenshot 2023-09-09 at 15.34.45.png](https://assets.leetcode.com/users/images/acc345a4-fde5-4d4a-81c9-0a580ec5360c_1694256298.5338826.png)\\n\\n# Code\\n```\\nimport pandas as pd\\n\\n\\ndef sales_analysis(product: pd.DataFrame, sales: pd.DataFrame) -> pd.DataFrame:\\n    start, finish = \"2019-01-01\", \"2019-03-31\"\\n    first_q_sales = sales[\\n        (sales[\"sale_date\"] >= start) & (sales[\"sale_date\"] <= finish)\\n    ][[\"product_id\"]].drop_duplicates()\\n    other_sales = sales[(sales[\"sale_date\"] < start) | (sales[\"sale_date\"] > finish)][\\n        [\"product_id\"]\\n    ]\\n    mask = first_q_sales[\"product_id\"].isin(other_sales[\"product_id\"])\\n    return first_q_sales[~mask].merge(product, on=\"product_id\")[\\n        [\"product_id\", \"product_name\"]\\n    ]\\n\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\n\\ndef sales_analysis(product: pd.DataFrame, sales: pd.DataFrame) -> pd.DataFrame:\\n    start, finish = \"2019-01-01\", \"2019-03-31\"\\n    first_q_sales = sales[\\n        (sales[\"sale_date\"] >= start) & (sales[\"sale_date\"] <= finish)\\n    ][[\"product_id\"]].drop_duplicates()\\n    other_sales = sales[(sales[\"sale_date\"] < start) | (sales[\"sale_date\"] > finish)][\\n        [\"product_id\"]\\n    ]\\n    mask = first_q_sales[\"product_id\"].isin(other_sales[\"product_id\"])\\n    return first_q_sales[~mask].merge(product, on=\"product_id\")[\\n        [\"product_id\", \"product_name\"]\\n    ]\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3958999,
                "title": "easy-to-understand-beginner-friendly",
                "content": "# EASY TO UNDERSTAND, BEGINNER FRIENDLY \\uD83D\\uDD25\\n<!-- x your first thoughts on how to solve this problem. -->\\n easy to understand \\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect p.product_id, p.product_name \\nfrom Product p\\nWHERE p.product_id IN (SELECT s.product_id FROM Sales s \\n          WHERE sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\') \\nAND p.product_id NOT IN (SELECT s.product_id FROM Sales s \\n          WHERE sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\')\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect p.product_id, p.product_name \\nfrom Product p\\nWHERE p.product_id IN (SELECT s.product_id FROM Sales s \\n          WHERE sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\') \\nAND p.product_id NOT IN (SELECT s.product_id FROM Sales s \\n          WHERE sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\')\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3958993,
                "title": "where-not-between-easy-solution",
                "content": "# Intuition\\nFast and clearly to understanf for beginners\\n\\n\\n# Code\\n```\\nSELECT product_id, product_name\\nFROM product\\nWHERE product_id IN (\\n    SELECT product_id\\n    FROM sales\\n    WHERE sale_date  BETWEEN \\'2019-01-01\\' AND  \\'2019-03-31\\'\\n) AND product_id NOT IN (\\n    SELECT product_id\\n    FROM sales\\n    WHERE sale_date NOT  BETWEEN \\'2019-01-01\\' AND  \\'2019-03-31\\'\\n);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT product_id, product_name\\nFROM product\\nWHERE product_id IN (\\n    SELECT product_id\\n    FROM sales\\n    WHERE sale_date  BETWEEN \\'2019-01-01\\' AND  \\'2019-03-31\\'\\n) AND product_id NOT IN (\\n    SELECT product_id\\n    FROM sales\\n    WHERE sale_date NOT  BETWEEN \\'2019-01-01\\' AND  \\'2019-03-31\\'\\n);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3930752,
                "title": "pandas-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef sales_analysis(product: pd.DataFrame, sales: pd.DataFrame) -> pd.DataFrame:\\n  data = product.merge(sales, how =\\'left\\', on = \\'product_id\\').query(\"sale_date < \\'2019-01-01\\' or sale_date>\\'2019-03-31\\' or sale_date.isnull()\")\\n  data_1 = product[[\\'product_id\\',\\'product_name\\']].query(\"~product_id.isin(@data[\\'product_id\\'])\")\\n  return data_1\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef sales_analysis(product: pd.DataFrame, sales: pd.DataFrame) -> pd.DataFrame:\\n  data = product.merge(sales, how =\\'left\\', on = \\'product_id\\').query(\"sale_date < \\'2019-01-01\\' or sale_date>\\'2019-03-31\\' or sale_date.isnull()\")\\n  data_1 = product[[\\'product_id\\',\\'product_name\\']].query(\"~product_id.isin(@data[\\'product_id\\'])\")\\n  return data_1\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3589300,
                "title": "fast-and-simple-query-by-mysql",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nselect s.product_id, p.product_name from Product p\\njoin Sales s on p.product_id = s.product_id\\ngroup by product_id\\nhaving max(s.sale_date) <= \\'2019-03-31\\' and min(s.sale_date) >= \\'2019-01-01\\'\\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect s.product_id, p.product_name from Product p\\njoin Sales s on p.product_id = s.product_id\\ngroup by product_id\\nhaving max(s.sale_date) <= \\'2019-03-31\\' and min(s.sale_date) >= \\'2019-01-01\\'\\n\\n\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3552745,
                "title": "using-inner-join",
                "content": "# Code\\n```\\nSELECT S.product_id, P.product_name FROM Product P\\nINNER JOIN Sales S ON P.product_id = S.product_id\\nGROUP BY S.product_id \\nHAVING MIN(S.sale_date) >= \\'2019-01-01\\' AND MAX(S.sale_date) <= \\'2019-03-31\\';\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT S.product_id, P.product_name FROM Product P\\nINNER JOIN Sales S ON P.product_id = S.product_id\\nGROUP BY S.product_id \\nHAVING MIN(S.sale_date) >= \\'2019-01-01\\' AND MAX(S.sale_date) <= \\'2019-03-31\\';\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3436113,
                "title": "using-over-partition-clause",
                "content": "\\n\\n\\n# using sub Queries \\n```\\nselect p.product_id, p.product_name\\nfrom Product p\\nwhere (select min(s.sale_date) from Sales s where s.product_id = p.product_id) >= \\'2019-01-01\\' and\\n(select max(s.sale_date) from Sales s where s.product_id = p.product_id) <= \\'2019-03-31\\';\\n```\\n\\n# Using over() partition Clause\\n```\\nselect distinct p.product_id, p.product_name\\nfrom \\n(select *, min(sale_date) over(partition by product_id) as minD, max(sale_date) over(partition by product_id) as maxD from Sales) a join Product p on a.product_id = p.product_id\\nwhere minD >= \\'2019-01-01\\' and maxD <= \\'2019-03-31\\';\\n```\\n\\n\\n# Approach\\nThe given SQL query retrieves a list of distinct product IDs and product names for all products that were sold between January 1st, 2019 and March 31st, 2019.\\n\\nThe query first selects all columns from the \"Sales\" table and adds two additional columns using the \"min\" and \"max\" functions over the \"sale_date\" column, respectively. These functions are used to calculate the earliest and latest sale dates for each product, which are labeled as \"minD\" and \"maxD\". The \"partition by\" clause is used with the \"over\" clause to group the sales data by product ID.\\n\\nThe result of the subquery is then joined with the \"Product\" table on the common \"product_id\" column. This allows the product name to be added to the final result set.\\n\\nFinally, the \"WHERE\" clause filters the result set to only include products that have a minimum sale date of January 1st, 2019 or later and a maximum sale date of March 31st, 2019 or earlier. The \">= \\'2019-01-01\\'\" and \"<= \\'2019-03-31\\'\" conditions are used to achieve this.\\n\\nIn summary, this SQL query selects distinct product IDs and names for products that were sold between January 1st, 2019 and March 31st, 2019, and sorts them by product ID.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect p.product_id, p.product_name\\nfrom Product p\\nwhere (select min(s.sale_date) from Sales s where s.product_id = p.product_id) >= \\'2019-01-01\\' and\\n(select max(s.sale_date) from Sales s where s.product_id = p.product_id) <= \\'2019-03-31\\';\\n```\n```\\nselect distinct p.product_id, p.product_name\\nfrom \\n(select *, min(sale_date) over(partition by product_id) as minD, max(sale_date) over(partition by product_id) as maxD from Sales) a join Product p on a.product_id = p.product_id\\nwhere minD >= \\'2019-01-01\\' and maxD <= \\'2019-03-31\\';\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3101115,
                "title": "ms-sql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nSELECT DISTINCT\\n    p.product_id,\\n    p.product_name \\nFROM Sales s\\nJOIN Product p\\n    ON p.product_id = s.product_id \\nWHERE sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nAND NOT EXISTS (\\n    SELECT 1\\n    FROM Sales s\\n    WHERE s.product_id = p.product_id\\n    AND s.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\n)\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nSELECT DISTINCT\\n    p.product_id,\\n    p.product_name \\nFROM Sales s\\nJOIN Product p\\n    ON p.product_id = s.product_id \\nWHERE sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nAND NOT EXISTS (\\n    SELECT 1\\n    FROM Sales s\\n    WHERE s.product_id = p.product_id\\n    AND s.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\n)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3085299,
                "title": "mysql-min-max-having",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT p.product_id,p.product_name\\nFROM Product p\\nLEFT JOIN Sales s\\nON p.product_id=s.product_id\\nGROUP BY s.product_id\\nHAVING MIN(s.sale_date)>\\'2018-12-31\\' AND MAX(s.sale_date)<\\'2019-04-01\\'\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT p.product_id,p.product_name\\nFROM Product p\\nLEFT JOIN Sales s\\nON p.product_id=s.product_id\\nGROUP BY s.product_id\\nHAVING MIN(s.sale_date)>\\'2018-12-31\\' AND MAX(s.sale_date)<\\'2019-04-01\\'\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3050808,
                "title": "easiest-mysql-solution",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect product_id,product_name from Product\\nwhere product_id not in (select distinct product_id\\nfrom Sales\\nwhere sale_date<\\'2019-01-01\\' or sale_date>\\'2019-03-31\\') \\nand product_id in (select distinct product_id from\\nSales)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect product_id,product_name from Product\\nwhere product_id not in (select distinct product_id\\nfrom Sales\\nwhere sale_date<\\'2019-01-01\\' or sale_date>\\'2019-03-31\\') \\nand product_id in (select distinct product_id from\\nSales)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2978055,
                "title": "solution-for-1084-sales-analysis-iii",
                "content": "# Intuition\\r\\nObtain all the product id that were sold apart from requested dates.\\r\\noutput unique pid, pnames that are not in above result\\r\\n\\r\\n# Approach\\r\\nUse temp table to join both sales and pproduct table\\r\\nInner join is needed.\\r\\n\\r\\n# Complexity\\r\\n- Time complexity:\\r\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\r\\n\\r\\n- Space complexity:\\r\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\r\\n\\r\\n# Code\\r\\n```\\r\\n# Write your MySQL query statement below\\r\\n/* creating temp table*/\\r\\nWITH new_tbl AS\\r\\n\\r\\n(SELECT a.product_id AS pid,a.product_name AS pname, b.sale_date AS sd\\r\\nFROM Product AS a\\r\\nINNER JOIN Sales AS b\\r\\nON a.product_id = b.product_id)\\r\\n\\r\\n/*main query*/\\r\\nSELECT pid AS product_id,pname AS product_name\\r\\nFROM new_tbl\\r\\nWHERE pid NOT IN \\r\\n/* sub query to identify all the product id that were sold apart from requested dates.*/\\r\\n(\\r\\nSELECT pid FROM new_tbl \\r\\nWHERE sd NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\r\\n)\\r\\n\\r\\n/* use group by to obtain unique values */\\r\\nGROUP BY pid\\r\\n;\\r\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\r\\n# Write your MySQL query statement below\\r\\n/* creating temp table*/\\r\\nWITH new_tbl AS\\r\\n\\r\\n(SELECT a.product_id AS pid,a.product_name AS pname, b.sale_date AS sd\\r\\nFROM Product AS a\\r\\nINNER JOIN Sales AS b\\r\\nON a.product_id = b.product_id)\\r\\n\\r\\n/*main query*/\\r\\nSELECT pid AS product_id,pname AS product_name\\r\\nFROM new_tbl\\r\\nWHERE pid NOT IN \\r\\n/* sub query to identify all the product id that were sold apart from requested dates.*/\\r\\n(\\r\\nSELECT pid FROM new_tbl \\r\\nWHERE sd NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\r\\n)\\r\\n\\r\\n/* use group by to obtain unique values */\\r\\nGROUP BY pid\\r\\n;\\r\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2976646,
                "title": "my-sql-solution-left-join-having",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nSelect X.product_id, product_name\\nFrom(\\nSelect Product.product_id, product_name,sale_date\\nFrom Product left join Sales on Product.product_id = Sales.product_id\\nGroup by Product.product_id\\nHaving sale_date between \\'2019-01-01\\' and \\'2019-03-31\\') X\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nSelect X.product_id, product_name\\nFrom(\\nSelect Product.product_id, product_name,sale_date\\nFrom Product left join Sales on Product.product_id = Sales.product_id\\nGroup by Product.product_id\\nHaving sale_date between \\'2019-01-01\\' and \\'2019-03-31\\') X\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2703382,
                "title": "mysql-solution",
                "content": "```\\nselect s.product_id, product_name\\nfrom sales s\\nleft join product p on s.product_id= p.product_id\\ngroup by s.product_id\\nhaving min(sale_date)>= cast(\"2019-01-01\" as date) and\\n       max(sale_date)<= cast(\"2019-03-31\" as date)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect s.product_id, product_name\\nfrom sales s\\nleft join product p on s.product_id= p.product_id\\ngroup by s.product_id\\nhaving min(sale_date)>= cast(\"2019-01-01\" as date) and\\n       max(sale_date)<= cast(\"2019-03-31\" as date)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2621684,
                "title": "left-join",
                "content": "SELECT p.product_id,p.product_name FROM Product p\\nLEFT JOIN Sales s\\nON p.product_id=s.product_id\\nGROUP BY p.product_id\\nHAVING MIN(s.sale_date)>= \\'2019-01-01\\' AND MAX(s.sale_date)<=\\'2019-03-31\\';",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "SELECT p.product_id,p.product_name FROM Product p\\nLEFT JOIN Sales s\\nON p.product_id=s.product_id\\nGROUP BY p.product_id\\nHAVING MIN(s.sale_date)>= \\'2019-01-01\\' AND MAX(s.sale_date)<=\\'2019-03-31\\';",
                "codeTag": "Unknown"
            },
            {
                "id": 2621522,
                "title": "left-join-group-by-having-solution",
                "content": "```\\nSELECT p.product_id , p.product_name\\nFROM Product p\\nLEFT JOIN Sales s\\nON p.product_id = s.product_id\\nGROUP BY s.product_id\\nHAVING MIN(s.sale_date) >= \\'2019-01-01\\' AND MAX(s.sale_date) <= \\'2019-03-31\\'\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT p.product_id , p.product_name\\nFROM Product p\\nLEFT JOIN Sales s\\nON p.product_id = s.product_id\\nGROUP BY s.product_id\\nHAVING MIN(s.sale_date) >= \\'2019-01-01\\' AND MAX(s.sale_date) <= \\'2019-03-31\\'\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2596861,
                "title": "any-idea-why-this-answer-is-not-correct",
                "content": "SELECT p.product_id, p.product_name\\nFROM Product P\\nJOIN Sales S \\n     ON P.product_id = S.product_id\\n  WHERE sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\n   AND P.product_id NOT IN (SELECT S.product_id FROM Sales WHERE sale_date NOT BETWEEN\\n                        \\'2019-01-01\\' AND \\'2019-03-31\\')",
                "solutionTags": [],
                "code": "SELECT p.product_id, p.product_name\\nFROM Product P\\nJOIN Sales S \\n     ON P.product_id = S.product_id\\n  WHERE sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\n   AND P.product_id NOT IN (SELECT S.product_id FROM Sales WHERE sale_date NOT BETWEEN\\n                        \\'2019-01-01\\' AND \\'2019-03-31\\')",
                "codeTag": "Unknown"
            },
            {
                "id": 2583690,
                "title": "simplest-sql-solution",
                "content": "\\nselect p.product_id, p.product_name\\nfrom Product as p join Sales as s\\non p.product_id = s.product_id\\ngroup by p.product_id\\nhaving min(s.sale_date) >= \\'2019-01-01\\' AND max(s.sale_date) <= \\'2019-03-31\\'",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "\\nselect p.product_id, p.product_name\\nfrom Product as p join Sales as s\\non p.product_id = s.product_id\\ngroup by p.product_id\\nhaving min(s.sale_date) >= \\'2019-01-01\\' AND max(s.sale_date) <= \\'2019-03-31\\'",
                "codeTag": "Unknown"
            },
            {
                "id": 2550154,
                "title": "mysql-in-not-in-and-cte-clear-logic",
                "content": "```\\nwith \\ncte1 as (select product_id from Sales where sale_date between \"2019-01-01\" and \"2019-03-31\"), \\ncte2 as (select product_id from Sales where sale_date not between \"2019-01-01\" and \"2019-03-31\")\\n\\nselect product_id, product_name from Product \\nwhere product_id in (select product_id from cte1) and product_id not in (select product_id from cte2);\\n```",
                "solutionTags": [],
                "code": "```\\nwith \\ncte1 as (select product_id from Sales where sale_date between \"2019-01-01\" and \"2019-03-31\"), \\ncte2 as (select product_id from Sales where sale_date not between \"2019-01-01\" and \"2019-03-31\")\\n\\nselect product_id, product_name from Product \\nwhere product_id in (select product_id from cte1) and product_id not in (select product_id from cte2);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2538398,
                "title": "mysql-simple-and-clean-solution",
                "content": "**Please Upvote if it helped you !!!**\\n```\\nselect product.product_id ,product.product_name from product\\nwhere product_id not in (select product_id from sales where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\' ) \\nand\\nproduct_id in (select product_id from sales where sale_date between \\'2019-01-01\\' and \\'2019-03-31\\');\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect product.product_id ,product.product_name from product\\nwhere product_id not in (select product_id from sales where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\' ) \\nand\\nproduct_id in (select product_id from sales where sale_date between \\'2019-01-01\\' and \\'2019-03-31\\');\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2535087,
                "title": "mysql-join-not-in",
                "content": "```\\nSELECT P.product_id as product_id, P.product_name AS product_name\\nFROM Product as P\\nLEFT JOIN Sales as S\\nON P.product_id=S.product_id\\nWHERE P.product_id NOT IN (\\n    SELECT product_id as sold_product\\n    From Sales\\n    WHERE sale_date <\\'2019-01-01\\' OR sale_date >\\'2019-03-31\\'\\n    )\\nAND S.product_id IS NOT NULL\\nGROUP by P.product_id,P.product_name;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT P.product_id as product_id, P.product_name AS product_name\\nFROM Product as P\\nLEFT JOIN Sales as S\\nON P.product_id=S.product_id\\nWHERE P.product_id NOT IN (\\n    SELECT product_id as sold_product\\n    From Sales\\n    WHERE sale_date <\\'2019-01-01\\' OR sale_date >\\'2019-03-31\\'\\n    )\\nAND S.product_id IS NOT NULL\\nGROUP by P.product_id,P.product_name;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2517742,
                "title": "mysql-simple-solution",
                "content": "```\\nselect product_id, product_name from product\\nwhere product_id not in (\\n    select product_id from sales\\n    where sale_date > \\'2019-03-31\\' or  sale_date < \\'2019-01-01\\'\\n) and product_id in (select product_id from sales)\\n```",
                "solutionTags": [],
                "code": "```\\nselect product_id, product_name from product\\nwhere product_id not in (\\n    select product_id from sales\\n    where sale_date > \\'2019-03-31\\' or  sale_date < \\'2019-01-01\\'\\n) and product_id in (select product_id from sales)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2500255,
                "title": "very-simple-solution",
                "content": "```\\nwith bounds as (select S.product_id, max(S.sale_date) as upper, min(S.sale_date) as lower from Sales S group by S.product_id)\\n\\nselect \\n  P.product_id, \\n  P.product_name \\nfrom bounds inner join Product p on bounds.product_id = P.product_id \\nwhere upper <= \"2019-03-31\" and lower >= \"2019-01-01\"\\n```",
                "solutionTags": [],
                "code": "```\\nwith bounds as (select S.product_id, max(S.sale_date) as upper, min(S.sale_date) as lower from Sales S group by S.product_id)\\n\\nselect \\n  P.product_id, \\n  P.product_name \\nfrom bounds inner join Product p on bounds.product_id = P.product_id \\nwhere upper <= \"2019-03-31\" and lower >= \"2019-01-01\"\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2495182,
                "title": "easiest-subquery-solution-without-having-clause",
                "content": "```\\nselect product_id, product_name from product where product_id not in (select product_id from sales s where s.sale_date > \\'2019-03-31\\' or s.sale_date < \\'2019-01-01\\') and product_id in (select product_id from sales s);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect product_id, product_name from product where product_id not in (select product_id from sales s where s.sale_date > \\'2019-03-31\\' or s.sale_date < \\'2019-01-01\\') and product_id in (select product_id from sales s);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2492699,
                "title": "solution-easy-to-understand-98-73-fast",
                "content": "**This is most  EASIEST solution you will get**\\n```\\nSELECT a.product_id,a.product_name FROM Product a JOIN Sales b\\nON a.product_id=b.product_id\\nGROUP BY b.product_id\\nHAVING MIN(b.sale_date)>=\"2019-01-01\" AND MAX(b.sale_date)<=\"2019-03-31\" ;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT a.product_id,a.product_name FROM Product a JOIN Sales b\\nON a.product_id=b.product_id\\nGROUP BY b.product_id\\nHAVING MIN(b.sale_date)>=\"2019-01-01\" AND MAX(b.sale_date)<=\"2019-03-31\" ;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2453272,
                "title": "mysql-solution-using-group-by",
                "content": "```\\nselect p.product_id,product_name from product p\\ninner join sales s on p.product_id=s.product_id\\ngroup by product_id\\nhaving min(sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect p.product_id,product_name from product p\\ninner join sales s on p.product_id=s.product_id\\ngroup by product_id\\nhaving min(sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2442601,
                "title": "ms-sql-server-solution-using-except",
                "content": "```\\nselect product_id, product_name from product where\\nproduct_id in (\\nselect distinct product_id from sales where sale_date between\\'2019-01-01\\'\\nand \\'2019-03-31\\'\\n\\nexcept\\n\\nselect distinct product_id from sales where sale_date<\\'2019-01-01\\'\\nor sale_date>\\'2019-03-31\\')",
                "solutionTags": [],
                "code": "```\\nselect product_id, product_name from product where\\nproduct_id in (\\nselect distinct product_id from sales where sale_date between\\'2019-01-01\\'\\nand \\'2019-03-31\\'\\n\\nexcept\\n\\nselect distinct product_id from sales where sale_date<\\'2019-01-01\\'\\nor sale_date>\\'2019-03-31\\')",
                "codeTag": "Unknown"
            },
            {
                "id": 2433342,
                "title": "can-someone-explain-why-this-code-doesn-t-work",
                "content": "\"\"\"\\nSELECT DISTINCT(PRODUCT_ID),PRODUCT_NAME FROM PRODUCT \\nWHERE PRODUCT_ID  NOT IN\\n(SELECT DISTINCT(PRODUCT_ID) FROM SALES \\nWHERE SALE_DATE BETWEEN \"2019-03-31\" AND \"2019-12-31\");\\n\"\"\"",
                "solutionTags": [],
                "code": "\"\"\"\\nSELECT DISTINCT(PRODUCT_ID),PRODUCT_NAME FROM PRODUCT \\nWHERE PRODUCT_ID  NOT IN\\n(SELECT DISTINCT(PRODUCT_ID) FROM SALES \\nWHERE SALE_DATE BETWEEN \"2019-03-31\" AND \"2019-12-31\");\\n\"\"\"",
                "codeTag": "Unknown"
            },
            {
                "id": 2432520,
                "title": "mysql-simple-solution",
                "content": "select distinct product.product_id, product.product_name\\nfrom product inner join sales on product.product_id = sales.product_id\\nwhere product.product_id not in (select sales.product_id\\n                                from sales\\n                                where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\');",
                "solutionTags": [],
                "code": "select distinct product.product_id, product.product_name\\nfrom product inner join sales on product.product_id = sales.product_id\\nwhere product.product_id not in (select sales.product_id\\n                                from sales\\n                                where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\');",
                "codeTag": "Unknown"
            },
            {
                "id": 2403818,
                "title": "mysql-solution-using-min-and-max",
                "content": "select product_id , product_name\\nfrom product \\nwhere product_id in \\n(select product_id\\nfrom sales\\ngroup by product_id\\nhaving min(sale_date) between \\'2019-01-01\\' and \\'2019-03-31\\' and max(sale_date) between \\'2019-01-01\\' and \\'2019-03-31\\')",
                "solutionTags": [],
                "code": "select product_id , product_name\\nfrom product \\nwhere product_id in \\n(select product_id\\nfrom sales\\ngroup by product_id\\nhaving min(sale_date) between \\'2019-01-01\\' and \\'2019-03-31\\' and max(sale_date) between \\'2019-01-01\\' and \\'2019-03-31\\')",
                "codeTag": "Unknown"
            },
            {
                "id": 2359055,
                "title": "simple-mysql-solution-with-left-join-group-by-having",
                "content": "```\\nSELECT p.product_id, p.product_name\\nFROM Sales s\\nLEFT JOIN Product p\\nON s.product_id = p.product_id\\nGROUP BY s.product_id\\nHAVING MIN(sale_date) >= \\'2019-01-01\\' AND MAX(sale_date) <= \\'2019-03-31\\';\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT p.product_id, p.product_name\\nFROM Sales s\\nLEFT JOIN Product p\\nON s.product_id = p.product_id\\nGROUP BY s.product_id\\nHAVING MIN(sale_date) >= \\'2019-01-01\\' AND MAX(sale_date) <= \\'2019-03-31\\';\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2302837,
                "title": "simple-sql-query",
                "content": "```\\nwith temp as (select seller_id,product_id,buyer_id,max(sale_date) as mx,min(sale_date) as mn\\n              from sales\\n              group by product_id)\\n              \\nselect a.product_id,a.product_name\\nfrom product a\\ninner join temp b\\non a.product_id=b.product_id\\nwhere b.mn>=\\'2019-01-01\\' and b.mx<=\\'2019-03-31\\';\\n```",
                "solutionTags": [],
                "code": "```\\nwith temp as (select seller_id,product_id,buyer_id,max(sale_date) as mx,min(sale_date) as mn\\n              from sales\\n              group by product_id)\\n              \\nselect a.product_id,a.product_name\\nfrom product a\\ninner join temp b\\non a.product_id=b.product_id\\nwhere b.mn>=\\'2019-01-01\\' and b.mx<=\\'2019-03-31\\';\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2298919,
                "title": "mysql-simple-solution-using-group-by-and-having",
                "content": "Runtime: 1002 ms, faster than 86.86% of MySQL online submissions for Sales Analysis III.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Sales Analysis III.\\n```\\nSELECT product_id, product_name\\nFROM Sales \\nJOIN Product \\nUsing(product_id)\\nGROUP BY product_id\\nHAVING MIN(sale_date) >= \\'2019-01-01\\' AND MAX(sale_date) <= \\'2019-03-31\\'",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "Runtime: 1002 ms, faster than 86.86% of MySQL online submissions for Sales Analysis III.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Sales Analysis III.\\n```\\nSELECT product_id, product_name\\nFROM Sales \\nJOIN Product \\nUsing(product_id)\\nGROUP BY product_id\\nHAVING MIN(sale_date) >= \\'2019-01-01\\' AND MAX(sale_date) <= \\'2019-03-31\\'",
                "codeTag": "Unknown"
            },
            {
                "id": 2297203,
                "title": "use-in-and-not-in-easy-solution",
                "content": "select  product_id ,   product_name\\nfrom Product\\nwhere product_id in  \\n    (select  product_id from Sales\\n    where sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' )\\nand product_id not in \\n    (select  product_id from Sales\\n    where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\' )",
                "solutionTags": [],
                "code": "select  product_id ,   product_name\\nfrom Product\\nwhere product_id in  \\n    (select  product_id from Sales\\n    where sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' )\\nand product_id not in \\n    (select  product_id from Sales\\n    where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\' )",
                "codeTag": "Unknown"
            },
            {
                "id": 2277345,
                "title": "without-joins-without-having-only-not-in-in-between-clause",
                "content": "```\\n# Write your MySQL query statement below\\nselect product_id, product_name from Product where product_id not in (select distinct product_id from Sales where DATE(sale_date) not between \\'2019-01-01\\' and \\'2019-03-31\\') and product_id in (select distinct product_id from Sales);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect product_id, product_name from Product where product_id not in (select distinct product_id from Sales where DATE(sale_date) not between \\'2019-01-01\\' and \\'2019-03-31\\') and product_id in (select distinct product_id from Sales);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2270013,
                "title": "mysql",
                "content": "select distinct(s.product_id), p.product_name\\nfrom product p, sales s\\nwhere p.product_id=s.product_id \\nand s.sale_date>=\"2019-01-01\" and s.sale_date<=\"2019-03-31\" and s.product_id not in \\n(select product_id from sales where sale_date>\"2019-03-31\" or sale_date<\"2019-01-01\" )",
                "solutionTags": [],
                "code": "select distinct(s.product_id), p.product_name\\nfrom product p, sales s\\nwhere p.product_id=s.product_id \\nand s.sale_date>=\"2019-01-01\" and s.sale_date<=\"2019-03-31\" and s.product_id not in \\n(select product_id from sales where sale_date>\"2019-03-31\" or sale_date<\"2019-01-01\" )",
                "codeTag": "Unknown"
            },
            {
                "id": 2265610,
                "title": "fresher-s-solution",
                "content": "```\\nselect p.product_id, p.product_name\\nfrom product p left join sales s\\nusing(product_id)\\ngroup by p.product_id\\nHAVING MIN(s.sale_date) >= \\'2019-01-01\\' AND\\n       MAX(s.sale_date) <= \\'2019-03-31\\'\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect p.product_id, p.product_name\\nfrom product p left join sales s\\nusing(product_id)\\ngroup by p.product_id\\nHAVING MIN(s.sale_date) >= \\'2019-01-01\\' AND\\n       MAX(s.sale_date) <= \\'2019-03-31\\'\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2261027,
                "title": "short-and-beat-98-queries",
                "content": "```\\nSELECT product_id, product_name FROM Product\\nWHERE product_id IN\\n(SELECT product_id\\nFROM Sales\\nGROUP BY 1\\nHAVING SUM(IF(sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\',0 ,1 ))=0)\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT product_id, product_name FROM Product\\nWHERE product_id IN\\n(SELECT product_id\\nFROM Sales\\nGROUP BY 1\\nHAVING SUM(IF(sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\',0 ,1 ))=0)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2245134,
                "title": "mysql-easy-solution-analytical-function",
                "content": "select prd.product_id,prd.product_name from product prd\\ninner join (select product_id from (select product_id,quarter(sale_date) as qrtr,row_number() over(partition by product_id order by quarter(sale_date) desc) rnk from sales) temp where rnk=1 and qrtr=1) sale \\non prd.product_id=sale.product_id",
                "solutionTags": [],
                "code": "select prd.product_id,prd.product_name from product prd\\ninner join (select product_id from (select product_id,quarter(sale_date) as qrtr,row_number() over(partition by product_id order by quarter(sale_date) desc) rnk from sales) temp where rnk=1 and qrtr=1) sale \\non prd.product_id=sale.product_id",
                "codeTag": "Unknown"
            },
            {
                "id": 2220387,
                "title": "mysql-84-faster-easy-solution-with-explanation",
                "content": "```\\n# Write your MySQL query statement below\\n#Selecting all product_ids that were sold out of the given interval.\\nwith sb as(\\n    select \\n    product_id\\n    from sales \\n    where date(sale_date) < \"2019-01-01\" or date(sale_date) > \"2019-03-31\"\\n)\\n\\n#selecting all products that were sold IN given interval and having ID not equal to ones being sold outside of the 1st quarter\\nselect \\ndistinct a.product_id,\\na.product_name\\n\\nfrom product a \\ninner join sales s on a.product_id = s.product_id\\n\\nwhere sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand a.product_id not in (select product_id from sb)\\n\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n#Selecting all product_ids that were sold out of the given interval.\\nwith sb as(\\n    select \\n    product_id\\n    from sales \\n    where date(sale_date) < \"2019-01-01\" or date(sale_date) > \"2019-03-31\"\\n)\\n\\n#selecting all products that were sold IN given interval and having ID not equal to ones being sold outside of the 1st quarter\\nselect \\ndistinct a.product_id,\\na.product_name\\n\\nfrom product a \\ninner join sales s on a.product_id = s.product_id\\n\\nwhere sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand a.product_id not in (select product_id from sb)\\n\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2188092,
                "title": "mssql-solution",
                "content": "```\\n/* Write your T-SQL query statement below */\\n\\nSELECT S.product_id, P.product_name\\nFROM Sales AS S\\nJOIN Product AS P\\n    ON S.product_id = P.product_id\\nGROUP BY S.product_id, P.product_name\\nHAVING MIN(S.sale_date)>= \\'2019-01-01\\' \\n     AND MAX(S.sale_date) <= \\'2019-03-31\\'",
                "solutionTags": [],
                "code": "```\\n/* Write your T-SQL query statement below */\\n\\nSELECT S.product_id, P.product_name\\nFROM Sales AS S\\nJOIN Product AS P\\n    ON S.product_id = P.product_id\\nGROUP BY S.product_id, P.product_name\\nHAVING MIN(S.sale_date)>= \\'2019-01-01\\' \\n     AND MAX(S.sale_date) <= \\'2019-03-31\\'",
                "codeTag": "Unknown"
            },
            {
                "id": 2178009,
                "title": "with-left-join-and-group-by-and-having",
                "content": "```\\nselect s.product_id,p.product_name from Product p left join Sales s on p.product_id=s.product_id group by s.product_id having min(s.sale_date)>=\\'2019-01-01\\' and max(s.sale_date) <=\\'2019-03-31\\';\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect s.product_id,p.product_name from Product p left join Sales s on p.product_id=s.product_id group by s.product_id having min(s.sale_date)>=\\'2019-01-01\\' and max(s.sale_date) <=\\'2019-03-31\\';\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2169860,
                "title": "why-does-it-work-with-group-by-and-not-with-between-without-group-by",
                "content": "SELECT P.PRODUCT_ID,P.PRODUCT_NAME FROM PRODUCT P JOIN SALES S\\nON P.PRODUCT_ID=S.PRODUCT_ID  GROUP BY 1,2 HAVING MIN(SALE_DATE) >= \\'2019-01-01\\' AND\\nMAX(SALE_DATE)<=\\'2019-03-31\\'\\n\\n",
                "solutionTags": [],
                "code": "SELECT P.PRODUCT_ID,P.PRODUCT_NAME FROM PRODUCT P JOIN SALES S\\nON P.PRODUCT_ID=S.PRODUCT_ID  GROUP BY 1,2 HAVING MIN(SALE_DATE) >= \\'2019-01-01\\' AND\\nMAX(SALE_DATE)<=\\'2019-03-31\\'\\n\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2161395,
                "title": "ms-sql-solution-solved-the-time-limit-issue",
                "content": "```\\n/* Write your T-SQL query statement below */\\n\\n\\n;with tmp as \\n(\\n    select product_id\\n    from Sales \\n    group by product_id\\n    having min(sale_date)>=\\'2019-01-01\\' and max(sale_date)<=\\'2019-03-31\\'\\n)\\n\\nselect a.product_id, a.product_name\\nfrom Product a\\njoin tmp b on a.product_id=b.product_id\\n```\\n",
                "solutionTags": [],
                "code": "```\\n/* Write your T-SQL query statement below */\\n\\n\\n;with tmp as \\n(\\n    select product_id\\n    from Sales \\n    group by product_id\\n    having min(sale_date)>=\\'2019-01-01\\' and max(sale_date)<=\\'2019-03-31\\'\\n)\\n\\nselect a.product_id, a.product_name\\nfrom Product a\\njoin tmp b on a.product_id=b.product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2141982,
                "title": "mysql-solution-easy-approach",
                "content": "**Approach:**\\n```\\nSELECT product_id_table.product_id, Product.product_name\\nFROM\\n(SELECT DISTINCT(product_id) AS product_id FROM Sales\\nWHERE sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nAND product_id NOT IN\\n(SELECT product_id FROM Sales\\nWHERE sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'))\\nAS product_id_table\\nLEFT JOIN Product ON product_id_table.product_id = Product.product_id;\\n```\\n\\n**Approach:**\\n```\\nSELECT Sales.product_id, Product.product_name \\nFROM Sales LEFT JOIN Product\\nON Sales.product_id = Product.product_id\\nGROUP BY Sales.product_id\\nHAVING \\nmin(Sales.sale_date) >= \\'2019-01-01\\' AND\\nmax(Sales.sale_date) <= \\'2019-03-31\\';\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT product_id_table.product_id, Product.product_name\\nFROM\\n(SELECT DISTINCT(product_id) AS product_id FROM Sales\\nWHERE sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nAND product_id NOT IN\\n(SELECT product_id FROM Sales\\nWHERE sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'))\\nAS product_id_table\\nLEFT JOIN Product ON product_id_table.product_id = Product.product_id;\\n```\n```\\nSELECT Sales.product_id, Product.product_name \\nFROM Sales LEFT JOIN Product\\nON Sales.product_id = Product.product_id\\nGROUP BY Sales.product_id\\nHAVING \\nmin(Sales.sale_date) >= \\'2019-01-01\\' AND\\nmax(Sales.sale_date) <= \\'2019-03-31\\';\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2105498,
                "title": "mysql-easiest-solution",
                "content": "**Pls Upvote if you like the Solution!**\\n```\\nSELECT product_id, product_name\\nFROM Sales \\nJOIN Product \\nUsing(product_id)\\nGROUP BY product_id\\nHAVING MIN(sale_date) >= \\'2019-01-01\\' AND MAX(sale_date) <= \\'2019-03-31\\'",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "**Pls Upvote if you like the Solution!**\\n```\\nSELECT product_id, product_name\\nFROM Sales \\nJOIN Product \\nUsing(product_id)\\nGROUP BY product_id\\nHAVING MIN(sale_date) >= \\'2019-01-01\\' AND MAX(sale_date) <= \\'2019-03-31\\'",
                "codeTag": "Unknown"
            },
            {
                "id": 2087365,
                "title": "beats-90-precise-mysql",
                "content": "```sql\\nSELECT\\n\\ts.product_id,\\n\\tproduct_name\\nFROM\\n\\tsales s\\n\\tINNER JOIN product p ON p.product_id = s.product_id\\nGROUP BY\\n\\t1, 2\\nHAVING\\n\\tMIN(sale_date) >= \\'2019-01-01\\'\\n\\tAND MAX(sale_date) <= \\'2019-03-31\\'\\n```",
                "solutionTags": [],
                "code": "```sql\\nSELECT\\n\\ts.product_id,\\n\\tproduct_name\\nFROM\\n\\tsales s\\n\\tINNER JOIN product p ON p.product_id = s.product_id\\nGROUP BY\\n\\t1, 2\\nHAVING\\n\\tMIN(sale_date) >= \\'2019-01-01\\'\\n\\tAND MAX(sale_date) <= \\'2019-03-31\\'\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2057241,
                "title": "5-lines-of-code-in-mysql-very-easy-to-understand",
                "content": "**MySQL**\\n```\\nselect product_id, product_name\\nfrom product\\njoin sales using(product_id)\\ngroup by product_id\\nhaving max(quarter(sale_date)) = 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect product_id, product_name\\nfrom product\\njoin sales using(product_id)\\ngroup by product_id\\nhaving max(quarter(sale_date)) = 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2034851,
                "title": "using-join-and-between",
                "content": "```\\nselect product_id,product_name\\nfrom Product where\\nproduct_id not in (\\n\\t\\t\\t\\tselect p.product_id from Product p \\n\\t\\t\\t\\t join Sales s on p.product_id = s.product_id\\n\\t\\t\\t\\t\\twhere sale_date \\n\\t\\t\\t\\t\\t\\t\\tnot between date(\\'2019-01-01\\') and date(\\'2019-03-31\\')\\n\\t\\t\\t\\t\\t)\\n```",
                "solutionTags": [],
                "code": "```\\nselect product_id,product_name\\nfrom Product where\\nproduct_id not in (\\n\\t\\t\\t\\tselect p.product_id from Product p \\n\\t\\t\\t\\t join Sales s on p.product_id = s.product_id\\n\\t\\t\\t\\t\\twhere sale_date \\n\\t\\t\\t\\t\\t\\t\\tnot between date(\\'2019-01-01\\') and date(\\'2019-03-31\\')\\n\\t\\t\\t\\t\\t)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2033916,
                "title": "simple-mysql-solution",
                "content": "```\\n SELECT product_id, product_name \\n FROM Product NATURAL JOIN Sales \\n GROUP BY product_id \\n HAVING MIN(sale_date) >= \\'2019-01-01\\' AND \\n MAX(sale_date) <= \\'2019-03-31\\'\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n SELECT product_id, product_name \\n FROM Product NATURAL JOIN Sales \\n GROUP BY product_id \\n HAVING MIN(sale_date) >= \\'2019-01-01\\' AND \\n MAX(sale_date) <= \\'2019-03-31\\'\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2030834,
                "title": "runtime-4036-ms-faster-than-97-40-of-ms-sql-server",
                "content": "```\\nWITH spring AS(\\nSELECT DISTINCT p.product_id, p.product_name\\nFROM Sales s\\nLEFT JOIN Product p\\nON p.product_id = s.product_id\\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' )\\n\\nSELECT s.product_id,s.product_name\\nFROM spring s\\nLEFT JOIN (SELECT *\\n           FROM Sales\\n           WHERE  sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\')a\\nON s.product_id = a.product_id\\nWHERE a.product_id IS NULL\\n```",
                "solutionTags": [],
                "code": "```\\nWITH spring AS(\\nSELECT DISTINCT p.product_id, p.product_name\\nFROM Sales s\\nLEFT JOIN Product p\\nON p.product_id = s.product_id\\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' )\\n\\nSELECT s.product_id,s.product_name\\nFROM spring s\\nLEFT JOIN (SELECT *\\n           FROM Sales\\n           WHERE  sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\')a\\nON s.product_id = a.product_id\\nWHERE a.product_id IS NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2019287,
                "title": "using-left-join-between-having-87-4",
                "content": "```\\nselect a.product_id,a.product_name from Product as a left join Sales as b on a.product_id = b.product_id group by b.product_id having min(b.sale_date) >=\\'2019-01-01\\' and max(b.sale_date) <=\\'2019-03-31\\'; \\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect a.product_id,a.product_name from Product as a left join Sales as b on a.product_id = b.product_id group by b.product_id having min(b.sale_date) >=\\'2019-01-01\\' and max(b.sale_date) <=\\'2019-03-31\\'; \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1998970,
                "title": "please-someone-help-me-with-this",
                "content": "select product_id,product_name from\\n(select p.product_id,p.product_name,s.sale_date from Product p\\ninner join Sales s on s.product_id = p.product_id)\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'",
                "solutionTags": [],
                "code": "select product_id,product_name from\\n(select p.product_id,p.product_name,s.sale_date from Product p\\ninner join Sales s on s.product_id = p.product_id)\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'",
                "codeTag": "Unknown"
            },
            {
                "id": 1997350,
                "title": "using-case-and-left-join",
                "content": "```\\nSELECT product_id, product_name from (\\n   select p.product_id, p.product_name, SUM(\\n       CASE\\n            WHEN s.sale_date>=\\'2019-01-01\\' and s.sale_date<=\\'2019-03-31\\' THEN 1\\n            ELSE 0\\n       END\\n   ) as count1,\\n    SUM(\\n       CASE\\n            WHEN s.sale_date<\\'2019-01-01\\' or s.sale_date>\\'2019-03-31\\' THEN 1\\n            ELSE 0\\n        END\\n   ) as count2 from Product p LEFT JOIN Sales s on p.product_id=s.product_id group by p.product_id\\n)as temp WHERE count1>0 and count2=0;\\n```\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT product_id, product_name from (\\n   select p.product_id, p.product_name, SUM(\\n       CASE\\n            WHEN s.sale_date>=\\'2019-01-01\\' and s.sale_date<=\\'2019-03-31\\' THEN 1\\n            ELSE 0\\n       END\\n   ) as count1,\\n    SUM(\\n       CASE\\n            WHEN s.sale_date<\\'2019-01-01\\' or s.sale_date>\\'2019-03-31\\' THEN 1\\n            ELSE 0\\n        END\\n   ) as count2 from Product p LEFT JOIN Sales s on p.product_id=s.product_id group by p.product_id\\n)as temp WHERE count1>0 and count2=0;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1994995,
                "title": "using-except",
                "content": "select p.product_id, product_name\\nfrom product p inner join sales s\\non p.product_id = s.product_id\\nwhere sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\n\\nexcept\\n\\nselect p.product_id, product_name\\nfrom product p inner join sales s\\non p.product_id = s.product_id\\nwhere sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\'",
                "solutionTags": [],
                "code": "select p.product_id, product_name\\nfrom product p inner join sales s\\non p.product_id = s.product_id\\nwhere sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\n\\nexcept\\n\\nselect p.product_id, product_name\\nfrom product p inner join sales s\\non p.product_id = s.product_id\\nwhere sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\'",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1566151,
                "content": [
                    {
                        "username": "AshleyMeow",
                        "content": "Product 2, G4 is also between 2019-1-1 to 2019-3-31, why in the correct answer it is not supposed to be included? Or am I understanding the problem wrong? Thank yo uso much !"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "[@Preksha_Sharma](/Preksha_Sharma) Nice catch!"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "You are probably looking at the seller_id instead of the product_id in sales table."
                    },
                    {
                        "username": "victorpichugov",
                        "content": "In my opinion, it is necessary to take into account the date of the LAST SALE. Take another look at the explanation:\\nThe product with id 2 was sold in the spring of 2019 but was also sold after the spring of 2019.\\n"
                    },
                    {
                        "username": "Preksha_Sharma",
                        "content": "I think it is because we are asked the product which are ONLY in the first three quarter....Focus on that ONLY part\\n"
                    },
                    {
                        "username": "aakriti16",
                        "content": "because G4 also sold on 2019-06-02 which is not first quarter "
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "Select p.product_id, p.product_name\\nfrom Product p join Sales s\\non p.product_id = s.product_id\\ngroup by s.product_id\\nhaving min(s.sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "[@weebhav](/weebhav) Here the problem statement states that report the products that were only sold in the first quarter of 2019. But the product_id 2 was also sold in other quarter so we aren\\'t supposed to include that in our result. That\\'s why we are grouping them by product_id.\\n\\nIf you had grouped them by sale_date then it would have included product_id 2 also which we don\\'t want hence we have to group them by product_id."
                    },
                    {
                        "username": "weebhav",
                        "content": "Hey can you explain the impact group by has in the product_id 2 in the sample example given in the problem? or how does group by work generally in such scenario\\'s.\\nAny reply would be highly appreciated!!"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "like the idea "
                    },
                    {
                        "username": "Chloe4max",
                        "content": "Many people might think my solution is redundant while they only need 1 condition \\'\\'where sale_date < \\'2019-01-01\\' or sale_date > \\'2019-03-31\\'\\' and pass all the test cases. However I think my solution also covers the case when the products have never been sold.\\n\\nselect distinct\\np.product_id,\\np.product_name\\nfrom Product p\\nleft join Sales s on p.product_id = s.product_id\\nwhere sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand p.product_id not in (select distinct product_id from Sales where sale_date > \\'2019-03-31\\' or  sale_date < \\'2019-01-01\\')\\n\\n\\n"
                    },
                    {
                        "username": "ilyastuit",
                        "content": "I have a similar query, but it is failing.\\n\\n```sql\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nINNER JOIN Sales s ON s.product_id = p.product_id\\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' \\nAND p.product_id NOT IN (\\n  SELECT product_id FROM Sales WHERE sale_date < \\'2019-01-01\\' OR sale_date > \\'2019-03-31\\'\\n);\\n```"
                    },
                    {
                        "username": "nikitaTiwari08",
                        "content": "mine is exactly similar to this except I\\'ve used right join (with product being on right ) which shouldn\\'t matter , however it is giving me wrong answer.\\ni don\\'t understand what\\'s wrong with this:\\n\\nselect distinct p.product_id , p.product_name\\nfrom Sales s \\nright join Product p on (s.product_id = p.product_id)\\nwhere s.sale_date  between (\\'2019-01-01\\' AND \\'2019-03-31\\') AND p.product_id not in (select distinct product_id \\n                                                                                  from Sales\\n                                                                                  where sale_date > \\'2019-03-31\\'\\n                                                                                  OR sale_date < \\'2019-01-01\\' )"
                    },
                    {
                        "username": "ssuresh1999",
                        "content": "I think product1  and 2 where sold in spring between 2019-01-01 and 2019-03-31\\nproduct 1 on 1/21 and 2 on 2/17 so why is that only S8 is the correct answer"
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "product_ID 1:Its only sold in spring between 2019-01-01 and 2019-03-31\\nwhere as,\\nproduct_ID 2: Sold in Spring as well as after spring (i.e 2019-06-02) \\nBut in the Description it is mentioned we only need those product which are only sold in spring "
                    },
                    {
                        "username": "bondshinra",
                        "content": "Because we are looking for products ONLY sold in Q1, the G4 was sold in 06-02 as well"
                    },
                    {
                        "username": "Gensun",
                        "content": "# Write your MySQL query statement below\\nSELECT P1.product_id, P1.product_name\\nFROM Product AS P1\\nWHERE P1.product_id NOT IN\\n(SELECT S1.product_id\\nFROM Sales AS S1\\nWHERE S1.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\')"
                    },
                    {
                        "username": "matheus-rodrigues00",
                        "content": "[@Gensun](/Gensun) It\\'s not passing all the tests..."
                    },
                    {
                        "username": "AmadeusSquared",
                        "content": "[@Haidram](/Haidram)  \\n\\n\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nLEFT JOIN Sales s ON p.product_id = s.product_id\\nWHERE s.product_id IS NOT NULL\\nGROUP BY p.product_id, p.product_name\\nHAVING SUM(CASE WHEN s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = COUNT(s.product_id) AND\\n       SUM(CASE WHEN s.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = 0"
                    },
                    {
                        "username": "Haidram",
                        "content": "wrong answer bro......not passing the final test case"
                    },
                    {
                        "username": "Sachi12345",
                        "content": "# Write your MySQL query statement below\\n\\n\\nSELECT product_id,product_NAME FROM Product \\nWHERE product_id IN (\\nSELECT product_id FROM Sales GROUP BY 1 HAVING\\nMAX(sale_date) <= CAST(\\'2019-03-31\\' AS DATE)\\nAND MIN(sale_date) >= CAST(\\'2019-01-01\\' AS DATE))\\n"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "sale_date is already date type."
                    },
                    {
                        "username": "jyothidundi91",
                        "content": "Sorry for dumb question!\\n\\n seller_id | product_id | buyer_id | sale_date  | quantity | price |\\n+-----------+------------+----------+------------+----------+-------+\\n| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |\\n| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |\\n\\nSpring time covers from Jan to Mar, in that case it should be twp records. Can any one help?"
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "that is why there is \"ONLY\" mentioned in the question. So product should not be sold in any other quarter except Jan to mar. I believe it make sense"
                    },
                    {
                        "username": "nynptel",
                        "content": " `select s.product_id, product_name\\nfrom Sales s\\nleft join Product p on s.product_id = p.product_id\\ngroup by product_id\\nhaving min(sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'`"
                    },
                    {
                        "username": "vashdevl",
                        "content": "product Id 2 was sold in feb 17 2019 . why is this not valid row for the spring of 2019 ?\\n    | 2        | 2019-02-17 | 1        | 800"
                    },
                    {
                        "username": "weizhao5",
                        "content": "\\n\\'\\'\\'\\nselect distinct s.product_id,p.product_name \\nfrom sales s join product p on s.product_id = p.product_id\\nwhere s.product_id not in\\n(\\nselect product_id\\nfrom sales\\nwhere not (sale_date between \\'2019-01-01\\' and \\'2019-03-31\\')); \\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1717077,
                "content": [
                    {
                        "username": "AshleyMeow",
                        "content": "Product 2, G4 is also between 2019-1-1 to 2019-3-31, why in the correct answer it is not supposed to be included? Or am I understanding the problem wrong? Thank yo uso much !"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "[@Preksha_Sharma](/Preksha_Sharma) Nice catch!"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "You are probably looking at the seller_id instead of the product_id in sales table."
                    },
                    {
                        "username": "victorpichugov",
                        "content": "In my opinion, it is necessary to take into account the date of the LAST SALE. Take another look at the explanation:\\nThe product with id 2 was sold in the spring of 2019 but was also sold after the spring of 2019.\\n"
                    },
                    {
                        "username": "Preksha_Sharma",
                        "content": "I think it is because we are asked the product which are ONLY in the first three quarter....Focus on that ONLY part\\n"
                    },
                    {
                        "username": "aakriti16",
                        "content": "because G4 also sold on 2019-06-02 which is not first quarter "
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "Select p.product_id, p.product_name\\nfrom Product p join Sales s\\non p.product_id = s.product_id\\ngroup by s.product_id\\nhaving min(s.sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "[@weebhav](/weebhav) Here the problem statement states that report the products that were only sold in the first quarter of 2019. But the product_id 2 was also sold in other quarter so we aren\\'t supposed to include that in our result. That\\'s why we are grouping them by product_id.\\n\\nIf you had grouped them by sale_date then it would have included product_id 2 also which we don\\'t want hence we have to group them by product_id."
                    },
                    {
                        "username": "weebhav",
                        "content": "Hey can you explain the impact group by has in the product_id 2 in the sample example given in the problem? or how does group by work generally in such scenario\\'s.\\nAny reply would be highly appreciated!!"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "like the idea "
                    },
                    {
                        "username": "Chloe4max",
                        "content": "Many people might think my solution is redundant while they only need 1 condition \\'\\'where sale_date < \\'2019-01-01\\' or sale_date > \\'2019-03-31\\'\\' and pass all the test cases. However I think my solution also covers the case when the products have never been sold.\\n\\nselect distinct\\np.product_id,\\np.product_name\\nfrom Product p\\nleft join Sales s on p.product_id = s.product_id\\nwhere sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand p.product_id not in (select distinct product_id from Sales where sale_date > \\'2019-03-31\\' or  sale_date < \\'2019-01-01\\')\\n\\n\\n"
                    },
                    {
                        "username": "ilyastuit",
                        "content": "I have a similar query, but it is failing.\\n\\n```sql\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nINNER JOIN Sales s ON s.product_id = p.product_id\\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' \\nAND p.product_id NOT IN (\\n  SELECT product_id FROM Sales WHERE sale_date < \\'2019-01-01\\' OR sale_date > \\'2019-03-31\\'\\n);\\n```"
                    },
                    {
                        "username": "nikitaTiwari08",
                        "content": "mine is exactly similar to this except I\\'ve used right join (with product being on right ) which shouldn\\'t matter , however it is giving me wrong answer.\\ni don\\'t understand what\\'s wrong with this:\\n\\nselect distinct p.product_id , p.product_name\\nfrom Sales s \\nright join Product p on (s.product_id = p.product_id)\\nwhere s.sale_date  between (\\'2019-01-01\\' AND \\'2019-03-31\\') AND p.product_id not in (select distinct product_id \\n                                                                                  from Sales\\n                                                                                  where sale_date > \\'2019-03-31\\'\\n                                                                                  OR sale_date < \\'2019-01-01\\' )"
                    },
                    {
                        "username": "ssuresh1999",
                        "content": "I think product1  and 2 where sold in spring between 2019-01-01 and 2019-03-31\\nproduct 1 on 1/21 and 2 on 2/17 so why is that only S8 is the correct answer"
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "product_ID 1:Its only sold in spring between 2019-01-01 and 2019-03-31\\nwhere as,\\nproduct_ID 2: Sold in Spring as well as after spring (i.e 2019-06-02) \\nBut in the Description it is mentioned we only need those product which are only sold in spring "
                    },
                    {
                        "username": "bondshinra",
                        "content": "Because we are looking for products ONLY sold in Q1, the G4 was sold in 06-02 as well"
                    },
                    {
                        "username": "Gensun",
                        "content": "# Write your MySQL query statement below\\nSELECT P1.product_id, P1.product_name\\nFROM Product AS P1\\nWHERE P1.product_id NOT IN\\n(SELECT S1.product_id\\nFROM Sales AS S1\\nWHERE S1.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\')"
                    },
                    {
                        "username": "matheus-rodrigues00",
                        "content": "[@Gensun](/Gensun) It\\'s not passing all the tests..."
                    },
                    {
                        "username": "AmadeusSquared",
                        "content": "[@Haidram](/Haidram)  \\n\\n\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nLEFT JOIN Sales s ON p.product_id = s.product_id\\nWHERE s.product_id IS NOT NULL\\nGROUP BY p.product_id, p.product_name\\nHAVING SUM(CASE WHEN s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = COUNT(s.product_id) AND\\n       SUM(CASE WHEN s.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = 0"
                    },
                    {
                        "username": "Haidram",
                        "content": "wrong answer bro......not passing the final test case"
                    },
                    {
                        "username": "Sachi12345",
                        "content": "# Write your MySQL query statement below\\n\\n\\nSELECT product_id,product_NAME FROM Product \\nWHERE product_id IN (\\nSELECT product_id FROM Sales GROUP BY 1 HAVING\\nMAX(sale_date) <= CAST(\\'2019-03-31\\' AS DATE)\\nAND MIN(sale_date) >= CAST(\\'2019-01-01\\' AS DATE))\\n"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "sale_date is already date type."
                    },
                    {
                        "username": "jyothidundi91",
                        "content": "Sorry for dumb question!\\n\\n seller_id | product_id | buyer_id | sale_date  | quantity | price |\\n+-----------+------------+----------+------------+----------+-------+\\n| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |\\n| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |\\n\\nSpring time covers from Jan to Mar, in that case it should be twp records. Can any one help?"
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "that is why there is \"ONLY\" mentioned in the question. So product should not be sold in any other quarter except Jan to mar. I believe it make sense"
                    },
                    {
                        "username": "nynptel",
                        "content": " `select s.product_id, product_name\\nfrom Sales s\\nleft join Product p on s.product_id = p.product_id\\ngroup by product_id\\nhaving min(sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'`"
                    },
                    {
                        "username": "vashdevl",
                        "content": "product Id 2 was sold in feb 17 2019 . why is this not valid row for the spring of 2019 ?\\n    | 2        | 2019-02-17 | 1        | 800"
                    },
                    {
                        "username": "weizhao5",
                        "content": "\\n\\'\\'\\'\\nselect distinct s.product_id,p.product_name \\nfrom sales s join product p on s.product_id = p.product_id\\nwhere s.product_id not in\\n(\\nselect product_id\\nfrom sales\\nwhere not (sale_date between \\'2019-01-01\\' and \\'2019-03-31\\')); \\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1576616,
                "content": [
                    {
                        "username": "AshleyMeow",
                        "content": "Product 2, G4 is also between 2019-1-1 to 2019-3-31, why in the correct answer it is not supposed to be included? Or am I understanding the problem wrong? Thank yo uso much !"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "[@Preksha_Sharma](/Preksha_Sharma) Nice catch!"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "You are probably looking at the seller_id instead of the product_id in sales table."
                    },
                    {
                        "username": "victorpichugov",
                        "content": "In my opinion, it is necessary to take into account the date of the LAST SALE. Take another look at the explanation:\\nThe product with id 2 was sold in the spring of 2019 but was also sold after the spring of 2019.\\n"
                    },
                    {
                        "username": "Preksha_Sharma",
                        "content": "I think it is because we are asked the product which are ONLY in the first three quarter....Focus on that ONLY part\\n"
                    },
                    {
                        "username": "aakriti16",
                        "content": "because G4 also sold on 2019-06-02 which is not first quarter "
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "Select p.product_id, p.product_name\\nfrom Product p join Sales s\\non p.product_id = s.product_id\\ngroup by s.product_id\\nhaving min(s.sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "[@weebhav](/weebhav) Here the problem statement states that report the products that were only sold in the first quarter of 2019. But the product_id 2 was also sold in other quarter so we aren\\'t supposed to include that in our result. That\\'s why we are grouping them by product_id.\\n\\nIf you had grouped them by sale_date then it would have included product_id 2 also which we don\\'t want hence we have to group them by product_id."
                    },
                    {
                        "username": "weebhav",
                        "content": "Hey can you explain the impact group by has in the product_id 2 in the sample example given in the problem? or how does group by work generally in such scenario\\'s.\\nAny reply would be highly appreciated!!"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "like the idea "
                    },
                    {
                        "username": "Chloe4max",
                        "content": "Many people might think my solution is redundant while they only need 1 condition \\'\\'where sale_date < \\'2019-01-01\\' or sale_date > \\'2019-03-31\\'\\' and pass all the test cases. However I think my solution also covers the case when the products have never been sold.\\n\\nselect distinct\\np.product_id,\\np.product_name\\nfrom Product p\\nleft join Sales s on p.product_id = s.product_id\\nwhere sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand p.product_id not in (select distinct product_id from Sales where sale_date > \\'2019-03-31\\' or  sale_date < \\'2019-01-01\\')\\n\\n\\n"
                    },
                    {
                        "username": "ilyastuit",
                        "content": "I have a similar query, but it is failing.\\n\\n```sql\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nINNER JOIN Sales s ON s.product_id = p.product_id\\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' \\nAND p.product_id NOT IN (\\n  SELECT product_id FROM Sales WHERE sale_date < \\'2019-01-01\\' OR sale_date > \\'2019-03-31\\'\\n);\\n```"
                    },
                    {
                        "username": "nikitaTiwari08",
                        "content": "mine is exactly similar to this except I\\'ve used right join (with product being on right ) which shouldn\\'t matter , however it is giving me wrong answer.\\ni don\\'t understand what\\'s wrong with this:\\n\\nselect distinct p.product_id , p.product_name\\nfrom Sales s \\nright join Product p on (s.product_id = p.product_id)\\nwhere s.sale_date  between (\\'2019-01-01\\' AND \\'2019-03-31\\') AND p.product_id not in (select distinct product_id \\n                                                                                  from Sales\\n                                                                                  where sale_date > \\'2019-03-31\\'\\n                                                                                  OR sale_date < \\'2019-01-01\\' )"
                    },
                    {
                        "username": "ssuresh1999",
                        "content": "I think product1  and 2 where sold in spring between 2019-01-01 and 2019-03-31\\nproduct 1 on 1/21 and 2 on 2/17 so why is that only S8 is the correct answer"
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "product_ID 1:Its only sold in spring between 2019-01-01 and 2019-03-31\\nwhere as,\\nproduct_ID 2: Sold in Spring as well as after spring (i.e 2019-06-02) \\nBut in the Description it is mentioned we only need those product which are only sold in spring "
                    },
                    {
                        "username": "bondshinra",
                        "content": "Because we are looking for products ONLY sold in Q1, the G4 was sold in 06-02 as well"
                    },
                    {
                        "username": "Gensun",
                        "content": "# Write your MySQL query statement below\\nSELECT P1.product_id, P1.product_name\\nFROM Product AS P1\\nWHERE P1.product_id NOT IN\\n(SELECT S1.product_id\\nFROM Sales AS S1\\nWHERE S1.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\')"
                    },
                    {
                        "username": "matheus-rodrigues00",
                        "content": "[@Gensun](/Gensun) It\\'s not passing all the tests..."
                    },
                    {
                        "username": "AmadeusSquared",
                        "content": "[@Haidram](/Haidram)  \\n\\n\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nLEFT JOIN Sales s ON p.product_id = s.product_id\\nWHERE s.product_id IS NOT NULL\\nGROUP BY p.product_id, p.product_name\\nHAVING SUM(CASE WHEN s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = COUNT(s.product_id) AND\\n       SUM(CASE WHEN s.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = 0"
                    },
                    {
                        "username": "Haidram",
                        "content": "wrong answer bro......not passing the final test case"
                    },
                    {
                        "username": "Sachi12345",
                        "content": "# Write your MySQL query statement below\\n\\n\\nSELECT product_id,product_NAME FROM Product \\nWHERE product_id IN (\\nSELECT product_id FROM Sales GROUP BY 1 HAVING\\nMAX(sale_date) <= CAST(\\'2019-03-31\\' AS DATE)\\nAND MIN(sale_date) >= CAST(\\'2019-01-01\\' AS DATE))\\n"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "sale_date is already date type."
                    },
                    {
                        "username": "jyothidundi91",
                        "content": "Sorry for dumb question!\\n\\n seller_id | product_id | buyer_id | sale_date  | quantity | price |\\n+-----------+------------+----------+------------+----------+-------+\\n| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |\\n| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |\\n\\nSpring time covers from Jan to Mar, in that case it should be twp records. Can any one help?"
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "that is why there is \"ONLY\" mentioned in the question. So product should not be sold in any other quarter except Jan to mar. I believe it make sense"
                    },
                    {
                        "username": "nynptel",
                        "content": " `select s.product_id, product_name\\nfrom Sales s\\nleft join Product p on s.product_id = p.product_id\\ngroup by product_id\\nhaving min(sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'`"
                    },
                    {
                        "username": "vashdevl",
                        "content": "product Id 2 was sold in feb 17 2019 . why is this not valid row for the spring of 2019 ?\\n    | 2        | 2019-02-17 | 1        | 800"
                    },
                    {
                        "username": "weizhao5",
                        "content": "\\n\\'\\'\\'\\nselect distinct s.product_id,p.product_name \\nfrom sales s join product p on s.product_id = p.product_id\\nwhere s.product_id not in\\n(\\nselect product_id\\nfrom sales\\nwhere not (sale_date between \\'2019-01-01\\' and \\'2019-03-31\\')); \\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1570629,
                "content": [
                    {
                        "username": "AshleyMeow",
                        "content": "Product 2, G4 is also between 2019-1-1 to 2019-3-31, why in the correct answer it is not supposed to be included? Or am I understanding the problem wrong? Thank yo uso much !"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "[@Preksha_Sharma](/Preksha_Sharma) Nice catch!"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "You are probably looking at the seller_id instead of the product_id in sales table."
                    },
                    {
                        "username": "victorpichugov",
                        "content": "In my opinion, it is necessary to take into account the date of the LAST SALE. Take another look at the explanation:\\nThe product with id 2 was sold in the spring of 2019 but was also sold after the spring of 2019.\\n"
                    },
                    {
                        "username": "Preksha_Sharma",
                        "content": "I think it is because we are asked the product which are ONLY in the first three quarter....Focus on that ONLY part\\n"
                    },
                    {
                        "username": "aakriti16",
                        "content": "because G4 also sold on 2019-06-02 which is not first quarter "
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "Select p.product_id, p.product_name\\nfrom Product p join Sales s\\non p.product_id = s.product_id\\ngroup by s.product_id\\nhaving min(s.sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "[@weebhav](/weebhav) Here the problem statement states that report the products that were only sold in the first quarter of 2019. But the product_id 2 was also sold in other quarter so we aren\\'t supposed to include that in our result. That\\'s why we are grouping them by product_id.\\n\\nIf you had grouped them by sale_date then it would have included product_id 2 also which we don\\'t want hence we have to group them by product_id."
                    },
                    {
                        "username": "weebhav",
                        "content": "Hey can you explain the impact group by has in the product_id 2 in the sample example given in the problem? or how does group by work generally in such scenario\\'s.\\nAny reply would be highly appreciated!!"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "like the idea "
                    },
                    {
                        "username": "Chloe4max",
                        "content": "Many people might think my solution is redundant while they only need 1 condition \\'\\'where sale_date < \\'2019-01-01\\' or sale_date > \\'2019-03-31\\'\\' and pass all the test cases. However I think my solution also covers the case when the products have never been sold.\\n\\nselect distinct\\np.product_id,\\np.product_name\\nfrom Product p\\nleft join Sales s on p.product_id = s.product_id\\nwhere sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand p.product_id not in (select distinct product_id from Sales where sale_date > \\'2019-03-31\\' or  sale_date < \\'2019-01-01\\')\\n\\n\\n"
                    },
                    {
                        "username": "ilyastuit",
                        "content": "I have a similar query, but it is failing.\\n\\n```sql\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nINNER JOIN Sales s ON s.product_id = p.product_id\\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' \\nAND p.product_id NOT IN (\\n  SELECT product_id FROM Sales WHERE sale_date < \\'2019-01-01\\' OR sale_date > \\'2019-03-31\\'\\n);\\n```"
                    },
                    {
                        "username": "nikitaTiwari08",
                        "content": "mine is exactly similar to this except I\\'ve used right join (with product being on right ) which shouldn\\'t matter , however it is giving me wrong answer.\\ni don\\'t understand what\\'s wrong with this:\\n\\nselect distinct p.product_id , p.product_name\\nfrom Sales s \\nright join Product p on (s.product_id = p.product_id)\\nwhere s.sale_date  between (\\'2019-01-01\\' AND \\'2019-03-31\\') AND p.product_id not in (select distinct product_id \\n                                                                                  from Sales\\n                                                                                  where sale_date > \\'2019-03-31\\'\\n                                                                                  OR sale_date < \\'2019-01-01\\' )"
                    },
                    {
                        "username": "ssuresh1999",
                        "content": "I think product1  and 2 where sold in spring between 2019-01-01 and 2019-03-31\\nproduct 1 on 1/21 and 2 on 2/17 so why is that only S8 is the correct answer"
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "product_ID 1:Its only sold in spring between 2019-01-01 and 2019-03-31\\nwhere as,\\nproduct_ID 2: Sold in Spring as well as after spring (i.e 2019-06-02) \\nBut in the Description it is mentioned we only need those product which are only sold in spring "
                    },
                    {
                        "username": "bondshinra",
                        "content": "Because we are looking for products ONLY sold in Q1, the G4 was sold in 06-02 as well"
                    },
                    {
                        "username": "Gensun",
                        "content": "# Write your MySQL query statement below\\nSELECT P1.product_id, P1.product_name\\nFROM Product AS P1\\nWHERE P1.product_id NOT IN\\n(SELECT S1.product_id\\nFROM Sales AS S1\\nWHERE S1.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\')"
                    },
                    {
                        "username": "matheus-rodrigues00",
                        "content": "[@Gensun](/Gensun) It\\'s not passing all the tests..."
                    },
                    {
                        "username": "AmadeusSquared",
                        "content": "[@Haidram](/Haidram)  \\n\\n\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nLEFT JOIN Sales s ON p.product_id = s.product_id\\nWHERE s.product_id IS NOT NULL\\nGROUP BY p.product_id, p.product_name\\nHAVING SUM(CASE WHEN s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = COUNT(s.product_id) AND\\n       SUM(CASE WHEN s.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = 0"
                    },
                    {
                        "username": "Haidram",
                        "content": "wrong answer bro......not passing the final test case"
                    },
                    {
                        "username": "Sachi12345",
                        "content": "# Write your MySQL query statement below\\n\\n\\nSELECT product_id,product_NAME FROM Product \\nWHERE product_id IN (\\nSELECT product_id FROM Sales GROUP BY 1 HAVING\\nMAX(sale_date) <= CAST(\\'2019-03-31\\' AS DATE)\\nAND MIN(sale_date) >= CAST(\\'2019-01-01\\' AS DATE))\\n"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "sale_date is already date type."
                    },
                    {
                        "username": "jyothidundi91",
                        "content": "Sorry for dumb question!\\n\\n seller_id | product_id | buyer_id | sale_date  | quantity | price |\\n+-----------+------------+----------+------------+----------+-------+\\n| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |\\n| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |\\n\\nSpring time covers from Jan to Mar, in that case it should be twp records. Can any one help?"
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "that is why there is \"ONLY\" mentioned in the question. So product should not be sold in any other quarter except Jan to mar. I believe it make sense"
                    },
                    {
                        "username": "nynptel",
                        "content": " `select s.product_id, product_name\\nfrom Sales s\\nleft join Product p on s.product_id = p.product_id\\ngroup by product_id\\nhaving min(sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'`"
                    },
                    {
                        "username": "vashdevl",
                        "content": "product Id 2 was sold in feb 17 2019 . why is this not valid row for the spring of 2019 ?\\n    | 2        | 2019-02-17 | 1        | 800"
                    },
                    {
                        "username": "weizhao5",
                        "content": "\\n\\'\\'\\'\\nselect distinct s.product_id,p.product_name \\nfrom sales s join product p on s.product_id = p.product_id\\nwhere s.product_id not in\\n(\\nselect product_id\\nfrom sales\\nwhere not (sale_date between \\'2019-01-01\\' and \\'2019-03-31\\')); \\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1570114,
                "content": [
                    {
                        "username": "AshleyMeow",
                        "content": "Product 2, G4 is also between 2019-1-1 to 2019-3-31, why in the correct answer it is not supposed to be included? Or am I understanding the problem wrong? Thank yo uso much !"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "[@Preksha_Sharma](/Preksha_Sharma) Nice catch!"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "You are probably looking at the seller_id instead of the product_id in sales table."
                    },
                    {
                        "username": "victorpichugov",
                        "content": "In my opinion, it is necessary to take into account the date of the LAST SALE. Take another look at the explanation:\\nThe product with id 2 was sold in the spring of 2019 but was also sold after the spring of 2019.\\n"
                    },
                    {
                        "username": "Preksha_Sharma",
                        "content": "I think it is because we are asked the product which are ONLY in the first three quarter....Focus on that ONLY part\\n"
                    },
                    {
                        "username": "aakriti16",
                        "content": "because G4 also sold on 2019-06-02 which is not first quarter "
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "Select p.product_id, p.product_name\\nfrom Product p join Sales s\\non p.product_id = s.product_id\\ngroup by s.product_id\\nhaving min(s.sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "[@weebhav](/weebhav) Here the problem statement states that report the products that were only sold in the first quarter of 2019. But the product_id 2 was also sold in other quarter so we aren\\'t supposed to include that in our result. That\\'s why we are grouping them by product_id.\\n\\nIf you had grouped them by sale_date then it would have included product_id 2 also which we don\\'t want hence we have to group them by product_id."
                    },
                    {
                        "username": "weebhav",
                        "content": "Hey can you explain the impact group by has in the product_id 2 in the sample example given in the problem? or how does group by work generally in such scenario\\'s.\\nAny reply would be highly appreciated!!"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "like the idea "
                    },
                    {
                        "username": "Chloe4max",
                        "content": "Many people might think my solution is redundant while they only need 1 condition \\'\\'where sale_date < \\'2019-01-01\\' or sale_date > \\'2019-03-31\\'\\' and pass all the test cases. However I think my solution also covers the case when the products have never been sold.\\n\\nselect distinct\\np.product_id,\\np.product_name\\nfrom Product p\\nleft join Sales s on p.product_id = s.product_id\\nwhere sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand p.product_id not in (select distinct product_id from Sales where sale_date > \\'2019-03-31\\' or  sale_date < \\'2019-01-01\\')\\n\\n\\n"
                    },
                    {
                        "username": "ilyastuit",
                        "content": "I have a similar query, but it is failing.\\n\\n```sql\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nINNER JOIN Sales s ON s.product_id = p.product_id\\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' \\nAND p.product_id NOT IN (\\n  SELECT product_id FROM Sales WHERE sale_date < \\'2019-01-01\\' OR sale_date > \\'2019-03-31\\'\\n);\\n```"
                    },
                    {
                        "username": "nikitaTiwari08",
                        "content": "mine is exactly similar to this except I\\'ve used right join (with product being on right ) which shouldn\\'t matter , however it is giving me wrong answer.\\ni don\\'t understand what\\'s wrong with this:\\n\\nselect distinct p.product_id , p.product_name\\nfrom Sales s \\nright join Product p on (s.product_id = p.product_id)\\nwhere s.sale_date  between (\\'2019-01-01\\' AND \\'2019-03-31\\') AND p.product_id not in (select distinct product_id \\n                                                                                  from Sales\\n                                                                                  where sale_date > \\'2019-03-31\\'\\n                                                                                  OR sale_date < \\'2019-01-01\\' )"
                    },
                    {
                        "username": "ssuresh1999",
                        "content": "I think product1  and 2 where sold in spring between 2019-01-01 and 2019-03-31\\nproduct 1 on 1/21 and 2 on 2/17 so why is that only S8 is the correct answer"
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "product_ID 1:Its only sold in spring between 2019-01-01 and 2019-03-31\\nwhere as,\\nproduct_ID 2: Sold in Spring as well as after spring (i.e 2019-06-02) \\nBut in the Description it is mentioned we only need those product which are only sold in spring "
                    },
                    {
                        "username": "bondshinra",
                        "content": "Because we are looking for products ONLY sold in Q1, the G4 was sold in 06-02 as well"
                    },
                    {
                        "username": "Gensun",
                        "content": "# Write your MySQL query statement below\\nSELECT P1.product_id, P1.product_name\\nFROM Product AS P1\\nWHERE P1.product_id NOT IN\\n(SELECT S1.product_id\\nFROM Sales AS S1\\nWHERE S1.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\')"
                    },
                    {
                        "username": "matheus-rodrigues00",
                        "content": "[@Gensun](/Gensun) It\\'s not passing all the tests..."
                    },
                    {
                        "username": "AmadeusSquared",
                        "content": "[@Haidram](/Haidram)  \\n\\n\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nLEFT JOIN Sales s ON p.product_id = s.product_id\\nWHERE s.product_id IS NOT NULL\\nGROUP BY p.product_id, p.product_name\\nHAVING SUM(CASE WHEN s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = COUNT(s.product_id) AND\\n       SUM(CASE WHEN s.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = 0"
                    },
                    {
                        "username": "Haidram",
                        "content": "wrong answer bro......not passing the final test case"
                    },
                    {
                        "username": "Sachi12345",
                        "content": "# Write your MySQL query statement below\\n\\n\\nSELECT product_id,product_NAME FROM Product \\nWHERE product_id IN (\\nSELECT product_id FROM Sales GROUP BY 1 HAVING\\nMAX(sale_date) <= CAST(\\'2019-03-31\\' AS DATE)\\nAND MIN(sale_date) >= CAST(\\'2019-01-01\\' AS DATE))\\n"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "sale_date is already date type."
                    },
                    {
                        "username": "jyothidundi91",
                        "content": "Sorry for dumb question!\\n\\n seller_id | product_id | buyer_id | sale_date  | quantity | price |\\n+-----------+------------+----------+------------+----------+-------+\\n| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |\\n| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |\\n\\nSpring time covers from Jan to Mar, in that case it should be twp records. Can any one help?"
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "that is why there is \"ONLY\" mentioned in the question. So product should not be sold in any other quarter except Jan to mar. I believe it make sense"
                    },
                    {
                        "username": "nynptel",
                        "content": " `select s.product_id, product_name\\nfrom Sales s\\nleft join Product p on s.product_id = p.product_id\\ngroup by product_id\\nhaving min(sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'`"
                    },
                    {
                        "username": "vashdevl",
                        "content": "product Id 2 was sold in feb 17 2019 . why is this not valid row for the spring of 2019 ?\\n    | 2        | 2019-02-17 | 1        | 800"
                    },
                    {
                        "username": "weizhao5",
                        "content": "\\n\\'\\'\\'\\nselect distinct s.product_id,p.product_name \\nfrom sales s join product p on s.product_id = p.product_id\\nwhere s.product_id not in\\n(\\nselect product_id\\nfrom sales\\nwhere not (sale_date between \\'2019-01-01\\' and \\'2019-03-31\\')); \\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1568561,
                "content": [
                    {
                        "username": "AshleyMeow",
                        "content": "Product 2, G4 is also between 2019-1-1 to 2019-3-31, why in the correct answer it is not supposed to be included? Or am I understanding the problem wrong? Thank yo uso much !"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "[@Preksha_Sharma](/Preksha_Sharma) Nice catch!"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "You are probably looking at the seller_id instead of the product_id in sales table."
                    },
                    {
                        "username": "victorpichugov",
                        "content": "In my opinion, it is necessary to take into account the date of the LAST SALE. Take another look at the explanation:\\nThe product with id 2 was sold in the spring of 2019 but was also sold after the spring of 2019.\\n"
                    },
                    {
                        "username": "Preksha_Sharma",
                        "content": "I think it is because we are asked the product which are ONLY in the first three quarter....Focus on that ONLY part\\n"
                    },
                    {
                        "username": "aakriti16",
                        "content": "because G4 also sold on 2019-06-02 which is not first quarter "
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "Select p.product_id, p.product_name\\nfrom Product p join Sales s\\non p.product_id = s.product_id\\ngroup by s.product_id\\nhaving min(s.sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "[@weebhav](/weebhav) Here the problem statement states that report the products that were only sold in the first quarter of 2019. But the product_id 2 was also sold in other quarter so we aren\\'t supposed to include that in our result. That\\'s why we are grouping them by product_id.\\n\\nIf you had grouped them by sale_date then it would have included product_id 2 also which we don\\'t want hence we have to group them by product_id."
                    },
                    {
                        "username": "weebhav",
                        "content": "Hey can you explain the impact group by has in the product_id 2 in the sample example given in the problem? or how does group by work generally in such scenario\\'s.\\nAny reply would be highly appreciated!!"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "like the idea "
                    },
                    {
                        "username": "Chloe4max",
                        "content": "Many people might think my solution is redundant while they only need 1 condition \\'\\'where sale_date < \\'2019-01-01\\' or sale_date > \\'2019-03-31\\'\\' and pass all the test cases. However I think my solution also covers the case when the products have never been sold.\\n\\nselect distinct\\np.product_id,\\np.product_name\\nfrom Product p\\nleft join Sales s on p.product_id = s.product_id\\nwhere sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand p.product_id not in (select distinct product_id from Sales where sale_date > \\'2019-03-31\\' or  sale_date < \\'2019-01-01\\')\\n\\n\\n"
                    },
                    {
                        "username": "ilyastuit",
                        "content": "I have a similar query, but it is failing.\\n\\n```sql\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nINNER JOIN Sales s ON s.product_id = p.product_id\\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' \\nAND p.product_id NOT IN (\\n  SELECT product_id FROM Sales WHERE sale_date < \\'2019-01-01\\' OR sale_date > \\'2019-03-31\\'\\n);\\n```"
                    },
                    {
                        "username": "nikitaTiwari08",
                        "content": "mine is exactly similar to this except I\\'ve used right join (with product being on right ) which shouldn\\'t matter , however it is giving me wrong answer.\\ni don\\'t understand what\\'s wrong with this:\\n\\nselect distinct p.product_id , p.product_name\\nfrom Sales s \\nright join Product p on (s.product_id = p.product_id)\\nwhere s.sale_date  between (\\'2019-01-01\\' AND \\'2019-03-31\\') AND p.product_id not in (select distinct product_id \\n                                                                                  from Sales\\n                                                                                  where sale_date > \\'2019-03-31\\'\\n                                                                                  OR sale_date < \\'2019-01-01\\' )"
                    },
                    {
                        "username": "ssuresh1999",
                        "content": "I think product1  and 2 where sold in spring between 2019-01-01 and 2019-03-31\\nproduct 1 on 1/21 and 2 on 2/17 so why is that only S8 is the correct answer"
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "product_ID 1:Its only sold in spring between 2019-01-01 and 2019-03-31\\nwhere as,\\nproduct_ID 2: Sold in Spring as well as after spring (i.e 2019-06-02) \\nBut in the Description it is mentioned we only need those product which are only sold in spring "
                    },
                    {
                        "username": "bondshinra",
                        "content": "Because we are looking for products ONLY sold in Q1, the G4 was sold in 06-02 as well"
                    },
                    {
                        "username": "Gensun",
                        "content": "# Write your MySQL query statement below\\nSELECT P1.product_id, P1.product_name\\nFROM Product AS P1\\nWHERE P1.product_id NOT IN\\n(SELECT S1.product_id\\nFROM Sales AS S1\\nWHERE S1.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\')"
                    },
                    {
                        "username": "matheus-rodrigues00",
                        "content": "[@Gensun](/Gensun) It\\'s not passing all the tests..."
                    },
                    {
                        "username": "AmadeusSquared",
                        "content": "[@Haidram](/Haidram)  \\n\\n\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nLEFT JOIN Sales s ON p.product_id = s.product_id\\nWHERE s.product_id IS NOT NULL\\nGROUP BY p.product_id, p.product_name\\nHAVING SUM(CASE WHEN s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = COUNT(s.product_id) AND\\n       SUM(CASE WHEN s.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = 0"
                    },
                    {
                        "username": "Haidram",
                        "content": "wrong answer bro......not passing the final test case"
                    },
                    {
                        "username": "Sachi12345",
                        "content": "# Write your MySQL query statement below\\n\\n\\nSELECT product_id,product_NAME FROM Product \\nWHERE product_id IN (\\nSELECT product_id FROM Sales GROUP BY 1 HAVING\\nMAX(sale_date) <= CAST(\\'2019-03-31\\' AS DATE)\\nAND MIN(sale_date) >= CAST(\\'2019-01-01\\' AS DATE))\\n"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "sale_date is already date type."
                    },
                    {
                        "username": "jyothidundi91",
                        "content": "Sorry for dumb question!\\n\\n seller_id | product_id | buyer_id | sale_date  | quantity | price |\\n+-----------+------------+----------+------------+----------+-------+\\n| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |\\n| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |\\n\\nSpring time covers from Jan to Mar, in that case it should be twp records. Can any one help?"
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "that is why there is \"ONLY\" mentioned in the question. So product should not be sold in any other quarter except Jan to mar. I believe it make sense"
                    },
                    {
                        "username": "nynptel",
                        "content": " `select s.product_id, product_name\\nfrom Sales s\\nleft join Product p on s.product_id = p.product_id\\ngroup by product_id\\nhaving min(sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'`"
                    },
                    {
                        "username": "vashdevl",
                        "content": "product Id 2 was sold in feb 17 2019 . why is this not valid row for the spring of 2019 ?\\n    | 2        | 2019-02-17 | 1        | 800"
                    },
                    {
                        "username": "weizhao5",
                        "content": "\\n\\'\\'\\'\\nselect distinct s.product_id,p.product_name \\nfrom sales s join product p on s.product_id = p.product_id\\nwhere s.product_id not in\\n(\\nselect product_id\\nfrom sales\\nwhere not (sale_date between \\'2019-01-01\\' and \\'2019-03-31\\')); \\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1569778,
                "content": [
                    {
                        "username": "AshleyMeow",
                        "content": "Product 2, G4 is also between 2019-1-1 to 2019-3-31, why in the correct answer it is not supposed to be included? Or am I understanding the problem wrong? Thank yo uso much !"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "[@Preksha_Sharma](/Preksha_Sharma) Nice catch!"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "You are probably looking at the seller_id instead of the product_id in sales table."
                    },
                    {
                        "username": "victorpichugov",
                        "content": "In my opinion, it is necessary to take into account the date of the LAST SALE. Take another look at the explanation:\\nThe product with id 2 was sold in the spring of 2019 but was also sold after the spring of 2019.\\n"
                    },
                    {
                        "username": "Preksha_Sharma",
                        "content": "I think it is because we are asked the product which are ONLY in the first three quarter....Focus on that ONLY part\\n"
                    },
                    {
                        "username": "aakriti16",
                        "content": "because G4 also sold on 2019-06-02 which is not first quarter "
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "Select p.product_id, p.product_name\\nfrom Product p join Sales s\\non p.product_id = s.product_id\\ngroup by s.product_id\\nhaving min(s.sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "[@weebhav](/weebhav) Here the problem statement states that report the products that were only sold in the first quarter of 2019. But the product_id 2 was also sold in other quarter so we aren\\'t supposed to include that in our result. That\\'s why we are grouping them by product_id.\\n\\nIf you had grouped them by sale_date then it would have included product_id 2 also which we don\\'t want hence we have to group them by product_id."
                    },
                    {
                        "username": "weebhav",
                        "content": "Hey can you explain the impact group by has in the product_id 2 in the sample example given in the problem? or how does group by work generally in such scenario\\'s.\\nAny reply would be highly appreciated!!"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "like the idea "
                    },
                    {
                        "username": "Chloe4max",
                        "content": "Many people might think my solution is redundant while they only need 1 condition \\'\\'where sale_date < \\'2019-01-01\\' or sale_date > \\'2019-03-31\\'\\' and pass all the test cases. However I think my solution also covers the case when the products have never been sold.\\n\\nselect distinct\\np.product_id,\\np.product_name\\nfrom Product p\\nleft join Sales s on p.product_id = s.product_id\\nwhere sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand p.product_id not in (select distinct product_id from Sales where sale_date > \\'2019-03-31\\' or  sale_date < \\'2019-01-01\\')\\n\\n\\n"
                    },
                    {
                        "username": "ilyastuit",
                        "content": "I have a similar query, but it is failing.\\n\\n```sql\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nINNER JOIN Sales s ON s.product_id = p.product_id\\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' \\nAND p.product_id NOT IN (\\n  SELECT product_id FROM Sales WHERE sale_date < \\'2019-01-01\\' OR sale_date > \\'2019-03-31\\'\\n);\\n```"
                    },
                    {
                        "username": "nikitaTiwari08",
                        "content": "mine is exactly similar to this except I\\'ve used right join (with product being on right ) which shouldn\\'t matter , however it is giving me wrong answer.\\ni don\\'t understand what\\'s wrong with this:\\n\\nselect distinct p.product_id , p.product_name\\nfrom Sales s \\nright join Product p on (s.product_id = p.product_id)\\nwhere s.sale_date  between (\\'2019-01-01\\' AND \\'2019-03-31\\') AND p.product_id not in (select distinct product_id \\n                                                                                  from Sales\\n                                                                                  where sale_date > \\'2019-03-31\\'\\n                                                                                  OR sale_date < \\'2019-01-01\\' )"
                    },
                    {
                        "username": "ssuresh1999",
                        "content": "I think product1  and 2 where sold in spring between 2019-01-01 and 2019-03-31\\nproduct 1 on 1/21 and 2 on 2/17 so why is that only S8 is the correct answer"
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "product_ID 1:Its only sold in spring between 2019-01-01 and 2019-03-31\\nwhere as,\\nproduct_ID 2: Sold in Spring as well as after spring (i.e 2019-06-02) \\nBut in the Description it is mentioned we only need those product which are only sold in spring "
                    },
                    {
                        "username": "bondshinra",
                        "content": "Because we are looking for products ONLY sold in Q1, the G4 was sold in 06-02 as well"
                    },
                    {
                        "username": "Gensun",
                        "content": "# Write your MySQL query statement below\\nSELECT P1.product_id, P1.product_name\\nFROM Product AS P1\\nWHERE P1.product_id NOT IN\\n(SELECT S1.product_id\\nFROM Sales AS S1\\nWHERE S1.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\')"
                    },
                    {
                        "username": "matheus-rodrigues00",
                        "content": "[@Gensun](/Gensun) It\\'s not passing all the tests..."
                    },
                    {
                        "username": "AmadeusSquared",
                        "content": "[@Haidram](/Haidram)  \\n\\n\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nLEFT JOIN Sales s ON p.product_id = s.product_id\\nWHERE s.product_id IS NOT NULL\\nGROUP BY p.product_id, p.product_name\\nHAVING SUM(CASE WHEN s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = COUNT(s.product_id) AND\\n       SUM(CASE WHEN s.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = 0"
                    },
                    {
                        "username": "Haidram",
                        "content": "wrong answer bro......not passing the final test case"
                    },
                    {
                        "username": "Sachi12345",
                        "content": "# Write your MySQL query statement below\\n\\n\\nSELECT product_id,product_NAME FROM Product \\nWHERE product_id IN (\\nSELECT product_id FROM Sales GROUP BY 1 HAVING\\nMAX(sale_date) <= CAST(\\'2019-03-31\\' AS DATE)\\nAND MIN(sale_date) >= CAST(\\'2019-01-01\\' AS DATE))\\n"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "sale_date is already date type."
                    },
                    {
                        "username": "jyothidundi91",
                        "content": "Sorry for dumb question!\\n\\n seller_id | product_id | buyer_id | sale_date  | quantity | price |\\n+-----------+------------+----------+------------+----------+-------+\\n| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |\\n| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |\\n\\nSpring time covers from Jan to Mar, in that case it should be twp records. Can any one help?"
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "that is why there is \"ONLY\" mentioned in the question. So product should not be sold in any other quarter except Jan to mar. I believe it make sense"
                    },
                    {
                        "username": "nynptel",
                        "content": " `select s.product_id, product_name\\nfrom Sales s\\nleft join Product p on s.product_id = p.product_id\\ngroup by product_id\\nhaving min(sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'`"
                    },
                    {
                        "username": "vashdevl",
                        "content": "product Id 2 was sold in feb 17 2019 . why is this not valid row for the spring of 2019 ?\\n    | 2        | 2019-02-17 | 1        | 800"
                    },
                    {
                        "username": "weizhao5",
                        "content": "\\n\\'\\'\\'\\nselect distinct s.product_id,p.product_name \\nfrom sales s join product p on s.product_id = p.product_id\\nwhere s.product_id not in\\n(\\nselect product_id\\nfrom sales\\nwhere not (sale_date between \\'2019-01-01\\' and \\'2019-03-31\\')); \\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1699405,
                "content": [
                    {
                        "username": "AshleyMeow",
                        "content": "Product 2, G4 is also between 2019-1-1 to 2019-3-31, why in the correct answer it is not supposed to be included? Or am I understanding the problem wrong? Thank yo uso much !"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "[@Preksha_Sharma](/Preksha_Sharma) Nice catch!"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "You are probably looking at the seller_id instead of the product_id in sales table."
                    },
                    {
                        "username": "victorpichugov",
                        "content": "In my opinion, it is necessary to take into account the date of the LAST SALE. Take another look at the explanation:\\nThe product with id 2 was sold in the spring of 2019 but was also sold after the spring of 2019.\\n"
                    },
                    {
                        "username": "Preksha_Sharma",
                        "content": "I think it is because we are asked the product which are ONLY in the first three quarter....Focus on that ONLY part\\n"
                    },
                    {
                        "username": "aakriti16",
                        "content": "because G4 also sold on 2019-06-02 which is not first quarter "
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "Select p.product_id, p.product_name\\nfrom Product p join Sales s\\non p.product_id = s.product_id\\ngroup by s.product_id\\nhaving min(s.sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "[@weebhav](/weebhav) Here the problem statement states that report the products that were only sold in the first quarter of 2019. But the product_id 2 was also sold in other quarter so we aren\\'t supposed to include that in our result. That\\'s why we are grouping them by product_id.\\n\\nIf you had grouped them by sale_date then it would have included product_id 2 also which we don\\'t want hence we have to group them by product_id."
                    },
                    {
                        "username": "weebhav",
                        "content": "Hey can you explain the impact group by has in the product_id 2 in the sample example given in the problem? or how does group by work generally in such scenario\\'s.\\nAny reply would be highly appreciated!!"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "like the idea "
                    },
                    {
                        "username": "Chloe4max",
                        "content": "Many people might think my solution is redundant while they only need 1 condition \\'\\'where sale_date < \\'2019-01-01\\' or sale_date > \\'2019-03-31\\'\\' and pass all the test cases. However I think my solution also covers the case when the products have never been sold.\\n\\nselect distinct\\np.product_id,\\np.product_name\\nfrom Product p\\nleft join Sales s on p.product_id = s.product_id\\nwhere sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand p.product_id not in (select distinct product_id from Sales where sale_date > \\'2019-03-31\\' or  sale_date < \\'2019-01-01\\')\\n\\n\\n"
                    },
                    {
                        "username": "ilyastuit",
                        "content": "I have a similar query, but it is failing.\\n\\n```sql\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nINNER JOIN Sales s ON s.product_id = p.product_id\\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' \\nAND p.product_id NOT IN (\\n  SELECT product_id FROM Sales WHERE sale_date < \\'2019-01-01\\' OR sale_date > \\'2019-03-31\\'\\n);\\n```"
                    },
                    {
                        "username": "nikitaTiwari08",
                        "content": "mine is exactly similar to this except I\\'ve used right join (with product being on right ) which shouldn\\'t matter , however it is giving me wrong answer.\\ni don\\'t understand what\\'s wrong with this:\\n\\nselect distinct p.product_id , p.product_name\\nfrom Sales s \\nright join Product p on (s.product_id = p.product_id)\\nwhere s.sale_date  between (\\'2019-01-01\\' AND \\'2019-03-31\\') AND p.product_id not in (select distinct product_id \\n                                                                                  from Sales\\n                                                                                  where sale_date > \\'2019-03-31\\'\\n                                                                                  OR sale_date < \\'2019-01-01\\' )"
                    },
                    {
                        "username": "ssuresh1999",
                        "content": "I think product1  and 2 where sold in spring between 2019-01-01 and 2019-03-31\\nproduct 1 on 1/21 and 2 on 2/17 so why is that only S8 is the correct answer"
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "product_ID 1:Its only sold in spring between 2019-01-01 and 2019-03-31\\nwhere as,\\nproduct_ID 2: Sold in Spring as well as after spring (i.e 2019-06-02) \\nBut in the Description it is mentioned we only need those product which are only sold in spring "
                    },
                    {
                        "username": "bondshinra",
                        "content": "Because we are looking for products ONLY sold in Q1, the G4 was sold in 06-02 as well"
                    },
                    {
                        "username": "Gensun",
                        "content": "# Write your MySQL query statement below\\nSELECT P1.product_id, P1.product_name\\nFROM Product AS P1\\nWHERE P1.product_id NOT IN\\n(SELECT S1.product_id\\nFROM Sales AS S1\\nWHERE S1.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\')"
                    },
                    {
                        "username": "matheus-rodrigues00",
                        "content": "[@Gensun](/Gensun) It\\'s not passing all the tests..."
                    },
                    {
                        "username": "AmadeusSquared",
                        "content": "[@Haidram](/Haidram)  \\n\\n\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nLEFT JOIN Sales s ON p.product_id = s.product_id\\nWHERE s.product_id IS NOT NULL\\nGROUP BY p.product_id, p.product_name\\nHAVING SUM(CASE WHEN s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = COUNT(s.product_id) AND\\n       SUM(CASE WHEN s.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = 0"
                    },
                    {
                        "username": "Haidram",
                        "content": "wrong answer bro......not passing the final test case"
                    },
                    {
                        "username": "Sachi12345",
                        "content": "# Write your MySQL query statement below\\n\\n\\nSELECT product_id,product_NAME FROM Product \\nWHERE product_id IN (\\nSELECT product_id FROM Sales GROUP BY 1 HAVING\\nMAX(sale_date) <= CAST(\\'2019-03-31\\' AS DATE)\\nAND MIN(sale_date) >= CAST(\\'2019-01-01\\' AS DATE))\\n"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "sale_date is already date type."
                    },
                    {
                        "username": "jyothidundi91",
                        "content": "Sorry for dumb question!\\n\\n seller_id | product_id | buyer_id | sale_date  | quantity | price |\\n+-----------+------------+----------+------------+----------+-------+\\n| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |\\n| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |\\n\\nSpring time covers from Jan to Mar, in that case it should be twp records. Can any one help?"
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "that is why there is \"ONLY\" mentioned in the question. So product should not be sold in any other quarter except Jan to mar. I believe it make sense"
                    },
                    {
                        "username": "nynptel",
                        "content": " `select s.product_id, product_name\\nfrom Sales s\\nleft join Product p on s.product_id = p.product_id\\ngroup by product_id\\nhaving min(sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'`"
                    },
                    {
                        "username": "vashdevl",
                        "content": "product Id 2 was sold in feb 17 2019 . why is this not valid row for the spring of 2019 ?\\n    | 2        | 2019-02-17 | 1        | 800"
                    },
                    {
                        "username": "weizhao5",
                        "content": "\\n\\'\\'\\'\\nselect distinct s.product_id,p.product_name \\nfrom sales s join product p on s.product_id = p.product_id\\nwhere s.product_id not in\\n(\\nselect product_id\\nfrom sales\\nwhere not (sale_date between \\'2019-01-01\\' and \\'2019-03-31\\')); \\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1573062,
                "content": [
                    {
                        "username": "AshleyMeow",
                        "content": "Product 2, G4 is also between 2019-1-1 to 2019-3-31, why in the correct answer it is not supposed to be included? Or am I understanding the problem wrong? Thank yo uso much !"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "[@Preksha_Sharma](/Preksha_Sharma) Nice catch!"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "You are probably looking at the seller_id instead of the product_id in sales table."
                    },
                    {
                        "username": "victorpichugov",
                        "content": "In my opinion, it is necessary to take into account the date of the LAST SALE. Take another look at the explanation:\\nThe product with id 2 was sold in the spring of 2019 but was also sold after the spring of 2019.\\n"
                    },
                    {
                        "username": "Preksha_Sharma",
                        "content": "I think it is because we are asked the product which are ONLY in the first three quarter....Focus on that ONLY part\\n"
                    },
                    {
                        "username": "aakriti16",
                        "content": "because G4 also sold on 2019-06-02 which is not first quarter "
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "Select p.product_id, p.product_name\\nfrom Product p join Sales s\\non p.product_id = s.product_id\\ngroup by s.product_id\\nhaving min(s.sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "[@weebhav](/weebhav) Here the problem statement states that report the products that were only sold in the first quarter of 2019. But the product_id 2 was also sold in other quarter so we aren\\'t supposed to include that in our result. That\\'s why we are grouping them by product_id.\\n\\nIf you had grouped them by sale_date then it would have included product_id 2 also which we don\\'t want hence we have to group them by product_id."
                    },
                    {
                        "username": "weebhav",
                        "content": "Hey can you explain the impact group by has in the product_id 2 in the sample example given in the problem? or how does group by work generally in such scenario\\'s.\\nAny reply would be highly appreciated!!"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "like the idea "
                    },
                    {
                        "username": "Chloe4max",
                        "content": "Many people might think my solution is redundant while they only need 1 condition \\'\\'where sale_date < \\'2019-01-01\\' or sale_date > \\'2019-03-31\\'\\' and pass all the test cases. However I think my solution also covers the case when the products have never been sold.\\n\\nselect distinct\\np.product_id,\\np.product_name\\nfrom Product p\\nleft join Sales s on p.product_id = s.product_id\\nwhere sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand p.product_id not in (select distinct product_id from Sales where sale_date > \\'2019-03-31\\' or  sale_date < \\'2019-01-01\\')\\n\\n\\n"
                    },
                    {
                        "username": "ilyastuit",
                        "content": "I have a similar query, but it is failing.\\n\\n```sql\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nINNER JOIN Sales s ON s.product_id = p.product_id\\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' \\nAND p.product_id NOT IN (\\n  SELECT product_id FROM Sales WHERE sale_date < \\'2019-01-01\\' OR sale_date > \\'2019-03-31\\'\\n);\\n```"
                    },
                    {
                        "username": "nikitaTiwari08",
                        "content": "mine is exactly similar to this except I\\'ve used right join (with product being on right ) which shouldn\\'t matter , however it is giving me wrong answer.\\ni don\\'t understand what\\'s wrong with this:\\n\\nselect distinct p.product_id , p.product_name\\nfrom Sales s \\nright join Product p on (s.product_id = p.product_id)\\nwhere s.sale_date  between (\\'2019-01-01\\' AND \\'2019-03-31\\') AND p.product_id not in (select distinct product_id \\n                                                                                  from Sales\\n                                                                                  where sale_date > \\'2019-03-31\\'\\n                                                                                  OR sale_date < \\'2019-01-01\\' )"
                    },
                    {
                        "username": "ssuresh1999",
                        "content": "I think product1  and 2 where sold in spring between 2019-01-01 and 2019-03-31\\nproduct 1 on 1/21 and 2 on 2/17 so why is that only S8 is the correct answer"
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "product_ID 1:Its only sold in spring between 2019-01-01 and 2019-03-31\\nwhere as,\\nproduct_ID 2: Sold in Spring as well as after spring (i.e 2019-06-02) \\nBut in the Description it is mentioned we only need those product which are only sold in spring "
                    },
                    {
                        "username": "bondshinra",
                        "content": "Because we are looking for products ONLY sold in Q1, the G4 was sold in 06-02 as well"
                    },
                    {
                        "username": "Gensun",
                        "content": "# Write your MySQL query statement below\\nSELECT P1.product_id, P1.product_name\\nFROM Product AS P1\\nWHERE P1.product_id NOT IN\\n(SELECT S1.product_id\\nFROM Sales AS S1\\nWHERE S1.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\')"
                    },
                    {
                        "username": "matheus-rodrigues00",
                        "content": "[@Gensun](/Gensun) It\\'s not passing all the tests..."
                    },
                    {
                        "username": "AmadeusSquared",
                        "content": "[@Haidram](/Haidram)  \\n\\n\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nLEFT JOIN Sales s ON p.product_id = s.product_id\\nWHERE s.product_id IS NOT NULL\\nGROUP BY p.product_id, p.product_name\\nHAVING SUM(CASE WHEN s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = COUNT(s.product_id) AND\\n       SUM(CASE WHEN s.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = 0"
                    },
                    {
                        "username": "Haidram",
                        "content": "wrong answer bro......not passing the final test case"
                    },
                    {
                        "username": "Sachi12345",
                        "content": "# Write your MySQL query statement below\\n\\n\\nSELECT product_id,product_NAME FROM Product \\nWHERE product_id IN (\\nSELECT product_id FROM Sales GROUP BY 1 HAVING\\nMAX(sale_date) <= CAST(\\'2019-03-31\\' AS DATE)\\nAND MIN(sale_date) >= CAST(\\'2019-01-01\\' AS DATE))\\n"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "sale_date is already date type."
                    },
                    {
                        "username": "jyothidundi91",
                        "content": "Sorry for dumb question!\\n\\n seller_id | product_id | buyer_id | sale_date  | quantity | price |\\n+-----------+------------+----------+------------+----------+-------+\\n| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |\\n| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |\\n\\nSpring time covers from Jan to Mar, in that case it should be twp records. Can any one help?"
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "that is why there is \"ONLY\" mentioned in the question. So product should not be sold in any other quarter except Jan to mar. I believe it make sense"
                    },
                    {
                        "username": "nynptel",
                        "content": " `select s.product_id, product_name\\nfrom Sales s\\nleft join Product p on s.product_id = p.product_id\\ngroup by product_id\\nhaving min(sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'`"
                    },
                    {
                        "username": "vashdevl",
                        "content": "product Id 2 was sold in feb 17 2019 . why is this not valid row for the spring of 2019 ?\\n    | 2        | 2019-02-17 | 1        | 800"
                    },
                    {
                        "username": "weizhao5",
                        "content": "\\n\\'\\'\\'\\nselect distinct s.product_id,p.product_name \\nfrom sales s join product p on s.product_id = p.product_id\\nwhere s.product_id not in\\n(\\nselect product_id\\nfrom sales\\nwhere not (sale_date between \\'2019-01-01\\' and \\'2019-03-31\\')); \\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1574954,
                "content": [
                    {
                        "username": "AshleyMeow",
                        "content": "Product 2, G4 is also between 2019-1-1 to 2019-3-31, why in the correct answer it is not supposed to be included? Or am I understanding the problem wrong? Thank yo uso much !"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "[@Preksha_Sharma](/Preksha_Sharma) Nice catch!"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "You are probably looking at the seller_id instead of the product_id in sales table."
                    },
                    {
                        "username": "victorpichugov",
                        "content": "In my opinion, it is necessary to take into account the date of the LAST SALE. Take another look at the explanation:\\nThe product with id 2 was sold in the spring of 2019 but was also sold after the spring of 2019.\\n"
                    },
                    {
                        "username": "Preksha_Sharma",
                        "content": "I think it is because we are asked the product which are ONLY in the first three quarter....Focus on that ONLY part\\n"
                    },
                    {
                        "username": "aakriti16",
                        "content": "because G4 also sold on 2019-06-02 which is not first quarter "
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "Select p.product_id, p.product_name\\nfrom Product p join Sales s\\non p.product_id = s.product_id\\ngroup by s.product_id\\nhaving min(s.sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "[@weebhav](/weebhav) Here the problem statement states that report the products that were only sold in the first quarter of 2019. But the product_id 2 was also sold in other quarter so we aren\\'t supposed to include that in our result. That\\'s why we are grouping them by product_id.\\n\\nIf you had grouped them by sale_date then it would have included product_id 2 also which we don\\'t want hence we have to group them by product_id."
                    },
                    {
                        "username": "weebhav",
                        "content": "Hey can you explain the impact group by has in the product_id 2 in the sample example given in the problem? or how does group by work generally in such scenario\\'s.\\nAny reply would be highly appreciated!!"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "like the idea "
                    },
                    {
                        "username": "Chloe4max",
                        "content": "Many people might think my solution is redundant while they only need 1 condition \\'\\'where sale_date < \\'2019-01-01\\' or sale_date > \\'2019-03-31\\'\\' and pass all the test cases. However I think my solution also covers the case when the products have never been sold.\\n\\nselect distinct\\np.product_id,\\np.product_name\\nfrom Product p\\nleft join Sales s on p.product_id = s.product_id\\nwhere sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand p.product_id not in (select distinct product_id from Sales where sale_date > \\'2019-03-31\\' or  sale_date < \\'2019-01-01\\')\\n\\n\\n"
                    },
                    {
                        "username": "ilyastuit",
                        "content": "I have a similar query, but it is failing.\\n\\n```sql\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nINNER JOIN Sales s ON s.product_id = p.product_id\\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' \\nAND p.product_id NOT IN (\\n  SELECT product_id FROM Sales WHERE sale_date < \\'2019-01-01\\' OR sale_date > \\'2019-03-31\\'\\n);\\n```"
                    },
                    {
                        "username": "nikitaTiwari08",
                        "content": "mine is exactly similar to this except I\\'ve used right join (with product being on right ) which shouldn\\'t matter , however it is giving me wrong answer.\\ni don\\'t understand what\\'s wrong with this:\\n\\nselect distinct p.product_id , p.product_name\\nfrom Sales s \\nright join Product p on (s.product_id = p.product_id)\\nwhere s.sale_date  between (\\'2019-01-01\\' AND \\'2019-03-31\\') AND p.product_id not in (select distinct product_id \\n                                                                                  from Sales\\n                                                                                  where sale_date > \\'2019-03-31\\'\\n                                                                                  OR sale_date < \\'2019-01-01\\' )"
                    },
                    {
                        "username": "ssuresh1999",
                        "content": "I think product1  and 2 where sold in spring between 2019-01-01 and 2019-03-31\\nproduct 1 on 1/21 and 2 on 2/17 so why is that only S8 is the correct answer"
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "product_ID 1:Its only sold in spring between 2019-01-01 and 2019-03-31\\nwhere as,\\nproduct_ID 2: Sold in Spring as well as after spring (i.e 2019-06-02) \\nBut in the Description it is mentioned we only need those product which are only sold in spring "
                    },
                    {
                        "username": "bondshinra",
                        "content": "Because we are looking for products ONLY sold in Q1, the G4 was sold in 06-02 as well"
                    },
                    {
                        "username": "Gensun",
                        "content": "# Write your MySQL query statement below\\nSELECT P1.product_id, P1.product_name\\nFROM Product AS P1\\nWHERE P1.product_id NOT IN\\n(SELECT S1.product_id\\nFROM Sales AS S1\\nWHERE S1.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\')"
                    },
                    {
                        "username": "matheus-rodrigues00",
                        "content": "[@Gensun](/Gensun) It\\'s not passing all the tests..."
                    },
                    {
                        "username": "AmadeusSquared",
                        "content": "[@Haidram](/Haidram)  \\n\\n\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nLEFT JOIN Sales s ON p.product_id = s.product_id\\nWHERE s.product_id IS NOT NULL\\nGROUP BY p.product_id, p.product_name\\nHAVING SUM(CASE WHEN s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = COUNT(s.product_id) AND\\n       SUM(CASE WHEN s.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = 0"
                    },
                    {
                        "username": "Haidram",
                        "content": "wrong answer bro......not passing the final test case"
                    },
                    {
                        "username": "Sachi12345",
                        "content": "# Write your MySQL query statement below\\n\\n\\nSELECT product_id,product_NAME FROM Product \\nWHERE product_id IN (\\nSELECT product_id FROM Sales GROUP BY 1 HAVING\\nMAX(sale_date) <= CAST(\\'2019-03-31\\' AS DATE)\\nAND MIN(sale_date) >= CAST(\\'2019-01-01\\' AS DATE))\\n"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "sale_date is already date type."
                    },
                    {
                        "username": "jyothidundi91",
                        "content": "Sorry for dumb question!\\n\\n seller_id | product_id | buyer_id | sale_date  | quantity | price |\\n+-----------+------------+----------+------------+----------+-------+\\n| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |\\n| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |\\n\\nSpring time covers from Jan to Mar, in that case it should be twp records. Can any one help?"
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "that is why there is \"ONLY\" mentioned in the question. So product should not be sold in any other quarter except Jan to mar. I believe it make sense"
                    },
                    {
                        "username": "nynptel",
                        "content": " `select s.product_id, product_name\\nfrom Sales s\\nleft join Product p on s.product_id = p.product_id\\ngroup by product_id\\nhaving min(sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'`"
                    },
                    {
                        "username": "vashdevl",
                        "content": "product Id 2 was sold in feb 17 2019 . why is this not valid row for the spring of 2019 ?\\n    | 2        | 2019-02-17 | 1        | 800"
                    },
                    {
                        "username": "weizhao5",
                        "content": "\\n\\'\\'\\'\\nselect distinct s.product_id,p.product_name \\nfrom sales s join product p on s.product_id = p.product_id\\nwhere s.product_id not in\\n(\\nselect product_id\\nfrom sales\\nwhere not (sale_date between \\'2019-01-01\\' and \\'2019-03-31\\')); \\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1566151,
                "content": [
                    {
                        "username": "AshleyMeow",
                        "content": "Product 2, G4 is also between 2019-1-1 to 2019-3-31, why in the correct answer it is not supposed to be included? Or am I understanding the problem wrong? Thank yo uso much !"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "[@Preksha_Sharma](/Preksha_Sharma) Nice catch!"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "You are probably looking at the seller_id instead of the product_id in sales table."
                    },
                    {
                        "username": "victorpichugov",
                        "content": "In my opinion, it is necessary to take into account the date of the LAST SALE. Take another look at the explanation:\\nThe product with id 2 was sold in the spring of 2019 but was also sold after the spring of 2019.\\n"
                    },
                    {
                        "username": "Preksha_Sharma",
                        "content": "I think it is because we are asked the product which are ONLY in the first three quarter....Focus on that ONLY part\\n"
                    },
                    {
                        "username": "aakriti16",
                        "content": "because G4 also sold on 2019-06-02 which is not first quarter "
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "Select p.product_id, p.product_name\\nfrom Product p join Sales s\\non p.product_id = s.product_id\\ngroup by s.product_id\\nhaving min(s.sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "[@weebhav](/weebhav) Here the problem statement states that report the products that were only sold in the first quarter of 2019. But the product_id 2 was also sold in other quarter so we aren\\'t supposed to include that in our result. That\\'s why we are grouping them by product_id.\\n\\nIf you had grouped them by sale_date then it would have included product_id 2 also which we don\\'t want hence we have to group them by product_id."
                    },
                    {
                        "username": "weebhav",
                        "content": "Hey can you explain the impact group by has in the product_id 2 in the sample example given in the problem? or how does group by work generally in such scenario\\'s.\\nAny reply would be highly appreciated!!"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "like the idea "
                    },
                    {
                        "username": "Chloe4max",
                        "content": "Many people might think my solution is redundant while they only need 1 condition \\'\\'where sale_date < \\'2019-01-01\\' or sale_date > \\'2019-03-31\\'\\' and pass all the test cases. However I think my solution also covers the case when the products have never been sold.\\n\\nselect distinct\\np.product_id,\\np.product_name\\nfrom Product p\\nleft join Sales s on p.product_id = s.product_id\\nwhere sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand p.product_id not in (select distinct product_id from Sales where sale_date > \\'2019-03-31\\' or  sale_date < \\'2019-01-01\\')\\n\\n\\n"
                    },
                    {
                        "username": "ilyastuit",
                        "content": "I have a similar query, but it is failing.\\n\\n```sql\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nINNER JOIN Sales s ON s.product_id = p.product_id\\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' \\nAND p.product_id NOT IN (\\n  SELECT product_id FROM Sales WHERE sale_date < \\'2019-01-01\\' OR sale_date > \\'2019-03-31\\'\\n);\\n```"
                    },
                    {
                        "username": "nikitaTiwari08",
                        "content": "mine is exactly similar to this except I\\'ve used right join (with product being on right ) which shouldn\\'t matter , however it is giving me wrong answer.\\ni don\\'t understand what\\'s wrong with this:\\n\\nselect distinct p.product_id , p.product_name\\nfrom Sales s \\nright join Product p on (s.product_id = p.product_id)\\nwhere s.sale_date  between (\\'2019-01-01\\' AND \\'2019-03-31\\') AND p.product_id not in (select distinct product_id \\n                                                                                  from Sales\\n                                                                                  where sale_date > \\'2019-03-31\\'\\n                                                                                  OR sale_date < \\'2019-01-01\\' )"
                    },
                    {
                        "username": "ssuresh1999",
                        "content": "I think product1  and 2 where sold in spring between 2019-01-01 and 2019-03-31\\nproduct 1 on 1/21 and 2 on 2/17 so why is that only S8 is the correct answer"
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "product_ID 1:Its only sold in spring between 2019-01-01 and 2019-03-31\\nwhere as,\\nproduct_ID 2: Sold in Spring as well as after spring (i.e 2019-06-02) \\nBut in the Description it is mentioned we only need those product which are only sold in spring "
                    },
                    {
                        "username": "bondshinra",
                        "content": "Because we are looking for products ONLY sold in Q1, the G4 was sold in 06-02 as well"
                    },
                    {
                        "username": "Gensun",
                        "content": "# Write your MySQL query statement below\\nSELECT P1.product_id, P1.product_name\\nFROM Product AS P1\\nWHERE P1.product_id NOT IN\\n(SELECT S1.product_id\\nFROM Sales AS S1\\nWHERE S1.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\')"
                    },
                    {
                        "username": "matheus-rodrigues00",
                        "content": "[@Gensun](/Gensun) It\\'s not passing all the tests..."
                    },
                    {
                        "username": "AmadeusSquared",
                        "content": "[@Haidram](/Haidram)  \\n\\n\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nLEFT JOIN Sales s ON p.product_id = s.product_id\\nWHERE s.product_id IS NOT NULL\\nGROUP BY p.product_id, p.product_name\\nHAVING SUM(CASE WHEN s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = COUNT(s.product_id) AND\\n       SUM(CASE WHEN s.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = 0"
                    },
                    {
                        "username": "Haidram",
                        "content": "wrong answer bro......not passing the final test case"
                    },
                    {
                        "username": "Sachi12345",
                        "content": "# Write your MySQL query statement below\\n\\n\\nSELECT product_id,product_NAME FROM Product \\nWHERE product_id IN (\\nSELECT product_id FROM Sales GROUP BY 1 HAVING\\nMAX(sale_date) <= CAST(\\'2019-03-31\\' AS DATE)\\nAND MIN(sale_date) >= CAST(\\'2019-01-01\\' AS DATE))\\n"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "sale_date is already date type."
                    },
                    {
                        "username": "jyothidundi91",
                        "content": "Sorry for dumb question!\\n\\n seller_id | product_id | buyer_id | sale_date  | quantity | price |\\n+-----------+------------+----------+------------+----------+-------+\\n| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |\\n| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |\\n\\nSpring time covers from Jan to Mar, in that case it should be twp records. Can any one help?"
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "that is why there is \"ONLY\" mentioned in the question. So product should not be sold in any other quarter except Jan to mar. I believe it make sense"
                    },
                    {
                        "username": "nynptel",
                        "content": " `select s.product_id, product_name\\nfrom Sales s\\nleft join Product p on s.product_id = p.product_id\\ngroup by product_id\\nhaving min(sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'`"
                    },
                    {
                        "username": "vashdevl",
                        "content": "product Id 2 was sold in feb 17 2019 . why is this not valid row for the spring of 2019 ?\\n    | 2        | 2019-02-17 | 1        | 800"
                    },
                    {
                        "username": "weizhao5",
                        "content": "\\n\\'\\'\\'\\nselect distinct s.product_id,p.product_name \\nfrom sales s join product p on s.product_id = p.product_id\\nwhere s.product_id not in\\n(\\nselect product_id\\nfrom sales\\nwhere not (sale_date between \\'2019-01-01\\' and \\'2019-03-31\\')); \\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1717077,
                "content": [
                    {
                        "username": "AshleyMeow",
                        "content": "Product 2, G4 is also between 2019-1-1 to 2019-3-31, why in the correct answer it is not supposed to be included? Or am I understanding the problem wrong? Thank yo uso much !"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "[@Preksha_Sharma](/Preksha_Sharma) Nice catch!"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "You are probably looking at the seller_id instead of the product_id in sales table."
                    },
                    {
                        "username": "victorpichugov",
                        "content": "In my opinion, it is necessary to take into account the date of the LAST SALE. Take another look at the explanation:\\nThe product with id 2 was sold in the spring of 2019 but was also sold after the spring of 2019.\\n"
                    },
                    {
                        "username": "Preksha_Sharma",
                        "content": "I think it is because we are asked the product which are ONLY in the first three quarter....Focus on that ONLY part\\n"
                    },
                    {
                        "username": "aakriti16",
                        "content": "because G4 also sold on 2019-06-02 which is not first quarter "
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "Select p.product_id, p.product_name\\nfrom Product p join Sales s\\non p.product_id = s.product_id\\ngroup by s.product_id\\nhaving min(s.sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "[@weebhav](/weebhav) Here the problem statement states that report the products that were only sold in the first quarter of 2019. But the product_id 2 was also sold in other quarter so we aren\\'t supposed to include that in our result. That\\'s why we are grouping them by product_id.\\n\\nIf you had grouped them by sale_date then it would have included product_id 2 also which we don\\'t want hence we have to group them by product_id."
                    },
                    {
                        "username": "weebhav",
                        "content": "Hey can you explain the impact group by has in the product_id 2 in the sample example given in the problem? or how does group by work generally in such scenario\\'s.\\nAny reply would be highly appreciated!!"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "like the idea "
                    },
                    {
                        "username": "Chloe4max",
                        "content": "Many people might think my solution is redundant while they only need 1 condition \\'\\'where sale_date < \\'2019-01-01\\' or sale_date > \\'2019-03-31\\'\\' and pass all the test cases. However I think my solution also covers the case when the products have never been sold.\\n\\nselect distinct\\np.product_id,\\np.product_name\\nfrom Product p\\nleft join Sales s on p.product_id = s.product_id\\nwhere sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand p.product_id not in (select distinct product_id from Sales where sale_date > \\'2019-03-31\\' or  sale_date < \\'2019-01-01\\')\\n\\n\\n"
                    },
                    {
                        "username": "ilyastuit",
                        "content": "I have a similar query, but it is failing.\\n\\n```sql\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nINNER JOIN Sales s ON s.product_id = p.product_id\\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' \\nAND p.product_id NOT IN (\\n  SELECT product_id FROM Sales WHERE sale_date < \\'2019-01-01\\' OR sale_date > \\'2019-03-31\\'\\n);\\n```"
                    },
                    {
                        "username": "nikitaTiwari08",
                        "content": "mine is exactly similar to this except I\\'ve used right join (with product being on right ) which shouldn\\'t matter , however it is giving me wrong answer.\\ni don\\'t understand what\\'s wrong with this:\\n\\nselect distinct p.product_id , p.product_name\\nfrom Sales s \\nright join Product p on (s.product_id = p.product_id)\\nwhere s.sale_date  between (\\'2019-01-01\\' AND \\'2019-03-31\\') AND p.product_id not in (select distinct product_id \\n                                                                                  from Sales\\n                                                                                  where sale_date > \\'2019-03-31\\'\\n                                                                                  OR sale_date < \\'2019-01-01\\' )"
                    },
                    {
                        "username": "ssuresh1999",
                        "content": "I think product1  and 2 where sold in spring between 2019-01-01 and 2019-03-31\\nproduct 1 on 1/21 and 2 on 2/17 so why is that only S8 is the correct answer"
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "product_ID 1:Its only sold in spring between 2019-01-01 and 2019-03-31\\nwhere as,\\nproduct_ID 2: Sold in Spring as well as after spring (i.e 2019-06-02) \\nBut in the Description it is mentioned we only need those product which are only sold in spring "
                    },
                    {
                        "username": "bondshinra",
                        "content": "Because we are looking for products ONLY sold in Q1, the G4 was sold in 06-02 as well"
                    },
                    {
                        "username": "Gensun",
                        "content": "# Write your MySQL query statement below\\nSELECT P1.product_id, P1.product_name\\nFROM Product AS P1\\nWHERE P1.product_id NOT IN\\n(SELECT S1.product_id\\nFROM Sales AS S1\\nWHERE S1.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\')"
                    },
                    {
                        "username": "matheus-rodrigues00",
                        "content": "[@Gensun](/Gensun) It\\'s not passing all the tests..."
                    },
                    {
                        "username": "AmadeusSquared",
                        "content": "[@Haidram](/Haidram)  \\n\\n\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nLEFT JOIN Sales s ON p.product_id = s.product_id\\nWHERE s.product_id IS NOT NULL\\nGROUP BY p.product_id, p.product_name\\nHAVING SUM(CASE WHEN s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = COUNT(s.product_id) AND\\n       SUM(CASE WHEN s.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = 0"
                    },
                    {
                        "username": "Haidram",
                        "content": "wrong answer bro......not passing the final test case"
                    },
                    {
                        "username": "Sachi12345",
                        "content": "# Write your MySQL query statement below\\n\\n\\nSELECT product_id,product_NAME FROM Product \\nWHERE product_id IN (\\nSELECT product_id FROM Sales GROUP BY 1 HAVING\\nMAX(sale_date) <= CAST(\\'2019-03-31\\' AS DATE)\\nAND MIN(sale_date) >= CAST(\\'2019-01-01\\' AS DATE))\\n"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "sale_date is already date type."
                    },
                    {
                        "username": "jyothidundi91",
                        "content": "Sorry for dumb question!\\n\\n seller_id | product_id | buyer_id | sale_date  | quantity | price |\\n+-----------+------------+----------+------------+----------+-------+\\n| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |\\n| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |\\n\\nSpring time covers from Jan to Mar, in that case it should be twp records. Can any one help?"
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "that is why there is \"ONLY\" mentioned in the question. So product should not be sold in any other quarter except Jan to mar. I believe it make sense"
                    },
                    {
                        "username": "nynptel",
                        "content": " `select s.product_id, product_name\\nfrom Sales s\\nleft join Product p on s.product_id = p.product_id\\ngroup by product_id\\nhaving min(sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'`"
                    },
                    {
                        "username": "vashdevl",
                        "content": "product Id 2 was sold in feb 17 2019 . why is this not valid row for the spring of 2019 ?\\n    | 2        | 2019-02-17 | 1        | 800"
                    },
                    {
                        "username": "weizhao5",
                        "content": "\\n\\'\\'\\'\\nselect distinct s.product_id,p.product_name \\nfrom sales s join product p on s.product_id = p.product_id\\nwhere s.product_id not in\\n(\\nselect product_id\\nfrom sales\\nwhere not (sale_date between \\'2019-01-01\\' and \\'2019-03-31\\')); \\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1576616,
                "content": [
                    {
                        "username": "AshleyMeow",
                        "content": "Product 2, G4 is also between 2019-1-1 to 2019-3-31, why in the correct answer it is not supposed to be included? Or am I understanding the problem wrong? Thank yo uso much !"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "[@Preksha_Sharma](/Preksha_Sharma) Nice catch!"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "You are probably looking at the seller_id instead of the product_id in sales table."
                    },
                    {
                        "username": "victorpichugov",
                        "content": "In my opinion, it is necessary to take into account the date of the LAST SALE. Take another look at the explanation:\\nThe product with id 2 was sold in the spring of 2019 but was also sold after the spring of 2019.\\n"
                    },
                    {
                        "username": "Preksha_Sharma",
                        "content": "I think it is because we are asked the product which are ONLY in the first three quarter....Focus on that ONLY part\\n"
                    },
                    {
                        "username": "aakriti16",
                        "content": "because G4 also sold on 2019-06-02 which is not first quarter "
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "Select p.product_id, p.product_name\\nfrom Product p join Sales s\\non p.product_id = s.product_id\\ngroup by s.product_id\\nhaving min(s.sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "[@weebhav](/weebhav) Here the problem statement states that report the products that were only sold in the first quarter of 2019. But the product_id 2 was also sold in other quarter so we aren\\'t supposed to include that in our result. That\\'s why we are grouping them by product_id.\\n\\nIf you had grouped them by sale_date then it would have included product_id 2 also which we don\\'t want hence we have to group them by product_id."
                    },
                    {
                        "username": "weebhav",
                        "content": "Hey can you explain the impact group by has in the product_id 2 in the sample example given in the problem? or how does group by work generally in such scenario\\'s.\\nAny reply would be highly appreciated!!"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "like the idea "
                    },
                    {
                        "username": "Chloe4max",
                        "content": "Many people might think my solution is redundant while they only need 1 condition \\'\\'where sale_date < \\'2019-01-01\\' or sale_date > \\'2019-03-31\\'\\' and pass all the test cases. However I think my solution also covers the case when the products have never been sold.\\n\\nselect distinct\\np.product_id,\\np.product_name\\nfrom Product p\\nleft join Sales s on p.product_id = s.product_id\\nwhere sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand p.product_id not in (select distinct product_id from Sales where sale_date > \\'2019-03-31\\' or  sale_date < \\'2019-01-01\\')\\n\\n\\n"
                    },
                    {
                        "username": "ilyastuit",
                        "content": "I have a similar query, but it is failing.\\n\\n```sql\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nINNER JOIN Sales s ON s.product_id = p.product_id\\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' \\nAND p.product_id NOT IN (\\n  SELECT product_id FROM Sales WHERE sale_date < \\'2019-01-01\\' OR sale_date > \\'2019-03-31\\'\\n);\\n```"
                    },
                    {
                        "username": "nikitaTiwari08",
                        "content": "mine is exactly similar to this except I\\'ve used right join (with product being on right ) which shouldn\\'t matter , however it is giving me wrong answer.\\ni don\\'t understand what\\'s wrong with this:\\n\\nselect distinct p.product_id , p.product_name\\nfrom Sales s \\nright join Product p on (s.product_id = p.product_id)\\nwhere s.sale_date  between (\\'2019-01-01\\' AND \\'2019-03-31\\') AND p.product_id not in (select distinct product_id \\n                                                                                  from Sales\\n                                                                                  where sale_date > \\'2019-03-31\\'\\n                                                                                  OR sale_date < \\'2019-01-01\\' )"
                    },
                    {
                        "username": "ssuresh1999",
                        "content": "I think product1  and 2 where sold in spring between 2019-01-01 and 2019-03-31\\nproduct 1 on 1/21 and 2 on 2/17 so why is that only S8 is the correct answer"
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "product_ID 1:Its only sold in spring between 2019-01-01 and 2019-03-31\\nwhere as,\\nproduct_ID 2: Sold in Spring as well as after spring (i.e 2019-06-02) \\nBut in the Description it is mentioned we only need those product which are only sold in spring "
                    },
                    {
                        "username": "bondshinra",
                        "content": "Because we are looking for products ONLY sold in Q1, the G4 was sold in 06-02 as well"
                    },
                    {
                        "username": "Gensun",
                        "content": "# Write your MySQL query statement below\\nSELECT P1.product_id, P1.product_name\\nFROM Product AS P1\\nWHERE P1.product_id NOT IN\\n(SELECT S1.product_id\\nFROM Sales AS S1\\nWHERE S1.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\')"
                    },
                    {
                        "username": "matheus-rodrigues00",
                        "content": "[@Gensun](/Gensun) It\\'s not passing all the tests..."
                    },
                    {
                        "username": "AmadeusSquared",
                        "content": "[@Haidram](/Haidram)  \\n\\n\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nLEFT JOIN Sales s ON p.product_id = s.product_id\\nWHERE s.product_id IS NOT NULL\\nGROUP BY p.product_id, p.product_name\\nHAVING SUM(CASE WHEN s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = COUNT(s.product_id) AND\\n       SUM(CASE WHEN s.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = 0"
                    },
                    {
                        "username": "Haidram",
                        "content": "wrong answer bro......not passing the final test case"
                    },
                    {
                        "username": "Sachi12345",
                        "content": "# Write your MySQL query statement below\\n\\n\\nSELECT product_id,product_NAME FROM Product \\nWHERE product_id IN (\\nSELECT product_id FROM Sales GROUP BY 1 HAVING\\nMAX(sale_date) <= CAST(\\'2019-03-31\\' AS DATE)\\nAND MIN(sale_date) >= CAST(\\'2019-01-01\\' AS DATE))\\n"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "sale_date is already date type."
                    },
                    {
                        "username": "jyothidundi91",
                        "content": "Sorry for dumb question!\\n\\n seller_id | product_id | buyer_id | sale_date  | quantity | price |\\n+-----------+------------+----------+------------+----------+-------+\\n| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |\\n| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |\\n\\nSpring time covers from Jan to Mar, in that case it should be twp records. Can any one help?"
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "that is why there is \"ONLY\" mentioned in the question. So product should not be sold in any other quarter except Jan to mar. I believe it make sense"
                    },
                    {
                        "username": "nynptel",
                        "content": " `select s.product_id, product_name\\nfrom Sales s\\nleft join Product p on s.product_id = p.product_id\\ngroup by product_id\\nhaving min(sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'`"
                    },
                    {
                        "username": "vashdevl",
                        "content": "product Id 2 was sold in feb 17 2019 . why is this not valid row for the spring of 2019 ?\\n    | 2        | 2019-02-17 | 1        | 800"
                    },
                    {
                        "username": "weizhao5",
                        "content": "\\n\\'\\'\\'\\nselect distinct s.product_id,p.product_name \\nfrom sales s join product p on s.product_id = p.product_id\\nwhere s.product_id not in\\n(\\nselect product_id\\nfrom sales\\nwhere not (sale_date between \\'2019-01-01\\' and \\'2019-03-31\\')); \\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1570629,
                "content": [
                    {
                        "username": "AshleyMeow",
                        "content": "Product 2, G4 is also between 2019-1-1 to 2019-3-31, why in the correct answer it is not supposed to be included? Or am I understanding the problem wrong? Thank yo uso much !"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "[@Preksha_Sharma](/Preksha_Sharma) Nice catch!"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "You are probably looking at the seller_id instead of the product_id in sales table."
                    },
                    {
                        "username": "victorpichugov",
                        "content": "In my opinion, it is necessary to take into account the date of the LAST SALE. Take another look at the explanation:\\nThe product with id 2 was sold in the spring of 2019 but was also sold after the spring of 2019.\\n"
                    },
                    {
                        "username": "Preksha_Sharma",
                        "content": "I think it is because we are asked the product which are ONLY in the first three quarter....Focus on that ONLY part\\n"
                    },
                    {
                        "username": "aakriti16",
                        "content": "because G4 also sold on 2019-06-02 which is not first quarter "
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "Select p.product_id, p.product_name\\nfrom Product p join Sales s\\non p.product_id = s.product_id\\ngroup by s.product_id\\nhaving min(s.sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "[@weebhav](/weebhav) Here the problem statement states that report the products that were only sold in the first quarter of 2019. But the product_id 2 was also sold in other quarter so we aren\\'t supposed to include that in our result. That\\'s why we are grouping them by product_id.\\n\\nIf you had grouped them by sale_date then it would have included product_id 2 also which we don\\'t want hence we have to group them by product_id."
                    },
                    {
                        "username": "weebhav",
                        "content": "Hey can you explain the impact group by has in the product_id 2 in the sample example given in the problem? or how does group by work generally in such scenario\\'s.\\nAny reply would be highly appreciated!!"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "like the idea "
                    },
                    {
                        "username": "Chloe4max",
                        "content": "Many people might think my solution is redundant while they only need 1 condition \\'\\'where sale_date < \\'2019-01-01\\' or sale_date > \\'2019-03-31\\'\\' and pass all the test cases. However I think my solution also covers the case when the products have never been sold.\\n\\nselect distinct\\np.product_id,\\np.product_name\\nfrom Product p\\nleft join Sales s on p.product_id = s.product_id\\nwhere sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand p.product_id not in (select distinct product_id from Sales where sale_date > \\'2019-03-31\\' or  sale_date < \\'2019-01-01\\')\\n\\n\\n"
                    },
                    {
                        "username": "ilyastuit",
                        "content": "I have a similar query, but it is failing.\\n\\n```sql\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nINNER JOIN Sales s ON s.product_id = p.product_id\\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' \\nAND p.product_id NOT IN (\\n  SELECT product_id FROM Sales WHERE sale_date < \\'2019-01-01\\' OR sale_date > \\'2019-03-31\\'\\n);\\n```"
                    },
                    {
                        "username": "nikitaTiwari08",
                        "content": "mine is exactly similar to this except I\\'ve used right join (with product being on right ) which shouldn\\'t matter , however it is giving me wrong answer.\\ni don\\'t understand what\\'s wrong with this:\\n\\nselect distinct p.product_id , p.product_name\\nfrom Sales s \\nright join Product p on (s.product_id = p.product_id)\\nwhere s.sale_date  between (\\'2019-01-01\\' AND \\'2019-03-31\\') AND p.product_id not in (select distinct product_id \\n                                                                                  from Sales\\n                                                                                  where sale_date > \\'2019-03-31\\'\\n                                                                                  OR sale_date < \\'2019-01-01\\' )"
                    },
                    {
                        "username": "ssuresh1999",
                        "content": "I think product1  and 2 where sold in spring between 2019-01-01 and 2019-03-31\\nproduct 1 on 1/21 and 2 on 2/17 so why is that only S8 is the correct answer"
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "product_ID 1:Its only sold in spring between 2019-01-01 and 2019-03-31\\nwhere as,\\nproduct_ID 2: Sold in Spring as well as after spring (i.e 2019-06-02) \\nBut in the Description it is mentioned we only need those product which are only sold in spring "
                    },
                    {
                        "username": "bondshinra",
                        "content": "Because we are looking for products ONLY sold in Q1, the G4 was sold in 06-02 as well"
                    },
                    {
                        "username": "Gensun",
                        "content": "# Write your MySQL query statement below\\nSELECT P1.product_id, P1.product_name\\nFROM Product AS P1\\nWHERE P1.product_id NOT IN\\n(SELECT S1.product_id\\nFROM Sales AS S1\\nWHERE S1.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\')"
                    },
                    {
                        "username": "matheus-rodrigues00",
                        "content": "[@Gensun](/Gensun) It\\'s not passing all the tests..."
                    },
                    {
                        "username": "AmadeusSquared",
                        "content": "[@Haidram](/Haidram)  \\n\\n\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nLEFT JOIN Sales s ON p.product_id = s.product_id\\nWHERE s.product_id IS NOT NULL\\nGROUP BY p.product_id, p.product_name\\nHAVING SUM(CASE WHEN s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = COUNT(s.product_id) AND\\n       SUM(CASE WHEN s.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = 0"
                    },
                    {
                        "username": "Haidram",
                        "content": "wrong answer bro......not passing the final test case"
                    },
                    {
                        "username": "Sachi12345",
                        "content": "# Write your MySQL query statement below\\n\\n\\nSELECT product_id,product_NAME FROM Product \\nWHERE product_id IN (\\nSELECT product_id FROM Sales GROUP BY 1 HAVING\\nMAX(sale_date) <= CAST(\\'2019-03-31\\' AS DATE)\\nAND MIN(sale_date) >= CAST(\\'2019-01-01\\' AS DATE))\\n"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "sale_date is already date type."
                    },
                    {
                        "username": "jyothidundi91",
                        "content": "Sorry for dumb question!\\n\\n seller_id | product_id | buyer_id | sale_date  | quantity | price |\\n+-----------+------------+----------+------------+----------+-------+\\n| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |\\n| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |\\n\\nSpring time covers from Jan to Mar, in that case it should be twp records. Can any one help?"
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "that is why there is \"ONLY\" mentioned in the question. So product should not be sold in any other quarter except Jan to mar. I believe it make sense"
                    },
                    {
                        "username": "nynptel",
                        "content": " `select s.product_id, product_name\\nfrom Sales s\\nleft join Product p on s.product_id = p.product_id\\ngroup by product_id\\nhaving min(sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'`"
                    },
                    {
                        "username": "vashdevl",
                        "content": "product Id 2 was sold in feb 17 2019 . why is this not valid row for the spring of 2019 ?\\n    | 2        | 2019-02-17 | 1        | 800"
                    },
                    {
                        "username": "weizhao5",
                        "content": "\\n\\'\\'\\'\\nselect distinct s.product_id,p.product_name \\nfrom sales s join product p on s.product_id = p.product_id\\nwhere s.product_id not in\\n(\\nselect product_id\\nfrom sales\\nwhere not (sale_date between \\'2019-01-01\\' and \\'2019-03-31\\')); \\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1570114,
                "content": [
                    {
                        "username": "AshleyMeow",
                        "content": "Product 2, G4 is also between 2019-1-1 to 2019-3-31, why in the correct answer it is not supposed to be included? Or am I understanding the problem wrong? Thank yo uso much !"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "[@Preksha_Sharma](/Preksha_Sharma) Nice catch!"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "You are probably looking at the seller_id instead of the product_id in sales table."
                    },
                    {
                        "username": "victorpichugov",
                        "content": "In my opinion, it is necessary to take into account the date of the LAST SALE. Take another look at the explanation:\\nThe product with id 2 was sold in the spring of 2019 but was also sold after the spring of 2019.\\n"
                    },
                    {
                        "username": "Preksha_Sharma",
                        "content": "I think it is because we are asked the product which are ONLY in the first three quarter....Focus on that ONLY part\\n"
                    },
                    {
                        "username": "aakriti16",
                        "content": "because G4 also sold on 2019-06-02 which is not first quarter "
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "Select p.product_id, p.product_name\\nfrom Product p join Sales s\\non p.product_id = s.product_id\\ngroup by s.product_id\\nhaving min(s.sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "[@weebhav](/weebhav) Here the problem statement states that report the products that were only sold in the first quarter of 2019. But the product_id 2 was also sold in other quarter so we aren\\'t supposed to include that in our result. That\\'s why we are grouping them by product_id.\\n\\nIf you had grouped them by sale_date then it would have included product_id 2 also which we don\\'t want hence we have to group them by product_id."
                    },
                    {
                        "username": "weebhav",
                        "content": "Hey can you explain the impact group by has in the product_id 2 in the sample example given in the problem? or how does group by work generally in such scenario\\'s.\\nAny reply would be highly appreciated!!"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "like the idea "
                    },
                    {
                        "username": "Chloe4max",
                        "content": "Many people might think my solution is redundant while they only need 1 condition \\'\\'where sale_date < \\'2019-01-01\\' or sale_date > \\'2019-03-31\\'\\' and pass all the test cases. However I think my solution also covers the case when the products have never been sold.\\n\\nselect distinct\\np.product_id,\\np.product_name\\nfrom Product p\\nleft join Sales s on p.product_id = s.product_id\\nwhere sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand p.product_id not in (select distinct product_id from Sales where sale_date > \\'2019-03-31\\' or  sale_date < \\'2019-01-01\\')\\n\\n\\n"
                    },
                    {
                        "username": "ilyastuit",
                        "content": "I have a similar query, but it is failing.\\n\\n```sql\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nINNER JOIN Sales s ON s.product_id = p.product_id\\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' \\nAND p.product_id NOT IN (\\n  SELECT product_id FROM Sales WHERE sale_date < \\'2019-01-01\\' OR sale_date > \\'2019-03-31\\'\\n);\\n```"
                    },
                    {
                        "username": "nikitaTiwari08",
                        "content": "mine is exactly similar to this except I\\'ve used right join (with product being on right ) which shouldn\\'t matter , however it is giving me wrong answer.\\ni don\\'t understand what\\'s wrong with this:\\n\\nselect distinct p.product_id , p.product_name\\nfrom Sales s \\nright join Product p on (s.product_id = p.product_id)\\nwhere s.sale_date  between (\\'2019-01-01\\' AND \\'2019-03-31\\') AND p.product_id not in (select distinct product_id \\n                                                                                  from Sales\\n                                                                                  where sale_date > \\'2019-03-31\\'\\n                                                                                  OR sale_date < \\'2019-01-01\\' )"
                    },
                    {
                        "username": "ssuresh1999",
                        "content": "I think product1  and 2 where sold in spring between 2019-01-01 and 2019-03-31\\nproduct 1 on 1/21 and 2 on 2/17 so why is that only S8 is the correct answer"
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "product_ID 1:Its only sold in spring between 2019-01-01 and 2019-03-31\\nwhere as,\\nproduct_ID 2: Sold in Spring as well as after spring (i.e 2019-06-02) \\nBut in the Description it is mentioned we only need those product which are only sold in spring "
                    },
                    {
                        "username": "bondshinra",
                        "content": "Because we are looking for products ONLY sold in Q1, the G4 was sold in 06-02 as well"
                    },
                    {
                        "username": "Gensun",
                        "content": "# Write your MySQL query statement below\\nSELECT P1.product_id, P1.product_name\\nFROM Product AS P1\\nWHERE P1.product_id NOT IN\\n(SELECT S1.product_id\\nFROM Sales AS S1\\nWHERE S1.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\')"
                    },
                    {
                        "username": "matheus-rodrigues00",
                        "content": "[@Gensun](/Gensun) It\\'s not passing all the tests..."
                    },
                    {
                        "username": "AmadeusSquared",
                        "content": "[@Haidram](/Haidram)  \\n\\n\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nLEFT JOIN Sales s ON p.product_id = s.product_id\\nWHERE s.product_id IS NOT NULL\\nGROUP BY p.product_id, p.product_name\\nHAVING SUM(CASE WHEN s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = COUNT(s.product_id) AND\\n       SUM(CASE WHEN s.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = 0"
                    },
                    {
                        "username": "Haidram",
                        "content": "wrong answer bro......not passing the final test case"
                    },
                    {
                        "username": "Sachi12345",
                        "content": "# Write your MySQL query statement below\\n\\n\\nSELECT product_id,product_NAME FROM Product \\nWHERE product_id IN (\\nSELECT product_id FROM Sales GROUP BY 1 HAVING\\nMAX(sale_date) <= CAST(\\'2019-03-31\\' AS DATE)\\nAND MIN(sale_date) >= CAST(\\'2019-01-01\\' AS DATE))\\n"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "sale_date is already date type."
                    },
                    {
                        "username": "jyothidundi91",
                        "content": "Sorry for dumb question!\\n\\n seller_id | product_id | buyer_id | sale_date  | quantity | price |\\n+-----------+------------+----------+------------+----------+-------+\\n| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |\\n| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |\\n\\nSpring time covers from Jan to Mar, in that case it should be twp records. Can any one help?"
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "that is why there is \"ONLY\" mentioned in the question. So product should not be sold in any other quarter except Jan to mar. I believe it make sense"
                    },
                    {
                        "username": "nynptel",
                        "content": " `select s.product_id, product_name\\nfrom Sales s\\nleft join Product p on s.product_id = p.product_id\\ngroup by product_id\\nhaving min(sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'`"
                    },
                    {
                        "username": "vashdevl",
                        "content": "product Id 2 was sold in feb 17 2019 . why is this not valid row for the spring of 2019 ?\\n    | 2        | 2019-02-17 | 1        | 800"
                    },
                    {
                        "username": "weizhao5",
                        "content": "\\n\\'\\'\\'\\nselect distinct s.product_id,p.product_name \\nfrom sales s join product p on s.product_id = p.product_id\\nwhere s.product_id not in\\n(\\nselect product_id\\nfrom sales\\nwhere not (sale_date between \\'2019-01-01\\' and \\'2019-03-31\\')); \\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1568561,
                "content": [
                    {
                        "username": "AshleyMeow",
                        "content": "Product 2, G4 is also between 2019-1-1 to 2019-3-31, why in the correct answer it is not supposed to be included? Or am I understanding the problem wrong? Thank yo uso much !"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "[@Preksha_Sharma](/Preksha_Sharma) Nice catch!"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "You are probably looking at the seller_id instead of the product_id in sales table."
                    },
                    {
                        "username": "victorpichugov",
                        "content": "In my opinion, it is necessary to take into account the date of the LAST SALE. Take another look at the explanation:\\nThe product with id 2 was sold in the spring of 2019 but was also sold after the spring of 2019.\\n"
                    },
                    {
                        "username": "Preksha_Sharma",
                        "content": "I think it is because we are asked the product which are ONLY in the first three quarter....Focus on that ONLY part\\n"
                    },
                    {
                        "username": "aakriti16",
                        "content": "because G4 also sold on 2019-06-02 which is not first quarter "
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "Select p.product_id, p.product_name\\nfrom Product p join Sales s\\non p.product_id = s.product_id\\ngroup by s.product_id\\nhaving min(s.sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "[@weebhav](/weebhav) Here the problem statement states that report the products that were only sold in the first quarter of 2019. But the product_id 2 was also sold in other quarter so we aren\\'t supposed to include that in our result. That\\'s why we are grouping them by product_id.\\n\\nIf you had grouped them by sale_date then it would have included product_id 2 also which we don\\'t want hence we have to group them by product_id."
                    },
                    {
                        "username": "weebhav",
                        "content": "Hey can you explain the impact group by has in the product_id 2 in the sample example given in the problem? or how does group by work generally in such scenario\\'s.\\nAny reply would be highly appreciated!!"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "like the idea "
                    },
                    {
                        "username": "Chloe4max",
                        "content": "Many people might think my solution is redundant while they only need 1 condition \\'\\'where sale_date < \\'2019-01-01\\' or sale_date > \\'2019-03-31\\'\\' and pass all the test cases. However I think my solution also covers the case when the products have never been sold.\\n\\nselect distinct\\np.product_id,\\np.product_name\\nfrom Product p\\nleft join Sales s on p.product_id = s.product_id\\nwhere sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand p.product_id not in (select distinct product_id from Sales where sale_date > \\'2019-03-31\\' or  sale_date < \\'2019-01-01\\')\\n\\n\\n"
                    },
                    {
                        "username": "ilyastuit",
                        "content": "I have a similar query, but it is failing.\\n\\n```sql\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nINNER JOIN Sales s ON s.product_id = p.product_id\\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' \\nAND p.product_id NOT IN (\\n  SELECT product_id FROM Sales WHERE sale_date < \\'2019-01-01\\' OR sale_date > \\'2019-03-31\\'\\n);\\n```"
                    },
                    {
                        "username": "nikitaTiwari08",
                        "content": "mine is exactly similar to this except I\\'ve used right join (with product being on right ) which shouldn\\'t matter , however it is giving me wrong answer.\\ni don\\'t understand what\\'s wrong with this:\\n\\nselect distinct p.product_id , p.product_name\\nfrom Sales s \\nright join Product p on (s.product_id = p.product_id)\\nwhere s.sale_date  between (\\'2019-01-01\\' AND \\'2019-03-31\\') AND p.product_id not in (select distinct product_id \\n                                                                                  from Sales\\n                                                                                  where sale_date > \\'2019-03-31\\'\\n                                                                                  OR sale_date < \\'2019-01-01\\' )"
                    },
                    {
                        "username": "ssuresh1999",
                        "content": "I think product1  and 2 where sold in spring between 2019-01-01 and 2019-03-31\\nproduct 1 on 1/21 and 2 on 2/17 so why is that only S8 is the correct answer"
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "product_ID 1:Its only sold in spring between 2019-01-01 and 2019-03-31\\nwhere as,\\nproduct_ID 2: Sold in Spring as well as after spring (i.e 2019-06-02) \\nBut in the Description it is mentioned we only need those product which are only sold in spring "
                    },
                    {
                        "username": "bondshinra",
                        "content": "Because we are looking for products ONLY sold in Q1, the G4 was sold in 06-02 as well"
                    },
                    {
                        "username": "Gensun",
                        "content": "# Write your MySQL query statement below\\nSELECT P1.product_id, P1.product_name\\nFROM Product AS P1\\nWHERE P1.product_id NOT IN\\n(SELECT S1.product_id\\nFROM Sales AS S1\\nWHERE S1.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\')"
                    },
                    {
                        "username": "matheus-rodrigues00",
                        "content": "[@Gensun](/Gensun) It\\'s not passing all the tests..."
                    },
                    {
                        "username": "AmadeusSquared",
                        "content": "[@Haidram](/Haidram)  \\n\\n\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nLEFT JOIN Sales s ON p.product_id = s.product_id\\nWHERE s.product_id IS NOT NULL\\nGROUP BY p.product_id, p.product_name\\nHAVING SUM(CASE WHEN s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = COUNT(s.product_id) AND\\n       SUM(CASE WHEN s.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = 0"
                    },
                    {
                        "username": "Haidram",
                        "content": "wrong answer bro......not passing the final test case"
                    },
                    {
                        "username": "Sachi12345",
                        "content": "# Write your MySQL query statement below\\n\\n\\nSELECT product_id,product_NAME FROM Product \\nWHERE product_id IN (\\nSELECT product_id FROM Sales GROUP BY 1 HAVING\\nMAX(sale_date) <= CAST(\\'2019-03-31\\' AS DATE)\\nAND MIN(sale_date) >= CAST(\\'2019-01-01\\' AS DATE))\\n"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "sale_date is already date type."
                    },
                    {
                        "username": "jyothidundi91",
                        "content": "Sorry for dumb question!\\n\\n seller_id | product_id | buyer_id | sale_date  | quantity | price |\\n+-----------+------------+----------+------------+----------+-------+\\n| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |\\n| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |\\n\\nSpring time covers from Jan to Mar, in that case it should be twp records. Can any one help?"
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "that is why there is \"ONLY\" mentioned in the question. So product should not be sold in any other quarter except Jan to mar. I believe it make sense"
                    },
                    {
                        "username": "nynptel",
                        "content": " `select s.product_id, product_name\\nfrom Sales s\\nleft join Product p on s.product_id = p.product_id\\ngroup by product_id\\nhaving min(sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'`"
                    },
                    {
                        "username": "vashdevl",
                        "content": "product Id 2 was sold in feb 17 2019 . why is this not valid row for the spring of 2019 ?\\n    | 2        | 2019-02-17 | 1        | 800"
                    },
                    {
                        "username": "weizhao5",
                        "content": "\\n\\'\\'\\'\\nselect distinct s.product_id,p.product_name \\nfrom sales s join product p on s.product_id = p.product_id\\nwhere s.product_id not in\\n(\\nselect product_id\\nfrom sales\\nwhere not (sale_date between \\'2019-01-01\\' and \\'2019-03-31\\')); \\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1569778,
                "content": [
                    {
                        "username": "AshleyMeow",
                        "content": "Product 2, G4 is also between 2019-1-1 to 2019-3-31, why in the correct answer it is not supposed to be included? Or am I understanding the problem wrong? Thank yo uso much !"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "[@Preksha_Sharma](/Preksha_Sharma) Nice catch!"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "You are probably looking at the seller_id instead of the product_id in sales table."
                    },
                    {
                        "username": "victorpichugov",
                        "content": "In my opinion, it is necessary to take into account the date of the LAST SALE. Take another look at the explanation:\\nThe product with id 2 was sold in the spring of 2019 but was also sold after the spring of 2019.\\n"
                    },
                    {
                        "username": "Preksha_Sharma",
                        "content": "I think it is because we are asked the product which are ONLY in the first three quarter....Focus on that ONLY part\\n"
                    },
                    {
                        "username": "aakriti16",
                        "content": "because G4 also sold on 2019-06-02 which is not first quarter "
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "Select p.product_id, p.product_name\\nfrom Product p join Sales s\\non p.product_id = s.product_id\\ngroup by s.product_id\\nhaving min(s.sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "[@weebhav](/weebhav) Here the problem statement states that report the products that were only sold in the first quarter of 2019. But the product_id 2 was also sold in other quarter so we aren\\'t supposed to include that in our result. That\\'s why we are grouping them by product_id.\\n\\nIf you had grouped them by sale_date then it would have included product_id 2 also which we don\\'t want hence we have to group them by product_id."
                    },
                    {
                        "username": "weebhav",
                        "content": "Hey can you explain the impact group by has in the product_id 2 in the sample example given in the problem? or how does group by work generally in such scenario\\'s.\\nAny reply would be highly appreciated!!"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "like the idea "
                    },
                    {
                        "username": "Chloe4max",
                        "content": "Many people might think my solution is redundant while they only need 1 condition \\'\\'where sale_date < \\'2019-01-01\\' or sale_date > \\'2019-03-31\\'\\' and pass all the test cases. However I think my solution also covers the case when the products have never been sold.\\n\\nselect distinct\\np.product_id,\\np.product_name\\nfrom Product p\\nleft join Sales s on p.product_id = s.product_id\\nwhere sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand p.product_id not in (select distinct product_id from Sales where sale_date > \\'2019-03-31\\' or  sale_date < \\'2019-01-01\\')\\n\\n\\n"
                    },
                    {
                        "username": "ilyastuit",
                        "content": "I have a similar query, but it is failing.\\n\\n```sql\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nINNER JOIN Sales s ON s.product_id = p.product_id\\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' \\nAND p.product_id NOT IN (\\n  SELECT product_id FROM Sales WHERE sale_date < \\'2019-01-01\\' OR sale_date > \\'2019-03-31\\'\\n);\\n```"
                    },
                    {
                        "username": "nikitaTiwari08",
                        "content": "mine is exactly similar to this except I\\'ve used right join (with product being on right ) which shouldn\\'t matter , however it is giving me wrong answer.\\ni don\\'t understand what\\'s wrong with this:\\n\\nselect distinct p.product_id , p.product_name\\nfrom Sales s \\nright join Product p on (s.product_id = p.product_id)\\nwhere s.sale_date  between (\\'2019-01-01\\' AND \\'2019-03-31\\') AND p.product_id not in (select distinct product_id \\n                                                                                  from Sales\\n                                                                                  where sale_date > \\'2019-03-31\\'\\n                                                                                  OR sale_date < \\'2019-01-01\\' )"
                    },
                    {
                        "username": "ssuresh1999",
                        "content": "I think product1  and 2 where sold in spring between 2019-01-01 and 2019-03-31\\nproduct 1 on 1/21 and 2 on 2/17 so why is that only S8 is the correct answer"
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "product_ID 1:Its only sold in spring between 2019-01-01 and 2019-03-31\\nwhere as,\\nproduct_ID 2: Sold in Spring as well as after spring (i.e 2019-06-02) \\nBut in the Description it is mentioned we only need those product which are only sold in spring "
                    },
                    {
                        "username": "bondshinra",
                        "content": "Because we are looking for products ONLY sold in Q1, the G4 was sold in 06-02 as well"
                    },
                    {
                        "username": "Gensun",
                        "content": "# Write your MySQL query statement below\\nSELECT P1.product_id, P1.product_name\\nFROM Product AS P1\\nWHERE P1.product_id NOT IN\\n(SELECT S1.product_id\\nFROM Sales AS S1\\nWHERE S1.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\')"
                    },
                    {
                        "username": "matheus-rodrigues00",
                        "content": "[@Gensun](/Gensun) It\\'s not passing all the tests..."
                    },
                    {
                        "username": "AmadeusSquared",
                        "content": "[@Haidram](/Haidram)  \\n\\n\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nLEFT JOIN Sales s ON p.product_id = s.product_id\\nWHERE s.product_id IS NOT NULL\\nGROUP BY p.product_id, p.product_name\\nHAVING SUM(CASE WHEN s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = COUNT(s.product_id) AND\\n       SUM(CASE WHEN s.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = 0"
                    },
                    {
                        "username": "Haidram",
                        "content": "wrong answer bro......not passing the final test case"
                    },
                    {
                        "username": "Sachi12345",
                        "content": "# Write your MySQL query statement below\\n\\n\\nSELECT product_id,product_NAME FROM Product \\nWHERE product_id IN (\\nSELECT product_id FROM Sales GROUP BY 1 HAVING\\nMAX(sale_date) <= CAST(\\'2019-03-31\\' AS DATE)\\nAND MIN(sale_date) >= CAST(\\'2019-01-01\\' AS DATE))\\n"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "sale_date is already date type."
                    },
                    {
                        "username": "jyothidundi91",
                        "content": "Sorry for dumb question!\\n\\n seller_id | product_id | buyer_id | sale_date  | quantity | price |\\n+-----------+------------+----------+------------+----------+-------+\\n| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |\\n| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |\\n\\nSpring time covers from Jan to Mar, in that case it should be twp records. Can any one help?"
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "that is why there is \"ONLY\" mentioned in the question. So product should not be sold in any other quarter except Jan to mar. I believe it make sense"
                    },
                    {
                        "username": "nynptel",
                        "content": " `select s.product_id, product_name\\nfrom Sales s\\nleft join Product p on s.product_id = p.product_id\\ngroup by product_id\\nhaving min(sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'`"
                    },
                    {
                        "username": "vashdevl",
                        "content": "product Id 2 was sold in feb 17 2019 . why is this not valid row for the spring of 2019 ?\\n    | 2        | 2019-02-17 | 1        | 800"
                    },
                    {
                        "username": "weizhao5",
                        "content": "\\n\\'\\'\\'\\nselect distinct s.product_id,p.product_name \\nfrom sales s join product p on s.product_id = p.product_id\\nwhere s.product_id not in\\n(\\nselect product_id\\nfrom sales\\nwhere not (sale_date between \\'2019-01-01\\' and \\'2019-03-31\\')); \\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1699405,
                "content": [
                    {
                        "username": "AshleyMeow",
                        "content": "Product 2, G4 is also between 2019-1-1 to 2019-3-31, why in the correct answer it is not supposed to be included? Or am I understanding the problem wrong? Thank yo uso much !"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "[@Preksha_Sharma](/Preksha_Sharma) Nice catch!"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "You are probably looking at the seller_id instead of the product_id in sales table."
                    },
                    {
                        "username": "victorpichugov",
                        "content": "In my opinion, it is necessary to take into account the date of the LAST SALE. Take another look at the explanation:\\nThe product with id 2 was sold in the spring of 2019 but was also sold after the spring of 2019.\\n"
                    },
                    {
                        "username": "Preksha_Sharma",
                        "content": "I think it is because we are asked the product which are ONLY in the first three quarter....Focus on that ONLY part\\n"
                    },
                    {
                        "username": "aakriti16",
                        "content": "because G4 also sold on 2019-06-02 which is not first quarter "
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "Select p.product_id, p.product_name\\nfrom Product p join Sales s\\non p.product_id = s.product_id\\ngroup by s.product_id\\nhaving min(s.sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "[@weebhav](/weebhav) Here the problem statement states that report the products that were only sold in the first quarter of 2019. But the product_id 2 was also sold in other quarter so we aren\\'t supposed to include that in our result. That\\'s why we are grouping them by product_id.\\n\\nIf you had grouped them by sale_date then it would have included product_id 2 also which we don\\'t want hence we have to group them by product_id."
                    },
                    {
                        "username": "weebhav",
                        "content": "Hey can you explain the impact group by has in the product_id 2 in the sample example given in the problem? or how does group by work generally in such scenario\\'s.\\nAny reply would be highly appreciated!!"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "like the idea "
                    },
                    {
                        "username": "Chloe4max",
                        "content": "Many people might think my solution is redundant while they only need 1 condition \\'\\'where sale_date < \\'2019-01-01\\' or sale_date > \\'2019-03-31\\'\\' and pass all the test cases. However I think my solution also covers the case when the products have never been sold.\\n\\nselect distinct\\np.product_id,\\np.product_name\\nfrom Product p\\nleft join Sales s on p.product_id = s.product_id\\nwhere sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand p.product_id not in (select distinct product_id from Sales where sale_date > \\'2019-03-31\\' or  sale_date < \\'2019-01-01\\')\\n\\n\\n"
                    },
                    {
                        "username": "ilyastuit",
                        "content": "I have a similar query, but it is failing.\\n\\n```sql\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nINNER JOIN Sales s ON s.product_id = p.product_id\\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' \\nAND p.product_id NOT IN (\\n  SELECT product_id FROM Sales WHERE sale_date < \\'2019-01-01\\' OR sale_date > \\'2019-03-31\\'\\n);\\n```"
                    },
                    {
                        "username": "nikitaTiwari08",
                        "content": "mine is exactly similar to this except I\\'ve used right join (with product being on right ) which shouldn\\'t matter , however it is giving me wrong answer.\\ni don\\'t understand what\\'s wrong with this:\\n\\nselect distinct p.product_id , p.product_name\\nfrom Sales s \\nright join Product p on (s.product_id = p.product_id)\\nwhere s.sale_date  between (\\'2019-01-01\\' AND \\'2019-03-31\\') AND p.product_id not in (select distinct product_id \\n                                                                                  from Sales\\n                                                                                  where sale_date > \\'2019-03-31\\'\\n                                                                                  OR sale_date < \\'2019-01-01\\' )"
                    },
                    {
                        "username": "ssuresh1999",
                        "content": "I think product1  and 2 where sold in spring between 2019-01-01 and 2019-03-31\\nproduct 1 on 1/21 and 2 on 2/17 so why is that only S8 is the correct answer"
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "product_ID 1:Its only sold in spring between 2019-01-01 and 2019-03-31\\nwhere as,\\nproduct_ID 2: Sold in Spring as well as after spring (i.e 2019-06-02) \\nBut in the Description it is mentioned we only need those product which are only sold in spring "
                    },
                    {
                        "username": "bondshinra",
                        "content": "Because we are looking for products ONLY sold in Q1, the G4 was sold in 06-02 as well"
                    },
                    {
                        "username": "Gensun",
                        "content": "# Write your MySQL query statement below\\nSELECT P1.product_id, P1.product_name\\nFROM Product AS P1\\nWHERE P1.product_id NOT IN\\n(SELECT S1.product_id\\nFROM Sales AS S1\\nWHERE S1.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\')"
                    },
                    {
                        "username": "matheus-rodrigues00",
                        "content": "[@Gensun](/Gensun) It\\'s not passing all the tests..."
                    },
                    {
                        "username": "AmadeusSquared",
                        "content": "[@Haidram](/Haidram)  \\n\\n\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nLEFT JOIN Sales s ON p.product_id = s.product_id\\nWHERE s.product_id IS NOT NULL\\nGROUP BY p.product_id, p.product_name\\nHAVING SUM(CASE WHEN s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = COUNT(s.product_id) AND\\n       SUM(CASE WHEN s.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = 0"
                    },
                    {
                        "username": "Haidram",
                        "content": "wrong answer bro......not passing the final test case"
                    },
                    {
                        "username": "Sachi12345",
                        "content": "# Write your MySQL query statement below\\n\\n\\nSELECT product_id,product_NAME FROM Product \\nWHERE product_id IN (\\nSELECT product_id FROM Sales GROUP BY 1 HAVING\\nMAX(sale_date) <= CAST(\\'2019-03-31\\' AS DATE)\\nAND MIN(sale_date) >= CAST(\\'2019-01-01\\' AS DATE))\\n"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "sale_date is already date type."
                    },
                    {
                        "username": "jyothidundi91",
                        "content": "Sorry for dumb question!\\n\\n seller_id | product_id | buyer_id | sale_date  | quantity | price |\\n+-----------+------------+----------+------------+----------+-------+\\n| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |\\n| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |\\n\\nSpring time covers from Jan to Mar, in that case it should be twp records. Can any one help?"
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "that is why there is \"ONLY\" mentioned in the question. So product should not be sold in any other quarter except Jan to mar. I believe it make sense"
                    },
                    {
                        "username": "nynptel",
                        "content": " `select s.product_id, product_name\\nfrom Sales s\\nleft join Product p on s.product_id = p.product_id\\ngroup by product_id\\nhaving min(sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'`"
                    },
                    {
                        "username": "vashdevl",
                        "content": "product Id 2 was sold in feb 17 2019 . why is this not valid row for the spring of 2019 ?\\n    | 2        | 2019-02-17 | 1        | 800"
                    },
                    {
                        "username": "weizhao5",
                        "content": "\\n\\'\\'\\'\\nselect distinct s.product_id,p.product_name \\nfrom sales s join product p on s.product_id = p.product_id\\nwhere s.product_id not in\\n(\\nselect product_id\\nfrom sales\\nwhere not (sale_date between \\'2019-01-01\\' and \\'2019-03-31\\')); \\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1573062,
                "content": [
                    {
                        "username": "AshleyMeow",
                        "content": "Product 2, G4 is also between 2019-1-1 to 2019-3-31, why in the correct answer it is not supposed to be included? Or am I understanding the problem wrong? Thank yo uso much !"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "[@Preksha_Sharma](/Preksha_Sharma) Nice catch!"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "You are probably looking at the seller_id instead of the product_id in sales table."
                    },
                    {
                        "username": "victorpichugov",
                        "content": "In my opinion, it is necessary to take into account the date of the LAST SALE. Take another look at the explanation:\\nThe product with id 2 was sold in the spring of 2019 but was also sold after the spring of 2019.\\n"
                    },
                    {
                        "username": "Preksha_Sharma",
                        "content": "I think it is because we are asked the product which are ONLY in the first three quarter....Focus on that ONLY part\\n"
                    },
                    {
                        "username": "aakriti16",
                        "content": "because G4 also sold on 2019-06-02 which is not first quarter "
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "Select p.product_id, p.product_name\\nfrom Product p join Sales s\\non p.product_id = s.product_id\\ngroup by s.product_id\\nhaving min(s.sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "[@weebhav](/weebhav) Here the problem statement states that report the products that were only sold in the first quarter of 2019. But the product_id 2 was also sold in other quarter so we aren\\'t supposed to include that in our result. That\\'s why we are grouping them by product_id.\\n\\nIf you had grouped them by sale_date then it would have included product_id 2 also which we don\\'t want hence we have to group them by product_id."
                    },
                    {
                        "username": "weebhav",
                        "content": "Hey can you explain the impact group by has in the product_id 2 in the sample example given in the problem? or how does group by work generally in such scenario\\'s.\\nAny reply would be highly appreciated!!"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "like the idea "
                    },
                    {
                        "username": "Chloe4max",
                        "content": "Many people might think my solution is redundant while they only need 1 condition \\'\\'where sale_date < \\'2019-01-01\\' or sale_date > \\'2019-03-31\\'\\' and pass all the test cases. However I think my solution also covers the case when the products have never been sold.\\n\\nselect distinct\\np.product_id,\\np.product_name\\nfrom Product p\\nleft join Sales s on p.product_id = s.product_id\\nwhere sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand p.product_id not in (select distinct product_id from Sales where sale_date > \\'2019-03-31\\' or  sale_date < \\'2019-01-01\\')\\n\\n\\n"
                    },
                    {
                        "username": "ilyastuit",
                        "content": "I have a similar query, but it is failing.\\n\\n```sql\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nINNER JOIN Sales s ON s.product_id = p.product_id\\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' \\nAND p.product_id NOT IN (\\n  SELECT product_id FROM Sales WHERE sale_date < \\'2019-01-01\\' OR sale_date > \\'2019-03-31\\'\\n);\\n```"
                    },
                    {
                        "username": "nikitaTiwari08",
                        "content": "mine is exactly similar to this except I\\'ve used right join (with product being on right ) which shouldn\\'t matter , however it is giving me wrong answer.\\ni don\\'t understand what\\'s wrong with this:\\n\\nselect distinct p.product_id , p.product_name\\nfrom Sales s \\nright join Product p on (s.product_id = p.product_id)\\nwhere s.sale_date  between (\\'2019-01-01\\' AND \\'2019-03-31\\') AND p.product_id not in (select distinct product_id \\n                                                                                  from Sales\\n                                                                                  where sale_date > \\'2019-03-31\\'\\n                                                                                  OR sale_date < \\'2019-01-01\\' )"
                    },
                    {
                        "username": "ssuresh1999",
                        "content": "I think product1  and 2 where sold in spring between 2019-01-01 and 2019-03-31\\nproduct 1 on 1/21 and 2 on 2/17 so why is that only S8 is the correct answer"
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "product_ID 1:Its only sold in spring between 2019-01-01 and 2019-03-31\\nwhere as,\\nproduct_ID 2: Sold in Spring as well as after spring (i.e 2019-06-02) \\nBut in the Description it is mentioned we only need those product which are only sold in spring "
                    },
                    {
                        "username": "bondshinra",
                        "content": "Because we are looking for products ONLY sold in Q1, the G4 was sold in 06-02 as well"
                    },
                    {
                        "username": "Gensun",
                        "content": "# Write your MySQL query statement below\\nSELECT P1.product_id, P1.product_name\\nFROM Product AS P1\\nWHERE P1.product_id NOT IN\\n(SELECT S1.product_id\\nFROM Sales AS S1\\nWHERE S1.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\')"
                    },
                    {
                        "username": "matheus-rodrigues00",
                        "content": "[@Gensun](/Gensun) It\\'s not passing all the tests..."
                    },
                    {
                        "username": "AmadeusSquared",
                        "content": "[@Haidram](/Haidram)  \\n\\n\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nLEFT JOIN Sales s ON p.product_id = s.product_id\\nWHERE s.product_id IS NOT NULL\\nGROUP BY p.product_id, p.product_name\\nHAVING SUM(CASE WHEN s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = COUNT(s.product_id) AND\\n       SUM(CASE WHEN s.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = 0"
                    },
                    {
                        "username": "Haidram",
                        "content": "wrong answer bro......not passing the final test case"
                    },
                    {
                        "username": "Sachi12345",
                        "content": "# Write your MySQL query statement below\\n\\n\\nSELECT product_id,product_NAME FROM Product \\nWHERE product_id IN (\\nSELECT product_id FROM Sales GROUP BY 1 HAVING\\nMAX(sale_date) <= CAST(\\'2019-03-31\\' AS DATE)\\nAND MIN(sale_date) >= CAST(\\'2019-01-01\\' AS DATE))\\n"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "sale_date is already date type."
                    },
                    {
                        "username": "jyothidundi91",
                        "content": "Sorry for dumb question!\\n\\n seller_id | product_id | buyer_id | sale_date  | quantity | price |\\n+-----------+------------+----------+------------+----------+-------+\\n| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |\\n| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |\\n\\nSpring time covers from Jan to Mar, in that case it should be twp records. Can any one help?"
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "that is why there is \"ONLY\" mentioned in the question. So product should not be sold in any other quarter except Jan to mar. I believe it make sense"
                    },
                    {
                        "username": "nynptel",
                        "content": " `select s.product_id, product_name\\nfrom Sales s\\nleft join Product p on s.product_id = p.product_id\\ngroup by product_id\\nhaving min(sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'`"
                    },
                    {
                        "username": "vashdevl",
                        "content": "product Id 2 was sold in feb 17 2019 . why is this not valid row for the spring of 2019 ?\\n    | 2        | 2019-02-17 | 1        | 800"
                    },
                    {
                        "username": "weizhao5",
                        "content": "\\n\\'\\'\\'\\nselect distinct s.product_id,p.product_name \\nfrom sales s join product p on s.product_id = p.product_id\\nwhere s.product_id not in\\n(\\nselect product_id\\nfrom sales\\nwhere not (sale_date between \\'2019-01-01\\' and \\'2019-03-31\\')); \\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1574954,
                "content": [
                    {
                        "username": "AshleyMeow",
                        "content": "Product 2, G4 is also between 2019-1-1 to 2019-3-31, why in the correct answer it is not supposed to be included? Or am I understanding the problem wrong? Thank yo uso much !"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "[@Preksha_Sharma](/Preksha_Sharma) Nice catch!"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "You are probably looking at the seller_id instead of the product_id in sales table."
                    },
                    {
                        "username": "victorpichugov",
                        "content": "In my opinion, it is necessary to take into account the date of the LAST SALE. Take another look at the explanation:\\nThe product with id 2 was sold in the spring of 2019 but was also sold after the spring of 2019.\\n"
                    },
                    {
                        "username": "Preksha_Sharma",
                        "content": "I think it is because we are asked the product which are ONLY in the first three quarter....Focus on that ONLY part\\n"
                    },
                    {
                        "username": "aakriti16",
                        "content": "because G4 also sold on 2019-06-02 which is not first quarter "
                    },
                    {
                        "username": "rohitahuja823",
                        "content": "Select p.product_id, p.product_name\\nfrom Product p join Sales s\\non p.product_id = s.product_id\\ngroup by s.product_id\\nhaving min(s.sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'"
                    },
                    {
                        "username": "Dushyantsinh",
                        "content": "[@weebhav](/weebhav) Here the problem statement states that report the products that were only sold in the first quarter of 2019. But the product_id 2 was also sold in other quarter so we aren\\'t supposed to include that in our result. That\\'s why we are grouping them by product_id.\\n\\nIf you had grouped them by sale_date then it would have included product_id 2 also which we don\\'t want hence we have to group them by product_id."
                    },
                    {
                        "username": "weebhav",
                        "content": "Hey can you explain the impact group by has in the product_id 2 in the sample example given in the problem? or how does group by work generally in such scenario\\'s.\\nAny reply would be highly appreciated!!"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "like the idea "
                    },
                    {
                        "username": "Chloe4max",
                        "content": "Many people might think my solution is redundant while they only need 1 condition \\'\\'where sale_date < \\'2019-01-01\\' or sale_date > \\'2019-03-31\\'\\' and pass all the test cases. However I think my solution also covers the case when the products have never been sold.\\n\\nselect distinct\\np.product_id,\\np.product_name\\nfrom Product p\\nleft join Sales s on p.product_id = s.product_id\\nwhere sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand p.product_id not in (select distinct product_id from Sales where sale_date > \\'2019-03-31\\' or  sale_date < \\'2019-01-01\\')\\n\\n\\n"
                    },
                    {
                        "username": "ilyastuit",
                        "content": "I have a similar query, but it is failing.\\n\\n```sql\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nINNER JOIN Sales s ON s.product_id = p.product_id\\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' \\nAND p.product_id NOT IN (\\n  SELECT product_id FROM Sales WHERE sale_date < \\'2019-01-01\\' OR sale_date > \\'2019-03-31\\'\\n);\\n```"
                    },
                    {
                        "username": "nikitaTiwari08",
                        "content": "mine is exactly similar to this except I\\'ve used right join (with product being on right ) which shouldn\\'t matter , however it is giving me wrong answer.\\ni don\\'t understand what\\'s wrong with this:\\n\\nselect distinct p.product_id , p.product_name\\nfrom Sales s \\nright join Product p on (s.product_id = p.product_id)\\nwhere s.sale_date  between (\\'2019-01-01\\' AND \\'2019-03-31\\') AND p.product_id not in (select distinct product_id \\n                                                                                  from Sales\\n                                                                                  where sale_date > \\'2019-03-31\\'\\n                                                                                  OR sale_date < \\'2019-01-01\\' )"
                    },
                    {
                        "username": "ssuresh1999",
                        "content": "I think product1  and 2 where sold in spring between 2019-01-01 and 2019-03-31\\nproduct 1 on 1/21 and 2 on 2/17 so why is that only S8 is the correct answer"
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "product_ID 1:Its only sold in spring between 2019-01-01 and 2019-03-31\\nwhere as,\\nproduct_ID 2: Sold in Spring as well as after spring (i.e 2019-06-02) \\nBut in the Description it is mentioned we only need those product which are only sold in spring "
                    },
                    {
                        "username": "bondshinra",
                        "content": "Because we are looking for products ONLY sold in Q1, the G4 was sold in 06-02 as well"
                    },
                    {
                        "username": "Gensun",
                        "content": "# Write your MySQL query statement below\\nSELECT P1.product_id, P1.product_name\\nFROM Product AS P1\\nWHERE P1.product_id NOT IN\\n(SELECT S1.product_id\\nFROM Sales AS S1\\nWHERE S1.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\')"
                    },
                    {
                        "username": "matheus-rodrigues00",
                        "content": "[@Gensun](/Gensun) It\\'s not passing all the tests..."
                    },
                    {
                        "username": "AmadeusSquared",
                        "content": "[@Haidram](/Haidram)  \\n\\n\\nSELECT p.product_id, p.product_name\\nFROM Product p\\nLEFT JOIN Sales s ON p.product_id = s.product_id\\nWHERE s.product_id IS NOT NULL\\nGROUP BY p.product_id, p.product_name\\nHAVING SUM(CASE WHEN s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = COUNT(s.product_id) AND\\n       SUM(CASE WHEN s.sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' THEN 1 ELSE 0 END) = 0"
                    },
                    {
                        "username": "Haidram",
                        "content": "wrong answer bro......not passing the final test case"
                    },
                    {
                        "username": "Sachi12345",
                        "content": "# Write your MySQL query statement below\\n\\n\\nSELECT product_id,product_NAME FROM Product \\nWHERE product_id IN (\\nSELECT product_id FROM Sales GROUP BY 1 HAVING\\nMAX(sale_date) <= CAST(\\'2019-03-31\\' AS DATE)\\nAND MIN(sale_date) >= CAST(\\'2019-01-01\\' AS DATE))\\n"
                    },
                    {
                        "username": "ssiddhant462",
                        "content": "sale_date is already date type."
                    },
                    {
                        "username": "jyothidundi91",
                        "content": "Sorry for dumb question!\\n\\n seller_id | product_id | buyer_id | sale_date  | quantity | price |\\n+-----------+------------+----------+------------+----------+-------+\\n| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |\\n| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |\\n\\nSpring time covers from Jan to Mar, in that case it should be twp records. Can any one help?"
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "that is why there is \"ONLY\" mentioned in the question. So product should not be sold in any other quarter except Jan to mar. I believe it make sense"
                    },
                    {
                        "username": "nynptel",
                        "content": " `select s.product_id, product_name\\nfrom Sales s\\nleft join Product p on s.product_id = p.product_id\\ngroup by product_id\\nhaving min(sale_date) >= \\'2019-01-01\\' and max(sale_date) <= \\'2019-03-31\\'`"
                    },
                    {
                        "username": "vashdevl",
                        "content": "product Id 2 was sold in feb 17 2019 . why is this not valid row for the spring of 2019 ?\\n    | 2        | 2019-02-17 | 1        | 800"
                    },
                    {
                        "username": "weizhao5",
                        "content": "\\n\\'\\'\\'\\nselect distinct s.product_id,p.product_name \\nfrom sales s join product p on s.product_id = p.product_id\\nwhere s.product_id not in\\n(\\nselect product_id\\nfrom sales\\nwhere not (sale_date between \\'2019-01-01\\' and \\'2019-03-31\\')); \\n\\'\\'\\'"
                    }
                ]
            },
            {
                "id": 1576207,
                "content": [
                    {
                        "username": "bbwxnl",
                        "content": "WITH C AS (SELECT a.product_id,product_name,sale_date\\nfrom Product as a \\njoin Sales as b\\nusing(product_id))\\n\\nSELECT distinct product_id,product_name\\nfrom c\\nwhere sale_date between \\'2019-01-01\\' AND \\'2019-03-31\\'\\nAND product_id NOT IN \\n(SELECT product_id\\nFROM c\\nWHERE sale_date  not between \\'2019-01-01\\' AND \\'2019-03-31\\' )\\n"
                    },
                    {
                        "username": "Hanisha_DUa",
                        "content": "Not pasing the second test case. I am suffering the same with my almost correct solution!\\n\\n\"select s.product_id , p.product_name\\nfrom sales s\\njoin product p\\non p.product_id=s.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' and \\ns.product_id not in \\n(select product_id from sales\\nwhere sale_date between \\'2019-04-01\\' and \\'2019-12-31\\')\""
                    },
                    {
                        "username": "ketulshukla",
                        "content": "Not sure why the following query is incorrect? \\nselect distinct(s.product_id), p.product_name \\n\\nfrom Sales s \\n\\nleft join Product p\\n\\non s.product_id= p.product_id\\n\\nwhere s.sale_date>=\\'2019-01-01\\' and s.sale_date<=\\'2019-03-31\\'"
                    },
                    {
                        "username": "abhishek_nitk",
                        "content": "**\\nselect product_id,product_name\\nfrom Product\\nwhere product_id not in (select product_id from Sales where EXTRACT(MONTH FROM sale_date)>3)**"
                    },
                    {
                        "username": "Haidram",
                        "content": "wrong answer on last test case"
                    },
                    {
                        "username": "vizzy205",
                        "content": "can anyone tell why my code doesn\\'t work?\\n `result=product.merge(sales,how=\\'inner\\',on=\\'product_id\\') \\n    id=list(result[\\'product_id\\'].unique())\\n\\n    product_id=[]\\n    product_name=[]\\n\\n    for i in id:\\n        row=result[(result[\\'product_id\\']==i) & (\\'2019-01-01\\'<=result[\\'sale_date\\']) & (result[\\'sale_date\\']<=\\'2019-03-31\\')]\\n        original_row=result[result[\\'product_id\\']==i]\\n\\n        if len(row)==len(original_row):\\n            product_id.append(row[\\'product_id\\'])\\n            product_name.append(row[\\'product_name\\'])\\n\\n    return pd.DataFrame({\\'product_id\\':product_id,\\'product_name\\':product_name}).`"
                    },
                    {
                        "username": "manweiho2001",
                        "content": "Hi, can somebody tell me what is wrong with this solution: \\nSELECT Product.product_id, product_name FROM Product INNER JOIN Sales ON Product.product_id = Sales.product_id WHERE Sales.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' GROUP BY Sales.product_id;"
                    },
                    {
                        "username": "feelingfine",
                        "content": "Use except to filter out common values"
                    },
                    {
                        "username": "Hemanth43744",
                        "content": "select p.product_id,p.product_name from product p\njoin sales s on p.product_id = s.product_id \nwhere s.sale_date between '2019-01-01' and '2019-31' "
                    },
                    {
                        "username": "KAMISETTY_NAVITHASRI",
                        "content": "SELECT S.product_id,P.product_name\\nFROM Sales AS S\\njoin Product as P\\non P.product_id=S.product_id\\nGROUP BY S.product_id\\nHAVING MIN(S.sale_date) >= \\'2019-01-01\\' AND MAX(S.sale_date) <= \\'2019-03-31\\';\\n"
                    },
                    {
                        "username": "stellasuhy",
                        "content": "Why doesn\\'t this return any record?\\n\\nSELECT product_id, product_name FROM Product \\nWHERE product_id IN (\\n  SELECT product_id FROM Sales \\n  WHERE sale_date BETWEEN 2019-01-01 AND 2019-03-31\\n)\\nAND product_id NOT IN (\\n  SELECT product_id FROM Sales \\n  WHERE sale_date > 2019-03-31 OR sale_date < 2019-01-01\\n);"
                    },
                    {
                        "username": "srik_3",
                        "content": "can someone help identifying with whats wrong with this query -TIA\n\n\n\nwith cte as\n(select product_id ,sale_date  from Sales\nwhere product_id not in \n(select product_id from Sales where\nsale_date > '2019-03-31' or sale_date < '2019-01-01'))\n\n\nselect A.product_id , B.product_name from cte A join Product B\non A.product_id =B.product_id"
                    },
                    {
                        "username": "arabas2697",
                        "content": "SELECT\\nA.product_id,\\nB.product_name\\nfrom Sales A left join Product B\\non A.product_id = B.product_id\\nGROUP BY A.product_id, B.product_name\\nHAVING min(A.[sale_date]) >= datefromparts(2019,01,01) and max(A.[sale_date]) <= datefromparts(2019,03,31)\\n\\nTry this, the reason being G4 has 2 sale_dates and second sale_date is in 2nd qtr, question only specifies 1qtr. So better to agg the dates and use having criterion."
                    }
                ]
            },
            {
                "id": 1574663,
                "content": [
                    {
                        "username": "bbwxnl",
                        "content": "WITH C AS (SELECT a.product_id,product_name,sale_date\\nfrom Product as a \\njoin Sales as b\\nusing(product_id))\\n\\nSELECT distinct product_id,product_name\\nfrom c\\nwhere sale_date between \\'2019-01-01\\' AND \\'2019-03-31\\'\\nAND product_id NOT IN \\n(SELECT product_id\\nFROM c\\nWHERE sale_date  not between \\'2019-01-01\\' AND \\'2019-03-31\\' )\\n"
                    },
                    {
                        "username": "Hanisha_DUa",
                        "content": "Not pasing the second test case. I am suffering the same with my almost correct solution!\\n\\n\"select s.product_id , p.product_name\\nfrom sales s\\njoin product p\\non p.product_id=s.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' and \\ns.product_id not in \\n(select product_id from sales\\nwhere sale_date between \\'2019-04-01\\' and \\'2019-12-31\\')\""
                    },
                    {
                        "username": "ketulshukla",
                        "content": "Not sure why the following query is incorrect? \\nselect distinct(s.product_id), p.product_name \\n\\nfrom Sales s \\n\\nleft join Product p\\n\\non s.product_id= p.product_id\\n\\nwhere s.sale_date>=\\'2019-01-01\\' and s.sale_date<=\\'2019-03-31\\'"
                    },
                    {
                        "username": "abhishek_nitk",
                        "content": "**\\nselect product_id,product_name\\nfrom Product\\nwhere product_id not in (select product_id from Sales where EXTRACT(MONTH FROM sale_date)>3)**"
                    },
                    {
                        "username": "Haidram",
                        "content": "wrong answer on last test case"
                    },
                    {
                        "username": "vizzy205",
                        "content": "can anyone tell why my code doesn\\'t work?\\n `result=product.merge(sales,how=\\'inner\\',on=\\'product_id\\') \\n    id=list(result[\\'product_id\\'].unique())\\n\\n    product_id=[]\\n    product_name=[]\\n\\n    for i in id:\\n        row=result[(result[\\'product_id\\']==i) & (\\'2019-01-01\\'<=result[\\'sale_date\\']) & (result[\\'sale_date\\']<=\\'2019-03-31\\')]\\n        original_row=result[result[\\'product_id\\']==i]\\n\\n        if len(row)==len(original_row):\\n            product_id.append(row[\\'product_id\\'])\\n            product_name.append(row[\\'product_name\\'])\\n\\n    return pd.DataFrame({\\'product_id\\':product_id,\\'product_name\\':product_name}).`"
                    },
                    {
                        "username": "manweiho2001",
                        "content": "Hi, can somebody tell me what is wrong with this solution: \\nSELECT Product.product_id, product_name FROM Product INNER JOIN Sales ON Product.product_id = Sales.product_id WHERE Sales.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' GROUP BY Sales.product_id;"
                    },
                    {
                        "username": "feelingfine",
                        "content": "Use except to filter out common values"
                    },
                    {
                        "username": "Hemanth43744",
                        "content": "select p.product_id,p.product_name from product p\njoin sales s on p.product_id = s.product_id \nwhere s.sale_date between '2019-01-01' and '2019-31' "
                    },
                    {
                        "username": "KAMISETTY_NAVITHASRI",
                        "content": "SELECT S.product_id,P.product_name\\nFROM Sales AS S\\njoin Product as P\\non P.product_id=S.product_id\\nGROUP BY S.product_id\\nHAVING MIN(S.sale_date) >= \\'2019-01-01\\' AND MAX(S.sale_date) <= \\'2019-03-31\\';\\n"
                    },
                    {
                        "username": "stellasuhy",
                        "content": "Why doesn\\'t this return any record?\\n\\nSELECT product_id, product_name FROM Product \\nWHERE product_id IN (\\n  SELECT product_id FROM Sales \\n  WHERE sale_date BETWEEN 2019-01-01 AND 2019-03-31\\n)\\nAND product_id NOT IN (\\n  SELECT product_id FROM Sales \\n  WHERE sale_date > 2019-03-31 OR sale_date < 2019-01-01\\n);"
                    },
                    {
                        "username": "srik_3",
                        "content": "can someone help identifying with whats wrong with this query -TIA\n\n\n\nwith cte as\n(select product_id ,sale_date  from Sales\nwhere product_id not in \n(select product_id from Sales where\nsale_date > '2019-03-31' or sale_date < '2019-01-01'))\n\n\nselect A.product_id , B.product_name from cte A join Product B\non A.product_id =B.product_id"
                    },
                    {
                        "username": "arabas2697",
                        "content": "SELECT\\nA.product_id,\\nB.product_name\\nfrom Sales A left join Product B\\non A.product_id = B.product_id\\nGROUP BY A.product_id, B.product_name\\nHAVING min(A.[sale_date]) >= datefromparts(2019,01,01) and max(A.[sale_date]) <= datefromparts(2019,03,31)\\n\\nTry this, the reason being G4 has 2 sale_dates and second sale_date is in 2nd qtr, question only specifies 1qtr. So better to agg the dates and use having criterion."
                    }
                ]
            },
            {
                "id": 1576873,
                "content": [
                    {
                        "username": "bbwxnl",
                        "content": "WITH C AS (SELECT a.product_id,product_name,sale_date\\nfrom Product as a \\njoin Sales as b\\nusing(product_id))\\n\\nSELECT distinct product_id,product_name\\nfrom c\\nwhere sale_date between \\'2019-01-01\\' AND \\'2019-03-31\\'\\nAND product_id NOT IN \\n(SELECT product_id\\nFROM c\\nWHERE sale_date  not between \\'2019-01-01\\' AND \\'2019-03-31\\' )\\n"
                    },
                    {
                        "username": "Hanisha_DUa",
                        "content": "Not pasing the second test case. I am suffering the same with my almost correct solution!\\n\\n\"select s.product_id , p.product_name\\nfrom sales s\\njoin product p\\non p.product_id=s.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' and \\ns.product_id not in \\n(select product_id from sales\\nwhere sale_date between \\'2019-04-01\\' and \\'2019-12-31\\')\""
                    },
                    {
                        "username": "ketulshukla",
                        "content": "Not sure why the following query is incorrect? \\nselect distinct(s.product_id), p.product_name \\n\\nfrom Sales s \\n\\nleft join Product p\\n\\non s.product_id= p.product_id\\n\\nwhere s.sale_date>=\\'2019-01-01\\' and s.sale_date<=\\'2019-03-31\\'"
                    },
                    {
                        "username": "abhishek_nitk",
                        "content": "**\\nselect product_id,product_name\\nfrom Product\\nwhere product_id not in (select product_id from Sales where EXTRACT(MONTH FROM sale_date)>3)**"
                    },
                    {
                        "username": "Haidram",
                        "content": "wrong answer on last test case"
                    },
                    {
                        "username": "vizzy205",
                        "content": "can anyone tell why my code doesn\\'t work?\\n `result=product.merge(sales,how=\\'inner\\',on=\\'product_id\\') \\n    id=list(result[\\'product_id\\'].unique())\\n\\n    product_id=[]\\n    product_name=[]\\n\\n    for i in id:\\n        row=result[(result[\\'product_id\\']==i) & (\\'2019-01-01\\'<=result[\\'sale_date\\']) & (result[\\'sale_date\\']<=\\'2019-03-31\\')]\\n        original_row=result[result[\\'product_id\\']==i]\\n\\n        if len(row)==len(original_row):\\n            product_id.append(row[\\'product_id\\'])\\n            product_name.append(row[\\'product_name\\'])\\n\\n    return pd.DataFrame({\\'product_id\\':product_id,\\'product_name\\':product_name}).`"
                    },
                    {
                        "username": "manweiho2001",
                        "content": "Hi, can somebody tell me what is wrong with this solution: \\nSELECT Product.product_id, product_name FROM Product INNER JOIN Sales ON Product.product_id = Sales.product_id WHERE Sales.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' GROUP BY Sales.product_id;"
                    },
                    {
                        "username": "feelingfine",
                        "content": "Use except to filter out common values"
                    },
                    {
                        "username": "Hemanth43744",
                        "content": "select p.product_id,p.product_name from product p\njoin sales s on p.product_id = s.product_id \nwhere s.sale_date between '2019-01-01' and '2019-31' "
                    },
                    {
                        "username": "KAMISETTY_NAVITHASRI",
                        "content": "SELECT S.product_id,P.product_name\\nFROM Sales AS S\\njoin Product as P\\non P.product_id=S.product_id\\nGROUP BY S.product_id\\nHAVING MIN(S.sale_date) >= \\'2019-01-01\\' AND MAX(S.sale_date) <= \\'2019-03-31\\';\\n"
                    },
                    {
                        "username": "stellasuhy",
                        "content": "Why doesn\\'t this return any record?\\n\\nSELECT product_id, product_name FROM Product \\nWHERE product_id IN (\\n  SELECT product_id FROM Sales \\n  WHERE sale_date BETWEEN 2019-01-01 AND 2019-03-31\\n)\\nAND product_id NOT IN (\\n  SELECT product_id FROM Sales \\n  WHERE sale_date > 2019-03-31 OR sale_date < 2019-01-01\\n);"
                    },
                    {
                        "username": "srik_3",
                        "content": "can someone help identifying with whats wrong with this query -TIA\n\n\n\nwith cte as\n(select product_id ,sale_date  from Sales\nwhere product_id not in \n(select product_id from Sales where\nsale_date > '2019-03-31' or sale_date < '2019-01-01'))\n\n\nselect A.product_id , B.product_name from cte A join Product B\non A.product_id =B.product_id"
                    },
                    {
                        "username": "arabas2697",
                        "content": "SELECT\\nA.product_id,\\nB.product_name\\nfrom Sales A left join Product B\\non A.product_id = B.product_id\\nGROUP BY A.product_id, B.product_name\\nHAVING min(A.[sale_date]) >= datefromparts(2019,01,01) and max(A.[sale_date]) <= datefromparts(2019,03,31)\\n\\nTry this, the reason being G4 has 2 sale_dates and second sale_date is in 2nd qtr, question only specifies 1qtr. So better to agg the dates and use having criterion."
                    }
                ]
            },
            {
                "id": 2031696,
                "content": [
                    {
                        "username": "bbwxnl",
                        "content": "WITH C AS (SELECT a.product_id,product_name,sale_date\\nfrom Product as a \\njoin Sales as b\\nusing(product_id))\\n\\nSELECT distinct product_id,product_name\\nfrom c\\nwhere sale_date between \\'2019-01-01\\' AND \\'2019-03-31\\'\\nAND product_id NOT IN \\n(SELECT product_id\\nFROM c\\nWHERE sale_date  not between \\'2019-01-01\\' AND \\'2019-03-31\\' )\\n"
                    },
                    {
                        "username": "Hanisha_DUa",
                        "content": "Not pasing the second test case. I am suffering the same with my almost correct solution!\\n\\n\"select s.product_id , p.product_name\\nfrom sales s\\njoin product p\\non p.product_id=s.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' and \\ns.product_id not in \\n(select product_id from sales\\nwhere sale_date between \\'2019-04-01\\' and \\'2019-12-31\\')\""
                    },
                    {
                        "username": "ketulshukla",
                        "content": "Not sure why the following query is incorrect? \\nselect distinct(s.product_id), p.product_name \\n\\nfrom Sales s \\n\\nleft join Product p\\n\\non s.product_id= p.product_id\\n\\nwhere s.sale_date>=\\'2019-01-01\\' and s.sale_date<=\\'2019-03-31\\'"
                    },
                    {
                        "username": "abhishek_nitk",
                        "content": "**\\nselect product_id,product_name\\nfrom Product\\nwhere product_id not in (select product_id from Sales where EXTRACT(MONTH FROM sale_date)>3)**"
                    },
                    {
                        "username": "Haidram",
                        "content": "wrong answer on last test case"
                    },
                    {
                        "username": "vizzy205",
                        "content": "can anyone tell why my code doesn\\'t work?\\n `result=product.merge(sales,how=\\'inner\\',on=\\'product_id\\') \\n    id=list(result[\\'product_id\\'].unique())\\n\\n    product_id=[]\\n    product_name=[]\\n\\n    for i in id:\\n        row=result[(result[\\'product_id\\']==i) & (\\'2019-01-01\\'<=result[\\'sale_date\\']) & (result[\\'sale_date\\']<=\\'2019-03-31\\')]\\n        original_row=result[result[\\'product_id\\']==i]\\n\\n        if len(row)==len(original_row):\\n            product_id.append(row[\\'product_id\\'])\\n            product_name.append(row[\\'product_name\\'])\\n\\n    return pd.DataFrame({\\'product_id\\':product_id,\\'product_name\\':product_name}).`"
                    },
                    {
                        "username": "manweiho2001",
                        "content": "Hi, can somebody tell me what is wrong with this solution: \\nSELECT Product.product_id, product_name FROM Product INNER JOIN Sales ON Product.product_id = Sales.product_id WHERE Sales.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' GROUP BY Sales.product_id;"
                    },
                    {
                        "username": "feelingfine",
                        "content": "Use except to filter out common values"
                    },
                    {
                        "username": "Hemanth43744",
                        "content": "select p.product_id,p.product_name from product p\njoin sales s on p.product_id = s.product_id \nwhere s.sale_date between '2019-01-01' and '2019-31' "
                    },
                    {
                        "username": "KAMISETTY_NAVITHASRI",
                        "content": "SELECT S.product_id,P.product_name\\nFROM Sales AS S\\njoin Product as P\\non P.product_id=S.product_id\\nGROUP BY S.product_id\\nHAVING MIN(S.sale_date) >= \\'2019-01-01\\' AND MAX(S.sale_date) <= \\'2019-03-31\\';\\n"
                    },
                    {
                        "username": "stellasuhy",
                        "content": "Why doesn\\'t this return any record?\\n\\nSELECT product_id, product_name FROM Product \\nWHERE product_id IN (\\n  SELECT product_id FROM Sales \\n  WHERE sale_date BETWEEN 2019-01-01 AND 2019-03-31\\n)\\nAND product_id NOT IN (\\n  SELECT product_id FROM Sales \\n  WHERE sale_date > 2019-03-31 OR sale_date < 2019-01-01\\n);"
                    },
                    {
                        "username": "srik_3",
                        "content": "can someone help identifying with whats wrong with this query -TIA\n\n\n\nwith cte as\n(select product_id ,sale_date  from Sales\nwhere product_id not in \n(select product_id from Sales where\nsale_date > '2019-03-31' or sale_date < '2019-01-01'))\n\n\nselect A.product_id , B.product_name from cte A join Product B\non A.product_id =B.product_id"
                    },
                    {
                        "username": "arabas2697",
                        "content": "SELECT\\nA.product_id,\\nB.product_name\\nfrom Sales A left join Product B\\non A.product_id = B.product_id\\nGROUP BY A.product_id, B.product_name\\nHAVING min(A.[sale_date]) >= datefromparts(2019,01,01) and max(A.[sale_date]) <= datefromparts(2019,03,31)\\n\\nTry this, the reason being G4 has 2 sale_dates and second sale_date is in 2nd qtr, question only specifies 1qtr. So better to agg the dates and use having criterion."
                    }
                ]
            },
            {
                "id": 2000583,
                "content": [
                    {
                        "username": "bbwxnl",
                        "content": "WITH C AS (SELECT a.product_id,product_name,sale_date\\nfrom Product as a \\njoin Sales as b\\nusing(product_id))\\n\\nSELECT distinct product_id,product_name\\nfrom c\\nwhere sale_date between \\'2019-01-01\\' AND \\'2019-03-31\\'\\nAND product_id NOT IN \\n(SELECT product_id\\nFROM c\\nWHERE sale_date  not between \\'2019-01-01\\' AND \\'2019-03-31\\' )\\n"
                    },
                    {
                        "username": "Hanisha_DUa",
                        "content": "Not pasing the second test case. I am suffering the same with my almost correct solution!\\n\\n\"select s.product_id , p.product_name\\nfrom sales s\\njoin product p\\non p.product_id=s.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' and \\ns.product_id not in \\n(select product_id from sales\\nwhere sale_date between \\'2019-04-01\\' and \\'2019-12-31\\')\""
                    },
                    {
                        "username": "ketulshukla",
                        "content": "Not sure why the following query is incorrect? \\nselect distinct(s.product_id), p.product_name \\n\\nfrom Sales s \\n\\nleft join Product p\\n\\non s.product_id= p.product_id\\n\\nwhere s.sale_date>=\\'2019-01-01\\' and s.sale_date<=\\'2019-03-31\\'"
                    },
                    {
                        "username": "abhishek_nitk",
                        "content": "**\\nselect product_id,product_name\\nfrom Product\\nwhere product_id not in (select product_id from Sales where EXTRACT(MONTH FROM sale_date)>3)**"
                    },
                    {
                        "username": "Haidram",
                        "content": "wrong answer on last test case"
                    },
                    {
                        "username": "vizzy205",
                        "content": "can anyone tell why my code doesn\\'t work?\\n `result=product.merge(sales,how=\\'inner\\',on=\\'product_id\\') \\n    id=list(result[\\'product_id\\'].unique())\\n\\n    product_id=[]\\n    product_name=[]\\n\\n    for i in id:\\n        row=result[(result[\\'product_id\\']==i) & (\\'2019-01-01\\'<=result[\\'sale_date\\']) & (result[\\'sale_date\\']<=\\'2019-03-31\\')]\\n        original_row=result[result[\\'product_id\\']==i]\\n\\n        if len(row)==len(original_row):\\n            product_id.append(row[\\'product_id\\'])\\n            product_name.append(row[\\'product_name\\'])\\n\\n    return pd.DataFrame({\\'product_id\\':product_id,\\'product_name\\':product_name}).`"
                    },
                    {
                        "username": "manweiho2001",
                        "content": "Hi, can somebody tell me what is wrong with this solution: \\nSELECT Product.product_id, product_name FROM Product INNER JOIN Sales ON Product.product_id = Sales.product_id WHERE Sales.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' GROUP BY Sales.product_id;"
                    },
                    {
                        "username": "feelingfine",
                        "content": "Use except to filter out common values"
                    },
                    {
                        "username": "Hemanth43744",
                        "content": "select p.product_id,p.product_name from product p\njoin sales s on p.product_id = s.product_id \nwhere s.sale_date between '2019-01-01' and '2019-31' "
                    },
                    {
                        "username": "KAMISETTY_NAVITHASRI",
                        "content": "SELECT S.product_id,P.product_name\\nFROM Sales AS S\\njoin Product as P\\non P.product_id=S.product_id\\nGROUP BY S.product_id\\nHAVING MIN(S.sale_date) >= \\'2019-01-01\\' AND MAX(S.sale_date) <= \\'2019-03-31\\';\\n"
                    },
                    {
                        "username": "stellasuhy",
                        "content": "Why doesn\\'t this return any record?\\n\\nSELECT product_id, product_name FROM Product \\nWHERE product_id IN (\\n  SELECT product_id FROM Sales \\n  WHERE sale_date BETWEEN 2019-01-01 AND 2019-03-31\\n)\\nAND product_id NOT IN (\\n  SELECT product_id FROM Sales \\n  WHERE sale_date > 2019-03-31 OR sale_date < 2019-01-01\\n);"
                    },
                    {
                        "username": "srik_3",
                        "content": "can someone help identifying with whats wrong with this query -TIA\n\n\n\nwith cte as\n(select product_id ,sale_date  from Sales\nwhere product_id not in \n(select product_id from Sales where\nsale_date > '2019-03-31' or sale_date < '2019-01-01'))\n\n\nselect A.product_id , B.product_name from cte A join Product B\non A.product_id =B.product_id"
                    },
                    {
                        "username": "arabas2697",
                        "content": "SELECT\\nA.product_id,\\nB.product_name\\nfrom Sales A left join Product B\\non A.product_id = B.product_id\\nGROUP BY A.product_id, B.product_name\\nHAVING min(A.[sale_date]) >= datefromparts(2019,01,01) and max(A.[sale_date]) <= datefromparts(2019,03,31)\\n\\nTry this, the reason being G4 has 2 sale_dates and second sale_date is in 2nd qtr, question only specifies 1qtr. So better to agg the dates and use having criterion."
                    }
                ]
            },
            {
                "id": 1979551,
                "content": [
                    {
                        "username": "bbwxnl",
                        "content": "WITH C AS (SELECT a.product_id,product_name,sale_date\\nfrom Product as a \\njoin Sales as b\\nusing(product_id))\\n\\nSELECT distinct product_id,product_name\\nfrom c\\nwhere sale_date between \\'2019-01-01\\' AND \\'2019-03-31\\'\\nAND product_id NOT IN \\n(SELECT product_id\\nFROM c\\nWHERE sale_date  not between \\'2019-01-01\\' AND \\'2019-03-31\\' )\\n"
                    },
                    {
                        "username": "Hanisha_DUa",
                        "content": "Not pasing the second test case. I am suffering the same with my almost correct solution!\\n\\n\"select s.product_id , p.product_name\\nfrom sales s\\njoin product p\\non p.product_id=s.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' and \\ns.product_id not in \\n(select product_id from sales\\nwhere sale_date between \\'2019-04-01\\' and \\'2019-12-31\\')\""
                    },
                    {
                        "username": "ketulshukla",
                        "content": "Not sure why the following query is incorrect? \\nselect distinct(s.product_id), p.product_name \\n\\nfrom Sales s \\n\\nleft join Product p\\n\\non s.product_id= p.product_id\\n\\nwhere s.sale_date>=\\'2019-01-01\\' and s.sale_date<=\\'2019-03-31\\'"
                    },
                    {
                        "username": "abhishek_nitk",
                        "content": "**\\nselect product_id,product_name\\nfrom Product\\nwhere product_id not in (select product_id from Sales where EXTRACT(MONTH FROM sale_date)>3)**"
                    },
                    {
                        "username": "Haidram",
                        "content": "wrong answer on last test case"
                    },
                    {
                        "username": "vizzy205",
                        "content": "can anyone tell why my code doesn\\'t work?\\n `result=product.merge(sales,how=\\'inner\\',on=\\'product_id\\') \\n    id=list(result[\\'product_id\\'].unique())\\n\\n    product_id=[]\\n    product_name=[]\\n\\n    for i in id:\\n        row=result[(result[\\'product_id\\']==i) & (\\'2019-01-01\\'<=result[\\'sale_date\\']) & (result[\\'sale_date\\']<=\\'2019-03-31\\')]\\n        original_row=result[result[\\'product_id\\']==i]\\n\\n        if len(row)==len(original_row):\\n            product_id.append(row[\\'product_id\\'])\\n            product_name.append(row[\\'product_name\\'])\\n\\n    return pd.DataFrame({\\'product_id\\':product_id,\\'product_name\\':product_name}).`"
                    },
                    {
                        "username": "manweiho2001",
                        "content": "Hi, can somebody tell me what is wrong with this solution: \\nSELECT Product.product_id, product_name FROM Product INNER JOIN Sales ON Product.product_id = Sales.product_id WHERE Sales.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' GROUP BY Sales.product_id;"
                    },
                    {
                        "username": "feelingfine",
                        "content": "Use except to filter out common values"
                    },
                    {
                        "username": "Hemanth43744",
                        "content": "select p.product_id,p.product_name from product p\njoin sales s on p.product_id = s.product_id \nwhere s.sale_date between '2019-01-01' and '2019-31' "
                    },
                    {
                        "username": "KAMISETTY_NAVITHASRI",
                        "content": "SELECT S.product_id,P.product_name\\nFROM Sales AS S\\njoin Product as P\\non P.product_id=S.product_id\\nGROUP BY S.product_id\\nHAVING MIN(S.sale_date) >= \\'2019-01-01\\' AND MAX(S.sale_date) <= \\'2019-03-31\\';\\n"
                    },
                    {
                        "username": "stellasuhy",
                        "content": "Why doesn\\'t this return any record?\\n\\nSELECT product_id, product_name FROM Product \\nWHERE product_id IN (\\n  SELECT product_id FROM Sales \\n  WHERE sale_date BETWEEN 2019-01-01 AND 2019-03-31\\n)\\nAND product_id NOT IN (\\n  SELECT product_id FROM Sales \\n  WHERE sale_date > 2019-03-31 OR sale_date < 2019-01-01\\n);"
                    },
                    {
                        "username": "srik_3",
                        "content": "can someone help identifying with whats wrong with this query -TIA\n\n\n\nwith cte as\n(select product_id ,sale_date  from Sales\nwhere product_id not in \n(select product_id from Sales where\nsale_date > '2019-03-31' or sale_date < '2019-01-01'))\n\n\nselect A.product_id , B.product_name from cte A join Product B\non A.product_id =B.product_id"
                    },
                    {
                        "username": "arabas2697",
                        "content": "SELECT\\nA.product_id,\\nB.product_name\\nfrom Sales A left join Product B\\non A.product_id = B.product_id\\nGROUP BY A.product_id, B.product_name\\nHAVING min(A.[sale_date]) >= datefromparts(2019,01,01) and max(A.[sale_date]) <= datefromparts(2019,03,31)\\n\\nTry this, the reason being G4 has 2 sale_dates and second sale_date is in 2nd qtr, question only specifies 1qtr. So better to agg the dates and use having criterion."
                    }
                ]
            },
            {
                "id": 1966645,
                "content": [
                    {
                        "username": "bbwxnl",
                        "content": "WITH C AS (SELECT a.product_id,product_name,sale_date\\nfrom Product as a \\njoin Sales as b\\nusing(product_id))\\n\\nSELECT distinct product_id,product_name\\nfrom c\\nwhere sale_date between \\'2019-01-01\\' AND \\'2019-03-31\\'\\nAND product_id NOT IN \\n(SELECT product_id\\nFROM c\\nWHERE sale_date  not between \\'2019-01-01\\' AND \\'2019-03-31\\' )\\n"
                    },
                    {
                        "username": "Hanisha_DUa",
                        "content": "Not pasing the second test case. I am suffering the same with my almost correct solution!\\n\\n\"select s.product_id , p.product_name\\nfrom sales s\\njoin product p\\non p.product_id=s.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' and \\ns.product_id not in \\n(select product_id from sales\\nwhere sale_date between \\'2019-04-01\\' and \\'2019-12-31\\')\""
                    },
                    {
                        "username": "ketulshukla",
                        "content": "Not sure why the following query is incorrect? \\nselect distinct(s.product_id), p.product_name \\n\\nfrom Sales s \\n\\nleft join Product p\\n\\non s.product_id= p.product_id\\n\\nwhere s.sale_date>=\\'2019-01-01\\' and s.sale_date<=\\'2019-03-31\\'"
                    },
                    {
                        "username": "abhishek_nitk",
                        "content": "**\\nselect product_id,product_name\\nfrom Product\\nwhere product_id not in (select product_id from Sales where EXTRACT(MONTH FROM sale_date)>3)**"
                    },
                    {
                        "username": "Haidram",
                        "content": "wrong answer on last test case"
                    },
                    {
                        "username": "vizzy205",
                        "content": "can anyone tell why my code doesn\\'t work?\\n `result=product.merge(sales,how=\\'inner\\',on=\\'product_id\\') \\n    id=list(result[\\'product_id\\'].unique())\\n\\n    product_id=[]\\n    product_name=[]\\n\\n    for i in id:\\n        row=result[(result[\\'product_id\\']==i) & (\\'2019-01-01\\'<=result[\\'sale_date\\']) & (result[\\'sale_date\\']<=\\'2019-03-31\\')]\\n        original_row=result[result[\\'product_id\\']==i]\\n\\n        if len(row)==len(original_row):\\n            product_id.append(row[\\'product_id\\'])\\n            product_name.append(row[\\'product_name\\'])\\n\\n    return pd.DataFrame({\\'product_id\\':product_id,\\'product_name\\':product_name}).`"
                    },
                    {
                        "username": "manweiho2001",
                        "content": "Hi, can somebody tell me what is wrong with this solution: \\nSELECT Product.product_id, product_name FROM Product INNER JOIN Sales ON Product.product_id = Sales.product_id WHERE Sales.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' GROUP BY Sales.product_id;"
                    },
                    {
                        "username": "feelingfine",
                        "content": "Use except to filter out common values"
                    },
                    {
                        "username": "Hemanth43744",
                        "content": "select p.product_id,p.product_name from product p\njoin sales s on p.product_id = s.product_id \nwhere s.sale_date between '2019-01-01' and '2019-31' "
                    },
                    {
                        "username": "KAMISETTY_NAVITHASRI",
                        "content": "SELECT S.product_id,P.product_name\\nFROM Sales AS S\\njoin Product as P\\non P.product_id=S.product_id\\nGROUP BY S.product_id\\nHAVING MIN(S.sale_date) >= \\'2019-01-01\\' AND MAX(S.sale_date) <= \\'2019-03-31\\';\\n"
                    },
                    {
                        "username": "stellasuhy",
                        "content": "Why doesn\\'t this return any record?\\n\\nSELECT product_id, product_name FROM Product \\nWHERE product_id IN (\\n  SELECT product_id FROM Sales \\n  WHERE sale_date BETWEEN 2019-01-01 AND 2019-03-31\\n)\\nAND product_id NOT IN (\\n  SELECT product_id FROM Sales \\n  WHERE sale_date > 2019-03-31 OR sale_date < 2019-01-01\\n);"
                    },
                    {
                        "username": "srik_3",
                        "content": "can someone help identifying with whats wrong with this query -TIA\n\n\n\nwith cte as\n(select product_id ,sale_date  from Sales\nwhere product_id not in \n(select product_id from Sales where\nsale_date > '2019-03-31' or sale_date < '2019-01-01'))\n\n\nselect A.product_id , B.product_name from cte A join Product B\non A.product_id =B.product_id"
                    },
                    {
                        "username": "arabas2697",
                        "content": "SELECT\\nA.product_id,\\nB.product_name\\nfrom Sales A left join Product B\\non A.product_id = B.product_id\\nGROUP BY A.product_id, B.product_name\\nHAVING min(A.[sale_date]) >= datefromparts(2019,01,01) and max(A.[sale_date]) <= datefromparts(2019,03,31)\\n\\nTry this, the reason being G4 has 2 sale_dates and second sale_date is in 2nd qtr, question only specifies 1qtr. So better to agg the dates and use having criterion."
                    }
                ]
            },
            {
                "id": 1959660,
                "content": [
                    {
                        "username": "bbwxnl",
                        "content": "WITH C AS (SELECT a.product_id,product_name,sale_date\\nfrom Product as a \\njoin Sales as b\\nusing(product_id))\\n\\nSELECT distinct product_id,product_name\\nfrom c\\nwhere sale_date between \\'2019-01-01\\' AND \\'2019-03-31\\'\\nAND product_id NOT IN \\n(SELECT product_id\\nFROM c\\nWHERE sale_date  not between \\'2019-01-01\\' AND \\'2019-03-31\\' )\\n"
                    },
                    {
                        "username": "Hanisha_DUa",
                        "content": "Not pasing the second test case. I am suffering the same with my almost correct solution!\\n\\n\"select s.product_id , p.product_name\\nfrom sales s\\njoin product p\\non p.product_id=s.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' and \\ns.product_id not in \\n(select product_id from sales\\nwhere sale_date between \\'2019-04-01\\' and \\'2019-12-31\\')\""
                    },
                    {
                        "username": "ketulshukla",
                        "content": "Not sure why the following query is incorrect? \\nselect distinct(s.product_id), p.product_name \\n\\nfrom Sales s \\n\\nleft join Product p\\n\\non s.product_id= p.product_id\\n\\nwhere s.sale_date>=\\'2019-01-01\\' and s.sale_date<=\\'2019-03-31\\'"
                    },
                    {
                        "username": "abhishek_nitk",
                        "content": "**\\nselect product_id,product_name\\nfrom Product\\nwhere product_id not in (select product_id from Sales where EXTRACT(MONTH FROM sale_date)>3)**"
                    },
                    {
                        "username": "Haidram",
                        "content": "wrong answer on last test case"
                    },
                    {
                        "username": "vizzy205",
                        "content": "can anyone tell why my code doesn\\'t work?\\n `result=product.merge(sales,how=\\'inner\\',on=\\'product_id\\') \\n    id=list(result[\\'product_id\\'].unique())\\n\\n    product_id=[]\\n    product_name=[]\\n\\n    for i in id:\\n        row=result[(result[\\'product_id\\']==i) & (\\'2019-01-01\\'<=result[\\'sale_date\\']) & (result[\\'sale_date\\']<=\\'2019-03-31\\')]\\n        original_row=result[result[\\'product_id\\']==i]\\n\\n        if len(row)==len(original_row):\\n            product_id.append(row[\\'product_id\\'])\\n            product_name.append(row[\\'product_name\\'])\\n\\n    return pd.DataFrame({\\'product_id\\':product_id,\\'product_name\\':product_name}).`"
                    },
                    {
                        "username": "manweiho2001",
                        "content": "Hi, can somebody tell me what is wrong with this solution: \\nSELECT Product.product_id, product_name FROM Product INNER JOIN Sales ON Product.product_id = Sales.product_id WHERE Sales.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' GROUP BY Sales.product_id;"
                    },
                    {
                        "username": "feelingfine",
                        "content": "Use except to filter out common values"
                    },
                    {
                        "username": "Hemanth43744",
                        "content": "select p.product_id,p.product_name from product p\njoin sales s on p.product_id = s.product_id \nwhere s.sale_date between '2019-01-01' and '2019-31' "
                    },
                    {
                        "username": "KAMISETTY_NAVITHASRI",
                        "content": "SELECT S.product_id,P.product_name\\nFROM Sales AS S\\njoin Product as P\\non P.product_id=S.product_id\\nGROUP BY S.product_id\\nHAVING MIN(S.sale_date) >= \\'2019-01-01\\' AND MAX(S.sale_date) <= \\'2019-03-31\\';\\n"
                    },
                    {
                        "username": "stellasuhy",
                        "content": "Why doesn\\'t this return any record?\\n\\nSELECT product_id, product_name FROM Product \\nWHERE product_id IN (\\n  SELECT product_id FROM Sales \\n  WHERE sale_date BETWEEN 2019-01-01 AND 2019-03-31\\n)\\nAND product_id NOT IN (\\n  SELECT product_id FROM Sales \\n  WHERE sale_date > 2019-03-31 OR sale_date < 2019-01-01\\n);"
                    },
                    {
                        "username": "srik_3",
                        "content": "can someone help identifying with whats wrong with this query -TIA\n\n\n\nwith cte as\n(select product_id ,sale_date  from Sales\nwhere product_id not in \n(select product_id from Sales where\nsale_date > '2019-03-31' or sale_date < '2019-01-01'))\n\n\nselect A.product_id , B.product_name from cte A join Product B\non A.product_id =B.product_id"
                    },
                    {
                        "username": "arabas2697",
                        "content": "SELECT\\nA.product_id,\\nB.product_name\\nfrom Sales A left join Product B\\non A.product_id = B.product_id\\nGROUP BY A.product_id, B.product_name\\nHAVING min(A.[sale_date]) >= datefromparts(2019,01,01) and max(A.[sale_date]) <= datefromparts(2019,03,31)\\n\\nTry this, the reason being G4 has 2 sale_dates and second sale_date is in 2nd qtr, question only specifies 1qtr. So better to agg the dates and use having criterion."
                    }
                ]
            },
            {
                "id": 1926100,
                "content": [
                    {
                        "username": "bbwxnl",
                        "content": "WITH C AS (SELECT a.product_id,product_name,sale_date\\nfrom Product as a \\njoin Sales as b\\nusing(product_id))\\n\\nSELECT distinct product_id,product_name\\nfrom c\\nwhere sale_date between \\'2019-01-01\\' AND \\'2019-03-31\\'\\nAND product_id NOT IN \\n(SELECT product_id\\nFROM c\\nWHERE sale_date  not between \\'2019-01-01\\' AND \\'2019-03-31\\' )\\n"
                    },
                    {
                        "username": "Hanisha_DUa",
                        "content": "Not pasing the second test case. I am suffering the same with my almost correct solution!\\n\\n\"select s.product_id , p.product_name\\nfrom sales s\\njoin product p\\non p.product_id=s.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' and \\ns.product_id not in \\n(select product_id from sales\\nwhere sale_date between \\'2019-04-01\\' and \\'2019-12-31\\')\""
                    },
                    {
                        "username": "ketulshukla",
                        "content": "Not sure why the following query is incorrect? \\nselect distinct(s.product_id), p.product_name \\n\\nfrom Sales s \\n\\nleft join Product p\\n\\non s.product_id= p.product_id\\n\\nwhere s.sale_date>=\\'2019-01-01\\' and s.sale_date<=\\'2019-03-31\\'"
                    },
                    {
                        "username": "abhishek_nitk",
                        "content": "**\\nselect product_id,product_name\\nfrom Product\\nwhere product_id not in (select product_id from Sales where EXTRACT(MONTH FROM sale_date)>3)**"
                    },
                    {
                        "username": "Haidram",
                        "content": "wrong answer on last test case"
                    },
                    {
                        "username": "vizzy205",
                        "content": "can anyone tell why my code doesn\\'t work?\\n `result=product.merge(sales,how=\\'inner\\',on=\\'product_id\\') \\n    id=list(result[\\'product_id\\'].unique())\\n\\n    product_id=[]\\n    product_name=[]\\n\\n    for i in id:\\n        row=result[(result[\\'product_id\\']==i) & (\\'2019-01-01\\'<=result[\\'sale_date\\']) & (result[\\'sale_date\\']<=\\'2019-03-31\\')]\\n        original_row=result[result[\\'product_id\\']==i]\\n\\n        if len(row)==len(original_row):\\n            product_id.append(row[\\'product_id\\'])\\n            product_name.append(row[\\'product_name\\'])\\n\\n    return pd.DataFrame({\\'product_id\\':product_id,\\'product_name\\':product_name}).`"
                    },
                    {
                        "username": "manweiho2001",
                        "content": "Hi, can somebody tell me what is wrong with this solution: \\nSELECT Product.product_id, product_name FROM Product INNER JOIN Sales ON Product.product_id = Sales.product_id WHERE Sales.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' GROUP BY Sales.product_id;"
                    },
                    {
                        "username": "feelingfine",
                        "content": "Use except to filter out common values"
                    },
                    {
                        "username": "Hemanth43744",
                        "content": "select p.product_id,p.product_name from product p\njoin sales s on p.product_id = s.product_id \nwhere s.sale_date between '2019-01-01' and '2019-31' "
                    },
                    {
                        "username": "KAMISETTY_NAVITHASRI",
                        "content": "SELECT S.product_id,P.product_name\\nFROM Sales AS S\\njoin Product as P\\non P.product_id=S.product_id\\nGROUP BY S.product_id\\nHAVING MIN(S.sale_date) >= \\'2019-01-01\\' AND MAX(S.sale_date) <= \\'2019-03-31\\';\\n"
                    },
                    {
                        "username": "stellasuhy",
                        "content": "Why doesn\\'t this return any record?\\n\\nSELECT product_id, product_name FROM Product \\nWHERE product_id IN (\\n  SELECT product_id FROM Sales \\n  WHERE sale_date BETWEEN 2019-01-01 AND 2019-03-31\\n)\\nAND product_id NOT IN (\\n  SELECT product_id FROM Sales \\n  WHERE sale_date > 2019-03-31 OR sale_date < 2019-01-01\\n);"
                    },
                    {
                        "username": "srik_3",
                        "content": "can someone help identifying with whats wrong with this query -TIA\n\n\n\nwith cte as\n(select product_id ,sale_date  from Sales\nwhere product_id not in \n(select product_id from Sales where\nsale_date > '2019-03-31' or sale_date < '2019-01-01'))\n\n\nselect A.product_id , B.product_name from cte A join Product B\non A.product_id =B.product_id"
                    },
                    {
                        "username": "arabas2697",
                        "content": "SELECT\\nA.product_id,\\nB.product_name\\nfrom Sales A left join Product B\\non A.product_id = B.product_id\\nGROUP BY A.product_id, B.product_name\\nHAVING min(A.[sale_date]) >= datefromparts(2019,01,01) and max(A.[sale_date]) <= datefromparts(2019,03,31)\\n\\nTry this, the reason being G4 has 2 sale_dates and second sale_date is in 2nd qtr, question only specifies 1qtr. So better to agg the dates and use having criterion."
                    }
                ]
            },
            {
                "id": 1925806,
                "content": [
                    {
                        "username": "bbwxnl",
                        "content": "WITH C AS (SELECT a.product_id,product_name,sale_date\\nfrom Product as a \\njoin Sales as b\\nusing(product_id))\\n\\nSELECT distinct product_id,product_name\\nfrom c\\nwhere sale_date between \\'2019-01-01\\' AND \\'2019-03-31\\'\\nAND product_id NOT IN \\n(SELECT product_id\\nFROM c\\nWHERE sale_date  not between \\'2019-01-01\\' AND \\'2019-03-31\\' )\\n"
                    },
                    {
                        "username": "Hanisha_DUa",
                        "content": "Not pasing the second test case. I am suffering the same with my almost correct solution!\\n\\n\"select s.product_id , p.product_name\\nfrom sales s\\njoin product p\\non p.product_id=s.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' and \\ns.product_id not in \\n(select product_id from sales\\nwhere sale_date between \\'2019-04-01\\' and \\'2019-12-31\\')\""
                    },
                    {
                        "username": "ketulshukla",
                        "content": "Not sure why the following query is incorrect? \\nselect distinct(s.product_id), p.product_name \\n\\nfrom Sales s \\n\\nleft join Product p\\n\\non s.product_id= p.product_id\\n\\nwhere s.sale_date>=\\'2019-01-01\\' and s.sale_date<=\\'2019-03-31\\'"
                    },
                    {
                        "username": "abhishek_nitk",
                        "content": "**\\nselect product_id,product_name\\nfrom Product\\nwhere product_id not in (select product_id from Sales where EXTRACT(MONTH FROM sale_date)>3)**"
                    },
                    {
                        "username": "Haidram",
                        "content": "wrong answer on last test case"
                    },
                    {
                        "username": "vizzy205",
                        "content": "can anyone tell why my code doesn\\'t work?\\n `result=product.merge(sales,how=\\'inner\\',on=\\'product_id\\') \\n    id=list(result[\\'product_id\\'].unique())\\n\\n    product_id=[]\\n    product_name=[]\\n\\n    for i in id:\\n        row=result[(result[\\'product_id\\']==i) & (\\'2019-01-01\\'<=result[\\'sale_date\\']) & (result[\\'sale_date\\']<=\\'2019-03-31\\')]\\n        original_row=result[result[\\'product_id\\']==i]\\n\\n        if len(row)==len(original_row):\\n            product_id.append(row[\\'product_id\\'])\\n            product_name.append(row[\\'product_name\\'])\\n\\n    return pd.DataFrame({\\'product_id\\':product_id,\\'product_name\\':product_name}).`"
                    },
                    {
                        "username": "manweiho2001",
                        "content": "Hi, can somebody tell me what is wrong with this solution: \\nSELECT Product.product_id, product_name FROM Product INNER JOIN Sales ON Product.product_id = Sales.product_id WHERE Sales.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' GROUP BY Sales.product_id;"
                    },
                    {
                        "username": "feelingfine",
                        "content": "Use except to filter out common values"
                    },
                    {
                        "username": "Hemanth43744",
                        "content": "select p.product_id,p.product_name from product p\njoin sales s on p.product_id = s.product_id \nwhere s.sale_date between '2019-01-01' and '2019-31' "
                    },
                    {
                        "username": "KAMISETTY_NAVITHASRI",
                        "content": "SELECT S.product_id,P.product_name\\nFROM Sales AS S\\njoin Product as P\\non P.product_id=S.product_id\\nGROUP BY S.product_id\\nHAVING MIN(S.sale_date) >= \\'2019-01-01\\' AND MAX(S.sale_date) <= \\'2019-03-31\\';\\n"
                    },
                    {
                        "username": "stellasuhy",
                        "content": "Why doesn\\'t this return any record?\\n\\nSELECT product_id, product_name FROM Product \\nWHERE product_id IN (\\n  SELECT product_id FROM Sales \\n  WHERE sale_date BETWEEN 2019-01-01 AND 2019-03-31\\n)\\nAND product_id NOT IN (\\n  SELECT product_id FROM Sales \\n  WHERE sale_date > 2019-03-31 OR sale_date < 2019-01-01\\n);"
                    },
                    {
                        "username": "srik_3",
                        "content": "can someone help identifying with whats wrong with this query -TIA\n\n\n\nwith cte as\n(select product_id ,sale_date  from Sales\nwhere product_id not in \n(select product_id from Sales where\nsale_date > '2019-03-31' or sale_date < '2019-01-01'))\n\n\nselect A.product_id , B.product_name from cte A join Product B\non A.product_id =B.product_id"
                    },
                    {
                        "username": "arabas2697",
                        "content": "SELECT\\nA.product_id,\\nB.product_name\\nfrom Sales A left join Product B\\non A.product_id = B.product_id\\nGROUP BY A.product_id, B.product_name\\nHAVING min(A.[sale_date]) >= datefromparts(2019,01,01) and max(A.[sale_date]) <= datefromparts(2019,03,31)\\n\\nTry this, the reason being G4 has 2 sale_dates and second sale_date is in 2nd qtr, question only specifies 1qtr. So better to agg the dates and use having criterion."
                    }
                ]
            },
            {
                "id": 1893883,
                "content": [
                    {
                        "username": "testpan0115",
                        "content": "Can someone pls explain why this is not work?\nps : in testacse 10/13 it didn't contain product_id= 34 product_name= v in my output\n\nselect p.product_id ,p.product_name\nfrom Product p\nleft join Sales s\non p.product_id = s.product_id\ngroup by p.product_name\nhaving count(s.product_id) = \n            count(if(s.sale_date >= '2019-01-01' and s.sale_date <='2019-03-31',s.sale_date, null))"
                    },
                    {
                        "username": "sidde_95",
                        "content": "Why is this query not supported because it only says to output product_id and product_name  between date range 2019-01-01 and 2019-03-31\\n\\nselect a.product_id, a.product_name\\nfrom product a \\njoin sales b\\n    on a.product_id = b.product_id \\nwhere b.sale_date >= \\'2019-01-01\\' and b.sale_date <=\\'2019-03-31\\';"
                    },
                    {
                        "username": "arabas2697",
                        "content": "SELECT \\n      A.product_id,\\n      B.product_name\\nfrom Sales A left join Product B\\non A.product_id = B.product_id\\nGROUP BY A.product_id, B.product_name\\nHAVING min(A.[sale_date]) >= datefromparts(2019,01,01) and max(A.[sale_date]) <= datefromparts(2019,03,31)\\n \\nTry this, the reason being G4 has 2 sale_dates and second sale_date is in 2nd qtr, question only specifies 1qtr. So better to agg the dates and use having criterion."
                    },
                    {
                        "username": "Effy_Sama",
                        "content": "Why is this wrong :c \n\nselect product_id,\np.product_name\nfrom product p\nleft join sales s using(product_id)\nwhere product_id not in\n(select product_id\nfrom sales\nwhere month(sale_date) between 4 and 12)\nand month(s.sale_date) between 1 and 3"
                    },
                    {
                        "username": "lucasea777",
                        "content": "Instead of `<=`, you can use `MONTH(date) <= 3` \\uD83D\\uDE0E"
                    },
                    {
                        "username": "Z_N",
                        "content": "SELECT p.product_id, p.product_name\\nFROM Product p\\nLEFT JOIN Sales s\\nON p.product_id = s.product_id\\nGROUP BY p.product_id\\nHAVING MIN(sale_date) >= \\'2019-01-01\\' AND\\nMAX(sale_date) <=  \\'2019-03-31\\' "
                    },
                    {
                        "username": "arthireddy",
                        "content": "why is the below code not working\\nSELECT P.product_id, P.product_name from Product P RIGHT OUTER JOIN Sales S on P.product_id=S.product_id WHERE sale_date BETWEEN \\'2019-01-01\\' and \\'2019-03-31\\' and (p.product_id <> (SELECT p.product_id WHERE sale_date BETWEEN \\'2019-04-01\\' AND \\'2019-12-31\\');"
                    },
                    {
                        "username": "markov_r",
                        "content": "The query below passes the initial test case, but fails on TC 4, which is unfortunately way too long.\\nI don\\'t see any reason for failing, it\\'s quite simple:\\n- remove the intersection of  first quarter and non-first quarter sales, so keeping only the \"clean\" first quarter sales.\\n\\n```\\nselect p.product_id, p.product_name\\nfrom Product p\\njoin Sales s\\non p.product_id = s.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand p.product_id not in (\\n    select p2.product_id \\n    from Product p2\\n    join Sales s2\\n    on p2.product_id = s2.product_id\\n    where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\')\\n```"
                    },
                    {
                        "username": "victorpichugov",
                        "content": "7 / 13 testcases passed \\nLeetCode are you serious?))"
                    },
                    {
                        "username": "prasannaguda62",
                        "content": "select p.product_id,p.product_name from product p \\nleft join sales s \\non p.product_id=s.product_id where s.sale_date between 2019-01-01 and 2019-03-31\\n\\nWhat is wrong in my code"
                    },
                    {
                        "username": "vishweshhampali",
                        "content": "ONLY sold in 1st quarter .... this part you have missed"
                    },
                    {
                        "username": "yorkltesting",
                        "content": "Why my code is wrong? Can anyone help check for me?\\nSELECT DISTINCT p.product_id, p.product_name\\nFROM product p\\nLEFT JOIN Sales s1 ON p.product_id = s1.product_id AND s1.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nLEFT JOIN Sales s2 ON p.product_id = s2.product_id AND s2.sale_date > \\'2019-03-31\\'\\nWHERE s1.sale_date IS NOT NULL AND s2.sale_date IS NULL"
                    }
                ]
            },
            {
                "id": 1879590,
                "content": [
                    {
                        "username": "testpan0115",
                        "content": "Can someone pls explain why this is not work?\nps : in testacse 10/13 it didn't contain product_id= 34 product_name= v in my output\n\nselect p.product_id ,p.product_name\nfrom Product p\nleft join Sales s\non p.product_id = s.product_id\ngroup by p.product_name\nhaving count(s.product_id) = \n            count(if(s.sale_date >= '2019-01-01' and s.sale_date <='2019-03-31',s.sale_date, null))"
                    },
                    {
                        "username": "sidde_95",
                        "content": "Why is this query not supported because it only says to output product_id and product_name  between date range 2019-01-01 and 2019-03-31\\n\\nselect a.product_id, a.product_name\\nfrom product a \\njoin sales b\\n    on a.product_id = b.product_id \\nwhere b.sale_date >= \\'2019-01-01\\' and b.sale_date <=\\'2019-03-31\\';"
                    },
                    {
                        "username": "arabas2697",
                        "content": "SELECT \\n      A.product_id,\\n      B.product_name\\nfrom Sales A left join Product B\\non A.product_id = B.product_id\\nGROUP BY A.product_id, B.product_name\\nHAVING min(A.[sale_date]) >= datefromparts(2019,01,01) and max(A.[sale_date]) <= datefromparts(2019,03,31)\\n \\nTry this, the reason being G4 has 2 sale_dates and second sale_date is in 2nd qtr, question only specifies 1qtr. So better to agg the dates and use having criterion."
                    },
                    {
                        "username": "Effy_Sama",
                        "content": "Why is this wrong :c \n\nselect product_id,\np.product_name\nfrom product p\nleft join sales s using(product_id)\nwhere product_id not in\n(select product_id\nfrom sales\nwhere month(sale_date) between 4 and 12)\nand month(s.sale_date) between 1 and 3"
                    },
                    {
                        "username": "lucasea777",
                        "content": "Instead of `<=`, you can use `MONTH(date) <= 3` \\uD83D\\uDE0E"
                    },
                    {
                        "username": "Z_N",
                        "content": "SELECT p.product_id, p.product_name\\nFROM Product p\\nLEFT JOIN Sales s\\nON p.product_id = s.product_id\\nGROUP BY p.product_id\\nHAVING MIN(sale_date) >= \\'2019-01-01\\' AND\\nMAX(sale_date) <=  \\'2019-03-31\\' "
                    },
                    {
                        "username": "arthireddy",
                        "content": "why is the below code not working\\nSELECT P.product_id, P.product_name from Product P RIGHT OUTER JOIN Sales S on P.product_id=S.product_id WHERE sale_date BETWEEN \\'2019-01-01\\' and \\'2019-03-31\\' and (p.product_id <> (SELECT p.product_id WHERE sale_date BETWEEN \\'2019-04-01\\' AND \\'2019-12-31\\');"
                    },
                    {
                        "username": "markov_r",
                        "content": "The query below passes the initial test case, but fails on TC 4, which is unfortunately way too long.\\nI don\\'t see any reason for failing, it\\'s quite simple:\\n- remove the intersection of  first quarter and non-first quarter sales, so keeping only the \"clean\" first quarter sales.\\n\\n```\\nselect p.product_id, p.product_name\\nfrom Product p\\njoin Sales s\\non p.product_id = s.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand p.product_id not in (\\n    select p2.product_id \\n    from Product p2\\n    join Sales s2\\n    on p2.product_id = s2.product_id\\n    where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\')\\n```"
                    },
                    {
                        "username": "victorpichugov",
                        "content": "7 / 13 testcases passed \\nLeetCode are you serious?))"
                    },
                    {
                        "username": "prasannaguda62",
                        "content": "select p.product_id,p.product_name from product p \\nleft join sales s \\non p.product_id=s.product_id where s.sale_date between 2019-01-01 and 2019-03-31\\n\\nWhat is wrong in my code"
                    },
                    {
                        "username": "vishweshhampali",
                        "content": "ONLY sold in 1st quarter .... this part you have missed"
                    },
                    {
                        "username": "yorkltesting",
                        "content": "Why my code is wrong? Can anyone help check for me?\\nSELECT DISTINCT p.product_id, p.product_name\\nFROM product p\\nLEFT JOIN Sales s1 ON p.product_id = s1.product_id AND s1.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nLEFT JOIN Sales s2 ON p.product_id = s2.product_id AND s2.sale_date > \\'2019-03-31\\'\\nWHERE s1.sale_date IS NOT NULL AND s2.sale_date IS NULL"
                    }
                ]
            },
            {
                "id": 1831052,
                "content": [
                    {
                        "username": "testpan0115",
                        "content": "Can someone pls explain why this is not work?\nps : in testacse 10/13 it didn't contain product_id= 34 product_name= v in my output\n\nselect p.product_id ,p.product_name\nfrom Product p\nleft join Sales s\non p.product_id = s.product_id\ngroup by p.product_name\nhaving count(s.product_id) = \n            count(if(s.sale_date >= '2019-01-01' and s.sale_date <='2019-03-31',s.sale_date, null))"
                    },
                    {
                        "username": "sidde_95",
                        "content": "Why is this query not supported because it only says to output product_id and product_name  between date range 2019-01-01 and 2019-03-31\\n\\nselect a.product_id, a.product_name\\nfrom product a \\njoin sales b\\n    on a.product_id = b.product_id \\nwhere b.sale_date >= \\'2019-01-01\\' and b.sale_date <=\\'2019-03-31\\';"
                    },
                    {
                        "username": "arabas2697",
                        "content": "SELECT \\n      A.product_id,\\n      B.product_name\\nfrom Sales A left join Product B\\non A.product_id = B.product_id\\nGROUP BY A.product_id, B.product_name\\nHAVING min(A.[sale_date]) >= datefromparts(2019,01,01) and max(A.[sale_date]) <= datefromparts(2019,03,31)\\n \\nTry this, the reason being G4 has 2 sale_dates and second sale_date is in 2nd qtr, question only specifies 1qtr. So better to agg the dates and use having criterion."
                    },
                    {
                        "username": "Effy_Sama",
                        "content": "Why is this wrong :c \n\nselect product_id,\np.product_name\nfrom product p\nleft join sales s using(product_id)\nwhere product_id not in\n(select product_id\nfrom sales\nwhere month(sale_date) between 4 and 12)\nand month(s.sale_date) between 1 and 3"
                    },
                    {
                        "username": "lucasea777",
                        "content": "Instead of `<=`, you can use `MONTH(date) <= 3` \\uD83D\\uDE0E"
                    },
                    {
                        "username": "Z_N",
                        "content": "SELECT p.product_id, p.product_name\\nFROM Product p\\nLEFT JOIN Sales s\\nON p.product_id = s.product_id\\nGROUP BY p.product_id\\nHAVING MIN(sale_date) >= \\'2019-01-01\\' AND\\nMAX(sale_date) <=  \\'2019-03-31\\' "
                    },
                    {
                        "username": "arthireddy",
                        "content": "why is the below code not working\\nSELECT P.product_id, P.product_name from Product P RIGHT OUTER JOIN Sales S on P.product_id=S.product_id WHERE sale_date BETWEEN \\'2019-01-01\\' and \\'2019-03-31\\' and (p.product_id <> (SELECT p.product_id WHERE sale_date BETWEEN \\'2019-04-01\\' AND \\'2019-12-31\\');"
                    },
                    {
                        "username": "markov_r",
                        "content": "The query below passes the initial test case, but fails on TC 4, which is unfortunately way too long.\\nI don\\'t see any reason for failing, it\\'s quite simple:\\n- remove the intersection of  first quarter and non-first quarter sales, so keeping only the \"clean\" first quarter sales.\\n\\n```\\nselect p.product_id, p.product_name\\nfrom Product p\\njoin Sales s\\non p.product_id = s.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand p.product_id not in (\\n    select p2.product_id \\n    from Product p2\\n    join Sales s2\\n    on p2.product_id = s2.product_id\\n    where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\')\\n```"
                    },
                    {
                        "username": "victorpichugov",
                        "content": "7 / 13 testcases passed \\nLeetCode are you serious?))"
                    },
                    {
                        "username": "prasannaguda62",
                        "content": "select p.product_id,p.product_name from product p \\nleft join sales s \\non p.product_id=s.product_id where s.sale_date between 2019-01-01 and 2019-03-31\\n\\nWhat is wrong in my code"
                    },
                    {
                        "username": "vishweshhampali",
                        "content": "ONLY sold in 1st quarter .... this part you have missed"
                    },
                    {
                        "username": "yorkltesting",
                        "content": "Why my code is wrong? Can anyone help check for me?\\nSELECT DISTINCT p.product_id, p.product_name\\nFROM product p\\nLEFT JOIN Sales s1 ON p.product_id = s1.product_id AND s1.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nLEFT JOIN Sales s2 ON p.product_id = s2.product_id AND s2.sale_date > \\'2019-03-31\\'\\nWHERE s1.sale_date IS NOT NULL AND s2.sale_date IS NULL"
                    }
                ]
            },
            {
                "id": 1830781,
                "content": [
                    {
                        "username": "testpan0115",
                        "content": "Can someone pls explain why this is not work?\nps : in testacse 10/13 it didn't contain product_id= 34 product_name= v in my output\n\nselect p.product_id ,p.product_name\nfrom Product p\nleft join Sales s\non p.product_id = s.product_id\ngroup by p.product_name\nhaving count(s.product_id) = \n            count(if(s.sale_date >= '2019-01-01' and s.sale_date <='2019-03-31',s.sale_date, null))"
                    },
                    {
                        "username": "sidde_95",
                        "content": "Why is this query not supported because it only says to output product_id and product_name  between date range 2019-01-01 and 2019-03-31\\n\\nselect a.product_id, a.product_name\\nfrom product a \\njoin sales b\\n    on a.product_id = b.product_id \\nwhere b.sale_date >= \\'2019-01-01\\' and b.sale_date <=\\'2019-03-31\\';"
                    },
                    {
                        "username": "arabas2697",
                        "content": "SELECT \\n      A.product_id,\\n      B.product_name\\nfrom Sales A left join Product B\\non A.product_id = B.product_id\\nGROUP BY A.product_id, B.product_name\\nHAVING min(A.[sale_date]) >= datefromparts(2019,01,01) and max(A.[sale_date]) <= datefromparts(2019,03,31)\\n \\nTry this, the reason being G4 has 2 sale_dates and second sale_date is in 2nd qtr, question only specifies 1qtr. So better to agg the dates and use having criterion."
                    },
                    {
                        "username": "Effy_Sama",
                        "content": "Why is this wrong :c \n\nselect product_id,\np.product_name\nfrom product p\nleft join sales s using(product_id)\nwhere product_id not in\n(select product_id\nfrom sales\nwhere month(sale_date) between 4 and 12)\nand month(s.sale_date) between 1 and 3"
                    },
                    {
                        "username": "lucasea777",
                        "content": "Instead of `<=`, you can use `MONTH(date) <= 3` \\uD83D\\uDE0E"
                    },
                    {
                        "username": "Z_N",
                        "content": "SELECT p.product_id, p.product_name\\nFROM Product p\\nLEFT JOIN Sales s\\nON p.product_id = s.product_id\\nGROUP BY p.product_id\\nHAVING MIN(sale_date) >= \\'2019-01-01\\' AND\\nMAX(sale_date) <=  \\'2019-03-31\\' "
                    },
                    {
                        "username": "arthireddy",
                        "content": "why is the below code not working\\nSELECT P.product_id, P.product_name from Product P RIGHT OUTER JOIN Sales S on P.product_id=S.product_id WHERE sale_date BETWEEN \\'2019-01-01\\' and \\'2019-03-31\\' and (p.product_id <> (SELECT p.product_id WHERE sale_date BETWEEN \\'2019-04-01\\' AND \\'2019-12-31\\');"
                    },
                    {
                        "username": "markov_r",
                        "content": "The query below passes the initial test case, but fails on TC 4, which is unfortunately way too long.\\nI don\\'t see any reason for failing, it\\'s quite simple:\\n- remove the intersection of  first quarter and non-first quarter sales, so keeping only the \"clean\" first quarter sales.\\n\\n```\\nselect p.product_id, p.product_name\\nfrom Product p\\njoin Sales s\\non p.product_id = s.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand p.product_id not in (\\n    select p2.product_id \\n    from Product p2\\n    join Sales s2\\n    on p2.product_id = s2.product_id\\n    where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\')\\n```"
                    },
                    {
                        "username": "victorpichugov",
                        "content": "7 / 13 testcases passed \\nLeetCode are you serious?))"
                    },
                    {
                        "username": "prasannaguda62",
                        "content": "select p.product_id,p.product_name from product p \\nleft join sales s \\non p.product_id=s.product_id where s.sale_date between 2019-01-01 and 2019-03-31\\n\\nWhat is wrong in my code"
                    },
                    {
                        "username": "vishweshhampali",
                        "content": "ONLY sold in 1st quarter .... this part you have missed"
                    },
                    {
                        "username": "yorkltesting",
                        "content": "Why my code is wrong? Can anyone help check for me?\\nSELECT DISTINCT p.product_id, p.product_name\\nFROM product p\\nLEFT JOIN Sales s1 ON p.product_id = s1.product_id AND s1.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nLEFT JOIN Sales s2 ON p.product_id = s2.product_id AND s2.sale_date > \\'2019-03-31\\'\\nWHERE s1.sale_date IS NOT NULL AND s2.sale_date IS NULL"
                    }
                ]
            },
            {
                "id": 1828058,
                "content": [
                    {
                        "username": "testpan0115",
                        "content": "Can someone pls explain why this is not work?\nps : in testacse 10/13 it didn't contain product_id= 34 product_name= v in my output\n\nselect p.product_id ,p.product_name\nfrom Product p\nleft join Sales s\non p.product_id = s.product_id\ngroup by p.product_name\nhaving count(s.product_id) = \n            count(if(s.sale_date >= '2019-01-01' and s.sale_date <='2019-03-31',s.sale_date, null))"
                    },
                    {
                        "username": "sidde_95",
                        "content": "Why is this query not supported because it only says to output product_id and product_name  between date range 2019-01-01 and 2019-03-31\\n\\nselect a.product_id, a.product_name\\nfrom product a \\njoin sales b\\n    on a.product_id = b.product_id \\nwhere b.sale_date >= \\'2019-01-01\\' and b.sale_date <=\\'2019-03-31\\';"
                    },
                    {
                        "username": "arabas2697",
                        "content": "SELECT \\n      A.product_id,\\n      B.product_name\\nfrom Sales A left join Product B\\non A.product_id = B.product_id\\nGROUP BY A.product_id, B.product_name\\nHAVING min(A.[sale_date]) >= datefromparts(2019,01,01) and max(A.[sale_date]) <= datefromparts(2019,03,31)\\n \\nTry this, the reason being G4 has 2 sale_dates and second sale_date is in 2nd qtr, question only specifies 1qtr. So better to agg the dates and use having criterion."
                    },
                    {
                        "username": "Effy_Sama",
                        "content": "Why is this wrong :c \n\nselect product_id,\np.product_name\nfrom product p\nleft join sales s using(product_id)\nwhere product_id not in\n(select product_id\nfrom sales\nwhere month(sale_date) between 4 and 12)\nand month(s.sale_date) between 1 and 3"
                    },
                    {
                        "username": "lucasea777",
                        "content": "Instead of `<=`, you can use `MONTH(date) <= 3` \\uD83D\\uDE0E"
                    },
                    {
                        "username": "Z_N",
                        "content": "SELECT p.product_id, p.product_name\\nFROM Product p\\nLEFT JOIN Sales s\\nON p.product_id = s.product_id\\nGROUP BY p.product_id\\nHAVING MIN(sale_date) >= \\'2019-01-01\\' AND\\nMAX(sale_date) <=  \\'2019-03-31\\' "
                    },
                    {
                        "username": "arthireddy",
                        "content": "why is the below code not working\\nSELECT P.product_id, P.product_name from Product P RIGHT OUTER JOIN Sales S on P.product_id=S.product_id WHERE sale_date BETWEEN \\'2019-01-01\\' and \\'2019-03-31\\' and (p.product_id <> (SELECT p.product_id WHERE sale_date BETWEEN \\'2019-04-01\\' AND \\'2019-12-31\\');"
                    },
                    {
                        "username": "markov_r",
                        "content": "The query below passes the initial test case, but fails on TC 4, which is unfortunately way too long.\\nI don\\'t see any reason for failing, it\\'s quite simple:\\n- remove the intersection of  first quarter and non-first quarter sales, so keeping only the \"clean\" first quarter sales.\\n\\n```\\nselect p.product_id, p.product_name\\nfrom Product p\\njoin Sales s\\non p.product_id = s.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand p.product_id not in (\\n    select p2.product_id \\n    from Product p2\\n    join Sales s2\\n    on p2.product_id = s2.product_id\\n    where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\')\\n```"
                    },
                    {
                        "username": "victorpichugov",
                        "content": "7 / 13 testcases passed \\nLeetCode are you serious?))"
                    },
                    {
                        "username": "prasannaguda62",
                        "content": "select p.product_id,p.product_name from product p \\nleft join sales s \\non p.product_id=s.product_id where s.sale_date between 2019-01-01 and 2019-03-31\\n\\nWhat is wrong in my code"
                    },
                    {
                        "username": "vishweshhampali",
                        "content": "ONLY sold in 1st quarter .... this part you have missed"
                    },
                    {
                        "username": "yorkltesting",
                        "content": "Why my code is wrong? Can anyone help check for me?\\nSELECT DISTINCT p.product_id, p.product_name\\nFROM product p\\nLEFT JOIN Sales s1 ON p.product_id = s1.product_id AND s1.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nLEFT JOIN Sales s2 ON p.product_id = s2.product_id AND s2.sale_date > \\'2019-03-31\\'\\nWHERE s1.sale_date IS NOT NULL AND s2.sale_date IS NULL"
                    }
                ]
            },
            {
                "id": 1809016,
                "content": [
                    {
                        "username": "testpan0115",
                        "content": "Can someone pls explain why this is not work?\nps : in testacse 10/13 it didn't contain product_id= 34 product_name= v in my output\n\nselect p.product_id ,p.product_name\nfrom Product p\nleft join Sales s\non p.product_id = s.product_id\ngroup by p.product_name\nhaving count(s.product_id) = \n            count(if(s.sale_date >= '2019-01-01' and s.sale_date <='2019-03-31',s.sale_date, null))"
                    },
                    {
                        "username": "sidde_95",
                        "content": "Why is this query not supported because it only says to output product_id and product_name  between date range 2019-01-01 and 2019-03-31\\n\\nselect a.product_id, a.product_name\\nfrom product a \\njoin sales b\\n    on a.product_id = b.product_id \\nwhere b.sale_date >= \\'2019-01-01\\' and b.sale_date <=\\'2019-03-31\\';"
                    },
                    {
                        "username": "arabas2697",
                        "content": "SELECT \\n      A.product_id,\\n      B.product_name\\nfrom Sales A left join Product B\\non A.product_id = B.product_id\\nGROUP BY A.product_id, B.product_name\\nHAVING min(A.[sale_date]) >= datefromparts(2019,01,01) and max(A.[sale_date]) <= datefromparts(2019,03,31)\\n \\nTry this, the reason being G4 has 2 sale_dates and second sale_date is in 2nd qtr, question only specifies 1qtr. So better to agg the dates and use having criterion."
                    },
                    {
                        "username": "Effy_Sama",
                        "content": "Why is this wrong :c \n\nselect product_id,\np.product_name\nfrom product p\nleft join sales s using(product_id)\nwhere product_id not in\n(select product_id\nfrom sales\nwhere month(sale_date) between 4 and 12)\nand month(s.sale_date) between 1 and 3"
                    },
                    {
                        "username": "lucasea777",
                        "content": "Instead of `<=`, you can use `MONTH(date) <= 3` \\uD83D\\uDE0E"
                    },
                    {
                        "username": "Z_N",
                        "content": "SELECT p.product_id, p.product_name\\nFROM Product p\\nLEFT JOIN Sales s\\nON p.product_id = s.product_id\\nGROUP BY p.product_id\\nHAVING MIN(sale_date) >= \\'2019-01-01\\' AND\\nMAX(sale_date) <=  \\'2019-03-31\\' "
                    },
                    {
                        "username": "arthireddy",
                        "content": "why is the below code not working\\nSELECT P.product_id, P.product_name from Product P RIGHT OUTER JOIN Sales S on P.product_id=S.product_id WHERE sale_date BETWEEN \\'2019-01-01\\' and \\'2019-03-31\\' and (p.product_id <> (SELECT p.product_id WHERE sale_date BETWEEN \\'2019-04-01\\' AND \\'2019-12-31\\');"
                    },
                    {
                        "username": "markov_r",
                        "content": "The query below passes the initial test case, but fails on TC 4, which is unfortunately way too long.\\nI don\\'t see any reason for failing, it\\'s quite simple:\\n- remove the intersection of  first quarter and non-first quarter sales, so keeping only the \"clean\" first quarter sales.\\n\\n```\\nselect p.product_id, p.product_name\\nfrom Product p\\njoin Sales s\\non p.product_id = s.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand p.product_id not in (\\n    select p2.product_id \\n    from Product p2\\n    join Sales s2\\n    on p2.product_id = s2.product_id\\n    where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\')\\n```"
                    },
                    {
                        "username": "victorpichugov",
                        "content": "7 / 13 testcases passed \\nLeetCode are you serious?))"
                    },
                    {
                        "username": "prasannaguda62",
                        "content": "select p.product_id,p.product_name from product p \\nleft join sales s \\non p.product_id=s.product_id where s.sale_date between 2019-01-01 and 2019-03-31\\n\\nWhat is wrong in my code"
                    },
                    {
                        "username": "vishweshhampali",
                        "content": "ONLY sold in 1st quarter .... this part you have missed"
                    },
                    {
                        "username": "yorkltesting",
                        "content": "Why my code is wrong? Can anyone help check for me?\\nSELECT DISTINCT p.product_id, p.product_name\\nFROM product p\\nLEFT JOIN Sales s1 ON p.product_id = s1.product_id AND s1.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nLEFT JOIN Sales s2 ON p.product_id = s2.product_id AND s2.sale_date > \\'2019-03-31\\'\\nWHERE s1.sale_date IS NOT NULL AND s2.sale_date IS NULL"
                    }
                ]
            },
            {
                "id": 1808095,
                "content": [
                    {
                        "username": "testpan0115",
                        "content": "Can someone pls explain why this is not work?\nps : in testacse 10/13 it didn't contain product_id= 34 product_name= v in my output\n\nselect p.product_id ,p.product_name\nfrom Product p\nleft join Sales s\non p.product_id = s.product_id\ngroup by p.product_name\nhaving count(s.product_id) = \n            count(if(s.sale_date >= '2019-01-01' and s.sale_date <='2019-03-31',s.sale_date, null))"
                    },
                    {
                        "username": "sidde_95",
                        "content": "Why is this query not supported because it only says to output product_id and product_name  between date range 2019-01-01 and 2019-03-31\\n\\nselect a.product_id, a.product_name\\nfrom product a \\njoin sales b\\n    on a.product_id = b.product_id \\nwhere b.sale_date >= \\'2019-01-01\\' and b.sale_date <=\\'2019-03-31\\';"
                    },
                    {
                        "username": "arabas2697",
                        "content": "SELECT \\n      A.product_id,\\n      B.product_name\\nfrom Sales A left join Product B\\non A.product_id = B.product_id\\nGROUP BY A.product_id, B.product_name\\nHAVING min(A.[sale_date]) >= datefromparts(2019,01,01) and max(A.[sale_date]) <= datefromparts(2019,03,31)\\n \\nTry this, the reason being G4 has 2 sale_dates and second sale_date is in 2nd qtr, question only specifies 1qtr. So better to agg the dates and use having criterion."
                    },
                    {
                        "username": "Effy_Sama",
                        "content": "Why is this wrong :c \n\nselect product_id,\np.product_name\nfrom product p\nleft join sales s using(product_id)\nwhere product_id not in\n(select product_id\nfrom sales\nwhere month(sale_date) between 4 and 12)\nand month(s.sale_date) between 1 and 3"
                    },
                    {
                        "username": "lucasea777",
                        "content": "Instead of `<=`, you can use `MONTH(date) <= 3` \\uD83D\\uDE0E"
                    },
                    {
                        "username": "Z_N",
                        "content": "SELECT p.product_id, p.product_name\\nFROM Product p\\nLEFT JOIN Sales s\\nON p.product_id = s.product_id\\nGROUP BY p.product_id\\nHAVING MIN(sale_date) >= \\'2019-01-01\\' AND\\nMAX(sale_date) <=  \\'2019-03-31\\' "
                    },
                    {
                        "username": "arthireddy",
                        "content": "why is the below code not working\\nSELECT P.product_id, P.product_name from Product P RIGHT OUTER JOIN Sales S on P.product_id=S.product_id WHERE sale_date BETWEEN \\'2019-01-01\\' and \\'2019-03-31\\' and (p.product_id <> (SELECT p.product_id WHERE sale_date BETWEEN \\'2019-04-01\\' AND \\'2019-12-31\\');"
                    },
                    {
                        "username": "markov_r",
                        "content": "The query below passes the initial test case, but fails on TC 4, which is unfortunately way too long.\\nI don\\'t see any reason for failing, it\\'s quite simple:\\n- remove the intersection of  first quarter and non-first quarter sales, so keeping only the \"clean\" first quarter sales.\\n\\n```\\nselect p.product_id, p.product_name\\nfrom Product p\\njoin Sales s\\non p.product_id = s.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand p.product_id not in (\\n    select p2.product_id \\n    from Product p2\\n    join Sales s2\\n    on p2.product_id = s2.product_id\\n    where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\')\\n```"
                    },
                    {
                        "username": "victorpichugov",
                        "content": "7 / 13 testcases passed \\nLeetCode are you serious?))"
                    },
                    {
                        "username": "prasannaguda62",
                        "content": "select p.product_id,p.product_name from product p \\nleft join sales s \\non p.product_id=s.product_id where s.sale_date between 2019-01-01 and 2019-03-31\\n\\nWhat is wrong in my code"
                    },
                    {
                        "username": "vishweshhampali",
                        "content": "ONLY sold in 1st quarter .... this part you have missed"
                    },
                    {
                        "username": "yorkltesting",
                        "content": "Why my code is wrong? Can anyone help check for me?\\nSELECT DISTINCT p.product_id, p.product_name\\nFROM product p\\nLEFT JOIN Sales s1 ON p.product_id = s1.product_id AND s1.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nLEFT JOIN Sales s2 ON p.product_id = s2.product_id AND s2.sale_date > \\'2019-03-31\\'\\nWHERE s1.sale_date IS NOT NULL AND s2.sale_date IS NULL"
                    }
                ]
            },
            {
                "id": 1804339,
                "content": [
                    {
                        "username": "testpan0115",
                        "content": "Can someone pls explain why this is not work?\nps : in testacse 10/13 it didn't contain product_id= 34 product_name= v in my output\n\nselect p.product_id ,p.product_name\nfrom Product p\nleft join Sales s\non p.product_id = s.product_id\ngroup by p.product_name\nhaving count(s.product_id) = \n            count(if(s.sale_date >= '2019-01-01' and s.sale_date <='2019-03-31',s.sale_date, null))"
                    },
                    {
                        "username": "sidde_95",
                        "content": "Why is this query not supported because it only says to output product_id and product_name  between date range 2019-01-01 and 2019-03-31\\n\\nselect a.product_id, a.product_name\\nfrom product a \\njoin sales b\\n    on a.product_id = b.product_id \\nwhere b.sale_date >= \\'2019-01-01\\' and b.sale_date <=\\'2019-03-31\\';"
                    },
                    {
                        "username": "arabas2697",
                        "content": "SELECT \\n      A.product_id,\\n      B.product_name\\nfrom Sales A left join Product B\\non A.product_id = B.product_id\\nGROUP BY A.product_id, B.product_name\\nHAVING min(A.[sale_date]) >= datefromparts(2019,01,01) and max(A.[sale_date]) <= datefromparts(2019,03,31)\\n \\nTry this, the reason being G4 has 2 sale_dates and second sale_date is in 2nd qtr, question only specifies 1qtr. So better to agg the dates and use having criterion."
                    },
                    {
                        "username": "Effy_Sama",
                        "content": "Why is this wrong :c \n\nselect product_id,\np.product_name\nfrom product p\nleft join sales s using(product_id)\nwhere product_id not in\n(select product_id\nfrom sales\nwhere month(sale_date) between 4 and 12)\nand month(s.sale_date) between 1 and 3"
                    },
                    {
                        "username": "lucasea777",
                        "content": "Instead of `<=`, you can use `MONTH(date) <= 3` \\uD83D\\uDE0E"
                    },
                    {
                        "username": "Z_N",
                        "content": "SELECT p.product_id, p.product_name\\nFROM Product p\\nLEFT JOIN Sales s\\nON p.product_id = s.product_id\\nGROUP BY p.product_id\\nHAVING MIN(sale_date) >= \\'2019-01-01\\' AND\\nMAX(sale_date) <=  \\'2019-03-31\\' "
                    },
                    {
                        "username": "arthireddy",
                        "content": "why is the below code not working\\nSELECT P.product_id, P.product_name from Product P RIGHT OUTER JOIN Sales S on P.product_id=S.product_id WHERE sale_date BETWEEN \\'2019-01-01\\' and \\'2019-03-31\\' and (p.product_id <> (SELECT p.product_id WHERE sale_date BETWEEN \\'2019-04-01\\' AND \\'2019-12-31\\');"
                    },
                    {
                        "username": "markov_r",
                        "content": "The query below passes the initial test case, but fails on TC 4, which is unfortunately way too long.\\nI don\\'t see any reason for failing, it\\'s quite simple:\\n- remove the intersection of  first quarter and non-first quarter sales, so keeping only the \"clean\" first quarter sales.\\n\\n```\\nselect p.product_id, p.product_name\\nfrom Product p\\njoin Sales s\\non p.product_id = s.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand p.product_id not in (\\n    select p2.product_id \\n    from Product p2\\n    join Sales s2\\n    on p2.product_id = s2.product_id\\n    where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\')\\n```"
                    },
                    {
                        "username": "victorpichugov",
                        "content": "7 / 13 testcases passed \\nLeetCode are you serious?))"
                    },
                    {
                        "username": "prasannaguda62",
                        "content": "select p.product_id,p.product_name from product p \\nleft join sales s \\non p.product_id=s.product_id where s.sale_date between 2019-01-01 and 2019-03-31\\n\\nWhat is wrong in my code"
                    },
                    {
                        "username": "vishweshhampali",
                        "content": "ONLY sold in 1st quarter .... this part you have missed"
                    },
                    {
                        "username": "yorkltesting",
                        "content": "Why my code is wrong? Can anyone help check for me?\\nSELECT DISTINCT p.product_id, p.product_name\\nFROM product p\\nLEFT JOIN Sales s1 ON p.product_id = s1.product_id AND s1.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nLEFT JOIN Sales s2 ON p.product_id = s2.product_id AND s2.sale_date > \\'2019-03-31\\'\\nWHERE s1.sale_date IS NOT NULL AND s2.sale_date IS NULL"
                    }
                ]
            },
            {
                "id": 1803052,
                "content": [
                    {
                        "username": "testpan0115",
                        "content": "Can someone pls explain why this is not work?\nps : in testacse 10/13 it didn't contain product_id= 34 product_name= v in my output\n\nselect p.product_id ,p.product_name\nfrom Product p\nleft join Sales s\non p.product_id = s.product_id\ngroup by p.product_name\nhaving count(s.product_id) = \n            count(if(s.sale_date >= '2019-01-01' and s.sale_date <='2019-03-31',s.sale_date, null))"
                    },
                    {
                        "username": "sidde_95",
                        "content": "Why is this query not supported because it only says to output product_id and product_name  between date range 2019-01-01 and 2019-03-31\\n\\nselect a.product_id, a.product_name\\nfrom product a \\njoin sales b\\n    on a.product_id = b.product_id \\nwhere b.sale_date >= \\'2019-01-01\\' and b.sale_date <=\\'2019-03-31\\';"
                    },
                    {
                        "username": "arabas2697",
                        "content": "SELECT \\n      A.product_id,\\n      B.product_name\\nfrom Sales A left join Product B\\non A.product_id = B.product_id\\nGROUP BY A.product_id, B.product_name\\nHAVING min(A.[sale_date]) >= datefromparts(2019,01,01) and max(A.[sale_date]) <= datefromparts(2019,03,31)\\n \\nTry this, the reason being G4 has 2 sale_dates and second sale_date is in 2nd qtr, question only specifies 1qtr. So better to agg the dates and use having criterion."
                    },
                    {
                        "username": "Effy_Sama",
                        "content": "Why is this wrong :c \n\nselect product_id,\np.product_name\nfrom product p\nleft join sales s using(product_id)\nwhere product_id not in\n(select product_id\nfrom sales\nwhere month(sale_date) between 4 and 12)\nand month(s.sale_date) between 1 and 3"
                    },
                    {
                        "username": "lucasea777",
                        "content": "Instead of `<=`, you can use `MONTH(date) <= 3` \\uD83D\\uDE0E"
                    },
                    {
                        "username": "Z_N",
                        "content": "SELECT p.product_id, p.product_name\\nFROM Product p\\nLEFT JOIN Sales s\\nON p.product_id = s.product_id\\nGROUP BY p.product_id\\nHAVING MIN(sale_date) >= \\'2019-01-01\\' AND\\nMAX(sale_date) <=  \\'2019-03-31\\' "
                    },
                    {
                        "username": "arthireddy",
                        "content": "why is the below code not working\\nSELECT P.product_id, P.product_name from Product P RIGHT OUTER JOIN Sales S on P.product_id=S.product_id WHERE sale_date BETWEEN \\'2019-01-01\\' and \\'2019-03-31\\' and (p.product_id <> (SELECT p.product_id WHERE sale_date BETWEEN \\'2019-04-01\\' AND \\'2019-12-31\\');"
                    },
                    {
                        "username": "markov_r",
                        "content": "The query below passes the initial test case, but fails on TC 4, which is unfortunately way too long.\\nI don\\'t see any reason for failing, it\\'s quite simple:\\n- remove the intersection of  first quarter and non-first quarter sales, so keeping only the \"clean\" first quarter sales.\\n\\n```\\nselect p.product_id, p.product_name\\nfrom Product p\\njoin Sales s\\non p.product_id = s.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand p.product_id not in (\\n    select p2.product_id \\n    from Product p2\\n    join Sales s2\\n    on p2.product_id = s2.product_id\\n    where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\')\\n```"
                    },
                    {
                        "username": "victorpichugov",
                        "content": "7 / 13 testcases passed \\nLeetCode are you serious?))"
                    },
                    {
                        "username": "prasannaguda62",
                        "content": "select p.product_id,p.product_name from product p \\nleft join sales s \\non p.product_id=s.product_id where s.sale_date between 2019-01-01 and 2019-03-31\\n\\nWhat is wrong in my code"
                    },
                    {
                        "username": "vishweshhampali",
                        "content": "ONLY sold in 1st quarter .... this part you have missed"
                    },
                    {
                        "username": "yorkltesting",
                        "content": "Why my code is wrong? Can anyone help check for me?\\nSELECT DISTINCT p.product_id, p.product_name\\nFROM product p\\nLEFT JOIN Sales s1 ON p.product_id = s1.product_id AND s1.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nLEFT JOIN Sales s2 ON p.product_id = s2.product_id AND s2.sale_date > \\'2019-03-31\\'\\nWHERE s1.sale_date IS NOT NULL AND s2.sale_date IS NULL"
                    }
                ]
            },
            {
                "id": 1793175,
                "content": [
                    {
                        "username": "testpan0115",
                        "content": "Can someone pls explain why this is not work?\nps : in testacse 10/13 it didn't contain product_id= 34 product_name= v in my output\n\nselect p.product_id ,p.product_name\nfrom Product p\nleft join Sales s\non p.product_id = s.product_id\ngroup by p.product_name\nhaving count(s.product_id) = \n            count(if(s.sale_date >= '2019-01-01' and s.sale_date <='2019-03-31',s.sale_date, null))"
                    },
                    {
                        "username": "sidde_95",
                        "content": "Why is this query not supported because it only says to output product_id and product_name  between date range 2019-01-01 and 2019-03-31\\n\\nselect a.product_id, a.product_name\\nfrom product a \\njoin sales b\\n    on a.product_id = b.product_id \\nwhere b.sale_date >= \\'2019-01-01\\' and b.sale_date <=\\'2019-03-31\\';"
                    },
                    {
                        "username": "arabas2697",
                        "content": "SELECT \\n      A.product_id,\\n      B.product_name\\nfrom Sales A left join Product B\\non A.product_id = B.product_id\\nGROUP BY A.product_id, B.product_name\\nHAVING min(A.[sale_date]) >= datefromparts(2019,01,01) and max(A.[sale_date]) <= datefromparts(2019,03,31)\\n \\nTry this, the reason being G4 has 2 sale_dates and second sale_date is in 2nd qtr, question only specifies 1qtr. So better to agg the dates and use having criterion."
                    },
                    {
                        "username": "Effy_Sama",
                        "content": "Why is this wrong :c \n\nselect product_id,\np.product_name\nfrom product p\nleft join sales s using(product_id)\nwhere product_id not in\n(select product_id\nfrom sales\nwhere month(sale_date) between 4 and 12)\nand month(s.sale_date) between 1 and 3"
                    },
                    {
                        "username": "lucasea777",
                        "content": "Instead of `<=`, you can use `MONTH(date) <= 3` \\uD83D\\uDE0E"
                    },
                    {
                        "username": "Z_N",
                        "content": "SELECT p.product_id, p.product_name\\nFROM Product p\\nLEFT JOIN Sales s\\nON p.product_id = s.product_id\\nGROUP BY p.product_id\\nHAVING MIN(sale_date) >= \\'2019-01-01\\' AND\\nMAX(sale_date) <=  \\'2019-03-31\\' "
                    },
                    {
                        "username": "arthireddy",
                        "content": "why is the below code not working\\nSELECT P.product_id, P.product_name from Product P RIGHT OUTER JOIN Sales S on P.product_id=S.product_id WHERE sale_date BETWEEN \\'2019-01-01\\' and \\'2019-03-31\\' and (p.product_id <> (SELECT p.product_id WHERE sale_date BETWEEN \\'2019-04-01\\' AND \\'2019-12-31\\');"
                    },
                    {
                        "username": "markov_r",
                        "content": "The query below passes the initial test case, but fails on TC 4, which is unfortunately way too long.\\nI don\\'t see any reason for failing, it\\'s quite simple:\\n- remove the intersection of  first quarter and non-first quarter sales, so keeping only the \"clean\" first quarter sales.\\n\\n```\\nselect p.product_id, p.product_name\\nfrom Product p\\njoin Sales s\\non p.product_id = s.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand p.product_id not in (\\n    select p2.product_id \\n    from Product p2\\n    join Sales s2\\n    on p2.product_id = s2.product_id\\n    where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\')\\n```"
                    },
                    {
                        "username": "victorpichugov",
                        "content": "7 / 13 testcases passed \\nLeetCode are you serious?))"
                    },
                    {
                        "username": "prasannaguda62",
                        "content": "select p.product_id,p.product_name from product p \\nleft join sales s \\non p.product_id=s.product_id where s.sale_date between 2019-01-01 and 2019-03-31\\n\\nWhat is wrong in my code"
                    },
                    {
                        "username": "vishweshhampali",
                        "content": "ONLY sold in 1st quarter .... this part you have missed"
                    },
                    {
                        "username": "yorkltesting",
                        "content": "Why my code is wrong? Can anyone help check for me?\\nSELECT DISTINCT p.product_id, p.product_name\\nFROM product p\\nLEFT JOIN Sales s1 ON p.product_id = s1.product_id AND s1.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nLEFT JOIN Sales s2 ON p.product_id = s2.product_id AND s2.sale_date > \\'2019-03-31\\'\\nWHERE s1.sale_date IS NOT NULL AND s2.sale_date IS NULL"
                    }
                ]
            },
            {
                "id": 1793156,
                "content": [
                    {
                        "username": "adityachatterjee",
                        "content": "Why would the below query not work? Not considering the performance here. Only from solution correctness standpoint.\n\nSELECT P.product_id,P.product_name\nFROM\nSALES S\nLEFT JOIN\n(SELECT DISTINCT * FROM PRODUCT) P\nON\nS.PRODUCT_ID=P.PRODUCT_ID\nWHERE YEAR(SALE_DATE)=2019 AND MONTH(SALE_DATE)<=3 AND P.PRODUCT_ID NOT IN (SELECT PRODUCT_ID FROM SALES WHERE YEAR(SALE_DATE)=2019 AND MONTH (SALE_DATE)>3) \n##SALE_DATE>=2019-01-01 AND SALE_DATE<=2019-03-31\nGROUP BY 1,2 ORDER BY PRODUCT_ID"
                    },
                    {
                        "username": "akashdubey2047",
                        "content": "SELECT p.product_id, product_name \\nFROM Product P INNER JOIN Sales S ON p.product_id=s.product_id \\nWHERE p.product_id NOT IN (SELECT product_id FROM Sales WHERE sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\') \\nGROUP BY p.product_id,product_name;"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "Select Product_id,Product_name from Product where Product_id in (select Product_id from Sales Group by product_id having Min(sale_date)>=\\'2019-01-01\\' and Max(Sale_date)<=\\'2019-03-31\\');"
                    },
                    {
                        "username": "ShubhayanS",
                        "content": "\\n`select product_id, product_name from Product \\nwhere product_id in\\n(select product_id  from Sales\\ngroup by 1\\nhaving max(year(sale_date)) = 2019 and max(month(sale_date)) <=3)`[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "omehdiakram",
                        "content": "WITH SPRING_SALES AS (\\n    SELECT * FROM SALES WHERE SALE_DATE BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' \\n), OTHER_SALES AS (\\n    SELECT * FROM SALES WHERE SALE_DATE BETWEEN \\'2019-04-01\\' AND \\'2019-12-31\\' \\n)\\nSELECT \\n    DISTINCT P.PRODUCT_ID AS product_id, \\n    P.PRODUCT_NAME AS product_name \\nFROM \\n    PRODUCT P JOIN SPRING_SALES S \\nON \\n    P.PRODUCT_ID = S.PRODUCT_ID\\nAND \\n    P.PRODUCT_ID NOT IN (SELECT PRODUCT_ID FROM OTHER_SALES);\\n\\n\\n-- Why this is not working?"
                    },
                    {
                        "username": "mahapatraabhishek04",
                        "content": "I am not able to figure out why the below query is giving wrong output on submitting even though it worked when I clicked Run. Can anyone please help.\\nI am using MS SQL Server to run the below code.\\nselect product.product_id , product.product_name\\nfrom Product\\ninner join Sales\\non Product.product_id = Sales.product_id\\nwhere sale_date between cast(\\'2019-01-01\\' as date) and cast(\\'2019-03-31\\' as date)\\nexcept\\nselect product.product_id , product.product_name\\nfrom Product\\ninner join Sales\\non Product.product_id = Sales.product_id\\nwhere sale_date > cast(\\'2019-03-31\\' as date)"
                    },
                    {
                        "username": "user2708Pa",
                        "content": "I am at lost here. When I run my code, I get the correct answer, but then when I click submit, I get a different output and it\\'s marked as wrong. \\nAny idea what\\'s happening?"
                    },
                    {
                        "username": "vamsivankuri",
                        "content": ";with cte as\\n(\\nselect p.product_id, p.product_name, sale_date\\nfrom Product p \\njoin Sales s on p.product_id=s.product_id\\nwhere cast(sale_date as date) >cast(\\'2019-03-31\\' as date)\\nunion\\nselect p.product_id, p.product_name, sale_date\\nfrom Product p \\njoin Sales s on p.product_id=s.product_id\\nwhere cast(sale_date as date) <cast(\\'2019-01-01\\' as date)\\n), cte1 as\\n(\\nselect p.product_id, p.product_name\\nfrom Product p \\njoin Sales s on p.product_id=s.product_id\\nwhere p.product_id not in (select product_id from cte)\\n)\\nselect * from cte1"
                    },
                    {
                        "username": "Hanisha_DUa",
                        "content": "I am including all criteria and still this won\\'t run on test case second - \\n`select s.product_id , p.product_name\\nfrom sales s\\njoin product p\\non p.product_id=s.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' and \\ns.product_id not in \\n(select product_id from sales\\nwhere sale_date between \\'2019-04-01\\' and \\'2019-12-31\\')`"
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "SELECT product.product_id, product_name \\n FROM Product INNER JOIN Sales\\n ON Product.product_id=Sales.product_id\\n WHERE sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nWhy  it is not showing the correct output?\\n "
                    },
                    {
                        "username": "tianxuzang",
                        "content": "Sale table has no primary key, it can have repeated rows.\\nthat is why need to use group by to avoid the duplicate row issue "
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "It does not take into account products that were sold both within the date range and outside the date range."
                    }
                ]
            },
            {
                "id": 1786009,
                "content": [
                    {
                        "username": "adityachatterjee",
                        "content": "Why would the below query not work? Not considering the performance here. Only from solution correctness standpoint.\n\nSELECT P.product_id,P.product_name\nFROM\nSALES S\nLEFT JOIN\n(SELECT DISTINCT * FROM PRODUCT) P\nON\nS.PRODUCT_ID=P.PRODUCT_ID\nWHERE YEAR(SALE_DATE)=2019 AND MONTH(SALE_DATE)<=3 AND P.PRODUCT_ID NOT IN (SELECT PRODUCT_ID FROM SALES WHERE YEAR(SALE_DATE)=2019 AND MONTH (SALE_DATE)>3) \n##SALE_DATE>=2019-01-01 AND SALE_DATE<=2019-03-31\nGROUP BY 1,2 ORDER BY PRODUCT_ID"
                    },
                    {
                        "username": "akashdubey2047",
                        "content": "SELECT p.product_id, product_name \\nFROM Product P INNER JOIN Sales S ON p.product_id=s.product_id \\nWHERE p.product_id NOT IN (SELECT product_id FROM Sales WHERE sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\') \\nGROUP BY p.product_id,product_name;"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "Select Product_id,Product_name from Product where Product_id in (select Product_id from Sales Group by product_id having Min(sale_date)>=\\'2019-01-01\\' and Max(Sale_date)<=\\'2019-03-31\\');"
                    },
                    {
                        "username": "ShubhayanS",
                        "content": "\\n`select product_id, product_name from Product \\nwhere product_id in\\n(select product_id  from Sales\\ngroup by 1\\nhaving max(year(sale_date)) = 2019 and max(month(sale_date)) <=3)`[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "omehdiakram",
                        "content": "WITH SPRING_SALES AS (\\n    SELECT * FROM SALES WHERE SALE_DATE BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' \\n), OTHER_SALES AS (\\n    SELECT * FROM SALES WHERE SALE_DATE BETWEEN \\'2019-04-01\\' AND \\'2019-12-31\\' \\n)\\nSELECT \\n    DISTINCT P.PRODUCT_ID AS product_id, \\n    P.PRODUCT_NAME AS product_name \\nFROM \\n    PRODUCT P JOIN SPRING_SALES S \\nON \\n    P.PRODUCT_ID = S.PRODUCT_ID\\nAND \\n    P.PRODUCT_ID NOT IN (SELECT PRODUCT_ID FROM OTHER_SALES);\\n\\n\\n-- Why this is not working?"
                    },
                    {
                        "username": "mahapatraabhishek04",
                        "content": "I am not able to figure out why the below query is giving wrong output on submitting even though it worked when I clicked Run. Can anyone please help.\\nI am using MS SQL Server to run the below code.\\nselect product.product_id , product.product_name\\nfrom Product\\ninner join Sales\\non Product.product_id = Sales.product_id\\nwhere sale_date between cast(\\'2019-01-01\\' as date) and cast(\\'2019-03-31\\' as date)\\nexcept\\nselect product.product_id , product.product_name\\nfrom Product\\ninner join Sales\\non Product.product_id = Sales.product_id\\nwhere sale_date > cast(\\'2019-03-31\\' as date)"
                    },
                    {
                        "username": "user2708Pa",
                        "content": "I am at lost here. When I run my code, I get the correct answer, but then when I click submit, I get a different output and it\\'s marked as wrong. \\nAny idea what\\'s happening?"
                    },
                    {
                        "username": "vamsivankuri",
                        "content": ";with cte as\\n(\\nselect p.product_id, p.product_name, sale_date\\nfrom Product p \\njoin Sales s on p.product_id=s.product_id\\nwhere cast(sale_date as date) >cast(\\'2019-03-31\\' as date)\\nunion\\nselect p.product_id, p.product_name, sale_date\\nfrom Product p \\njoin Sales s on p.product_id=s.product_id\\nwhere cast(sale_date as date) <cast(\\'2019-01-01\\' as date)\\n), cte1 as\\n(\\nselect p.product_id, p.product_name\\nfrom Product p \\njoin Sales s on p.product_id=s.product_id\\nwhere p.product_id not in (select product_id from cte)\\n)\\nselect * from cte1"
                    },
                    {
                        "username": "Hanisha_DUa",
                        "content": "I am including all criteria and still this won\\'t run on test case second - \\n`select s.product_id , p.product_name\\nfrom sales s\\njoin product p\\non p.product_id=s.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' and \\ns.product_id not in \\n(select product_id from sales\\nwhere sale_date between \\'2019-04-01\\' and \\'2019-12-31\\')`"
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "SELECT product.product_id, product_name \\n FROM Product INNER JOIN Sales\\n ON Product.product_id=Sales.product_id\\n WHERE sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nWhy  it is not showing the correct output?\\n "
                    },
                    {
                        "username": "tianxuzang",
                        "content": "Sale table has no primary key, it can have repeated rows.\\nthat is why need to use group by to avoid the duplicate row issue "
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "It does not take into account products that were sold both within the date range and outside the date range."
                    }
                ]
            },
            {
                "id": 1783923,
                "content": [
                    {
                        "username": "adityachatterjee",
                        "content": "Why would the below query not work? Not considering the performance here. Only from solution correctness standpoint.\n\nSELECT P.product_id,P.product_name\nFROM\nSALES S\nLEFT JOIN\n(SELECT DISTINCT * FROM PRODUCT) P\nON\nS.PRODUCT_ID=P.PRODUCT_ID\nWHERE YEAR(SALE_DATE)=2019 AND MONTH(SALE_DATE)<=3 AND P.PRODUCT_ID NOT IN (SELECT PRODUCT_ID FROM SALES WHERE YEAR(SALE_DATE)=2019 AND MONTH (SALE_DATE)>3) \n##SALE_DATE>=2019-01-01 AND SALE_DATE<=2019-03-31\nGROUP BY 1,2 ORDER BY PRODUCT_ID"
                    },
                    {
                        "username": "akashdubey2047",
                        "content": "SELECT p.product_id, product_name \\nFROM Product P INNER JOIN Sales S ON p.product_id=s.product_id \\nWHERE p.product_id NOT IN (SELECT product_id FROM Sales WHERE sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\') \\nGROUP BY p.product_id,product_name;"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "Select Product_id,Product_name from Product where Product_id in (select Product_id from Sales Group by product_id having Min(sale_date)>=\\'2019-01-01\\' and Max(Sale_date)<=\\'2019-03-31\\');"
                    },
                    {
                        "username": "ShubhayanS",
                        "content": "\\n`select product_id, product_name from Product \\nwhere product_id in\\n(select product_id  from Sales\\ngroup by 1\\nhaving max(year(sale_date)) = 2019 and max(month(sale_date)) <=3)`[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "omehdiakram",
                        "content": "WITH SPRING_SALES AS (\\n    SELECT * FROM SALES WHERE SALE_DATE BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' \\n), OTHER_SALES AS (\\n    SELECT * FROM SALES WHERE SALE_DATE BETWEEN \\'2019-04-01\\' AND \\'2019-12-31\\' \\n)\\nSELECT \\n    DISTINCT P.PRODUCT_ID AS product_id, \\n    P.PRODUCT_NAME AS product_name \\nFROM \\n    PRODUCT P JOIN SPRING_SALES S \\nON \\n    P.PRODUCT_ID = S.PRODUCT_ID\\nAND \\n    P.PRODUCT_ID NOT IN (SELECT PRODUCT_ID FROM OTHER_SALES);\\n\\n\\n-- Why this is not working?"
                    },
                    {
                        "username": "mahapatraabhishek04",
                        "content": "I am not able to figure out why the below query is giving wrong output on submitting even though it worked when I clicked Run. Can anyone please help.\\nI am using MS SQL Server to run the below code.\\nselect product.product_id , product.product_name\\nfrom Product\\ninner join Sales\\non Product.product_id = Sales.product_id\\nwhere sale_date between cast(\\'2019-01-01\\' as date) and cast(\\'2019-03-31\\' as date)\\nexcept\\nselect product.product_id , product.product_name\\nfrom Product\\ninner join Sales\\non Product.product_id = Sales.product_id\\nwhere sale_date > cast(\\'2019-03-31\\' as date)"
                    },
                    {
                        "username": "user2708Pa",
                        "content": "I am at lost here. When I run my code, I get the correct answer, but then when I click submit, I get a different output and it\\'s marked as wrong. \\nAny idea what\\'s happening?"
                    },
                    {
                        "username": "vamsivankuri",
                        "content": ";with cte as\\n(\\nselect p.product_id, p.product_name, sale_date\\nfrom Product p \\njoin Sales s on p.product_id=s.product_id\\nwhere cast(sale_date as date) >cast(\\'2019-03-31\\' as date)\\nunion\\nselect p.product_id, p.product_name, sale_date\\nfrom Product p \\njoin Sales s on p.product_id=s.product_id\\nwhere cast(sale_date as date) <cast(\\'2019-01-01\\' as date)\\n), cte1 as\\n(\\nselect p.product_id, p.product_name\\nfrom Product p \\njoin Sales s on p.product_id=s.product_id\\nwhere p.product_id not in (select product_id from cte)\\n)\\nselect * from cte1"
                    },
                    {
                        "username": "Hanisha_DUa",
                        "content": "I am including all criteria and still this won\\'t run on test case second - \\n`select s.product_id , p.product_name\\nfrom sales s\\njoin product p\\non p.product_id=s.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' and \\ns.product_id not in \\n(select product_id from sales\\nwhere sale_date between \\'2019-04-01\\' and \\'2019-12-31\\')`"
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "SELECT product.product_id, product_name \\n FROM Product INNER JOIN Sales\\n ON Product.product_id=Sales.product_id\\n WHERE sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nWhy  it is not showing the correct output?\\n "
                    },
                    {
                        "username": "tianxuzang",
                        "content": "Sale table has no primary key, it can have repeated rows.\\nthat is why need to use group by to avoid the duplicate row issue "
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "It does not take into account products that were sold both within the date range and outside the date range."
                    }
                ]
            },
            {
                "id": 1775651,
                "content": [
                    {
                        "username": "adityachatterjee",
                        "content": "Why would the below query not work? Not considering the performance here. Only from solution correctness standpoint.\n\nSELECT P.product_id,P.product_name\nFROM\nSALES S\nLEFT JOIN\n(SELECT DISTINCT * FROM PRODUCT) P\nON\nS.PRODUCT_ID=P.PRODUCT_ID\nWHERE YEAR(SALE_DATE)=2019 AND MONTH(SALE_DATE)<=3 AND P.PRODUCT_ID NOT IN (SELECT PRODUCT_ID FROM SALES WHERE YEAR(SALE_DATE)=2019 AND MONTH (SALE_DATE)>3) \n##SALE_DATE>=2019-01-01 AND SALE_DATE<=2019-03-31\nGROUP BY 1,2 ORDER BY PRODUCT_ID"
                    },
                    {
                        "username": "akashdubey2047",
                        "content": "SELECT p.product_id, product_name \\nFROM Product P INNER JOIN Sales S ON p.product_id=s.product_id \\nWHERE p.product_id NOT IN (SELECT product_id FROM Sales WHERE sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\') \\nGROUP BY p.product_id,product_name;"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "Select Product_id,Product_name from Product where Product_id in (select Product_id from Sales Group by product_id having Min(sale_date)>=\\'2019-01-01\\' and Max(Sale_date)<=\\'2019-03-31\\');"
                    },
                    {
                        "username": "ShubhayanS",
                        "content": "\\n`select product_id, product_name from Product \\nwhere product_id in\\n(select product_id  from Sales\\ngroup by 1\\nhaving max(year(sale_date)) = 2019 and max(month(sale_date)) <=3)`[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "omehdiakram",
                        "content": "WITH SPRING_SALES AS (\\n    SELECT * FROM SALES WHERE SALE_DATE BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' \\n), OTHER_SALES AS (\\n    SELECT * FROM SALES WHERE SALE_DATE BETWEEN \\'2019-04-01\\' AND \\'2019-12-31\\' \\n)\\nSELECT \\n    DISTINCT P.PRODUCT_ID AS product_id, \\n    P.PRODUCT_NAME AS product_name \\nFROM \\n    PRODUCT P JOIN SPRING_SALES S \\nON \\n    P.PRODUCT_ID = S.PRODUCT_ID\\nAND \\n    P.PRODUCT_ID NOT IN (SELECT PRODUCT_ID FROM OTHER_SALES);\\n\\n\\n-- Why this is not working?"
                    },
                    {
                        "username": "mahapatraabhishek04",
                        "content": "I am not able to figure out why the below query is giving wrong output on submitting even though it worked when I clicked Run. Can anyone please help.\\nI am using MS SQL Server to run the below code.\\nselect product.product_id , product.product_name\\nfrom Product\\ninner join Sales\\non Product.product_id = Sales.product_id\\nwhere sale_date between cast(\\'2019-01-01\\' as date) and cast(\\'2019-03-31\\' as date)\\nexcept\\nselect product.product_id , product.product_name\\nfrom Product\\ninner join Sales\\non Product.product_id = Sales.product_id\\nwhere sale_date > cast(\\'2019-03-31\\' as date)"
                    },
                    {
                        "username": "user2708Pa",
                        "content": "I am at lost here. When I run my code, I get the correct answer, but then when I click submit, I get a different output and it\\'s marked as wrong. \\nAny idea what\\'s happening?"
                    },
                    {
                        "username": "vamsivankuri",
                        "content": ";with cte as\\n(\\nselect p.product_id, p.product_name, sale_date\\nfrom Product p \\njoin Sales s on p.product_id=s.product_id\\nwhere cast(sale_date as date) >cast(\\'2019-03-31\\' as date)\\nunion\\nselect p.product_id, p.product_name, sale_date\\nfrom Product p \\njoin Sales s on p.product_id=s.product_id\\nwhere cast(sale_date as date) <cast(\\'2019-01-01\\' as date)\\n), cte1 as\\n(\\nselect p.product_id, p.product_name\\nfrom Product p \\njoin Sales s on p.product_id=s.product_id\\nwhere p.product_id not in (select product_id from cte)\\n)\\nselect * from cte1"
                    },
                    {
                        "username": "Hanisha_DUa",
                        "content": "I am including all criteria and still this won\\'t run on test case second - \\n`select s.product_id , p.product_name\\nfrom sales s\\njoin product p\\non p.product_id=s.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' and \\ns.product_id not in \\n(select product_id from sales\\nwhere sale_date between \\'2019-04-01\\' and \\'2019-12-31\\')`"
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "SELECT product.product_id, product_name \\n FROM Product INNER JOIN Sales\\n ON Product.product_id=Sales.product_id\\n WHERE sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nWhy  it is not showing the correct output?\\n "
                    },
                    {
                        "username": "tianxuzang",
                        "content": "Sale table has no primary key, it can have repeated rows.\\nthat is why need to use group by to avoid the duplicate row issue "
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "It does not take into account products that were sold both within the date range and outside the date range."
                    }
                ]
            },
            {
                "id": 1775068,
                "content": [
                    {
                        "username": "adityachatterjee",
                        "content": "Why would the below query not work? Not considering the performance here. Only from solution correctness standpoint.\n\nSELECT P.product_id,P.product_name\nFROM\nSALES S\nLEFT JOIN\n(SELECT DISTINCT * FROM PRODUCT) P\nON\nS.PRODUCT_ID=P.PRODUCT_ID\nWHERE YEAR(SALE_DATE)=2019 AND MONTH(SALE_DATE)<=3 AND P.PRODUCT_ID NOT IN (SELECT PRODUCT_ID FROM SALES WHERE YEAR(SALE_DATE)=2019 AND MONTH (SALE_DATE)>3) \n##SALE_DATE>=2019-01-01 AND SALE_DATE<=2019-03-31\nGROUP BY 1,2 ORDER BY PRODUCT_ID"
                    },
                    {
                        "username": "akashdubey2047",
                        "content": "SELECT p.product_id, product_name \\nFROM Product P INNER JOIN Sales S ON p.product_id=s.product_id \\nWHERE p.product_id NOT IN (SELECT product_id FROM Sales WHERE sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\') \\nGROUP BY p.product_id,product_name;"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "Select Product_id,Product_name from Product where Product_id in (select Product_id from Sales Group by product_id having Min(sale_date)>=\\'2019-01-01\\' and Max(Sale_date)<=\\'2019-03-31\\');"
                    },
                    {
                        "username": "ShubhayanS",
                        "content": "\\n`select product_id, product_name from Product \\nwhere product_id in\\n(select product_id  from Sales\\ngroup by 1\\nhaving max(year(sale_date)) = 2019 and max(month(sale_date)) <=3)`[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "omehdiakram",
                        "content": "WITH SPRING_SALES AS (\\n    SELECT * FROM SALES WHERE SALE_DATE BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' \\n), OTHER_SALES AS (\\n    SELECT * FROM SALES WHERE SALE_DATE BETWEEN \\'2019-04-01\\' AND \\'2019-12-31\\' \\n)\\nSELECT \\n    DISTINCT P.PRODUCT_ID AS product_id, \\n    P.PRODUCT_NAME AS product_name \\nFROM \\n    PRODUCT P JOIN SPRING_SALES S \\nON \\n    P.PRODUCT_ID = S.PRODUCT_ID\\nAND \\n    P.PRODUCT_ID NOT IN (SELECT PRODUCT_ID FROM OTHER_SALES);\\n\\n\\n-- Why this is not working?"
                    },
                    {
                        "username": "mahapatraabhishek04",
                        "content": "I am not able to figure out why the below query is giving wrong output on submitting even though it worked when I clicked Run. Can anyone please help.\\nI am using MS SQL Server to run the below code.\\nselect product.product_id , product.product_name\\nfrom Product\\ninner join Sales\\non Product.product_id = Sales.product_id\\nwhere sale_date between cast(\\'2019-01-01\\' as date) and cast(\\'2019-03-31\\' as date)\\nexcept\\nselect product.product_id , product.product_name\\nfrom Product\\ninner join Sales\\non Product.product_id = Sales.product_id\\nwhere sale_date > cast(\\'2019-03-31\\' as date)"
                    },
                    {
                        "username": "user2708Pa",
                        "content": "I am at lost here. When I run my code, I get the correct answer, but then when I click submit, I get a different output and it\\'s marked as wrong. \\nAny idea what\\'s happening?"
                    },
                    {
                        "username": "vamsivankuri",
                        "content": ";with cte as\\n(\\nselect p.product_id, p.product_name, sale_date\\nfrom Product p \\njoin Sales s on p.product_id=s.product_id\\nwhere cast(sale_date as date) >cast(\\'2019-03-31\\' as date)\\nunion\\nselect p.product_id, p.product_name, sale_date\\nfrom Product p \\njoin Sales s on p.product_id=s.product_id\\nwhere cast(sale_date as date) <cast(\\'2019-01-01\\' as date)\\n), cte1 as\\n(\\nselect p.product_id, p.product_name\\nfrom Product p \\njoin Sales s on p.product_id=s.product_id\\nwhere p.product_id not in (select product_id from cte)\\n)\\nselect * from cte1"
                    },
                    {
                        "username": "Hanisha_DUa",
                        "content": "I am including all criteria and still this won\\'t run on test case second - \\n`select s.product_id , p.product_name\\nfrom sales s\\njoin product p\\non p.product_id=s.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' and \\ns.product_id not in \\n(select product_id from sales\\nwhere sale_date between \\'2019-04-01\\' and \\'2019-12-31\\')`"
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "SELECT product.product_id, product_name \\n FROM Product INNER JOIN Sales\\n ON Product.product_id=Sales.product_id\\n WHERE sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nWhy  it is not showing the correct output?\\n "
                    },
                    {
                        "username": "tianxuzang",
                        "content": "Sale table has no primary key, it can have repeated rows.\\nthat is why need to use group by to avoid the duplicate row issue "
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "It does not take into account products that were sold both within the date range and outside the date range."
                    }
                ]
            },
            {
                "id": 1771657,
                "content": [
                    {
                        "username": "adityachatterjee",
                        "content": "Why would the below query not work? Not considering the performance here. Only from solution correctness standpoint.\n\nSELECT P.product_id,P.product_name\nFROM\nSALES S\nLEFT JOIN\n(SELECT DISTINCT * FROM PRODUCT) P\nON\nS.PRODUCT_ID=P.PRODUCT_ID\nWHERE YEAR(SALE_DATE)=2019 AND MONTH(SALE_DATE)<=3 AND P.PRODUCT_ID NOT IN (SELECT PRODUCT_ID FROM SALES WHERE YEAR(SALE_DATE)=2019 AND MONTH (SALE_DATE)>3) \n##SALE_DATE>=2019-01-01 AND SALE_DATE<=2019-03-31\nGROUP BY 1,2 ORDER BY PRODUCT_ID"
                    },
                    {
                        "username": "akashdubey2047",
                        "content": "SELECT p.product_id, product_name \\nFROM Product P INNER JOIN Sales S ON p.product_id=s.product_id \\nWHERE p.product_id NOT IN (SELECT product_id FROM Sales WHERE sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\') \\nGROUP BY p.product_id,product_name;"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "Select Product_id,Product_name from Product where Product_id in (select Product_id from Sales Group by product_id having Min(sale_date)>=\\'2019-01-01\\' and Max(Sale_date)<=\\'2019-03-31\\');"
                    },
                    {
                        "username": "ShubhayanS",
                        "content": "\\n`select product_id, product_name from Product \\nwhere product_id in\\n(select product_id  from Sales\\ngroup by 1\\nhaving max(year(sale_date)) = 2019 and max(month(sale_date)) <=3)`[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "omehdiakram",
                        "content": "WITH SPRING_SALES AS (\\n    SELECT * FROM SALES WHERE SALE_DATE BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' \\n), OTHER_SALES AS (\\n    SELECT * FROM SALES WHERE SALE_DATE BETWEEN \\'2019-04-01\\' AND \\'2019-12-31\\' \\n)\\nSELECT \\n    DISTINCT P.PRODUCT_ID AS product_id, \\n    P.PRODUCT_NAME AS product_name \\nFROM \\n    PRODUCT P JOIN SPRING_SALES S \\nON \\n    P.PRODUCT_ID = S.PRODUCT_ID\\nAND \\n    P.PRODUCT_ID NOT IN (SELECT PRODUCT_ID FROM OTHER_SALES);\\n\\n\\n-- Why this is not working?"
                    },
                    {
                        "username": "mahapatraabhishek04",
                        "content": "I am not able to figure out why the below query is giving wrong output on submitting even though it worked when I clicked Run. Can anyone please help.\\nI am using MS SQL Server to run the below code.\\nselect product.product_id , product.product_name\\nfrom Product\\ninner join Sales\\non Product.product_id = Sales.product_id\\nwhere sale_date between cast(\\'2019-01-01\\' as date) and cast(\\'2019-03-31\\' as date)\\nexcept\\nselect product.product_id , product.product_name\\nfrom Product\\ninner join Sales\\non Product.product_id = Sales.product_id\\nwhere sale_date > cast(\\'2019-03-31\\' as date)"
                    },
                    {
                        "username": "user2708Pa",
                        "content": "I am at lost here. When I run my code, I get the correct answer, but then when I click submit, I get a different output and it\\'s marked as wrong. \\nAny idea what\\'s happening?"
                    },
                    {
                        "username": "vamsivankuri",
                        "content": ";with cte as\\n(\\nselect p.product_id, p.product_name, sale_date\\nfrom Product p \\njoin Sales s on p.product_id=s.product_id\\nwhere cast(sale_date as date) >cast(\\'2019-03-31\\' as date)\\nunion\\nselect p.product_id, p.product_name, sale_date\\nfrom Product p \\njoin Sales s on p.product_id=s.product_id\\nwhere cast(sale_date as date) <cast(\\'2019-01-01\\' as date)\\n), cte1 as\\n(\\nselect p.product_id, p.product_name\\nfrom Product p \\njoin Sales s on p.product_id=s.product_id\\nwhere p.product_id not in (select product_id from cte)\\n)\\nselect * from cte1"
                    },
                    {
                        "username": "Hanisha_DUa",
                        "content": "I am including all criteria and still this won\\'t run on test case second - \\n`select s.product_id , p.product_name\\nfrom sales s\\njoin product p\\non p.product_id=s.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' and \\ns.product_id not in \\n(select product_id from sales\\nwhere sale_date between \\'2019-04-01\\' and \\'2019-12-31\\')`"
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "SELECT product.product_id, product_name \\n FROM Product INNER JOIN Sales\\n ON Product.product_id=Sales.product_id\\n WHERE sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nWhy  it is not showing the correct output?\\n "
                    },
                    {
                        "username": "tianxuzang",
                        "content": "Sale table has no primary key, it can have repeated rows.\\nthat is why need to use group by to avoid the duplicate row issue "
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "It does not take into account products that were sold both within the date range and outside the date range."
                    }
                ]
            },
            {
                "id": 1766966,
                "content": [
                    {
                        "username": "adityachatterjee",
                        "content": "Why would the below query not work? Not considering the performance here. Only from solution correctness standpoint.\n\nSELECT P.product_id,P.product_name\nFROM\nSALES S\nLEFT JOIN\n(SELECT DISTINCT * FROM PRODUCT) P\nON\nS.PRODUCT_ID=P.PRODUCT_ID\nWHERE YEAR(SALE_DATE)=2019 AND MONTH(SALE_DATE)<=3 AND P.PRODUCT_ID NOT IN (SELECT PRODUCT_ID FROM SALES WHERE YEAR(SALE_DATE)=2019 AND MONTH (SALE_DATE)>3) \n##SALE_DATE>=2019-01-01 AND SALE_DATE<=2019-03-31\nGROUP BY 1,2 ORDER BY PRODUCT_ID"
                    },
                    {
                        "username": "akashdubey2047",
                        "content": "SELECT p.product_id, product_name \\nFROM Product P INNER JOIN Sales S ON p.product_id=s.product_id \\nWHERE p.product_id NOT IN (SELECT product_id FROM Sales WHERE sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\') \\nGROUP BY p.product_id,product_name;"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "Select Product_id,Product_name from Product where Product_id in (select Product_id from Sales Group by product_id having Min(sale_date)>=\\'2019-01-01\\' and Max(Sale_date)<=\\'2019-03-31\\');"
                    },
                    {
                        "username": "ShubhayanS",
                        "content": "\\n`select product_id, product_name from Product \\nwhere product_id in\\n(select product_id  from Sales\\ngroup by 1\\nhaving max(year(sale_date)) = 2019 and max(month(sale_date)) <=3)`[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "omehdiakram",
                        "content": "WITH SPRING_SALES AS (\\n    SELECT * FROM SALES WHERE SALE_DATE BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' \\n), OTHER_SALES AS (\\n    SELECT * FROM SALES WHERE SALE_DATE BETWEEN \\'2019-04-01\\' AND \\'2019-12-31\\' \\n)\\nSELECT \\n    DISTINCT P.PRODUCT_ID AS product_id, \\n    P.PRODUCT_NAME AS product_name \\nFROM \\n    PRODUCT P JOIN SPRING_SALES S \\nON \\n    P.PRODUCT_ID = S.PRODUCT_ID\\nAND \\n    P.PRODUCT_ID NOT IN (SELECT PRODUCT_ID FROM OTHER_SALES);\\n\\n\\n-- Why this is not working?"
                    },
                    {
                        "username": "mahapatraabhishek04",
                        "content": "I am not able to figure out why the below query is giving wrong output on submitting even though it worked when I clicked Run. Can anyone please help.\\nI am using MS SQL Server to run the below code.\\nselect product.product_id , product.product_name\\nfrom Product\\ninner join Sales\\non Product.product_id = Sales.product_id\\nwhere sale_date between cast(\\'2019-01-01\\' as date) and cast(\\'2019-03-31\\' as date)\\nexcept\\nselect product.product_id , product.product_name\\nfrom Product\\ninner join Sales\\non Product.product_id = Sales.product_id\\nwhere sale_date > cast(\\'2019-03-31\\' as date)"
                    },
                    {
                        "username": "user2708Pa",
                        "content": "I am at lost here. When I run my code, I get the correct answer, but then when I click submit, I get a different output and it\\'s marked as wrong. \\nAny idea what\\'s happening?"
                    },
                    {
                        "username": "vamsivankuri",
                        "content": ";with cte as\\n(\\nselect p.product_id, p.product_name, sale_date\\nfrom Product p \\njoin Sales s on p.product_id=s.product_id\\nwhere cast(sale_date as date) >cast(\\'2019-03-31\\' as date)\\nunion\\nselect p.product_id, p.product_name, sale_date\\nfrom Product p \\njoin Sales s on p.product_id=s.product_id\\nwhere cast(sale_date as date) <cast(\\'2019-01-01\\' as date)\\n), cte1 as\\n(\\nselect p.product_id, p.product_name\\nfrom Product p \\njoin Sales s on p.product_id=s.product_id\\nwhere p.product_id not in (select product_id from cte)\\n)\\nselect * from cte1"
                    },
                    {
                        "username": "Hanisha_DUa",
                        "content": "I am including all criteria and still this won\\'t run on test case second - \\n`select s.product_id , p.product_name\\nfrom sales s\\njoin product p\\non p.product_id=s.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' and \\ns.product_id not in \\n(select product_id from sales\\nwhere sale_date between \\'2019-04-01\\' and \\'2019-12-31\\')`"
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "SELECT product.product_id, product_name \\n FROM Product INNER JOIN Sales\\n ON Product.product_id=Sales.product_id\\n WHERE sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nWhy  it is not showing the correct output?\\n "
                    },
                    {
                        "username": "tianxuzang",
                        "content": "Sale table has no primary key, it can have repeated rows.\\nthat is why need to use group by to avoid the duplicate row issue "
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "It does not take into account products that were sold both within the date range and outside the date range."
                    }
                ]
            },
            {
                "id": 1760202,
                "content": [
                    {
                        "username": "adityachatterjee",
                        "content": "Why would the below query not work? Not considering the performance here. Only from solution correctness standpoint.\n\nSELECT P.product_id,P.product_name\nFROM\nSALES S\nLEFT JOIN\n(SELECT DISTINCT * FROM PRODUCT) P\nON\nS.PRODUCT_ID=P.PRODUCT_ID\nWHERE YEAR(SALE_DATE)=2019 AND MONTH(SALE_DATE)<=3 AND P.PRODUCT_ID NOT IN (SELECT PRODUCT_ID FROM SALES WHERE YEAR(SALE_DATE)=2019 AND MONTH (SALE_DATE)>3) \n##SALE_DATE>=2019-01-01 AND SALE_DATE<=2019-03-31\nGROUP BY 1,2 ORDER BY PRODUCT_ID"
                    },
                    {
                        "username": "akashdubey2047",
                        "content": "SELECT p.product_id, product_name \\nFROM Product P INNER JOIN Sales S ON p.product_id=s.product_id \\nWHERE p.product_id NOT IN (SELECT product_id FROM Sales WHERE sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\') \\nGROUP BY p.product_id,product_name;"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "Select Product_id,Product_name from Product where Product_id in (select Product_id from Sales Group by product_id having Min(sale_date)>=\\'2019-01-01\\' and Max(Sale_date)<=\\'2019-03-31\\');"
                    },
                    {
                        "username": "ShubhayanS",
                        "content": "\\n`select product_id, product_name from Product \\nwhere product_id in\\n(select product_id  from Sales\\ngroup by 1\\nhaving max(year(sale_date)) = 2019 and max(month(sale_date)) <=3)`[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "omehdiakram",
                        "content": "WITH SPRING_SALES AS (\\n    SELECT * FROM SALES WHERE SALE_DATE BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' \\n), OTHER_SALES AS (\\n    SELECT * FROM SALES WHERE SALE_DATE BETWEEN \\'2019-04-01\\' AND \\'2019-12-31\\' \\n)\\nSELECT \\n    DISTINCT P.PRODUCT_ID AS product_id, \\n    P.PRODUCT_NAME AS product_name \\nFROM \\n    PRODUCT P JOIN SPRING_SALES S \\nON \\n    P.PRODUCT_ID = S.PRODUCT_ID\\nAND \\n    P.PRODUCT_ID NOT IN (SELECT PRODUCT_ID FROM OTHER_SALES);\\n\\n\\n-- Why this is not working?"
                    },
                    {
                        "username": "mahapatraabhishek04",
                        "content": "I am not able to figure out why the below query is giving wrong output on submitting even though it worked when I clicked Run. Can anyone please help.\\nI am using MS SQL Server to run the below code.\\nselect product.product_id , product.product_name\\nfrom Product\\ninner join Sales\\non Product.product_id = Sales.product_id\\nwhere sale_date between cast(\\'2019-01-01\\' as date) and cast(\\'2019-03-31\\' as date)\\nexcept\\nselect product.product_id , product.product_name\\nfrom Product\\ninner join Sales\\non Product.product_id = Sales.product_id\\nwhere sale_date > cast(\\'2019-03-31\\' as date)"
                    },
                    {
                        "username": "user2708Pa",
                        "content": "I am at lost here. When I run my code, I get the correct answer, but then when I click submit, I get a different output and it\\'s marked as wrong. \\nAny idea what\\'s happening?"
                    },
                    {
                        "username": "vamsivankuri",
                        "content": ";with cte as\\n(\\nselect p.product_id, p.product_name, sale_date\\nfrom Product p \\njoin Sales s on p.product_id=s.product_id\\nwhere cast(sale_date as date) >cast(\\'2019-03-31\\' as date)\\nunion\\nselect p.product_id, p.product_name, sale_date\\nfrom Product p \\njoin Sales s on p.product_id=s.product_id\\nwhere cast(sale_date as date) <cast(\\'2019-01-01\\' as date)\\n), cte1 as\\n(\\nselect p.product_id, p.product_name\\nfrom Product p \\njoin Sales s on p.product_id=s.product_id\\nwhere p.product_id not in (select product_id from cte)\\n)\\nselect * from cte1"
                    },
                    {
                        "username": "Hanisha_DUa",
                        "content": "I am including all criteria and still this won\\'t run on test case second - \\n`select s.product_id , p.product_name\\nfrom sales s\\njoin product p\\non p.product_id=s.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' and \\ns.product_id not in \\n(select product_id from sales\\nwhere sale_date between \\'2019-04-01\\' and \\'2019-12-31\\')`"
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "SELECT product.product_id, product_name \\n FROM Product INNER JOIN Sales\\n ON Product.product_id=Sales.product_id\\n WHERE sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nWhy  it is not showing the correct output?\\n "
                    },
                    {
                        "username": "tianxuzang",
                        "content": "Sale table has no primary key, it can have repeated rows.\\nthat is why need to use group by to avoid the duplicate row issue "
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "It does not take into account products that were sold both within the date range and outside the date range."
                    }
                ]
            },
            {
                "id": 1755772,
                "content": [
                    {
                        "username": "adityachatterjee",
                        "content": "Why would the below query not work? Not considering the performance here. Only from solution correctness standpoint.\n\nSELECT P.product_id,P.product_name\nFROM\nSALES S\nLEFT JOIN\n(SELECT DISTINCT * FROM PRODUCT) P\nON\nS.PRODUCT_ID=P.PRODUCT_ID\nWHERE YEAR(SALE_DATE)=2019 AND MONTH(SALE_DATE)<=3 AND P.PRODUCT_ID NOT IN (SELECT PRODUCT_ID FROM SALES WHERE YEAR(SALE_DATE)=2019 AND MONTH (SALE_DATE)>3) \n##SALE_DATE>=2019-01-01 AND SALE_DATE<=2019-03-31\nGROUP BY 1,2 ORDER BY PRODUCT_ID"
                    },
                    {
                        "username": "akashdubey2047",
                        "content": "SELECT p.product_id, product_name \\nFROM Product P INNER JOIN Sales S ON p.product_id=s.product_id \\nWHERE p.product_id NOT IN (SELECT product_id FROM Sales WHERE sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\') \\nGROUP BY p.product_id,product_name;"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "Select Product_id,Product_name from Product where Product_id in (select Product_id from Sales Group by product_id having Min(sale_date)>=\\'2019-01-01\\' and Max(Sale_date)<=\\'2019-03-31\\');"
                    },
                    {
                        "username": "ShubhayanS",
                        "content": "\\n`select product_id, product_name from Product \\nwhere product_id in\\n(select product_id  from Sales\\ngroup by 1\\nhaving max(year(sale_date)) = 2019 and max(month(sale_date)) <=3)`[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "omehdiakram",
                        "content": "WITH SPRING_SALES AS (\\n    SELECT * FROM SALES WHERE SALE_DATE BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' \\n), OTHER_SALES AS (\\n    SELECT * FROM SALES WHERE SALE_DATE BETWEEN \\'2019-04-01\\' AND \\'2019-12-31\\' \\n)\\nSELECT \\n    DISTINCT P.PRODUCT_ID AS product_id, \\n    P.PRODUCT_NAME AS product_name \\nFROM \\n    PRODUCT P JOIN SPRING_SALES S \\nON \\n    P.PRODUCT_ID = S.PRODUCT_ID\\nAND \\n    P.PRODUCT_ID NOT IN (SELECT PRODUCT_ID FROM OTHER_SALES);\\n\\n\\n-- Why this is not working?"
                    },
                    {
                        "username": "mahapatraabhishek04",
                        "content": "I am not able to figure out why the below query is giving wrong output on submitting even though it worked when I clicked Run. Can anyone please help.\\nI am using MS SQL Server to run the below code.\\nselect product.product_id , product.product_name\\nfrom Product\\ninner join Sales\\non Product.product_id = Sales.product_id\\nwhere sale_date between cast(\\'2019-01-01\\' as date) and cast(\\'2019-03-31\\' as date)\\nexcept\\nselect product.product_id , product.product_name\\nfrom Product\\ninner join Sales\\non Product.product_id = Sales.product_id\\nwhere sale_date > cast(\\'2019-03-31\\' as date)"
                    },
                    {
                        "username": "user2708Pa",
                        "content": "I am at lost here. When I run my code, I get the correct answer, but then when I click submit, I get a different output and it\\'s marked as wrong. \\nAny idea what\\'s happening?"
                    },
                    {
                        "username": "vamsivankuri",
                        "content": ";with cte as\\n(\\nselect p.product_id, p.product_name, sale_date\\nfrom Product p \\njoin Sales s on p.product_id=s.product_id\\nwhere cast(sale_date as date) >cast(\\'2019-03-31\\' as date)\\nunion\\nselect p.product_id, p.product_name, sale_date\\nfrom Product p \\njoin Sales s on p.product_id=s.product_id\\nwhere cast(sale_date as date) <cast(\\'2019-01-01\\' as date)\\n), cte1 as\\n(\\nselect p.product_id, p.product_name\\nfrom Product p \\njoin Sales s on p.product_id=s.product_id\\nwhere p.product_id not in (select product_id from cte)\\n)\\nselect * from cte1"
                    },
                    {
                        "username": "Hanisha_DUa",
                        "content": "I am including all criteria and still this won\\'t run on test case second - \\n`select s.product_id , p.product_name\\nfrom sales s\\njoin product p\\non p.product_id=s.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' and \\ns.product_id not in \\n(select product_id from sales\\nwhere sale_date between \\'2019-04-01\\' and \\'2019-12-31\\')`"
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "SELECT product.product_id, product_name \\n FROM Product INNER JOIN Sales\\n ON Product.product_id=Sales.product_id\\n WHERE sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nWhy  it is not showing the correct output?\\n "
                    },
                    {
                        "username": "tianxuzang",
                        "content": "Sale table has no primary key, it can have repeated rows.\\nthat is why need to use group by to avoid the duplicate row issue "
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "It does not take into account products that were sold both within the date range and outside the date range."
                    }
                ]
            },
            {
                "id": 1752891,
                "content": [
                    {
                        "username": "adityachatterjee",
                        "content": "Why would the below query not work? Not considering the performance here. Only from solution correctness standpoint.\n\nSELECT P.product_id,P.product_name\nFROM\nSALES S\nLEFT JOIN\n(SELECT DISTINCT * FROM PRODUCT) P\nON\nS.PRODUCT_ID=P.PRODUCT_ID\nWHERE YEAR(SALE_DATE)=2019 AND MONTH(SALE_DATE)<=3 AND P.PRODUCT_ID NOT IN (SELECT PRODUCT_ID FROM SALES WHERE YEAR(SALE_DATE)=2019 AND MONTH (SALE_DATE)>3) \n##SALE_DATE>=2019-01-01 AND SALE_DATE<=2019-03-31\nGROUP BY 1,2 ORDER BY PRODUCT_ID"
                    },
                    {
                        "username": "akashdubey2047",
                        "content": "SELECT p.product_id, product_name \\nFROM Product P INNER JOIN Sales S ON p.product_id=s.product_id \\nWHERE p.product_id NOT IN (SELECT product_id FROM Sales WHERE sale_date NOT BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\') \\nGROUP BY p.product_id,product_name;"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "Select Product_id,Product_name from Product where Product_id in (select Product_id from Sales Group by product_id having Min(sale_date)>=\\'2019-01-01\\' and Max(Sale_date)<=\\'2019-03-31\\');"
                    },
                    {
                        "username": "ShubhayanS",
                        "content": "\\n`select product_id, product_name from Product \\nwhere product_id in\\n(select product_id  from Sales\\ngroup by 1\\nhaving max(year(sale_date)) = 2019 and max(month(sale_date)) <=3)`[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "omehdiakram",
                        "content": "WITH SPRING_SALES AS (\\n    SELECT * FROM SALES WHERE SALE_DATE BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\' \\n), OTHER_SALES AS (\\n    SELECT * FROM SALES WHERE SALE_DATE BETWEEN \\'2019-04-01\\' AND \\'2019-12-31\\' \\n)\\nSELECT \\n    DISTINCT P.PRODUCT_ID AS product_id, \\n    P.PRODUCT_NAME AS product_name \\nFROM \\n    PRODUCT P JOIN SPRING_SALES S \\nON \\n    P.PRODUCT_ID = S.PRODUCT_ID\\nAND \\n    P.PRODUCT_ID NOT IN (SELECT PRODUCT_ID FROM OTHER_SALES);\\n\\n\\n-- Why this is not working?"
                    },
                    {
                        "username": "mahapatraabhishek04",
                        "content": "I am not able to figure out why the below query is giving wrong output on submitting even though it worked when I clicked Run. Can anyone please help.\\nI am using MS SQL Server to run the below code.\\nselect product.product_id , product.product_name\\nfrom Product\\ninner join Sales\\non Product.product_id = Sales.product_id\\nwhere sale_date between cast(\\'2019-01-01\\' as date) and cast(\\'2019-03-31\\' as date)\\nexcept\\nselect product.product_id , product.product_name\\nfrom Product\\ninner join Sales\\non Product.product_id = Sales.product_id\\nwhere sale_date > cast(\\'2019-03-31\\' as date)"
                    },
                    {
                        "username": "user2708Pa",
                        "content": "I am at lost here. When I run my code, I get the correct answer, but then when I click submit, I get a different output and it\\'s marked as wrong. \\nAny idea what\\'s happening?"
                    },
                    {
                        "username": "vamsivankuri",
                        "content": ";with cte as\\n(\\nselect p.product_id, p.product_name, sale_date\\nfrom Product p \\njoin Sales s on p.product_id=s.product_id\\nwhere cast(sale_date as date) >cast(\\'2019-03-31\\' as date)\\nunion\\nselect p.product_id, p.product_name, sale_date\\nfrom Product p \\njoin Sales s on p.product_id=s.product_id\\nwhere cast(sale_date as date) <cast(\\'2019-01-01\\' as date)\\n), cte1 as\\n(\\nselect p.product_id, p.product_name\\nfrom Product p \\njoin Sales s on p.product_id=s.product_id\\nwhere p.product_id not in (select product_id from cte)\\n)\\nselect * from cte1"
                    },
                    {
                        "username": "Hanisha_DUa",
                        "content": "I am including all criteria and still this won\\'t run on test case second - \\n`select s.product_id , p.product_name\\nfrom sales s\\njoin product p\\non p.product_id=s.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' and \\ns.product_id not in \\n(select product_id from sales\\nwhere sale_date between \\'2019-04-01\\' and \\'2019-12-31\\')`"
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "SELECT product.product_id, product_name \\n FROM Product INNER JOIN Sales\\n ON Product.product_id=Sales.product_id\\n WHERE sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nWhy  it is not showing the correct output?\\n "
                    },
                    {
                        "username": "tianxuzang",
                        "content": "Sale table has no primary key, it can have repeated rows.\\nthat is why need to use group by to avoid the duplicate row issue "
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "It does not take into account products that were sold both within the date range and outside the date range."
                    }
                ]
            },
            {
                "id": 1746950,
                "content": [
                    {
                        "username": "anuradhanda4498",
                        "content": "What is wrong in this ?\\nSELECT p.product_id , p.product_name\\nFROM Product p\\nLEFT JOIN Sales s\\nON p.product_id = s.product_id\\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nAND\\np.product_id NOT IN(\\n    SELECT DISTINCT product_id \\n    FROM Sales\\n    WHERE sale_date > \\'2019-03-31\\' or sale_date < \\'2019-01-01\\')"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "use SELECT DISTINCT p.product_id , p.product_name ..."
                    },
                    {
                        "username": "weebhav",
                        "content": "Can someone please explain me why is this not the right solution?\\n\\nselect product_id , product_name from product where product_id not in\\n(select product_id from sales where sale_date  between (2019-04-01) and (2019-12-31));"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "Too many mistakes...\\nWrong date range, wrong date literals, etc...\\nAdded additional condition and fix errors:\\n```sql\\nselect product_id , product_name from product \\nwhere product_id not in (select product_id from sales where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\')\\nand product_id in (select product_id from sales where sale_date between \\'2019-01-01\\' and \\'2019-03-31\\')\\n```"
                    },
                    {
                        "username": "Rahmatul_Akbar",
                        "content": "MySQL\\nselect sub.product_id,sub.product_name\\nfrom\\n(select p.product_id,p.product_name,s.sale_date\\nfrom product p\\njoin sales s\\non p.product_id=s.product_id\\ngroup by 1) sub\\nwhere sub.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' \\nand sub.product_id not in (select product_id from sales where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\' )"
                    },
                    {
                        "username": "yunjinchoidev",
                        "content": "select \\ns.product_id, \\np.product_name\\nfrom Product as p\\ninner join Sales as s on s.product_id = p.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand (select max(s2.sale_date) from Sales as s2 where s2.product_id = p.product_id) <= \\'2019-03-31\\'\\nand (select min(s2.sale_date) from Sales as s2 where s2.product_id = p.product_id) >= \\'2019-01-01\\'\\ngroup by s.product_id, p.product_id, p.product_name\\n\\n\\n\\ni think below where query is too Of course.\\nbecause this table is 2019 data. \\nam i wrong ? \\n\\nand (select min(s2.sale_date) from Sales as s2 where s2.product_id = p.product_id) >= \\'2019-01-01\\'\\n"
                    },
                    {
                        "username": "surbhisinggh",
                        "content": "why this query satement is wrong \\n\\nSelect Product.product_id, product_name, sale_date from Product left join Sales On Sales.product_id = Product.product_id where year(sale_date)=2019 And Month(sale_date) IN (1,2,3) ;"
                    },
                    {
                        "username": "aleliszt",
                        "content": "This query doesn\\'t exclude the product_ids that were also sold outside of the first quarter. For example  the product_name = G4  was sold in Q1 ( 2019-02-17) but  sold in 2019-06-02 too, then G4 shouldn\\'t be in the final output"
                    },
                    {
                        "username": "Yi-LingT",
                        "content": "SELECT product_id ,product_name\\nFROM Product \\nWHERE  product_id IN \\n(SELECT   product_id\\nFROM Sales\\nWHERE sale_date BETWEEN \\'2019-01-01\\' and \\'2019-03-31\\'\\n) WHY THIS IS WRONG?\\uD83D\\uDE2B\\n\\n\\nWHEN I CHANGE TO \\nWHERE sale_date > \\'2019-03-31\\' OR  sale_date < \\'2019-01-01\\' )\\nTHEN IT IS CORRECT?"
                    },
                    {
                        "username": "AABBCCDDEEFF",
                        "content": "\"MOST USEFULL\"\n `select product_id,product_name from product p1\nwhere (select count(*) from Sales s1 where sale_date between \"2019-01-01\" and \"2019-03-31\" and s1.product_id=p1.product_id) = (select count(*) from Sales s3 where s3.product_id=p1.product_id) and product_id in (select product_id from Sales)\n`"
                    },
                    {
                        "username": "Sultan_Aslam",
                        "content": "select product_id , product_name \\nfrom Product \\nwhere product_id in (select product_id \\n                     from Sales \\n                     where sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' \\n                     And product_id not in (select product_id \\n                                            from Sales \\n                                            where sale_date > \\'2019-03-31\\' or sale_date < \\'2019-01-01\\'))"
                    },
                    {
                        "username": "Vandana_KH",
                        "content": "I think the product G4 should be there in the output, I am not understanding why it is not included? Can anyone help me in this. Thanks  "
                    },
                    {
                        "username": "iamhassaan",
                        "content": "Any idea why I am getting this error ?\\n\\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'abc\\n#  select product_id from Sales where month(sale_date) not in (1,2,3) \\n# s\\' at line 6\\n\\n\\n`\\n# Write your MySQL query statement below\\n\\nselect s.product_id , p.product_name from Sales s\\njoin product p on p.product_id = s.product_id \\nwhere sale_date between (\\'2019-01-01\\' and \\'2019-03-31\\')\\nand s.product_id not in (select abc.product_id from Sales where month(sale_date) not in (1,2,3)) abc\\n\\n`"
                    }
                ]
            },
            {
                "id": 1746913,
                "content": [
                    {
                        "username": "anuradhanda4498",
                        "content": "What is wrong in this ?\\nSELECT p.product_id , p.product_name\\nFROM Product p\\nLEFT JOIN Sales s\\nON p.product_id = s.product_id\\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nAND\\np.product_id NOT IN(\\n    SELECT DISTINCT product_id \\n    FROM Sales\\n    WHERE sale_date > \\'2019-03-31\\' or sale_date < \\'2019-01-01\\')"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "use SELECT DISTINCT p.product_id , p.product_name ..."
                    },
                    {
                        "username": "weebhav",
                        "content": "Can someone please explain me why is this not the right solution?\\n\\nselect product_id , product_name from product where product_id not in\\n(select product_id from sales where sale_date  between (2019-04-01) and (2019-12-31));"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "Too many mistakes...\\nWrong date range, wrong date literals, etc...\\nAdded additional condition and fix errors:\\n```sql\\nselect product_id , product_name from product \\nwhere product_id not in (select product_id from sales where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\')\\nand product_id in (select product_id from sales where sale_date between \\'2019-01-01\\' and \\'2019-03-31\\')\\n```"
                    },
                    {
                        "username": "Rahmatul_Akbar",
                        "content": "MySQL\\nselect sub.product_id,sub.product_name\\nfrom\\n(select p.product_id,p.product_name,s.sale_date\\nfrom product p\\njoin sales s\\non p.product_id=s.product_id\\ngroup by 1) sub\\nwhere sub.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' \\nand sub.product_id not in (select product_id from sales where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\' )"
                    },
                    {
                        "username": "yunjinchoidev",
                        "content": "select \\ns.product_id, \\np.product_name\\nfrom Product as p\\ninner join Sales as s on s.product_id = p.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand (select max(s2.sale_date) from Sales as s2 where s2.product_id = p.product_id) <= \\'2019-03-31\\'\\nand (select min(s2.sale_date) from Sales as s2 where s2.product_id = p.product_id) >= \\'2019-01-01\\'\\ngroup by s.product_id, p.product_id, p.product_name\\n\\n\\n\\ni think below where query is too Of course.\\nbecause this table is 2019 data. \\nam i wrong ? \\n\\nand (select min(s2.sale_date) from Sales as s2 where s2.product_id = p.product_id) >= \\'2019-01-01\\'\\n"
                    },
                    {
                        "username": "surbhisinggh",
                        "content": "why this query satement is wrong \\n\\nSelect Product.product_id, product_name, sale_date from Product left join Sales On Sales.product_id = Product.product_id where year(sale_date)=2019 And Month(sale_date) IN (1,2,3) ;"
                    },
                    {
                        "username": "aleliszt",
                        "content": "This query doesn\\'t exclude the product_ids that were also sold outside of the first quarter. For example  the product_name = G4  was sold in Q1 ( 2019-02-17) but  sold in 2019-06-02 too, then G4 shouldn\\'t be in the final output"
                    },
                    {
                        "username": "Yi-LingT",
                        "content": "SELECT product_id ,product_name\\nFROM Product \\nWHERE  product_id IN \\n(SELECT   product_id\\nFROM Sales\\nWHERE sale_date BETWEEN \\'2019-01-01\\' and \\'2019-03-31\\'\\n) WHY THIS IS WRONG?\\uD83D\\uDE2B\\n\\n\\nWHEN I CHANGE TO \\nWHERE sale_date > \\'2019-03-31\\' OR  sale_date < \\'2019-01-01\\' )\\nTHEN IT IS CORRECT?"
                    },
                    {
                        "username": "AABBCCDDEEFF",
                        "content": "\"MOST USEFULL\"\n `select product_id,product_name from product p1\nwhere (select count(*) from Sales s1 where sale_date between \"2019-01-01\" and \"2019-03-31\" and s1.product_id=p1.product_id) = (select count(*) from Sales s3 where s3.product_id=p1.product_id) and product_id in (select product_id from Sales)\n`"
                    },
                    {
                        "username": "Sultan_Aslam",
                        "content": "select product_id , product_name \\nfrom Product \\nwhere product_id in (select product_id \\n                     from Sales \\n                     where sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' \\n                     And product_id not in (select product_id \\n                                            from Sales \\n                                            where sale_date > \\'2019-03-31\\' or sale_date < \\'2019-01-01\\'))"
                    },
                    {
                        "username": "Vandana_KH",
                        "content": "I think the product G4 should be there in the output, I am not understanding why it is not included? Can anyone help me in this. Thanks  "
                    },
                    {
                        "username": "iamhassaan",
                        "content": "Any idea why I am getting this error ?\\n\\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'abc\\n#  select product_id from Sales where month(sale_date) not in (1,2,3) \\n# s\\' at line 6\\n\\n\\n`\\n# Write your MySQL query statement below\\n\\nselect s.product_id , p.product_name from Sales s\\njoin product p on p.product_id = s.product_id \\nwhere sale_date between (\\'2019-01-01\\' and \\'2019-03-31\\')\\nand s.product_id not in (select abc.product_id from Sales where month(sale_date) not in (1,2,3)) abc\\n\\n`"
                    }
                ]
            },
            {
                "id": 1738334,
                "content": [
                    {
                        "username": "anuradhanda4498",
                        "content": "What is wrong in this ?\\nSELECT p.product_id , p.product_name\\nFROM Product p\\nLEFT JOIN Sales s\\nON p.product_id = s.product_id\\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nAND\\np.product_id NOT IN(\\n    SELECT DISTINCT product_id \\n    FROM Sales\\n    WHERE sale_date > \\'2019-03-31\\' or sale_date < \\'2019-01-01\\')"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "use SELECT DISTINCT p.product_id , p.product_name ..."
                    },
                    {
                        "username": "weebhav",
                        "content": "Can someone please explain me why is this not the right solution?\\n\\nselect product_id , product_name from product where product_id not in\\n(select product_id from sales where sale_date  between (2019-04-01) and (2019-12-31));"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "Too many mistakes...\\nWrong date range, wrong date literals, etc...\\nAdded additional condition and fix errors:\\n```sql\\nselect product_id , product_name from product \\nwhere product_id not in (select product_id from sales where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\')\\nand product_id in (select product_id from sales where sale_date between \\'2019-01-01\\' and \\'2019-03-31\\')\\n```"
                    },
                    {
                        "username": "Rahmatul_Akbar",
                        "content": "MySQL\\nselect sub.product_id,sub.product_name\\nfrom\\n(select p.product_id,p.product_name,s.sale_date\\nfrom product p\\njoin sales s\\non p.product_id=s.product_id\\ngroup by 1) sub\\nwhere sub.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' \\nand sub.product_id not in (select product_id from sales where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\' )"
                    },
                    {
                        "username": "yunjinchoidev",
                        "content": "select \\ns.product_id, \\np.product_name\\nfrom Product as p\\ninner join Sales as s on s.product_id = p.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand (select max(s2.sale_date) from Sales as s2 where s2.product_id = p.product_id) <= \\'2019-03-31\\'\\nand (select min(s2.sale_date) from Sales as s2 where s2.product_id = p.product_id) >= \\'2019-01-01\\'\\ngroup by s.product_id, p.product_id, p.product_name\\n\\n\\n\\ni think below where query is too Of course.\\nbecause this table is 2019 data. \\nam i wrong ? \\n\\nand (select min(s2.sale_date) from Sales as s2 where s2.product_id = p.product_id) >= \\'2019-01-01\\'\\n"
                    },
                    {
                        "username": "surbhisinggh",
                        "content": "why this query satement is wrong \\n\\nSelect Product.product_id, product_name, sale_date from Product left join Sales On Sales.product_id = Product.product_id where year(sale_date)=2019 And Month(sale_date) IN (1,2,3) ;"
                    },
                    {
                        "username": "aleliszt",
                        "content": "This query doesn\\'t exclude the product_ids that were also sold outside of the first quarter. For example  the product_name = G4  was sold in Q1 ( 2019-02-17) but  sold in 2019-06-02 too, then G4 shouldn\\'t be in the final output"
                    },
                    {
                        "username": "Yi-LingT",
                        "content": "SELECT product_id ,product_name\\nFROM Product \\nWHERE  product_id IN \\n(SELECT   product_id\\nFROM Sales\\nWHERE sale_date BETWEEN \\'2019-01-01\\' and \\'2019-03-31\\'\\n) WHY THIS IS WRONG?\\uD83D\\uDE2B\\n\\n\\nWHEN I CHANGE TO \\nWHERE sale_date > \\'2019-03-31\\' OR  sale_date < \\'2019-01-01\\' )\\nTHEN IT IS CORRECT?"
                    },
                    {
                        "username": "AABBCCDDEEFF",
                        "content": "\"MOST USEFULL\"\n `select product_id,product_name from product p1\nwhere (select count(*) from Sales s1 where sale_date between \"2019-01-01\" and \"2019-03-31\" and s1.product_id=p1.product_id) = (select count(*) from Sales s3 where s3.product_id=p1.product_id) and product_id in (select product_id from Sales)\n`"
                    },
                    {
                        "username": "Sultan_Aslam",
                        "content": "select product_id , product_name \\nfrom Product \\nwhere product_id in (select product_id \\n                     from Sales \\n                     where sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' \\n                     And product_id not in (select product_id \\n                                            from Sales \\n                                            where sale_date > \\'2019-03-31\\' or sale_date < \\'2019-01-01\\'))"
                    },
                    {
                        "username": "Vandana_KH",
                        "content": "I think the product G4 should be there in the output, I am not understanding why it is not included? Can anyone help me in this. Thanks  "
                    },
                    {
                        "username": "iamhassaan",
                        "content": "Any idea why I am getting this error ?\\n\\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'abc\\n#  select product_id from Sales where month(sale_date) not in (1,2,3) \\n# s\\' at line 6\\n\\n\\n`\\n# Write your MySQL query statement below\\n\\nselect s.product_id , p.product_name from Sales s\\njoin product p on p.product_id = s.product_id \\nwhere sale_date between (\\'2019-01-01\\' and \\'2019-03-31\\')\\nand s.product_id not in (select abc.product_id from Sales where month(sale_date) not in (1,2,3)) abc\\n\\n`"
                    }
                ]
            },
            {
                "id": 1733027,
                "content": [
                    {
                        "username": "anuradhanda4498",
                        "content": "What is wrong in this ?\\nSELECT p.product_id , p.product_name\\nFROM Product p\\nLEFT JOIN Sales s\\nON p.product_id = s.product_id\\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nAND\\np.product_id NOT IN(\\n    SELECT DISTINCT product_id \\n    FROM Sales\\n    WHERE sale_date > \\'2019-03-31\\' or sale_date < \\'2019-01-01\\')"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "use SELECT DISTINCT p.product_id , p.product_name ..."
                    },
                    {
                        "username": "weebhav",
                        "content": "Can someone please explain me why is this not the right solution?\\n\\nselect product_id , product_name from product where product_id not in\\n(select product_id from sales where sale_date  between (2019-04-01) and (2019-12-31));"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "Too many mistakes...\\nWrong date range, wrong date literals, etc...\\nAdded additional condition and fix errors:\\n```sql\\nselect product_id , product_name from product \\nwhere product_id not in (select product_id from sales where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\')\\nand product_id in (select product_id from sales where sale_date between \\'2019-01-01\\' and \\'2019-03-31\\')\\n```"
                    },
                    {
                        "username": "Rahmatul_Akbar",
                        "content": "MySQL\\nselect sub.product_id,sub.product_name\\nfrom\\n(select p.product_id,p.product_name,s.sale_date\\nfrom product p\\njoin sales s\\non p.product_id=s.product_id\\ngroup by 1) sub\\nwhere sub.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' \\nand sub.product_id not in (select product_id from sales where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\' )"
                    },
                    {
                        "username": "yunjinchoidev",
                        "content": "select \\ns.product_id, \\np.product_name\\nfrom Product as p\\ninner join Sales as s on s.product_id = p.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand (select max(s2.sale_date) from Sales as s2 where s2.product_id = p.product_id) <= \\'2019-03-31\\'\\nand (select min(s2.sale_date) from Sales as s2 where s2.product_id = p.product_id) >= \\'2019-01-01\\'\\ngroup by s.product_id, p.product_id, p.product_name\\n\\n\\n\\ni think below where query is too Of course.\\nbecause this table is 2019 data. \\nam i wrong ? \\n\\nand (select min(s2.sale_date) from Sales as s2 where s2.product_id = p.product_id) >= \\'2019-01-01\\'\\n"
                    },
                    {
                        "username": "surbhisinggh",
                        "content": "why this query satement is wrong \\n\\nSelect Product.product_id, product_name, sale_date from Product left join Sales On Sales.product_id = Product.product_id where year(sale_date)=2019 And Month(sale_date) IN (1,2,3) ;"
                    },
                    {
                        "username": "aleliszt",
                        "content": "This query doesn\\'t exclude the product_ids that were also sold outside of the first quarter. For example  the product_name = G4  was sold in Q1 ( 2019-02-17) but  sold in 2019-06-02 too, then G4 shouldn\\'t be in the final output"
                    },
                    {
                        "username": "Yi-LingT",
                        "content": "SELECT product_id ,product_name\\nFROM Product \\nWHERE  product_id IN \\n(SELECT   product_id\\nFROM Sales\\nWHERE sale_date BETWEEN \\'2019-01-01\\' and \\'2019-03-31\\'\\n) WHY THIS IS WRONG?\\uD83D\\uDE2B\\n\\n\\nWHEN I CHANGE TO \\nWHERE sale_date > \\'2019-03-31\\' OR  sale_date < \\'2019-01-01\\' )\\nTHEN IT IS CORRECT?"
                    },
                    {
                        "username": "AABBCCDDEEFF",
                        "content": "\"MOST USEFULL\"\n `select product_id,product_name from product p1\nwhere (select count(*) from Sales s1 where sale_date between \"2019-01-01\" and \"2019-03-31\" and s1.product_id=p1.product_id) = (select count(*) from Sales s3 where s3.product_id=p1.product_id) and product_id in (select product_id from Sales)\n`"
                    },
                    {
                        "username": "Sultan_Aslam",
                        "content": "select product_id , product_name \\nfrom Product \\nwhere product_id in (select product_id \\n                     from Sales \\n                     where sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' \\n                     And product_id not in (select product_id \\n                                            from Sales \\n                                            where sale_date > \\'2019-03-31\\' or sale_date < \\'2019-01-01\\'))"
                    },
                    {
                        "username": "Vandana_KH",
                        "content": "I think the product G4 should be there in the output, I am not understanding why it is not included? Can anyone help me in this. Thanks  "
                    },
                    {
                        "username": "iamhassaan",
                        "content": "Any idea why I am getting this error ?\\n\\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'abc\\n#  select product_id from Sales where month(sale_date) not in (1,2,3) \\n# s\\' at line 6\\n\\n\\n`\\n# Write your MySQL query statement below\\n\\nselect s.product_id , p.product_name from Sales s\\njoin product p on p.product_id = s.product_id \\nwhere sale_date between (\\'2019-01-01\\' and \\'2019-03-31\\')\\nand s.product_id not in (select abc.product_id from Sales where month(sale_date) not in (1,2,3)) abc\\n\\n`"
                    }
                ]
            },
            {
                "id": 1709750,
                "content": [
                    {
                        "username": "anuradhanda4498",
                        "content": "What is wrong in this ?\\nSELECT p.product_id , p.product_name\\nFROM Product p\\nLEFT JOIN Sales s\\nON p.product_id = s.product_id\\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nAND\\np.product_id NOT IN(\\n    SELECT DISTINCT product_id \\n    FROM Sales\\n    WHERE sale_date > \\'2019-03-31\\' or sale_date < \\'2019-01-01\\')"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "use SELECT DISTINCT p.product_id , p.product_name ..."
                    },
                    {
                        "username": "weebhav",
                        "content": "Can someone please explain me why is this not the right solution?\\n\\nselect product_id , product_name from product where product_id not in\\n(select product_id from sales where sale_date  between (2019-04-01) and (2019-12-31));"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "Too many mistakes...\\nWrong date range, wrong date literals, etc...\\nAdded additional condition and fix errors:\\n```sql\\nselect product_id , product_name from product \\nwhere product_id not in (select product_id from sales where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\')\\nand product_id in (select product_id from sales where sale_date between \\'2019-01-01\\' and \\'2019-03-31\\')\\n```"
                    },
                    {
                        "username": "Rahmatul_Akbar",
                        "content": "MySQL\\nselect sub.product_id,sub.product_name\\nfrom\\n(select p.product_id,p.product_name,s.sale_date\\nfrom product p\\njoin sales s\\non p.product_id=s.product_id\\ngroup by 1) sub\\nwhere sub.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' \\nand sub.product_id not in (select product_id from sales where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\' )"
                    },
                    {
                        "username": "yunjinchoidev",
                        "content": "select \\ns.product_id, \\np.product_name\\nfrom Product as p\\ninner join Sales as s on s.product_id = p.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand (select max(s2.sale_date) from Sales as s2 where s2.product_id = p.product_id) <= \\'2019-03-31\\'\\nand (select min(s2.sale_date) from Sales as s2 where s2.product_id = p.product_id) >= \\'2019-01-01\\'\\ngroup by s.product_id, p.product_id, p.product_name\\n\\n\\n\\ni think below where query is too Of course.\\nbecause this table is 2019 data. \\nam i wrong ? \\n\\nand (select min(s2.sale_date) from Sales as s2 where s2.product_id = p.product_id) >= \\'2019-01-01\\'\\n"
                    },
                    {
                        "username": "surbhisinggh",
                        "content": "why this query satement is wrong \\n\\nSelect Product.product_id, product_name, sale_date from Product left join Sales On Sales.product_id = Product.product_id where year(sale_date)=2019 And Month(sale_date) IN (1,2,3) ;"
                    },
                    {
                        "username": "aleliszt",
                        "content": "This query doesn\\'t exclude the product_ids that were also sold outside of the first quarter. For example  the product_name = G4  was sold in Q1 ( 2019-02-17) but  sold in 2019-06-02 too, then G4 shouldn\\'t be in the final output"
                    },
                    {
                        "username": "Yi-LingT",
                        "content": "SELECT product_id ,product_name\\nFROM Product \\nWHERE  product_id IN \\n(SELECT   product_id\\nFROM Sales\\nWHERE sale_date BETWEEN \\'2019-01-01\\' and \\'2019-03-31\\'\\n) WHY THIS IS WRONG?\\uD83D\\uDE2B\\n\\n\\nWHEN I CHANGE TO \\nWHERE sale_date > \\'2019-03-31\\' OR  sale_date < \\'2019-01-01\\' )\\nTHEN IT IS CORRECT?"
                    },
                    {
                        "username": "AABBCCDDEEFF",
                        "content": "\"MOST USEFULL\"\n `select product_id,product_name from product p1\nwhere (select count(*) from Sales s1 where sale_date between \"2019-01-01\" and \"2019-03-31\" and s1.product_id=p1.product_id) = (select count(*) from Sales s3 where s3.product_id=p1.product_id) and product_id in (select product_id from Sales)\n`"
                    },
                    {
                        "username": "Sultan_Aslam",
                        "content": "select product_id , product_name \\nfrom Product \\nwhere product_id in (select product_id \\n                     from Sales \\n                     where sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' \\n                     And product_id not in (select product_id \\n                                            from Sales \\n                                            where sale_date > \\'2019-03-31\\' or sale_date < \\'2019-01-01\\'))"
                    },
                    {
                        "username": "Vandana_KH",
                        "content": "I think the product G4 should be there in the output, I am not understanding why it is not included? Can anyone help me in this. Thanks  "
                    },
                    {
                        "username": "iamhassaan",
                        "content": "Any idea why I am getting this error ?\\n\\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'abc\\n#  select product_id from Sales where month(sale_date) not in (1,2,3) \\n# s\\' at line 6\\n\\n\\n`\\n# Write your MySQL query statement below\\n\\nselect s.product_id , p.product_name from Sales s\\njoin product p on p.product_id = s.product_id \\nwhere sale_date between (\\'2019-01-01\\' and \\'2019-03-31\\')\\nand s.product_id not in (select abc.product_id from Sales where month(sale_date) not in (1,2,3)) abc\\n\\n`"
                    }
                ]
            },
            {
                "id": 1708776,
                "content": [
                    {
                        "username": "anuradhanda4498",
                        "content": "What is wrong in this ?\\nSELECT p.product_id , p.product_name\\nFROM Product p\\nLEFT JOIN Sales s\\nON p.product_id = s.product_id\\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nAND\\np.product_id NOT IN(\\n    SELECT DISTINCT product_id \\n    FROM Sales\\n    WHERE sale_date > \\'2019-03-31\\' or sale_date < \\'2019-01-01\\')"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "use SELECT DISTINCT p.product_id , p.product_name ..."
                    },
                    {
                        "username": "weebhav",
                        "content": "Can someone please explain me why is this not the right solution?\\n\\nselect product_id , product_name from product where product_id not in\\n(select product_id from sales where sale_date  between (2019-04-01) and (2019-12-31));"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "Too many mistakes...\\nWrong date range, wrong date literals, etc...\\nAdded additional condition and fix errors:\\n```sql\\nselect product_id , product_name from product \\nwhere product_id not in (select product_id from sales where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\')\\nand product_id in (select product_id from sales where sale_date between \\'2019-01-01\\' and \\'2019-03-31\\')\\n```"
                    },
                    {
                        "username": "Rahmatul_Akbar",
                        "content": "MySQL\\nselect sub.product_id,sub.product_name\\nfrom\\n(select p.product_id,p.product_name,s.sale_date\\nfrom product p\\njoin sales s\\non p.product_id=s.product_id\\ngroup by 1) sub\\nwhere sub.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' \\nand sub.product_id not in (select product_id from sales where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\' )"
                    },
                    {
                        "username": "yunjinchoidev",
                        "content": "select \\ns.product_id, \\np.product_name\\nfrom Product as p\\ninner join Sales as s on s.product_id = p.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand (select max(s2.sale_date) from Sales as s2 where s2.product_id = p.product_id) <= \\'2019-03-31\\'\\nand (select min(s2.sale_date) from Sales as s2 where s2.product_id = p.product_id) >= \\'2019-01-01\\'\\ngroup by s.product_id, p.product_id, p.product_name\\n\\n\\n\\ni think below where query is too Of course.\\nbecause this table is 2019 data. \\nam i wrong ? \\n\\nand (select min(s2.sale_date) from Sales as s2 where s2.product_id = p.product_id) >= \\'2019-01-01\\'\\n"
                    },
                    {
                        "username": "surbhisinggh",
                        "content": "why this query satement is wrong \\n\\nSelect Product.product_id, product_name, sale_date from Product left join Sales On Sales.product_id = Product.product_id where year(sale_date)=2019 And Month(sale_date) IN (1,2,3) ;"
                    },
                    {
                        "username": "aleliszt",
                        "content": "This query doesn\\'t exclude the product_ids that were also sold outside of the first quarter. For example  the product_name = G4  was sold in Q1 ( 2019-02-17) but  sold in 2019-06-02 too, then G4 shouldn\\'t be in the final output"
                    },
                    {
                        "username": "Yi-LingT",
                        "content": "SELECT product_id ,product_name\\nFROM Product \\nWHERE  product_id IN \\n(SELECT   product_id\\nFROM Sales\\nWHERE sale_date BETWEEN \\'2019-01-01\\' and \\'2019-03-31\\'\\n) WHY THIS IS WRONG?\\uD83D\\uDE2B\\n\\n\\nWHEN I CHANGE TO \\nWHERE sale_date > \\'2019-03-31\\' OR  sale_date < \\'2019-01-01\\' )\\nTHEN IT IS CORRECT?"
                    },
                    {
                        "username": "AABBCCDDEEFF",
                        "content": "\"MOST USEFULL\"\n `select product_id,product_name from product p1\nwhere (select count(*) from Sales s1 where sale_date between \"2019-01-01\" and \"2019-03-31\" and s1.product_id=p1.product_id) = (select count(*) from Sales s3 where s3.product_id=p1.product_id) and product_id in (select product_id from Sales)\n`"
                    },
                    {
                        "username": "Sultan_Aslam",
                        "content": "select product_id , product_name \\nfrom Product \\nwhere product_id in (select product_id \\n                     from Sales \\n                     where sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' \\n                     And product_id not in (select product_id \\n                                            from Sales \\n                                            where sale_date > \\'2019-03-31\\' or sale_date < \\'2019-01-01\\'))"
                    },
                    {
                        "username": "Vandana_KH",
                        "content": "I think the product G4 should be there in the output, I am not understanding why it is not included? Can anyone help me in this. Thanks  "
                    },
                    {
                        "username": "iamhassaan",
                        "content": "Any idea why I am getting this error ?\\n\\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'abc\\n#  select product_id from Sales where month(sale_date) not in (1,2,3) \\n# s\\' at line 6\\n\\n\\n`\\n# Write your MySQL query statement below\\n\\nselect s.product_id , p.product_name from Sales s\\njoin product p on p.product_id = s.product_id \\nwhere sale_date between (\\'2019-01-01\\' and \\'2019-03-31\\')\\nand s.product_id not in (select abc.product_id from Sales where month(sale_date) not in (1,2,3)) abc\\n\\n`"
                    }
                ]
            },
            {
                "id": 1708438,
                "content": [
                    {
                        "username": "anuradhanda4498",
                        "content": "What is wrong in this ?\\nSELECT p.product_id , p.product_name\\nFROM Product p\\nLEFT JOIN Sales s\\nON p.product_id = s.product_id\\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nAND\\np.product_id NOT IN(\\n    SELECT DISTINCT product_id \\n    FROM Sales\\n    WHERE sale_date > \\'2019-03-31\\' or sale_date < \\'2019-01-01\\')"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "use SELECT DISTINCT p.product_id , p.product_name ..."
                    },
                    {
                        "username": "weebhav",
                        "content": "Can someone please explain me why is this not the right solution?\\n\\nselect product_id , product_name from product where product_id not in\\n(select product_id from sales where sale_date  between (2019-04-01) and (2019-12-31));"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "Too many mistakes...\\nWrong date range, wrong date literals, etc...\\nAdded additional condition and fix errors:\\n```sql\\nselect product_id , product_name from product \\nwhere product_id not in (select product_id from sales where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\')\\nand product_id in (select product_id from sales where sale_date between \\'2019-01-01\\' and \\'2019-03-31\\')\\n```"
                    },
                    {
                        "username": "Rahmatul_Akbar",
                        "content": "MySQL\\nselect sub.product_id,sub.product_name\\nfrom\\n(select p.product_id,p.product_name,s.sale_date\\nfrom product p\\njoin sales s\\non p.product_id=s.product_id\\ngroup by 1) sub\\nwhere sub.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' \\nand sub.product_id not in (select product_id from sales where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\' )"
                    },
                    {
                        "username": "yunjinchoidev",
                        "content": "select \\ns.product_id, \\np.product_name\\nfrom Product as p\\ninner join Sales as s on s.product_id = p.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand (select max(s2.sale_date) from Sales as s2 where s2.product_id = p.product_id) <= \\'2019-03-31\\'\\nand (select min(s2.sale_date) from Sales as s2 where s2.product_id = p.product_id) >= \\'2019-01-01\\'\\ngroup by s.product_id, p.product_id, p.product_name\\n\\n\\n\\ni think below where query is too Of course.\\nbecause this table is 2019 data. \\nam i wrong ? \\n\\nand (select min(s2.sale_date) from Sales as s2 where s2.product_id = p.product_id) >= \\'2019-01-01\\'\\n"
                    },
                    {
                        "username": "surbhisinggh",
                        "content": "why this query satement is wrong \\n\\nSelect Product.product_id, product_name, sale_date from Product left join Sales On Sales.product_id = Product.product_id where year(sale_date)=2019 And Month(sale_date) IN (1,2,3) ;"
                    },
                    {
                        "username": "aleliszt",
                        "content": "This query doesn\\'t exclude the product_ids that were also sold outside of the first quarter. For example  the product_name = G4  was sold in Q1 ( 2019-02-17) but  sold in 2019-06-02 too, then G4 shouldn\\'t be in the final output"
                    },
                    {
                        "username": "Yi-LingT",
                        "content": "SELECT product_id ,product_name\\nFROM Product \\nWHERE  product_id IN \\n(SELECT   product_id\\nFROM Sales\\nWHERE sale_date BETWEEN \\'2019-01-01\\' and \\'2019-03-31\\'\\n) WHY THIS IS WRONG?\\uD83D\\uDE2B\\n\\n\\nWHEN I CHANGE TO \\nWHERE sale_date > \\'2019-03-31\\' OR  sale_date < \\'2019-01-01\\' )\\nTHEN IT IS CORRECT?"
                    },
                    {
                        "username": "AABBCCDDEEFF",
                        "content": "\"MOST USEFULL\"\n `select product_id,product_name from product p1\nwhere (select count(*) from Sales s1 where sale_date between \"2019-01-01\" and \"2019-03-31\" and s1.product_id=p1.product_id) = (select count(*) from Sales s3 where s3.product_id=p1.product_id) and product_id in (select product_id from Sales)\n`"
                    },
                    {
                        "username": "Sultan_Aslam",
                        "content": "select product_id , product_name \\nfrom Product \\nwhere product_id in (select product_id \\n                     from Sales \\n                     where sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' \\n                     And product_id not in (select product_id \\n                                            from Sales \\n                                            where sale_date > \\'2019-03-31\\' or sale_date < \\'2019-01-01\\'))"
                    },
                    {
                        "username": "Vandana_KH",
                        "content": "I think the product G4 should be there in the output, I am not understanding why it is not included? Can anyone help me in this. Thanks  "
                    },
                    {
                        "username": "iamhassaan",
                        "content": "Any idea why I am getting this error ?\\n\\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'abc\\n#  select product_id from Sales where month(sale_date) not in (1,2,3) \\n# s\\' at line 6\\n\\n\\n`\\n# Write your MySQL query statement below\\n\\nselect s.product_id , p.product_name from Sales s\\njoin product p on p.product_id = s.product_id \\nwhere sale_date between (\\'2019-01-01\\' and \\'2019-03-31\\')\\nand s.product_id not in (select abc.product_id from Sales where month(sale_date) not in (1,2,3)) abc\\n\\n`"
                    }
                ]
            },
            {
                "id": 1707456,
                "content": [
                    {
                        "username": "anuradhanda4498",
                        "content": "What is wrong in this ?\\nSELECT p.product_id , p.product_name\\nFROM Product p\\nLEFT JOIN Sales s\\nON p.product_id = s.product_id\\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nAND\\np.product_id NOT IN(\\n    SELECT DISTINCT product_id \\n    FROM Sales\\n    WHERE sale_date > \\'2019-03-31\\' or sale_date < \\'2019-01-01\\')"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "use SELECT DISTINCT p.product_id , p.product_name ..."
                    },
                    {
                        "username": "weebhav",
                        "content": "Can someone please explain me why is this not the right solution?\\n\\nselect product_id , product_name from product where product_id not in\\n(select product_id from sales where sale_date  between (2019-04-01) and (2019-12-31));"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "Too many mistakes...\\nWrong date range, wrong date literals, etc...\\nAdded additional condition and fix errors:\\n```sql\\nselect product_id , product_name from product \\nwhere product_id not in (select product_id from sales where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\')\\nand product_id in (select product_id from sales where sale_date between \\'2019-01-01\\' and \\'2019-03-31\\')\\n```"
                    },
                    {
                        "username": "Rahmatul_Akbar",
                        "content": "MySQL\\nselect sub.product_id,sub.product_name\\nfrom\\n(select p.product_id,p.product_name,s.sale_date\\nfrom product p\\njoin sales s\\non p.product_id=s.product_id\\ngroup by 1) sub\\nwhere sub.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' \\nand sub.product_id not in (select product_id from sales where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\' )"
                    },
                    {
                        "username": "yunjinchoidev",
                        "content": "select \\ns.product_id, \\np.product_name\\nfrom Product as p\\ninner join Sales as s on s.product_id = p.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand (select max(s2.sale_date) from Sales as s2 where s2.product_id = p.product_id) <= \\'2019-03-31\\'\\nand (select min(s2.sale_date) from Sales as s2 where s2.product_id = p.product_id) >= \\'2019-01-01\\'\\ngroup by s.product_id, p.product_id, p.product_name\\n\\n\\n\\ni think below where query is too Of course.\\nbecause this table is 2019 data. \\nam i wrong ? \\n\\nand (select min(s2.sale_date) from Sales as s2 where s2.product_id = p.product_id) >= \\'2019-01-01\\'\\n"
                    },
                    {
                        "username": "surbhisinggh",
                        "content": "why this query satement is wrong \\n\\nSelect Product.product_id, product_name, sale_date from Product left join Sales On Sales.product_id = Product.product_id where year(sale_date)=2019 And Month(sale_date) IN (1,2,3) ;"
                    },
                    {
                        "username": "aleliszt",
                        "content": "This query doesn\\'t exclude the product_ids that were also sold outside of the first quarter. For example  the product_name = G4  was sold in Q1 ( 2019-02-17) but  sold in 2019-06-02 too, then G4 shouldn\\'t be in the final output"
                    },
                    {
                        "username": "Yi-LingT",
                        "content": "SELECT product_id ,product_name\\nFROM Product \\nWHERE  product_id IN \\n(SELECT   product_id\\nFROM Sales\\nWHERE sale_date BETWEEN \\'2019-01-01\\' and \\'2019-03-31\\'\\n) WHY THIS IS WRONG?\\uD83D\\uDE2B\\n\\n\\nWHEN I CHANGE TO \\nWHERE sale_date > \\'2019-03-31\\' OR  sale_date < \\'2019-01-01\\' )\\nTHEN IT IS CORRECT?"
                    },
                    {
                        "username": "AABBCCDDEEFF",
                        "content": "\"MOST USEFULL\"\n `select product_id,product_name from product p1\nwhere (select count(*) from Sales s1 where sale_date between \"2019-01-01\" and \"2019-03-31\" and s1.product_id=p1.product_id) = (select count(*) from Sales s3 where s3.product_id=p1.product_id) and product_id in (select product_id from Sales)\n`"
                    },
                    {
                        "username": "Sultan_Aslam",
                        "content": "select product_id , product_name \\nfrom Product \\nwhere product_id in (select product_id \\n                     from Sales \\n                     where sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' \\n                     And product_id not in (select product_id \\n                                            from Sales \\n                                            where sale_date > \\'2019-03-31\\' or sale_date < \\'2019-01-01\\'))"
                    },
                    {
                        "username": "Vandana_KH",
                        "content": "I think the product G4 should be there in the output, I am not understanding why it is not included? Can anyone help me in this. Thanks  "
                    },
                    {
                        "username": "iamhassaan",
                        "content": "Any idea why I am getting this error ?\\n\\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'abc\\n#  select product_id from Sales where month(sale_date) not in (1,2,3) \\n# s\\' at line 6\\n\\n\\n`\\n# Write your MySQL query statement below\\n\\nselect s.product_id , p.product_name from Sales s\\njoin product p on p.product_id = s.product_id \\nwhere sale_date between (\\'2019-01-01\\' and \\'2019-03-31\\')\\nand s.product_id not in (select abc.product_id from Sales where month(sale_date) not in (1,2,3)) abc\\n\\n`"
                    }
                ]
            },
            {
                "id": 1699876,
                "content": [
                    {
                        "username": "anuradhanda4498",
                        "content": "What is wrong in this ?\\nSELECT p.product_id , p.product_name\\nFROM Product p\\nLEFT JOIN Sales s\\nON p.product_id = s.product_id\\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nAND\\np.product_id NOT IN(\\n    SELECT DISTINCT product_id \\n    FROM Sales\\n    WHERE sale_date > \\'2019-03-31\\' or sale_date < \\'2019-01-01\\')"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "use SELECT DISTINCT p.product_id , p.product_name ..."
                    },
                    {
                        "username": "weebhav",
                        "content": "Can someone please explain me why is this not the right solution?\\n\\nselect product_id , product_name from product where product_id not in\\n(select product_id from sales where sale_date  between (2019-04-01) and (2019-12-31));"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "Too many mistakes...\\nWrong date range, wrong date literals, etc...\\nAdded additional condition and fix errors:\\n```sql\\nselect product_id , product_name from product \\nwhere product_id not in (select product_id from sales where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\')\\nand product_id in (select product_id from sales where sale_date between \\'2019-01-01\\' and \\'2019-03-31\\')\\n```"
                    },
                    {
                        "username": "Rahmatul_Akbar",
                        "content": "MySQL\\nselect sub.product_id,sub.product_name\\nfrom\\n(select p.product_id,p.product_name,s.sale_date\\nfrom product p\\njoin sales s\\non p.product_id=s.product_id\\ngroup by 1) sub\\nwhere sub.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' \\nand sub.product_id not in (select product_id from sales where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\' )"
                    },
                    {
                        "username": "yunjinchoidev",
                        "content": "select \\ns.product_id, \\np.product_name\\nfrom Product as p\\ninner join Sales as s on s.product_id = p.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand (select max(s2.sale_date) from Sales as s2 where s2.product_id = p.product_id) <= \\'2019-03-31\\'\\nand (select min(s2.sale_date) from Sales as s2 where s2.product_id = p.product_id) >= \\'2019-01-01\\'\\ngroup by s.product_id, p.product_id, p.product_name\\n\\n\\n\\ni think below where query is too Of course.\\nbecause this table is 2019 data. \\nam i wrong ? \\n\\nand (select min(s2.sale_date) from Sales as s2 where s2.product_id = p.product_id) >= \\'2019-01-01\\'\\n"
                    },
                    {
                        "username": "surbhisinggh",
                        "content": "why this query satement is wrong \\n\\nSelect Product.product_id, product_name, sale_date from Product left join Sales On Sales.product_id = Product.product_id where year(sale_date)=2019 And Month(sale_date) IN (1,2,3) ;"
                    },
                    {
                        "username": "aleliszt",
                        "content": "This query doesn\\'t exclude the product_ids that were also sold outside of the first quarter. For example  the product_name = G4  was sold in Q1 ( 2019-02-17) but  sold in 2019-06-02 too, then G4 shouldn\\'t be in the final output"
                    },
                    {
                        "username": "Yi-LingT",
                        "content": "SELECT product_id ,product_name\\nFROM Product \\nWHERE  product_id IN \\n(SELECT   product_id\\nFROM Sales\\nWHERE sale_date BETWEEN \\'2019-01-01\\' and \\'2019-03-31\\'\\n) WHY THIS IS WRONG?\\uD83D\\uDE2B\\n\\n\\nWHEN I CHANGE TO \\nWHERE sale_date > \\'2019-03-31\\' OR  sale_date < \\'2019-01-01\\' )\\nTHEN IT IS CORRECT?"
                    },
                    {
                        "username": "AABBCCDDEEFF",
                        "content": "\"MOST USEFULL\"\n `select product_id,product_name from product p1\nwhere (select count(*) from Sales s1 where sale_date between \"2019-01-01\" and \"2019-03-31\" and s1.product_id=p1.product_id) = (select count(*) from Sales s3 where s3.product_id=p1.product_id) and product_id in (select product_id from Sales)\n`"
                    },
                    {
                        "username": "Sultan_Aslam",
                        "content": "select product_id , product_name \\nfrom Product \\nwhere product_id in (select product_id \\n                     from Sales \\n                     where sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' \\n                     And product_id not in (select product_id \\n                                            from Sales \\n                                            where sale_date > \\'2019-03-31\\' or sale_date < \\'2019-01-01\\'))"
                    },
                    {
                        "username": "Vandana_KH",
                        "content": "I think the product G4 should be there in the output, I am not understanding why it is not included? Can anyone help me in this. Thanks  "
                    },
                    {
                        "username": "iamhassaan",
                        "content": "Any idea why I am getting this error ?\\n\\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'abc\\n#  select product_id from Sales where month(sale_date) not in (1,2,3) \\n# s\\' at line 6\\n\\n\\n`\\n# Write your MySQL query statement below\\n\\nselect s.product_id , p.product_name from Sales s\\njoin product p on p.product_id = s.product_id \\nwhere sale_date between (\\'2019-01-01\\' and \\'2019-03-31\\')\\nand s.product_id not in (select abc.product_id from Sales where month(sale_date) not in (1,2,3)) abc\\n\\n`"
                    }
                ]
            },
            {
                "id": 1692324,
                "content": [
                    {
                        "username": "anuradhanda4498",
                        "content": "What is wrong in this ?\\nSELECT p.product_id , p.product_name\\nFROM Product p\\nLEFT JOIN Sales s\\nON p.product_id = s.product_id\\nWHERE s.sale_date BETWEEN \\'2019-01-01\\' AND \\'2019-03-31\\'\\nAND\\np.product_id NOT IN(\\n    SELECT DISTINCT product_id \\n    FROM Sales\\n    WHERE sale_date > \\'2019-03-31\\' or sale_date < \\'2019-01-01\\')"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "use SELECT DISTINCT p.product_id , p.product_name ..."
                    },
                    {
                        "username": "weebhav",
                        "content": "Can someone please explain me why is this not the right solution?\\n\\nselect product_id , product_name from product where product_id not in\\n(select product_id from sales where sale_date  between (2019-04-01) and (2019-12-31));"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "Too many mistakes...\\nWrong date range, wrong date literals, etc...\\nAdded additional condition and fix errors:\\n```sql\\nselect product_id , product_name from product \\nwhere product_id not in (select product_id from sales where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\')\\nand product_id in (select product_id from sales where sale_date between \\'2019-01-01\\' and \\'2019-03-31\\')\\n```"
                    },
                    {
                        "username": "Rahmatul_Akbar",
                        "content": "MySQL\\nselect sub.product_id,sub.product_name\\nfrom\\n(select p.product_id,p.product_name,s.sale_date\\nfrom product p\\njoin sales s\\non p.product_id=s.product_id\\ngroup by 1) sub\\nwhere sub.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' \\nand sub.product_id not in (select product_id from sales where sale_date not between \\'2019-01-01\\' and \\'2019-03-31\\' )"
                    },
                    {
                        "username": "yunjinchoidev",
                        "content": "select \\ns.product_id, \\np.product_name\\nfrom Product as p\\ninner join Sales as s on s.product_id = p.product_id\\nwhere s.sale_date between \\'2019-01-01\\' and \\'2019-03-31\\'\\nand (select max(s2.sale_date) from Sales as s2 where s2.product_id = p.product_id) <= \\'2019-03-31\\'\\nand (select min(s2.sale_date) from Sales as s2 where s2.product_id = p.product_id) >= \\'2019-01-01\\'\\ngroup by s.product_id, p.product_id, p.product_name\\n\\n\\n\\ni think below where query is too Of course.\\nbecause this table is 2019 data. \\nam i wrong ? \\n\\nand (select min(s2.sale_date) from Sales as s2 where s2.product_id = p.product_id) >= \\'2019-01-01\\'\\n"
                    },
                    {
                        "username": "surbhisinggh",
                        "content": "why this query satement is wrong \\n\\nSelect Product.product_id, product_name, sale_date from Product left join Sales On Sales.product_id = Product.product_id where year(sale_date)=2019 And Month(sale_date) IN (1,2,3) ;"
                    },
                    {
                        "username": "aleliszt",
                        "content": "This query doesn\\'t exclude the product_ids that were also sold outside of the first quarter. For example  the product_name = G4  was sold in Q1 ( 2019-02-17) but  sold in 2019-06-02 too, then G4 shouldn\\'t be in the final output"
                    },
                    {
                        "username": "Yi-LingT",
                        "content": "SELECT product_id ,product_name\\nFROM Product \\nWHERE  product_id IN \\n(SELECT   product_id\\nFROM Sales\\nWHERE sale_date BETWEEN \\'2019-01-01\\' and \\'2019-03-31\\'\\n) WHY THIS IS WRONG?\\uD83D\\uDE2B\\n\\n\\nWHEN I CHANGE TO \\nWHERE sale_date > \\'2019-03-31\\' OR  sale_date < \\'2019-01-01\\' )\\nTHEN IT IS CORRECT?"
                    },
                    {
                        "username": "AABBCCDDEEFF",
                        "content": "\"MOST USEFULL\"\n `select product_id,product_name from product p1\nwhere (select count(*) from Sales s1 where sale_date between \"2019-01-01\" and \"2019-03-31\" and s1.product_id=p1.product_id) = (select count(*) from Sales s3 where s3.product_id=p1.product_id) and product_id in (select product_id from Sales)\n`"
                    },
                    {
                        "username": "Sultan_Aslam",
                        "content": "select product_id , product_name \\nfrom Product \\nwhere product_id in (select product_id \\n                     from Sales \\n                     where sale_date between \\'2019-01-01\\' and \\'2019-03-31\\' \\n                     And product_id not in (select product_id \\n                                            from Sales \\n                                            where sale_date > \\'2019-03-31\\' or sale_date < \\'2019-01-01\\'))"
                    },
                    {
                        "username": "Vandana_KH",
                        "content": "I think the product G4 should be there in the output, I am not understanding why it is not included? Can anyone help me in this. Thanks  "
                    },
                    {
                        "username": "iamhassaan",
                        "content": "Any idea why I am getting this error ?\\n\\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'abc\\n#  select product_id from Sales where month(sale_date) not in (1,2,3) \\n# s\\' at line 6\\n\\n\\n`\\n# Write your MySQL query statement below\\n\\nselect s.product_id , p.product_name from Sales s\\njoin product p on p.product_id = s.product_id \\nwhere sale_date between (\\'2019-01-01\\' and \\'2019-03-31\\')\\nand s.product_id not in (select abc.product_id from Sales where month(sale_date) not in (1,2,3)) abc\\n\\n`"
                    }
                ]
            }
        ]
    }
]