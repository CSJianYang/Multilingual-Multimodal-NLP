[
    {
        "title": "Number of Lines To Write String",
        "question_content": "You are given a string s of lowercase English letters and an array widths denoting how many pixels wide each lowercase English letter is. Specifically, widths[0] is the width of 'a', widths[1] is the width of 'b', and so on.\nYou are trying to write s across several lines, where each line is no longer than 100 pixels. Starting at the beginning of s, write as many letters on the first line such that the total width does not exceed 100 pixels. Then, from where you stopped in s, continue writing as many letters as you can on the second line. Continue this process until you have written all of s.\nReturn an array result of length 2 where:\n\n\tresult[0] is the total number of lines.\n\tresult[1] is the width of the last line in pixels.\n\n&nbsp;\nExample 1:\n\nInput: widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"abcdefghijklmnopqrstuvwxyz\"\nOutput: [3,60]\nExplanation: You can write s as follows:\nabcdefghij  // 100 pixels wide\nklmnopqrst  // 100 pixels wide\nuvwxyz      // 60 pixels wide\nThere are a total of 3 lines, and the last line is 60 pixels wide.\nExample 2:\n\nInput: widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"bbbcccdddaaa\"\nOutput: [2,4]\nExplanation: You can write s as follows:\nbbbcccdddaa  // 98 pixels wide\na            // 4 pixels wide\nThere are a total of 2 lines, and the last line is 4 pixels wide.\n&nbsp;\nConstraints:\n\n\twidths.length == 26\n\t2 <= widths[i] <= 10\n\t1 <= s.length <= 1000\n\ts contains only lowercase English letters.",
        "solutions": [
            {
                "id": 120666,
                "title": "easy-solution-6-lines-c-java-python",
                "content": "Very self-explaining codes.\\n\\nNote from description:\\n* The length of S will be in the range ```[1, 1000]```.\\n* S will only contain lowercase letters.\\n* widths is an array of length 26.\\n\\nC++\\n```\\n    vector<int> numberOfLines(vector<int>& widths, string S) {\\n        int res = 1, cur = 0;\\n        for (char c : S) {\\n            int width = widths[c - \\'a\\'];\\n            res = cur + width > 100 ? res + 1 : res;\\n            cur = cur + width > 100 ? width : cur + width;\\n        }\\n        return {res, cur};\\n    }\\n```\\nJava:\\n```\\n    public int[] numberOfLines(int[] widths, String S) {\\n        int res = 1, cur = 0;\\n        for (char c : S.toCharArray()) {\\n            int width = widths[c - \\'a\\'];\\n            res = cur + width > 100 ? res + 1 : res;\\n            cur = cur + width > 100 ? width : cur + width;\\n        }\\n        return new int[] {res, cur};\\n    }\\n```\\nPython\\n```\\n    def numberOfcurs(self, widths, S):\\n        res, cur = 1, 0\\n        for i in S:\\n            width = widths[ord(i) - ord(\\'a\\')]\\n            res += 1 if cur + width > 100 else 0\\n            cur = width if cur + width > 100 else cur + width\\n        return [res, cur]\\n\\t",
                "solutionTags": [],
                "code": "```[1, 1000]```\n```\\n    vector<int> numberOfLines(vector<int>& widths, string S) {\\n        int res = 1, cur = 0;\\n        for (char c : S) {\\n            int width = widths[c - \\'a\\'];\\n            res = cur + width > 100 ? res + 1 : res;\\n            cur = cur + width > 100 ? width : cur + width;\\n        }\\n        return {res, cur};\\n    }\\n```\n```\\n    public int[] numberOfLines(int[] widths, String S) {\\n        int res = 1, cur = 0;\\n        for (char c : S.toCharArray()) {\\n            int width = widths[c - \\'a\\'];\\n            res = cur + width > 100 ? res + 1 : res;\\n            cur = cur + width > 100 ? width : cur + width;\\n        }\\n        return new int[] {res, cur};\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 120695,
                "title": "regex",
                "content": "```\\ndef number_of_lines(widths, s)\\n  a = s.gsub(/./) { \"a#{\\'.\\' * (widths[$&.ord - 97] - 2)}b\" }.scan(/a.{,98}b/)\\n  [a.size, a[-1].size]\\nend\\n```\\nI replace for example a letter of width `6` by the string `a....b`. Then use regex `/a.{,98}b/` to create optimal lines.",
                "solutionTags": [],
                "code": "```\\ndef number_of_lines(widths, s)\\n  a = s.gsub(/./) { \"a#{\\'.\\' * (widths[$&.ord - 97] - 2)}b\" }.scan(/a.{,98}b/)\\n  [a.size, a[-1].size]\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2595859,
                "title": "java-beats-100-simple",
                "content": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int count=1;\\n        int sum=0;\\n        for(char i:s.toCharArray()){\\n            if((sum+widths[i-\\'a\\'])<=100)sum+=widths[i-\\'a\\'];\\n            else {\\n                sum=widths[i-\\'a\\'];\\n                count++;\\n            }\\n        }\\n        return new int[]{count,sum};\\n    }\\n}\\nPlease upvote if you like the solution \\uD83D\\uDE4F \\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int count=1;\\n        int sum=0;\\n        for(char i:s.toCharArray()){\\n            if((sum+widths[i-\\'a\\'])<=100)sum+=widths[i-\\'a\\'];\\n            else {\\n                sum=widths[i-\\'a\\'];\\n                count++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 120668,
                "title": "c-straightforward",
                "content": "    vector<int> numberOfLines(vector<int>& widths, string S) {\\n        int lines = 1; vector<int> res;\\n        int occupied_width = 0, len = S.length();\\n        \\n        for(int i = 0; i < len; i++) {\\n            if((occupied_width + widths[S[i] - \\'a\\']) > 100) {\\n                lines++;\\n                occupied_width = 0;\\n            }\\n            occupied_width += widths[S[i] - \\'a\\'];\\n        }\\n        \\n        res.push_back(lines);\\n        res.push_back(occupied_width);\\n        \\n        return res;\\n    }",
                "solutionTags": [],
                "code": "    vector<int> numberOfLines(vector<int>& widths, string S) {\\n        int lines = 1; vector<int> res;\\n        int occupied_width = 0, len = S.length();\\n        \\n        for(int i = 0; i < len; i++) {\\n            if((occupied_width + widths[S[i] - \\'a\\']) > 100) {\\n                lines++;\\n                occupied_width = 0;\\n            }\\n            occupied_width += widths[S[i] - \\'a\\'];\\n        }\\n        \\n        res.push_back(lines);\\n        res.push_back(occupied_width);\\n        \\n        return res;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2452066,
                "title": "c-for-beginners",
                "content": "We simply keep counting the current sum of pixels, and as soon as it exceeds 100, increment the lines required by one.\\n\\n\\tvector<int> numberOfLines(vector<int>& widths, string s) {\\n        int cnt=1, currSum=0;\\n        \\n        for (int i=0;i<s.size();i++) {\\n            currSum += widths[s[i]-\\'a\\'];\\n            if(currSum > 100) {\\n                currSum = widths[s[i]-\\'a\\'];\\n                cnt++;\\n            }\\n        }\\n        \\n        return {cnt,currSum};\\n    }",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "We simply keep counting the current sum of pixels, and as soon as it exceeds 100, increment the lines required by one.\\n\\n\\tvector<int> numberOfLines(vector<int>& widths, string s) {\\n        int cnt=1, currSum=0;\\n        \\n        for (int i=0;i<s.size();i++) {\\n            currSum += widths[s[i]-\\'a\\'];\\n            if(currSum > 100) {\\n                currSum = widths[s[i]-\\'a\\'];\\n                cnt++;\\n            }\\n        }\\n        \\n        return {cnt,currSum};\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1434696,
                "title": "c-easy-to-understand-100-faster",
                "content": "**Please upvote to motivate me in my quest of documenting all leetcode solutions(to help the community). HAPPY CODING:)\\nAny suggestions and improvements are always welcome**\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int sum=0;\\n        int count=1;\\n        if(s.length()==0)\\n        return {0,0};    \\n        for(int i=0;i<s.length();i++)\\n        {\\n            sum+=widths[s[i]-\\'a\\'];\\n            if(sum>100)\\n            {\\n                sum=widths[s[i]-\\'a\\'];\\n                count++;\\n            }   \\n        }   \\n        vector<int> ans;\\n        ans.push_back(count);\\n        ans.push_back(sum);\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int sum=0;\\n        int count=1;\\n        if(s.length()==0)\\n        return {0,0};    \\n        for(int i=0;i<s.length();i++)\\n        {\\n            sum+=widths[s[i]-\\'a\\'];\\n            if(sum>100)\\n            {\\n                sum=widths[s[i]-\\'a\\'];\\n                count++;\\n            }   \\n        }   \\n        vector<int> ans;\\n        ans.push_back(count);\\n        ans.push_back(sum);\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 508209,
                "title": "javascript-simple-solution",
                "content": "```javascript\\n/**\\n * @param {number[]} widths\\n * @param {string} S\\n * @return {number[]}\\n */\\nvar numberOfLines = function(widths, S) {\\n  let lines = 1;\\n  let last = 0;\\n  const base = \\'a\\'.charCodeAt(0);\\n  for (let i = 0; i < S.length; i++) {\\n    const width = widths[S.charCodeAt(i) - base];\\n    last += width;\\n    if (last > 100) {\\n      lines++;\\n      last = width;\\n    }\\n  }\\n  return [lines, last];\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```javascript\\n/**\\n * @param {number[]} widths\\n * @param {string} S\\n * @return {number[]}\\n */\\nvar numberOfLines = function(widths, S) {\\n  let lines = 1;\\n  let last = 0;\\n  const base = \\'a\\'.charCodeAt(0);\\n  for (let i = 0; i < S.length; i++) {\\n    const width = widths[S.charCodeAt(i) - base];\\n    last += width;\\n    if (last > 100) {\\n      lines++;\\n      last = width;\\n    }\\n  }\\n  return [lines, last];\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 498470,
                "title": "python-3-solution",
                "content": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], S: str) -> List[int]:\\n        abc = \\'abcdefghijklmnopqrstuvwxyz\\'\\n        abc_dict = {c:i for i, c in enumerate(abc)}\\n        n = 0\\n        lines = 1\\n\\n        for c in S:\\n            n += widths[abc_dict[c]]\\n            if n == 100:\\n                lines += 1\\n                n = 0\\n                continue\\n            elif n > 100:\\n                lines += 1\\n                n = widths[abc_dict[c]]\\n                \\n        return(lines, n)\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], S: str) -> List[int]:\\n        abc = \\'abcdefghijklmnopqrstuvwxyz\\'\\n        abc_dict = {c:i for i, c in enumerate(abc)}\\n        n = 0\\n        lines = 1\\n\\n        for c in S:\\n            n += widths[abc_dict[c]]\\n            if n == 100:\\n                lines += 1\\n                n = 0\\n                continue\\n            elif n > 100:\\n                lines += 1\\n                n = widths[abc_dict[c]]\\n                \\n        return(lines, n)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3235298,
                "title": "java-bruteforce-approach",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int total=0;\\n        int count=0;\\n        String str=\"\";\\n        for(int i=0; i<s.length(); i++){\\n            char a=s.charAt(i);\\n            int ele=widths[a-\\'a\\']; \\n            if(total+ele<=100){\\n               str+=Character.valueOf(a).toString();\\n               total=total+ele; \\n            }else{\\n                count++;\\n                str=Character.valueOf(a).toString();\\n                total=ele;\\n            }           \\n        }\\n         if(!str.equals(\"\")) count++;\\n         int[] array=new int[2];\\n         array[0]=count;\\n         array[1]=total;\\n         return array;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int total=0;\\n        int count=0;\\n        String str=\"\";\\n        for(int i=0; i<s.length(); i++){\\n            char a=s.charAt(i);\\n            int ele=widths[a-\\'a\\']; \\n            if(total+ele<=100){\\n               str+=Character.valueOf(a).toString();\\n               total=total+ele; \\n            }else{\\n                count++;\\n                str=Character.valueOf(a).toString();\\n                total=ele;\\n            }           \\n        }\\n         if(!str.equals(\"\")) count++;\\n         int[] array=new int[2];\\n         array[0]=count;\\n         array[1]=total;\\n         return array;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2854003,
                "title": "just-1-loop-java-98-faster",
                "content": "```Don\\'t forget to upvote if you find it useful```\\n\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int res1=0,res0=0;\\n        int length = s.length();\\n        for(int i=0;i<length;i++){\\n            res1+=widths[s.charAt(i)-\\'a\\'];\\n            if(res1>100){\\n                res0++;\\n                res1=0;\\n                i--;\\n            }\\n        }\\n        return new int[]{res0+1,res1};\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```Don\\'t forget to upvote if you find it useful```\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int res1=0,res0=0;\\n        int length = s.length();\\n        for(int i=0;i<length;i++){\\n            res1+=widths[s.charAt(i)-\\'a\\'];\\n            if(res1>100){\\n                res0++;\\n                res1=0;\\n                i--;\\n            }\\n        }\\n        return new int[]{res0+1,res1};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2300227,
                "title": "python-super-easy-solution-faster-than-99-submission",
                "content": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        a_dict = {l:w for l,w in zip(\"abcdefghijklmnopqrstuvwxyz\",widths)}\\n        r_count, rp_count = 1, 0\\n        for i in range(len(s)):\\n            rp_count += a_dict[s[i]]\\n            if rp_count > 100:\\n                rp_count = a_dict[s[i]]\\n                r_count += 1\\n        return [r_count, rp_count]\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        a_dict = {l:w for l,w in zip(\"abcdefghijklmnopqrstuvwxyz\",widths)}\\n        r_count, rp_count = 1, 0\\n        for i in range(len(s)):\\n            rp_count += a_dict[s[i]]\\n            if rp_count > 100:\\n                rp_count = a_dict[s[i]]\\n                r_count += 1\\n        return [r_count, rp_count]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2033554,
                "title": "python-understandable-solution-unlike-description-with-explanation",
                "content": "**Explanation**\\nWe loop through each character in `s`, and each time we see what width it is. If the final width is above 100, then we make a new line. We return the number of lines and the final width.\\n\\n```\\nclass Solution(object):\\n    def numberOfLines(self, widths, s):\\n        \"\"\"\\n        :type widths: List[int]\\n        :type s: str\\n        :rtype: List[int]\\n        \"\"\"\\n        lines = 1\\n        width = 0\\n        for char in s:\\n            w = widths[ord(char) - ord(\\'a\\')]\\n            width += w\\n            if width > 100:\\n                lines += 1\\n                width = w\\n        return [lines, width]\\n```\\n\\n**If you liked this, please upvote to support me!**",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def numberOfLines(self, widths, s):\\n        \"\"\"\\n        :type widths: List[int]\\n        :type s: str\\n        :rtype: List[int]\\n        \"\"\"\\n        lines = 1\\n        width = 0\\n        for char in s:\\n            w = widths[ord(char) - ord(\\'a\\')]\\n            width += w\\n            if width > 100:\\n                lines += 1\\n                width = w\\n        return [lines, width]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1349936,
                "title": "very-easy-java-solution-with-comment-runtime-0-ms-faster-than-100-00",
                "content": "```\\nclass Solution \\n{\\n    public int[] numberOfLines(int[] widths, String s)\\n    {\\n        char chrs[]=s.toCharArray();\\n        int len=chrs.length;\\n        \\n        int line=1, size=0;\\n        for(int i=0; i<len; i++)\\n        {\\n            char tempCh=chrs[i];\\n            //agar mera current size k saath aur ek char add karne se size 100pixel k equal or 100 se chota raha..\\n            if((size+widths[tempCh%97])<=100)\\n            {\\n                //toh karo add...\\n                size+=widths[tempCh%97];\\n            }\\n            else\\n            {\\n                //nahi toh line no. badao aur agli line pe jao jiska size us naya wala charracter ke size se shuru hoga....\\n                line++;\\n                size=widths[tempCh%97];\\n            }\\n        }\\n        \\n        int res[]={line, size};\\n        return res;\\n    }\\n}\\n//By Arindam Ghosh\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution \\n{\\n    public int[] numberOfLines(int[] widths, String s)\\n    {\\n        char chrs[]=s.toCharArray();\\n        int len=chrs.length;\\n        \\n        int line=1, size=0;\\n        for(int i=0; i<len; i++)\\n        {\\n            char tempCh=chrs[i];\\n            //agar mera current size k saath aur ek char add karne se size 100pixel k equal or 100 se chota raha..\\n            if((size+widths[tempCh%97])<=100)\\n            {\\n                //toh karo add...\\n                size+=widths[tempCh%97];\\n            }\\n            else\\n            {\\n                //nahi toh line no. badao aur agli line pe jao jiska size us naya wala charracter ke size se shuru hoga....\\n                line++;\\n                size=widths[tempCh%97];\\n            }\\n        }\\n        \\n        int res[]={line, size};\\n        return res;\\n    }\\n}\\n//By Arindam Ghosh\\n```",
                "codeTag": "Java"
            },
            {
                "id": 923434,
                "title": "easy-if-else-solution-o-n",
                "content": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], S: str) -> List[int]:\\n        lines = width = 0\\n        \\n        for i in S:\\n            x = widths[ord(i) - ord(\\'a\\')]\\n            if width + x == 100:\\n                lines += 1\\n                width = 0\\n            elif width + x > 100:\\n                lines += 1\\n                width = x\\n            else:\\n                width += x\\n        if width != 0:\\n            lines += 1\\n        return [lines, width]\\n```\\nFor more such questions:https://github.com/vanigupta20024/Programming-Challenges",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], S: str) -> List[int]:\\n        lines = width = 0\\n        \\n        for i in S:\\n            x = widths[ord(i) - ord(\\'a\\')]\\n            if width + x == 100:\\n                lines += 1\\n                width = 0\\n            elif width + x > 100:\\n                lines += 1\\n                width = x\\n            else:\\n                width += x\\n        if width != 0:\\n            lines += 1\\n        return [lines, width]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 646530,
                "title": "two-method-easy-to-read-20ms-python3-beats-99",
                "content": "dict\\n```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], S: str) -> List[int]:\\n        alpha = \"abcdefghijklmnopqrstuvwxyz\"\\n        dic = {}\\n        for i,num in enumerate(alpha):\\n        \\tdic[num] = widths[i]\\n        line = 1\\n        count = 0\\n        for i in S:\\n        \\tcount += dic[i]\\n        \\tif count > 100:\\n        \\t\\tline += 1\\n        \\t\\tcount = dic[i]\\n        return [line, count]\\n```\\nASCII\\n```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], S: str) -> List[int]:\\n        line = 1\\n        count = 0\\n        for i in S:\\n        \\tcount += widths[ord(str(i))-97]\\n        \\tif count > 100:\\n        \\t\\tline += 1\\n        \\t\\tcount = widths[ord(str(i))-97]\\n        return [line, count]\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], S: str) -> List[int]:\\n        alpha = \"abcdefghijklmnopqrstuvwxyz\"\\n        dic = {}\\n        for i,num in enumerate(alpha):\\n        \\tdic[num] = widths[i]\\n        line = 1\\n        count = 0\\n        for i in S:\\n        \\tcount += dic[i]\\n        \\tif count > 100:\\n        \\t\\tline += 1\\n        \\t\\tcount = dic[i]\\n        return [line, count]\\n```\n```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], S: str) -> List[int]:\\n        line = 1\\n        count = 0\\n        for i in S:\\n        \\tcount += widths[ord(str(i))-97]\\n        \\tif count > 100:\\n        \\t\\tline += 1\\n        \\t\\tcount = widths[ord(str(i))-97]\\n        return [line, count]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 515186,
                "title": "806-javascript-one-line-solution",
                "content": "This is more performant than I expected.\\n\\n> Runtime: **52 ms**, faster than *90.63%* of JavaScript online submissions\\n> Memory Usage: **35.6 MB**, less than *100.00%* of JavaScript online submissions\\n\\n```javascript\\nconst numberOfLines = (widths, s) =>\\n  [...s]\\n    .map(c => widths[c.charCodeAt(0) - 97])\\n    .reduce(\\n      (acc, curr) => [\\n        acc[0] + (100 < acc[1] + curr ? 1 : 0),\\n        100 < acc[1] + curr ? curr : acc[1] + curr,\\n      ],\\n      [s.length ? 1 : 0, 0],\\n    );\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```javascript\\nconst numberOfLines = (widths, s) =>\\n  [...s]\\n    .map(c => widths[c.charCodeAt(0) - 97])\\n    .reduce(\\n      (acc, curr) => [\\n        acc[0] + (100 < acc[1] + curr ? 1 : 0),\\n        100 < acc[1] + curr ? curr : acc[1] + curr,\\n      ],\\n      [s.length ? 1 : 0, 0],\\n    );\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4098905,
                "title": "easy-java-solution-beginners-friendly",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        if(s.length()==0)\\n        return new int[]{0,0};\\n        int[] ans=new int[]{1,0};\\n        int sum=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            int temp=widths[s.charAt(i)-\\'a\\'];\\n            if(temp+sum<=100)\\n            {\\n                sum+=temp;\\n            }\\n            else \\n            {\\n                ans[0]++;\\n                sum=temp;\\n            }\\n        }\\n        ans[1]=sum;\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        if(s.length()==0)\\n        return new int[]{0,0};\\n        int[] ans=new int[]{1,0};\\n        int sum=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            int temp=widths[s.charAt(i)-\\'a\\'];\\n            if(temp+sum<=100)\\n            {\\n                sum+=temp;\\n            }\\n            else \\n            {\\n                ans[0]++;\\n                sum=temp;\\n            }\\n        }\\n        ans[1]=sum;\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4026085,
                "title": "best-java-solution-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int[] arr = new int[2];\\n        int x = 1;\\n        int sum = 0;\\n        for(char c : s.toCharArray()){\\n            int char_width = widths[c - \\'a\\'];\\n            if(char_width + sum > 100){\\n                x++;\\n                sum = 0;\\n            }\\n            sum += char_width;            \\n        }\\n        arr[0] = x;\\n        arr[1] = sum;\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int[] arr = new int[2];\\n        int x = 1;\\n        int sum = 0;\\n        for(char c : s.toCharArray()){\\n            int char_width = widths[c - \\'a\\'];\\n            if(char_width + sum > 100){\\n                x++;\\n                sum = 0;\\n            }\\n            sum += char_width;            \\n        }\\n        arr[0] = x;\\n        arr[1] = sum;\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2888333,
                "title": "c-simple-and-clean-code",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int l=0,r=1;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(l+widths[(char)s[i]-97] > 100)\\n            {\\n                r++;\\n                l=widths[(char)s[i]-97];\\n            }\\n            else\\n                l+=widths[(char)s[i]-97];\\n        }\\n        return {r,l};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int l=0,r=1;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(l+widths[(char)s[i]-97] > 100)\\n            {\\n                r++;\\n                l=widths[(char)s[i]-97];\\n            }\\n            else\\n                l+=widths[(char)s[i]-97];\\n        }\\n        return {r,l};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2738578,
                "title": "easy-java-solution-100-faster",
                "content": "class Solution {\\n\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int sum =0;\\n        int count =1;\\n        for(int i=0; i<s.length(); i++){\\n           char ch = s.charAt(i);\\n           int p = ch - \\'a\\';\\n           if(widths[p] + sum >100){\\n               count++;\\n               sum = widths[p];\\n           }\\n            else{\\n                sum = sum + widths[p];\\n            }\\n       } \\n        int [] arr = {count, sum};\\n        return arr;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int sum =0;\\n        int count =1;\\n        for(int i=0; i<s.length(); i++){\\n           char ch = s.charAt(i);\\n           int p = ch - \\'a\\';\\n           if(widths[p] + sum >100){\\n               count++;\\n               sum = widths[p];\\n           }",
                "codeTag": "Java"
            },
            {
                "id": 1988033,
                "title": "easy-o-n-js-solution",
                "content": "\\tvar numberOfLines = function(widths, s) {\\n\\t\\tlet lines = 1;\\n\\t\\tlet sum = 0;\\n\\n\\t\\tfor(let i=0; i<s.length; i++){\\n\\t\\t\\tlet num = s.charCodeAt(i) - 97;\\n\\t\\t\\tif(sum + widths[num] <= 100){\\n\\t\\t\\t\\tsum += widths[num];\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tlines++;\\n\\t\\t\\t\\tsum = widths[num];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn [lines, sum];\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "\\tvar numberOfLines = function(widths, s) {\\n\\t\\tlet lines = 1;\\n\\t\\tlet sum = 0;\\n\\n\\t\\tfor(let i=0; i<s.length; i++){\\n\\t\\t\\tlet num = s.charCodeAt(i) - 97;\\n\\t\\t\\tif(sum + widths[num] <= 100){\\n\\t\\t\\t\\tsum += widths[num];\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tlines++;\\n\\t\\t\\t\\tsum = widths[num];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn [lines, sum];\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 1965820,
                "title": "java-beats-100-00-memory-speed-0ms-april-2022",
                "content": "\\n\\tclass Solution {\\n\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int line=0;\\n        int pix=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            int a=s.charAt(i)-97;\\n            pix=pix+widths[a];\\n            if(pix==100)\\n            {\\n                line++;\\n                if(i!=s.length()-1)\\n                {\\n                    pix=0;\\n                }\\n            }\\n            else if(pix>100)\\n            {\\n                i--;\\n                line++;\\n                pix=0;\\n            }\\n        }\\n        if(pix>0 && pix!=100)\\n        {\\n            line++;\\n        }\\n        int[] result=new int[2];\\n        result[0]=line;\\n        result[1]=pix;\\n        return result;\\n    }\\n\\t}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int line=0;\\n        int pix=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            int a=s.charAt(i)-97;\\n            pix=pix+widths[a];\\n            if(pix==100)\\n            {\\n                line++;\\n                if(i!=s.length()-1)\\n                {\\n                    pix=0;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1890946,
                "title": "number-of-lines-to-write-string-solution-java",
                "content": "class Solution {\\n    public int[] numberOfLines(int[] widths, String S) {\\n        final int MAX_WIDTH = 100;\\n        int linesCount = 1, curWidth = 0;\\n        int length = S.length();\\n        for (int i = 0; i < length; i++) {\\n            char c = S.charAt(i);\\n            int width = widths[c - \\'a\\'];\\n            if (curWidth + width <= MAX_WIDTH)\\n                curWidth += width;\\n            else {\\n                linesCount++;\\n                curWidth = width;\\n            }\\n        }\\n        return new int[]{linesCount, curWidth};\\n    }\\n}",
                "solutionTags": [
                    "Array",
                    "String"
                ],
                "code": "class Solution {\\n    public int[] numberOfLines(int[] widths, String S) {\\n        final int MAX_WIDTH = 100;\\n        int linesCount = 1, curWidth = 0;\\n        int length = S.length();\\n        for (int i = 0; i < length; i++) {\\n            char c = S.charAt(i);\\n            int width = widths[c - \\'a\\'];\\n            if (curWidth + width <= MAX_WIDTH)\\n                curWidth += width;\\n            else {\\n                linesCount++;\\n                curWidth = width;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1170893,
                "title": "python3-97-faster-solution",
                "content": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        count = ans =  wi = 0\\n        s = list(s)\\n        while s:\\n            val = ord(s[0]) - 97\\n            \\n            if(widths[val] + wi > 100):\\n                wi = 0\\n                count += 1\\n            \\n            wi += widths[val]\\n            \\n            s.pop(0)\\n        return([count + 1 , wi])\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        count = ans =  wi = 0\\n        s = list(s)\\n        while s:\\n            val = ord(s[0]) - 97\\n            \\n            if(widths[val] + wi > 100):\\n                wi = 0\\n                count += 1\\n            \\n            wi += widths[val]\\n            \\n            s.pop(0)\\n        return([count + 1 , wi])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1100059,
                "title": "java-100-faster",
                "content": "```\\npublic int[] numberOfLines(int[] widths, String s) {\\n        int width=0;\\n        int noOflines=1;\\n        for(int i=0;i<s.length();i++){\\n            if(width+widths[s.charAt(i)-97]<=100){\\n                width+=widths[s.charAt(i)-97];\\n            }else{\\n                width=widths[s.charAt(i)-97];\\n                noOflines++;\\n            }\\n        }\\n        return new int[]{noOflines,width};\\n    }\\n```\\n\\nPlease upvote if you like the solution :)",
                "solutionTags": [],
                "code": "```\\npublic int[] numberOfLines(int[] widths, String s) {\\n        int width=0;\\n        int noOflines=1;\\n        for(int i=0;i<s.length();i++){\\n            if(width+widths[s.charAt(i)-97]<=100){\\n                width+=widths[s.charAt(i)-97];\\n            }else{\\n                width=widths[s.charAt(i)-97];\\n                noOflines++;\\n            }\\n        }\\n        return new int[]{noOflines,width};\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 135366,
                "title": "my-python-solutuin-beats-99-61",
                "content": "a=0\\n        b=1\\n        for c in S:\\n            if a <=100-width[ord(c)-97]:\\n                a+=width[ord(c)-97]\\n            else:\\n                b+=1\\n                a=0\\n                a+=width[ord(c)-97]\\n        return [b,a]",
                "solutionTags": [],
                "code": "a=0\\n        b=1\\n        for c in S:\\n            if a <=100-width[ord(c)-97]:\\n                a+=width[ord(c)-97]\\n            else:\\n                b+=1\\n                a=0\\n                a+=width[ord(c)-97]\\n        return [b,a]",
                "codeTag": "Unknown"
            },
            {
                "id": 120763,
                "title": "c-minimalism",
                "content": "If the letter cannot fit into the current line, we round the total width to the next 100. Now, we can divide the total width by 100 to see how many lines we have and use modulo to determine the width of the current (last) line. \\n```\\nvector<int> numberOfLines(vector<int>& ws, string s, int w = 0) {\\n  for (int c : s) \\n      w = ws[c-\\'a\\'] + (w % 100 + ws[c-\\'a\\'] > 100 ? w + 100 - w % 100 : w);\\n  return { w / 100 + 1, w % 100 };\\n}\\n```\\n**Update**\\nThere is a missing test case when the last line fills exactly 100 characters, and the following code addresses that.\\n```CPP\\nvector<int> numberOfLines(vector<int>& ws, string s, int w = 0) {\\n  for (int c : s) \\n      w = ws[c - \\'a\\'] + (w % 100 + ws[c-\\'a\\'] > 100 ? w + 100 - w % 100 : w);\\n  return { w / 100 + (w % 100 > 0), w % 100 > 0 ? w % 100 : w ? 100 : 0 };\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nvector<int> numberOfLines(vector<int>& ws, string s, int w = 0) {\\n  for (int c : s) \\n      w = ws[c-\\'a\\'] + (w % 100 + ws[c-\\'a\\'] > 100 ? w + 100 - w % 100 : w);\\n  return { w / 100 + 1, w % 100 };\\n}\\n```\n```CPP\\nvector<int> numberOfLines(vector<int>& ws, string s, int w = 0) {\\n  for (int c : s) \\n      w = ws[c - \\'a\\'] + (w % 100 + ws[c-\\'a\\'] > 100 ? w + 100 - w % 100 : w);\\n  return { w / 100 + (w % 100 > 0), w % 100 > 0 ? w % 100 : w ? 100 : 0 };\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3733389,
                "title": "easy-solution-100-faster-with-explanation",
                "content": "# Approach\\nThe given solution tackles the problem of determining the number of lines needed to write a given string `s` using an array of character widths `widths`.\\n\\nHere\\'s an overview of the approach:\\n\\n1. Create an integer array `res` to store the resulting number of lines and the width of the last line.\\n2. Initialize `lines` and `width` variables to keep track of the current line count and width.\\n3. Iterate through each character, `c`, in the string `s` using a `foreach` loop.\\n4. For each character, calculate its width by accessing the corresponding value in the `widths` array using `widths[c - \\'a\\']`.\\n5. Check if adding the character\\'s width to the current line width exceeds the limit of 100 pixels:\\n   - If it does, increment the line count (`lines++`) and set `width` to the character\\'s width since it will be the width of the next line.\\n   - If it doesn\\'t, add the character\\'s width to the current line width (`width += charWidth`).\\n6. After processing all the characters, assign the line count and the width of the last line to `res[0]` and `res[1]`, respectively.\\n7. Return the `res` array as the result.\\n\\nThis approach iterates through each character of the string `s` and calculates the line count and width of the last line based on the character widths. It avoids the need for a separate map or lookup table, as it directly accesses the `widths` array using the character\\'s ASCII value. The time complexity of this solution is O(n), where n is the length of the string `s`. The space complexity is O(1) since the `res` array has a fixed size.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int[] res = new int[2];\\n\\n        int lines = 1;\\n        int width = 0;\\n\\n        for (char c : s.toCharArray()) {\\n            int charWidth = widths[c - \\'a\\'];\\n            if (width + charWidth > 100) {\\n                lines++;\\n                width = charWidth;\\n            } else {\\n                width += charWidth;\\n            }\\n        }\\n\\n        res[0] = lines;\\n        res[1] = width;\\n\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "C#",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int[] res = new int[2];\\n\\n        int lines = 1;\\n        int width = 0;\\n\\n        for (char c : s.toCharArray()) {\\n            int charWidth = widths[c - \\'a\\'];\\n            if (width + charWidth > 100) {\\n                lines++;\\n                width = charWidth;\\n            } else {\\n                width += charWidth;\\n            }\\n        }\\n\\n        res[0] = lines;\\n        res[1] = width;\\n\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3471335,
                "title": "solution",
                "content": "```C++ []\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int lines = 1, width = 0;\\n        for(char c : s) {\\n            int w = widths[c-\\'a\\'];\\n            width += w;\\n            if(width > 100) {\\n                ++lines;\\n                width = w;\\n            }\\n        }\\n        return {lines, width};\\n    }\\n};\\n```\\n\\n```Python3 []\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        lines, width = 1, 0\\n        for char in s:\\n            cur_width = widths[ord(char)-97]\\n            if width + cur_width <= 100:\\n                width += cur_width\\n            else:\\n                lines += 1\\n                width = cur_width\\n        return [lines, width]\\n```\\n\\n```Java []\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int tempSum = 0, lineCounter = 1;\\n        for (char c : s.toCharArray()) {\\n            int currCharLen = widths[c - \\'a\\'];\\n            if (tempSum + currCharLen <= 100) {\\n                tempSum += currCharLen;\\n            } else {\\n                lineCounter++;\\n                tempSum = currCharLen;\\n            }\\n        }\\n        return new int[]{lineCounter, tempSum};\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int lines = 1, width = 0;\\n        for(char c : s) {\\n            int w = widths[c-\\'a\\'];\\n            width += w;\\n            if(width > 100) {\\n                ++lines;\\n                width = w;\\n            }\\n        }\\n        return {lines, width};\\n    }\\n};\\n```\n```Python3 []\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        lines, width = 1, 0\\n        for char in s:\\n            cur_width = widths[ord(char)-97]\\n            if width + cur_width <= 100:\\n                width += cur_width\\n            else:\\n                lines += 1\\n                width = cur_width\\n        return [lines, width]\\n```\n```Java []\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int tempSum = 0, lineCounter = 1;\\n        for (char c : s.toCharArray()) {\\n            int currCharLen = widths[c - \\'a\\'];\\n            if (tempSum + currCharLen <= 100) {\\n                tempSum += currCharLen;\\n            } else {\\n                lineCounter++;\\n                tempSum = currCharLen;\\n            }\\n        }\\n        return new int[]{lineCounter, tempSum};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3352377,
                "title": "number-of-lines-to-write-string-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int i=0, j, lines=1, width_sum=0;\\n        vector<int> arr;\\n        while(i<s.length())\\n        {\\n            j = s[i]-97;\\n            if((width_sum+widths[j])<=100)\\n            {\\n                width_sum += widths[j];\\n                i++;\\n            }\\n            else\\n            {\\n                lines++;\\n                width_sum = 0;\\n            }\\n        }\\n        arr.push_back(lines);\\n        arr.push_back(width_sum);\\n        return arr;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int i=0, j, lines=1, width_sum=0;\\n        vector<int> arr;\\n        while(i<s.length())\\n        {\\n            j = s[i]-97;\\n            if((width_sum+widths[j])<=100)\\n            {\\n                width_sum += widths[j];\\n                i++;\\n            }\\n            else\\n            {\\n                lines++;\\n                width_sum = 0;\\n            }\\n        }\\n        arr.push_back(lines);\\n        arr.push_back(width_sum);\\n        return arr;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3122306,
                "title": "java-solution-with-without-hash-maps-easy-to-understand",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        // Using hashmap :-\\n        HashMap<Character,Integer> hm = new HashMap<>();\\n        String str = \"abcdefghijklmnopqrstuvwxyz\";\\n//first we stored all the values of alphabets in hashmap;\\n        int line = 1 ; int sum = 0 ;\\n//integers that we will be using;\\n        for(int i = 0 ; i < str.length() ; i++){\\n            hm.put(str.charAt(i),widths[i]);\\n        }\\n//then we iterated in the string s to check if the sum is\\n//greater than 100 pixels we add a new line;\\n        for(int i = 0 ; i < s.length() ; i++){\\n            char t = s.charAt(i);\\n            if(sum+hm.get(t)<=100){\\n                sum=sum+hm.get(t);\\n            }else{\\n                line++;\\n                sum=hm.get(t);\\n            }\\n        }\\n//then we return the line and pixels in the last line ;\\n        return new int[]{line,sum};\\n        \\n        //without hashmap using arrays:-\\n        int line = 1 ; int sum = 0 ;\\n//here we have done the same thing but without using the hashmap\\n//here we will be using the given array widths to add in the sum ;\\n        for(int i = 0 ; i < s.length() ;i++){\\n            int temp = widths[s.charAt(i) - \\'a\\'];\\n            sum = sum + temp ;\\n            if(sum > 100){\\n                line++;\\n                sum = temp;\\n            }\\n        }\\n//then we return the line and pixels in the last line ;\\n        return new int[]{line,sum} ;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        // Using hashmap :-\\n        HashMap<Character,Integer> hm = new HashMap<>();\\n        String str = \"abcdefghijklmnopqrstuvwxyz\";\\n//first we stored all the values of alphabets in hashmap;\\n        int line = 1 ; int sum = 0 ;\\n//integers that we will be using;\\n        for(int i = 0 ; i < str.length() ; i++){\\n            hm.put(str.charAt(i),widths[i]);\\n        }\\n//then we iterated in the string s to check if the sum is\\n//greater than 100 pixels we add a new line;\\n        for(int i = 0 ; i < s.length() ; i++){\\n            char t = s.charAt(i);\\n            if(sum+hm.get(t)<=100){\\n                sum=sum+hm.get(t);\\n            }else{\\n                line++;\\n                sum=hm.get(t);\\n            }\\n        }\\n//then we return the line and pixels in the last line ;\\n        return new int[]{line,sum};\\n        \\n        //without hashmap using arrays:-\\n        int line = 1 ; int sum = 0 ;\\n//here we have done the same thing but without using the hashmap\\n//here we will be using the given array widths to add in the sum ;\\n        for(int i = 0 ; i < s.length() ;i++){\\n            int temp = widths[s.charAt(i) - \\'a\\'];\\n            sum = sum + temp ;\\n            if(sum > 100){\\n                line++;\\n                sum = temp;\\n            }\\n        }\\n//then we return the line and pixels in the last line ;\\n        return new int[]{line,sum} ;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3078551,
                "title": "beats-99-76-solutions-easy-to-understand-o-n-tc-python-code-by-bolt-coding",
                "content": "# Explanation\\nAt first we are initializing pix to 0, min no of lines which will be there is always 1, i for keeping count of index, and a which is ascii of \\'a\\'.\\nWe are then iterating through the s - list of words. In case pix size is <= 100 we increment the pix, incase pix > 100 we increment the line number and initialize the pix back to 0. So now when the while loop ends but pix <= 100 it will print the pix of last line. This way we can print line number and pix in last line.\\n\\n# Complexity\\n- Time complexity: O(n) as we are using a single while loop to iterate over the list\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1) as we are using variables to keep track on number of lines and pixel size\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def numberOfLines(self, width: List[int], s: str) -> List[int]:\\n        pix = 0\\n        line = 1\\n        i = 0\\n        a = 97\\n        while i<len(s):\\n            if pix<=100:\\n                pix+=width[ord(s[i])-a]\\n                i+=1\\n                if pix>100:\\n                    line+=1\\n                    pix=0\\n                    i-=1\\n        return [line, pix]\\n\\n\\n\\n```\\n# Learning\\nTo understand problems in simpler ways, need help with projects, want to learn coding from scratch, work on resume level projects, learn data science ...................\\n\\nSubscribe to Bolt Coding Channel - https://www.youtube.com/@boltcoding",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, width: List[int], s: str) -> List[int]:\\n        pix = 0\\n        line = 1\\n        i = 0\\n        a = 97\\n        while i<len(s):\\n            if pix<=100:\\n                pix+=width[ord(s[i])-a]\\n                i+=1\\n                if pix>100:\\n                    line+=1\\n                    pix=0\\n                    i-=1\\n        return [line, pix]\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2890787,
                "title": "easy-c-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n     vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int c=0,a=1;\\n        for(int i=0;i<s.length();i++){\\n            int ch=s[i]-\\'a\\';\\n            if((c+widths[ch])>100){\\n                c=widths[ch];\\n                a++; \\n            }\\n            else\\n            c+=widths[ch];\\n        }\\n        return {a,c};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n     vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int c=0,a=1;\\n        for(int i=0;i<s.length();i++){\\n            int ch=s[i]-\\'a\\';\\n            if((c+widths[ch])>100){\\n                c=widths[ch];\\n                a++; \\n            }\\n            else\\n            c+=widths[ch];\\n        }\\n        return {a,c};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2776504,
                "title": "java-average-o-n-solution",
                "content": "# Complexity\\n- Time complexity: O(N)\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int tempSum = 0, lineCounter = 1;\\n        for (char c : s.toCharArray()) {\\n            int currCharLen = widths[c - \\'a\\'];\\n            if (tempSum + currCharLen <= 100) {\\n                tempSum += currCharLen;\\n            } else {\\n                lineCounter++;\\n                tempSum = currCharLen;\\n            }\\n        }\\n        return new int[]{lineCounter, tempSum};\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int tempSum = 0, lineCounter = 1;\\n        for (char c : s.toCharArray()) {\\n            int currCharLen = widths[c - \\'a\\'];\\n            if (tempSum + currCharLen <= 100) {\\n                tempSum += currCharLen;\\n            } else {\\n                lineCounter++;\\n                tempSum = currCharLen;\\n            }\\n        }\\n        return new int[]{lineCounter, tempSum};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2646278,
                "title": "implementation-in-java-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int []ans=new int[2];\\n        int m=0,t;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            t=(int)s.charAt(i)-97;\\n          \\n            m+=widths[t];\\n            if(m>100)\\n            {\\n                ans[0]++;\\n                m=widths[t];\\n            }\\n        }\\n        ans[1]=m;\\n        ans[0]++;\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int []ans=new int[2];\\n        int m=0,t;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            t=(int)s.charAt(i)-97;\\n          \\n            m+=widths[t];\\n            if(m>100)\\n            {\\n                ans[0]++;\\n                m=widths[t];\\n            }\\n        }\\n        ans[1]=m;\\n        ans[0]++;\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2548897,
                "title": "js-very-easy-solution-with-o-n-100",
                "content": "```\\nvar numberOfLines = function(widths, s) {\\n    let currentSumPixels = 0;\\n    const output = [1, 0];\\n    for (let i = 0; i < s.length; i++) {\\n        const indexOfChar = s.charCodeAt(i) - 97;\\n        currentSumPixels += widths[indexOfChar];\\n        if (currentSumPixels > 100) {\\n            currentSumPixels = 0;\\n            output[0]++;\\n            i--;\\n        } else if (currentSumPixels === 100) {\\n            currentSumPixels = 0;\\n            output[0]++;\\n        }\\n    }\\n    \\n    output[1] = currentSumPixels || 100;\\n    if (!currentSumPixels) output[0]--;\\n\\n    return output;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar numberOfLines = function(widths, s) {\\n    let currentSumPixels = 0;\\n    const output = [1, 0];\\n    for (let i = 0; i < s.length; i++) {\\n        const indexOfChar = s.charCodeAt(i) - 97;\\n        currentSumPixels += widths[indexOfChar];\\n        if (currentSumPixels > 100) {\\n            currentSumPixels = 0;\\n            output[0]++;\\n            i--;\\n        } else if (currentSumPixels === 100) {\\n            currentSumPixels = 0;\\n            output[0]++;\\n        }\\n    }\\n    \\n    output[1] = currentSumPixels || 100;\\n    if (!currentSumPixels) output[0]--;\\n\\n    return output;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2441031,
                "title": "python-hash-table-fast-and-low-memory-usage-97-6",
                "content": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        d = dict(zip([chr(i) for i in range(97, 123)], widths))\\n        lineNumber, lineWidth = 1, 0\\n        for _ in s:\\n            if lineWidth + d[_] <= 100: lineWidth += d[_]\\n            else:\\n                lineNumber += 1\\n                lineWidth = d[_]\\n        return [lineNumber, lineWidth]\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        d = dict(zip([chr(i) for i in range(97, 123)], widths))\\n        lineNumber, lineWidth = 1, 0\\n        for _ in s:\\n            if lineWidth + d[_] <= 100: lineWidth += d[_]\\n            else:\\n                lineNumber += 1\\n                lineWidth = d[_]\\n        return [lineNumber, lineWidth]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2208621,
                "title": "python3-runtime-42ms-67-78-memory-13-9mb-19-81",
                "content": "```\\nclass Solution:\\n#     Runtime: 42ms 67.78% Memory: 13.9mb 19.81%\\n# O(n) || O(1)\\n    def numberOfLines(self, widths, s):\\n        newLine = 1\\n        \\n        width = 0\\n        \\n        for char in s:\\n            charWidth = widths[ord(char) - ord(\\'a\\')]\\n            \\n            if charWidth + width > 100:\\n                newLine += 1\\n                width = 0\\n                \\n            width += charWidth\\n                \\n        return [newLine, width]  \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n#     Runtime: 42ms 67.78% Memory: 13.9mb 19.81%\\n# O(n) || O(1)\\n    def numberOfLines(self, widths, s):\\n        newLine = 1\\n        \\n        width = 0\\n        \\n        for char in s:\\n            charWidth = widths[ord(char) - ord(\\'a\\')]\\n            \\n            if charWidth + width > 100:\\n                newLine += 1\\n                width = 0\\n                \\n            width += charWidth\\n                \\n        return [newLine, width]  \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2054270,
                "title": "c-easy-solution-faster-than-100-o-n",
                "content": "```c++\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int line_num=1, line_width=0, char_width;\\n        \\n        for (char i: s) {\\n            char_width = widths[(i-\\'a\\')];\\n            if ((line_width + char_width) > 100) {\\n\\t\\t\\t\\t// adding newline\\n                line_num++;\\n                line_width = 0;\\n            }\\n            \\n            line_width += char_width;\\n        }\\n        \\n        return {line_num, line_width}; // it will be automatically converted to vector\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```c++\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int line_num=1, line_width=0, char_width;\\n        \\n        for (char i: s) {\\n            char_width = widths[(i-\\'a\\')];\\n            if ((line_width + char_width) > 100) {\\n\\t\\t\\t\\t// adding newline\\n                line_num++;\\n                line_width = 0;\\n            }\\n            \\n            line_width += char_width;\\n        }\\n        \\n        return {line_num, line_width}; // it will be automatically converted to vector\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2050841,
                "title": "javascript-solution-one-liner",
                "content": "```\\nconst numberOfLines = (widths, s) => s.split(\\'\\').reduce((res, c, i) => ([\\n    res[1] + widths[s.charCodeAt(i) - 97] > 100 ? res[0] + 1 : res[0],\\n    res[1] + widths[s.charCodeAt(i) - 97] > 100 ? widths[s.charCodeAt(i) - 97] : res[1] + widths[s.charCodeAt(i) - 97],\\n]), [1, 0]);\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst numberOfLines = (widths, s) => s.split(\\'\\').reduce((res, c, i) => ([\\n    res[1] + widths[s.charCodeAt(i) - 97] > 100 ? res[0] + 1 : res[0],\\n    res[1] + widths[s.charCodeAt(i) - 97] > 100 ? widths[s.charCodeAt(i) - 97] : res[1] + widths[s.charCodeAt(i) - 97],\\n]), [1, 0]);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2028695,
                "title": "simple-solution-using-python",
                "content": "Runtime: 22 ms\\nMemory Usage: 13.9 MB\\n\\nCreate a dictionary where keys are a to z and values are their corresponding widths given in the problem. After that iterate through the string s and add value to the variable sum1 by taking values from the dictionary and while iterating if the sum1 + width of a string is less than equal to 100 then add the value of width in sum1 else make sum1 = 0 and increment the line. At the end return sum1 and line.\\nAny suggestions and feedbacks are welcome.\\n\\n```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        dict1 = {}\\n        for i in range(97,123):\\n            dict1[chr(i)] = widths[i-97]\\n            \\n        sum1 = 0\\n        line = 1\\n        \\n        for i in range(len(s)):\\n            if sum1 + dict1[s[i]] <= 100:\\n                sum1+=dict1[s[i]]        \\n                \\n            else:\\n                sum1 = 0\\n                sum1+=dict1[s[i]]\\n                line+=1\\n                \\n        return [line,sum1]\\n                \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        dict1 = {}\\n        for i in range(97,123):\\n            dict1[chr(i)] = widths[i-97]\\n            \\n        sum1 = 0\\n        line = 1\\n        \\n        for i in range(len(s)):\\n            if sum1 + dict1[s[i]] <= 100:\\n                sum1+=dict1[s[i]]        \\n                \\n            else:\\n                sum1 = 0\\n                sum1+=dict1[s[i]]\\n                line+=1\\n                \\n        return [line,sum1]\\n                \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2010889,
                "title": "c-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n    vector<int>result;\\n        int count=0,line=1;\\n        for(int i=0;i<s.size();i++){\\n           int z = widths[ s[i]-\\'a\\'];\\n            if(count+z>100){\\n               count =z;\\n                line++;\\n            }\\n            else {\\n                count= count+z;\\n            }     \\n        }\\n        result.push_back(line);\\n        result.push_back(count);\\n     return result;\\n      \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n    vector<int>result;\\n        int count=0,line=1;\\n        for(int i=0;i<s.size();i++){\\n           int z = widths[ s[i]-\\'a\\'];\\n            if(count+z>100){\\n               count =z;\\n                line++;\\n            }\\n            else {\\n                count= count+z;\\n            }     \\n        }\\n        result.push_back(line);\\n        result.push_back(count);\\n     return result;\\n      \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1943586,
                "title": "java-0ms",
                "content": "\\n\\n\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int lines =0;\\n        int sum=0;\\n        int [] res= new int[2];\\n     \\n         for ( int i=0; i<s.length(); i++){\\n             sum+=widths[s.charAt(i)-\\'a\\']  ;\\n             if(sum>100){\\n                 sum=0;\\n                 lines++;\\n                 i--;\\n             }\\n         }\\n           res[0]=++lines;  res[1]=sum;\\n        return res;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int lines =0;\\n        int sum=0;\\n        int [] res= new int[2];\\n     \\n         for ( int i=0; i<s.length(); i++){\\n             sum+=widths[s.charAt(i)-\\'a\\']  ;\\n             if(sum>100){\\n                 sum=0;\\n                 lines++;\\n                 i--;\\n             }\\n         }\\n           res[0]=++lines;  res[1]=sum;\\n        return res;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1893289,
                "title": "python-easy-solution-beginner-friendly",
                "content": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        lines = 1\\n        pix_per_line = 0\\n        for i in s:\\n            if widths[ord(i) - 97] + pix_per_line <= 100:\\n                pix_per_line += widths[ord(i) - 97]\\n            else:\\n                lines += 1\\n                pix_per_line = widths[ord(i) - 97]\\n        return [lines, pix_per_line]",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        lines = 1\\n        pix_per_line = 0\\n        for i in s:\\n            if widths[ord(i) - 97] + pix_per_line <= 100:\\n                pix_per_line += widths[ord(i) - 97]\\n            else:\\n                lines += 1\\n                pix_per_line = widths[ord(i) - 97]\\n        return [lines, pix_per_line]",
                "codeTag": "Java"
            },
            {
                "id": 1845904,
                "title": "runtime-52-ms-faster-than-100-00-javascript",
                "content": "Runtime: 52 ms, faster than 100.00% of JavaScript online submissions for Number of Lines To Write String.\\nMemory Usage: 42.5 MB, less than 35.48% of JavaScript online submissions for Number of Lines To Write String.\\n\\n```\\nvar numberOfLines = function (widths, s) {\\n  let lines = 0;\\n  let lastLine = 0;\\n\\n  for (let i = 0; i < s.length; i++) {\\n    let wid = widths[s[i].charCodeAt(0) - 97];\\n\\n    if (lastLine + wid <= 100) {\\n      lastLine += wid;\\n    } else if (lastLine + wid > 100) {\\n      lastLine = wid;\\n      lines++;\\n    }\\n\\n    if (lastLine === 100 && i !== s.length - 1) {\\n      lines++;\\n      lastLine = 0;\\n    }\\n  }\\n  if (lastLine <= 100) lines++;\\n  return [lines, lastLine];\\n};\\n\\n```\\n![image](https://assets.leetcode.com/users/images/d5a2d549-eda5-4348-b686-293815a0c1e0_1647174487.6723025.png)\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar numberOfLines = function (widths, s) {\\n  let lines = 0;\\n  let lastLine = 0;\\n\\n  for (let i = 0; i < s.length; i++) {\\n    let wid = widths[s[i].charCodeAt(0) - 97];\\n\\n    if (lastLine + wid <= 100) {\\n      lastLine += wid;\\n    } else if (lastLine + wid > 100) {\\n      lastLine = wid;\\n      lines++;\\n    }\\n\\n    if (lastLine === 100 && i !== s.length - 1) {\\n      lines++;\\n      lastLine = 0;\\n    }\\n  }\\n  if (lastLine <= 100) lines++;\\n  return [lines, lastLine];\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1840437,
                "title": "simple-c-solution-beats-100",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int countLine = 1;\\n        int countPixel = 0;\\n        int lastCount = 0;\\n        \\n        for(auto i:s) {\\n            if(countPixel+widths[i-\\'a\\'] <=100) {\\n                countPixel+= widths[i-\\'a\\'];\\n            } else {\\n                countPixel = widths[i-\\'a\\'];\\n                countLine++;\\n            }\\n            lastCount = countPixel;\\n        }\\n        \\n        return vector<int>({countLine, countPixel});\\n    }\\n};\\n```\\n\\nIf you like it do upvote.",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int countLine = 1;\\n        int countPixel = 0;\\n        int lastCount = 0;\\n        \\n        for(auto i:s) {\\n            if(countPixel+widths[i-\\'a\\'] <=100) {\\n                countPixel+= widths[i-\\'a\\'];\\n            } else {\\n                countPixel = widths[i-\\'a\\'];\\n                countLine++;\\n            }\\n            lastCount = countPixel;\\n        }\\n        \\n        return vector<int>({countLine, countPixel});\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1761065,
                "title": "simple-c-solution-0ms-100-less-space",
                "content": "Please upvote if you like the code. It is always a great motivation to write more :)\\n\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) \\n    {\\n        int line = 1, currentLine = 0;\\n        \\n        for(int i=0; i<s.length(); i++)\\n        {\\n            if(currentLine + widths[s[i]-\\'a\\'] > 100)\\n            {\\n                line++;\\n                currentLine = widths[s[i]-\\'a\\'];\\n            }\\n            else\\n                currentLine += widths[s[i]-\\'a\\'];\\n        }\\n        \\n        vector<int> res;\\n        \\n        res.push_back(line);\\n        res.push_back(currentLine);\\n        \\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) \\n    {\\n        int line = 1, currentLine = 0;\\n        \\n        for(int i=0; i<s.length(); i++)\\n        {\\n            if(currentLine + widths[s[i]-\\'a\\'] > 100)\\n            {\\n                line++;\\n                currentLine = widths[s[i]-\\'a\\'];\\n            }\\n            else\\n                currentLine += widths[s[i]-\\'a\\'];\\n        }\\n        \\n        vector<int> res;\\n        \\n        res.push_back(line);\\n        res.push_back(currentLine);\\n        \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1723043,
                "title": "python-solution-with-explanation",
                "content": "```\\n######################################################\\n\\n#   Runtime: 24ms   -   97.63%\\n#   Memory: 13.8MB  -   99.57%\\n\\n######################################################\\n\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        # lines[0] will store how many lines are there\\n        # lines[1] will store pixels valus of last line\\n        lines = [0, 0]\\n        # Stores pixel value of each line\\n        pixels = 0\\n        \\n        for char in s:\\n            # If adding char to current line exceeds the max pixel length which\\n            # is 100, we go to next line, so we increase lines[0] by 1\\n            # In next line we write the current char, so pixels will be \\n            # reinitialized with the pixel width of cuurent char\\n            if widths[ord(char) - 97] + pixels > 100:\\n                lines[0] += 1\\n                pixels = widths[ord(char) - 97]\\n            # Else, we add current char to current line and increase the pixels\\n            # to pixels + width of current char\\n            else:\\n                pixels += widths[ord(char) - 97]\\n        # After loop ends we haven\\'t added last line. So we increase lines[0] by\\n        # 1 and pixels will have pixel value of last line. So we store it in \\n        # lines[1]\\n        lines[0] += 1\\n        lines[1] = pixels\\n        return lines\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n######################################################\\n\\n#   Runtime: 24ms   -   97.63%\\n#   Memory: 13.8MB  -   99.57%\\n\\n######################################################\\n\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        # lines[0] will store how many lines are there\\n        # lines[1] will store pixels valus of last line\\n        lines = [0, 0]\\n        # Stores pixel value of each line\\n        pixels = 0\\n        \\n        for char in s:\\n            # If adding char to current line exceeds the max pixel length which\\n            # is 100, we go to next line, so we increase lines[0] by 1\\n            # In next line we write the current char, so pixels will be \\n            # reinitialized with the pixel width of cuurent char\\n            if widths[ord(char) - 97] + pixels > 100:\\n                lines[0] += 1\\n                pixels = widths[ord(char) - 97]\\n            # Else, we add current char to current line and increase the pixels\\n            # to pixels + width of current char\\n            else:\\n                pixels += widths[ord(char) - 97]\\n        # After loop ends we haven\\'t added last line. So we increase lines[0] by\\n        # 1 and pixels will have pixel value of last line. So we store it in \\n        # lines[1]\\n        lines[0] += 1\\n        lines[1] = pixels\\n        return lines\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1597740,
                "title": "rust-solution",
                "content": "```\\nimpl Solution {\\n    pub fn number_of_lines(widths: Vec<i32>, s: String) -> Vec<i32> {\\n        let (mut num_lines, mut last_line) = (0, 0);\\n        for width in s.as_bytes().iter().map(|b| widths[(*b - b\\'a\\') as usize]) {\\n            last_line += width;\\n            if last_line > 100 {\\n                last_line = width;\\n                num_lines += 1;\\n            }\\n        }\\n        vec![num_lines + 1, last_line]\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn number_of_lines(widths: Vec<i32>, s: String) -> Vec<i32> {\\n        let (mut num_lines, mut last_line) = (0, 0);\\n        for width in s.as_bytes().iter().map(|b| widths[(*b - b\\'a\\') as usize]) {\\n            last_line += width;\\n            if last_line > 100 {\\n                last_line = width;\\n                num_lines += 1;\\n            }\\n        }\\n        vec![num_lines + 1, last_line]\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1586834,
                "title": "java-easy-solution-100-faster",
                "content": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int line=0;\\n        int pix=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            int a=s.charAt(i)-97;\\n            pix=pix+widths[a];\\n            if(pix==100)\\n            {\\n                line++;\\n                if(i!=s.length()-1)\\n                {\\n                    pix=0;\\n                }\\n            }\\n            else if(pix>100)\\n            {\\n                i--;\\n                line++;\\n                pix=0;\\n            }\\n        }\\n        if(pix>0 && pix!=100)\\n        {\\n            line++;\\n        }\\n        int[] result=new int[2];\\n        result[0]=line;\\n        result[1]=pix;\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int line=0;\\n        int pix=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            int a=s.charAt(i)-97;\\n            pix=pix+widths[a];\\n            if(pix==100)\\n            {\\n                line++;\\n                if(i!=s.length()-1)\\n                {\\n                    pix=0;\\n                }\\n            }\\n            else if(pix>100)\\n            {\\n                i--;\\n                line++;\\n                pix=0;\\n            }\\n        }\\n        if(pix>0 && pix!=100)\\n        {\\n            line++;\\n        }\\n        int[] result=new int[2];\\n        result[0]=line;\\n        result[1]=pix;\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1584954,
                "title": "python-easy-solution",
                "content": "Here we start from x=1 since it represents first line .\\n```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        l=[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\\n        \\n        x=1\\n        s1=0\\n        for i in s:\\n            a=l.index(i)\\n            if(s1+widths[a]>100):\\n                s1=widths[a]\\n                x+=1\\n            else:\\n                s1=s1+widths[a]\\n        return([x,s1])\\n```\\nIf u understood the code then plz...UPVOTE",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        l=[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\\n        \\n        x=1\\n        s1=0\\n        for i in s:\\n            a=l.index(i)\\n            if(s1+widths[a]>100):\\n                s1=widths[a]\\n                x+=1\\n            else:\\n                s1=s1+widths[a]\\n        return([x,s1])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1462559,
                "title": "javascript-solution-easy",
                "content": "\\nvar numberOfLines = function(arr, s) {\\n\\n    var res =  [];\\n    \\n    let line = 1;\\n    let last = 0;\\n    \\n    for(let i = 0; i < s.length; i++){\\n        const temp = arr[s.charCodeAt(i) - \\'a\\'.charCodeAt(0)];\\n        if(last + temp > 100){\\n            line++;\\n            last = 0;\\n            last = temp;\\n        }else{\\n            last += temp;\\n        }\\n    }\\n    \\n    res.push(line);   \\n    res.push(last);\\n\\n    return res;\\n};",
                "solutionTags": [],
                "code": "\\nvar numberOfLines = function(arr, s) {\\n\\n    var res =  [];\\n    \\n    let line = 1;\\n    let last = 0;\\n    \\n    for(let i = 0; i < s.length; i++){\\n        const temp = arr[s.charCodeAt(i) - \\'a\\'.charCodeAt(0)];\\n        if(last + temp > 100){\\n            line++;\\n            last = 0;\\n            last = temp;\\n        }else{\\n            last += temp;\\n        }\\n    }\\n    \\n    res.push(line);   \\n    res.push(last);\\n\\n    return res;\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 1462515,
                "title": "java-1ms-easy-code",
                "content": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int[] ans = new int[2];\\n        int line = 0;\\n        int countline = 1;\\n        for(int i=0; i<s.length(); i++){\\n            int ch = s.charAt(i);\\n            int f = widths[ch - \\'a\\'];\\n            //System.out.println(ch);\\n            if((line+f)<=100){\\n                line += f;\\n            }\\n            else{\\n                countline++;\\n                line = 0;\\n                i--;\\n            }\\n        }\\n        \\n        ans[0] = countline;\\n        ans[1] = line;\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int[] ans = new int[2];\\n        int line = 0;\\n        int countline = 1;\\n        for(int i=0; i<s.length(); i++){\\n            int ch = s.charAt(i);\\n            int f = widths[ch - \\'a\\'];\\n            //System.out.println(ch);\\n            if((line+f)<=100){\\n                line += f;\\n            }\\n            else{\\n                countline++;\\n                line = 0;\\n                i--;\\n            }\\n        }\\n        \\n        ans[0] = countline;\\n        ans[1] = line;\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1393626,
                "title": "java-solution-0ms",
                "content": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int count=0;\\n        int sum=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            int curr=(int)s.charAt(i)-97;\\n            int val=widths[curr];\\n            if(sum+val>100)\\n            {\\n                count++;\\n                sum=val;\\n            }\\n            else\\n            {\\n                sum=sum+val;\\n            }\\n        }\\n        int ret[]={count+1,sum};\\n        return ret;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int count=0;\\n        int sum=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            int curr=(int)s.charAt(i)-97;\\n            int val=widths[curr];\\n            if(sum+val>100)\\n            {\\n                count++;\\n                sum=val;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1385970,
                "title": "python3-fast-using-ord",
                "content": "\\n\\n```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        lines, tmp = 1, 0\\n        for c in s:\\n            if tmp + widths[ord(c)-97] > 100:\\n                lines += 1\\n                tmp = 0\\n                \\n            tmp += widths[ord(c)-97]\\n        \\n        return [lines, tmp]",
                "solutionTags": [],
                "code": "\\n\\n```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        lines, tmp = 1, 0\\n        for c in s:\\n            if tmp + widths[ord(c)-97] > 100:\\n                lines += 1\\n                tmp = 0\\n                \\n            tmp += widths[ord(c)-97]\\n        \\n        return [lines, tmp]",
                "codeTag": "Java"
            },
            {
                "id": 1372343,
                "title": "py-solution-easy-to-understand",
                "content": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        lines=0\\n        width=0\\n        for i in s:\\n            if(width+widths[ord(i)-97]<=100):\\n                width+=widths[ord(i)-97]\\n            else:\\n                width=0\\n                width+=widths[ord(i)-97]\\n                lines+=1\\n        return [lines,width] if width==0 else [lines+1,width]\\n        \\n            \\n        \\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        lines=0\\n        width=0\\n        for i in s:\\n            if(width+widths[ord(i)-97]<=100):\\n                width+=widths[ord(i)-97]\\n            else:\\n                width=0\\n                width+=widths[ord(i)-97]\\n                lines+=1\\n        return [lines,width] if width==0 else [lines+1,width]\\n        \\n            \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1338444,
                "title": "c-solution-faster-than-90",
                "content": "```\\npublic class Solution {\\n    public int[] NumberOfLines(int[] widths, string s) {\\n        var line = 0;\\n        var last = 0;\\n        var c = 0;\\n        foreach(var n in s.Select(x=>widths[(int)x-(int)\\'a\\'])){\\n            if(c+n>100){\\n                last = c;\\n                line++;\\n                c = n;\\n            }else{\\n                c += n;\\n            }\\n        }\\n        if(c>0) line++;\\n        last = c;\\n        return new int[]{line, last};\\n        \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int[] NumberOfLines(int[] widths, string s) {\\n        var line = 0;\\n        var last = 0;\\n        var c = 0;\\n        foreach(var n in s.Select(x=>widths[(int)x-(int)\\'a\\'])){\\n            if(c+n>100){\\n                last = c;\\n                line++;\\n                c = n;\\n            }else{\\n                c += n;\\n            }\\n        }\\n        if(c>0) line++;\\n        last = c;\\n        return new int[]{line, last};\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1329517,
                "title": "c-solution-faster-than-100",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int length=0,line=1;\\n        for(int i=0; i<s.length(); i++){\\n\\t\\t\\n\\t\\t\\t// If adding the length of the next letter results in a line width greater than 100, move to new line and \\n\\t\\t\\t// reinitialize the value of length to the length of that letter\\n            if(length+widths[s[i]-\\'a\\']>100){\\n                length=widths[s[i]-\\'a\\'];\\n                line++;\\n            }   \\n\\t\\t\\t\\n\\t\\t\\t// If that is ot the case, simply add the length of that letter and move ahead\\n            else\\n                length+=widths[s[i]-\\'a\\'];\\n        }\\n        return {line,length};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int length=0,line=1;\\n        for(int i=0; i<s.length(); i++){\\n\\t\\t\\n\\t\\t\\t// If adding the length of the next letter results in a line width greater than 100, move to new line and \\n\\t\\t\\t// reinitialize the value of length to the length of that letter\\n            if(length+widths[s[i]-\\'a\\']>100){\\n                length=widths[s[i]-\\'a\\'];\\n                line++;\\n            }   \\n\\t\\t\\t\\n\\t\\t\\t// If that is ot the case, simply add the length of that letter and move ahead\\n            else\\n                length+=widths[s[i]-\\'a\\'];\\n        }\\n        return {line,length};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1328427,
                "title": "python3-olution",
                "content": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        su, c = 0, 1\\n        for i in s:\\n            x = widths[ord(i)-97]\\n            su += x\\n            if su > 100:\\n                su = x\\n                c += 1\\n        return [c,su]\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        su, c = 0, 1\\n        for i in s:\\n            x = widths[ord(i)-97]\\n            su += x\\n            if su > 100:\\n                su = x\\n                c += 1\\n        return [c,su]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1327430,
                "title": "python3-another-thinking-by-dict",
                "content": "\\n\\n        alpha = \"abcdefghijklmnopqrstuvwxyz\"\\n        mapping = dict(zip(alpha,widths))\\n        \\n        sum_score = 0\\n        count = 1\\n        for i in range(len(s)):\\n            if (sum_score+mapping[s[i]] <= 100):\\n                sum_score += mapping[s[i]]\\n            else :\\n                sum_score = mapping[s[i]]\\n                count += 1\\n                \\n        return [count,sum_score]",
                "solutionTags": [
                    "Python3"
                ],
                "code": "\\n\\n        alpha = \"abcdefghijklmnopqrstuvwxyz\"\\n        mapping = dict(zip(alpha,widths))\\n        \\n        sum_score = 0\\n        count = 1\\n        for i in range(len(s)):\\n            if (sum_score+mapping[s[i]] <= 100):\\n                sum_score += mapping[s[i]]\\n            else :\\n                sum_score = mapping[s[i]]\\n                count += 1\\n                \\n        return [count,sum_score]",
                "codeTag": "Unknown"
            },
            {
                "id": 1280955,
                "title": "c-solution-faster-than-100-solutions",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        vector<int> output;\\n        \\n        int i,sum=0,count=1;\\n        int len=s.length();\\n        \\n        for(i=0;i<len;i++){            \\n            // index=s[i]-97;\\n            sum=sum+widths[s[i]-97];\\n            if(sum>100){\\n                count++;\\n                sum=0;\\n                i--;\\n            }\\n            \\n        }\\n        \\n        \\n        output.push_back(count);\\n        output.push_back(sum);\\n        \\n        return output;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        vector<int> output;\\n        \\n        int i,sum=0,count=1;\\n        int len=s.length();\\n        \\n        for(i=0;i<len;i++){            \\n            // index=s[i]-97;\\n            sum=sum+widths[s[i]-97];\\n            if(sum>100){\\n                count++;\\n                sum=0;\\n                i--;\\n            }\\n            \\n        }\\n        \\n        \\n        output.push_back(count);\\n        output.push_back(sum);\\n        \\n        return output;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1274202,
                "title": "rust-0ms",
                "content": "```\\nimpl Solution {\\n    pub fn number_of_lines(widths: Vec<i32>, s: String) -> Vec<i32> {\\n      let s = s.bytes().map(|x| (x - 97) as usize).collect::<Vec<usize>>();\\n      let (mut lines, mut width) = (1,0);\\n      for index in s {\\n          let w = widths[index];\\n          width+=w;\\n          if width > 100 {\\n              lines+=1;\\n              width=w;\\n          }\\n      }\\n      vec![lines,width as i32]  \\n    }\\n}\\n\\t\\t\\t```",
                "solutionTags": [],
                "code": "```\\nimpl Solution {\\n    pub fn number_of_lines(widths: Vec<i32>, s: String) -> Vec<i32> {\\n      let s = s.bytes().map(|x| (x - 97) as usize).collect::<Vec<usize>>();\\n      let (mut lines, mut width) = (1,0);\\n      for index in s {\\n          let w = widths[index];\\n          width+=w;\\n          if width > 100 {\\n              lines+=1;\\n              width=w;\\n          }\\n      }\\n      vec![lines,width as i32]  \\n    }\\n}\\n\\t\\t\\t```",
                "codeTag": "Unknown"
            },
            {
                "id": 1215203,
                "title": "python-3-89-simple-solution",
                "content": "\\t\\n\\tclass Solution:\\n\\t\\tdef numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n\\t\\t\\tdict1 = dict(zip(string.ascii_lowercase, widths))\\n\\t\\t\\tline, pixel = 1, 0\\n\\t\\t\\tfor x in s:\\n\\t\\t\\t\\tif pixel + dict1[x] <= 100:\\n\\t\\t\\t\\t\\tpixel += dict1[x] \\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tline += 1\\n\\t\\t\\t\\t\\tpixel = 0\\n\\t\\t\\t\\t\\tpixel += dict1[x]  \\n\\t\\t\\treturn [line, pixel]\\n",
                "solutionTags": [],
                "code": "\\t\\n\\tclass Solution:\\n\\t\\tdef numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n\\t\\t\\tdict1 = dict(zip(string.ascii_lowercase, widths))\\n\\t\\t\\tline, pixel = 1, 0\\n\\t\\t\\tfor x in s:\\n\\t\\t\\t\\tif pixel + dict1[x] <= 100:\\n\\t\\t\\t\\t\\tpixel += dict1[x] \\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tline += 1\\n\\t\\t\\t\\t\\tpixel = 0\\n\\t\\t\\t\\t\\tpixel += dict1[x]  \\n\\t\\t\\treturn [line, pixel]\\n",
                "codeTag": "Java"
            },
            {
                "id": 1066236,
                "title": "python3-simple-solution",
                "content": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        count, sum = 1, 0\\n        for i in s:\\n            a = widths[ord(i) - 97]\\n            sum += a\\n            if sum > 100:\\n                count += 1\\n                sum = a\\n        return [count, sum]\\n```\\n**If you like the solution, please vote for this.**",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        count, sum = 1, 0\\n        for i in s:\\n            a = widths[ord(i) - 97]\\n            sum += a\\n            if sum > 100:\\n                count += 1\\n                sum = a\\n        return [count, sum]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1060826,
                "title": "java-ez-pz",
                "content": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int[] ans = new int[2];\\n        int lines=1;\\n        int value=0;\\n        int hun=0;\\n        for(char ch : s.toCharArray()){\\n            value = widths[ch - \\'a\\'];\\n            if(hun+value <=100){\\n                hun+=value;\\n            }\\n            else{\\n                lines++;\\n                hun = value;\\n            }\\n        }\\n        ans[0]= lines;\\n        ans[1]= hun;\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int[] ans = new int[2];\\n        int lines=1;\\n        int value=0;\\n        int hun=0;\\n        for(char ch : s.toCharArray()){\\n            value = widths[ch - \\'a\\'];\\n            if(hun+value <=100){\\n                hun+=value;\\n            }\\n            else{\\n                lines++;\\n                hun = value;\\n            }\\n        }\\n        ans[0]= lines;\\n        ans[1]= hun;\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1036378,
                "title": "c-beats-100-well-commented-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int line=1, sum=0; //Prepare the return variables\\n        for(char c:s) //Scan through each char of the string\\n        {\\n            sum+=widths[c-\\'a\\']; //Add the corresponding pixel width to the sum\\n            if(sum>100) sum=widths[c-\\'a\\'], line++;  //If sum is greater than 100, update the sum and line   \\n        }\\n        return {line, sum};\\n    }\\n};",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int line=1, sum=0; //Prepare the return variables\\n        for(char c:s) //Scan through each char of the string\\n        {\\n            sum+=widths[c-\\'a\\']; //Add the corresponding pixel width to the sum\\n            if(sum>100) sum=widths[c-\\'a\\'], line++;  //If sum is greater than 100, update the sum and line   \\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1029632,
                "title": "java-easy-solution-100-faster-clean-code",
                "content": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        \\n        int lines=0;\\n        int pixels=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            pixels+=widths[s.charAt(i)-97];\\n            if(pixels>100)\\n            {\\n                lines++;\\n                i--;\\n                pixels=0;\\n            }\\n        }\\n        return new int[]{lines+1,pixels};\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        \\n        int lines=0;\\n        int pixels=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            pixels+=widths[s.charAt(i)-97];\\n            if(pixels>100)\\n            {\\n                lines++;\\n                i--;\\n                pixels=0;\\n            }\\n        }\\n        return new int[]{lines+1,pixels};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1018264,
                "title": "python-solution",
                "content": "\\tresult = [1, 0]\\n\\tfor c in s:\\n\\t\\tw = widths[ord(c) - ord(\\'a\\')]\\n\\t\\tif result[1] + w <= 100:\\n\\t\\t\\tresult[1] += w\\n\\t\\telse:\\n\\t\\t\\tresult[0] += 1\\n\\t\\t\\tresult[1] = w\\n\\treturn result",
                "solutionTags": [],
                "code": "\\tresult = [1, 0]\\n\\tfor c in s:\\n\\t\\tw = widths[ord(c) - ord(\\'a\\')]\\n\\t\\tif result[1] + w <= 100:\\n\\t\\t\\tresult[1] += w\\n\\t\\telse:\\n\\t\\t\\tresult[0] += 1\\n\\t\\t\\tresult[1] = w\\n\\treturn result",
                "codeTag": "Unknown"
            },
            {
                "id": 876377,
                "title": "python-beats-95",
                "content": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], S: str):\\n        lines = 1\\n        curline = 0\\n        \\n        for i in S:\\n            x = widths[ord(i)-ord(\\'a\\')]\\n            if curline+x <= 100:\\n                curline += x\\n            else:\\n                lines += 1\\n                curline = x\\n                \\n        return [lines, curline]\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], S: str):\\n        lines = 1\\n        curline = 0\\n        \\n        for i in S:\\n            x = widths[ord(i)-ord(\\'a\\')]\\n            if curline+x <= 100:\\n                curline += x\\n            else:\\n                lines += 1\\n                curline = x\\n                \\n        return [lines, curline]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 868393,
                "title": "java-100",
                "content": "```\\nclass Solution {\\n    private static final int MAX_UNITS_PER_LINE = 100;\\n    \\n    public int[] numberOfLines(int[] widths, String S) {\\n        int lineCount = 1;\\n        int lastLineUnitCount = 0;\\n        \\n        for(int i = 0; i < S.length(); i++) {\\n            int val = widths[S.charAt(i) - \\'a\\'];\\n            lastLineUnitCount += val;\\n            if(lastLineUnitCount > MAX_UNITS_PER_LINE) {\\n                lineCount++;\\n                lastLineUnitCount = val;\\n            }\\n        }\\n        \\n        return new int[] {lineCount, lastLineUnitCount};\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    private static final int MAX_UNITS_PER_LINE = 100;\\n    \\n    public int[] numberOfLines(int[] widths, String S) {\\n        int lineCount = 1;\\n        int lastLineUnitCount = 0;\\n        \\n        for(int i = 0; i < S.length(); i++) {\\n            int val = widths[S.charAt(i) - \\'a\\'];\\n            lastLineUnitCount += val;\\n            if(lastLineUnitCount > MAX_UNITS_PER_LINE) {\\n                lineCount++;\\n                lastLineUnitCount = val;\\n            }\\n        }\\n        \\n        return new int[] {lineCount, lastLineUnitCount};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 843801,
                "title": "c-python-solutions",
                "content": "C++ solution,\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string S) {\\n        int l = 1, w = 0;\\n\\n        for (char s : S) {\\n            int t = widths[s - \\'a\\'];\\n            \\n            if (t <= 100 - w)\\n                w += t;\\n            else {\\n                ++l;\\n                w = t;\\n            }\\n        }\\n\\n        return {l,w};\\n    }\\n};\\n```\\n\\nPython solution,\\n```\\nclass Solution:\\n    def numberOfLines(self, widths, S):\\n        l, w = 1, 0\\n\\n        for s in S:\\n            t = widths[ord(s) - ord(\\'a\\')]\\n            \\n            if t <= 100 - w:\\n                w += t\\n            else:\\n                l += 1\\n                w = t\\n\\n        return [l,w]\\n```\\n",
                "solutionTags": [
                    "Python",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string S) {\\n        int l = 1, w = 0;\\n\\n        for (char s : S) {\\n            int t = widths[s - \\'a\\'];\\n            \\n            if (t <= 100 - w)\\n                w += t;\\n            else {\\n                ++l;\\n                w = t;\\n            }\\n        }\\n\\n        return {l,w};\\n    }\\n};\\n```\n```\\nclass Solution:\\n    def numberOfLines(self, widths, S):\\n        l, w = 1, 0\\n\\n        for s in S:\\n            t = widths[ord(s) - ord(\\'a\\')]\\n            \\n            if t <= 100 - w:\\n                w += t\\n            else:\\n                l += 1\\n                w = t\\n\\n        return [l,w]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 599733,
                "title": "java-solution-faster-than-100",
                "content": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String S) {\\n        \\n        int lines=1,lastLine=0,temp=0;\\n        for(int i=0;i<S.length();i++)\\n        {\\n            int width=widths[S.charAt(i)-\\'a\\'];\\n            temp+=width;\\n            if(temp<100)\\n            {\\n                lastLine=temp;\\n            }\\n            else if(temp==100)\\n            {\\n                lines++;\\n                temp=0;\\n                lastLine=0;\\n            }\\n            else\\n            {\\n                lines++;\\n                temp=0;\\n                temp+=width;\\n                lastLine=temp;\\n            }\\n        }\\n        \\n        int[] out=new int[2];\\n        out[0]=lines;out[1]=lastLine;\\n     \\n    return out;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "class Solution {\\n    public int[] numberOfLines(int[] widths, String S) {\\n        \\n        int lines=1,lastLine=0,temp=0;\\n        for(int i=0;i<S.length();i++)\\n        {\\n            int width=widths[S.charAt(i)-\\'a\\'];\\n            temp+=width;\\n            if(temp<100)\\n            {\\n                lastLine=temp;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 549219,
                "title": "rust-functional-solution",
                "content": "```\\nimpl Solution {\\n    pub fn number_of_lines(widths: Vec<i32>, s: String) -> Vec<i32> {\\n        if s.len() == 0 {\\n            return vec![0, 0];\\n        }\\n        \\n        let (line, acc) = s\\n            .chars()\\n            .map(|chr| alpha_index(chr))\\n            .map(|chr_ind| widths[chr_ind])\\n            .fold((1, 0), |(line, acc), cur| {\\n                if acc + cur > 100 {\\n                    (line + 1, cur)\\n                } else {\\n                    (line, acc + cur)\\n                }\\n            });\\n\\n        vec![line, acc]\\n    }\\n}\\n\\nfn alpha_index(chr: char) -> usize {\\n    if chr >= \\'a\\' && chr <= \\'z\\' {\\n        (chr as usize) - (\\'a\\' as usize)\\n    } else {\\n        panic!(\"unsupported character\")\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nimpl Solution {\\n    pub fn number_of_lines(widths: Vec<i32>, s: String) -> Vec<i32> {\\n        if s.len() == 0 {\\n            return vec![0, 0];\\n        }\\n        \\n        let (line, acc) = s\\n            .chars()\\n            .map(|chr| alpha_index(chr))\\n            .map(|chr_ind| widths[chr_ind])\\n            .fold((1, 0), |(line, acc), cur| {\\n                if acc + cur > 100 {\\n                    (line + 1, cur)\\n                } else {\\n                    (line, acc + cur)\\n                }\\n            });\\n\\n        vec![line, acc]\\n    }\\n}\\n\\nfn alpha_index(chr: char) -> usize {\\n    if chr >= \\'a\\' && chr <= \\'z\\' {\\n        (chr as usize) - (\\'a\\' as usize)\\n    } else {\\n        panic!(\"unsupported character\")\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 541927,
                "title": "javascript-solution-with-explanation",
                "content": "Totally forgot charCodeAt was a thing, so here\\'s how I did it:\\n```\\nvar numberOfLines = function(widths, S) {\\n\\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\".split(\"\")\\n    let lines = 1;\\n    \\n    let lineWidth = 0;\\n    S.split(\"\").forEach(char => {\\n        let charWidth = widths[alphabet.indexOf(char)]\\n        \\n        if(lineWidth + charWidth <= 100){\\n            lineWidth += charWidth\\n        } else {\\n            lines++\\n            lineWidth = charWidth\\n        }\\n    })\\n    \\n    return [lines,lineWidth]\\n};\\n```\\n\\nUsing the alphabet array, we get an array of letters. The indexes of these letters match up with those in widths. To access that index in widths, we just get the index of what the letter is in alphabet. For example, F is the fifth index of alphabet (index 4). To get its width, we would do widths[4] to see its width.\\n\\nFrom there we have lineWidth, which starts off as zero. For every character in string, we get its width via the method above and see if adding this width to lineWidth would exceed 100. If it doesn\\'t, we just add the character\\'s width to lineWidth. This means lineWidth will successively grow larger until it comes across a character whose width would cause it to exceed 100. \\n\\nWhen that happens, we add 1 to lines (keeps track of how many lines needed), and reset lineWidth to the width of the current character since we are starting a new line. When we\\'re done going through all the characters, lineWidth will be some amount. Be sure to return it along with the total number of lines.\\n",
                "solutionTags": [],
                "code": "```\\nvar numberOfLines = function(widths, S) {\\n\\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\".split(\"\")\\n    let lines = 1;\\n    \\n    let lineWidth = 0;\\n    S.split(\"\").forEach(char => {\\n        let charWidth = widths[alphabet.indexOf(char)]\\n        \\n        if(lineWidth + charWidth <= 100){\\n            lineWidth += charWidth\\n        } else {\\n            lines++\\n            lineWidth = charWidth\\n        }\\n    })\\n    \\n    return [lines,lineWidth]\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 523351,
                "title": "straight-forward-java-solution",
                "content": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String S) {\\n        int countLines = 1, countWidth = 0;\\n        if (S == \"\") {\\n            return new int[]{0, 0};\\n        }\\n        char[] chars = S.toCharArray();\\n        for (int i = 0; i < chars.length; i++) {\\n            int w = widths[chars[i]-\\'a\\'];\\n            countWidth += w;\\n            if (countWidth > 100) {\\n                countWidth = w;\\n                countLines++;\\n            }\\n        }\\n        return new int[]{countLines, countWidth};\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String S) {\\n        int countLines = 1, countWidth = 0;\\n        if (S == \"\") {\\n            return new int[]{0, 0};\\n        }\\n        char[] chars = S.toCharArray();\\n        for (int i = 0; i < chars.length; i++) {\\n            int w = widths[chars[i]-\\'a\\'];\\n            countWidth += w;\\n            if (countWidth > 100) {\\n                countWidth = w;\\n                countLines++;\\n            }\\n        }\\n        return new int[]{countLines, countWidth};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 460478,
                "title": "100-javascript-solution",
                "content": "```\\nvar numberOfLines = function (widths, S) {\\n  let _S = S.split(\"\");\\n  let sum = 0, lines = 0;\\n  for (let i = 0; i < _S.length; i++){\\n    sum += widths[_S[i].charCodeAt(0) - 97];\\n    if (sum === 100) {\\n      sum = 0;\\n      lines++;\\n    } else if (sum > 100) {\\n      sum = 0;\\n      lines++;\\n      i--;\\n    }\\n  }\\n  if (sum === 100) {\\n    return [lines, sum]\\n  }\\n  return [lines+1, sum];\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar numberOfLines = function (widths, S) {\\n  let _S = S.split(\"\");\\n  let sum = 0, lines = 0;\\n  for (let i = 0; i < _S.length; i++){\\n    sum += widths[_S[i].charCodeAt(0) - 97];\\n    if (sum === 100) {\\n      sum = 0;\\n      lines++;\\n    } else if (sum > 100) {\\n      sum = 0;\\n      lines++;\\n      i--;\\n    }\\n  }\\n  if (sum === 100) {\\n    return [lines, sum]\\n  }\\n  return [lines+1, sum];\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 434774,
                "title": "java-simple-solution-faster-than-100",
                "content": "```\\npublic int[] numberOfLines(int[] widths, String S) {\\n\\tint lineWidth = 0, lines = 1;\\n\\tfor(char c:S.toCharArray()) {\\n\\t\\tint letterWidth = widths[c-\\'a\\'];\\n\\t\\tif(lineWidth + letterWidth <= 100) {\\n\\t\\t\\tlineWidth += letterWidth;\\n\\t\\t} else {\\n\\t\\t\\tlineWidth = letterWidth;\\n\\t\\t\\tlines++;\\n\\t\\t}\\n\\t}\\n\\tint sol[] = {lines, lineWidth};\\n\\treturn sol;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic int[] numberOfLines(int[] widths, String S) {\\n\\tint lineWidth = 0, lines = 1;\\n\\tfor(char c:S.toCharArray()) {\\n\\t\\tint letterWidth = widths[c-\\'a\\'];\\n\\t\\tif(lineWidth + letterWidth <= 100) {\\n\\t\\t\\tlineWidth += letterWidth;\\n\\t\\t} else {\\n\\t\\t\\tlineWidth = letterWidth;\\n\\t\\t\\tlines++;\\n\\t\\t}\\n\\t}\\n\\tint sol[] = {lines, lineWidth};\\n\\treturn sol;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 396131,
                "title": "easy-python-using-dict-or-ord",
                "content": "Please note the single comment with the ord() function that could replace the alphabet dictionary. ord(\\'a\\') is 97.\\n```\\n        alphabet = {\\'a\\': 0, \\'b\\': 1, \\'c\\': 2, \\'d\\': 3, \\'e\\': 4, \\'f\\': 5, \\'g\\': 6, \\'h\\': 7, \\'i\\': 8, \\'j\\': 9, \\'k\\': 10, \\'l\\': 11, \\'m\\': 12, \\'n\\': 13, \\'o\\': 14, \\'p\\': 15, \\'q\\': 16, \\'r\\': 17, \\'s\\': 18, \\'t\\': 19, \\'u\\': 20, \\'v\\': 21, \\'w\\': 22, \\'x\\': 23, \\'y\\': 24, \\'z\\': 25}\\n        count, total = 1, 0\\n        for char in S:\\n            value = widths[alphabet[char]]\\n            # could also use value = widths[ord(char)-97]\\n            if total + value <= 100:\\n                total += value\\n            else:\\n                count += 1\\n                total = value\\n        return [count, total]\\n```",
                "solutionTags": [],
                "code": "```\\n        alphabet = {\\'a\\': 0, \\'b\\': 1, \\'c\\': 2, \\'d\\': 3, \\'e\\': 4, \\'f\\': 5, \\'g\\': 6, \\'h\\': 7, \\'i\\': 8, \\'j\\': 9, \\'k\\': 10, \\'l\\': 11, \\'m\\': 12, \\'n\\': 13, \\'o\\': 14, \\'p\\': 15, \\'q\\': 16, \\'r\\': 17, \\'s\\': 18, \\'t\\': 19, \\'u\\': 20, \\'v\\': 21, \\'w\\': 22, \\'x\\': 23, \\'y\\': 24, \\'z\\': 25}\\n        count, total = 1, 0\\n        for char in S:\\n            value = widths[alphabet[char]]\\n            # could also use value = widths[ord(char)-97]\\n            if total + value <= 100:\\n                total += value\\n            else:\\n                count += 1\\n                total = value\\n        return [count, total]\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 322718,
                "title": "c-faster-than-100",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string S) {\\n        int lines =0;\\n        int last_line_size=0;\\n        static const int LEN = 100;\\n       for(int i=0,n=S.size();i<n;++i)\\n       {\\n           char c = S[i];\\n           int len = widths[c-\\'a\\'];\\n\\t\\t   //write on current line \\n           if(LEN-last_line_size >= len)\\n           {\\n              last_line_size+= len;\\n           }else  //move to next line\\n           {\\n               ++lines;\\n               last_line_size= len;\\n           }\\n       }\\n        return {lines+1,last_line_size};\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string S) {\\n        int lines =0;\\n        int last_line_size=0;\\n        static const int LEN = 100;\\n       for(int i=0,n=S.size();i<n;++i)\\n       {\\n           char c = S[i];\\n           int len = widths[c-\\'a\\'];\\n\\t\\t   //write on current line \\n           if(LEN-last_line_size >= len)\\n           {\\n              last_line_size+= len;\\n           }",
                "codeTag": "Java"
            },
            {
                "id": 280849,
                "title": "easy-to-understand-python-solution-36ms-only",
                "content": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], S: str) -> List[int]:\\n        dic={}\\n        for i,j in zip(string.ascii_lowercase,widths):\\n            dic[i]=j\\n        sumd=0\\n        line=1\\n        line_dic={}\\n        for i in S:\\n            if(sumd+dic[i]>100):\\n                line_dic[line]=sumd\\n                line+=1\\n                sumd=0                \\n            sumd+=dic[i]\\n        line_dic[line]=sumd\\n        return [line,line_dic[line]]\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], S: str) -> List[int]:\\n        dic={}\\n        for i,j in zip(string.ascii_lowercase,widths):\\n            dic[i]=j\\n        sumd=0\\n        line=1\\n        line_dic={}\\n        for i in S:\\n            if(sumd+dic[i]>100):\\n                line_dic[line]=sumd\\n                line+=1\\n                sumd=0                \\n            sumd+=dic[i]\\n        line_dic[line]=sumd\\n        return [line,line_dic[line]]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 244713,
                "title": "c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string S) {\\n        int line=1,unit=0;\\n        for(auto c:S)\\n        {\\n            unit+=widths[c-\\'a\\'];\\n            if(unit>100)\\n            {\\n                unit=widths[c-\\'a\\'];\\n                line++;\\n            }\\n        }\\n        vector<int> res;\\n        res.push_back(line);\\n        res.push_back(unit);\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string S) {\\n        int line=1,unit=0;\\n        for(auto c:S)\\n        {\\n            unit+=widths[c-\\'a\\'];\\n            if(unit>100)\\n            {\\n                unit=widths[c-\\'a\\'];\\n                line++;\\n            }\\n        }\\n        vector<int> res;\\n        res.push_back(line);\\n        res.push_back(unit);\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 211157,
                "title": "c-solution",
                "content": "```\\nint *numberOfLines(int *widths, int widthsSize, char *S, int *returnSize) {\\n    int *result = malloc(sizeof(int) * (*returnSize = 2));\\n    int lines = 1, remain = 0;\\n    char *p = S;\\n    while (*p != \\'\\\\0\\') {\\n        int width = widths[*p - \\'a\\'];\\n        if (remain + width > 100) {\\n            lines++;\\n            remain = width;\\n        } else if (remain + width == 100) {\\n            lines++;\\n            remain = 0;\\n        } else {\\n            remain += width;\\n        }\\n        p++;\\n    }\\n    result[0] = lines;\\n    result[1] = remain;\\n    return result;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nint *numberOfLines(int *widths, int widthsSize, char *S, int *returnSize) {\\n    int *result = malloc(sizeof(int) * (*returnSize = 2));\\n    int lines = 1, remain = 0;\\n    char *p = S;\\n    while (*p != \\'\\\\0\\') {\\n        int width = widths[*p - \\'a\\'];\\n        if (remain + width > 100) {\\n            lines++;\\n            remain = width;\\n        } else if (remain + width == 100) {\\n            lines++;\\n            remain = 0;\\n        } else {\\n            remain += width;\\n        }\\n        p++;\\n    }\\n    result[0] = lines;\\n    result[1] = remain;\\n    return result;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 161221,
                "title": "java-4-liner-solution",
                "content": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String S) {\\n        \\n    int reqWidth = 0;      \\n        \\n    for(int i=0;i<S.length();i++){\\n        reqWidth += (reqWidth%100 + widths[S.charAt(i)-\\'a\\'])>100 ?(widths[S.charAt(i) - \\'a\\'] + (100 - reqWidth%100)):widths[S.charAt(i)- \\'a\\'];            \\n    }                 \\n        return new int[]{reqWidth/100+1,reqWidth%100};\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String S) {\\n        \\n    int reqWidth = 0;      \\n        \\n    for(int i=0;i<S.length();i++){\\n        reqWidth += (reqWidth%100 + widths[S.charAt(i)-\\'a\\'])>100 ?(widths[S.charAt(i) - \\'a\\'] + (100 - reqWidth%100)):widths[S.charAt(i)- \\'a\\'];            \\n    }                 \\n        return new int[]{reqWidth/100+1,reqWidth%100};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 160165,
                "title": "simple-swift-solution",
                "content": "```\\nclass Solution {\\n    func numberOfLines(_ widths: [Int], _ S: String) -> [Int] {\\n        var numOfLine = 1\\n        var numOfUnit = 0\\n        var sum = 0\\n\\n        for code in S.unicodeScalars {\\n            let index: Int = Int(code.value - 97)\\n            sum += widths[index]\\n            if sum > 100 { // \\u9700\\u8981\\u6362\\u884C\\n                numOfLine += 1\\n                sum = widths[index]\\n            }\\n        }\\n\\n        numOfUnit = sum\\n\\n        return [numOfLine, numOfUnit]\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    func numberOfLines(_ widths: [Int], _ S: String) -> [Int] {\\n        var numOfLine = 1\\n        var numOfUnit = 0\\n        var sum = 0\\n\\n        for code in S.unicodeScalars {\\n            let index: Int = Int(code.value - 97)\\n            sum += widths[index]\\n            if sum > 100 { // \\u9700\\u8981\\u6362\\u884C\\n                numOfLine += 1\\n                sum = widths[index]\\n            }\\n        }\\n\\n        numOfUnit = sum\\n\\n        return [numOfLine, numOfUnit]\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 158036,
                "title": "easy-java-using-character-s-ascii-values",
                "content": "```\\n    public int[] numberOfLines(int[] widths, String S) {\\n        int[] result = new int[2];\\n        int lineValue = 0;\\n        int numLines = 1;\\n        int charVal;\\n        for (int i = 0; i < S.length(); i++) {\\n            charVal = widths[S.charAt(i) - 97];\\n            lineValue += charVal;\\n            if (lineValue > 100) {\\n                lineValue = 0;\\n                numLines++;\\n                lineValue += charVal;\\n            }\\n        }\\n        result[0] = numLines;\\n        result[1] = lineValue;\\n        return result;\\n    }",
                "solutionTags": [],
                "code": "```\\n    public int[] numberOfLines(int[] widths, String S) {\\n        int[] result = new int[2];\\n        int lineValue = 0;\\n        int numLines = 1;\\n        int charVal;\\n        for (int i = 0; i < S.length(); i++) {\\n            charVal = widths[S.charAt(i) - 97];\\n            lineValue += charVal;\\n            if (lineValue > 100) {\\n                lineValue = 0;\\n                numLines++;\\n                lineValue += charVal;\\n            }\\n        }\\n        result[0] = numLines;\\n        result[1] = lineValue;\\n        return result;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 149754,
                "title": "easy-java-solution",
                "content": "```\\n\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String S) {\\n        \\n        int width=0,count=1;\\n        for(int i=0;i<S.length();i++)\\n        {\\n            width = width + widths[S.charAt(i) - \\'a\\'];\\n            if(width > 100)\\n            {\\n                count++;\\n                width=widths[S.charAt(i) - \\'a\\'];\\n            }       \\n        }\\n         return new int[] {count, width};\\n        \\n    }\\n}\\n```\\n",
                "solutionTags": [],
                "code": "```\\n\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String S) {\\n        \\n        int width=0,count=1;\\n        for(int i=0;i<S.length();i++)\\n        {\\n            width = width + widths[S.charAt(i) - \\'a\\'];\\n            if(width > 100)\\n            {\\n                count++;\\n                width=widths[S.charAt(i) - \\'a\\'];\\n            }       \\n        }\\n         return new int[] {count, width};\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 145598,
                "title": "python-code-beat-100-for-general-case",
                "content": "```\\nclass Solution(object):\\n    def numberOfLines(self, widths, S):\\n        \"\"\"\\n        :type widths: List[int]\\n        :type S: str\\n        :rtype: List[int]\\n        \"\"\"\\n        dict_letter_widths=dict(zip(list(\\'abcdefghijklmnopqrstuvwxyz\\'),widths))\\n        S_width=[dict_letter_widths[s] for s in S]\\n        rows=1\\n        start=0\\n        for idx, each_w in enumerate(S_width):\\n            if sum(S_width[start:idx+1])>100:\\n                rows+=1\\n                start=idx\\n        \\n        last_row=sum(S_width[start:])\\n        return [rows,last_row] \\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def numberOfLines(self, widths, S):\\n        \"\"\"\\n        :type widths: List[int]\\n        :type S: str\\n        :rtype: List[int]\\n        \"\"\"\\n        dict_letter_widths=dict(zip(list(\\'abcdefghijklmnopqrstuvwxyz\\'),widths))\\n        S_width=[dict_letter_widths[s] for s in S]\\n        rows=1\\n        start=0\\n        for idx, each_w in enumerate(S_width):\\n            if sum(S_width[start:idx+1])>100:\\n                rows+=1\\n                start=idx\\n        \\n        last_row=sum(S_width[start:])\\n        return [rows,last_row] \\n```",
                "codeTag": "Java"
            },
            {
                "id": 140136,
                "title": "straightforward-java",
                "content": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String S) {\\n        int[] result = new int[2];\\n        result[0] = 1;\\n        for(char c : S.toCharArray()){\\n            int next = widths[c - \\'a\\'];\\n            if(next + result[1] > 100){\\n                result[0]++;\\n                result[1] = 0;\\n            }\\n            result[1] += next;\\n        }\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String S) {\\n        int[] result = new int[2];\\n        result[0] = 1;\\n        for(char c : S.toCharArray()){\\n            int next = widths[c - \\'a\\'];\\n            if(next + result[1] > 100){\\n                result[0]++;\\n                result[1] = 0;\\n            }\\n            result[1] += next;\\n        }\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 131362,
                "title": "my-python-script",
                "content": "class Solution:\\n    def numberOfLines(self, widths, S):\\n        \"\"\"\\n        :type widths: List[int]\\n        :type S: str\\n        :rtype: List[int]\\n        \"\"\"\\n        dic = {}\\n        for i in S:\\n            dic[i] = widths[ord(i) - ord(\\'a\\')]\\n        count = 0\\n        tmp = 0\\n        for i in S:\\n            tmp+= dic[i]\\n            if tmp ==100:\\n                count += 1\\n                tmp = 0\\n\\t\\t\\t\\t\\t elif tmp>100:\\n\\t\\t\\t\\t\\t     count += 1\\n\\t\\t\\t\\t\\t\\t\\t tmp = 0\\n\\t\\t\\t\\t\\t\\t\\t tmp += dic[i]\\n\\t\\t\\tres = []\\n\\t\\t\\tif tmp != 0:\\n\\t\\t\\t    count += 1\\n\\t\\t\\tres.append(count)\\n\\t\\t\\tres.append(tmp)\\n\\t\\t\\treturn res",
                "solutionTags": [],
                "code": "class Solution:\\n    def numberOfLines(self, widths, S):\\n        \"\"\"\\n        :type widths: List[int]\\n        :type S: str\\n        :rtype: List[int]\\n        \"\"\"\\n        dic = {}",
                "codeTag": "Java"
            },
            {
                "id": 124249,
                "title": "my-swift-answer",
                "content": "```\\nfunc numberOfLines(_ widths: [Int], _ S: String) -> [Int] {\\n        var asciiArray = S.unicodeScalars.filter{$0.isASCII}.map{Int($0.value) - 97}\\n        var totalUnits = 0\\n        var line = 1\\n        for i in 0..<asciiArray.count {\\n            if (totalUnits + widths[asciiArray[i]]) > 100 {\\n                line = line + 1\\n                totalUnits = widths[asciiArray[i]]\\n            }\\n            else {\\n                totalUnits = totalUnits + widths[asciiArray[i]]\\n            }\\n        }\\n        \\n        return [line, totalUnits]\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nfunc numberOfLines(_ widths: [Int], _ S: String) -> [Int] {\\n        var asciiArray = S.unicodeScalars.filter{$0.isASCII}.map{Int($0.value) - 97}\\n        var totalUnits = 0\\n        var line = 1\\n        for i in 0..<asciiArray.count {\\n            if (totalUnits + widths[asciiArray[i]]) > 100 {\\n                line = line + 1\\n                totalUnits = widths[asciiArray[i]]\\n            }\\n            else {\\n                totalUnits = totalUnits + widths[asciiArray[i]]\\n            }\\n        }\\n        \\n        return [line, totalUnits]\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 120746,
                "title": "my-easy-c-solution",
                "content": "```\\nint* numberOfLines(int* widths, int widthsSize, char* S, int* returnSize) {\\n    int i = 0;\\n    int len = 0;\\n    int sumWidth = 0;\\n    \\n    // algo\\n    for(i = 0 ; S[i] ; i++) {\\n        len = len + widths[S[i] - \\'a\\'];\\n        if(len > 100) {\\n            len = 0;\\n            sumWidth++;\\n            i--;\\n        }\\n    }\\n    \\n    // return code\\n    *returnSize = 2;\\n    int* res = (int *)malloc(sizeof(int) * (*returnSize));\\n    res[0] = sumWidth + 1;\\n    res[1] = len;\\n    return res;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nint* numberOfLines(int* widths, int widthsSize, char* S, int* returnSize) {\\n    int i = 0;\\n    int len = 0;\\n    int sumWidth = 0;\\n    \\n    // algo\\n    for(i = 0 ; S[i] ; i++) {\\n        len = len + widths[S[i] - \\'a\\'];\\n        if(len > 100) {\\n            len = 0;\\n            sumWidth++;\\n            i--;\\n        }\\n    }\\n    \\n    // return code\\n    *returnSize = 2;\\n    int* res = (int *)malloc(sizeof(int) * (*returnSize));\\n    res[0] = sumWidth + 1;\\n    res[1] = len;\\n    return res;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 120724,
                "title": "easy-to-understand-python-33ms",
                "content": "```\\nclass Solution(object):\\n    def numberOfLines(self, widths, S):\\n        \"\"\"\\n        :type widths: List[int]\\n        :type S: str\\n        :rtype: List[int]\\n        \"\"\"\\n        total = 0\\n        lines = 0\\n        for char in S:\\n            total += widths[ord(char) - ord(\"a\")]\\n            # move to a new line\\n            if total > 100:\\n                total = widths[ord(char) - ord(\"a\")]\\n                lines += 1\\n            \\n        return [lines+1, total]\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def numberOfLines(self, widths, S):\\n        \"\"\"\\n        :type widths: List[int]\\n        :type S: str\\n        :rtype: List[int]\\n        \"\"\"\\n        total = 0\\n        lines = 0\\n        for char in S:\\n            total += widths[ord(char) - ord(\"a\")]\\n            # move to a new line\\n            if total > 100:\\n                total = widths[ord(char) - ord(\"a\")]\\n                lines += 1\\n            \\n        return [lines+1, total]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 120702,
                "title": "java-solution-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String S) {\\n        char[] cArr = S.toCharArray();\\n        \\n        int width = 0, lineCount = 1;\\n        for(char c : cArr){\\n            if(width + widths[c - \\'a\\'] > 100){\\n                lineCount++;\\n                width = 0;\\n            }\\n            width += widths[c - \\'a\\'];\\n        }\\n        \\n        return new int[]{lineCount, width};\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String S) {\\n        char[] cArr = S.toCharArray();\\n        \\n        int width = 0, lineCount = 1;\\n        for(char c : cArr){\\n            if(width + widths[c - \\'a\\'] > 100){\\n                lineCount++;\\n                width = 0;\\n            }\\n            width += widths[c - \\'a\\'];\\n        }\\n        \\n        return new int[]{lineCount, width};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 120664,
                "title": "accepted-java-solution",
                "content": "```\\n\\tpublic int[] numberOfLines(int[] widths, String S) {\\n\\t\\tint[] res = { 0, 0 };\\n\\t\\tif (S == null || S.length() == 0) {\\n\\t\\t\\treturn res;\\n\\t\\t}\\n\\t\\tint lastLineLength = 0;\\n\\t\\tint lineCount = 1;\\n\\n\\t\\tfor (char c : S.toCharArray()) {\\n\\t\\t\\tint wordlLength = widths[c - \\'a\\'];\\n\\t\\t\\tif (lastLineLength + wordlLength > 100) {\\n\\t\\t\\t\\t++lineCount;\\n\\t\\t\\t\\tlastLineLength = wordlLength;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tlastLineLength += wordlLength;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tres[0] = lineCount;\\n\\t\\tres[1] = lastLineLength;\\n\\t\\treturn res;\\n\\n\\t}\\n\\t",
                "solutionTags": [],
                "code": "```\\n\\tpublic int[] numberOfLines(int[] widths, String S) {\\n\\t\\tint[] res = { 0, 0 };\\n\\t\\tif (S == null || S.length() == 0) {\\n\\t\\t\\treturn res;\\n\\t\\t}\\n\\t\\tint lastLineLength = 0;\\n\\t\\tint lineCount = 1;\\n\\n\\t\\tfor (char c : S.toCharArray()) {\\n\\t\\t\\tint wordlLength = widths[c - \\'a\\'];\\n\\t\\t\\tif (lastLineLength + wordlLength > 100) {\\n\\t\\t\\t\\t++lineCount;\\n\\t\\t\\t\\tlastLineLength = wordlLength;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tlastLineLength += wordlLength;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tres[0] = lineCount;\\n\\t\\tres[1] = lastLineLength;\\n\\t\\treturn res;\\n\\n\\t}\\n\\t",
                "codeTag": "Unknown"
            },
            {
                "id": 120646,
                "title": "my-simple-6-lines-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string S) {\\n\\tint cnt = 1, cur = 0;\\n\\tfor (char c : S) {\\n\\t    int t = widths[c - \\'a\\'];\\n\\t    if (cur + t > 100) ++cnt;\\n\\t    cur = (cur + t > 100) ? t : cur + t;\\n\\t}\\n\\treturn {cnt, cur};\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string S) {\\n\\tint cnt = 1, cur = 0;\\n\\tfor (char c : S) {\\n\\t    int t = widths[c - \\'a\\'];\\n\\t    if (cur + t > 100) ++cnt;\\n\\t    cur = (cur + t > 100) ? t : cur + t;\\n\\t}",
                "codeTag": "Java"
            },
            {
                "id": 4104946,
                "title": "beat-100",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n\\n    private static final int LINE_WIDTH_PX = 100;\\n\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int lines = 0;\\n        int lastLineWidth = 0;\\n\\n        for (int i = 0, limit = s.length(), line = LINE_WIDTH_PX; i < limit; i++) {\\n            int c = s.charAt(i) - \\'a\\';\\n\\n            int width = widths[c];\\n\\n            // start new line?\\n            if (line + width > LINE_WIDTH_PX) {\\n                line = width;\\n                lines++;\\n            } else {\\n                line += width;\\n            }\\n\\n            lastLineWidth = line;\\n        }\\n\\n        return new int[] {lines, lastLineWidth};\\n    }\\n\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n\\n    private static final int LINE_WIDTH_PX = 100;\\n\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int lines = 0;\\n        int lastLineWidth = 0;\\n\\n        for (int i = 0, limit = s.length(), line = LINE_WIDTH_PX; i < limit; i++) {\\n            int c = s.charAt(i) - \\'a\\';\\n\\n            int width = widths[c];\\n\\n            // start new line?\\n            if (line + width > LINE_WIDTH_PX) {\\n                line = width;\\n                lines++;\\n            } else {\\n                line += width;\\n            }\\n\\n            lastLineWidth = line;\\n        }\\n\\n        return new int[] {lines, lastLineWidth};\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4096825,
                "title": "easy-best-c-solution",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n<!-- # Complexity -->\\n<!-- - Time complexity: -->\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int i=0, j, lines = 1, widthSum = 0;\\n        vector<int> arr;\\n        while(i < s.length())\\n        {\\n            j = s[i] - 97;\\n            if((widthSum + widths[j]) <= 100)\\n            {\\n                widthSum += widths[j];\\n                i++;\\n            }\\n            else\\n            {\\n                lines++;\\n                widthSum = 0;\\n            }\\n        }\\n        arr.push_back(lines);\\n        arr.push_back(widthSum);\\n        return arr;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int i=0, j, lines = 1, widthSum = 0;\\n        vector<int> arr;\\n        while(i < s.length())\\n        {\\n            j = s[i] - 97;\\n            if((widthSum + widths[j]) <= 100)\\n            {\\n                widthSum += widths[j];\\n                i++;\\n            }\\n            else\\n            {\\n                lines++;\\n                widthSum = 0;\\n            }\\n        }\\n        arr.push_back(lines);\\n        arr.push_back(widthSum);\\n        return arr;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4096180,
                "title": "easy-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\ndef func(widths,s):\\n    t=0\\n    l=[]\\n    k=0\\n    for i in range(len(s)):\\n        t+=widths[ord(s[i])-ord(\\'a\\')]\\n        k+=widths[ord(s[i])-ord(\\'a\\')]\\n        if t==100:\\n            l.append(t)\\n            t=0\\n        elif t>=100:\\n            t-=widths[ord(s[i])-ord(\\'a\\')]\\n            l.append(t)\\n            t=widths[ord(s[i])-ord(\\'a\\')]\\n    if k!=sum(l):\\n        l.append(k-sum(l))\\n    print(l)\\n    return [len(l),l[-1]]\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        return func(widths,s)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\ndef func(widths,s):\\n    t=0\\n    l=[]\\n    k=0\\n    for i in range(len(s)):\\n        t+=widths[ord(s[i])-ord(\\'a\\')]\\n        k+=widths[ord(s[i])-ord(\\'a\\')]\\n        if t==100:\\n            l.append(t)\\n            t=0\\n        elif t>=100:\\n            t-=widths[ord(s[i])-ord(\\'a\\')]\\n            l.append(t)\\n            t=widths[ord(s[i])-ord(\\'a\\')]\\n    if k!=sum(l):\\n        l.append(k-sum(l))\\n    print(l)\\n    return [len(l),l[-1]]\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        return func(widths,s)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4094896,
                "title": "1-for-loop-solve",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Don\\'t forget to use \\'i--\\' when the linewidth > 100\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} widths\\n * @param {string} s\\n * @return {number[]}\\n */\\nvar numberOfLines = function(widths, s) {\\n    let string = \"abcdefghijklmnopqrstuvwxyz\";\\n    string = string.split(\"\");\\n    let width = 0;\\n    let lastline = 0;\\n    let line = 0;\\n    for(let i =0;i<s.length;i++){\\n        const index = string.indexOf(s[i]);\\n        width+=widths[index];\\n        if((lastline += widths[index]) > 100){\\n            lastline = 0;\\n            line++\\n            i--\\n        }\\n        if(i == s.length-1 && lastline != 0) line++;\\n\\n    }\\n\\n    result = [line++,lastline]\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} widths\\n * @param {string} s\\n * @return {number[]}\\n */\\nvar numberOfLines = function(widths, s) {\\n    let string = \"abcdefghijklmnopqrstuvwxyz\";\\n    string = string.split(\"\");\\n    let width = 0;\\n    let lastline = 0;\\n    let line = 0;\\n    for(let i =0;i<s.length;i++){\\n        const index = string.indexOf(s[i]);\\n        width+=widths[index];\\n        if((lastline += widths[index]) > 100){\\n            lastline = 0;\\n            line++\\n            i--\\n        }\\n        if(i == s.length-1 && lastline != 0) line++;\\n\\n    }\\n\\n    result = [line++,lastline]\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4090237,
                "title": "solution-in-java",
                "content": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int[] ans = new int[2];\\n        int total_lines =0;\\n        int curr_pixel=0;\\n        for (int i = 0; i <s.length() ;i++ ) {\\n            if(curr_pixel+widths[s.charAt(i)-\\'a\\']>100){\\n                curr_pixel=0;\\n                total_lines++;\\n            }\\n            curr_pixel+=widths[s.charAt(i)-\\'a\\'];\\n        }\\n        ans[0]=total_lines+1;\\n        ans[1]=curr_pixel;\\n        return ans;        \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int[] ans = new int[2];\\n        int total_lines =0;\\n        int curr_pixel=0;\\n        for (int i = 0; i <s.length() ;i++ ) {\\n            if(curr_pixel+widths[s.charAt(i)-\\'a\\']>100){\\n                curr_pixel=0;\\n                total_lines++;\\n            }\\n            curr_pixel+=widths[s.charAt(i)-\\'a\\'];\\n        }\\n        ans[0]=total_lines+1;\\n        ans[1]=curr_pixel;\\n        return ans;        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4089279,
                "title": "easy-java-solution-beats-100-with-time-and-90-with-memory",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n         \\n        int l=1;\\n        int ans=0;\\n\\n    for(char c:s.toCharArray()){\\n        int a = widths[c-\\'a\\'];\\n        if(ans+a>100){\\n            ans =a;\\n            l++;\\n        }\\n        else\\n        ans=ans+a;      \\n    \\n    }\\n    int [] x={l,ans};\\n    return x;\\n    \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n         \\n        int l=1;\\n        int ans=0;\\n\\n    for(char c:s.toCharArray()){\\n        int a = widths[c-\\'a\\'];\\n        if(ans+a>100){\\n            ans =a;\\n            l++;\\n        }\\n        else\\n        ans=ans+a;      \\n    \\n    }\\n    int [] x={l,ans};\\n    return x;\\n    \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4087778,
                "title": "beats-100-memory-leveraging-typescript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe intuition behind this solution is to iterate through the input string `s`, calculate the width of each character based on the `widths` array, and keep track of the current row and count of characters in that row. When the count exceeds a certain limit (in this case, 100), we move to the next row.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Initialize variables `row` to `1` (to represent the first row) and `count` to `0` (to keep track of character count in the current row).\\n2. Iterate through each character in the input string `s`.\\n3. For each character, calculate its width using the `widths` array based on its `ASCII` code.\\n4. Check if adding the character\\'s width to the current `count` would exceed the row width limit of `100`. If it does, increment the `row` counter, decrement `i` to process the same character in the next row, and reset `count` to 0. Continue to the next character.\\n5. If adding the character\\'s width doesn\\'t exceed the row width limit, update `count` with the new width.\\n6. Finally, return an array containing the `row` count and the remaining `count` (characters in the last row).\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. O(n) -->\\nThe time complexity of this solution is `O(n)`, where `n` is the length of the input string `s`. We iterate through the string once.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. O(n) -->\\nThe space complexity of this solution is `O(1)` since we use a constant amount of additional space regardless of the input size. We only maintain a few variables to store row count and character count.\\n\\n\\n# Code\\n```\\nfunction numberOfLines(widths: number[], s: string): number[] {\\n    let row = 1;\\n    let count = 0;\\n    for(let i = 0; i < s.length; i++){\\n        const width = widths[s.charCodeAt(i) - 97];\\n        if(count + width > 100) { row++; i--; count = 0; continue; }\\n        count += width;\\n    }\\n\\n    return [row, count];\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction numberOfLines(widths: number[], s: string): number[] {\\n    let row = 1;\\n    let count = 0;\\n    for(let i = 0; i < s.length; i++){\\n        const width = widths[s.charCodeAt(i) - 97];\\n        if(count + width > 100) { row++; i--; count = 0; continue; }\\n        count += width;\\n    }\\n\\n    return [row, count];\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4084849,
                "title": "python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def numberOfLines(self, widths, s):\\n        \"\"\"\\n        :type widths: List[int]\\n        :type s: str\\n        :rtype: List[int]\\n        \"\"\"\\n        count = 0 \\n        line = 0\\n        for i in s:\\n            v=widths[ord(i)-ord(\\'a\\')]\\n            if count+v>100:\\n                count=v\\n                line+=1\\n            else:\\n                count+=v\\n        return [line+1,count]\\n\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def numberOfLines(self, widths, s):\\n        \"\"\"\\n        :type widths: List[int]\\n        :type s: str\\n        :rtype: List[int]\\n        \"\"\"\\n        count = 0 \\n        line = 0\\n        for i in s:\\n            v=widths[ord(i)-ord(\\'a\\')]\\n            if count+v>100:\\n                count=v\\n                line+=1\\n            else:\\n                count+=v\\n        return [line+1,count]\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4084728,
                "title": "number-of-lines-to-write-string-java-easy-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int[] res = new int[2];\\n        int sumCount = 1;\\n        int sumOfLine = 0;\\n        for (char c:s.toCharArray()) {\\n            if((sumOfLine=sumOfLine+widths[(int)c - 97])<=100){\\n                sumOfLine-=widths[(int)c - 97];\\n                sumOfLine+=widths[(int)c - 97];\\n            }else {\\n                sumCount++;\\n                sumOfLine = 0;\\n                sumOfLine+=widths[(int)c - 97];            }\\n        }\\n        res[0] = sumCount;\\n        res[1] = sumOfLine;\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int[] res = new int[2];\\n        int sumCount = 1;\\n        int sumOfLine = 0;\\n        for (char c:s.toCharArray()) {\\n            if((sumOfLine=sumOfLine+widths[(int)c - 97])<=100){\\n                sumOfLine-=widths[(int)c - 97];\\n                sumOfLine+=widths[(int)c - 97];\\n            }else {\\n                sumCount++;\\n                sumOfLine = 0;\\n                sumOfLine+=widths[(int)c - 97];            }\\n        }\\n        res[0] = sumCount;\\n        res[1] = sumOfLine;\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4080224,
                "title": "java-easy-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int sum=0,c=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if((sum+widths[s.charAt(i)-\\'a\\'])>100)\\n            {\\n                sum=widths[s.charAt(i)-\\'a\\'];\\n                c++;\\n                continue;\\n            }\\n            else \\n            {\\n                sum=sum+widths[s.charAt(i)-\\'a\\'];\\n            }\\n            \\n        }\\n        if(sum>0)\\n        {\\n            c++;\\n        }\\n        int a[]=new int[2];\\n        a[0]=c;\\n        a[1]=sum;\\n        return a;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int sum=0,c=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if((sum+widths[s.charAt(i)-\\'a\\'])>100)\\n            {\\n                sum=widths[s.charAt(i)-\\'a\\'];\\n                c++;\\n                continue;\\n            }\\n            else \\n            {\\n                sum=sum+widths[s.charAt(i)-\\'a\\'];\\n            }\\n            \\n        }\\n        if(sum>0)\\n        {\\n            c++;\\n        }\\n        int a[]=new int[2];\\n        a[0]=c;\\n        a[1]=sum;\\n        return a;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4077223,
                "title": "c-simple-solution-beats-100",
                "content": "# Intuition\\nThe intuition behind the provided code is to efficiently determine how many lines are needed to write a given string \\'s\\' while ensuring that each line does not exceed 100 pixels in width. To achieve this, the code iterates through each character in the input string \\'s\\' and keeps track of the current line\\'s width (\\'curr\\'). When adding the width of a character to \\'curr\\' would exceed 100 pixels, the code starts a new line, increments the line count, and resets \\'curr\\' to the width of the current character. This process continues until all characters in \\'s\\' are processed, providing the total number of lines needed and the width of the last line.\\n\\n# Approach\\nThe approach taken in the code is straightforward and efficient. It utilizes a single pass through the input string \\'s\\', making it linear in terms of time complexity. By keeping track of the current line\\'s width and resetting it as needed, the code ensures that no line exceeds the specified width constraint. The use of a \\'result\\' vector with two elements simplifies the storage of the output, allowing for the easy retrieval of the total number of lines and the width of the last line. Overall, this approach efficiently solves the problem of formatting a string within pixel constraints.\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    std::vector<int> numberOfLines(std::vector<int> &widths, std::string s) {\\n        int curr = 0;\\n        std::vector<int> result = {1, 0};\\n        for (int i = 0; i < s.size(); ++i) {\\n            if (curr + widths[s[i] - 97] > 100) {\\n                curr = 0;\\n                result[0]++;\\n            }\\n            curr += widths[s[i] - 97];\\n        }\\n        result[1] = curr;\\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    std::vector<int> numberOfLines(std::vector<int> &widths, std::string s) {\\n        int curr = 0;\\n        std::vector<int> result = {1, 0};\\n        for (int i = 0; i < s.size(); ++i) {\\n            if (curr + widths[s[i] - 97] > 100) {\\n                curr = 0;\\n                result[0]++;\\n            }\\n            curr += widths[s[i] - 97];\\n        }\\n        result[1] = curr;\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4072334,
                "title": "c-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public int[] NumberOfLines(int[] widths, string s) {\\n        int[] result = new int[2];\\n        int lineCount = 0;\\n        int currentLinewidth = 0;\\n        for(int i=0; i<s.Length; i++){\\n            if(currentLinewidth + widths[(int)s[i]-97] <=100){\\n                currentLinewidth += widths[((int)s[i])-97];\\n            }\\n            else{\\n                lineCount++;\\n                currentLinewidth = widths[((int)s[i])-97];\\n            }\\n        }\\n        result[0]= currentLinewidth > 0 ? ++lineCount : lineCount;\\n        result[1]=currentLinewidth;\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int[] NumberOfLines(int[] widths, string s) {\\n        int[] result = new int[2];\\n        int lineCount = 0;\\n        int currentLinewidth = 0;\\n        for(int i=0; i<s.Length; i++){\\n            if(currentLinewidth + widths[(int)s[i]-97] <=100){\\n                currentLinewidth += widths[((int)s[i])-97];\\n            }\\n            else{\\n                lineCount++;\\n                currentLinewidth = widths[((int)s[i])-97];\\n            }\\n        }\\n        result[0]= currentLinewidth > 0 ? ++lineCount : lineCount;\\n        result[1]=currentLinewidth;\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4068183,
                "title": "c-simple-math",
                "content": "# No need desctiption\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int l = 1;\\n        int sum = 0;\\n        for(int i = 0; i < s.size(); ++i) {\\n            if (sum + widths[s[i] - \\'a\\'] > 100) {\\n                l++;\\n                sum = 0;\\n            }\\n            sum += widths[s[i] - \\'a\\'];\\n        }\\n        return {l, sum};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int l = 1;\\n        int sum = 0;\\n        for(int i = 0; i < s.size(); ++i) {\\n            if (sum + widths[s[i] - \\'a\\'] > 100) {\\n                l++;\\n                sum = 0;\\n            }\\n            sum += widths[s[i] - \\'a\\'];\\n        }\\n        return {l, sum};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4054779,
                "title": "easiest-code-with-no-extra-memory",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int arr[] = new int[2];\\n        for(char ch : s.toCharArray()){\\n            if(arr[1]+widths[ch-\\'a\\'] > 100){\\n                arr[0]++;\\n                arr[1] = 0;\\n            }\\n            arr[1] += widths[ch-\\'a\\'];\\n        }\\n        if(arr[1] > 0)\\n            arr[0]++;\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int arr[] = new int[2];\\n        for(char ch : s.toCharArray()){\\n            if(arr[1]+widths[ch-\\'a\\'] > 100){\\n                arr[0]++;\\n                arr[1] = 0;\\n            }\\n            arr[1] += widths[ch-\\'a\\'];\\n        }\\n        if(arr[1] > 0)\\n            arr[0]++;\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4051790,
                "title": "1ms-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int lines=0;\\n        int width=0;\\n        int sum=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            char ch=s.charAt(i);\\n            int x=ch-\\'a\\';\\n            sum+=widths[x];\\n            if(sum==100)\\n            {\\n                lines++;\\n                width=sum;\\n                sum=0;\\n            }\\n            if(sum>100)\\n            {\\n                lines++;\\n                width=sum-widths[x];\\n                sum=widths[x];\\n            }\\n        }\\n\\n        if(sum!=0)\\n        {\\n            lines++;\\n            width=sum;\\n        }\\n\\n        int answer[]=new int[2];\\n        answer[0]=lines;\\n        answer[1]=width;\\n        return answer;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int lines=0;\\n        int width=0;\\n        int sum=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            char ch=s.charAt(i);\\n            int x=ch-\\'a\\';\\n            sum+=widths[x];\\n            if(sum==100)\\n            {\\n                lines++;\\n                width=sum;\\n                sum=0;\\n            }\\n            if(sum>100)\\n            {\\n                lines++;\\n                width=sum-widths[x];\\n                sum=widths[x];\\n            }\\n        }\\n\\n        if(sum!=0)\\n        {\\n            lines++;\\n            width=sum;\\n        }\\n\\n        int answer[]=new int[2];\\n        answer[0]=lines;\\n        answer[1]=width;\\n        return answer;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4043915,
                "title": "javascript-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\n/**\\n * @param {number[]} widths\\n * @param {string} s\\n * @return {number[]}\\n */\\nvar numberOfLines = function(widths, s) {\\n  let width = 0;\\n  let slength = 1; // Initialize to 1 for the first line\\n\\n  for (let i = 0; i < s.length; i++) {\\n    if (width + widths[s.charCodeAt(i) - \\'a\\'.charCodeAt(0)] > 100) {\\n      slength++;\\n      width = 0;\\n    }\\n    width += widths[s.charCodeAt(i) - \\'a\\'.charCodeAt(0)];\\n  }\\n\\n  return [slength, width];\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} widths\\n * @param {string} s\\n * @return {number[]}\\n */\\nvar numberOfLines = function(widths, s) {\\n  let width = 0;\\n  let slength = 1; // Initialize to 1 for the first line\\n\\n  for (let i = 0; i < s.length; i++) {\\n    if (width + widths[s.charCodeAt(i) - \\'a\\'.charCodeAt(0)] > 100) {\\n      slength++;\\n      width = 0;\\n    }\\n    width += widths[s.charCodeAt(i) - \\'a\\'.charCodeAt(0)];\\n  }\\n\\n  return [slength, width];\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4043045,
                "title": "simple-and-easily-understandable-cpp-solution-that-beats-100-users",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        vector<int> ans(2,0);\\n        int sum = 0;\\n        int n = s.length();\\n        for(int i=0;i<n;i++)\\n        {\\n            int num = widths[s[i]-\\'a\\'];\\n            if(sum+num<=100)\\n            {\\n                sum+=num;\\n            }\\n            else\\n            {\\n                ans[0]++;\\n                sum = num;\\n            }\\n        }\\n        ans[1] = sum;\\n        if(sum)\\n            ans[0]++;\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        vector<int> ans(2,0);\\n        int sum = 0;\\n        int n = s.length();\\n        for(int i=0;i<n;i++)\\n        {\\n            int num = widths[s[i]-\\'a\\'];\\n            if(sum+num<=100)\\n            {\\n                sum+=num;\\n            }\\n            else\\n            {\\n                ans[0]++;\\n                sum = num;\\n            }\\n        }\\n        ans[1] = sum;\\n        if(sum)\\n            ans[0]++;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4042712,
                "title": "k",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\nclass Solution {\\n  int l(char c, vector<int>& widths) {\\n    int asint = c - \\'a\\';\\n    return widths[asint];\\n  }\\n\\n public:\\n  vector<int> numberOfLines(vector<int>& widths, string s) {\\n    vector<int> res(2);\\n    int lineCount = 1;\\n    int curTotal = 0;\\n    for (char c: s) {\\n      int w = l(c,widths);\\n      if (curTotal+w > 100) {\\n        curTotal=w;\\n        lineCount++;\\n      } else {\\n        curTotal+=w;\\n      }\\n    }\\n    res[0] = lineCount;\\n    res[1] = curTotal;\\n    return res;\\n  }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n\\nclass Solution {\\n  int l(char c, vector<int>& widths) {\\n    int asint = c - \\'a\\';\\n    return widths[asint];\\n  }\\n\\n public:\\n  vector<int> numberOfLines(vector<int>& widths, string s) {\\n    vector<int> res(2);\\n    int lineCount = 1;\\n    int curTotal = 0;\\n    for (char c: s) {\\n      int w = l(c,widths);\\n      if (curTotal+w > 100) {\\n        curTotal=w;\\n        lineCount++;\\n      } else {\\n        curTotal+=w;\\n      }\\n    }\\n    res[0] = lineCount;\\n    res[1] = curTotal;\\n    return res;\\n  }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4040002,
                "title": "fastest-c-beats-100-easy-to-understand",
                "content": "\\n\\n# Complexity\\n- Time complexity: Asymptotically -> O(n^2), practically -> O(n), because we traversed the array only once. And thus, TC only depends on the size of the array (linear).\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1) No extra space used.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        vector<int> ans;\\n        int i=0;\\n        int cnt=0;\\n        int row=0;\\n        while(i<s.size())\\n        {\\n            int count=0;\\n            cnt=0;\\n\\n            while(i<s.size() and (cnt+widths[s[i]-\\'a\\'])<=100)\\n            {\\n                cnt+=widths[s[i]-\\'a\\'];\\n                i++;\\n            }\\n            row+=1;\\n        }\\n        return {row,cnt};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        vector<int> ans;\\n        int i=0;\\n        int cnt=0;\\n        int row=0;\\n        while(i<s.size())\\n        {\\n            int count=0;\\n            cnt=0;\\n\\n            while(i<s.size() and (cnt+widths[s[i]-\\'a\\'])<=100)\\n            {\\n                cnt+=widths[s[i]-\\'a\\'];\\n                i++;\\n            }\\n            row+=1;\\n        }\\n        return {row,cnt};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4035548,
                "title": "806-number-of-lines-to-write-string",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n\\n         int tempSum = 0, lineCounter = 1;\\n        for (char c : s.toCharArray()) {\\n            int currCharLen = widths[c - \\'a\\'];\\n            if (tempSum + currCharLen <= 100) {\\n                tempSum += currCharLen;\\n            } else {\\n                lineCounter++;\\n                tempSum = currCharLen;\\n            }\\n        }\\n        return new int[]{lineCounter, tempSum};\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n\\n         int tempSum = 0, lineCounter = 1;\\n        for (char c : s.toCharArray()) {\\n            int currCharLen = widths[c - \\'a\\'];\\n            if (tempSum + currCharLen <= 100) {\\n                tempSum += currCharLen;\\n            } else {\\n                lineCounter++;\\n                tempSum = currCharLen;\\n            }\\n        }\\n        return new int[]{lineCounter, tempSum};\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4029617,
                "title": "very-easy-simplw-for-beginners-beats-80",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        x=0\\n        y=0\\n        a=[]\\n        b=[]\\n        for i in range(len(s)):\\n            z=widths[(ord(s[i])-ord(\\'a\\'))]\\n            if x+z>100:\\n                y+=1\\n                a.append(x)\\n                x=0\\n            x=x+z\\n        a.append(x)\\n        y+=1\\n        b.append(y)\\n        b.append(a[len(a)-1])\\n        return b\\n\\n        \\n\\n        \\n        \\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        x=0\\n        y=0\\n        a=[]\\n        b=[]\\n        for i in range(len(s)):\\n            z=widths[(ord(s[i])-ord(\\'a\\'))]\\n            if x+z>100:\\n                y+=1\\n                a.append(x)\\n                x=0\\n            x=x+z\\n        a.append(x)\\n        y+=1\\n        b.append(y)\\n        b.append(a[len(a)-1])\\n        return b\\n\\n        \\n\\n        \\n        \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4018649,
                "title": "easy-c-solution-0ms-beats-100-00-of-users-with-c",
                "content": "\\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        vector<int>ans;\\n        int sum=0;\\n        int line=0;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            int temp=int(s[i])-97;\\n            sum+=widths[temp];\\n            if(sum>100)\\n            {\\n                sum-=widths[temp];\\n                line++;\\n                sum=0;\\n                i--;\\n            }\\n        }\\n            ans.push_back(line+1);\\n            ans.push_back(sum);\\n            return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        vector<int>ans;\\n        int sum=0;\\n        int line=0;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            int temp=int(s[i])-97;\\n            sum+=widths[temp];\\n            if(sum>100)\\n            {\\n                sum-=widths[temp];\\n                line++;\\n                sum=0;\\n                i--;\\n            }\\n        }\\n            ans.push_back(line+1);\\n            ans.push_back(sum);\\n            return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4014003,
                "title": "swift-solution-using-reduce-14-2-mb-2-ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: 14.2 MB\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: 2 ms\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    func numberOfLines(_ widths: [Int], _ s: String) -> [Int] {\\n        \\n        var numberOfLines = 0\\n        var lastLine = s.reduce(into: 0) {\\n            var ch = ((Character(extendedGraphemeClusterLiteral: $1).asciiValue ?? 0) - 97)\\n            $0 += widths[Int(ch)]\\n            if($0 > 100) {\\n                $0 = 0\\n                numberOfLines += 1\\n                $0 += widths[Int(ch)]\\n            }\\n        }\\n        if (lastLine != 0 ) {numberOfLines += 1}\\n        return [numberOfLines, lastLine]\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Swift",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    func numberOfLines(_ widths: [Int], _ s: String) -> [Int] {\\n        \\n        var numberOfLines = 0\\n        var lastLine = s.reduce(into: 0) {\\n            var ch = ((Character(extendedGraphemeClusterLiteral: $1).asciiValue ?? 0) - 97)\\n            $0 += widths[Int(ch)]\\n            if($0 > 100) {\\n                $0 = 0\\n                numberOfLines += 1\\n                $0 += widths[Int(ch)]\\n            }\\n        }\\n        if (lastLine != 0 ) {numberOfLines += 1}\\n        return [numberOfLines, lastLine]\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4012905,
                "title": "accepted-solution-for-java-beats-100-online-submissions",
                "content": "![Screenshot 2023-09-07 at 12.23.06 PM.png](https://assets.leetcode.com/users/images/52fd9cf4-55a2-4e6b-a81a-bc7593efba28_1694069607.9465797.png)\\n\\n# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int[] result = new int[2];\\n        int num_lines = 1;\\n        int width = 0;\\n        for(char c : s.toCharArray()){\\n            int char_width = widths[c - \\'a\\'];\\n            if(char_width + width > 100){\\n                num_lines ++;\\n                width = 0;\\n            }\\n            width += char_width;            \\n        }\\n        result[0] = num_lines;\\n        result[1] = width;\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int[] result = new int[2];\\n        int num_lines = 1;\\n        int width = 0;\\n        for(char c : s.toCharArray()){\\n            int char_width = widths[c - \\'a\\'];\\n            if(char_width + width > 100){\\n                num_lines ++;\\n                width = 0;\\n            }\\n            width += char_width;            \\n        }\\n        result[0] = num_lines;\\n        result[1] = width;\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4010754,
                "title": "easiest-solution",
                "content": "\\n\\n# Code\\n```java []\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int total=0;\\n        int count=0;\\n        String str=\"\";\\n        for(int i=0; i<s.length(); i++){\\n            char a=s.charAt(i);\\n            int ele=widths[a-\\'a\\']; \\n            if(total+ele<=100){\\n               str+=Character.valueOf(a).toString();\\n               total=total+ele; \\n            }else{\\n                count++;\\n                str=Character.valueOf(a).toString();\\n                total=ele;\\n            }           \\n        }\\n         if(!str.equals(\"\")) count++;\\n         int[] array=new int[2];\\n         array[0]=count;\\n         array[1]=total;\\n         return array;\\n    }\\n}\\n```\\n```c++ []\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int sum0=0; // sum of all string widths \\n        int sum=0;\\n        int sum1=0; // count of each line\\n        int count=0; // count of lines\\n        vector<int>ans; // store final ans\\n        vector<int>v; // store each lines width\\n        for(char c : s){\\n            sum0 += widths[c-97]; // sum of all string widths\\n            sum += widths[c-97];\\n            if(sum>100){\\n                v.push_back(sum1);\\n                count++;\\n                sum=sum-sum1;\\n            }\\n            else if(sum<=100){\\n                sum1=sum;\\n            }\\n        }\\n        int last = sum0; \\n        for(int j=0;j<v.size();j++){\\n            last=last-v[j]; //last==last_line_pixel\\n        }\\n        if(last>0) count++;// if last>0, then their should be last line\\n        ans.push_back(count);\\n        ans.push_back(last);\\n\\n        return ans;\\n    }\\n}; // plz upvote\\n```",
                "solutionTags": [
                    "C++",
                    "Java"
                ],
                "code": "```java []\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int total=0;\\n        int count=0;\\n        String str=\"\";\\n        for(int i=0; i<s.length(); i++){\\n            char a=s.charAt(i);\\n            int ele=widths[a-\\'a\\']; \\n            if(total+ele<=100){\\n               str+=Character.valueOf(a).toString();\\n               total=total+ele; \\n            }else{\\n                count++;\\n                str=Character.valueOf(a).toString();\\n                total=ele;\\n            }           \\n        }\\n         if(!str.equals(\"\")) count++;\\n         int[] array=new int[2];\\n         array[0]=count;\\n         array[1]=total;\\n         return array;\\n    }\\n}\\n```\n```c++ []\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int sum0=0; // sum of all string widths \\n        int sum=0;\\n        int sum1=0; // count of each line\\n        int count=0; // count of lines\\n        vector<int>ans; // store final ans\\n        vector<int>v; // store each lines width\\n        for(char c : s){\\n            sum0 += widths[c-97]; // sum of all string widths\\n            sum += widths[c-97];\\n            if(sum>100){\\n                v.push_back(sum1);\\n                count++;\\n                sum=sum-sum1;\\n            }\\n            else if(sum<=100){\\n                sum1=sum;\\n            }\\n        }\\n        int last = sum0; \\n        for(int j=0;j<v.size();j++){\\n            last=last-v[j]; //last==last_line_pixel\\n        }\\n        if(last>0) count++;// if last>0, then their should be last line\\n        ans.push_back(count);\\n        ans.push_back(last);\\n\\n        return ans;\\n    }\\n}; // plz upvote\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4003861,
                "title": "",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        lines, width = 1, 0\\n        for char in s:\\n            c = widths[ord(char)-97]\\n            if width + c <= 100:\\n                width += c\\n            else:\\n                lines += 1\\n                width = c\\n        return [lines, width]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        lines, width = 1, 0\\n        for char in s:\\n            c = widths[ord(char)-97]\\n            if width + c <= 100:\\n                width += c\\n            else:\\n                lines += 1\\n                width = c\\n        return [lines, width]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3991225,
                "title": "simple-solution-with-explanation-c",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n1. We have a class called Solution with a method called NumberOfLines that takes two parameters: an array called widths and a string called s.\\n2. We create an integer array result with two elements, initialized to 0. This array will store the number of lines used and the remaining width.\\n3. We initialize a variable count to keep track of the current line\\'s width.\\n4. We loop through each character in the input string s.\\n5. For each character, we calculate its width based on its ASCII value using the widths array. If the character is \\'a\\', we add widths[0] to the current count.\\n6. If the current line width exceeds 100, we start a new line by resetting count to the width of the current character and incrementing the first element of the result array, which represents the number of lines used.\\n7. After processing all characters in s, if there is any remaining width, we increment the number of lines used and store the remaining width in the second element of the result array.\\n8. Finally, we return the result array, which contains the number of lines used and the remaining width. This code helps determine how many lines are needed to print the string s on a display where each character has a specific width as defined in the widths array.\\n\\n# Code\\n```\\nppublic class Solution {\\n    public int[] NumberOfLines(int[] widths, string s) {\\n        int[] result = new int[2];  // Create an integer array to store the result, initialized with two zeros.\\n        int count = 0;  // Initialize a variable \\'count\\' to keep track of the current line width.\\n\\n        // Loop through each character in the input string \\'s\\'.\\n        for(int i = 0; i < s.Length; i++){\\n            // Calculate the width of the current character by using its ASCII value.\\n            // Subtracting 97 from the ASCII value of the character maps it to the \\'widths\\' array.\\n            // For example, \\'a\\' (ASCII 97) corresponds to widths[0], \\'b\\' (ASCII 98) corresponds to widths[1], and so on.\\n            count += widths[s[i] - 97];\\n\\n            // If the current line width exceeds 100, it means we need to start a new line.\\n            if(count > 100){\\n                // Reset the \\'count\\' to the width of the current character.\\n                count = widths[s[i] - 97];\\n                // Increment the first element of the \\'result\\' array, which represents the number of lines used so far.\\n                result[0]++;\\n            }\\n        }\\n\\n        // If there is any remaining width left after processing all characters in \\'s\\',\\n        // it means we need to count one more line and store the remaining width in the second element of the \\'result\\' array.\\n        if(count > 0){\\n            result[0]++;  // Increment the number of lines.\\n            result[1] = count;  // Store the remaining width.\\n        }\\n\\n        // Return the \\'result\\' array, which contains the number of lines used and the remaining width.\\n        return result;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\nppublic class Solution {\\n    public int[] NumberOfLines(int[] widths, string s) {\\n        int[] result = new int[2];  // Create an integer array to store the result, initialized with two zeros.\\n        int count = 0;  // Initialize a variable \\'count\\' to keep track of the current line width.\\n\\n        // Loop through each character in the input string \\'s\\'.\\n        for(int i = 0; i < s.Length; i++){\\n            // Calculate the width of the current character by using its ASCII value.\\n            // Subtracting 97 from the ASCII value of the character maps it to the \\'widths\\' array.\\n            // For example, \\'a\\' (ASCII 97) corresponds to widths[0], \\'b\\' (ASCII 98) corresponds to widths[1], and so on.\\n            count += widths[s[i] - 97];\\n\\n            // If the current line width exceeds 100, it means we need to start a new line.\\n            if(count > 100){\\n                // Reset the \\'count\\' to the width of the current character.\\n                count = widths[s[i] - 97];\\n                // Increment the first element of the \\'result\\' array, which represents the number of lines used so far.\\n                result[0]++;\\n            }\\n        }\\n\\n        // If there is any remaining width left after processing all characters in \\'s\\',\\n        // it means we need to count one more line and store the remaining width in the second element of the \\'result\\' array.\\n        if(count > 0){\\n            result[0]++;  // Increment the number of lines.\\n            result[1] = count;  // Store the remaining width.\\n        }\\n\\n        // Return the \\'result\\' array, which contains the number of lines used and the remaining width.\\n        return result;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3987017,
                "title": "beats-100-at-time-better-than-half-at-space-complexity-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nint(s[i]) will convert char s[i] to a int, int(s[i])-97 will give it\\'s width in given array (97 is integer value of \\'a\\')\\n# \\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& nums, string s) {\\n        vector<int> ans(2,0);\\n        int lines=1;\\n        int sum=0;\\n        for(int i=0;i<s.size();i++){\\n            int id=int(s[i])-97;\\n            if(nums[id]+sum<=100)    sum+=nums[id];\\n            else{\\n                lines++;\\n                sum=0;\\n                sum+=nums[id];\\n            }\\n        }\\n        ans[0]=lines;\\n        ans[1]=sum;\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& nums, string s) {\\n        vector<int> ans(2,0);\\n        int lines=1;\\n        int sum=0;\\n        for(int i=0;i<s.size();i++){\\n            int id=int(s[i])-97;\\n            if(nums[id]+sum<=100)    sum+=nums[id];\\n            else{\\n                lines++;\\n                sum=0;\\n                sum+=nums[id];\\n            }\\n        }\\n        ans[0]=lines;\\n        ans[1]=sum;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3968560,
                "title": "simple-and-efficient-approach-for-beginners-using-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n\\nWe can solve this code in many ways. In this case, we solved the problem in a simple way. First keep \\'sum\\' variable equal to \\'Zero(0)\\'. Then keep \\'lines\\' variable as \\'One(1)\\'. Now iterate over the string \\'s\\' and update the \\'sum\\' with respect to the widths array. When \\'sum\\' gets the value greater than \\'100\\', we need to increment the \\'lines\\' variable by one time because each line should contain a maximum value of \\'100\\' only. And at the same time we need to update the \\'sum\\' variable as it gets over \\'100\\'. At last  we need to return a vector containing \\'number of lines\\' and \\'sum in the last line\\'.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int sum=0;\\n        int lines=1;\\n        for(int i=0;i<s.size();i++){\\n            sum=sum+widths[s[i]-\\'a\\'];\\n            if(sum>100){\\n                lines++;\\n                sum=widths[s[i]-\\'a\\'];\\n            }\\n            \\n            \\n        }\\n        vector <int> res;\\n        res.push_back(lines);\\n        res.push_back(sum);\\n\\n        return res;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int sum=0;\\n        int lines=1;\\n        for(int i=0;i<s.size();i++){\\n            sum=sum+widths[s[i]-\\'a\\'];\\n            if(sum>100){\\n                lines++;\\n                sum=widths[s[i]-\\'a\\'];\\n            }\\n            \\n            \\n        }\\n        vector <int> res;\\n        res.push_back(lines);\\n        res.push_back(sum);\\n\\n        return res;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3960355,
                "title": "beats-100-solution-for-beginner-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int sum0=0; // sum of all string widths \\n        int sum=0;\\n        int sum1=0; // count of each line\\n        int count=0; // count of lines\\n        vector<int>ans; // store final ans\\n        vector<int>v; // store each lines width\\n        for(char c : s){\\n            sum0 += widths[c-97]; // sum of all string widths\\n            sum += widths[c-97];\\n            if(sum>100){\\n                v.push_back(sum1);\\n                count++;\\n                sum=sum-sum1;\\n            }\\n            else if(sum<=100){\\n                sum1=sum;\\n            }\\n        }\\n        int last = sum0; \\n        for(int j=0;j<v.size();j++){\\n            last=last-v[j]; //last==last_line_pixel\\n        }\\n        if(last>0) count++;// if last>0, then their should be last line\\n        ans.push_back(count);\\n        ans.push_back(last);\\n\\n        return ans;\\n    }\\n}; // plz upvote\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int sum0=0; // sum of all string widths \\n        int sum=0;\\n        int sum1=0; // count of each line\\n        int count=0; // count of lines\\n        vector<int>ans; // store final ans\\n        vector<int>v; // store each lines width\\n        for(char c : s){\\n            sum0 += widths[c-97]; // sum of all string widths\\n            sum += widths[c-97];\\n            if(sum>100){\\n                v.push_back(sum1);\\n                count++;\\n                sum=sum-sum1;\\n            }\\n            else if(sum<=100){\\n                sum1=sum;\\n            }\\n        }\\n        int last = sum0; \\n        for(int j=0;j<v.size();j++){\\n            last=last-v[j]; //last==last_line_pixel\\n        }\\n        if(last>0) count++;// if last>0, then their should be last line\\n        ans.push_back(count);\\n        ans.push_back(last);\\n\\n        return ans;\\n    }\\n}; // plz upvote\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3954528,
                "title": "c-best-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        vector<int> v(2);\\n        int last_width = 0;\\n        int total_width = 0;\\n        int total_line = 0;\\n        for(int i = 0;i<s.size();i++){\\n            bool flag = 0;\\n            char c= s[i];\\n            if(total_width > 100 || flag){\\n                if(total_width > 100){\\n                    total_width = total_width - widths[s[i-1] - 97];\\n                    --i;\\n                }\\n                last_width = total_width;\\n                total_line++;\\n                total_width = 0;\\n            }\\n            else{\\n                total_width = total_width + widths[c-97];\\n                if(total_width > 100){\\n                    --i;\\n                    flag = 1;\\n                }\\n            }\\n        }\\n        if(total_width >0){\\n            total_line++;\\n            last_width = total_width;\\n        }\\n        v[0] = total_line;\\n        v[1] = last_width;\\n        return v;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        vector<int> v(2);\\n        int last_width = 0;\\n        int total_width = 0;\\n        int total_line = 0;\\n        for(int i = 0;i<s.size();i++){\\n            bool flag = 0;\\n            char c= s[i];\\n            if(total_width > 100 || flag){\\n                if(total_width > 100){\\n                    total_width = total_width - widths[s[i-1] - 97];\\n                    --i;\\n                }\\n                last_width = total_width;\\n                total_line++;\\n                total_width = 0;\\n            }\\n            else{\\n                total_width = total_width + widths[c-97];\\n                if(total_width > 100){\\n                    --i;\\n                    flag = 1;\\n                }\\n            }\\n        }\\n        if(total_width >0){\\n            total_line++;\\n            last_width = total_width;\\n        }\\n        v[0] = total_line;\\n        v[1] = last_width;\\n        return v;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3950571,
                "title": "easy-to-understand-python3-solution-tc-o-n-sc-o-1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        ref = ord(\\'a\\')\\n\\n        i,line,count = 0,0,0\\n\\n        while i < len(s):\\n            line += 1\\n            count = 0\\n            while count <= 100 and i < len(s):\\n                count += widths[ord(s[i]) - ref]\\n                i += 1\\n            \\n            if count > 100:\\n                i -= 1\\n                count -= widths[ord(s[i]) - ref]\\n\\n        return [line, count]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        ref = ord(\\'a\\')\\n\\n        i,line,count = 0,0,0\\n\\n        while i < len(s):\\n            line += 1\\n            count = 0\\n            while count <= 100 and i < len(s):\\n                count += widths[ord(s[i]) - ref]\\n                i += 1\\n            \\n            if count > 100:\\n                i -= 1\\n                count -= widths[ord(s[i]) - ref]\\n\\n        return [line, count]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3950157,
                "title": "easy-c-solution-beginner-s-friendly",
                "content": "\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n    int sum=0;\\n    int count=0;\\n    for(int i=0;i<s.size();i++){\\n        int value=widths[s[i]+\\'0\\'-145];\\n        if(sum+value<=100){\\n            sum=sum+value;\\n        }\\n        else{\\n            count++;\\n            sum=0;\\n            sum=sum+value;\\n        }\\n    }\\n    vector<int> result;\\n    result.push_back(count+1);\\n    result.push_back(sum);\\n    return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n    int sum=0;\\n    int count=0;\\n    for(int i=0;i<s.size();i++){\\n        int value=widths[s[i]+\\'0\\'-145];\\n        if(sum+value<=100){\\n            sum=sum+value;\\n        }\\n        else{\\n            count++;\\n            sum=0;\\n            sum=sum+value;\\n        }\\n    }\\n    vector<int> result;\\n    result.push_back(count+1);\\n    result.push_back(sum);\\n    return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3943646,
                "title": "java-fastest-solution",
                "content": "\\n# Complexity\\n- Time complexity:  $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int[] result = new int[2];\\n        int count = 0, lines  = 0;\\n\\n        for(char c : s.toCharArray()){\\n            count += widths[c -\\'a\\'];\\n\\n            if(count > 100){\\n                lines++;\\n                count = widths[c-\\'a\\'];\\n            }\\n        }\\n\\n        result[0] = lines+1;\\n        result[1] = count;\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int[] result = new int[2];\\n        int count = 0, lines  = 0;\\n\\n        for(char c : s.toCharArray()){\\n            count += widths[c -\\'a\\'];\\n\\n            if(count > 100){\\n                lines++;\\n                count = widths[c-\\'a\\'];\\n            }\\n        }\\n\\n        result[0] = lines+1;\\n        result[1] = count;\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3939955,
                "title": "the-native-solution-is-explained-100-check-it-out",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe given code defines a C++ class Solution with a member function numberOfLines. This function takes two parameters: a vector of integers widths representing the widths of lowercase English letters, and a string s containing lowercase English letters. The goal is to determine how many lines it takes to write the string s using the given widths for each character, and the total width of the last line.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1.Initialize total to 0 to keep track of the current line\\'s total width and lines to 1 to represent the first line.\\n2.Loop through each character in the string s.\\n3.For each character in s, calculate the index by subtracting \\'a\\' from its ASCII value. This index corresponds to the width of that character in the widths vector.\\n4.Add the width of the character to the total.\\n5.Check if the total exceeds 100, which represents the maximum line width allowed.\\n    If it does, increment the lines counter to represent a new line and reset the total to the width of the current character.\\n6Continue this process until all characters in the string s have been processed.\\n7.Finally, return a vector containing two values: lines, which represents the total number of lines required to write the string, and total, which represents the width of the last line.\\n# Complexity\\n- Time complexity: O(n  )\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of this code is O(n), where n is the length of the input string s. This is because the code iterates through each character in the string once and performs constant time operations for each character.\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of this code is O(1) because it uses a constant amount of extra space to store the total and lines variables, regardless of the input size. The returned vector also has a constant size (always two elements). The widths vector is provided as input and is not counted towards the space complexity of the function.\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        \\n        int total = 0, lines = 1;\\n        for(int i = 0; i < s.length(); ++i){\\n            int index = (s[i] - \\'a\\');\\n\\n            total += widths[index];\\n\\n            if(total > 100){\\n                ++lines;\\n                total = widths[index];\\n            }\\n        }\\n\\n        return {lines, total};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        \\n        int total = 0, lines = 1;\\n        for(int i = 0; i < s.length(); ++i){\\n            int index = (s[i] - \\'a\\');\\n\\n            total += widths[index];\\n\\n            if(total > 100){\\n                ++lines;\\n                total = widths[index];\\n            }\\n        }\\n\\n        return {lines, total};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3939324,
                "title": "806-number-of-lines-to-write-string",
                "content": "\\n\\n# Complexity\\n- Time complexity:\\n-time complexity here,  O(n)\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n         int lines = 1; // Initialize with at least one line\\n        int currentWidth = 0; // Width of current line\\n        \\n        for (char c : s.toCharArray()) {\\n            int charWidth = widths[c - \\'a\\'];\\n            \\n            if (currentWidth + charWidth > 100) {\\n                lines++;\\n                currentWidth = 0;\\n            }\\n            \\n            currentWidth += charWidth;\\n        }\\n        \\n        return new int[] { lines, currentWidth };\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n         int lines = 1; // Initialize with at least one line\\n        int currentWidth = 0; // Width of current line\\n        \\n        for (char c : s.toCharArray()) {\\n            int charWidth = widths[c - \\'a\\'];\\n            \\n            if (currentWidth + charWidth > 100) {\\n                lines++;\\n                currentWidth = 0;\\n            }\\n            \\n            currentWidth += charWidth;\\n        }\\n        \\n        return new int[] { lines, currentWidth };\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3938006,
                "title": "c-simple-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int sum=0;\\n        vector<int>ans;\\n        int flag=0;\\n        for(int i=0;i<s.size();i++){\\n            int c=s[i]-97;\\n            sum=sum+widths[c];\\n         \\n            if(sum>100){\\n                flag++;\\n                sum=0;\\n                i--;\\n\\n            }\\n            if(sum==100){\\n                 flag++;\\n                sum=0;\\n             \\n\\n            }\\n        }\\n        if(sum==0){\\n            sum=100;\\n            flag--;\\n        }\\n        ans.push_back(flag+1);\\n        ans.push_back(sum);\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int sum=0;\\n        vector<int>ans;\\n        int flag=0;\\n        for(int i=0;i<s.size();i++){\\n            int c=s[i]-97;\\n            sum=sum+widths[c];\\n         \\n            if(sum>100){\\n                flag++;\\n                sum=0;\\n                i--;\\n\\n            }\\n            if(sum==100){\\n                 flag++;\\n                sum=0;\\n             \\n\\n            }\\n        }\\n        if(sum==0){\\n            sum=100;\\n            flag--;\\n        }\\n        ans.push_back(flag+1);\\n        ans.push_back(sum);\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3937705,
                "title": "python-simple-solution-begginer-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        limit = 0\\n        classification = []\\n        chunk = \\'\\'\\n\\n        for char in s:\\n            test = limit + widths[ord(char) - ord(\\'a\\')]\\n            if test <= 100:\\n                chunk += char\\n                limit += widths[ord(char) - ord(\\'a\\')]\\n            else:\\n                classification.append(chunk)\\n                limit = widths[ord(char) - ord(\\'a\\')]\\n                chunk = char\\n\\n        classification.append(chunk)\\n        last_line_width = sum([widths[ord(char) - ord(\\'a\\')] for char in classification[-1]])\\n\\n        return [len(classification), last_line_width]\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        limit = 0\\n        classification = []\\n        chunk = \\'\\'\\n\\n        for char in s:\\n            test = limit + widths[ord(char) - ord(\\'a\\')]\\n            if test <= 100:\\n                chunk += char\\n                limit += widths[ord(char) - ord(\\'a\\')]\\n            else:\\n                classification.append(chunk)\\n                limit = widths[ord(char) - ord(\\'a\\')]\\n                chunk = char\\n\\n        classification.append(chunk)\\n        last_line_width = sum([widths[ord(char) - ord(\\'a\\')] for char in classification[-1]])\\n\\n        return [len(classification), last_line_width]\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3931270,
                "title": "easy-cpp-solution-beats-100-in-runtime-beginner-friendly",
                "content": "![image.png](https://assets.leetcode.com/users/images/922fa01e-291e-43bb-bf94-dd6965dad015_1692449674.611826.png)\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n       int noOfLines = 0, cnt=0;\\n       for(auto i : s){\\n           if(cnt + widths[i - \\'a\\'] > 100){\\n               noOfLines++;\\n               cnt = widths[i - \\'a\\'];\\n           }\\n           else cnt += widths[i - \\'a\\'];\\n       } \\n       return {noOfLines+1, cnt};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n       int noOfLines = 0, cnt=0;\\n       for(auto i : s){\\n           if(cnt + widths[i - \\'a\\'] > 100){\\n               noOfLines++;\\n               cnt = widths[i - \\'a\\'];\\n           }\\n           else cnt += widths[i - \\'a\\'];\\n       } \\n       return {noOfLines+1, cnt};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3927013,
                "title": "number-of-lines-to-write-string-using-c",
                "content": "# Intuition \\uD83E\\uDD14\\nI\\'m thinking of solving this problem by iterating through each character in the given string and keeping track of the total width used. Whenever the width exceeds 100, I\\'ll start a new line and reset the width count.\\n\\n# Approach \\uD83D\\uDE80\\n1. Initialize variables: Create a vector v to store the result. Set sum to 0 to keep track of the current line\\'s width. Set line to 1 to count the number of lines used.\\n\\n2. Iterate through the string: For each character c in the string s:\\n\\n- Add the width of character c to the sum.\\n- If sum exceeds 100, reset sum to the width of character c and increment line.\\n3. Store the result: After iterating through the string, push the line count and the final sum to the vector v.\\n\\n4. Return the result vector v.\\n\\n# Complexity \\uD83D\\uDCCA\\n- Time complexity: The algorithm iterates through each character in the string once, resulting in a linear time complexity of O(n), where n is the length of the string.\\n\\n- Space complexity: The additional space used is for a few integer variables, resulting in constant space usage, i.e., O(1).\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        vector<int> v;\\n        int n = widths.size();\\n        int m = s.size();\\n        int sum=0;\\n        int line = 1 ;\\n        for( int i=0;i<m;i++){\\n            sum += widths[s[i]-\\'a\\'];\\n            if(sum > 100){\\n                sum = widths[s[i]-\\'a\\'];\\n                line++;\\n            }\\n        }\\n        v.push_back(line);\\n        v.push_back(sum);\\n        return v;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        vector<int> v;\\n        int n = widths.size();\\n        int m = s.size();\\n        int sum=0;\\n        int line = 1 ;\\n        for( int i=0;i<m;i++){\\n            sum += widths[s[i]-\\'a\\'];\\n            if(sum > 100){\\n                sum = widths[s[i]-\\'a\\'];\\n                line++;\\n            }\\n        }\\n        v.push_back(line);\\n        v.push_back(sum);\\n        return v;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3922263,
                "title": "beats-93",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        line=0\\n        pixel=0\\n        for i in range(len(s)):\\n            if pixel+widths[ord(s[i])-97]>100:\\n                line+=1\\n                pixel=widths[ord(s[i])-97]\\n            else:\\n                \\n                pixel+=widths[ord(s[i])-97]\\n                \\n        return [line+1,pixel]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        line=0\\n        pixel=0\\n        for i in range(len(s)):\\n            if pixel+widths[ord(s[i])-97]>100:\\n                line+=1\\n                pixel=widths[ord(s[i])-97]\\n            else:\\n                \\n                pixel+=widths[ord(s[i])-97]\\n                \\n        return [line+1,pixel]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3913562,
                "title": "short-ans-well-explained",
                "content": "# Intuition\\nTwo variables are needed, one to count pixels and other to count line.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N), one for loop used\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N) as new array is made.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n         int line = 0;\\n        int pixelCount = 0;\\n        \\n        for (int i = 0; i < s.length(); i++) {\\n            int index = s.charAt(i) - \\'a\\';\\n            pixelCount += widths[index];\\n            \\n            if (pixelCount > 100) {\\n                i--; // if it exceeds 100\\n                line++;\\n                pixelCount = 0;\\n            }\\n        }\\n        // Last line\\n        if (pixelCount != 0) {\\n            line++;\\n        }\\n        \\n        // Making new array\\n        return new int[]{line, pixelCount};\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n         int line = 0;\\n        int pixelCount = 0;\\n        \\n        for (int i = 0; i < s.length(); i++) {\\n            int index = s.charAt(i) - \\'a\\';\\n            pixelCount += widths[index];\\n            \\n            if (pixelCount > 100) {\\n                i--; // if it exceeds 100\\n                line++;\\n                pixelCount = 0;\\n            }\\n        }\\n        // Last line\\n        if (pixelCount != 0) {\\n            line++;\\n        }\\n        \\n        // Making new array\\n        return new int[]{line, pixelCount};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3912149,
                "title": "beats-easy-beginner-friendly-solution-simple-and-easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] w, String s) {\\n        int n=s.length(),sum=0,i=0,c=0;\\n        // sum=w[s.charAt(0)-\\'a\\'];\\n        int[] ans=new int[2];\\n        while(i<n){\\n            if(sum+w[s.charAt(i)-\\'a\\']<=100){\\n                sum+=w[s.charAt(i)-\\'a\\'];\\n                i++;\\n            }\\n            else{\\n                c++;\\n                sum=0;\\n                sum+=w[s.charAt(i)-\\'a\\'];\\n                i++;\\n            }\\n            // System.out.println(sum+\" \"+c);\\n        }\\n        ans[0]=c+1;\\n        ans[1]=sum;\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] w, String s) {\\n        int n=s.length(),sum=0,i=0,c=0;\\n        // sum=w[s.charAt(0)-\\'a\\'];\\n        int[] ans=new int[2];\\n        while(i<n){\\n            if(sum+w[s.charAt(i)-\\'a\\']<=100){\\n                sum+=w[s.charAt(i)-\\'a\\'];\\n                i++;\\n            }\\n            else{\\n                c++;\\n                sum=0;\\n                sum+=w[s.charAt(i)-\\'a\\'];\\n                i++;\\n            }\\n            // System.out.println(sum+\" \"+c);\\n        }\\n        ans[0]=c+1;\\n        ans[1]=sum;\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3905776,
                "title": "c-easier-to-understand-beats-100-00-of-users-with-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\nRun Time: Beats 100.00% of users with C++\\n\\nMemory: Beats 15.82%of users with C++\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int line = 1 ; // The initial line is 1 \\n        int currWidth = 0 ;\\n\\n        for(char c : s ){\\n            int width = widths[c-\\'a\\'];\\n            if(currWidth + width  <= 100){\\n                currWidth += width;\\n            }\\n            else{\\n                ++line;\\n                currWidth = width;\\n            }\\n        }\\n        return {line, currWidth};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int line = 1 ; // The initial line is 1 \\n        int currWidth = 0 ;\\n\\n        for(char c : s ){\\n            int width = widths[c-\\'a\\'];\\n            if(currWidth + width  <= 100){\\n                currWidth += width;\\n            }\\n            else{\\n                ++line;\\n                currWidth = width;\\n            }\\n        }\\n        return {line, currWidth};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3902324,
                "title": "beats-100-00-of-users-with-java",
                "content": "# Faster Solution\\nBeats 100.00% of users with Java\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        \\n    \\n        int currentLinePixel = 0;\\n        int noOfLines = 1;\\n        char[] charArray = s.toCharArray();\\n\\n        for(int i = 0 ; i<s.length() ; i ++) {\\n            char c = charArray[i];\\n            int charWidth = widths[c - \\'a\\'];\\n           if (currentLinePixel + charWidth > 100) {\\n            noOfLines++;\\n            currentLinePixel = charWidth;\\n        } else {\\n            currentLinePixel += charWidth;\\n        }\\n\\n\\n        }\\n \\n      return new int[] {noOfLines, currentLinePixel};\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        \\n    \\n        int currentLinePixel = 0;\\n        int noOfLines = 1;\\n        char[] charArray = s.toCharArray();\\n\\n        for(int i = 0 ; i<s.length() ; i ++) {\\n            char c = charArray[i];\\n            int charWidth = widths[c - \\'a\\'];\\n           if (currentLinePixel + charWidth > 100) {\\n            noOfLines++;\\n            currentLinePixel = charWidth;\\n        } else {\\n            currentLinePixel += charWidth;\\n        }\\n\\n\\n        }\\n \\n      return new int[] {noOfLines, currentLinePixel};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3898355,
                "title": "c-sol-easy-approach",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& width, string s) {\\n        int i,sum=0,line=1;\\n        for(i=0;i<s.size();i++){\\n            sum+=width[s[i]-\\'a\\'];\\n            if(sum>100){\\n                line++;\\n                sum=width[s[i]-\\'a\\'];\\n            }\\n        }\\n        return {line,sum};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& width, string s) {\\n        int i,sum=0,line=1;\\n        for(i=0;i<s.size();i++){\\n            sum+=width[s[i]-\\'a\\'];\\n            if(sum>100){\\n                line++;\\n                sum=width[s[i]-\\'a\\'];\\n            }\\n        }\\n        return {line,sum};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3894857,
                "title": "easy-solutions-in-typescript-and-rust",
                "content": "# TypeScript\\n```\\nfunction numberOfLines(widths: number[], s: string): number[] {\\n    let lines = 1;\\n    let currLineWidth = 0;\\n\\n    for (const c of s) {\\n        const charWidth = widths[c.charCodeAt(0) -  \\'a\\'.charCodeAt(0)];\\n\\n        if (currLineWidth + charWidth > 100) {\\n            lines++;\\n            currLineWidth = 0;\\n        }\\n\\n        currLineWidth += charWidth;\\n    }\\n\\n    return [lines, currLineWidth];\\n};\\n```\\n\\n# Rust\\n```\\nimpl Solution {\\n    pub fn number_of_lines(widths: Vec<i32>, s: String) -> Vec<i32> {\\n        let mut lines = 1;\\n        let mut curr_line_width = 0;\\n\\n        for c in s.chars() {\\n            let char_width = widths[c as usize - \\'a\\' as usize];\\n\\n            if curr_line_width + char_width > 100 {\\n                lines += 1;\\n                curr_line_width = 0;\\n            }\\n\\n            curr_line_width += char_width;\\n        }\\n\\n        vec![lines, curr_line_width]\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nfunction numberOfLines(widths: number[], s: string): number[] {\\n    let lines = 1;\\n    let currLineWidth = 0;\\n\\n    for (const c of s) {\\n        const charWidth = widths[c.charCodeAt(0) -  \\'a\\'.charCodeAt(0)];\\n\\n        if (currLineWidth + charWidth > 100) {\\n            lines++;\\n            currLineWidth = 0;\\n        }\\n\\n        currLineWidth += charWidth;\\n    }\\n\\n    return [lines, currLineWidth];\\n};\\n```\n```\\nimpl Solution {\\n    pub fn number_of_lines(widths: Vec<i32>, s: String) -> Vec<i32> {\\n        let mut lines = 1;\\n        let mut curr_line_width = 0;\\n\\n        for c in s.chars() {\\n            let char_width = widths[c as usize - \\'a\\' as usize];\\n\\n            if curr_line_width + char_width > 100 {\\n                lines += 1;\\n                curr_line_width = 0;\\n            }\\n\\n            curr_line_width += char_width;\\n        }\\n\\n        vec![lines, curr_line_width]\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3892885,
                "title": "c-solution-3ms-runtime",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int sum = 0;\\n        int count = 0;\\n        int i = 0;\\n        while(i<s.length()){\\n            if(sum + widths[s[i] - \\'a\\']<=100){\\n                sum = sum + widths[s[i] - \\'a\\'];\\n                i++;\\n            }\\n            else{\\n                count++;\\n                sum = 0;\\n            }\\n        }\\n        count++;\\n        vector<int> ans(2);\\n        ans[0] = count;\\n        ans[1] = sum;\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int sum = 0;\\n        int count = 0;\\n        int i = 0;\\n        while(i<s.length()){\\n            if(sum + widths[s[i] - \\'a\\']<=100){\\n                sum = sum + widths[s[i] - \\'a\\'];\\n                i++;\\n            }\\n            else{\\n                count++;\\n                sum = 0;\\n            }\\n        }\\n        count++;\\n        vector<int> ans(2);\\n        ans[0] = count;\\n        ans[1] = sum;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3892883,
                "title": "java-solution-1ms-runtime",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int sum = 0;\\n        int count = 0;\\n        int i = 0;\\n        while(i<s.length()){\\n            int n = (int)(s.charAt(i)) - 97;\\n            if(sum + widths[n]<=100){\\n                sum = sum + widths[n];\\n                i++;\\n            }\\n            else{\\n                count++;\\n                sum = 0;\\n            }\\n        }\\n        count++;\\n        int ans[] = new int[2];\\n        ans[0] = count;\\n        ans[1] = sum;\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int sum = 0;\\n        int count = 0;\\n        int i = 0;\\n        while(i<s.length()){\\n            int n = (int)(s.charAt(i)) - 97;\\n            if(sum + widths[n]<=100){\\n                sum = sum + widths[n];\\n                i++;\\n            }\\n            else{\\n                count++;\\n                sum = 0;\\n            }\\n        }\\n        count++;\\n        int ans[] = new int[2];\\n        ans[0] = count;\\n        ans[1] = sum;\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3859400,
                "title": "90-above-easy-and-understandable",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        d = dict()\\n        for i in range(0,26):\\n            d[chr(ord(\\'a\\')+i)]=widths[i]\\n\\n        s1,count = 0,1\\n        i=0\\n        while s1<100 and i<len(s):\\n            r = s[i]\\n            s1+=d[r]\\n            if s1==100:\\n                s1=0\\n                count+=1\\n            elif s1>100:\\n                s1=d[s[i]]\\n                count+=1\\n            i+=1\\n        l=[]\\n        if s1==0:\\n            s1=100\\n            count-=1\\n        l.append(count)\\n        l.append(s1)\\n        return l\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        d = dict()\\n        for i in range(0,26):\\n            d[chr(ord(\\'a\\')+i)]=widths[i]\\n\\n        s1,count = 0,1\\n        i=0\\n        while s1<100 and i<len(s):\\n            r = s[i]\\n            s1+=d[r]\\n            if s1==100:\\n                s1=0\\n                count+=1\\n            elif s1>100:\\n                s1=d[s[i]]\\n                count+=1\\n            i+=1\\n        l=[]\\n        if s1==0:\\n            s1=100\\n            count-=1\\n        l.append(count)\\n        l.append(s1)\\n        return l\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3855797,
                "title": "java-easy",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int a[]= new int[2];\\n\\t\\tLinkedHashMap<String, Integer> map= new LinkedHashMap<>();\\n\\t\\tint sum=0;\\n\\t\\tint newline=1;\\n\\t\\tint codePoint=97;\\n\\t\\tint lastsumvalue=0;\\n\\t\\tfor (int i = 0; i<=widths.length-1; i++) {\\n\\t\\t\\t\\n\\t\\t\\tmap.put(Character.toString(codePoint), widths[i]);\\n\\t\\t\\tcodePoint++;\\n\\t\\t}\\n\\t\\tfor(int i=0;i<=s.length()-1;i++)\\n\\t\\t{\\n\\t\\tint value=\\tmap.get(String.valueOf(s.charAt(i)));\\n\\t\\tsum=sum+value;\\n\\t\\tif(sum>100)\\n\\t\\t{\\n\\t\\t\\tsum=0;\\n\\t\\t\\tnewline++;\\n\\t\\t\\t\\n\\t\\t\\tsum=sum+value;\\n\\t\\t}\\n\\t\\tlastsumvalue=sum;\\n\\t\\t}\\n\\t\\ta[0]=newline;\\n\\t\\ta[1]=lastsumvalue;\\nreturn a;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int a[]= new int[2];\\n\\t\\tLinkedHashMap<String, Integer> map= new LinkedHashMap<>();\\n\\t\\tint sum=0;\\n\\t\\tint newline=1;\\n\\t\\tint codePoint=97;\\n\\t\\tint lastsumvalue=0;\\n\\t\\tfor (int i = 0; i<=widths.length-1; i++) {\\n\\t\\t\\t\\n\\t\\t\\tmap.put(Character.toString(codePoint), widths[i]);\\n\\t\\t\\tcodePoint++;\\n\\t\\t}\\n\\t\\tfor(int i=0;i<=s.length()-1;i++)\\n\\t\\t{\\n\\t\\tint value=\\tmap.get(String.valueOf(s.charAt(i)));\\n\\t\\tsum=sum+value;\\n\\t\\tif(sum>100)\\n\\t\\t{\\n\\t\\t\\tsum=0;\\n\\t\\t\\tnewline++;\\n\\t\\t\\t\\n\\t\\t\\tsum=sum+value;\\n\\t\\t}\\n\\t\\tlastsumvalue=sum;\\n\\t\\t}\\n\\t\\ta[0]=newline;\\n\\t\\ta[1]=lastsumvalue;\\nreturn a;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3847258,
                "title": "best-runtime",
                "content": "\\n# Complexity\\nO(n)\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n       int l=0,p=0;\\n       char a;\\n       for (int i=0;i<s.length();i++){\\n           a=s.charAt(i);\\n           p=p+widths[a-97];\\n           if(p>100){\\n               p=0;\\n               l++;\\n               i--;\\n           }\\n       }\\n       int i[]={++l,p};\\n       return i;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n       int l=0,p=0;\\n       char a;\\n       for (int i=0;i<s.length();i++){\\n           a=s.charAt(i);\\n           p=p+widths[a-97];\\n           if(p>100){\\n               p=0;\\n               l++;\\n               i--;\\n           }\\n       }\\n       int i[]={++l,p};\\n       return i;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3845646,
                "title": "c-simple-and-readable",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\no(n) with 100% beat(0ms).\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n0(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        vector<int>result;\\n        int count=0;  //vector<string>p;\\n        string q=\"\";\\n        int width=0;\\n        for(int i=0;i<s.length();i++){\\n            int index=s[i]-\\'a\\';\\n            q+=s[i];\\n            width+=widths[index];\\n            if(width>100){\\n                q.pop_back();\\n                i=i-1;\\n                count+=1;  //p.push_back(q);\\n                q=\"\";\\n                width=0;\\n            }\\n        }\\n        count+=1;    //p.push_back(q);\\n        int num1=count;   //p.size();\\n        int num2=width;\\n        result.push_back(num1);\\n        result.push_back(num2);\\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        vector<int>result;\\n        int count=0;  //vector<string>p;\\n        string q=\"\";\\n        int width=0;\\n        for(int i=0;i<s.length();i++){\\n            int index=s[i]-\\'a\\';\\n            q+=s[i];\\n            width+=widths[index];\\n            if(width>100){\\n                q.pop_back();\\n                i=i-1;\\n                count+=1;  //p.push_back(q);\\n                q=\"\";\\n                width=0;\\n            }\\n        }\\n        count+=1;    //p.push_back(q);\\n        int num1=count;   //p.size();\\n        int num2=width;\\n        result.push_back(num1);\\n        result.push_back(num2);\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3831468,
                "title": "number-of-lines-to-write-string",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        HashMap<Character,Integer> hm = new HashMap<Character,Integer>();\\n        for(int i=0;i<26;i++)\\n        {\\n            hm.put((char)(97+i),widths[i]);\\n        }\\n        int line = 1;\\n        int sum = 0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            sum=sum+hm.get(s.charAt(i));\\n            if(sum>100)\\n            {\\n                line++;\\n                sum = hm.get(s.charAt(i));\\n            }\\n            if(sum==100)\\n            {if(i!=s.length()-1)\\n            {sum=0;\\n            line++;}}\\n        }\\n        int[] arr = new int[2];\\n        arr[0] = line;\\n        arr[1] = sum;\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        HashMap<Character,Integer> hm = new HashMap<Character,Integer>();\\n        for(int i=0;i<26;i++)\\n        {\\n            hm.put((char)(97+i),widths[i]);\\n        }\\n        int line = 1;\\n        int sum = 0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            sum=sum+hm.get(s.charAt(i));\\n            if(sum>100)\\n            {\\n                line++;\\n                sum = hm.get(s.charAt(i));\\n            }\\n            if(sum==100)\\n            {if(i!=s.length()-1)\\n            {sum=0;\\n            line++;}}\\n        }\\n        int[] arr = new int[2];\\n        arr[0] = line;\\n        arr[1] = sum;\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3825192,
                "title": "beats-100-00-of-users-with-c-easy-approach-one-pass-o-n-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int cnt=0,curr_sum=0;\\n        int n=s.size();\\n        for(int i=0;i<n;i++)\\n        {\\n            curr_sum+=widths[s[i]-\\'a\\'];\\n            if(curr_sum>100)\\n            {\\n                curr_sum = widths[s[i]-\\'a\\'];\\n                cnt++;\\n            }\\n        }\\n        return {cnt + 1,curr_sum};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int cnt=0,curr_sum=0;\\n        int n=s.size();\\n        for(int i=0;i<n;i++)\\n        {\\n            curr_sum+=widths[s[i]-\\'a\\'];\\n            if(curr_sum>100)\\n            {\\n                curr_sum = widths[s[i]-\\'a\\'];\\n                cnt++;\\n            }\\n        }\\n        return {cnt + 1,curr_sum};\\n    }\\n};\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1564753,
                "content": [
                    {
                        "username": "georgemeng2001@gmail.com",
                        "content": "The description is so bad, it does not give a clear description, the example helps, but has to read multiple times to guess and guess.\\n"
                    },
                    {
                        "username": "sjw214",
                        "content": "No idea what\\'s even being asked."
                    },
                    {
                        "username": "kenumida",
                        "content": "as the subject"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "my face when I read description \\uD83D\\uDE28\\uD83D\\uDE28\\uD83D\\uDE28\\nmy face when I looked at example \\uD83D\\uDE30\\uD83D\\uDE30\\uD83D\\uDE31\\uD83D\\uDE31 "
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "Is there something wrong with the testcase where s=\"mqblbtpvicqhbrejb\"? My solution works perfectly fine for all the other testcases (26/27) except this one. "
                    },
                    {
                        "username": "mayanksinghbohra",
                        "content": "[@arshadsaifi](/arshadsaifi) yeah , thanks for the response even though i corrected it previously i forgot to delete my comment\\n"
                    },
                    {
                        "username": "arshadsaifi",
                        "content": "No, the question is fine. You might have missed the case where the length of a line can be 100px. And your code might be returning 0 for that case."
                    },
                    {
                        "username": "mayanksinghbohra",
                        "content": "for that test case , the total sum comes out to be 100 , which means only 1 line will be required , and the last line will be 100 pixels wide because there is only one line.\\nYou will have to add another condition for this according to your code."
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "All cases passed for me. How to get test case  #26 input in UI? Or please post it here."
                    }
                ]
            },
            {
                "id": 1566104,
                "content": [
                    {
                        "username": "georgemeng2001@gmail.com",
                        "content": "The description is so bad, it does not give a clear description, the example helps, but has to read multiple times to guess and guess.\\n"
                    },
                    {
                        "username": "sjw214",
                        "content": "No idea what\\'s even being asked."
                    },
                    {
                        "username": "kenumida",
                        "content": "as the subject"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "my face when I read description \\uD83D\\uDE28\\uD83D\\uDE28\\uD83D\\uDE28\\nmy face when I looked at example \\uD83D\\uDE30\\uD83D\\uDE30\\uD83D\\uDE31\\uD83D\\uDE31 "
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "Is there something wrong with the testcase where s=\"mqblbtpvicqhbrejb\"? My solution works perfectly fine for all the other testcases (26/27) except this one. "
                    },
                    {
                        "username": "mayanksinghbohra",
                        "content": "[@arshadsaifi](/arshadsaifi) yeah , thanks for the response even though i corrected it previously i forgot to delete my comment\\n"
                    },
                    {
                        "username": "arshadsaifi",
                        "content": "No, the question is fine. You might have missed the case where the length of a line can be 100px. And your code might be returning 0 for that case."
                    },
                    {
                        "username": "mayanksinghbohra",
                        "content": "for that test case , the total sum comes out to be 100 , which means only 1 line will be required , and the last line will be 100 pixels wide because there is only one line.\\nYou will have to add another condition for this according to your code."
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "All cases passed for me. How to get test case  #26 input in UI? Or please post it here."
                    }
                ]
            },
            {
                "id": 1566290,
                "content": [
                    {
                        "username": "georgemeng2001@gmail.com",
                        "content": "The description is so bad, it does not give a clear description, the example helps, but has to read multiple times to guess and guess.\\n"
                    },
                    {
                        "username": "sjw214",
                        "content": "No idea what\\'s even being asked."
                    },
                    {
                        "username": "kenumida",
                        "content": "as the subject"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "my face when I read description \\uD83D\\uDE28\\uD83D\\uDE28\\uD83D\\uDE28\\nmy face when I looked at example \\uD83D\\uDE30\\uD83D\\uDE30\\uD83D\\uDE31\\uD83D\\uDE31 "
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "Is there something wrong with the testcase where s=\"mqblbtpvicqhbrejb\"? My solution works perfectly fine for all the other testcases (26/27) except this one. "
                    },
                    {
                        "username": "mayanksinghbohra",
                        "content": "[@arshadsaifi](/arshadsaifi) yeah , thanks for the response even though i corrected it previously i forgot to delete my comment\\n"
                    },
                    {
                        "username": "arshadsaifi",
                        "content": "No, the question is fine. You might have missed the case where the length of a line can be 100px. And your code might be returning 0 for that case."
                    },
                    {
                        "username": "mayanksinghbohra",
                        "content": "for that test case , the total sum comes out to be 100 , which means only 1 line will be required , and the last line will be 100 pixels wide because there is only one line.\\nYou will have to add another condition for this according to your code."
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "All cases passed for me. How to get test case  #26 input in UI? Or please post it here."
                    }
                ]
            },
            {
                "id": 1876774,
                "content": [
                    {
                        "username": "georgemeng2001@gmail.com",
                        "content": "The description is so bad, it does not give a clear description, the example helps, but has to read multiple times to guess and guess.\\n"
                    },
                    {
                        "username": "sjw214",
                        "content": "No idea what\\'s even being asked."
                    },
                    {
                        "username": "kenumida",
                        "content": "as the subject"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "my face when I read description \\uD83D\\uDE28\\uD83D\\uDE28\\uD83D\\uDE28\\nmy face when I looked at example \\uD83D\\uDE30\\uD83D\\uDE30\\uD83D\\uDE31\\uD83D\\uDE31 "
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "Is there something wrong with the testcase where s=\"mqblbtpvicqhbrejb\"? My solution works perfectly fine for all the other testcases (26/27) except this one. "
                    },
                    {
                        "username": "mayanksinghbohra",
                        "content": "[@arshadsaifi](/arshadsaifi) yeah , thanks for the response even though i corrected it previously i forgot to delete my comment\\n"
                    },
                    {
                        "username": "arshadsaifi",
                        "content": "No, the question is fine. You might have missed the case where the length of a line can be 100px. And your code might be returning 0 for that case."
                    },
                    {
                        "username": "mayanksinghbohra",
                        "content": "for that test case , the total sum comes out to be 100 , which means only 1 line will be required , and the last line will be 100 pixels wide because there is only one line.\\nYou will have to add another condition for this according to your code."
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "All cases passed for me. How to get test case  #26 input in UI? Or please post it here."
                    }
                ]
            },
            {
                "id": 1783261,
                "content": [
                    {
                        "username": "georgemeng2001@gmail.com",
                        "content": "The description is so bad, it does not give a clear description, the example helps, but has to read multiple times to guess and guess.\\n"
                    },
                    {
                        "username": "sjw214",
                        "content": "No idea what\\'s even being asked."
                    },
                    {
                        "username": "kenumida",
                        "content": "as the subject"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "my face when I read description \\uD83D\\uDE28\\uD83D\\uDE28\\uD83D\\uDE28\\nmy face when I looked at example \\uD83D\\uDE30\\uD83D\\uDE30\\uD83D\\uDE31\\uD83D\\uDE31 "
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "Is there something wrong with the testcase where s=\"mqblbtpvicqhbrejb\"? My solution works perfectly fine for all the other testcases (26/27) except this one. "
                    },
                    {
                        "username": "mayanksinghbohra",
                        "content": "[@arshadsaifi](/arshadsaifi) yeah , thanks for the response even though i corrected it previously i forgot to delete my comment\\n"
                    },
                    {
                        "username": "arshadsaifi",
                        "content": "No, the question is fine. You might have missed the case where the length of a line can be 100px. And your code might be returning 0 for that case."
                    },
                    {
                        "username": "mayanksinghbohra",
                        "content": "for that test case , the total sum comes out to be 100 , which means only 1 line will be required , and the last line will be 100 pixels wide because there is only one line.\\nYou will have to add another condition for this according to your code."
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "All cases passed for me. How to get test case  #26 input in UI? Or please post it here."
                    }
                ]
            }
        ]
    }
]