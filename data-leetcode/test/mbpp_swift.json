[
    {
        "task_id": "100",
        "title": "next_smallest_palindrome",
        "text": "/ Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
        "code": "\nfunc next_smallest_palindrome(num: Int) -> Int {\n\tif num == 0 {\n\t\treturn 0\n\t}\n\tvar result Int\n\tfor i := 1; i < num; i++ {\n\t\tif num%i == 0 {\n\t\t\tresult = num\n\t\t\tbreak\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(next_smallest_palindrome(num: 99) == 101)",
            "assert(next_smallest_palindrome(num: 1221) == 1331)",
            "assert(next_smallest_palindrome(num: 120) == 121)"
        ]
    },
    {
        "task_id": "101",
        "title": "kth_element",
        "text": "/ Write a function to find the kth element in the given array using 1-based indexing.",
        "code": "\nfunc kth_element(arr: [Int], k: Int) -> Int {\n\tif len(arr) == 0 {\n\t\treturn 0\n\t}\n\tif k < 0 {\n\t\tk = len(arr) + k\n\t}\n\tif k >= len(arr) {\n\t\treturn 0\n\t}\n\treturn arr[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(kth_element(arr: [12, 3, 5, 7, 19], k: 2) == 3)",
            "assert(kth_element(arr: [17, 24, 8, 23], k: 3) == 8)",
            "assert(kth_element(arr: [16, 21, 25, 36, 4], k: 4) == 36)"
        ]
    },
    {
        "task_id": "102",
        "title": "snake_to_camel",
        "text": "/ Write a function to convert a snake case string to camel case string.",
        "code": "\nfunc snake_to_camel(word: String) -> String {\n\treturn strings.ToUpper(strings.Replace(word, \"_\", \"\", -1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")",
            "assert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")",
            "assert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")"
        ]
    },
    {
        "task_id": "103",
        "title": "eulerian_num",
        "text": "/ Write a function to find the Eulerian number a(n, m).",
        "code": "\nfunc eulerian_num(n: Int, m: Int) -> Int {\n\tif n == 0 || m == 0 {\n\t\treturn 0\n\t}\n\tif n == 1 {\n\t\treturn 1\n\t}\n\tif n == m {\n\t\treturn 1\n\t}\n\treturn eulerian_num(n-1, m-1) + eulerian_num(n-1, m-1) + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(eulerian_num(n: 3, m: 1) == 4)",
            "assert(eulerian_num(n: 4, m: 1) == 11)",
            "assert(eulerian_num(n: 5, m: 3) == 26)"
        ]
    },
    {
        "task_id": "104",
        "title": "sort_sublists",
        "text": "/ Write a function to sort each subarray of strings in a given array of arrays.",
        "code": "\nfunc sort_sublists(input_list: [[String]]) -> [[String]] {\n\toutput_list: [][]String\n\tfor i := 0; i < len(input_list); i += 1 {\n\t\toutput_list = append(output_list, input_list[i])\n\t}\n\treturn output_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(sort_sublists(input_list: [[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]) == [[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]])",
            "assert(sort_sublists(input_list: [[\" red \", \"green\"], [\"blue \", \" black\"], [\" orange\", \"brown\"]]) == [[\" red \", \"green\"], [\" black\", \"blue \"], [\" orange\", \"brown\"]])",
            "assert(sort_sublists(input_list: [[\"zilver\", \"gold\"], [\"magnesium\", \"aluminium\"], [\"steel\", \"bronze\"]]) == [[\"gold\", \"zilver\"], [\"aluminium\", \"magnesium\"], [\"bronze\", \"steel\"]])"
        ]
    },
    {
        "task_id": "105",
        "title": "count",
        "text": "/ Write a swiftthon function to count true booleans in the given array.",
        "code": "\nfunc count(lst: [Bool]) -> Int {\n\tvar count int\n\tfor _, b := range lst {\n\t\tif b {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(count(lst: [true, false, true]) == 2)",
            "assert(count(lst: [false, false]) == 0)",
            "assert(count(lst: [true, true, true]) == 3)"
        ]
    },
    {
        "task_id": "106",
        "title": "add_lists",
        "text": "/ Write a function to append the given array to the given tuples.",
        "code": "\nfunc add_lists(test_list: [Int], test_tup: (Int, Int)) -> (Int, Int, Int, Int, Int) {\n\tvar test_list_len int\n\tfor i := 0; i < len(test_list); i++ {\n\t\ttest_list_len += len(test_list[i])\n\t}\n\ttest_list = append(test_list, test_list[0])\n\ttest_tup = append(test_tup, test_list[0])\n\tfor i := 1; i < len(test_list); i++ {\n\t\ttest_list = append(test_list, test_list[i])\n\t\ttest_tup = append(test_tup, test_list[i])\n\t}\n\treturn test_list_len, test_tup[0], test_list[0], test_tup[0], test_list[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(add_lists(test_list: [5, 6, 7], test_tup: (9, 10)) == (9, 10, 5, 6, 7))",
            "assert(add_lists(test_list: [6, 7, 8], test_tup: (10, 11)) == (10, 11, 6, 7, 8))",
            "assert(add_lists(test_list: [7, 8, 9], test_tup: (11, 12)) == (11, 12, 7, 8, 9))"
        ]
    },
    {
        "task_id": "108",
        "title": "merge_sorted_list",
        "text": "/ Write a function to merge three arrays into a single sorted array.",
        "code": "\nfunc merge_sorted_list(num1: [Int], num2: [Int], num3: [Int]) -> [Int] {\n\tvar nums [][]Int\n\tfor i := 0; i < len(num1); i++ {\n\t\tnums[i] = num1[i].to_sorted_list()\n\t}\n\tfor i := 0; i < len(num2); i++ {\n\t\tnums[i] = num2[i].to_sorted_list()\n\t}\n\tfor i := 0; i < len(num3); i++ {\n\t\tnums[i] = num3[i].to_sorted_list()\n\t}\n\treturn merge_sorted_list(nums[0], nums[1], nums[2])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(merge_sorted_list(num1: [25, 24, 15, 4, 5, 29, 110], num2: [19, 20, 11, 56, 25, 233, 154], num3: [24, 26, 54, 48]) == [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233])",
            "assert(merge_sorted_list(num1: [1, 3, 5, 6, 8, 9], num2: [2, 5, 7, 11], num3: [1, 4, 7, 8, 12]) == [1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12])",
            "assert(merge_sorted_list(num1: [18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], num2: [25, 35, 22, 85, 14, 65, 75, 25, 58], num3: [12, 74, 9, 50, 61, 41]) == [1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85])"
        ]
    },
    {
        "task_id": "109",
        "title": "odd_Equivalent",
        "text": "/ Write a swiftthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
        "code": "\nfunc odd_Equivalent(s: String, n: Int) -> Int {\n\tif s.Len() == 0 {\n\t\treturn 0\n\t}\n\tif s.Len() == 1 {\n\t\treturn 1\n\t}\n\tif s.Len() == 2 {\n\t\treturn 2\n\t}\n\tif s.Len() == 3 {\n\t\treturn 3\n\t}\n\tif s.Len() == 4 {\n\t\treturn 4\n\t}\n\tif s.Len() == 5 {\n\t\treturn 5\n\t}\n\tif s.Len() == 6 {\n\t\treturn 6\n\t}\n\tif s.Len() == 7 {\n\t\treturn 7\n\t}\n\tif s.Len() == 8 {\n\t\treturn 8\n\t}\n\tif s.Len() == 9 {\n\t\treturn 9\n\t}\n\tif s.Len() == 10 {\n\t\treturn 10\n\t}\n\tif s.Len() == 11 {\n\t\treturn 11\n\t}\n\tif s.Len() == 12 {\n\t\treturn 12\n\t}\n\tif s.Len() == 13 {\n\t\treturn 13\n\t}\n\tif s.Len() == 14 {\n\t\treturn 14\n\t}\n\tif s.Len() == 15 {\n\t\treturn 15\n\t}\n\tif s.Len() == 16 {\n\t\treturn 16\n\t}\n\tif s.Len() == 17 {\n\t\treturn 17\n\t}\n\tif s.Len() == 18 {\n\t\treturn 18\n\t}\n\tif s.Len() == 19 {\n\t\treturn 19\n\t}\n\tif s.Len() == 20 {\n\t\treturn 20\n\t}\n\tif s.Len() == 21 {\n\t\treturn 21\n\t}\n\tif s.Len() == 22 {\n\t\treturn 22\n\t}\n\tif s.Len() == 23 {\n\t\treturn 23\n\t}\n\tif s.Len() == 24 {\n\t\treturn 24\n\t}\n\tif s.Len() == 25 {\n\t\treturn 25\n\t}\n\tif s.Len() == 26 {\n\t\treturn 26\n\t}\n\tif s.Len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(odd_Equivalent(s: \"011001\", n: 6) == 3)",
            "assert(odd_Equivalent(s: \"11011\", n: 5) == 4)",
            "assert(odd_Equivalent(s: \"1010\", n: 4) == 2)"
        ]
    },
    {
        "task_id": "113",
        "title": "check_integer",
        "text": "/ Write a function to check if a string represents an integer or not.",
        "code": "\nfunc check_integer(text: String) -> Bool {\n\tif text == \"\" {\n\t\treturn Bool(false)\n\t}\n\tif text[0] == '-' {\n\t\treturn Bool(false)\n\t}\n\tif text[0] == '+' {\n\t\treturn Bool(true)\n\t}\n\treturn Bool(true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(check_integer(text: \"python\") == false)",
            "assert(check_integer(text: \"1\") == true)",
            "assert(check_integer(text: \"12345\") == true)"
        ]
    },
    {
        "task_id": "116",
        "title": "tuple_to_int",
        "text": "/ Write a function to convert a given tuple of positive integers into a single integer.",
        "code": "\nfunc tuple_to_int(nums: (Int, Int, Int)) -> Int {\n\treturn nums[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(tuple_to_int(nums: (1, 2, 3)) == 123)",
            "assert(tuple_to_int(nums: (4, 5, 6)) == 456)",
            "assert(tuple_to_int(nums: (5, 6, 7)) == 567)"
        ]
    },
    {
        "task_id": "117",
        "title": "list_to_float",
        "text": "/ Write a function to convert all possible convertible elements in an array of arrays to floats.",
        "code": "\nfunc list_to_float(test_list: [(String, String)]) -> [(Double, Double)] {\n\ttest_list = append(test_list, [](String) {\n\t\treturn [](String) {\n\t\t\treturn Float(1.0)\n\t\t}\n\t})\n\treturn test_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(list_to_float(test_list: [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")]) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)])",
            "assert(list_to_float(test_list: [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")]) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)])",
            "assert(list_to_float(test_list: [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")]) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)])"
        ]
    },
    {
        "task_id": "118",
        "title": "string_to_list",
        "text": "/ Write a function to convert a string to an array of strings split on the space character.",
        "code": "\nfunc string_to_list(string: String) -> [String] {\n\treturn string_to_list_with_delimiter(string, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(string_to_list(string: \"python programming\") == [\"python\", \"programming\"])",
            "assert(string_to_list(string: \"lists tuples strings\") == [\"lists\", \"tuples\", \"strings\"])",
            "assert(string_to_list(string: \"write a program\") == [\"write\", \"a\", \"program\"])"
        ]
    },
    {
        "task_id": "119",
        "title": "search",
        "text": "/ Write a swiftthon function to find the element that appears only once in a sorted array.",
        "code": "\nfunc search(arr: [Int]) -> Int {\n\tvar count int\n\tfor i := 0; i < len(arr); i++ {\n\t\tif arr[i] == arr[i-1] {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn arr[count-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(search(arr: [1, 1, 2, 2, 3]) == 3)",
            "assert(search(arr: [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == 8)",
            "assert(search(arr: [1, 2, 2, 3, 3, 4, 4]) == 1)"
        ]
    },
    {
        "task_id": "11",
        "title": "remove_Occ",
        "text": "/ Write a swiftthon function to remove first and last occurrence of a given character from the string.",
        "code": "\nfunc remove_Occ(s: String, ch: String) -> String {\n\tif len(s) == 0 {\n\t\treturn \"\"\n\t}\n\tif len(s) == 1 {\n\t\treturn s\n\t}\n\tif ch == s[0] {\n\t\treturn s[1:]\n\t}\n\treturn s\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(remove_Occ(s: \"hello\", ch: \"l\") == \"heo\")",
            "assert(remove_Occ(s: \"abcda\", ch: \"a\") == \"bcd\")",
            "assert(remove_Occ(s: \"PHP\", ch: \"P\") == \"H\")"
        ]
    },
    {
        "task_id": "120",
        "title": "max_product_tuple",
        "text": "/ Write a function to find the maximum absolute product between numbers in pairs of tuples within a given array.",
        "code": "\nfunc max_product_tuple(list1: [(Int, Int)]) -> Int {\n\tmax_product := 0\n\tfor _, pair := range list1 {\n\t\tmax_product = max(max_product, pair[0].(Int) * pair[1].(Int))\n\t}\n\treturn max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(max_product_tuple(list1: [(2, 7), (2, 6), (1, 8), (4, 9)]) == 36)",
            "assert(max_product_tuple(list1: [(10, 20), (15, 2), (5, 10)]) == 200)",
            "assert(max_product_tuple(list1: [(11, 44), (10, 15), (20, 5), (12, 9)]) == 484)"
        ]
    },
    {
        "task_id": "123",
        "title": "amicable_numbers_sum",
        "text": "/ Write a function to sum all amicable numbers from 1 to a specified number.",
        "code": "\nfunc amicable_numbers_sum(limit: Int) -> Int {\n\tif limit == 0 {\n\t\treturn 0\n\t}\n\tvar sum int\n\tfor i := 1; i <= limit; i++ {\n\t\tsum += i\n\t}\n\treturn sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(amicable_numbers_sum(limit: 999) == 504)",
            "assert(amicable_numbers_sum(limit: 9999) == 31626)",
            "assert(amicable_numbers_sum(limit: 99) == 0)"
        ]
    },
    {
        "task_id": "125",
        "title": "find_length",
        "text": "/ Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "code": "\nfunc find_length(string: String) -> Int {\n\tvar max_length int\n\tfor i := 0; i < len(string); i++ {\n\t\tif string[i] == 0 {\n\t\t\tmax_length = i\n\t\t}\n\t}\n\treturn max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(find_length(string: \"11000010001\") == 6)",
            "assert(find_length(string: \"10111\") == 1)",
            "assert(find_length(string: \"11011101100101\") == 2)"
        ]
    },
    {
        "task_id": "126",
        "title": "sum",
        "text": "/ Write a swiftthon function to find the sum of common divisors of two given numbers.",
        "code": "\nfunc sum(a: Int, b: Int) -> Int {\n\tif a == b {\n\t\treturn a\n\t}\n\tif a == 0 {\n\t\treturn b\n\t}\n\tif b == 0 {\n\t\treturn a\n\t}\n\treturn sum(a, b/2) + sum(b/2, a/2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(sum(a: 10, b: 15) == 6)",
            "assert(sum(a: 100, b: 150) == 93)",
            "assert(sum(a: 4, b: 6) == 3)"
        ]
    },
    {
        "task_id": "127",
        "title": "multiply_int",
        "text": "/ Write a function to multiply two integers.",
        "code": "\nfunc multiply_int(x: Int, y: Int) -> Int {\n\treturn x * y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(multiply_int(x: 10, y: 20) == 200)",
            "assert(multiply_int(x: 5, y: 10) == 50)",
            "assert(multiply_int(x: 4, y: 8) == 32)"
        ]
    },
    {
        "task_id": "128",
        "title": "long_words",
        "text": "/ Write a function to find words that are longer than n characters from a given array of words.",
        "code": "\nfunc long_words(n: Int, str: String) -> [String] {\n\tvar words []String\n\tfor _, word := range str {\n\t\tif len(word) > n {\n\t\t\twords = append(words, word)\n\t\t}\n\t}\n\treturn words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(long_words(n: 3, str: \"python is a programming language\") == [\"python\", \"programming\", \"language\"])",
            "assert(long_words(n: 2, str: \"writing a program\") == [\"writing\", \"program\"])",
            "assert(long_words(n: 5, str: \"sorting list\") == [\"sorting\"])"
        ]
    },
    {
        "task_id": "129",
        "title": "magic_square_test",
        "text": "/ Write a function to calculate whether the matrix is a magic square.",
        "code": "\nfunc magic_square_test(my_matrix: [[Int]]) -> Bool {\n\tif len(my_matrix) == 0 {\n\t\treturn false\n\t}\n\tif len(my_matrix) == 1 {\n\t\treturn true\n\t}\n\tif my_matrix[0] == 0 {\n\t\treturn true\n\t}\n\tif my_matrix[0] == 1 {\n\t\treturn false\n\t}\n\tif my_matrix[1] == 0 {\n\t\treturn false\n\t}\n\tif my_matrix[1] == 1 {\n\t\treturn true\n\t}\n\treturn false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(magic_square_test(my_matrix: [[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == true)",
            "assert(magic_square_test(my_matrix: [[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == true)",
            "assert(magic_square_test(my_matrix: [[2, 7, 6], [9, 5, 1], [4, 3, 7]]) == false)"
        ]
    },
    {
        "task_id": "12",
        "title": "sort_matrix",
        "text": "/ Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "code": "\nfunc sort_matrix(M: [[Int]]) -> [[Int]] {\n\tvar sum int\n\tfor i := 0; i < len(M); i++ {\n\t\tsum += M[i]\n\t}\n\tvar rows []int\n\tfor i := 0; i < len(M); i++ {\n\t\trows = append(rows, M[i])\n\t}\n\tsort.Ints(rows)\n\tvar result [][]int\n\tfor i := 0; i < len(rows); i++ {\n\t\tresult = append(result, rows[i])\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(sort_matrix(M: [[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])",
            "assert(sort_matrix(M: [[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])",
            "assert(sort_matrix(M: [[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])"
        ]
    },
    {
        "task_id": "130",
        "title": "max_occurrences",
        "text": "/ Write a function to find the item with maximum frequency in a given array.",
        "code": "\nfunc max_occurrences(nums: [Int]) -> Int {\n\tvar max_occurrences = 0\n\tfor _, num := range nums {\n\t\tif num > max_occurrences {\n\t\t\tmax_occurrences = num\n\t\t}\n\t}\n\treturn max_occurrences\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)",
            "assert(max_occurrences(nums: [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)",
            "assert(max_occurrences(nums: [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)"
        ]
    },
    {
        "task_id": "131",
        "title": "reverse_vowels",
        "text": "/ Write a swiftthon function to reverse only the vowels of a given string (where y is not a vowel).",
        "code": "\nfunc reverse_vowels(str1: String) -> String {\n\tstr2 := str1\n\tfor i := 0; i < len(str1); i++ {\n\t\tif str1[i] == 'y' {\n\t\t\tstr2 = str2[:i]\n\t\t\tbreak\n\t\t}\n\t}\n\treturn str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(reverse_vowels(str1: \"Python\") == \"Python\")",
            "assert(reverse_vowels(str1: \"USA\") == \"ASU\")",
            "assert(reverse_vowels(str1: \"ab\") == \"ab\")"
        ]
    },
    {
        "task_id": "132",
        "title": "tup_string",
        "text": "/ Write a function to convert an array to a string.",
        "code": "\nfunc tup_string(tup1: [String]) -> String {\n\treturn String(tup1[0])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(tup_string(tup1: [\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\"]) == \"exercises\")",
            "assert(tup_string(tup1: [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]) == \"python\")",
            "assert(tup_string(tup1: [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]) == \"program\")"
        ]
    },
    {
        "task_id": "133",
        "title": "sum_negativenum",
        "text": "/ Write a function to calculate the sum of the negative numbers of a given array of numbers.",
        "code": "\nfunc sum_negativenum(nums: [Int]) -> Int {\n\tsum := 0\n\tfor _, num := range nums {\n\t\tsum += num\n\t}\n\treturn sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(sum_negativenum(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == -32)",
            "assert(sum_negativenum(nums: [10, 15, -14, 13, -18, 12, -20]) == -52)",
            "assert(sum_negativenum(nums: [19, -65, 57, 39, 152, -639, 121, 44, 90, -190]) == -894)"
        ]
    },
    {
        "task_id": "135",
        "title": "hexagonal_num",
        "text": "/ Write a function to find the nth hexagonal number.",
        "code": "\nfunc hexagonal_num(n: Int) -> Int {\n\tif n < 0 {\n\t\treturn 0\n\t}\n\tif n == 0 {\n\t\treturn 1\n\t}\n\treturn n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(hexagonal_num(n: 10) == 190)",
            "assert(hexagonal_num(n: 5) == 45)",
            "assert(hexagonal_num(n: 7) == 91)"
        ]
    },
    {
        "task_id": "138",
        "title": "is_Sum_Of_Powers_Of_Two",
        "text": "/ Write a swiftthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "code": "\nfunc is_Sum_Of_Powers_Of_Two(n: Int) -> Bool {\n\tif n == 0 {\n\t\treturn true\n\t}\n\tif n == 1 {\n\t\treturn false\n\t}\n\tif n == 2 {\n\t\treturn true\n\t}\n\tif n == 3 {\n\t\treturn true\n\t}\n\tif n == 4 {\n\t\treturn true\n\t}\n\tif n == 5 {\n\t\treturn true\n\t}\n\tif n == 6 {\n\t\treturn true\n\t}\n\tif n == 7 {\n\t\treturn true\n\t}\n\tif n == 8 {\n\t\treturn true\n\t}\n\tif n == 9 {\n\t\treturn true\n\t}\n\tif n == 10 {\n\t\treturn true\n\t}\n\tif n == 11 {\n\t\treturn true\n\t}\n\tif n == 12 {\n\t\treturn true\n\t}\n\tif n == 13 {\n\t\treturn true\n\t}\n\tif n == 14 {\n\t\treturn true\n\t}\n\tif n == 15 {\n\t\treturn true\n\t}\n\tif n == 16 {\n\t\treturn true\n\t}\n\tif n == 17 {\n\t\treturn true\n\t}\n\tif n == 18 {\n\t\treturn true\n\t}\n\tif n == 19 {\n\t\treturn true\n\t}\n\tif n == 20 {\n\t\treturn true\n\t}\n\tif n == 21 {\n\t\treturn true\n\t}\n\tif n == 22 {\n\t\treturn true\n\t}\n\tif n == 23 {\n\t\treturn true\n\t}\n\tif n == 24 {\n\t\treturn true\n\t}\n\tif n == 25 {\n\t\treturn true\n\t}\n\tif n == 26 {\n\t\treturn true\n\t}\n\tif n == 27 {\n\t\treturn true\n\t}\n\tif n == 28 {\n\t\treturn true\n\t}\n\tif n == 29 {\n\t\treturn true\n\t}\n\tif n == 30 {\n\t\treturn true\n\t}\n\tif n == 31 {\n\t\treturn true\n\t}\n\tif n == 32 {\n\t\treturn true\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(is_Sum_Of_Powers_Of_Two(n: 10) == true)",
            "assert(is_Sum_Of_Powers_Of_Two(n: 7) == false)",
            "assert(is_Sum_Of_Powers_Of_Two(n: 14) == true)"
        ]
    },
    {
        "task_id": "141",
        "title": "pancake_sort",
        "text": "/ Write a function to sort an array of elements.",
        "code": "\nfunc pancake_sort(nums: [Int]) -> [Int] {\n\tvar result [Int]\n\tfor i := 0; i < len(nums); i++ {\n\t\tresult[i] = nums[i]\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(pancake_sort(nums: [15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79])",
            "assert(pancake_sort(nums: [98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98])",
            "assert(pancake_sort(nums: [41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42])"
        ]
    },
    {
        "task_id": "142",
        "title": "count_samepair",
        "text": "/ Write a function to count number items that are identical in the same position of three given arrays.",
        "code": "\nfunc count_samepair(list1: [Int], list2: [Int], list3: [Int]) -> Int {\n\tvar count int\n\tfor i := 0; i < len(list1); i++ {\n\t\tif list1[i] == list2[i] {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 9], list3: [2, 1, 3, 1, 2, 6, 7, 9]) == 3)",
            "assert(count_samepair(list1: [1, 2, 3, 4, 5, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 4)",
            "assert(count_samepair(list1: [1, 2, 3, 4, 2, 6, 7, 8], list2: [2, 2, 3, 1, 2, 6, 7, 8], list3: [2, 1, 3, 1, 2, 6, 7, 8]) == 5)"
        ]
    },
    {
        "task_id": "143",
        "title": "find_lists",
        "text": "/ Write a function to find number of arrays present in the given array.",
        "code": "\nfunc find_lists(Input: [AnyHashable]) -> Int {\n\tvar output Int\n\tvar count int\n\tfor _, elem := range Input {\n\t\tif elem.IsArray() {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(find_lists(Input: [[1, 2, 3, 4], [5, 6, 7, 8]]) == 2)",
            "assert(find_lists(Input: [[1, 2], [3, 4], [5, 6]]) == 3)",
            "assert(find_lists(Input: [9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1)"
        ]
    },
    {
        "task_id": "145",
        "title": "max_Abs_Diff",
        "text": "/ Write a swiftthon function to find the maximum difference between any two elements in a given array.",
        "code": "\nfunc max_Abs_Diff(arr: [Int]) -> Int {\n\tmax := 0\n\tfor i := 0; i < len(arr); i++ {\n\t\tif arr[i] > arr[i+1] {\n\t\t\tmax = i\n\t\t}\n\t}\n\treturn max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(max_Abs_Diff(arr: [2, 1, 5, 3]) == 4)",
            "assert(max_Abs_Diff(arr: [9, 3, 2, 5, 1]) == 8)",
            "assert(max_Abs_Diff(arr: [3, 2, 1]) == 2)"
        ]
    },
    {
        "task_id": "14",
        "title": "find_Volume",
        "text": "/ Write a swiftthon function to find the volume of a triangular prism.",
        "code": "\nfunc find_Volume(l: Int, b: Int, h: Int) -> Int {\n\tif l == 0 || b == 0 || h == 0 {\n\t\treturn 0\n\t}\n\tif l == b {\n\t\treturn h\n\t}\n\tif h == b {\n\t\treturn l\n\t}\n\treturn 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(find_Volume(l: 10, b: 8, h: 6) == 240)",
            "assert(find_Volume(l: 3, b: 2, h: 2) == 6)",
            "assert(find_Volume(l: 1, b: 2, h: 1) == 1)"
        ]
    },
    {
        "task_id": "160",
        "title": "find_solution",
        "text": "/ Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return nil if no solution exists.",
        "code": "\nfunc find_solution(a: Int, b: Int, n: Int) -> (Int, Int)? {\n\tif a == b {\n\t\treturn a, b\n\t}\n\tif a == nil {\n\t\treturn nil, nil\n\t}\n\tif b == nil {\n\t\treturn a, nil\n\t}\n\tif n == nil {\n\t\treturn a, b\n\t}\n\tif n == 1 {\n\t\treturn a, b\n\t}\n\tif n == 0 {\n\t\treturn nil, nil\n\t}\n\tif n == -1 {\n\t\treturn nil, nil\n\t}\n\tif n == -2 {\n\t\treturn nil, nil\n\t}\n\tif n == -3 {\n\t\treturn nil, nil\n\t}\n\tif n == -4 {\n\t\treturn nil, nil\n\t}\n\tif n == -5 {\n\t\treturn nil, nil\n\t}\n\tif n == -6 {\n\t\treturn nil, nil\n\t}\n\tif n == -7 {\n\t\treturn nil, nil\n\t}\n\tif n == -8 {\n\t\treturn nil, nil\n\t}\n\tif n == -9 {\n\t\treturn nil, nil\n\t}\n\tif n == -10 {\n\t\treturn nil, nil\n\t}\n\tif n == -11 {\n\t\treturn nil, nil\n\t}\n\tif n == -12 {\n\t\treturn nil, nil\n\t}\n\tif n == -13 {\n\t\treturn nil, nil\n\t}\n\tif n == -14 {\n\t\treturn nil, nil\n\t}\n\tif n == -15 {\n\t\treturn nil, nil\n\t}\n\tif n == -16 {\n\t\treturn nil, nil\n\t}\n\tif n == -17 {\n\t\treturn nil, nil\n\t}\n\tif n == -18 {\n\t\treturn nil, nil\n\t}\n\tif n == -19 {\n\t\treturn nil, nil\n\t}\n\tif n == -20 {\n\t\treturn nil, nil\n\t}\n\tif n == -21 {\n\t\treturn nil, nil\n\t}\n\tif\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(find_solution(a: 2, b: 3, n: 7) == (2, 1))",
            "assert(find_solution(a: 4, b: 2, n: 7) == nil)",
            "assert(find_solution(a: 1, b: 13, n: 17) == (4, 1))"
        ]
    },
    {
        "task_id": "161",
        "title": "remove_elements",
        "text": "/ Write a function to remove all elements from a given array present in another array.",
        "code": "\nfunc remove_elements(list1: [Int], list2: [Int]) -> [Int] {\n\tvar list1_copy = make([]Int, len(list1))\n\tcopy(list1_copy, list1)\n\tvar list2_copy = make([]Int, len(list2))\n\tcopy(list2_copy, list2)\n\treturn remove_elements_from_array(list1_copy, list2_copy)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(remove_elements(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], list2: [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10])",
            "assert(remove_elements(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], list2: [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10])",
            "assert(remove_elements(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], list2: [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10])"
        ]
    },
    {
        "task_id": "162",
        "title": "sum_series",
        "text": "/ Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
        "code": "\nfunc sum_series(n: Int) -> Int {\n\tif n == 0 {\n\t\treturn 0\n\t}\n\tsum := 0\n\tfor i := 0; i < n; i++ {\n\t\tsum += i\n\t}\n\treturn sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(sum_series(n: 6) == 12)",
            "assert(sum_series(n: 10) == 30)",
            "assert(sum_series(n: 9) == 25)"
        ]
    },
    {
        "task_id": "164",
        "title": "are_equivalent",
        "text": "/ Write a function to determine if the sum of the divisors of two integers are the same.",
        "code": "\nfunc are_equivalent(num1: Int, num2: Int) -> Bool {\n\tif num1 == 0 || num2 == 0 {\n\t\treturn false\n\t}\n\tif num1 == num2 {\n\t\treturn true\n\t}\n\tif num1%num2 == 0 {\n\t\treturn true\n\t}\n\treturn false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(are_equivalent(num1: 36, num2: 57) == false)",
            "assert(are_equivalent(num1: 2, num2: 4) == false)",
            "assert(are_equivalent(num1: 23, num2: 47) == true)"
        ]
    },
    {
        "task_id": "165",
        "title": "count_char_position",
        "text": "/ Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
        "code": "\nfunc count_char_position(str1: String) -> Int {\n\tvar count int\n\tfor i := 0; i < len(str1); i++ {\n\t\tif str1[i] =='' {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(count_char_position(str1: \"xbcefg\") == 2)",
            "assert(count_char_position(str1: \"ABcED\") == 3)",
            "assert(count_char_position(str1: \"AbgdeF\") == 5)"
        ]
    },
    {
        "task_id": "166",
        "title": "find_even_pair",
        "text": "/ Write a function that counts the number of pairs of integers in an array that xor to an even number.",
        "code": "\nfunc find_even_pair(A: [Int]) -> Int {\n\tvar count int\n\tfor i := 0; i < len(A); i += 2 {\n\t\tif A[i] == A[i+1] {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(find_even_pair(A: [5, 4, 7, 2, 1]) == 4)",
            "assert(find_even_pair(A: [7, 2, 8, 1, 0, 5, 11]) == 9)",
            "assert(find_even_pair(A: [1, 2, 3]) == 1)"
        ]
    },
    {
        "task_id": "167",
        "title": "next_power_of_2",
        "text": "/ Write a swiftthon function to find the smallest power of 2 greater than or equal to n.",
        "code": "\nfunc next_power_of_2(n: Int) -> Int {\n\tif n == 0 {\n\t\treturn 1\n\t}\n\treturn next_power_of_2(n - 1) + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(next_power_of_2(n: 0) == 1)",
            "assert(next_power_of_2(n: 5) == 8)",
            "assert(next_power_of_2(n: 17) == 32)"
        ]
    },
    {
        "task_id": "168",
        "title": "frequency",
        "text": "/ Write a function to count the number of occurrences of a number in a given array.",
        "code": "\nfunc frequency(a: [Int], x: Int) -> Int {\n\tif len(a) == 0 {\n\t\treturn 0\n\t}\n\treturn a[x]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(frequency(a: [1, 2, 3], x: 4) == 0)",
            "assert(frequency(a: [1, 2, 2, 3, 3, 3, 4], x: 3) == 3)",
            "assert(frequency(a: [0, 1, 2, 3, 1, 2], x: 1) == 2)"
        ]
    },
    {
        "task_id": "16",
        "title": "text_lowercase_underscore",
        "text": "/ Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
        "code": "\nfunc text_lowercase_underscore(text: String) -> Bool {\n\treturn text.Contains(`_`)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(text_lowercase_underscore(text: \"aab_cbbbc\") == true)",
            "assert(text_lowercase_underscore(text: \"aab_Abbbc\") == false)",
            "assert(text_lowercase_underscore(text: \"Aaab_abbbc\") == false)"
        ]
    },
    {
        "task_id": "170",
        "title": "sum_range_list",
        "text": "/ Write a function to find the sum of numbers in an array within a range specified by two indices.",
        "code": "\nfunc sum_range_list(list1: [Int], m: Int, n: Int) -> Int {\n\tsum := 0\n\tfor i := 0; i < m; i++ {\n\t\tsum += list1[i]\n\t}\n\treturn sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(sum_range_list(list1: [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], m: 8, n: 10) == 29)",
            "assert(sum_range_list(list1: [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], m: 5, n: 7) == 16)",
            "assert(sum_range_list(list1: [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], m: 7, n: 10) == 38)"
        ]
    },
    {
        "task_id": "171",
        "title": "perimeter_pentagon",
        "text": "/ Write a function to find the perimeter of a regular pentagon from the length of its sides.",
        "code": "\nfunc perimeter_pentagon(a: Int) -> Int {\n\tvar perimeter = 0\n\tfor i := 0; i < 3; i++ {\n\t\tfor j := 0; j < 3; j++ {\n\t\t\tperimeter += (a[i] + a[j]) * (a[i] + a[j])\n\t\t}\n\t}\n\treturn perimeter\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(perimeter_pentagon(a: 5) == 25)",
            "assert(perimeter_pentagon(a: 10) == 50)",
            "assert(perimeter_pentagon(a: 15) == 75)"
        ]
    },
    {
        "task_id": "172",
        "title": "count_occurance",
        "text": "/ Write a function to count the number of occurence of the string'std' in a given string.",
        "code": "\nfunc count_occurance(s: String) -> Int {\n\tvar count int\n\tfor _, c := range s {\n\t\tif c == '\\n' {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(count_occurance(s: \"letstdlenstdporstd\") == 3)",
            "assert(count_occurance(s: \"truststdsolensporsd\") == 1)",
            "assert(count_occurance(s: \"makestdsostdworthit\") == 2)",
            "assert(count_occurance(s: \"stds\") == 1)",
            "assert(count_occurance(s: \"\") == 0)"
        ]
    },
    {
        "task_id": "17",
        "title": "square_perimeter",
        "text": "/ Write a function that returns the perimeter of a square given its side length as input.",
        "code": "\nfunc square_perimeter(a: Int) -> Int {\n\treturn a * a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(square_perimeter(a: 10) == 40)",
            "assert(square_perimeter(a: 5) == 20)",
            "assert(square_perimeter(a: 4) == 16)"
        ]
    },
    {
        "task_id": "18",
        "title": "remove_dirty_chars",
        "text": "/ Write a function to remove characters from the first string which are present in the second string.",
        "code": "\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n\tif len(string) == 0 || len(second_string) == 0 {\n\t\treturn string\n\t}\n\n\tfirst_chars := strings.Split(string, \"\")\n\tsecond_chars := strings.Split(second_string, \"\")\n\n\tfor i := 0; i < len(first_chars); i++ {\n\t\tif first_chars[i] == second_chars[i] {\n\t\t\tfirst_chars[i] = \"\"\n\t\t}\n\t}\n\n\treturn strings.Join(first_chars, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")",
            "assert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")",
            "assert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")"
        ]
    },
    {
        "task_id": "19",
        "title": "test_duplicate",
        "text": "/ Write a function to find whether a given array of integers contains any duplicate element.",
        "code": "\nfunc test_duplicate(arraynums: [Int]) -> Bool {\n\tduplicate := false\n\tfor i := 0; i < len(arraynums); i++ {\n\t\tif arraynums[i] == arraynums[i] {\n\t\t\tduplicate = true\n\t\t}\n\t}\n\treturn duplicate\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(test_duplicate(arraynums: [1, 2, 3, 4, 5]) == false)",
            "assert(test_duplicate(arraynums: [1, 2, 3, 4, 4]) == true)",
            "assert(test_duplicate(arraynums: [1, 1, 2, 2, 3, 3, 4, 4, 5]) == true)"
        ]
    },
    {
        "task_id": "20",
        "title": "is_woodall",
        "text": "/ Write a function to check if the given number is woodball or not.",
        "code": "\nfunc is_woodall(x: Int) -> Bool {\n\treturn x == woodball\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(is_woodall(x: 383) == true)",
            "assert(is_woodall(x: 254) == false)",
            "assert(is_woodall(x: 200) == false)"
        ]
    },
    {
        "task_id": "222",
        "title": "check_type",
        "text": "/ Write a function to check if all the elements in tuple have same data type or not.",
        "code": "\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n\tif test_tuple == nil {\n\t\treturn false\n\t}\n\tif test_tuple.Type()!= TypeTuple {\n\t\treturn false\n\t}\n\tfor i := 0; i < len(test_tuple); i++ {\n\t\tif test_tuple[i]!= test_tuple[i].Type() {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)",
            "assert(check_type(test_tuple: (1, 2, \"4\")) == false)",
            "assert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)"
        ]
    },
    {
        "task_id": "223",
        "title": "is_majority",
        "text": "/ Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)",
        "code": "\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n\tif len(arr) == 0 {\n\t\treturn false\n\t}\n\tif len(arr) == 1 {\n\t\treturn arr[0] == x\n\t}\n\tif len(arr) == 2 {\n\t\tif arr[0] == x && arr[1] == x {\n\t\t\treturn arr[0] == arr[1]\n\t\t}\n\t\treturn arr[0] == arr[1] && arr[1] == arr[0]\n\t}\n\treturn false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)",
            "assert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)",
            "assert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)",
            "assert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)"
        ]
    },
    {
        "task_id": "224",
        "title": "count_Set_Bits",
        "text": "/ Write a swiftthon function to count the number of set bits (binary digits with value 1) in a given number.",
        "code": "\nfunc count_Set_Bits(n: Int) -> Int {\n\tvar count int\n\tfor i := 0; i < n.BitLength(); i++ {\n\t\tif n.Bit(i) == 1 {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn Int(count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(count_Set_Bits(n: 2) == 1)",
            "assert(count_Set_Bits(n: 4) == 1)",
            "assert(count_Set_Bits(n: 6) == 2)"
        ]
    },
    {
        "task_id": "226",
        "title": "odd_values_string",
        "text": "/ Write a swiftthon function to remove the characters which have odd index values of a given string.",
        "code": "\nfunc odd_values_string(str: String) -> String {\n\todd_values := []int{}\n\tfor i := 0; i < len(str); i += 2 {\n\t\tif str[i] == '0' {\n\t\t\todd_values = append(odd_values, i)\n\t\t}\n\t}\n\treturn str[:len(str)-len(odd_values)]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(odd_values_string(str: \"abcdef\") == \"ace\")",
            "assert(odd_values_string(str: \"python\") == \"pto\")",
            "assert(odd_values_string(str: \"data\") == \"dt\")",
            "assert(odd_values_string(str: \"lambs\") == \"lms\")"
        ]
    },
    {
        "task_id": "227",
        "title": "min_of_three",
        "text": "/ Write a function to find minimum of three numbers.",
        "code": "\nfunc min_of_three(a: Int, b: Int, c: Int) -> Int {\n\tif a < b {\n\t\treturn a\n\t}\n\tif a < c {\n\t\treturn b\n\t}\n\treturn c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(min_of_three(a: 10, b: 20, c: 0) == 0)",
            "assert(min_of_three(a: 19, b: 15, c: 18) == 15)",
            "assert(min_of_three(a: -10, b: -20, c: -30) == -30)"
        ]
    },
    {
        "task_id": "228",
        "title": "all_Bits_Set_In_The_Given_Range",
        "text": "/ Write a swiftthon function to check whether all the bits are unset in the given range or not.",
        "code": "\nfunc all_Bits_Set_In_The_Given_Range(n: Int, l: Int, r: Int) -> Bool {\n\tif l == r {\n\t\treturn true\n\t}\n\treturn all_Bits_Set_In_The_Given_Range_Helper(n, l, r, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(all_Bits_Set_In_The_Given_Range(n: 4, l: 1, r: 2) == true)",
            "assert(all_Bits_Set_In_The_Given_Range(n: 17, l: 2, r: 4) == true)",
            "assert(all_Bits_Set_In_The_Given_Range(n: 39, l: 4, r: 6) == false)"
        ]
    },
    {
        "task_id": "229",
        "title": "re_arrange_array",
        "text": "/ Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
        "code": "\nfunc re_arrange_array(arr: [Int], n: Int) -> [Int] {\n\tvar re_arr_arr [Int]\n\tfor i := 0; i < n; i++ {\n\t\tre_arr_arr[i] = arr[i]\n\t}\n\treturn re_arr_arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(re_arrange_array(arr: [-1, 2, -3, 4, 5, 6, -7, 8, 9], n: 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9])",
            "assert(re_arrange_array(arr: [12, -14, -26, 13, 15], n: 5) == [-14, -26, 12, 13, 15])",
            "assert(re_arrange_array(arr: [10, 24, 36, -42, -39, -78, 85], n: 7) == [-42, -39, -78, 10, 24, 36, 85])"
        ]
    },
    {
        "task_id": "230",
        "title": "replace_blank",
        "text": "/ Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
        "code": "\nfunc replace_blank(str1: String, char: String) -> String {\n\treturn str1.ReplaceAll([]byte(char), []byte(string(char)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(replace_blank(str1: \"hello people\", char: \"@\") == \"hello@people\")",
            "assert(replace_blank(str1: \"python program language\", char: \"$\") == \"python$program$language\")",
            "assert(replace_blank(str1: \"blank space\", char: \"-\") == \"blank-space\")"
        ]
    },
    {
        "task_id": "234",
        "title": "volume_cube",
        "text": "/ Write a function to find the volume of a cube given its side length.",
        "code": "\nfunc volume_cube(l: Int) -> Int {\n\tvar v = 0\n\tfor i := 0; i < l; i++ {\n\t\tv += (i + 1) * (i + 1)\n\t}\n\treturn v\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(volume_cube(l: 3) == 27)",
            "assert(volume_cube(l: 2) == 8)",
            "assert(volume_cube(l: 5) == 125)"
        ]
    },
    {
        "task_id": "237",
        "title": "check_occurences",
        "text": "/ Write a function that takes in an array of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the array.",
        "code": "\nfunc check_occurences(test_list: [(Int, Int)]) -> [(Int, Int) : Int] {\n\tvar count = make(map[Int]Int)\n\tfor _, t := range test_list {\n\t\tcount[t[0].Int()] += 1\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(check_occurences(test_list: [(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == [(1, 3) : 2, (2, 5) : 2, (3, 6) : 1])",
            "assert(check_occurences(test_list: [(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)]) == [(2, 4) : 2, (3, 6) : 2, (4, 7) : 1])",
            "assert(check_occurences(test_list: [(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)]) == [(2, 13) : 1, (11, 23) : 1, (12, 25) : 2, (16, 23) : 1])"
        ]
    },
    {
        "task_id": "238",
        "title": "number_of_substrings",
        "text": "/ Write a swiftthon function to count the number of non-empty substrings of a given string.",
        "code": "\nfunc number_of_substrings(str: String) -> Int {\n\tvar count int\n\tfor _, substr := range str.Substrings {\n\t\tif substr.IsEmpty() {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(number_of_substrings(str: \"abc\") == 6)",
            "assert(number_of_substrings(str: \"abcd\") == 10)",
            "assert(number_of_substrings(str: \"abcde\") == 15)"
        ]
    },
    {
        "task_id": "239",
        "title": "get_total_number_of_sequences",
        "text": "/ Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
        "code": "\nfunc get_total_number_of_sequences(m: Int, n: Int) -> Int {\n\tvar total_number_of_sequences Int\n\tfor i := 0; i < n; i++ {\n\t\tif m%i == 0 {\n\t\t\ttotal_number_of_sequences += i\n\t\t}\n\t}\n\treturn total_number_of_sequences\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(get_total_number_of_sequences(m: 10, n: 4) == 4)",
            "assert(get_total_number_of_sequences(m: 5, n: 2) == 6)",
            "assert(get_total_number_of_sequences(m: 16, n: 3) == 84)"
        ]
    },
    {
        "task_id": "240",
        "title": "replace_list",
        "text": "/ Write a function that takes in two arrays and replaces the last element of the first array with the elements of the second array.",
        "code": "\nfunc replace_list(list1: [AnyHashable], list2: [AnyHashable]) -> [AnyHashable] {\n\tif len(list1) == 0 {\n\t\treturn list2\n\t}\n\tif len(list2) == 0 {\n\t\treturn list1\n\t}\n\tvar result [AnyHashable] = list1\n\tfor i := len(list1) - 1; i >= 0; i-- {\n\t\tresult[i] = list2[i]\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(replace_list(list1: [1, 3, 5, 7, 9, 10], list2: [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 2, 4, 6, 8])",
            "assert(replace_list(list1: [1, 2, 3, 4, 5], list2: [5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8])",
            "assert(replace_list(list1: [\"red\", \"blue\", \"green\"], list2: [\"yellow\"]) == [\"red\", \"blue\", \"yellow\"])"
        ]
    },
    {
        "task_id": "242",
        "title": "count_charac",
        "text": "/ Write a function to count the total number of characters in a string.",
        "code": "\nfunc count_charac(str1: String) -> Int {\n\tvar count int\n\tfor _, ch := range str1 {\n\t\tcount++\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(count_charac(str1: \"python programming\") == 18)",
            "assert(count_charac(str1: \"language\") == 8)",
            "assert(count_charac(str1: \"words\") == 5)"
        ]
    },
    {
        "task_id": "244",
        "title": "next_Perfect_Square",
        "text": "/ Write a swiftthon function to find the next perfect square greater than a given number.",
        "code": "\nfunc next_Perfect_Square(N: Int) -> Int {\n\tif N == 0 {\n\t\treturn 0\n\t}\n\treturn N - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(next_Perfect_Square(N: 35) == 36)",
            "assert(next_Perfect_Square(N: 6) == 9)",
            "assert(next_Perfect_Square(N: 9) == 16)"
        ]
    },
    {
        "task_id": "245",
        "title": "max_sum",
        "text": "/ Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.",
        "code": "\nfunc max_sum(arr: [Int]) -> Int {\n\tvar maxSum = 0\n\tfor i := 0; i < len(arr); i++ {\n\t\tif arr[i] > arr[i+1] {\n\t\t\tmaxSum = arr[i]\n\t\t\tbreak\n\t\t}\n\t}\n\treturn maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)",
            "assert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)",
            "assert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)"
        ]
    },
    {
        "task_id": "247",
        "title": "lps",
        "text": "/ Write a function to find the length of the longest palindromic subsequence in the given string.",
        "code": "\nfunc lps(str: String) -> Int {\n\tvar lps int\n\tfor i := 0; i < len(str); i++ {\n\t\tif str[i] == str[i+1] {\n\t\t\tlps++\n\t\t}\n\t}\n\treturn lps\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(lps(str: \"TENS FOR TENS\") == 5)",
            "assert(lps(str: \"CARDIO FOR CARDS\") == 7)",
            "assert(lps(str: \"PART OF THE JOURNEY IS PART\") == 9)"
        ]
    },
    {
        "task_id": "249",
        "title": "intersection_array",
        "text": "/ Write a function to find the intersection of two arrays.",
        "code": "\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n\tvar intersection_array_nums [Int]\n\tfor i := 0; i < len(array_nums1); i++ {\n\t\tfor j := 0; j < len(array_nums2); j++ {\n\t\t\tif array_nums1[i] == array_nums2[j] {\n\t\t\t\tintersection_array_nums[i] = array_nums1[i]\n\t\t\t}\n\t\t}\n\t}\n\treturn intersection_array_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])",
            "assert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])",
            "assert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])"
        ]
    },
    {
        "task_id": "250",
        "title": "count_X",
        "text": "/ Write a swiftthon function that takes in a tuple and an element and counts the occcurences of the element in the array.",
        "code": "\nfunc count_X(tup: [Int], x: Int) -> Int {\n\tcount := 0\n\tfor _, v := range tup {\n\t\tif v == x {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(count_X(tup: [10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], x: 4) == 0)",
            "assert(count_X(tup: [10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], x: 10) == 3)",
            "assert(count_X(tup: [10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], x: 8) == 4)"
        ]
    },
    {
        "task_id": "251",
        "title": "insert_element",
        "text": "/ Write a function that takes in an array and an element and inserts the element before each element in the array, and returns the resulting array.",
        "code": "\nfunc insert_element(list: [String], element: String) -> [String] {\n\tvar result [][]String\n\tfor i := 0; i < len(list); i++ {\n\t\tresult = append(result, [][]String{list[i], list[i + 1:]})\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(insert_element(list: [\"Red\", \"Green\", \"Black\"], element: \"c\") == [\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\"])",
            "assert(insert_element(list: [\"python\", \"java\"], element: \"program\") == [\"program\", \"python\", \"program\", \"java\"])",
            "assert(insert_element(list: [\"happy\", \"sad\"], element: \"laugh\") == [\"laugh\", \"happy\", \"laugh\", \"sad\"])"
        ]
    },
    {
        "task_id": "252",
        "title": "convert",
        "text": "/ Write a swiftthon function to convert complex numbers to polar coordinates.",
        "code": "\nfunc convert(numbers: Int) -> (Double, Double) {\n\tif len(numbers) == 0 {\n\t\treturn 0, 0\n\t}\n\tvar polar = polar(numbers)\n\treturn polar.x, polar.y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(convert(numbers: 1) == (1.0, 0.0))",
            "assert(convert(numbers: 4) == (4.0, 0.0))",
            "assert(convert(numbers: 5) == (5.0, 0.0))"
        ]
    },
    {
        "task_id": "253",
        "title": "count_integer",
        "text": "/ Write a swiftthon function that returns the number of integer elements in a given array.",
        "code": "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case stringValue(String)\n    case doubleValue(Double)\n}\n\n            \nfunc count_integer(list1: [Value]) -> Int {\n    return list1.count(Value::caseInt)\n}\n\n            \n/// Write a swiftthon function that returns the number of string elements in a given array.\nfunc count_string(list1: [Value]) -> Int {\n    return list1.count(Value::caseString)\n}\n\n            \n/// Write a swiftthon function that returns the number of double elements in a given array.\nfunc count_double(list1: [Value]) -> Int {\n    return list1.count(Value::caseDouble)\n}\n\n            \n/// Write a swiftthon function that returns the number of integer elements in a given array.\nfunc count_integer_array(list1: [Value]) -> Int {\n    return list1.count(Value::caseIntArray)\n}\n\n            \n/// Write a swiftthon function that returns the number of string elements in a given array.\nfunc count_string_array(list1: [Value]) -> Int {\n    return list1.count(Value::caseStringArray)\n}\n\n            \n/// Write a swiftthon function that returns the number of double elements in a given array.\nfunc count_double_array(list1: [Value]) -> Int {\n    return list1.count(Value::caseDoubleArray)\n}\n\n            \n/// Write a swiftthon function that returns the number of integer elements in a given array.\nfunc count_integer_array_array(list1: [Value]) -> Int {\n    return list1.count(Value::caseIntArrayArray)\n}\n\n            \n/// Write a swiftthon function that returns the number of string elements in a given array.\nfunc count_string_array_array(list1: [Value]) -> Int {\n    return list1.count(Value::caseStringArrayArray)\n}\n\n            \n/// Write a swiftthon function that returns the number of double elements in a given array.\nfunc count_double_array_array(list1: [Value]) ->\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(count_integer(list1: [.intValue(1), .intValue(2), .stringValue(\"abc\"), .doubleValue(1.2)]) == 2)",
            "assert(count_integer(list1: [.intValue(1), .intValue(2), .intValue(3)]) == 3)",
            "assert(count_integer(list1: [.intValue(1), .doubleValue(1.2), .intValue(4), .doubleValue(5.1)]) == 2)"
        ]
    },
    {
        "task_id": "255",
        "title": "combinations_colors",
        "text": "/ Write a function that takes in an array and length n, and generates all combinations (with repetition) of the elements of the array and returns an array with an array for each combination.",
        "code": "\nfunc combinations_colors(l: [String], n: Int) -> [[String]] {\n\tvar combinations [][]String\n\tfor i := 0; i < n; i++ {\n\t\tcombinations = append(combinations, make([]String, 0))\n\t}\n\tfor i := 0; i < len(l); i++ {\n\t\tfor j := 0; j < len(l); j++ {\n\t\t\tif l[i] == l[j] {\n\t\t\t\tcombinations[i][j] = l[i]\n\t\t\t}\n\t\t}\n\t}\n\treturn combinations\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(combinations_colors(l: [\"Red\", \"Green\", \"Blue\"], n: 1) == [[\"Red\"], [\"Green\"], [\"Blue\"]])",
            "assert(combinations_colors(l: [\"Red\", \"Green\", \"Blue\"], n: 2) == [[\"Red\", \"Red\"], [\"Red\", \"Green\"], [\"Red\", \"Blue\"], [\"Green\", \"Green\"], [\"Green\", \"Blue\"], [\"Blue\", \"Blue\"]])",
            "assert(combinations_colors(l: [\"Red\", \"Green\", \"Blue\"], n: 3) == [[\"Red\", \"Red\", \"Red\"], [\"Red\", \"Red\", \"Green\"], [\"Red\", \"Red\", \"Blue\"], [\"Red\", \"Green\", \"Green\"], [\"Red\", \"Green\", \"Blue\"], [\"Red\", \"Blue\", \"Blue\"], [\"Green\", \"Green\", \"Green\"], [\"Green\", \"Green\", \"Blue\"], [\"Green\", \"Blue\", \"Blue\"], [\"Blue\", \"Blue\", \"Blue\"]])"
        ]
    },
    {
        "task_id": "256",
        "title": "count_Primes_nums",
        "text": "/ Write a swiftthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
        "code": "\nfunc count_Primes_nums(n: Int) -> Int {\n\tif n < 0 {\n\t\treturn 0\n\t}\n\treturn count_Primes_nums_helper(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(count_Primes_nums(n: 5) == 2)",
            "assert(count_Primes_nums(n: 10) == 4)",
            "assert(count_Primes_nums(n: 100) == 25)"
        ]
    },
    {
        "task_id": "257",
        "title": "swap_numbers",
        "text": "/ Write a function that takes in two numbers and returns an array with the second number and then the first number.",
        "code": "\nfunc swap_numbers(a: Int, b: Int) -> [Int] {\n\treturn [Int]{a, b}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(swap_numbers(a: 10, b: 20) == [20, 10])",
            "assert(swap_numbers(a: 15, b: 17) == [17, 15])",
            "assert(swap_numbers(a: 100, b: 200) == [200, 100])"
        ]
    },
    {
        "task_id": "259",
        "title": "maximize_elements",
        "text": "/ Write a function to maximize the given two arrays.",
        "code": "\nfunc maximize_elements(test_tup1: [[Int]], test_tup2: [[Int]]) -> [[Int]] {\n\tvar test_tup1_elements = make([][]int, len(test_tup1))\n\tfor i, test_tup1_element := range test_tup1 {\n\t\ttest_tup1_elements[i] = make([]int, len(test_tup1_element))\n\t\tfor j, test_tup1_element_element := range test_tup1_element {\n\t\t\ttest_tup1_elements[i][j] = test_tup1_element_element\n\t\t}\n\t}\n\n\tvar test_tup2_elements = make([][]int, len(test_tup2))\n\tfor i, test_tup2_element := range test_tup2 {\n\t\ttest_tup2_elements[i] = make([]int, len(test_tup2_element))\n\t\tfor j, test_tup2_element_element := range test_tup2_element {\n\t\t\ttest_tup2_elements[i][j] = test_tup2_element_element\n\t\t}\n\t}\n\n\tvar test_tup1_elements_elements = make([][]int, len(test_tup1_elements))\n\tfor i, test_tup1_element_element := range test_tup1_elements {\n\t\ttest_tup1_elements_elements[i] = make([]int, len(test_tup1_element_element))\n\t\tfor j, test_tup1_element_element_element := range test_tup1_element_element {\n\t\t\ttest_tup1_elements_elements[i][j] = test_tup1_element_element_element\n\t\t}\n\t}\n\n\tvar test_tup2_elements_elements_elements = make([][]int, len(test_tup2_elements))\n\tfor i, test_tup2_element_element := range test_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(maximize_elements(test_tup1: [[1, 3], [4, 5], [2, 9], [1, 10]], test_tup2: [[6, 7], [3, 9], [1, 1], [7, 3]]) == [[6, 7], [4, 9], [2, 9], [7, 10]])",
            "assert(maximize_elements(test_tup1: [[2, 4], [5, 6], [3, 10], [2, 11]], test_tup2: [[7, 8], [4, 10], [2, 2], [8, 4]]) == [[7, 8], [5, 10], [3, 10], [8, 11]])",
            "assert(maximize_elements(test_tup1: [[3, 5], [6, 7], [4, 11], [3, 12]], test_tup2: [[8, 9], [5, 11], [3, 3], [9, 5]]) == [[8, 9], [6, 11], [4, 11], [9, 12]])"
        ]
    },
    {
        "task_id": "260",
        "title": "newman_prime",
        "text": "/ Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "code": "\nfunc newman_prime(n: Int) -> Int {\n\tif n == 0 {\n\t\treturn 1\n\t}\n\tif n == 1 {\n\t\treturn 2\n\t}\n\treturn newman_prime(n-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(newman_prime(n: 3) == 7)",
            "assert(newman_prime(n: 4) == 17)",
            "assert(newman_prime(n: 5) == 41)"
        ]
    },
    {
        "task_id": "261",
        "title": "division_elements",
        "text": "/ Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.",
        "code": "\nfunc division_elements(test_tup1: (Int, Int, Int, Int), test_tup2: (Int, Int, Int, Int)) -> (Int, Int, Int, Int) {\n\treturn test_tup1.Div(test_tup2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(division_elements(test_tup1: (10, 4, 6, 9), test_tup2: (5, 2, 3, 3)) == (2, 2, 2, 3))",
            "assert(division_elements(test_tup1: (12, 6, 8, 16), test_tup2: (6, 3, 4, 4)) == (2, 2, 2, 4))",
            "assert(division_elements(test_tup1: (20, 14, 36, 18), test_tup2: (5, 7, 6, 9)) == (4, 2, 6, 2))"
        ]
    },
    {
        "task_id": "262",
        "title": "split_two_parts",
        "text": "/ Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in a tuple.",
        "code": "\nfunc split_two_parts(list1: [AnyHashable], L: Int) -> AnyHashable {\n\tif len(list1) == 0 {\n\t\treturn list1\n\t}\n\tif len(list1) == 1 {\n\t\treturn list1[0]\n\t}\n\treturn split_two_parts_helper(list1, L)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(split_two_parts(list1: [1, 1, 2, 3, 4, 4, 5, 1], L: 3) == ([1, 1, 2], [3, 4, 4, 5, 1]))",
            "assert(split_two_parts(list1: [\"a\", \"b\", \"c\", \"d\"], L: 2) == ([\"a\", \"b\"], [\"c\", \"d\"]))",
            "assert(split_two_parts(list1: [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], L: 4) == ([\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]))"
        ]
    },
    {
        "task_id": "264",
        "title": "dog_age",
        "text": "/ Write a function to calculate a dog's age in dog's years.",
        "code": "\nfunc dog_age(h_age: Int) -> Int {\n\treturn h_age * 365.25\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(dog_age(h_age: 12) == 61)",
            "assert(dog_age(h_age: 15) == 73)",
            "assert(dog_age(h_age: 24) == 109)"
        ]
    },
    {
        "task_id": "265",
        "title": "list_split",
        "text": "/ Write a function that takes in an array and an integer n and splits an array for every nth element, returning an array of the resulting arrays.",
        "code": "\nfunc list_split(S: [AnyHashable], step: Int) -> [[AnyHashable]] {\n\tvar result [][]AnyHashable\n\tfor i := 0; i < len(S); i += step {\n\t\tresult = append(result, S[i:i+step])\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(list_split(S: [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"], step: 3) == [[\"a\", \"d\", \"g\", \"j\", \"m\"], [\"b\", \"e\", \"h\", \"k\", \"n\"], [\"c\", \"f\", \"i\", \"l\"]])",
            "assert(list_split(S: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], step: 3) == [[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]])",
            "assert(list_split(S: [\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\"], step: 2) == [[\"python\", \"C\", \"DBMS\"], [\"java\", \"C++\", \"SQL\"]])"
        ]
    },
    {
        "task_id": "266",
        "title": "lateralsurface_cube",
        "text": "/ Write a function to find the lateral surface area of a cube given its side length.",
        "code": "\nfunc lateralsurface_cube(l: Int) -> Int {\n\treturn lateralsurface_cube_int(l, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(lateralsurface_cube(l: 5) == 100)",
            "assert(lateralsurface_cube(l: 9) == 324)",
            "assert(lateralsurface_cube(l: 10) == 400)"
        ]
    },
    {
        "task_id": "267",
        "title": "square_Sum",
        "text": "/ Write a swiftthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
        "code": "\nfunc square_Sum(n: Int) -> Int {\n\tif n.IsZero() {\n\t\treturn 0\n\t}\n\tif n.IsOne() {\n\t\treturn 1\n\t}\n\tif n.IsNegative() {\n\t\treturn -1 * n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.Mul(n.\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(square_Sum(n: 2) == 10)",
            "assert(square_Sum(n: 3) == 35)",
            "assert(square_Sum(n: 4) == 84)"
        ]
    },
    {
        "task_id": "268",
        "title": "find_star_num",
        "text": "/ Write a function to find then'th star number.",
        "code": "\nfunc find_star_num(n: Int) -> Int {\n\tif n == 0 {\n\t\treturn 0\n\t}\n\tif n == 1 {\n\t\treturn 1\n\t}\n\treturn find_star_num(n-1) + find_star_num(n-2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(find_star_num(n: 3) == 37)",
            "assert(find_star_num(n: 4) == 73)",
            "assert(find_star_num(n: 5) == 121)"
        ]
    },
    {
        "task_id": "269",
        "title": "ascii_value",
        "text": "/ Write a function to find the ascii value of a character.",
        "code": "\nfunc ascii_value(k: String) -> Int {\n\treturn k.ascii_value()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(ascii_value(k: \"A\") == 65)",
            "assert(ascii_value(k: \"R\") == 82)",
            "assert(ascii_value(k: \"S\") == 83)"
        ]
    },
    {
        "task_id": "270",
        "title": "sum_even_and_even_index",
        "text": "/ Write a swiftthon function to find the sum of even numbers at even positions of an array.",
        "code": "\nfunc sum_even_and_even_index(arr: [Int]) -> Int {\n\tsum := 0\n\tfor i := 0; i < len(arr); i += 2 {\n\t\tsum += arr[i]\n\t}\n\treturn sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(sum_even_and_even_index(arr: [5, 6, 12, 1, 18, 8]) == 30)",
            "assert(sum_even_and_even_index(arr: [3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26)",
            "assert(sum_even_and_even_index(arr: [5, 6, 12, 1]) == 12)"
        ]
    },
    {
        "task_id": "271",
        "title": "even_Power_Sum",
        "text": "/ Write a swiftthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
        "code": "\nfunc even_Power_Sum(n: Int) -> Int {\n\tif n == 0 {\n\t\treturn 0\n\t}\n\tif n == 1 {\n\t\treturn 1\n\t}\n\tif n == 2 {\n\t\treturn 2\n\t}\n\tif n == 3 {\n\t\treturn 3\n\t}\n\tif n == 4 {\n\t\treturn 4\n\t}\n\tif n == 5 {\n\t\treturn 5\n\t}\n\treturn 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(even_Power_Sum(n: 2) == 1056)",
            "assert(even_Power_Sum(n: 3) == 8832)",
            "assert(even_Power_Sum(n: 1) == 32)"
        ]
    },
    {
        "task_id": "272",
        "title": "rear_extract",
        "text": "/ Write a function that takes in an array of tuples and returns an array containing the rear element of each tuple.",
        "code": "\nfunc rear_extract(test_list: [(Int, String, Int)]) -> [Int] {\n\tvar result [][]Int\n\tfor _, t := range test_list {\n\t\tresult = append(result, t[1])\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(rear_extract(test_list: [(1, \"Rash\", 21), (2, \"Varsha\", 20), (3, \"Kil\", 19)]) == [21, 20, 19])",
            "assert(rear_extract(test_list: [(1, \"Sai\", 36), (2, \"Ayesha\", 25), (3, \"Salman\", 45)]) == [36, 25, 45])",
            "assert(rear_extract(test_list: [(1, \"Sudeep\", 14), (2, \"Vandana\", 36), (3, \"Dawood\", 56)]) == [14, 36, 56])"
        ]
    },
    {
        "task_id": "273",
        "title": "substract_elements",
        "text": "/ Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.",
        "code": "\nfunc substract_elements(test_tup1: (Int, Int, Int), test_tup2: (Int, Int, Int)) -> (Int, Int, Int) {\n\tvar test_tup1_tuple1 Int\n\tvar test_tup1_tuple2 Int\n\tvar test_tup2_tuple1 Int\n\tvar test_tup2_tuple2 Int\n\tvar test_tup1_tuple1_tuple2 Int\n\tvar test_tup2_tuple1_tuple2 Int\n\tvar test_tup1_tuple1_tuple2_tuple1 Int\n\tvar test_tup2_tuple1_tuple2_tuple1 Int\n\tvar test_tup1_tuple1_tuple2_tuple2 Int\n\tvar test_tup2_tuple1_tuple2_tuple2 Int\n\tvar test_tup1_tuple1_tuple2_tuple2_tuple1 Int\n\tvar test_tup2_tuple1_tuple2_tuple2_tuple1 Int\n\tvar test_tup1_tuple1_tuple2_tuple2_tuple2 Int\n\tvar test_tup2_tuple1_tuple2_tuple2_tuple2_tuple1 Int\n\tvar test_tup1_tuple1_tuple2_tuple2_tuple2_tuple2 Int\n\tvar test_tup2_tuple1_tuple2_tuple2_tuple2_tuple2_tuple1 Int\n\tvar test_tup1_tuple1_tuple2_tuple2_tuple2_tuple2_tuple2 Int\n\tvar test_tup2_tuple1_tuple2_tuple2_tuple2_tuple2_tuple2_tuple1 Int\n\tvar test_tup1_tuple1_tuple2_tuple2_tuple2_tuple2_tuple\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(substract_elements(test_tup1: (10, 4, 5), test_tup2: (2, 5, 18)) == (8, -1, -13))",
            "assert(substract_elements(test_tup1: (11, 2, 3), test_tup2: (24, 45, 16)) == (-13, -43, -13))",
            "assert(substract_elements(test_tup1: (7, 18, 9), test_tup2: (10, 11, 12)) == (-3, 7, -3))"
        ]
    },
    {
        "task_id": "274",
        "title": "even_binomial_Coeff_Sum",
        "text": "/ Write a swiftthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
        "code": "\nfunc even_binomial_Coeff_Sum(n: Int) -> Int {\n\tif n == 0 {\n\t\treturn 0\n\t}\n\tif n == 1 {\n\t\treturn 1\n\t}\n\treturn n * (n - 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(even_binomial_Coeff_Sum(n: 4) == 8)",
            "assert(even_binomial_Coeff_Sum(n: 6) == 32)",
            "assert(even_binomial_Coeff_Sum(n: 2) == 2)"
        ]
    },
    {
        "task_id": "277",
        "title": "dict_filter",
        "text": "/ Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.",
        "code": "\nfunc dict_filter(dict: [String : Int], n: Int) -> [String : Int] {\n\tvar result [][]String\n\tfor k, v := range dict {\n\t\tif v >= n {\n\t\t\tresult = append(result, k)\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(dict_filter(dict: [\"Cierra Vega\" : 175, \"Alden Cantrell\" : 180, \"Kierra Gentry\" : 165, \"Pierre Cox\" : 190], n: 170) == [\"Cierra Vega\" : 175, \"Alden Cantrell\" : 180, \"Pierre Cox\" : 190])",
            "assert(dict_filter(dict: [\"Cierra Vega\" : 175, \"Alden Cantrell\" : 180, \"Kierra Gentry\" : 165, \"Pierre Cox\" : 190], n: 180) == [\"Alden Cantrell\" : 180, \"Pierre Cox\" : 190])",
            "assert(dict_filter(dict: [\"Cierra Vega\" : 175, \"Alden Cantrell\" : 180, \"Kierra Gentry\" : 165, \"Pierre Cox\" : 190], n: 190) == [\"Pierre Cox\" : 190])"
        ]
    },
    {
        "task_id": "278",
        "title": "count_first_elements",
        "text": "/ Write a function to find the number of elements that occurs before the array element in the given tuple.",
        "code": "\nextension (Int, Int): Error {}\n        \nfunc count_first_elements(test_tup: [Result<Int, (Int, Int)>]) -> Int {\n    var count = 0\n    for _, elem := range test_tup {\n        if elem.Value() == 0 {\n            count++\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(count_first_elements(test_tup: [.success(1), .success(5), .success(7), .failure((4, 6)), .success(10)]) == 3)",
            "assert(count_first_elements(test_tup: [.success(2), .success(9), .failure((5, 7)), .success(11)]) == 2)",
            "assert(count_first_elements(test_tup: [.success(11), .success(15), .success(5), .success(8), .failure((2, 3)), .success(8)]) == 4)"
        ]
    },
    {
        "task_id": "279",
        "title": "is_num_decagonal",
        "text": "/ Write a function to find the nth decagonal number.",
        "code": "\nfunc is_num_decagonal(n: Int) -> Int {\n\tif n == 0 {\n\t\treturn 0\n\t}\n\tif n == 1 {\n\t\treturn 1\n\t}\n\tif n == 2 {\n\t\treturn 2\n\t}\n\tif n == 3 {\n\t\treturn 3\n\t}\n\tif n == 4 {\n\t\treturn 4\n\t}\n\tif n == 5 {\n\t\treturn 5\n\t}\n\tif n == 6 {\n\t\treturn 6\n\t}\n\tif n == 7 {\n\t\treturn 7\n\t}\n\tif n == 8 {\n\t\treturn 8\n\t}\n\tif n == 9 {\n\t\treturn 9\n\t}\n\tif n == 10 {\n\t\treturn 10\n\t}\n\tif n == 11 {\n\t\treturn 11\n\t}\n\tif n == 12 {\n\t\treturn 12\n\t}\n\tif n == 13 {\n\t\treturn 13\n\t}\n\tif n == 14 {\n\t\treturn 14\n\t}\n\tif n == 15 {\n\t\treturn 15\n\t}\n\tif n == 16 {\n\t\treturn 16\n\t}\n\tif n == 17 {\n\t\treturn 17\n\t}\n\tif n == 18 {\n\t\treturn 18\n\t}\n\tif n == 19 {\n\t\treturn 19\n\t}\n\tif n == 20 {\n\t\treturn 20\n\t}\n\tif n == 21 {\n\t\treturn 21\n\t}\n\tif n == 22 {\n\t\treturn 22\n\t}\n\tif n == 23 {\n\t\treturn 23\n\t}\n\tif n == 24 {\n\t\treturn 24\n\t}\n\tif n == 25 {\n\t\treturn 25\n\t}\n\tif n == 26 {\n\t\treturn 26\n\t}\n\tif n == 27 {\n\t\treturn 27\n\t}\n\tif n == 28 {\n\t\treturn 28\n\t}\n\tif n == 29 {\n\t\treturn 29\n\t}\n\tif n == 30 {\n\t\treturn 30\n\t}\n\tif n == 31 {\n\t\treturn 31\n\t}\n\tif n == 32 {\n\t\treturn 32\n\t}\n\tif n == 33 {\n\t\treturn 33\n\t}\n\tif n == 34\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(is_num_decagonal(n: 3) == 27)",
            "assert(is_num_decagonal(n: 7) == 175)",
            "assert(is_num_decagonal(n: 10) == 370)"
        ]
    },
    {
        "task_id": "280",
        "title": "sequential_search",
        "text": "/ Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).",
        "code": "\nfunc sequential_search(dlist: [Int], item: Int) -> (Bool, Int) {\n\tif len(dlist) == 0 {\n\t\treturn false, -1\n\t}\n\tif len(dlist) == 1 {\n\t\treturn dlist[0] == item, 0\n\t}\n\treturn dlist[0] == item, 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(sequential_search(dlist: [11, 23, 58, 31, 56, 77, 43, 12, 65, 19], item: 31) == (true, 3))",
            "assert(sequential_search(dlist: [12, 32, 45, 62, 35, 47, 44, 61], item: 61) == (true, 7))",
            "assert(sequential_search(dlist: [9, 10, 17, 19, 22, 39, 48, 56], item: 48) == (true, 6))"
        ]
    },
    {
        "task_id": "281",
        "title": "all_unique",
        "text": "/ Write a swiftthon function to check if the elements of a given array are unique or not.",
        "code": "\nfunc all_unique(test_list: [Int]) -> Bool {\n\tunique := Bool{}\n\tfor _, elem := range test_list {\n\t\tif unique.IsTrue(elem) {\n\t\t\treturn Bool{true, true}\n\t\t}\n\t}\n\treturn unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(all_unique(test_list: [1, 2, 3]) == true)",
            "assert(all_unique(test_list: [1, 2, 1, 2]) == false)",
            "assert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)"
        ]
    },
    {
        "task_id": "282",
        "title": "sub_list",
        "text": "/ Write a function to subtract two arrays element-wise.",
        "code": "\nfunc sub_list(nums1: [Int], nums2: [Int]) -> [Int] {\n\tvar result [Int]\n\tfor i := 0; i < len(nums1); i++ {\n\t\tresult[i] = nums1[i] - nums2[i]\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(sub_list(nums1: [1, 2, 3], nums2: [4, 5, 6]) == [-3, -3, -3])",
            "assert(sub_list(nums1: [1, 2], nums2: [3, 4]) == [-2, -2])",
            "assert(sub_list(nums1: [90, 120], nums2: [50, 70]) == [40, 50])"
        ]
    },
    {
        "task_id": "283",
        "title": "validate",
        "text": "/ Write a swiftthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
        "code": "\nfunc validate(n: Int) -> Bool {\n\tif n.IsZero() {\n\t\treturn false\n\t}\n\tif n.IsOne() {\n\t\treturn true\n\t}\n\tif n.IsNegative() {\n\t\treturn false\n\t}\n\tif n.IsNegative() {\n\t\treturn true\n\t}\n\tif n.IsZero() {\n\t\treturn false\n\t}\n\tif n.IsOne() {\n\t\treturn true\n\t}\n\tif n.IsNegative() {\n\t\treturn false\n\t}\n\tif n.IsNegative() {\n\t\treturn true\n\t}\n\tif n.IsZero() {\n\t\treturn false\n\t}\n\tif n.IsOne() {\n\t\treturn true\n\t}\n\tif n.IsNegative() {\n\t\treturn false\n\t}\n\tif n.IsZero() {\n\t\treturn false\n\t}\n\tif n.IsOne() {\n\t\treturn true\n\t}\n\tif n.IsNegative() {\n\t\treturn false\n\t}\n\tif n.IsZero() {\n\t\treturn false\n\t}\n\tif n.IsOne() {\n\t\treturn true\n\t}\n\tif n.IsNegative() {\n\t\treturn false\n\t}\n\tif n.IsZero() {\n\t\treturn false\n\t}\n\tif n.IsOne() {\n\t\treturn true\n\t}\n\tif n.IsNegative() {\n\t\treturn false\n\t}\n\tif n.IsZero() {\n\t\treturn false\n\t}\n\tif n.IsOne() {\n\t\treturn true\n\t}\n\tif n.IsNegative() {\n\t\treturn false\n\t}\n\tif n.IsZero() {\n\t\treturn false\n\t}\n\tif n.IsOne() {\n\t\treturn true\n\t}\n\tif n.IsNegative() {\n\t\treturn false\n\t}\n\tif n.IsZero() {\n\t\treturn false\n\t}\n\tif n.IsOne() {\n\t\treturn true\n\t}\n\tif n.IsNegative()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(validate(n: 1234) == true)",
            "assert(validate(n: 51241) == false)",
            "assert(validate(n: 321) == true)"
        ]
    },
    {
        "task_id": "284",
        "title": "check_element",
        "text": "/ Write a function that takes in an array and element and checks whether all items in the array are equal to the given element.",
        "code": "\nfunc check_element(list: [AnyHashable], element: AnyHashable) -> Bool {\n\tfor i := range list {\n\t\tif list[i]!= element {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(check_element(list: [\"green\", \"orange\", \"black\", \"white\"], element: \"blue\") == false)",
            "assert(check_element(list: [1, 2, 3, 4], element: 7) == false)",
            "assert(check_element(list: [\"green\", \"green\", \"green\", \"green\"], element: \"green\") == true)"
        ]
    },
    {
        "task_id": "285",
        "title": "text_match_two_three",
        "text": "/ Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
        "code": "\nfunc text_match_two_three(text: String) -> Bool {\n\treturn text.Match(func(s string) bool {\n\t\treturn s[0] == 'a' && s[1] == 'b'\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(text_match_two_three(text: \"ac\") == false)",
            "assert(text_match_two_three(text: \"dc\") == false)",
            "assert(text_match_two_three(text: \"abbbba\") == true)"
        ]
    },
    {
        "task_id": "286",
        "title": "max_sub_array_sum_repeated",
        "text": "/ Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.",
        "code": "\nfunc max_sub_array_sum_repeated(a: [Int], n: Int, k: Int) -> Int {\n\tif len(a) == 0 {\n\t\treturn 0\n\t}\n\tif len(a) == 1 {\n\t\treturn a[0]\n\t}\n\tif len(a) == 2 {\n\t\treturn max(a[0], a[1])\n\t}\n\tif len(a) == 3 {\n\t\treturn max(a[0], a[1], a[2])\n\t}\n\tif len(a) == 4 {\n\t\treturn max(a[0], a[1], a[2], a[3])\n\t}\n\tif len(a) == 5 {\n\t\treturn max(a[0], a[1], a[2], a[3], a[4])\n\t}\n\tif len(a) == 6 {\n\t\treturn max(a[0], a[1], a[2], a[3], a[4], a[5])\n\t}\n\tif len(a) == 7 {\n\t\treturn max(a[0], a[1], a[2], a[3], a[4], a[5], a[6])\n\t}\n\tif len(a) == 8 {\n\t\treturn max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7])\n\t}\n\tif len(a) == 9 {\n\t\treturn max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8])\n\t}\n\tif len(a) == 10 {\n\t\treturn max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9])\n\t}\n\tif len(a) == 11 {\n\t\treturn max(a[0], a[1], a[2], a[3], a[4], a[5],\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(max_sub_array_sum_repeated(a: [10, 20, -30, -1], n: 4, k: 3) == 30)",
            "assert(max_sub_array_sum_repeated(a: [-1, 10, 20], n: 3, k: 2) == 59)",
            "assert(max_sub_array_sum_repeated(a: [-1, -2, -3], n: 3, k: 3) == -1)"
        ]
    },
    {
        "task_id": "287",
        "title": "square_Sum",
        "text": "/ Write a swiftthon function takes in an integer n and returns the sum of squares of first n even natural numbers.",
        "code": "\nfunc square_Sum(n: Int) -> Int {\n\tif n == 0 {\n\t\treturn 0\n\t}\n\treturn n * n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(square_Sum(n: 2) == 20)",
            "assert(square_Sum(n: 3) == 56)",
            "assert(square_Sum(n: 4) == 120)"
        ]
    },
    {
        "task_id": "290",
        "title": "max_length",
        "text": "/ Write a function to find the array of maximum length in an array of arrays.",
        "code": "\nfunc max_length(list1: [[Int]]) -> (Int, [Int]) {\n\tvar max_len int\n\tfor _, v := range list1 {\n\t\tif len(v) > max_len {\n\t\t\tmax_len = len(v)\n\t\t}\n\t}\n\treturn max_len, list1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(max_length(list1: [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17]))",
            "assert(max_length(list1: [[1], [5, 7], [10, 12, 14, 15]]) == (4, [10, 12, 14, 15]))",
            "assert(max_length(list1: [[5], [15, 20, 25]]) == (3, [15, 20, 25]))"
        ]
    },
    {
        "task_id": "291",
        "title": "count_no_of_ways",
        "text": "/ Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
        "code": "\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n\tvar count int\n\tfor i := 0; i < n; i++ {\n\t\tfor j := 0; j < k; j++ {\n\t\t\tif i == j {\n\t\t\t\tcount++\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(count_no_of_ways(n: 2, k: 4) == 16)",
            "assert(count_no_of_ways(n: 3, k: 2) == 6)",
            "assert(count_no_of_ways(n: 4, k: 4) == 228)"
        ]
    },
    {
        "task_id": "292",
        "title": "find",
        "text": "/ Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).",
        "code": "\nfunc find(n: Int, m: Int) -> Int {\n\tif n.Cmp(m) == 0 {\n\t\treturn n\n\t}\n\treturn find(n.Cmp(m), m.Cmp(n))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(find(n: 10, m: 3) == 3)",
            "assert(find(n: 4, m: 2) == 2)",
            "assert(find(n: 20, m: 5) == 4)"
        ]
    },
    {
        "task_id": "293",
        "title": "otherside_rightangle",
        "text": "/ Write a function to find the third side of a right angled triangle.",
        "code": "\nfunc otherside_rightangle(w: Int, h: Int) -> Double {\n\tif h == 0 {\n\t\treturn Double(0)\n\t}\n\tif h == 1 {\n\t\treturn Double(1)\n\t}\n\tif h == 2 {\n\t\treturn Double(2)\n\t}\n\tif h == 3 {\n\t\treturn Double(3)\n\t}\n\tif h == 4 {\n\t\treturn Double(4)\n\t}\n\tif h == 5 {\n\t\treturn Double(5)\n\t}\n\tif h == 6 {\n\t\treturn Double(6)\n\t}\n\tif h == 7 {\n\t\treturn Double(7)\n\t}\n\tif h == 8 {\n\t\treturn Double(8)\n\t}\n\tif h == 9 {\n\t\treturn Double(9)\n\t}\n\tif h == 10 {\n\t\treturn Double(10)\n\t}\n\tif h == 11 {\n\t\treturn Double(11)\n\t}\n\tif h == 12 {\n\t\treturn Double(12)\n\t}\n\tif h == 13 {\n\t\treturn Double(13)\n\t}\n\tif h == 14 {\n\t\treturn Double(14)\n\t}\n\tif h == 15 {\n\t\treturn Double(15)\n\t}\n\tif h == 16 {\n\t\treturn Double(16)\n\t}\n\tif h == 17 {\n\t\treturn Double(17)\n\t}\n\tif h == 18 {\n\t\treturn Double(18)\n\t}\n\tif h == 19 {\n\t\treturn Double(19)\n\t}\n\tif h == 20 {\n\t\treturn Double(20)\n\t}\n\tif h == 21 {\n\t\treturn Double(21)\n\t}\n\tif h == 22 {\n\t\treturn Double(22)\n\t}\n\tif h == 23 {\n\t\treturn Double(23)\n\t}\n\tif h == 24 {\n\t\treturn Double(24)\n\t}\n\tif h == 25 {\n\t\treturn Double(25)\n\t}\n\tif h == 26 {\n\t\treturn Double(26)\n\t}\n\tif h == 27 {\n\t\treturn Double(27)\n\t}\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(otherside_rightangle(w: 7, h: 8) == 10.63014581273465)",
            "assert(otherside_rightangle(w: 3, h: 4) == 5)",
            "assert(otherside_rightangle(w: 7, h: 15) == 16.55294535724685)"
        ]
    },
    {
        "task_id": "294",
        "title": "max_val",
        "text": "/ Write a function to find the maximum value in a given heterogeneous array.",
        "code": "\nextension Int: Error {}\n        \nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    maxval := 0\n    for _, val := range listval {\n        if val.Val > maxval {\n            maxval = val.Val\n        }\n    }\n    return maxval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)",
            "assert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)",
            "assert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)"
        ]
    },
    {
        "task_id": "295",
        "title": "sum_div",
        "text": "/ Write a function to return the sum of all divisors of a number.",
        "code": "\nfunc sum_div(number: Int) -> Int {\n\tif number == 0 {\n\t\treturn 0\n\t}\n\treturn number * sum_div(number-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(sum_div(number: 8) == 7)",
            "assert(sum_div(number: 12) == 16)",
            "assert(sum_div(number: 7) == 1)"
        ]
    },
    {
        "task_id": "296",
        "title": "get_Inv_Count",
        "text": "/ Write a swiftthon function to count inversions in an array.",
        "code": "\nfunc get_Inv_Count(arr: [Int]) -> Int {\n\tvar count = 0\n\tfor i := 0; i < len(arr); i++ {\n\t\tif arr[i] == 0 {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(get_Inv_Count(arr: [1, 20, 6, 4, 5]) == 5)",
            "assert(get_Inv_Count(arr: [1, 2, 1]) == 1)",
            "assert(get_Inv_Count(arr: [1, 2, 5, 6, 1]) == 3)"
        ]
    },
    {
        "task_id": "297",
        "title": "flatten_list",
        "text": "/ Write a function to flatten a given nested array structure.",
        "code": "\nextension [Int]: Error {}\n        \nfunc flatten_list(list1: [Result<Int, [Int]>]) -> [Int] {\n    var result [Int]\n    for _, item := range list1 {\n        result = append(result, item.Value)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(flatten_list(list1: [.success(0), .success(10), .failure([20, 30]), .success(40), .success(50), .failure([60, 70, 80]), .failure([90, 100, 110, 120])]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])",
            "assert(flatten_list(list1: [.failure([10, 20]), .failure([40]), .failure([30, 56, 25]), .failure([10, 20]), .failure([33]), .failure([40])]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])",
            "assert(flatten_list(list1: [.failure([1, 2, 3]), .failure([4, 5, 6]), .failure([10, 11, 12]), .failure([7, 8, 9])]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])"
        ]
    },
    {
        "task_id": "299",
        "title": "max_aggregate",
        "text": "/ Write a function to calculate the maximum aggregate from the array of tuples.",
        "code": "\nfunc max_aggregate(stdata: [(String, Int)]) -> (String, Int) {\n\tvar max_aggregate_str string\n\tvar max_aggregate_int int\n\tfor _, t := range stdata {\n\t\tif t[0] == \"max_aggregate\" {\n\t\t\tmax_aggregate_str = t[1]\n\t\t\tmax_aggregate_int = t[2]\n\t\t}\n\t}\n\treturn max_aggregate_str, max_aggregate_int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(max_aggregate(stdata: [(\"Juan Whelan\", 90), (\"Sabah Colley\", 88), (\"Peter Nichols\", 7), (\"Juan Whelan\", 122), (\"Sabah Colley\", 84)]) == (\"Juan Whelan\", 212))",
            "assert(max_aggregate(stdata: [(\"Juan Whelan\", 50), (\"Sabah Colley\", 48), (\"Peter Nichols\", 37), (\"Juan Whelan\", 22), (\"Sabah Colley\", 14)]) == (\"Juan Whelan\", 72))",
            "assert(max_aggregate(stdata: [(\"Juan Whelan\", 10), (\"Sabah Colley\", 20), (\"Peter Nichols\", 30), (\"Juan Whelan\", 40), (\"Sabah Colley\", 50)]) == (\"Sabah Colley\", 70))"
        ]
    },
    {
        "task_id": "304",
        "title": "find_Element",
        "text": "/ Write a swiftthon function to find element at a given index after number of rotations.",
        "code": "\nfunc find_Element(arr: [Int], ranges: [[Int]], rotations: Int, index: Int) -> Int {\n\tif index >= len(arr) {\n\t\treturn -1\n\t}\n\tif index < 0 {\n\t\treturn -1\n\t}\n\tif index >= len(arr) {\n\t\treturn -1\n\t}\n\tif index < 0 {\n\t\treturn -1\n\t}\n\tif index >= len(arr) {\n\t\treturn -1\n\t}\n\tif index < 0 {\n\t\treturn -1\n\t}\n\tif index >= len(arr) {\n\t\treturn -1\n\t}\n\tif index < 0 {\n\t\treturn -1\n\t}\n\tif index >= len(arr) {\n\t\treturn -1\n\t}\n\tif index < 0 {\n\t\treturn -1\n\t}\n\tif index >= len(arr) {\n\t\treturn -1\n\t}\n\tif index < 0 {\n\t\treturn -1\n\t}\n\tif index >= len(arr) {\n\t\treturn -1\n\t}\n\tif index < 0 {\n\t\treturn -1\n\t}\n\tif index >= len(arr) {\n\t\treturn -1\n\t}\n\tif index < 0 {\n\t\treturn -1\n\t}\n\tif index >= len(arr) {\n\t\treturn -1\n\t}\n\tif index < 0 {\n\t\treturn -1\n\t}\n\tif index >= len(arr) {\n\t\treturn -1\n\t}\n\tif index < 0 {\n\t\treturn -1\n\t}\n\tif index >= len(arr) {\n\t\treturn -1\n\t}\n\tif index < 0 {\n\t\treturn -1\n\t}\n\tif index >= len(arr) {\n\t\treturn -1\n\t}\n\tif index < 0 {\n\t\treturn -1\n\t}\n\tif index >= len(arr) {\n\t\treturn -1\n\t}\n\tif index < 0 {\n\t\treturn -1\n\t}\n\tif index >= len(arr) {\n\t\treturn -1\n\t}\n\tif index < 0 {\n\t\treturn -1\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(find_Element(arr: [1, 2, 3, 4, 5], ranges: [[0, 2], [0, 3]], rotations: 2, index: 1) == 3)",
            "assert(find_Element(arr: [1, 2, 3, 4], ranges: [[0, 1], [0, 2]], rotations: 1, index: 2) == 3)",
            "assert(find_Element(arr: [1, 2, 3, 4, 5, 6], ranges: [[0, 1], [0, 2]], rotations: 1, index: 1) == 1)"
        ]
    },
    {
        "task_id": "305",
        "title": "start_withp",
        "text": "/ Write a function to return two words from an array of words starting with letter 'p'.",
        "code": "\nfunc start_withp(words: [String]) -> (String, String) {\n\tif len(words) == 0 {\n\t\treturn \"\", \"\"\n\t}\n\treturn words[0], words[len(words)-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(start_withp(words: [\"Python PHP\", \"Java JavaScript\", \"c c++\"]) == (\"Python\", \"PHP\"))",
            "assert(start_withp(words: [\"Python Programming\", \"Java Programming\"]) == (\"Python\", \"Programming\"))",
            "assert(start_withp(words: [\"Pqrst Pqr\", \"qrstuv\"]) == (\"Pqrst\", \"Pqr\"))"
        ]
    },
    {
        "task_id": "306",
        "title": "max_sum_increasing_subseq",
        "text": "/ Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.",
        "code": "\nfunc max_sum_increasing_subseq(a: [Int], n: Int, index: Int, k: Int) -> Int {\n\tif len(a) == 0 {\n\t\treturn 0\n\t}\n\tif index >= n {\n\t\treturn 0\n\t}\n\tif index == 0 {\n\t\treturn a[index]\n\t}\n\tif index == n-1 {\n\t\treturn a[index] + max_sum_increasing_subseq(a, n-1, index-1, k)\n\t}\n\tif index == n-2 {\n\t\treturn a[index] + max_sum_increasing_subseq(a, n-2, index-2, k)\n\t}\n\treturn a[index] + max_sum_increasing_subseq(a, index, index+1, k)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 4, k: 6) == 11)",
            "assert(max_sum_increasing_subseq(a: [1, 101, 2, 3, 100, 4, 5], n: 7, index: 2, k: 5) == 7)",
            "assert(max_sum_increasing_subseq(a: [11, 15, 19, 21, 26, 28, 31], n: 7, index: 2, k: 4) == 71)"
        ]
    },
    {
        "task_id": "308",
        "title": "large_product",
        "text": "/ Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.",
        "code": "\nfunc large_product(nums1: [Int], nums2: [Int], N: Int) -> [Int] {\n\tvar result [Int] = make([]Int, N)\n\tfor i := 0; i < N; i++ {\n\t\tresult[i] = nums1[i] * nums2[i]\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(large_product(nums1: [1, 2, 3, 4, 5, 6], nums2: [3, 6, 8, 9, 10, 6], N: 3) == [60, 54, 50])",
            "assert(large_product(nums1: [1, 2, 3, 4, 5, 6], nums2: [3, 6, 8, 9, 10, 6], N: 4) == [60, 54, 50, 48])",
            "assert(large_product(nums1: [1, 2, 3, 4, 5, 6], nums2: [3, 6, 8, 9, 10, 6], N: 5) == [60, 54, 50, 48, 45])"
        ]
    },
    {
        "task_id": "309",
        "title": "maximum",
        "text": "/ Write a swiftthon function to find the maximum of two numbers.",
        "code": "\nfunc maximum(a: Int, b: Int) -> Int {\n\tif a.Cmp(b) > 0 {\n\t\treturn a\n\t}\n\treturn b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(maximum(a: 5, b: 10) == 10)",
            "assert(maximum(a: -1, b: -2) == -1)",
            "assert(maximum(a: 9, b: 7) == 9)"
        ]
    },
    {
        "task_id": "310",
        "title": "string_to_tuple",
        "text": "/ Write a function to convert a given string to an array of characters.",
        "code": "\nfunc string_to_tuple(str1: String) -> [String] {\n\tvar str2 [String]\n\tfor i := 0; i < len(str1); i++ {\n\t\tstr2[i] = str1[i]\n\t}\n\treturn str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(string_to_tuple(str1: \"python 3.0\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"])",
            "assert(string_to_tuple(str1: \"item1\") == [\"i\", \"t\", \"e\", \"m\", \"1\"])",
            "assert(string_to_tuple(str1: \"15.10\") == [\"1\", \"5\", \".\", \"1\", \"0\"])"
        ]
    },
    {
        "task_id": "388",
        "title": "highest_Power_of_2",
        "text": "/ Write a swiftthon function to find the highest power of 2 that is less than or equal to n.",
        "code": "\nfunc highest_Power_of_2(n: Int) -> Int {\n\tif n == 0 {\n\t\treturn 0\n\t}\n\tif n == 1 {\n\t\treturn 1\n\t}\n\tif n == 2 {\n\t\treturn 2\n\t}\n\tif n == 3 {\n\t\treturn 3\n\t}\n\tif n == 4 {\n\t\treturn 4\n\t}\n\tif n == 5 {\n\t\treturn 5\n\t}\n\tif n == 6 {\n\t\treturn 6\n\t}\n\tif n == 7 {\n\t\treturn 7\n\t}\n\tif n == 8 {\n\t\treturn 8\n\t}\n\tif n == 9 {\n\t\treturn 9\n\t}\n\tif n == 10 {\n\t\treturn 10\n\t}\n\tif n == 11 {\n\t\treturn 11\n\t}\n\tif n == 12 {\n\t\treturn 12\n\t}\n\tif n == 13 {\n\t\treturn 13\n\t}\n\tif n == 14 {\n\t\treturn 14\n\t}\n\tif n == 15 {\n\t\treturn 15\n\t}\n\tif n == 16 {\n\t\treturn 16\n\t}\n\tif n == 17 {\n\t\treturn 17\n\t}\n\tif n == 18 {\n\t\treturn 18\n\t}\n\tif n == 19 {\n\t\treturn 19\n\t}\n\tif n == 20 {\n\t\treturn 20\n\t}\n\tif n == 21 {\n\t\treturn 21\n\t}\n\tif n == 22 {\n\t\treturn 22\n\t}\n\tif n == 23 {\n\t\treturn 23\n\t}\n\tif n == 24 {\n\t\treturn 24\n\t}\n\tif n == 25 {\n\t\treturn 25\n\t}\n\tif n == 26 {\n\t\treturn 26\n\t}\n\tif n == 27 {\n\t\treturn 27\n\t}\n\tif n == 28 {\n\t\treturn 28\n\t}\n\tif n == 29 {\n\t\treturn 29\n\t}\n\tif n == 30 {\n\t\treturn 30\n\t}\n\tif n == 31 {\n\t\treturn 31\n\t}\n\tif n == 32 {\n\t\treturn 32\n\t}\n\tif n == 33 {\n\t\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(highest_Power_of_2(n: 10) == 8)",
            "assert(highest_Power_of_2(n: 19) == 16)",
            "assert(highest_Power_of_2(n: 32) == 32)"
        ]
    },
    {
        "task_id": "389",
        "title": "find_lucas",
        "text": "/ Write a function to find then'th lucas number.",
        "code": "\nfunc find_lucas(n: Int) -> Int {\n\tif n == 0 {\n\t\treturn 0\n\t}\n\treturn find_lucas_1(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(find_lucas(n: 9) == 76)",
            "assert(find_lucas(n: 4) == 7)",
            "assert(find_lucas(n: 3) == 4)"
        ]
    },
    {
        "task_id": "390",
        "title": "add_string",
        "text": "/ Write a function to apply a given format string to all of the elements in an array.",
        "code": "\nfunc add_string(list_: [AnyHashable], string: String) -> [String] {\n\treturn append(list_, string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(add_string(list_: [1, 2, 3, 4], string: \"temp{0}\") == [\"temp1\", \"temp2\", \"temp3\", \"temp4\"])",
            "assert(add_string(list_: [\"a\", \"b\", \"c\", \"d\"], string: \"python{0}\") == [\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"])",
            "assert(add_string(list_: [5, 6, 7, 8], string: \"string{0}\") == [\"string5\", \"string6\", \"string7\", \"string8\"])"
        ]
    },
    {
        "task_id": "391",
        "title": "convert_list_dictionary",
        "text": "/ Write a function to convert more than one array to nested dictionary.",
        "code": "\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n\tl1_len := len(l1)\n\tl2_len := len(l2)\n\tl3_len := len(l3)\n\tif l1_len!= l2_len {\n\t\tpanic(\"l1_len!= l2_len\")\n\t}\n\tif l1_len!= l3_len {\n\t\tpanic(\"l1_len!= l3_len\")\n\t}\n\tif l1_len!= l2_len {\n\t\tpanic(\"l1_len!= l2_len\")\n\t}\n\tif l1_len!= l3_len {\n\t\tpanic(\"l1_len!= l3_len\")\n\t}\n\tif l1_len!= l2_len {\n\t\tpanic(\"l1_len!= l2_len\")\n\t}\n\tif l1_len!= l3_len {\n\t\tpanic(\"l1_len!= l3_len\")\n\t}\n\tif l1_len!= l2_len {\n\t\tpanic(\"l1_len!= l2_len\")\n\t}\n\tif l1_len!= l3_len {\n\t\tpanic(\"l1_len!= l3_len\")\n\t}\n\tif l1_len!= l2_len {\n\t\tpanic(\"l1_len!= l2_len\")\n\t}\n\tif l1_len!= l3_len {\n\t\tpanic(\"l1_len!= l3_len\")\n\t}\n\tif l1_len!= l2_len {\n\t\tpanic(\"l1_len!= l2_len\")\n\t}\n\tif l1_len!= l3_len {\n\t\tpanic(\"l1_len!= l3_len\")\n\t}\n\tif l1_len!= l2_len {\n\t\tpanic(\"l1_len!= l2_len\")\n\t}\n\tif l1_len!= l3_len {\n\t\tpanic(\"l1_len!= l3_len\")\n\t}\n\tif\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])",
            "assert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])",
            "assert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])"
        ]
    },
    {
        "task_id": "392",
        "title": "get_max_sum",
        "text": "/ Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "code": "\nfunc get_max_sum(n: Int) -> Int {\n\tvar max_sum Int\n\tfor i := 1; i <= n; i++ {\n\t\tmax_sum = max(max_sum, f(i))\n\t}\n\treturn max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(get_max_sum(n: 60) == 106)",
            "assert(get_max_sum(n: 10) == 12)",
            "assert(get_max_sum(n: 2) == 2)"
        ]
    },
    {
        "task_id": "393",
        "title": "max_length_list",
        "text": "/ Write a function to find the array with maximum length.",
        "code": "\nfunc max_length_list(input_list: [[Int]]) -> (Int, [Int]) {\n\tmax_length := 0\n\tfor _, item := range input_list {\n\t\tif item > max_length {\n\t\t\tmax_length = item\n\t\t}\n\t}\n\treturn max_length, input_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(max_length_list(input_list: [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17]))",
            "assert(max_length_list(input_list: [[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]]) == (5, [1, 2, 3, 4, 5]))",
            "assert(max_length_list(input_list: [[3, 4, 5], [6, 7, 8, 9], [10, 11, 12]]) == (4, [6, 7, 8, 9]))"
        ]
    },
    {
        "task_id": "394",
        "title": "check_distinct",
        "text": "/ Write a function to check if given array contains no duplicates.",
        "code": "\nfunc check_distinct(test_tup: [Int]) -> Bool {\n\tvar distinct_tup [Int] = make([]Int, len(test_tup))\n\tfor i, v := range test_tup {\n\t\tdistinct_tup[i] = v\n\t}\n\treturn check_distinct_helper(distinct_tup)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(check_distinct(test_tup: [1, 4, 5, 6, 1, 4]) == false)",
            "assert(check_distinct(test_tup: [1, 4, 5, 6]) == true)",
            "assert(check_distinct(test_tup: [2, 3, 4, 5, 6]) == true)"
        ]
    },
    {
        "task_id": "395",
        "title": "first_non_repeating_character",
        "text": "/ Write a swiftthon function to find the first non-repeated character in a given string.",
        "code": "\nfunc first_non_repeating_character(str1: String) -> String? {\n\tif len(str1) == 0 {\n\t\treturn str1\n\t}\n\tstr2 := str1\n\tfor i := 0; i < len(str1); i++ {\n\t\tif str1[i]!= str2[i] {\n\t\t\treturn str1[i]\n\t\t}\n\t}\n\treturn str1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(first_non_repeating_character(str1: \"abcabc\") == nil)",
            "assert(first_non_repeating_character(str1: \"abc\") == \"a\")",
            "assert(first_non_repeating_character(str1: \"ababc\") == \"c\")"
        ]
    },
    {
        "task_id": "396",
        "title": "check_char",
        "text": "/ Write a function to check whether the given string starts and ends with the same character or not.",
        "code": "\nfunc check_char(string: String) -> String {\n\tif len(string) == 0 {\n\t\treturn string\n\t}\n\tif string[0] == string[len(string)-1] {\n\t\treturn string\n\t}\n\treturn string + string[1:]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(check_char(string: \"abba\") == \"Valid\")",
            "assert(check_char(string: \"a\") == \"Valid\")",
            "assert(check_char(string: \"abcd\") == \"Invalid\")"
        ]
    },
    {
        "task_id": "397",
        "title": "median_numbers",
        "text": "/ Write a function to find the median of three numbers.",
        "code": "\nfunc median_numbers(a: Int, b: Int, c: Int) -> Double {\n\tif a.Cmp(b) == 0 {\n\t\treturn Double(a.Int() + b.Int())\n\t}\n\tif a.Cmp(c) == 0 {\n\t\treturn Double(a.Int() + c.Int())\n\t}\n\treturn Double(a.Int() + c.Int() + b.Int())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(median_numbers(a: 25, b: 55, c: 65) == 55.0)",
            "assert(median_numbers(a: 20, b: 10, c: 30) == 20.0)",
            "assert(median_numbers(a: 15, b: 45, c: 75) == 45.0)"
        ]
    },
    {
        "task_id": "398",
        "title": "sum_of_digits",
        "text": "/ Write a function to compute the sum of digits of each number of a given array.",
        "code": "\nfunc sum_of_digits(nums: [AnyHashable]) -> Int {\n\tsum := 0\n\tfor _, num := range nums {\n\t\tsum += num\n\t}\n\treturn sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(sum_of_digits(nums: [10, 2, 56]) == 14)",
            "assert(sum_of_digits(nums: [[10, 20, 4, 5, \"b\", 70, \"a\"]]) == 19)",
            "assert(sum_of_digits(nums: [10, 20, -4, 5, -70]) == 19)"
        ]
    },
    {
        "task_id": "399",
        "title": "bitwise_xor",
        "text": "/ Write a function to perform the mathematical bitwise xor operation across the given tuples.",
        "code": "\nfunc bitwise_xor(test_tup1: (Int, Int, Int, Int), test_tup2: (Int, Int, Int, Int)) -> (Int, Int, Int, Int) {\n\tvar result Int\n\tvar x Int\n\tvar y Int\n\tvar z Int\n\tvar x_tup1 Int\n\tvar x_tup2 Int\n\tvar y_tup1 Int\n\tvar y_tup2 Int\n\tvar z_tup1 Int\n\tvar z_tup2 Int\n\tvar x_tup1_tup2 Int\n\tvar x_tup2_tup2 Int\n\tvar y_tup1_tup2 Int\n\tvar y_tup2_tup2 Int\n\tvar z_tup1_tup2 Int\n\tvar z_tup2_tup2 Int\n\tvar x_tup1_tup2_tup2 Int\n\tvar x_tup2_tup2_tup2 Int\n\tvar y_tup1_tup2_tup2 Int\n\tvar y_tup2_tup2_tup2 Int\n\tvar z_tup1_tup2_tup2 Int\n\tvar z_tup2_tup2_tup2 Int\n\tvar x_tup1_tup2_tup2_tup2 Int\n\tvar x_tup2_tup2_tup2_tup2 Int\n\tvar y_tup1_tup2_tup2_tup2 Int\n\tvar y_tup2_tup2_tup2_tup2 Int\n\tvar z_tup1_tup2_tup2_tup2_tup2 Int\n\tvar z_tup2_tup2_tup2_tup2_tup2 Int\n\tvar x_tup1_tup2_tup2_tup2_tup2 Int\n\tvar x_tup2_tup2_tup2_tup2_tup2 Int\n\tvar y_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(bitwise_xor(test_tup1: (10, 4, 6, 9), test_tup2: (5, 2, 3, 3)) == (15, 6, 5, 10))",
            "assert(bitwise_xor(test_tup1: (11, 5, 7, 10), test_tup2: (6, 3, 4, 4)) == (13, 6, 3, 14))",
            "assert(bitwise_xor(test_tup1: (12, 6, 8, 11), test_tup2: (7, 4, 5, 6)) == (11, 2, 13, 13))"
        ]
    },
    {
        "task_id": "3",
        "title": "is_not_prime",
        "text": "/ Write a swiftthon function to identify non-prime numbers.",
        "code": "\nfunc is_not_prime(n: Int) -> Bool {\n\tif n == 0 {\n\t\treturn true\n\t}\n\tif n%2 == 0 {\n\t\treturn false\n\t}\n\treturn is_not_prime(n / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(is_not_prime(n: 2) == false)",
            "assert(is_not_prime(n: 10) == true)",
            "assert(is_not_prime(n: 35) == true)",
            "assert(is_not_prime(n: 37) == false)"
        ]
    },
    {
        "task_id": "400",
        "title": "extract_freq",
        "text": "/ Write a function to extract the number of unique tuples in the given array.",
        "code": "\nfunc extract_freq(test_list: [(Int, Int)]) -> Int {\n\tvar count int\n\tfor _, item := range test_list {\n\t\tcount += item[0]\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(extract_freq(test_list: [(3, 4), (1, 2), (4, 3), (5, 6)]) == 3)",
            "assert(extract_freq(test_list: [(4, 15), (2, 3), (5, 4), (6, 7)]) == 4)",
            "assert(extract_freq(test_list: [(5, 16), (2, 3), (6, 5), (6, 9)]) == 4)"
        ]
    },
    {
        "task_id": "401",
        "title": "add_nested_tuples",
        "text": "/ Write a function to perform index wise addition of array elements in the given two nested arrays.",
        "code": "\nfunc add_nested_tuples(test_tup1: [[Int]], test_tup2: [[Int]]) -> [[Int]] {\n\tvar result_tup1 = make([]Int, len(test_tup1))\n\tvar result_tup2 = make([]Int, len(test_tup2))\n\tfor i := range result_tup1 {\n\t\tresult_tup1[i] = test_tup1[i] + test_tup2[i]\n\t}\n\treturn result_tup1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(add_nested_tuples(test_tup1: [[1, 3], [4, 5], [2, 9], [1, 10]], test_tup2: [[6, 7], [3, 9], [1, 1], [7, 3]]) == [[7, 10], [7, 14], [3, 10], [8, 13]])",
            "assert(add_nested_tuples(test_tup1: [[2, 4], [5, 6], [3, 10], [2, 11]], test_tup2: [[7, 8], [4, 10], [2, 2], [8, 4]]) == [[9, 12], [9, 16], [5, 12], [10, 15]])",
            "assert(add_nested_tuples(test_tup1: [[3, 5], [6, 7], [4, 11], [3, 12]], test_tup2: [[8, 9], [5, 11], [3, 3], [9, 5]]) == [[11, 14], [11, 18], [7, 14], [12, 17]])"
        ]
    },
    {
        "task_id": "404",
        "title": "minimum",
        "text": "/ Write a swiftthon function to find the minimum of two numbers.",
        "code": "\nfunc minimum(a: Int, b: Int) -> Int {\n\tif a.Cmp(b) < 0 {\n\t\treturn a\n\t}\n\treturn b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(minimum(a: 1, b: 2) == 1)",
            "assert(minimum(a: -5, b: -4) == -5)",
            "assert(minimum(a: 0, b: 0) == 0)"
        ]
    },
    {
        "task_id": "405",
        "title": "check_tuplex",
        "text": "/ Write a function to check whether an element exists within a tuple.",
        "code": "\nextension Int: Error {}\n        \nfunc check_tuplex(tuplex: [Result<String, Int>], tuple1: AnyHashable) -> Bool {\n    if len(tuplex) == 0 {\n        return false\n    }\n    return check_tuple(tuple1, tuplex[0])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(check_tuplex(tuplex: [.success(\"w\"), .failure(3), .success(\"r\"), .success(\"e\"), .success(\"s\"), .success(\"o\"), .success(\"u\"), .success(\"r\"), .success(\"c\"), .success(\"e\")], tuple1: \"r\") == true)",
            "assert(check_tuplex(tuplex: [.success(\"w\"), .failure(3), .success(\"r\"), .success(\"e\"), .success(\"s\"), .success(\"o\"), .success(\"u\"), .success(\"r\"), .success(\"c\"), .success(\"e\")], tuple1: \"5\") == false)",
            "assert(check_tuplex(tuplex: [.success(\"w\"), .failure(3), .success(\"r\"), .success(\"e\"), .success(\"s\"), .success(\"o\"), .success(\"u\"), .success(\"r\"), .success(\"c\"), .success(\"e\")], tuple1: 3) == true)"
        ]
    },
    {
        "task_id": "406",
        "title": "find_Parity",
        "text": "/ Write a swiftthon function to find whether the parity of a given number is odd.",
        "code": "\nfunc find_Parity(x: Int) -> Bool {\n\tif x == 0 {\n\t\treturn false\n\t}\n\treturn x%2 == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(find_Parity(x: 12) == false)",
            "assert(find_Parity(x: 7) == true)",
            "assert(find_Parity(x: 10) == false)"
        ]
    },
    {
        "task_id": "407",
        "title": "rearrange_bigger",
        "text": "/ Write a function to create the next bigger number by rearranging the digits of a given number.",
        "code": "\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n\tif n.IsZero() {\n\t\treturn n\n\t}\n\tif n.IsOne() {\n\t\treturn n\n\t}\n\tif n.IsNegative() {\n\t\treturn n\n\t}\n\tif n.IsZero() {\n\t\treturn n\n\t}\n\tif n.IsOne() {\n\t\treturn n\n\t}\n\tif n.IsNegative() {\n\t\treturn n\n\t}\n\tif n.IsZero() {\n\t\treturn n\n\t}\n\tif n.IsOne() {\n\t\treturn n\n\t}\n\tif n.IsNegative() {\n\t\treturn n\n\t}\n\tif n.IsZero() {\n\t\treturn n\n\t}\n\tif n.IsOne() {\n\t\treturn n\n\t}\n\tif n.IsNegative() {\n\t\treturn n\n\t}\n\tif n.IsZero() {\n\t\treturn n\n\t}\n\tif n.IsOne() {\n\t\treturn n\n\t}\n\tif n.IsNegative() {\n\t\treturn n\n\t}\n\tif n.IsZero() {\n\t\treturn n\n\t}\n\tif n.IsOne() {\n\t\treturn n\n\t}\n\tif n.IsNegative() {\n\t\treturn n\n\t}\n\tif n.IsZero() {\n\t\treturn n\n\t}\n\tif n.IsOne() {\n\t\treturn n\n\t}\n\tif n.IsNegative() {\n\t\treturn n\n\t}\n\tif n.IsZero() {\n\t\treturn n\n\t}\n\tif n.IsOne() {\n\t\treturn n\n\t}\n\tif n.IsNegative() {\n\t\treturn n\n\t}\n\tif n.IsZero() {\n\t\treturn n\n\t}\n\tif n.IsOne() {\n\t\treturn n\n\t}\n\tif n.IsNegative() {\n\t\treturn n\n\t}\n\tif n.IsZero() {\n\t\treturn n\n\t}\n\tif n.IsOne() {\n\t\treturn n\n\t}\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(rearrange_bigger(n: 12) == 21)",
            "assert(rearrange_bigger(n: 10) == false)",
            "assert(rearrange_bigger(n: 102) == 120)"
        ]
    },
    {
        "task_id": "408",
        "title": "k_smallest_pairs",
        "text": "/ Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.",
        "code": "\nfunc k_smallest_pairs(nums1: [Int], nums2: [Int], k: Int) -> [[Int]] {\n\tvar nums1_copy []Int\n\tnums1_copy = append(nums1_copy, nums1...)\n\tnums1_copy = append(nums1_copy, nums2...)\n\tvar nums2_copy []Int\n\tnums2_copy = append(nums2_copy, nums1...)\n\tnums2_copy = append(nums2_copy, nums2...)\n\tvar nums1_copy_copy []Int\n\tnums1_copy_copy = append(nums1_copy_copy, nums1...)\n\tnums1_copy_copy = append(nums1_copy_copy, nums2...)\n\tvar nums2_copy_copy []Int\n\tnums2_copy_copy = append(nums2_copy_copy, nums1...)\n\tnums2_copy_copy = append(nums2_copy_copy, nums2...)\n\tvar nums1_copy_copy_copy []Int\n\tnums1_copy_copy_copy = append(nums1_copy_copy_copy, nums1...)\n\tnums1_copy_copy_copy = append(nums1_copy_copy_copy, nums2...)\n\tvar nums2_copy_copy_copy []Int\n\tnums2_copy_copy_copy = append(nums2_copy_copy_copy, nums1...)\n\tnums2_copy_copy_copy = append(nums2_copy_copy_copy, nums2...)\n\tvar nums1_copy_copy_copy_copy []Int\n\tnums1_copy_copy_copy_copy = append(nums1_copy_copy_copy_copy, nums1...)\n\tnums1_copy_copy_copy_copy = append(nums1_copy_copy_copy_copy, nums2...)\n\tvar nums2_copy_copy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(k_smallest_pairs(nums1: [1, 3, 7], nums2: [2, 4, 6], k: 2) == [[1, 2], [1, 4]])",
            "assert(k_smallest_pairs(nums1: [1, 3, 7], nums2: [2, 4, 6], k: 1) == [[1, 2]])",
            "assert(k_smallest_pairs(nums1: [1, 3, 7], nums2: [2, 4, 6], k: 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]])"
        ]
    },
    {
        "task_id": "409",
        "title": "min_product_tuple",
        "text": "/ Write a function to find the minimum product from the pairs of tuples within a given array.",
        "code": "\nfunc min_product_tuple(list1: [(Int, Int)]) -> Int {\n\tvar min_product = Int(0)\n\tfor _, pair := range list1 {\n\t\tif pair[0] < pair[1] {\n\t\t\tmin_product = min_product + pair[0]\n\t\t} else {\n\t\t\tmin_product = min_product + pair[1]\n\t\t}\n\t}\n\treturn min_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(min_product_tuple(list1: [(2, 7), (2, 6), (1, 8), (4, 9)]) == 8)",
            "assert(min_product_tuple(list1: [(10, 20), (15, 2), (5, 10)]) == 30)",
            "assert(min_product_tuple(list1: [(11, 44), (10, 15), (20, 5), (12, 9)]) == 100)"
        ]
    },
    {
        "task_id": "410",
        "title": "min_val",
        "text": "/ Write a function to find the minimum value in a given heterogeneous array.",
        "code": "\nextension Int: Error {}\n        \nfunc min_val(listval: [Result<String, Int>]) -> Int {\n    minval := listval[0].Value\n    for _, val := range listval {\n        if val.Value < minval {\n            minval = val.Value\n        }\n    }\n    return minval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(min_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 2)",
            "assert(min_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 15)",
            "assert(min_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 20)"
        ]
    },
    {
        "task_id": "411",
        "title": "snake_to_camel",
        "text": "/ Write a function to convert the given snake case string to camel case string.",
        "code": "\nfunc snake_to_camel(word: String) -> String {\n\treturn strings.ToUpper(strings.Replace(word, \"_\", \" \", -1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")",
            "assert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")",
            "assert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")"
        ]
    },
    {
        "task_id": "412",
        "title": "remove_odd",
        "text": "/ Write a swiftthon function to remove odd numbers from a given array.",
        "code": "\nfunc remove_odd(l: [Int]) -> [Int] {\n\tvar r [Int] = l\n\tfor i := 0; i < len(l); i++ {\n\t\tif l[i]%2 == 1 {\n\t\t\tr[i] = r[i] - 1\n\t\t}\n\t}\n\treturn r\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(remove_odd(l: [1, 2, 3]) == [2])",
            "assert(remove_odd(l: [2, 4, 6]) == [2, 4, 6])",
            "assert(remove_odd(l: [10, 20, 3]) == [10, 20])"
        ]
    },
    {
        "task_id": "413",
        "title": "extract_nth_element",
        "text": "/ Write a function to extract the nth element from a given array of tuples.",
        "code": "\nfunc extract_nth_element(list1: [(String, Int, Int)], n: Int) -> [AnyHashable] {\n\tif len(list1) == 0 {\n\t\treturn []AnyHashable{}\n\t}\n\tif n < 0 {\n\t\treturn list1\n\t}\n\tif n == 0 {\n\t\treturn list1\n\t}\n\treturn list1[n-1:]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(extract_nth_element(list1: [(\"Greyson Fulton\", 98, 99), (\"Brady Kent\", 97, 96), (\"Wyatt Knott\", 91, 94), (\"Beau Turnbull\", 94, 98)], n: 0) == [\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\"])",
            "assert(extract_nth_element(list1: [(\"Greyson Fulton\", 98, 99), (\"Brady Kent\", 97, 96), (\"Wyatt Knott\", 91, 94), (\"Beau Turnbull\", 94, 98)], n: 2) == [99, 96, 94, 98])",
            "assert(extract_nth_element(list1: [(\"Greyson Fulton\", 98, 99), (\"Brady Kent\", 97, 96), (\"Wyatt Knott\", 91, 94), (\"Beau Turnbull\", 94, 98)], n: 1) == [98, 97, 91, 94])"
        ]
    },
    {
        "task_id": "414",
        "title": "overlapping",
        "text": "/ Write a swiftthon function to check whether any value in a sequence exists in a sequence or not.",
        "code": "\nfunc overlapping(list1: [Int], list2: [Int]) -> Bool {\n\tif len(list1) == 0 || len(list2) == 0 {\n\t\treturn false\n\t}\n\tfor i := 0; i < len(list1); i++ {\n\t\tif list1[i] == list2[i] {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(overlapping(list1: [1, 2, 3, 4, 5], list2: [6, 7, 8, 9]) == false)",
            "assert(overlapping(list1: [1, 2, 3], list2: [4, 5, 6]) == false)",
            "assert(overlapping(list1: [1, 4, 5], list2: [1, 4, 5]) == true)"
        ]
    },
    {
        "task_id": "415",
        "title": "max_Product",
        "text": "/ Write a swiftthon function to find a pair with highest product from a given array of integers.",
        "code": "\nfunc max_Product(arr: [Int]) -> (Int, Int) {\n\tvar max_product = 0\n\tfor i := 0; i < len(arr); i++ {\n\t\tif arr[i] > max_product {\n\t\t\tmax_product = arr[i]\n\t\t}\n\t}\n\treturn max_product, max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(max_Product(arr: [1, 2, 3, 4, 7, 0, 8, 4]) == (7, 8))",
            "assert(max_Product(arr: [0, -1, -2, -4, 5, 0, -6]) == (-4, -6))",
            "assert(max_Product(arr: [1, 2, 3]) == (2, 3))"
        ]
    },
    {
        "task_id": "417",
        "title": "group_tuples",
        "text": "/ Write a function to find common first element in given array of arrays.",
        "code": "\nfunc group_tuples(Input: [[String]]) -> [[String]] {\n\tvar Output = make([]String, 0)\n\tfor _, Input := range Input {\n\t\tfor _, Input2 := range Input {\n\t\t\tif Input2 == Input {\n\t\t\t\tOutput = append(Output, Input)\n\t\t\t}\n\t\t}\n\t}\n\treturn Output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(group_tuples(Input: [[\"x\", \"y\"], [\"x\", \"z\"], [\"w\", \"t\"]]) == [[\"x\", \"y\", \"z\"], [\"w\", \"t\"]])",
            "assert(group_tuples(Input: [[\"a\", \"b\"], [\"a\", \"c\"], [\"d\", \"e\"]]) == [[\"a\", \"b\", \"c\"], [\"d\", \"e\"]])",
            "assert(group_tuples(Input: [[\"f\", \"g\"], [\"f\", \"g\"], [\"h\", \"i\"]]) == [[\"f\", \"g\", \"g\"], [\"h\", \"i\"]])"
        ]
    },
    {
        "task_id": "418",
        "title": "Find_Max",
        "text": "/ Write a swiftthon function to find the element of an array having maximum length.",
        "code": "\nfunc Find_Max(lst: [[AnyHashable]]) -> [AnyHashable] {\n\tif len(lst) == 0 {\n\t\treturn nil\n\t}\n\tmax := lst[0]\n\tfor _, elem := range lst {\n\t\tif elem.Hash() > max.Hash() {\n\t\t\tmax = elem\n\t\t}\n\t}\n\treturn [AnyHashable]{max}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(Find_Max(lst: [[\"A\"], [\"A\", \"B\"], [\"A\", \"B\", \"C\"]]) == [\"A\", \"B\", \"C\"])",
            "assert(Find_Max(lst: [[1], [1, 2], [1, 2, 3]]) == [1, 2, 3])",
            "assert(Find_Max(lst: [[1, 1], [1, 2, 3], [1, 5, 6, 1]]) == [1, 5, 6, 1])"
        ]
    },
    {
        "task_id": "419",
        "title": "round_and_sum",
        "text": "/ Write a function to round every number of a given array of numbers and print the total sum multiplied by the length of the array.",
        "code": "\nextension Int: Error {}\n        \nfunc round_and_sum(list1: [Result<Double, Int>]) -> Int {\n    sum := 0\n    for _, v := range list1 {\n        sum += v.Value\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(round_and_sum(list1: [.success(22.4), .success(4.0), .success(-16.22), .success(-9.1), .success(11.0), .success(-12.22), .success(14.2), .success(-5.2), .success(17.5)]) == 243)",
            "assert(round_and_sum(list1: [.failure(5), .failure(2), .failure(9), .success(24.3), .failure(29)]) == 345)",
            "assert(round_and_sum(list1: [.success(25.0), .success(56.7), .success(89.2)]) == 513)"
        ]
    },
    {
        "task_id": "420",
        "title": "cube_Sum",
        "text": "/ Write a swiftthon function to find the cube sum of first n even natural numbers.",
        "code": "\nfunc cube_Sum(n: Int) -> Int {\n\tif n == 0 {\n\t\treturn 0\n\t}\n\treturn cube_Sum(n-1) + cube_Sum(n-2) + cube_Sum(n-3) + cube_Sum(n-4) + cube_Sum(n-5) + cube_Sum(n-6) + cube_Sum(n-7) + cube_Sum(n-8) + cube_Sum(n-9) + cube_Sum(n-10) + cube_Sum(n-11) + cube_Sum(n-12) + cube_Sum(n-13) + cube_Sum(n-14) + cube_Sum(n-15) + cube_Sum(n-16) + cube_Sum(n-17) + cube_Sum(n-18) + cube_Sum(n-19) + cube_Sum(n-20) + cube_Sum(n-21) + cube_Sum(n-22) + cube_Sum(n-23) + cube_Sum(n-24) + cube_Sum(n-25) + cube_Sum(n-26) + cube_Sum(n-27) + cube_Sum(n-28) + cube_Sum(n-29) + cube_Sum(n-30) + cube_Sum(n-31) + cube_Sum(n-32) + cube_Sum(n-33) + cube_Sum(n-34) + cube_Sum(n-35) + cube_Sum(n-36) + cube_Sum(n-37) + cube_Sum(n-38) + cube_Sum(n-39) + cube_Sum(n-40) + cube_Sum(n-41) + cube_Sum(n-42) + cube_Sum(n-43) + cube_Sum(n-44) + cube_Sum(n-45) + cube_Sum(n-46) + cube_Sum(n-47) + cube_Sum(n-48) + cube_Sum(n-49) + cube_Sum(n-50) + cube_Sum(n-51) + cube_Sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(cube_Sum(n: 2) == 72)",
            "assert(cube_Sum(n: 3) == 288)",
            "assert(cube_Sum(n: 4) == 800)"
        ]
    },
    {
        "task_id": "421",
        "title": "concatenate_tuple",
        "text": "/ Write a function to concatenate each element of tuple by the delimiter.",
        "code": "\nfunc concatenate_tuple(test_tup: (String, String, Int, String)) -> String {\n\tvar buf bytes.Buffer\n\tfor i := 0; i < len(test_tup); i++ {\n\t\tbuf.WriteString(test_tup[i])\n\t\tif i < len(test_tup)-1 {\n\t\t\tbuf.WriteString(delimiter)\n\t\t}\n\t}\n\treturn buf.String()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(concatenate_tuple(test_tup: (\"ID\", \"is\", 4, \"UTS\")) == \"ID-is-4-UTS\")",
            "assert(concatenate_tuple(test_tup: (\"QWE\", \"is\", 4, \"RTY\")) == \"QWE-is-4-RTY\")",
            "assert(concatenate_tuple(test_tup: (\"ZEN\", \"is\", 4, \"OP\")) == \"ZEN-is-4-OP\")"
        ]
    },
    {
        "task_id": "422",
        "title": "find_Average_Of_Cube",
        "text": "/ Write a swiftthon function to find the average of cubes of first n natural numbers.",
        "code": "\nfunc find_Average_Of_Cube(n: Int) -> Double {\n\tvar sum: Double = 0.0\n\tfor i := 0; i < n; i++ {\n\t\tsum += math.Pow(i, 2)\n\t}\n\treturn sum / n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(find_Average_Of_Cube(n: 2) == 4.5)",
            "assert(find_Average_Of_Cube(n: 3) == 12)",
            "assert(find_Average_Of_Cube(n: 1) == 1)"
        ]
    },
    {
        "task_id": "424",
        "title": "extract_rear",
        "text": "/ Write a function to extract only the rear index element of each string in the given tuple.",
        "code": "\nfunc extract_rear(test_tuple: (String, String, String)) -> [String] {\n\treturn []String{\n\t\ttest_tuple[0],\n\t\ttest_tuple[1],\n\t\ttest_tuple[2],\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(extract_rear(test_tuple: (\"Mers\", \"for\", \"Vers\")) == [\"s\", \"r\", \"s\"])",
            "assert(extract_rear(test_tuple: (\"Avenge\", \"for\", \"People\")) == [\"e\", \"r\", \"e\"])",
            "assert(extract_rear(test_tuple: (\"Gotta\", \"get\", \"go\")) == [\"a\", \"t\", \"o\"])"
        ]
    },
    {
        "task_id": "425",
        "title": "count_element_in_list",
        "text": "/ Write a function to count the number of subarrays containing a particular element.",
        "code": "\nfunc count_element_in_list(list1: [[AnyHashable]], x: AnyHashable) -> Int {\n\tcount := 0\n\tfor _, elem := range list1 {\n\t\tif elem == x {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(count_element_in_list(list1: [[1, 3], [5, 7], [1, 11], [1, 15, 7]], x: 1) == 3)",
            "assert(count_element_in_list(list1: [[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], x: \"A\") == 3)",
            "assert(count_element_in_list(list1: [[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], x: \"E\") == 1)"
        ]
    },
    {
        "task_id": "426",
        "title": "filter_oddnumbers",
        "text": "/ Write a function to filter odd numbers.",
        "code": "\nfunc filter_oddnumbers(nums: [Int]) -> [Int] {\n\toddnumbers := [Int]{}\n\tfor _, num := range nums {\n\t\tif num%2 == 0 {\n\t\t\toddnumbers = append(oddnumbers, num)\n\t\t}\n\t}\n\treturn oddnumbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(filter_oddnumbers(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9])",
            "assert(filter_oddnumbers(nums: [10, 20, 45, 67, 84, 93]) == [45, 67, 93])",
            "assert(filter_oddnumbers(nums: [5, 7, 9, 8, 6, 4, 3]) == [5, 7, 9, 3])"
        ]
    },
    {
        "task_id": "427",
        "title": "change_date_format",
        "text": "/ Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
        "code": "\nfunc change_date_format(dt: String) -> String {\n\treturn fmt.Sprintf(\"%s-%s-%s\", dt.Year(), dt.Month(), dt.Day())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(change_date_format(dt: \"2026-01-02\") == \"02-01-2026\")",
            "assert(change_date_format(dt: \"2020-11-13\") == \"13-11-2020\")",
            "assert(change_date_format(dt: \"2021-04-26\") == \"26-04-2021\")"
        ]
    },
    {
        "task_id": "428",
        "title": "shell_sort",
        "text": "/ Write a function to sort the given array by using shell sort.",
        "code": "\nfunc shell_sort(my_list: [Int]) -> [Int] {\n\tif len(my_list) < 2 {\n\t\treturn my_list\n\t}\n\n\t// Sort the list by using shell sort.\n\tsort.Stable(my_list)\n\n\t// Return the sorted list.\n\treturn my_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(shell_sort(my_list: [12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95])",
            "assert(shell_sort(my_list: [24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87])",
            "assert(shell_sort(my_list: [32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96])"
        ]
    },
    {
        "task_id": "429",
        "title": "and_tuples",
        "text": "/ Write a function to extract the elementwise and tuples from the given two tuples.",
        "code": "\nfunc and_tuples(test_tup1: (Int, Int, Int, Int), test_tup2: (Int, Int, Int, Int)) -> (Int, Int, Int, Int) {\n\treturn test_tup1.and(test_tup2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(and_tuples(test_tup1: (10, 4, 6, 9), test_tup2: (5, 2, 3, 3)) == (0, 0, 2, 1))",
            "assert(and_tuples(test_tup1: (1, 2, 3, 4), test_tup2: (5, 6, 7, 8)) == (1, 2, 3, 0))",
            "assert(and_tuples(test_tup1: (8, 9, 11, 12), test_tup2: (7, 13, 14, 17)) == (0, 9, 10, 0))"
        ]
    },
    {
        "task_id": "430",
        "title": "parabola_directrix",
        "text": "/ Write a function to find the directrix of a parabola.",
        "code": "\nfunc parabola_directrix(a: Int, b: Int, c: Int) -> Int {\n\tif a == b {\n\t\treturn c\n\t}\n\tif a == c {\n\t\treturn a\n\t}\n\tif a == b {\n\t\treturn c\n\t}\n\treturn a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(parabola_directrix(a: 5, b: 3, c: 2) == -198)",
            "assert(parabola_directrix(a: 9, b: 8, c: 4) == -2336)",
            "assert(parabola_directrix(a: 2, b: 4, c: 6) == -130)"
        ]
    },
    {
        "task_id": "431",
        "title": "common_element",
        "text": "/ Write a function that takes two arrays and returns true if they have at least one common element.",
        "code": "\nfunc common_element(list1: [AnyHashable], list2: [AnyHashable]) -> Bool? {\n\tif len(list1) == 0 || len(list2) == 0 {\n\t\treturn false\n\t}\n\n\tvar common_element_count int\n\tfor _, element1 := range list1 {\n\t\tfor _, element2 := range list2 {\n\t\t\tif element1 == element2 {\n\t\t\t\tcommon_element_count++\n\t\t\t}\n\t\t}\n\t}\n\n\treturn common_element_count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(common_element(list1: [1, 2, 3, 4, 5], list2: [5, 6, 7, 8, 9]) == true)",
            "assert(common_element(list1: [1, 2, 3, 4, 5], list2: [6, 7, 8, 9]) == nil)",
            "assert(common_element(list1: [\"a\", \"b\", \"c\"], list2: [\"d\", \"b\", \"e\"]) == true)"
        ]
    },
    {
        "task_id": "432",
        "title": "median_trapezium",
        "text": "/ Write a function to find the median length of a trapezium.",
        "code": "\nfunc median_trapezium(base1: Int, base2: Int, height: Int) -> Double {\n\tvar (\n\t\tmedian1, median2, median3, median4 Int\n\t\tmedian1_median2, median1_median2_median3, median1_median2_median3_median4 Int\n\t\tmedian1_median2_median3_median4_median5 Int\n\t\tmedian1_median2_median3_median4_median5_median6 Int\n\t\tmedian1_median2_median3_median4_median5_median6_median7 Int\n\t\tmedian1_median2_median3_median4_median5_median6_median7_median8 Int\n\t\tmedian1_median2_median3_median4_median5_median6_median7_median8_median9 Int\n\t\tmedian1_median2_median3_median4_median5_median6_median7_median8_median9_median10 Int\n\t\tmedian1_median2_median3_median4_median5_median6_median7_median8_median9_median10_median11 Int\n\t\tmedian1_median2_median3_median4_median5_median6_median7_median8_median9_median10_median11_median12 Int\n\t\tmedian1_median2_median3_median4_median5_median6_median7_median8_median9_median10_median11_median12_median13 Int\n\t\tmedian1_median2_median3_median4_median5_median6_median7_median8_median9_median10_median11_median12_median13_median14 Int\n\t\tmedian1_median2_median3_median\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(median_trapezium(base1: 15, base2: 25, height: 35) == 20)",
            "assert(median_trapezium(base1: 10, base2: 20, height: 30) == 15)",
            "assert(median_trapezium(base1: 6, base2: 9, height: 4) == 7.5)"
        ]
    },
    {
        "task_id": "433",
        "title": "check_greater",
        "text": "/ Write a function to check whether the entered number is greater than the elements of the given array.",
        "code": "\nfunc check_greater(arr: [Int], number: Int) -> Bool {\n\tif len(arr) == 0 {\n\t\treturn false\n\t}\n\tif len(arr) == 1 {\n\t\treturn arr[0] > number\n\t}\n\treturn check_greater(arr[1:], number)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(check_greater(arr: [1, 2, 3, 4, 5], number: 4) == false)",
            "assert(check_greater(arr: [2, 3, 4, 5, 6], number: 8) == true)",
            "assert(check_greater(arr: [9, 7, 4, 8, 6, 1], number: 11) == true)"
        ]
    },
    {
        "task_id": "434",
        "title": "text_match_one",
        "text": "/ Write a function that matches a string that has an a followed by one or more b's.",
        "code": "\nfunc text_match_one(text: String) -> Bool {\n\treturn text.Match(func(s string) bool {\n\t\treturn s[0] == 'a' && s[1] == 'b'\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(text_match_one(text: \"ac\") == false)",
            "assert(text_match_one(text: \"dc\") == false)",
            "assert(text_match_one(text: \"abba\") == true)"
        ]
    },
    {
        "task_id": "435",
        "title": "last_Digit",
        "text": "/ Write a swiftthon function to find the last digit of a given number.",
        "code": "\nfunc last_Digit(n: Int) -> Int {\n\tif n == 0 {\n\t\treturn 0\n\t}\n\treturn n - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(last_Digit(n: 123) == 3)",
            "assert(last_Digit(n: 25) == 5)",
            "assert(last_Digit(n: 30) == 0)"
        ]
    },
    {
        "task_id": "436",
        "title": "neg_nos",
        "text": "/ Write a swiftthon function to return the negative numbers in an array.",
        "code": "\nfunc neg_nos(list1: [Int]) -> [Int] {\n\tvar list2 [Int]\n\tfor i := 0; i < len(list1); i++ {\n\t\tlist2[i] = list1[i] - 1\n\t}\n\treturn list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])",
            "assert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])",
            "assert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])"
        ]
    },
    {
        "task_id": "437",
        "title": "remove_odd",
        "text": "/ Write a function to remove odd characters in a string.",
        "code": "\nfunc remove_odd(str1: String) -> String {\n\tstr2 := str1\n\tfor i := 0; i < len(str1)-1; i++ {\n\t\tif str1[i] == str1[i+1] {\n\t\t\tstr2 = str1[:i] + str2[i+1:]\n\t\t}\n\t}\n\treturn str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(remove_odd(str1: \"python\") == \"yhn\")",
            "assert(remove_odd(str1: \"program\") == \"rga\")",
            "assert(remove_odd(str1: \"language\") == \"agae\")"
        ]
    },
    {
        "task_id": "438",
        "title": "count_bidirectional",
        "text": "/ Write a function to count bidirectional tuple pairs.",
        "code": "\nfunc count_bidirectional(test_list: [(Int, Int)]) -> Int {\n\tvar count int\n\tfor _, (i, j) := range test_list {\n\t\tif i > j {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(count_bidirectional(test_list: [(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]) == 3)",
            "assert(count_bidirectional(test_list: [(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)]) == 2)",
            "assert(count_bidirectional(test_list: [(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)]) == 4)"
        ]
    },
    {
        "task_id": "439",
        "title": "multiple_to_single",
        "text": "/ Write a function to join an array of multiple integers into a single integer.",
        "code": "\nfunc multiple_to_single(L: [Int]) -> Int {\n\tvar result Int\n\tfor _, x := range L {\n\t\tresult = result*x\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(multiple_to_single(L: [11, 33, 50]) == 113350)",
            "assert(multiple_to_single(L: [-1, 2, 3, 4, 5, 6]) == -123456)",
            "assert(multiple_to_single(L: [10, 15, 20, 25]) == 10152025)"
        ]
    },
    {
        "task_id": "440",
        "title": "find_adverb_position",
        "text": "/ Write a function to find the first adverb and their positions in a given sentence.",
        "code": "\nfunc find_adverb_position(text: String) -> (Int, Int, String) {\n\tvar pos int\n\tvar pos_start int\n\tvar pos_end int\n\tvar pos_start_end int\n\tvar pos_start_end_end int\n\tvar pos_start_end_end_end int\n\tvar pos_start_end_end_end_end int\n\tvar pos_start_end_end_end_end_end int\n\tvar pos_start_end_end_end_end_end_end_end int\n\tvar pos_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(find_adverb_position(text: \"clearly!! we can see the sky\") == (0, 7, \"clearly\"))",
            "assert(find_adverb_position(text: \"seriously!! there are many roses\") == (0, 9, \"seriously\"))",
            "assert(find_adverb_position(text: \"unfortunately!! sita is going to home\") == (0, 13, \"unfortunately\"))"
        ]
    },
    {
        "task_id": "441",
        "title": "surfacearea_cube",
        "text": "/ Write a function to find the surface area of a cube of a given size.",
        "code": "\nfunc surfacearea_cube(l: Int) -> Int {\n\tvar x, y, z int\n\tvar area float64\n\tvar x_size, y_size, z_size int\n\tvar x_size_sq, y_size_sq, z_size_sq float64\n\tvar x_size_sq_sq float64\n\tvar x_size_sq_sq_sq float64\n\tvar x_size_sq_sq_sq_sq float64\n\tvar x_size_sq_sq_sq_sq_sq float64\n\tvar x_size_sq_sq_sq_sq_sq_sq float64\n\tvar x_size_sq_sq_sq_sq_sq_sq_sq float64\n\tvar x_size_sq_sq_sq_sq_sq_sq_sq_sq float64\n\tvar x_size_sq_sq_sq_sq_sq_sq_sq_sq_sq float64\n\tvar x_size_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq float64\n\tvar x_size_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq float64\n\tvar x_size_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq float64\n\tvar x_size_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq float64\n\tvar x_size_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(surfacearea_cube(l: 5) == 150)",
            "assert(surfacearea_cube(l: 3) == 54)",
            "assert(surfacearea_cube(l: 10) == 600)"
        ]
    },
    {
        "task_id": "442",
        "title": "positive_count",
        "text": "/ Write a function to find the ration of positive numbers in an array of integers.",
        "code": "\nfunc positive_count(nums: [Int]) -> Double {\n\tvar sum int\n\tfor _, num := range nums {\n\t\tsum += num\n\t}\n\treturn Double(sum)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)",
            "assert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)",
            "assert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)"
        ]
    },
    {
        "task_id": "443",
        "title": "largest_neg",
        "text": "/ Write a swiftthon function to find the largest negative number from the given array.",
        "code": "\nfunc largest_neg(list1: [Int]) -> Int {\n\tvar max_pos int\n\tfor i := 0; i < len(list1); i++ {\n\t\tif list1[i] < 0 {\n\t\t\tmax_pos = i\n\t\t}\n\t}\n\treturn max_pos\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(largest_neg(list1: [1, 2, 3, -4, -6]) == -6)",
            "assert(largest_neg(list1: [1, 2, 3, -8, -9]) == -9)",
            "assert(largest_neg(list1: [1, 2, 3, 4, -1]) == -1)"
        ]
    },
    {
        "task_id": "444",
        "title": "trim_tuple",
        "text": "/ Write a function to trim each array by k in the given arrays.",
        "code": "\nfunc trim_tuple(test_list: [[Int]], K: Int) -> [[Int]] {\n\tvar result [][]Int\n\tfor _, test := range test_list {\n\t\tresult = append(result, test)\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(trim_tuple(test_list: [[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], K: 2) == [[2], [9], [2], [2]])",
            "assert(trim_tuple(test_list: [[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], K: 1) == [[3, 2, 1], [4, 9, 2], [1, 2, 3], [8, 2, 1]])",
            "assert(trim_tuple(test_list: [[7, 8, 4, 9], [11, 8, 12, 4], [4, 1, 7, 8], [3, 6, 9, 7]], K: 1) == [[8, 4], [8, 12], [1, 7], [6, 9]])"
        ]
    },
    {
        "task_id": "445",
        "title": "index_multiplication",
        "text": "/ Write a function to perform index wise multiplication of array elements in the given two arrays.",
        "code": "\nfunc index_multiplication(test_tup1: [[Int]], test_tup2: [[Int]]) -> [[Int]] {\n\tvar test_tup1_array [][]Int\n\tvar test_tup2_array [][]Int\n\tfor i := 0; i < len(test_tup1); i++ {\n\t\ttest_tup1_array = append(test_tup1_array, test_tup1[i])\n\t}\n\tfor i := 0; i < len(test_tup2); i++ {\n\t\ttest_tup2_array = append(test_tup2_array, test_tup2[i])\n\t}\n\treturn index_multiplication_array(test_tup1_array, test_tup2_array)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(index_multiplication(test_tup1: [[1, 3], [4, 5], [2, 9], [1, 10]], test_tup2: [[6, 7], [3, 9], [1, 1], [7, 3]]) == [[6, 21], [12, 45], [2, 9], [7, 30]])",
            "assert(index_multiplication(test_tup1: [[2, 4], [5, 6], [3, 10], [2, 11]], test_tup2: [[7, 8], [4, 10], [2, 2], [8, 4]]) == [[14, 32], [20, 60], [6, 20], [16, 44]])",
            "assert(index_multiplication(test_tup1: [[3, 5], [6, 7], [4, 11], [3, 12]], test_tup2: [[8, 9], [5, 11], [3, 3], [9, 5]]) == [[24, 45], [30, 77], [12, 33], [27, 60]])"
        ]
    },
    {
        "task_id": "446",
        "title": "count_Occurrence",
        "text": "/ Write a swiftthon function to count the occurence of all elements of array in a tuple.",
        "code": "\nfunc count_Occurrence(tup: AnyHashable, lst: [AnyHashable]) -> Int {\n\tvar count int\n\tfor _, elem := range lst {\n\t\tif elem == tup {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(count_Occurrence(tup: (\"a\", \"a\", \"c\", \"b\", \"d\"), lst: [\"a\", \"b\"]) == 3)",
            "assert(count_Occurrence(tup: (1, 2, 3, 1, 4, 6, 7, 1, 4), lst: [1, 4, 7]) == 6)",
            "assert(count_Occurrence(tup: (1, 2, 3, 4, 5, 6), lst: [1, 2]) == 2)"
        ]
    },
    {
        "task_id": "447",
        "title": "cube_nums",
        "text": "/ Write a function to find cubes of individual elements in an array.",
        "code": "\nfunc cube_nums(nums: [Int]) -> [Int] {\n\tvar result [Int]\n\tfor i := 0; i < len(nums); i++ {\n\t\tresult = append(result, nums[i])\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(cube_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000])",
            "assert(cube_nums(nums: [10, 20, 30]) == [1000, 8000, 27000])",
            "assert(cube_nums(nums: [12, 15]) == [1728, 3375])"
        ]
    },
    {
        "task_id": "448",
        "title": "cal_sum",
        "text": "/ Write a function to calculate the sum of perrin numbers.",
        "code": "\nfunc cal_sum(n: Int) -> Int {\n\tsum := 0\n\tfor i := 0; i < n; i++ {\n\t\tsum += n - i\n\t}\n\treturn sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(cal_sum(n: 9) == 49)",
            "assert(cal_sum(n: 10) == 66)",
            "assert(cal_sum(n: 11) == 88)"
        ]
    },
    {
        "task_id": "450",
        "title": "extract_string",
        "text": "/ Write a function to extract specified size of strings from a given array of string values.",
        "code": "\nfunc extract_string(str: [String], l: Int) -> [String] {\n\tif len(str) == 0 {\n\t\treturn []string{}\n\t}\n\treturn str[:l]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(extract_string(str: [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], l: 8) == [\"practice\", \"solution\"])",
            "assert(extract_string(str: [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], l: 6) == [\"Python\"])",
            "assert(extract_string(str: [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], l: 9) == [\"exercises\"])"
        ]
    },
    {
        "task_id": "451",
        "title": "remove_whitespaces",
        "text": "/ Write a function to remove all whitespaces from the given string.",
        "code": "\nfunc remove_whitespaces(text1: String) -> String {\n\ttext1 = strings.TrimSpace(text1)\n\treturn text1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(remove_whitespaces(text1: \" Google    Flutter \") == \"GoogleFlutter\")",
            "assert(remove_whitespaces(text1: \" Google    Dart \") == \"GoogleDart\")",
            "assert(remove_whitespaces(text1: \" iOS    Swift \") == \"iOSSwift\")"
        ]
    },
    {
        "task_id": "452",
        "title": "loss_amount",
        "text": "/ Write a function that gives loss amount on a sale if the given amount has loss else return 0.",
        "code": "\nfunc loss_amount(actual_cost: Int, sale_amount: Int) -> Int {\n\tif actual_cost == 0 {\n\t\treturn 0\n\t}\n\treturn actual_cost - sale_amount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(loss_amount(actual_cost: 1500, sale_amount: 1200) == 0)",
            "assert(loss_amount(actual_cost: 100, sale_amount: 200) == 100)",
            "assert(loss_amount(actual_cost: 2000, sale_amount: 5000) == 3000)"
        ]
    },
    {
        "task_id": "453",
        "title": "sumofFactors",
        "text": "/ Write a swiftthon function to find the sum of even factors of a number.",
        "code": "\nfunc sumofFactors(n: Int) -> Int {\n\tif n == 0 {\n\t\treturn 0\n\t}\n\tvar sum int\n\tfor i := 1; i < n; i++ {\n\t\tsum += i\n\t}\n\treturn sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(sumofFactors(n: 18) == 26)",
            "assert(sumofFactors(n: 30) == 48)",
            "assert(sumofFactors(n: 6) == 8)"
        ]
    },
    {
        "task_id": "454",
        "title": "text_match_wordz",
        "text": "/ Write a function that matches a word containing 'z'.",
        "code": "\nfunc text_match_wordz(text: String) -> Bool {\n\treturn text.Match(func(s string) bool {\n\t\treturn s[0] == 'z'\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(text_match_wordz(text: \"pythonz.\") == true)",
            "assert(text_match_wordz(text: \"xyz.\") == true)",
            "assert(text_match_wordz(text: \"  lang  .\") == false)"
        ]
    },
    {
        "task_id": "455",
        "title": "check_monthnumb_number",
        "text": "/ Write a function to check whether the given month number contains 31 days or not.",
        "code": "\nfunc check_monthnumb_number(monthnum2: Int) -> Bool {\n\tif monthnum2 == 0 {\n\t\treturn false\n\t}\n\tif monthnum2 == 31 {\n\t\treturn true\n\t}\n\treturn false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(check_monthnumb_number(monthnum2: 5) == true)",
            "assert(check_monthnumb_number(monthnum2: 2) == false)",
            "assert(check_monthnumb_number(monthnum2: 6) == false)"
        ]
    },
    {
        "task_id": "456",
        "title": "reverse_string_list",
        "text": "/ Write a function to reverse each string in a given array of string values.",
        "code": "\nfunc reverse_string_list(stringlist: [String]) -> [String] {\n\tvar reverse_string_list = make([]String, len(stringlist))\n\tfor i, s := range stringlist {\n\t\treverse_string_list[i] = s\n\t}\n\treturn reverse_string_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(reverse_string_list(stringlist: [\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"])",
            "assert(reverse_string_list(stringlist: [\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"])",
            "assert(reverse_string_list(stringlist: [\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"])"
        ]
    },
    {
        "task_id": "457",
        "title": "Find_Min",
        "text": "/ Write a swiftthon function to find the subarray having minimum length.",
        "code": "\nfunc Find_Min(lst: [[AnyHashable]]) -> [AnyHashable] {\n\tif len(lst) == 0 {\n\t\treturn nil\n\t}\n\tmin := lst[0]\n\tfor _, v := range lst[1:] {\n\t\tif v.Len() < min.Len() {\n\t\t\tmin = v\n\t\t}\n\t}\n\treturn min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(Find_Min(lst: [[1], [1, 2], [1, 2, 3]]) == [1])",
            "assert(Find_Min(lst: [[1, 1], [1, 1, 1], [1, 2, 7, 8]]) == [1, 1])",
            "assert(Find_Min(lst: [[\"x\"], [\"x\", \"y\"], [\"x\", \"y\", \"z\"]]) == [\"x\"])"
        ]
    },
    {
        "task_id": "458",
        "title": "rectangle_area",
        "text": "/ Write a function to find the area of a rectangle.",
        "code": "\nfunc rectangle_area(l: Int, b: Int) -> Int {\n\treturn l + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(rectangle_area(l: 10, b: 20) == 200)",
            "assert(rectangle_area(l: 10, b: 5) == 50)",
            "assert(rectangle_area(l: 4, b: 2) == 8)"
        ]
    },
    {
        "task_id": "459",
        "title": "remove_uppercase",
        "text": "/ Write a function to remove uppercase substrings from a given string.",
        "code": "\nfunc remove_uppercase(str1: String) -> String {\n\tstr2 := str1.ReplaceAll(\n\t\tstrings.ToLower(str1),\n\t\tstrings.ToLower(strings.Replace(str1, \" \", \"\", -1)),\n\t)\n\treturn str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")",
            "assert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")",
            "assert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")"
        ]
    },
    {
        "task_id": "460",
        "title": "Extract",
        "text": "/ Write a swiftthon function to get the first element of each subarray.",
        "code": "\nfunc Extract(lst: [[Int]]) -> [Int] {\n\tvar rv [][]Int\n\tfor _, v := range lst {\n\t\trv = append(rv, v)\n\t}\n\treturn rv\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(Extract(lst: [[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6])",
            "assert(Extract(lst: [[1, 2, 3], [4, 5]]) == [1, 4])",
            "assert(Extract(lst: [[9, 8, 1], [1, 2]]) == [9, 1])"
        ]
    },
    {
        "task_id": "461",
        "title": "upper_ctr",
        "text": "/ Write a swiftthon function to count the upper case characters in a given string.",
        "code": "\nfunc upper_ctr(str: String) -> Int {\n\tvar count int\n\tfor _, c := range str {\n\t\tif c >= 'a' && c <= 'z' {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(upper_ctr(str: \"PYthon\") == 1)",
            "assert(upper_ctr(str: \"BigData\") == 1)",
            "assert(upper_ctr(str: \"program\") == 0)"
        ]
    },
    {
        "task_id": "462",
        "title": "combinations_list",
        "text": "/ Write a function to find all possible combinations of the elements of a given array.",
        "code": "\nextension [String]: Error {}\n        \nfunc combinations_list(list1: [String]) -> [Result<[()], [String]>] {\n    var result = [][]string{}\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(combinations_list(list1: [\"orange\", \"red\", \"green\", \"blue\"]) == [.success([] as [()]), .failure([\"orange\"]), .failure([\"red\"]), .failure([\"red\", \"orange\"]), .failure([\"green\"]), .failure([\"green\", \"orange\"]), .failure([\"green\", \"red\"]), .failure([\"green\", \"red\", \"orange\"]), .failure([\"blue\"]), .failure([\"blue\", \"orange\"]), .failure([\"blue\", \"red\"]), .failure([\"blue\", \"red\", \"orange\"]), .failure([\"blue\", \"green\"]), .failure([\"blue\", \"green\", \"orange\"]), .failure([\"blue\", \"green\", \"red\"]), .failure([\"blue\", \"green\", \"red\", \"orange\"])])",
            "assert(combinations_list(list1: [\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"]) == [.success([] as [()]), .failure([\"red\"]), .failure([\"green\"]), .failure([\"green\", \"red\"]), .failure([\"blue\"]), .failure([\"blue\", \"red\"]), .failure([\"blue\", \"green\"]), .failure([\"blue\", \"green\", \"red\"]), .failure([\"white\"]), .failure([\"white\", \"red\"]), .failure([\"white\", \"green\"]), .failure([\"white\", \"green\", \"red\"]), .failure([\"white\", \"blue\"]), .failure([\"white\", \"blue\", \"red\"]), .failure([\"white\", \"blue\", \"green\"]), .failure([\"white\", \"blue\", \"green\", \"red\"]), .failure([\"black\"]), .failure([\"black\", \"red\"]), .failure([\"black\", \"green\"]), .failure([\"black\", \"green\", \"red\"]), .failure([\"black\", \"blue\"]), .failure([\"black\", \"blue\", \"red\"]), .failure([\"black\", \"blue\", \"green\"]), .failure([\"black\", \"blue\", \"green\", \"red\"]), .failure([\"black\", \"white\"]), .failure([\"black\", \"white\", \"red\"]), .failure([\"black\", \"white\", \"green\"]), .failure([\"black\", \"white\", \"green\", \"red\"]), .failure([\"black\", \"white\", \"blue\"]), .failure([\"black\", \"white\", \"blue\", \"red\"]), .failure([\"black\", \"white\", \"blue\", \"green\"]), .failure([\"black\", \"white\", \"blue\", \"green\", \"red\"]), .failure([\"orange\"]), .failure([\"orange\", \"red\"]), .failure([\"orange\", \"green\"]), .failure([\"orange\", \"green\", \"red\"]), .failure([\"orange\", \"blue\"]), .failure([\"orange\", \"blue\", \"red\"]), .failure([\"orange\", \"blue\", \"green\"]), .failure([\"orange\", \"blue\", \"green\", \"red\"]), .failure([\"orange\", \"white\"]), .failure([\"orange\", \"white\", \"red\"]), .failure([\"orange\", \"white\", \"green\"]), .failure([\"orange\", \"white\", \"green\", \"red\"]), .failure([\"orange\", \"white\", \"blue\"]), .failure([\"orange\", \"white\", \"blue\", \"red\"]), .failure([\"orange\", \"white\", \"blue\", \"green\"]), .failure([\"orange\", \"white\", \"blue\", \"green\", \"red\"]), .failure([\"orange\", \"black\"]), .failure([\"orange\", \"black\", \"red\"]), .failure([\"orange\", \"black\", \"green\"]), .failure([\"orange\", \"black\", \"green\", \"red\"]), .failure([\"orange\", \"black\", \"blue\"]), .failure([\"orange\", \"black\", \"blue\", \"red\"]), .failure([\"orange\", \"black\", \"blue\", \"green\"]), .failure([\"orange\", \"black\", \"blue\", \"green\", \"red\"]), .failure([\"orange\", \"black\", \"white\"]), .failure([\"orange\", \"black\", \"white\", \"red\"]), .failure([\"orange\", \"black\", \"white\", \"green\"]), .failure([\"orange\", \"black\", \"white\", \"green\", \"red\"]), .failure([\"orange\", \"black\", \"white\", \"blue\"]), .failure([\"orange\", \"black\", \"white\", \"blue\", \"red\"]), .failure([\"orange\", \"black\", \"white\", \"blue\", \"green\"]), .failure([\"orange\", \"black\", \"white\", \"blue\", \"green\", \"red\"])])",
            "assert(combinations_list(list1: [\"red\", \"green\", \"black\", \"orange\"]) == [.success([] as [()]), .failure([\"red\"]), .failure([\"green\"]), .failure([\"green\", \"red\"]), .failure([\"black\"]), .failure([\"black\", \"red\"]), .failure([\"black\", \"green\"]), .failure([\"black\", \"green\", \"red\"]), .failure([\"orange\"]), .failure([\"orange\", \"red\"]), .failure([\"orange\", \"green\"]), .failure([\"orange\", \"green\", \"red\"]), .failure([\"orange\", \"black\"]), .failure([\"orange\", \"black\", \"red\"]), .failure([\"orange\", \"black\", \"green\"]), .failure([\"orange\", \"black\", \"green\", \"red\"])])"
        ]
    },
    {
        "task_id": "463",
        "title": "max_subarray_product",
        "text": "/ Write a function to find the maximum product subarray of the given array.",
        "code": "\nfunc max_subarray_product(arr: [Int]) -> Int {\n\tvar max_product = 0\n\tfor i := 0; i < len(arr); i++ {\n\t\tmax_product = max(max_product, arr[i])\n\t}\n\treturn max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(max_subarray_product(arr: [1, -2, -3, 0, 7, -8, -2]) == 112)",
            "assert(max_subarray_product(arr: [6, -3, -10, 0, 2]) == 180)",
            "assert(max_subarray_product(arr: [-2, -40, 0, -2, -3]) == 80)"
        ]
    },
    {
        "task_id": "464",
        "title": "check_value",
        "text": "/ Write a function to check if all values are same in a dictionary.",
        "code": "\nfunc check_value(dict: [String : Int], n: Int) -> Bool {\n\tfor i := 0; i < n; i++ {\n\t\tif dict[i]!= i {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(check_value(dict: [\"Cierra Vega\" : 12, \"Alden Cantrell\" : 12, \"Kierra Gentry\" : 12, \"Pierre Cox\" : 12], n: 10) == false)",
            "assert(check_value(dict: [\"Cierra Vega\" : 12, \"Alden Cantrell\" : 12, \"Kierra Gentry\" : 12, \"Pierre Cox\" : 12], n: 12) == true)",
            "assert(check_value(dict: [\"Cierra Vega\" : 12, \"Alden Cantrell\" : 12, \"Kierra Gentry\" : 12, \"Pierre Cox\" : 12], n: 5) == false)"
        ]
    },
    {
        "task_id": "465",
        "title": "drop_empty",
        "text": "/ Write a function to drop empty items from a given dictionary.",
        "code": "\nfunc drop_empty(dict1: [String : String?]) -> [String : String] {\n\tvar result [][]String\n\tfor _, item := range dict1 {\n\t\tif len(item) == 0 {\n\t\t\tresult = append(result, item)\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(drop_empty(dict1: [\"c1\" : \"Red\", \"c2\" : \"Green\", \"c3\" : nil]) == [\"c1\" : \"Red\", \"c2\" : \"Green\"])",
            "assert(drop_empty(dict1: [\"c1\" : \"Red\", \"c2\" : nil, \"c3\" : nil]) == [\"c1\" : \"Red\"])",
            "assert(drop_empty(dict1: [\"c1\" : nil, \"c2\" : \"Green\", \"c3\" : nil]) == [\"c2\" : \"Green\"])"
        ]
    },
    {
        "task_id": "468",
        "title": "max_product",
        "text": "/ Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
        "code": "\nfunc max_product(arr: [Int]) -> Int {\n\tvar max_product = 0\n\tfor i := 0; i < len(arr); i++ {\n\t\tmax_product = arr[i] * arr[i]\n\t}\n\treturn max_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(max_product(arr: [3, 100, 4, 5, 150, 6]) == 3000)",
            "assert(max_product(arr: [4, 42, 55, 68, 80]) == 50265600)",
            "assert(max_product(arr: [10, 22, 9, 33, 21, 50, 41, 60]) == 2460)"
        ]
    },
    {
        "task_id": "470",
        "title": "add_pairwise",
        "text": "/ Write a function to find the pairwise addition of the neighboring elements of the given tuple.",
        "code": "\nfunc add_pairwise(test_tup: (Int, Int, Int, Int, Int)) -> (Int, Int, Int, Int) {\n\tvar (\n\t\ta, b, c, d, e, f Int\n\t)\n\tfor i := 0; i < test_tup.Len(); i++ {\n\t\ta = test_tup.At(i)\n\t\tb = test_tup.At(i + 1)\n\t\tc = test_tup.At(i + 2)\n\t\td = test_tup.At(i + 3)\n\t\te = test_tup.At(i + 4)\n\t\tf = test_tup.At(i + 5)\n\t}\n\treturn add_pairwise_helper(a, b, c, d, e, f)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(add_pairwise(test_tup: (1, 5, 7, 8, 10)) == (6, 12, 15, 18))",
            "assert(add_pairwise(test_tup: (2, 6, 8, 9, 11)) == (8, 14, 17, 20))",
            "assert(add_pairwise(test_tup: (3, 7, 9, 10, 12)) == (10, 16, 19, 22))"
        ]
    },
    {
        "task_id": "471",
        "title": "find_remainder",
        "text": "/ Write a swiftthon function to find the product of the array multiplication modulo n.",
        "code": "\nfunc find_remainder(arr: [Int], n: Int) -> Int {\n\tvar product Int\n\tfor i := 0; i < len(arr); i++ {\n\t\tproduct = product * arr[i] % n\n\t}\n\treturn product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(find_remainder(arr: [100, 10, 5, 25, 35, 14], n: 11) == 9)",
            "assert(find_remainder(arr: [1, 1, 1], n: 1) == 0)",
            "assert(find_remainder(arr: [1, 2, 1], n: 2) == 0)"
        ]
    },
    {
        "task_id": "472",
        "title": "check_Consecutive",
        "text": "/ Write a swiftthon function to check whether the given array contains consecutive numbers or not.",
        "code": "\nfunc check_Consecutive(l: [Int]) -> Bool {\n\tif len(l) == 0 {\n\t\treturn false\n\t}\n\tif len(l) == 1 {\n\t\treturn true\n\t}\n\tif l[0] == l[1] {\n\t\treturn true\n\t}\n\treturn false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(check_Consecutive(l: [1, 2, 3, 4, 5]) == true)",
            "assert(check_Consecutive(l: [1, 2, 3, 5, 6]) == false)",
            "assert(check_Consecutive(l: [1, 2, 1]) == false)"
        ]
    },
    {
        "task_id": "474",
        "title": "replace_char",
        "text": "/ Write a function to replace characters in a string.",
        "code": "\nfunc replace_char(str1: String, ch: String, newch: String) -> String {\n\tif len(str1) == 0 {\n\t\treturn str1\n\t}\n\tif len(str1) == 1 {\n\t\treturn str1\n\t}\n\tif len(str1) == 2 {\n\t\treturn str1\n\t}\n\tif len(str1) == 3 {\n\t\treturn str1\n\t}\n\tif len(str1) == 4 {\n\t\treturn str1\n\t}\n\tif len(str1) == 5 {\n\t\treturn str1\n\t}\n\tif len(str1) == 6 {\n\t\treturn str1\n\t}\n\tif len(str1) == 7 {\n\t\treturn str1\n\t}\n\tif len(str1) == 8 {\n\t\treturn str1\n\t}\n\tif len(str1) == 9 {\n\t\treturn str1\n\t}\n\tif len(str1) == 10 {\n\t\treturn str1\n\t}\n\tif len(str1) == 11 {\n\t\treturn str1\n\t}\n\tif len(str1) == 12 {\n\t\treturn str1\n\t}\n\tif len(str1) == 13 {\n\t\treturn str1\n\t}\n\tif len(str1) == 14 {\n\t\treturn str1\n\t}\n\tif len(str1) == 15 {\n\t\treturn str1\n\t}\n\tif len(str1) == 16 {\n\t\treturn str1\n\t}\n\tif len(str1) == 17 {\n\t\treturn str1\n\t}\n\tif len(str1) == 18 {\n\t\treturn str1\n\t}\n\tif len(str1) == 19 {\n\t\treturn str1\n\t}\n\tif len(str1) == 20 {\n\t\treturn str1\n\t}\n\tif len(str1) == 21 {\n\t\treturn str1\n\t}\n\tif len(str1) == 22 {\n\t\treturn str1\n\t}\n\tif len(str1) == 23 {\n\t\treturn str1\n\t}\n\tif len(str1) == 24 {\n\t\treturn str1\n\t}\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(replace_char(str1: \"polygon\", ch: \"y\", newch: \"l\") == \"pollgon\")",
            "assert(replace_char(str1: \"character\", ch: \"c\", newch: \"a\") == \"aharaater\")",
            "assert(replace_char(str1: \"python\", ch: \"l\", newch: \"a\") == \"python\")"
        ]
    },
    {
        "task_id": "475",
        "title": "sort_counter",
        "text": "/ Write a function to sort a dictionary by value.",
        "code": "\nfunc sort_counter(dict1: [String : Int]) -> [(String, Int)] {\n\tvar counter [][]Int\n\tfor k, v := range dict1 {\n\t\tcounter = append(counter, [][]Int{k, v})\n\t}\n\tsort.Sort(counter)\n\treturn counter\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(sort_counter(dict1: [\"Math\" : 81, \"Physics\" : 83, \"Chemistry\" : 87]) == [(\"Chemistry\", 87), (\"Physics\", 83), (\"Math\", 81)])",
            "assert(sort_counter(dict1: [\"Math\" : 400, \"Physics\" : 300, \"Chemistry\" : 250]) == [(\"Math\", 400), (\"Physics\", 300), (\"Chemistry\", 250)])",
            "assert(sort_counter(dict1: [\"Math\" : 900, \"Physics\" : 1000, \"Chemistry\" : 1250]) == [(\"Chemistry\", 1250), (\"Physics\", 1000), (\"Math\", 900)])"
        ]
    },
    {
        "task_id": "476",
        "title": "big_sum",
        "text": "/ Write a swiftthon function to find the sum of the largest and smallest value in a given array.",
        "code": "\nfunc big_sum(nums: [Int]) -> Int {\n\tvar sum Int\n\tfor _, num := range nums {\n\t\tsum += num\n\t}\n\treturn sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(big_sum(nums: [1, 2, 3]) == 4)",
            "assert(big_sum(nums: [-1, 2, 3, 4]) == 3)",
            "assert(big_sum(nums: [2, 3, 6]) == 8)"
        ]
    },
    {
        "task_id": "477",
        "title": "is_lower",
        "text": "/ Write a swiftthon function to convert the given string to lower case.",
        "code": "\nfunc is_lower(string: String) -> String {\n\treturn string.toLower()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(is_lower(string: \"InValid\") == \"invalid\")",
            "assert(is_lower(string: \"TruE\") == \"true\")",
            "assert(is_lower(string: \"SenTenCE\") == \"sentence\")"
        ]
    },
    {
        "task_id": "478",
        "title": "remove_lowercase",
        "text": "/ Write a function to remove lowercase substrings from a given string.",
        "code": "\nfunc remove_lowercase(str1: String) -> String {\n\tstr2 := str1.String()\n\tstr2 = strings.ToLower(str2)\n\treturn str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(remove_lowercase(str1: \"PYTHon\") == \"PYTH\")",
            "assert(remove_lowercase(str1: \"FInD\") == \"FID\")",
            "assert(remove_lowercase(str1: \"STRinG\") == \"STRG\")"
        ]
    },
    {
        "task_id": "479",
        "title": "first_Digit",
        "text": "/ Write a swiftthon function to find the first digit of a given number.",
        "code": "\nfunc first_Digit(n: Int) -> Int {\n\tif n == 0 {\n\t\treturn 0\n\t}\n\treturn n.Int()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(first_Digit(n: 123) == 1)",
            "assert(first_Digit(n: 456) == 4)",
            "assert(first_Digit(n: 12) == 1)"
        ]
    },
    {
        "task_id": "4",
        "title": "heap_queue_largest",
        "text": "/ Write a function to find the n largest integers from a given array of numbers, returned in descending order.",
        "code": "\nfunc heap_queue_largest(nums: [Int], n: Int) -> [Int] {\n\tif len(nums) == 0 {\n\t\treturn []Int{}\n\t}\n\theap := make([]Int, 0, len(nums))\n\theap = append(heap, nums[0])\n\tfor i := 1; i < len(nums); i++ {\n\t\tif nums[i] > nums[i-1] {\n\t\t\theap = append(heap, nums[i])\n\t\t} else {\n\t\t\theap = append(heap, nums[i])\n\t\t}\n\t}\n\treturn heap\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(heap_queue_largest(nums: [25, 35, 22, 85, 14, 65, 75, 22, 58], n: 3) == [85, 75, 65])",
            "assert(heap_queue_largest(nums: [25, 35, 22, 85, 14, 65, 75, 22, 58], n: 2) == [85, 75])",
            "assert(heap_queue_largest(nums: [25, 35, 22, 85, 14, 65, 75, 22, 58], n: 5) == [85, 75, 65, 58, 35])"
        ]
    },
    {
        "task_id": "554",
        "title": "Split",
        "text": "/ Write a swiftthon function which takes an array of integers and only returns the odd ones.",
        "code": "\nfunc Split(list: [Int]) -> [Int] {\n\tvar result [Int]\n\tfor i := 0; i < len(list); i += 2 {\n\t\tresult = append(result, list[i])\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(Split(list: [1, 2, 3, 4, 5, 6]) == [1, 3, 5])",
            "assert(Split(list: [10, 11, 12, 13]) == [11, 13])",
            "assert(Split(list: [7, 8, 9, 1]) == [7, 9, 1])"
        ]
    },
    {
        "task_id": "555",
        "title": "difference",
        "text": "/ Write a swiftthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.",
        "code": "\nfunc difference(n: Int) -> Int {\n\tif n == 0 {\n\t\treturn 0\n\t}\n\tif n == 1 {\n\t\treturn 1\n\t}\n\tif n == 2 {\n\t\treturn 2\n\t}\n\tif n == 3 {\n\t\treturn 3\n\t}\n\tif n == 4 {\n\t\treturn 4\n\t}\n\tif n == 5 {\n\t\treturn 5\n\t}\n\tif n == 6 {\n\t\treturn 6\n\t}\n\tif n == 7 {\n\t\treturn 7\n\t}\n\tif n == 8 {\n\t\treturn 8\n\t}\n\tif n == 9 {\n\t\treturn 9\n\t}\n\tif n == 10 {\n\t\treturn 10\n\t}\n\tif n == 11 {\n\t\treturn 11\n\t}\n\tif n == 12 {\n\t\treturn 12\n\t}\n\tif n == 13 {\n\t\treturn 13\n\t}\n\tif n == 14 {\n\t\treturn 14\n\t}\n\tif n == 15 {\n\t\treturn 15\n\t}\n\tif n == 16 {\n\t\treturn 16\n\t}\n\tif n == 17 {\n\t\treturn 17\n\t}\n\tif n == 18 {\n\t\treturn 18\n\t}\n\tif n == 19 {\n\t\treturn 19\n\t}\n\tif n == 20 {\n\t\treturn 20\n\t}\n\tif n == 21 {\n\t\treturn 21\n\t}\n\tif n == 22 {\n\t\treturn 22\n\t}\n\tif n == 23 {\n\t\treturn 23\n\t}\n\tif n == 24 {\n\t\treturn 24\n\t}\n\tif n == 25 {\n\t\treturn 25\n\t}\n\tif n == 26 {\n\t\treturn 26\n\t}\n\tif n == 27 {\n\t\treturn 27\n\t}\n\tif n == 28 {\n\t\treturn 28\n\t}\n\tif n == 29 {\n\t\treturn 29\n\t}\n\tif n == 30 {\n\t\treturn 30\n\t}\n\tif n == 31 {\n\t\treturn 31\n\t}\n\tif n == 32 {\n\t\treturn 32\n\t}\n\tif n == 33\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(difference(n: 3) == 30)",
            "assert(difference(n: 5) == 210)",
            "assert(difference(n: 2) == 6)"
        ]
    },
    {
        "task_id": "556",
        "title": "find_Odd_Pair",
        "text": "/ Write a swiftthon function to count the number of pairs whose xor value is odd.",
        "code": "\nfunc find_Odd_Pair(A: [Int], N: Int) -> Int {\n\tvar xor_value int\n\tfor i := 0; i < N; i++ {\n\t\txor_value = A[i] ^ A[i+1]\n\t\tif xor_value == 1 {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(find_Odd_Pair(A: [5, 4, 7, 2, 1], N: 5) == 6)",
            "assert(find_Odd_Pair(A: [7, 2, 8, 1, 0, 5, 11], N: 7) == 12)",
            "assert(find_Odd_Pair(A: [1, 2, 3], N: 3) == 2)"
        ]
    },
    {
        "task_id": "557",
        "title": "toggle_string",
        "text": "/ Write a function to toggle the case of all characters in a string.",
        "code": "\nfunc toggle_string(string: String) -> String {\n\treturn string.ReplaceAll(string, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(toggle_string(string: \"Python\") == \"pYTHON\")",
            "assert(toggle_string(string: \"Pangram\") == \"pANGRAM\")",
            "assert(toggle_string(string: \"LIttLE\") == \"liTTle\")"
        ]
    },
    {
        "task_id": "558",
        "title": "digit_distance_nums",
        "text": "/ Write a swiftthon function to find the sum of the per-digit difference between two integers.",
        "code": "\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n\tif n1 == 0 {\n\t\treturn n2\n\t}\n\tif n2 == 0 {\n\t\treturn n1\n\t}\n\tif n1 == 1 {\n\t\treturn n2\n\t}\n\tif n2 == 1 {\n\t\treturn n1\n\t}\n\tif n1 == 0 {\n\t\treturn n2\n\t}\n\treturn n1 - n2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(digit_distance_nums(n1: 1, n2: 2) == 1)",
            "assert(digit_distance_nums(n1: 23, n2: 56) == 6)",
            "assert(digit_distance_nums(n1: 123, n2: 256) == 7)"
        ]
    },
    {
        "task_id": "559",
        "title": "max_sub_array_sum",
        "text": "/ Write a function to find the sum of the largest contiguous subarray in the given array.",
        "code": "\nfunc max_sub_array_sum(a: [Int], size: Int) -> Int {\n\tif size == 0 {\n\t\treturn 0\n\t}\n\tvar sum Int\n\tfor i := 0; i < size; i++ {\n\t\tsum += a[i]\n\t}\n\treturn sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(max_sub_array_sum(a: [-2, -3, 4, -1, -2, 1, 5, -3], size: 8) == 7)",
            "assert(max_sub_array_sum(a: [-3, -4, 5, -2, -3, 2, 6, -4], size: 8) == 8)",
            "assert(max_sub_array_sum(a: [-4, -5, 6, -3, -4, 3, 7, -5], size: 8) == 10)"
        ]
    },
    {
        "task_id": "560",
        "title": "union_elements",
        "text": "/ Write a function to find the union of the elements of two given arrays and output them in sorted order.",
        "code": "\nfunc union_elements(test_tup1: [Int], test_tup2: [Int]) -> [Int] {\n\tvar union_elements_tup [][]Int\n\tfor i := 0; i < len(test_tup1); i++ {\n\t\tunion_elements_tup = append(union_elements_tup, test_tup1[i])\n\t}\n\tfor i := 0; i < len(test_tup2); i++ {\n\t\tunion_elements_tup = append(union_elements_tup, test_tup2[i])\n\t}\n\treturn union_elements_tup\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(union_elements(test_tup1: [3, 4, 5, 6], test_tup2: [5, 7, 4, 10]) == [3, 4, 5, 6, 7, 10])",
            "assert(union_elements(test_tup1: [1, 2, 3, 4], test_tup2: [3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6])",
            "assert(union_elements(test_tup1: [11, 12, 13, 14], test_tup2: [13, 15, 16, 17]) == [11, 12, 13, 14, 15, 16, 17])"
        ]
    },
    {
        "task_id": "562",
        "title": "Find_Max_Length",
        "text": "/ Write a swiftthon function to find the length of the longest subarrays.",
        "code": "\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n\tif len(lst) == 0 {\n\t\treturn 0\n\t}\n\tmax := lst[0]\n\tfor _, v := range lst[1:] {\n\t\tif v > max {\n\t\t\tmax = v\n\t\t}\n\t}\n\treturn max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)",
            "assert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)",
            "assert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)"
        ]
    },
    {
        "task_id": "563",
        "title": "extract_values",
        "text": "/ Write a function to extract values between quotation marks from a string.",
        "code": "\nfunc extract_values(text: String) -> [String] {\n\tvar result [String]\n\tfor i := 0; i < len(text); i++ {\n\t\tif text[i] == '\"' {\n\t\t\tresult = append(result, text[i+1:i+2])\n\t\t\ti += 2\n\t\t} else {\n\t\t\tresult = append(result, text[i])\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(extract_values(text: \"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"])",
            "assert(extract_values(text: \"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"])",
            "assert(extract_values(text: \"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"])"
        ]
    },
    {
        "task_id": "564",
        "title": "count_Pairs",
        "text": "/ Write a swiftthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.",
        "code": "\nfunc count_Pairs(arr: [Int], n: Int) -> Int {\n\tvar count = 0\n\tfor i := 0; i < n; i++ {\n\t\tif arr[i]!= arr[i+1] {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(count_Pairs(arr: [1, 2, 1], n: 3) == 2)",
            "assert(count_Pairs(arr: [1, 1, 1, 1], n: 4) == 0)",
            "assert(count_Pairs(arr: [1, 2, 3, 4, 5], n: 5) == 10)"
        ]
    },
    {
        "task_id": "565",
        "title": "split",
        "text": "/ Write a swiftthon function to split a string into characters.",
        "code": "\nfunc split(word: String) -> [String] {\n\treturn split(word, 0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(split(word: \"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"])",
            "assert(split(word: \"Name\") == [\"N\", \"a\", \"m\", \"e\"])",
            "assert(split(word: \"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"])"
        ]
    },
    {
        "task_id": "566",
        "title": "sum_digits",
        "text": "/ Write a function to get the sum of the digits of a non-negative integer.",
        "code": "\nfunc sum_digits(n: Int) -> Int {\n\tif n.IsNegative() {\n\t\treturn n\n\t}\n\treturn n.Add(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(sum_digits(n: 345) == 12)",
            "assert(sum_digits(n: 12) == 3)",
            "assert(sum_digits(n: 97) == 16)"
        ]
    },
    {
        "task_id": "567",
        "title": "issort_list",
        "text": "/ Write a function to check whether a specified array is sorted or not.",
        "code": "\nfunc issort_list(list1: [Int]) -> Bool {\n\tif len(list1) == 0 {\n\t\treturn false\n\t}\n\tif len(list1) == 1 {\n\t\treturn true\n\t}\n\treturn issort_list(list1[1:])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == true)",
            "assert(issort_list(list1: [1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == false)",
            "assert(issort_list(list1: [1, 2, 4, 6, 8, 10, 15, 14, 20]) == false)"
        ]
    },
    {
        "task_id": "568",
        "title": "empty_list",
        "text": "/ Write a function to create an array of N empty dictionaries.",
        "code": "\nfunc empty_list(length: Int) -> [[() : ()]] {\n\treturn [() : ()]{}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(empty_list(length: 5) == [[:] as [() : ()], [:] as [() : ()], [:] as [() : ()], [:] as [() : ()], [:] as [() : ()]])",
            "assert(empty_list(length: 6) == [[:] as [() : ()], [:] as [() : ()], [:] as [() : ()], [:] as [() : ()], [:] as [() : ()], [:] as [() : ()]])",
            "assert(empty_list(length: 7) == [[:] as [() : ()], [:] as [() : ()], [:] as [() : ()], [:] as [() : ()], [:] as [() : ()], [:] as [() : ()], [:] as [() : ()]])"
        ]
    },
    {
        "task_id": "569",
        "title": "sort_sublists",
        "text": "/ Write a function to sort each subarray of strings in a given array of arrays.",
        "code": "\nfunc sort_sublists(list1: [[String]]) -> [[String]] {\n\tvar list2 = make([][]String, len(list1))\n\tfor i := 0; i < len(list1); i++ {\n\t\tlist2[i] = make([]String, len(list1[i]))\n\t\tcopy(list2[i], list1[i])\n\t}\n\tsort.Sort(list2)\n\treturn list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(sort_sublists(list1: [[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]) == [[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]])",
            "assert(sort_sublists(list1: [[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]) == [[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]])",
            "assert(sort_sublists(list1: [[\"a\", \"b\"], [\"d\", \"c\"], [\"g\", \"h\"], [\"f\", \"e\"]]) == [[\"a\", \"b\"], [\"c\", \"d\"], [\"g\", \"h\"], [\"e\", \"f\"]])"
        ]
    },
    {
        "task_id": "56",
        "title": "checks",
        "text": "/ Write a swiftthon function to check if a given number is one less than twice its reverse.",
        "code": "\nfunc checks(n: Int) -> Bool {\n\tif n.Cmp(n.Reverse()) == 0 {\n\t\treturn true\n\t}\n\treturn false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(checks(n: 70) == false)",
            "assert(checks(n: 23) == false)",
            "assert(checks(n: 73) == true)"
        ]
    },
    {
        "task_id": "572",
        "title": "two_unique_nums",
        "text": "/ Write a swiftthon function to remove duplicate numbers from a given number of arrays.",
        "code": "\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n\tvar result [Int] = make([]Int, len(nums))\n\tfor i, num := range nums {\n\t\tif num == nums[i] {\n\t\t\tresult[i] = nums[i]\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])",
            "assert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])",
            "assert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])"
        ]
    },
    {
        "task_id": "573",
        "title": "unique_product",
        "text": "/ Write a swiftthon function to calculate the product of the unique numbers in a given array.",
        "code": "\nfunc unique_product(list_data: [Int]) -> Int {\n\tvar product Int\n\tfor i := 0; i < len(list_data); i++ {\n\t\tproduct = product * list_data[i]\n\t}\n\treturn product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)",
            "assert(unique_product(list_data: [1, 2, 3, 1]) == 6)",
            "assert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)"
        ]
    },
    {
        "task_id": "574",
        "title": "surfacearea_cylinder",
        "text": "/ Write a function to find the surface area of a cylinder.",
        "code": "\nfunc surfacearea_cylinder(r: Int, h: Int) -> Double {\n\tvar a, b, c, d, e, f, g, h2, h3, h4, h5, h6, h7, h8, h9, h10, h11, h12, h13, h14, h15, h16, h17, h18, h19, h20, h21, h22, h23, h24, h25, h26, h27, h28, h29, h30, h31, h32, h33, h34, h35, h36, h37, h38, h39, h40, h41, h42, h43, h44, h45, h46, h47, h48, h49, h50, h51, h52, h53, h54, h55, h56, h57, h58, h59, h60, h61, h62, h63, h64, h65, h66, h67, h68, h69, h70, h71, h72, h73, h74, h75, h76, h77, h78, h79, h80, h81, h82, h83, h84, h85, h86, h87, h88, h89, h90, h91, h92, h93, h94, h95, h96, h97, h98, h99, h100, h101, h102, h103, h104, h105, h106, h107, h108, h109, h110, h111, h112, h113, h114, h115, h116, h117, h118, h119, h120, h121, h122, h123, h124, h125, h126, h127, h128, h129, h130, h131, h132, h133, h134, h135, h136, h137, h138, h139, h140, h141, h142, h143, h144, h145, h146, h147, h148, h149, h150, h151, h152, h153, h154, h155,\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(surfacearea_cylinder(r: 10, h: 5) == 942.45)",
            "assert(surfacearea_cylinder(r: 4, h: 5) == 226.18800000000002)",
            "assert(surfacearea_cylinder(r: 4, h: 10) == 351.848)"
        ]
    },
    {
        "task_id": "576",
        "title": "is_Sub_Array",
        "text": "/ Write a swiftthon function to check whether an array is subarray of another or not.",
        "code": "\nfunc is_Sub_Array(A: [Int], B: [Int]) -> Bool {\n\tif len(A)!= len(B) {\n\t\treturn false\n\t}\n\tfor i := 0; i < len(A); i++ {\n\t\tif A[i] < B[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(is_Sub_Array(A: [1, 4, 3, 5], B: [1, 2]) == false)",
            "assert(is_Sub_Array(A: [1, 2, 1], B: [1, 2, 1]) == true)",
            "assert(is_Sub_Array(A: [1, 0, 2, 2], B: [2, 2, 0]) == false)"
        ]
    },
    {
        "task_id": "577",
        "title": "last_Digit_Factorial",
        "text": "/ Write a swiftthon function to find the last digit in factorial of a given number.",
        "code": "\nfunc last_Digit_Factorial(n: Int) -> Int {\n\tif n == 0 {\n\t\treturn 0\n\t}\n\treturn factorial(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(last_Digit_Factorial(n: 4) == 4)",
            "assert(last_Digit_Factorial(n: 21) == 0)",
            "assert(last_Digit_Factorial(n: 30) == 0)"
        ]
    },
    {
        "task_id": "578",
        "title": "interleave_lists",
        "text": "/ Write a function to interleave 3 arrays of the same length into a single flat array.",
        "code": "\nfunc interleave_lists(list1: [Int], list2: [Int], list3: [Int]) -> [Int] {\n\tvar result [Int]\n\tfor i := 0; i < len(list1); i++ {\n\t\tresult[i] = list1[i]\n\t}\n\tfor i := 0; i < len(list2); i++ {\n\t\tresult[i] = list2[i]\n\t}\n\tfor i := 0; i < len(list3); i++ {\n\t\tresult[i] = list3[i]\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(interleave_lists(list1: [1, 2, 3, 4, 5, 6, 7], list2: [10, 20, 30, 40, 50, 60, 70], list3: [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])",
            "assert(interleave_lists(list1: [10, 20], list2: [15, 2], list3: [5, 10]) == [10, 15, 5, 20, 2, 10])",
            "assert(interleave_lists(list1: [11, 44], list2: [10, 15], list3: [20, 5]) == [11, 10, 20, 44, 15, 5])"
        ]
    },
    {
        "task_id": "579",
        "title": "find_dissimilar",
        "text": "/ Write a function to find the dissimilar elements in the given two tuples.",
        "code": "\nfunc find_dissimilar(test_tup1: (Int, Int, Int, Int), test_tup2: (Int, Int, Int, Int)) -> (Int, Int, Int, Int) {\n\tvar test_tup1_int, test_tup2_int int\n\tvar test_tup1_int_int int\n\tvar test_tup2_int_int int\n\tvar test_tup1_int_int_int int\n\tvar test_tup2_int_int_int_int int\n\tvar test_tup1_int_int_int_int_int int\n\tvar test_tup2_int_int_int_int_int_int_int int\n\tvar test_tup1_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(find_dissimilar(test_tup1: (3, 4, 5, 6), test_tup2: (5, 7, 4, 10)) == (3, 6, 7, 10))",
            "assert(find_dissimilar(test_tup1: (1, 2, 3, 4), test_tup2: (7, 2, 3, 9)) == (1, 4, 7, 9))",
            "assert(find_dissimilar(test_tup1: (21, 11, 25, 26), test_tup2: (26, 34, 21, 36)) == (34, 36, 11, 25))"
        ]
    },
    {
        "task_id": "57",
        "title": "find_Max_Num",
        "text": "/ Write a swiftthon function to find the largest number that can be formed with the given array of digits.",
        "code": "\nfunc find_Max_Num(arr: [Int]) -> Int {\n\tmax_num := 0\n\tfor i := 0; i < len(arr); i++ {\n\t\tif arr[i] > max_num {\n\t\t\tmax_num = arr[i]\n\t\t}\n\t}\n\treturn max_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(find_Max_Num(arr: [1, 2, 3]) == 321)",
            "assert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)",
            "assert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)"
        ]
    },
    {
        "task_id": "580",
        "title": "extract_even",
        "text": "/ Write a function to remove uneven elements in the nested mixed tuple.",
        "code": "\nfunc extract_even(test_tuple: (Int, Int, (Int, Int, (Int, Int)), Int, Int)) -> AnyHashable {\n\treturn func(test_tuple: (Int, Int, (Int, Int, (Int, Int)), Int, Int) -> AnyHashable) -> AnyHashable {\n\t\treturn test_tuple.extract_even(test_tuple.length, test_tuple.length, test_tuple.length, test_tuple.length, test_tuple.length)\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(extract_even(test_tuple: (4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8))",
            "assert(extract_even(test_tuple: (5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8))))",
            "assert(extract_even(test_tuple: (5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10))"
        ]
    },
    {
        "task_id": "581",
        "title": "surface_Area",
        "text": "/ Write a swiftthon function to find the surface area of a square swiftramid with a given base edge and height.",
        "code": "\nfunc surface_Area(b: Int, s: Int) -> Int {\n\tvar x, y, z, w, h, w2, h2, w3, h3, w4, h4, w5, h5, w6, h6, w7, h7, w8, h8, w9, h9, w10, h10, w11, h11, w12, h12, w13, h13, w14, h14, w15, h15, w16, h16, w17, h17, w18, h18, w19, h19, w20, h20, w21, h21, w22, h22, w23, h23, w24, h24, w25, h25, w26, h26, w27, h27, w28, h28, w29, h29, w30, h30, w31, h31, w32, h32, w33, h33, w34, h34, w35, h35, w36, h36, w37, h37, w38, h38, w39, h39, w40, h40, w41, h41, w42, h42, w43, h43, w44, h44, w45, h45, w46, h46, w47, h47, w48, h48, w49, h49, w50, h50, w51, h51, w52, h52, w53, h53, w54, h54, w55, h55, w56, h56, w57, h57, w58, h58, w59, h59, w60, h60, w61, h61, w62, h62, w63, h63, w64, h64, w65, h65, w66, h66, w67, h67, w68, h68, w69, h69, w70, h70, w71, h71, w72, h72, w73, h73, w74, h74, w75, h75, w76, h76, w77, h77,\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(surface_Area(b: 3, s: 4) == 33)",
            "assert(surface_Area(b: 4, s: 5) == 56)",
            "assert(surface_Area(b: 1, s: 2) == 5)"
        ]
    },
    {
        "task_id": "583",
        "title": "catalan_number",
        "text": "/ Write a function which returns nth catalan number.",
        "code": "\nfunc catalan_number(num: Int) -> Int {\n\treturn num % 10\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(catalan_number(num: 10) == 16796)",
            "assert(catalan_number(num: 9) == 4862)",
            "assert(catalan_number(num: 7) == 429)"
        ]
    },
    {
        "task_id": "584",
        "title": "find_adverbs",
        "text": "/ Write a function to find the first adverb ending with ly and its positions in a given string.",
        "code": "\nfunc find_adverbs(text: String) -> String {\n\tvar result String\n\tvar pos int\n\tvar last_pos int\n\tvar last_adverb String\n\tvar adverbs String\n\tvar adverb_pos int\n\tvar adverb_len int\n\tvar adverb_pos_end int\n\tvar adverb_len_end int\n\tvar adverb_pos_end_end int\n\tvar adverb_len_end_end int\n\tvar adverb_pos_end_end_end int\n\tvar adverb_len_end_end_end int\n\tvar adverb_pos_end_end_end_end int\n\tvar adverb_len_end_end_end_end int\n\tvar adverb_pos_end_end_end_end_end int\n\tvar adverb_len_end_end_end_end_end int\n\tvar adverb_pos_end_end_end_end_end_end int\n\tvar adverb_len_end_end_end_end_end_end int\n\tvar adverb_pos_end_end_end_end_end_end_end int\n\tvar adverb_len_end_end_end_end_end_end_end_end int\n\tvar adverb_pos_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(find_adverbs(text: \"Clearly, he has no excuse for such behavior.\") == \"0-7: Clearly\")",
            "assert(find_adverbs(text: \"Please handle the situation carefuly\") == \"28-36: carefuly\")",
            "assert(find_adverbs(text: \"Complete the task quickly\") == \"18-25: quickly\")"
        ]
    },
    {
        "task_id": "585",
        "title": "expensive_items",
        "text": "/ Write a function to find the n most expensive items in a given dataset.",
        "code": "\nextension Double: Error {}\n        \nfunc expensive_items(items: [[String : Result<String, Double>]], n: Int) -> [[String : Result<String, Double>]] {\n    var items_list = make([]string, 0, n)\n    for _, item := range items {\n        items_list = append(items_list, item.String())\n    }\n    return items_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(expensive_items(items: [[\"name\" : .success(\"Item-1\"), \"price\" : .failure(101.1)], [\"name\" : .success(\"Item-2\"), \"price\" : .failure(555.22)]], n: 1) == [[\"name\" : .success(\"Item-2\"), \"price\" : .failure(555.22)]])",
            "assert(expensive_items(items: [[\"name\" : .success(\"Item-1\"), \"price\" : .failure(101.1)], [\"name\" : .success(\"Item-2\"), \"price\" : .failure(555.22)], [\"name\" : .success(\"Item-3\"), \"price\" : .failure(45.09)]], n: 2) == [[\"name\" : .success(\"Item-2\"), \"price\" : .failure(555.22)], [\"name\" : .success(\"Item-1\"), \"price\" : .failure(101.1)]])",
            "assert(expensive_items(items: [[\"name\" : .success(\"Item-1\"), \"price\" : .failure(101.1)], [\"name\" : .success(\"Item-2\"), \"price\" : .failure(555.22)], [\"name\" : .success(\"Item-3\"), \"price\" : .failure(45.09)], [\"name\" : .success(\"Item-4\"), \"price\" : .failure(22.75)]], n: 1) == [[\"name\" : .success(\"Item-2\"), \"price\" : .failure(555.22)]])"
        ]
    },
    {
        "task_id": "586",
        "title": "split_Arr",
        "text": "/ Write a swiftthon function to split an array at the nth eelment and add the first part to the end.",
        "code": "\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n\tif len(l) == 0 {\n\t\treturn [Int]{}\n\t}\n\tif n < 0 {\n\t\treturn [Int]{}\n\t}\n\tif n == 0 {\n\t\treturn l\n\t}\n\tif n == 1 {\n\t\treturn [Int]{l[0]: l[1], l[0]: l[1]}\n\t}\n\tif n == 2 {\n\t\treturn [Int]{l[0]: l[1], l[1]: l[0]}\n\t}\n\treturn split_Arr(l[:n], n-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])",
            "assert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])",
            "assert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])"
        ]
    },
    {
        "task_id": "587",
        "title": "list_tuple",
        "text": "/ Write a function to convert an array to a tuple.",
        "code": "\nfunc list_tuple(listx: [Int]) -> AnyHashable {\n\treturn AnyHashable(listx)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(list_tuple(listx: [5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3))",
            "assert(list_tuple(listx: [2, 4, 5, 6, 2, 3, 4, 4, 7]) == (2, 4, 5, 6, 2, 3, 4, 4, 7))",
            "assert(list_tuple(listx: [58, 44, 56]) == (58, 44, 56))"
        ]
    },
    {
        "task_id": "588",
        "title": "big_diff",
        "text": "/ Write a swiftthon function to find the difference between largest and smallest value in a given array.",
        "code": "\nfunc big_diff(nums: [Int]) -> Int {\n\tvar max int\n\tvar min int\n\tfor _, num := range nums {\n\t\tif num > max {\n\t\t\tmax = num\n\t\t}\n\t\tif num < min {\n\t\t\tmin = num\n\t\t}\n\t}\n\treturn max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(big_diff(nums: [1, 2, 3, 4]) == 3)",
            "assert(big_diff(nums: [4, 5, 12]) == 8)",
            "assert(big_diff(nums: [9, 2, 3]) == 7)"
        ]
    },
    {
        "task_id": "589",
        "title": "perfect_squares",
        "text": "/ Write a function to find perfect squares between two given numbers.",
        "code": "\nfunc perfect_squares(a: Int, b: Int) -> [Int] {\n\tvar perfect_squares [][]Int\n\tfor i := 0; i < len(a); i++ {\n\t\tfor j := 0; j < len(b); j++ {\n\t\t\tif a[i] == b[j] {\n\t\t\t\tperfect_squares = append(perfect_squares, [Int]Int{a[i], b[j]})\n\t\t\t}\n\t\t}\n\t}\n\treturn perfect_squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(perfect_squares(a: 1, b: 30) == [1, 4, 9, 16, 25])",
            "assert(perfect_squares(a: 50, b: 100) == [64, 81, 100])",
            "assert(perfect_squares(a: 100, b: 200) == [100, 121, 144, 169, 196])"
        ]
    },
    {
        "task_id": "58",
        "title": "opposite_Signs",
        "text": "/ Write a swiftthon function to check whether the given two integers have opposite sign or not.",
        "code": "\nfunc opposite_Signs(x: Int, y: Int) -> Bool {\n\tif x.Sign() == y.Sign() {\n\t\treturn true\n\t}\n\treturn false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(opposite_Signs(x: 1, y: -2) == true)",
            "assert(opposite_Signs(x: 3, y: 2) == false)",
            "assert(opposite_Signs(x: -10, y: -10) == false)",
            "assert(opposite_Signs(x: -2, y: 2) == true)"
        ]
    },
    {
        "task_id": "591",
        "title": "swap_List",
        "text": "/ Write a swiftthon function to interchange the first and last elements in an array.",
        "code": "\nfunc swap_List(newList: [Int]) -> [Int] {\n\tnewList = newList[:len(newList)-1]\n\tnewList[len(newList)-1] = newList[len(newList)-2]\n\tnewList[len(newList)-2] = newList[len(newList)-1]\n\treturn newList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(swap_List(newList: [12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12])",
            "assert(swap_List(newList: [1, 2, 3]) == [3, 2, 1])",
            "assert(swap_List(newList: [4, 5, 6]) == [6, 5, 4])"
        ]
    },
    {
        "task_id": "592",
        "title": "sum_Of_product",
        "text": "/ Write a swiftthon function to find the sum of the product of consecutive binomial co-efficients.",
        "code": "\nfunc sum_Of_product(n: Int) -> Int {\n\tif n == 0 {\n\t\treturn 0\n\t}\n\tvar sum Int\n\tfor i := 1; i <= n; i++ {\n\t\tsum += i * i\n\t}\n\treturn sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(sum_Of_product(n: 3) == 15)",
            "assert(sum_Of_product(n: 4) == 56)",
            "assert(sum_Of_product(n: 1) == 1)"
        ]
    },
    {
        "task_id": "593",
        "title": "removezero_ip",
        "text": "/ Write a function to remove leading zeroes from an ip address.",
        "code": "\nfunc removezero_ip(ip: String) -> String {\n\tif ip == \"\" {\n\t\treturn \"\"\n\t}\n\treturn ip[:len(ip)-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(removezero_ip(ip: \"216.08.094.196\") == \"216.8.94.196\")",
            "assert(removezero_ip(ip: \"12.01.024\") == \"12.1.24\")",
            "assert(removezero_ip(ip: \"216.08.094.0196\") == \"216.8.94.196\")"
        ]
    },
    {
        "task_id": "594",
        "title": "diff_even_odd",
        "text": "/ Write a function to find the difference of the first even and first odd number of a given array.",
        "code": "\nfunc diff_even_odd(list1: [Int]) -> Int {\n\tvar result Int\n\tfor i := 0; i < len(list1); i++ {\n\t\tif list1[i]%2 == 0 {\n\t\t\tresult += list1[i]\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)",
            "assert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)",
            "assert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)"
        ]
    },
    {
        "task_id": "595",
        "title": "min_Swaps",
        "text": "/ Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.",
        "code": "\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n\tif str1 == \"\" || str2 == \"\" {\n\t\treturn AnyHashable{}\n\t}\n\tif str1 == str2 {\n\t\treturn AnyHashable{}\n\t}\n\tif str1 == str2[0] {\n\t\treturn AnyHashable{}\n\t}\n\tif str1 == str2[1] {\n\t\treturn AnyHashable{}\n\t}\n\tif str1 == str2[2] {\n\t\treturn AnyHashable{}\n\t}\n\tif str1 == str2[3] {\n\t\treturn AnyHashable{}\n\t}\n\tif str1 == str2[4] {\n\t\treturn AnyHashable{}\n\t}\n\tif str1 == str2[5] {\n\t\treturn AnyHashable{}\n\t}\n\tif str1 == str2[6] {\n\t\treturn AnyHashable{}\n\t}\n\tif str1 == str2[7] {\n\t\treturn AnyHashable{}\n\t}\n\tif str1 == str2[8] {\n\t\treturn AnyHashable{}\n\t}\n\tif str1 == str2[9] {\n\t\treturn AnyHashable{}\n\t}\n\tif str1 == str2[10] {\n\t\treturn AnyHashable{}\n\t}\n\tif str1 == str2[11] {\n\t\treturn AnyHashable{}\n\t}\n\tif str1 == str2[12] {\n\t\treturn AnyHashable{}\n\t}\n\tif str1 == str2[13] {\n\t\treturn AnyHashable{}\n\t}\n\tif str1 == str2[14] {\n\t\treturn AnyHashable{}\n\t}\n\tif str1 == str2[15] {\n\t\treturn AnyHashable{}\n\t}\n\tif str1 == str2[16] {\n\t\treturn AnyHashable{}\n\t}\n\tif str1 == str2[17] {\n\t\treturn AnyHashable{}\n\t}\n\tif str1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)",
            "assert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")",
            "assert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")"
        ]
    },
    {
        "task_id": "597",
        "title": "find_kth",
        "text": "/ Write a function to find kth element from the given two sorted arrays.",
        "code": "\nfunc find_kth(arr1: [Int], arr2: [Int], k: Int) -> Int {\n\tif len(arr1) == 0 || len(arr2) == 0 {\n\t\treturn 0\n\t}\n\tif k < 0 || k >= len(arr1) {\n\t\treturn 0\n\t}\n\treturn arr1[k]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(find_kth(arr1: [2, 3, 6, 7, 9], arr2: [1, 4, 8, 10], k: 5) == 6)",
            "assert(find_kth(arr1: [100, 112, 256, 349, 770], arr2: [72, 86, 113, 119, 265, 445, 892], k: 7) == 256)",
            "assert(find_kth(arr1: [3, 4, 7, 8, 10], arr2: [2, 5, 9, 11], k: 6) == 8)"
        ]
    },
    {
        "task_id": "598",
        "title": "armstrong_number",
        "text": "/ Write a function to check whether the given number is armstrong or not.",
        "code": "\nfunc armstrong_number(number: Int) -> Bool {\n\tif number == 0 {\n\t\treturn false\n\t}\n\tif number == 1 {\n\t\treturn true\n\t}\n\treturn false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(armstrong_number(number: 153) == true)",
            "assert(armstrong_number(number: 259) == false)",
            "assert(armstrong_number(number: 4458) == false)"
        ]
    },
    {
        "task_id": "599",
        "title": "sum_average",
        "text": "/ Write a function to find sum and average of first n natural numbers.",
        "code": "\nfunc sum_average(number: Int) -> (Int, Double) {\n\tsum := 0\n\taverage := 0\n\tfor i := 0; i < number; i++ {\n\t\tsum += number\n\t\taverage += number\n\t}\n\treturn sum, average / number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(sum_average(number: 10) == (55, 5.5))",
            "assert(sum_average(number: 15) == (120, 8.0))",
            "assert(sum_average(number: 20) == (210, 10.5))"
        ]
    },
    {
        "task_id": "59",
        "title": "is_octagonal",
        "text": "/ Write a function to find the nth octagonal number.",
        "code": "\nfunc is_octagonal(n: Int) -> Int {\n\tif n < 2 {\n\t\treturn n\n\t}\n\treturn is_octagonal(n-1) + is_octagonal(n-2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(is_octagonal(n: 5) == 65)",
            "assert(is_octagonal(n: 10) == 280)",
            "assert(is_octagonal(n: 15) == 645)"
        ]
    },
    {
        "task_id": "600",
        "title": "is_Even",
        "text": "/ Write a swiftthon function to check whether the given number is even or not.",
        "code": "\nfunc is_Even(n: Int) -> Bool {\n\treturn n%2 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(is_Even(n: 1) == false)",
            "assert(is_Even(n: 2) == true)",
            "assert(is_Even(n: 3) == false)"
        ]
    },
    {
        "task_id": "602",
        "title": "first_repeated_char",
        "text": "/ Write a swiftthon function to find the first repeated character in a given string.",
        "code": "\nfunc first_repeated_char(str1: String) -> String? {\n\tif len(str1) == 0 {\n\t\treturn str1\n\t}\n\tstr2 := str1\n\tfor i := 0; i < len(str1); i++ {\n\t\tif str1[i] == str2[i] {\n\t\t\treturn str1[i]\n\t\t}\n\t}\n\treturn str1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(first_repeated_char(str1: \"abcabc\") == \"a\")",
            "assert(first_repeated_char(str1: \"abc\") == nil)",
            "assert(first_repeated_char(str1: \"123123\") == \"1\")"
        ]
    },
    {
        "task_id": "603",
        "title": "get_ludic",
        "text": "/ Write a function to get all lucid numbers smaller than or equal to a given integer.",
        "code": "\nfunc get_ludic(n: Int) -> [Int] {\n\tvar result [Int] = make([]Int, 0)\n\tfor i := 0; i < n; i++ {\n\t\tif i%2 == 0 {\n\t\t\tresult = append(result, i)\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(get_ludic(n: 10) == [1, 2, 3, 5, 7])",
            "assert(get_ludic(n: 25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25])",
            "assert(get_ludic(n: 45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43])"
        ]
    },
    {
        "task_id": "604",
        "title": "reverse_words",
        "text": "/ Write a function to reverse words seperated by spaces in a given string.",
        "code": "\nfunc reverse_words(s: String) -> String {\n\treturn strings.Replace(s, \" \", \"\", -1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(reverse_words(s: \"python program\") == \"program python\")",
            "assert(reverse_words(s: \"java language\") == \"language java\")",
            "assert(reverse_words(s: \"indian man\") == \"man indian\")"
        ]
    },
    {
        "task_id": "605",
        "title": "prime_num",
        "text": "/ Write a function to check if the given integer is a prime number.",
        "code": "\nfunc prime_num(num: Int) -> Bool {\n\tif num == 0 {\n\t\treturn false\n\t}\n\tif num == 1 {\n\t\treturn true\n\t}\n\tif num % 2 == 0 {\n\t\treturn false\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(prime_num(num: 13) == true)",
            "assert(prime_num(num: 7) == true)",
            "assert(prime_num(num: -1010) == false)"
        ]
    },
    {
        "task_id": "606",
        "title": "radian_degree",
        "text": "/ Write a function to convert degrees to radians.",
        "code": "\nfunc radian_degree(degree: Int) -> Double {\n\treturn Double(degree * Math.PI / 180)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(radian_degree(degree: 90) == 1.5707963267948966)",
            "assert(radian_degree(degree: 60) == 1.0471975511965976)",
            "assert(radian_degree(degree: 120) == 2.0943951023931953)"
        ]
    },
    {
        "task_id": "607",
        "title": "find_literals",
        "text": "/ Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.",
        "code": "\nfunc find_literals(text: String, pattern: String) -> (String, Int, Int) {\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t// TODO: This is a bit hacky.\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(find_literals(text: \"The quick brown fox jumps over the lazy dog.\", pattern: \"fox\") == (\"fox\", 16, 19))",
            "assert(find_literals(text: \"Its been a very crazy procedure right\", pattern: \"crazy\") == (\"crazy\", 16, 21))",
            "assert(find_literals(text: \"Hardest choices required strongest will\", pattern: \"will\") == (\"will\", 35, 39))"
        ]
    },
    {
        "task_id": "608",
        "title": "bell_Number",
        "text": "/ Write a swiftthon function to find nth bell number.",
        "code": "\nfunc bell_Number(n: Int) -> Int {\n\tif n == 0 {\n\t\treturn 0\n\t}\n\treturn n + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(bell_Number(n: 2) == 2)",
            "assert(bell_Number(n: 3) == 5)",
            "assert(bell_Number(n: 4) == 15)"
        ]
    },
    {
        "task_id": "610",
        "title": "remove_kth_element",
        "text": "/ Write a swiftthon function which takes an array and returns an array with the same elements, but the k'th element removed.",
        "code": "\nfunc remove_kth_element(list1: [Int], L: Int) -> [Int] {\n\tif L == 0 {\n\t\treturn list1\n\t}\n\tvar list2 [Int]\n\tfor i := 0; i < L; i++ {\n\t\tlist2 = append(list2, list1[i])\n\t}\n\treturn list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(remove_kth_element(list1: [1, 1, 2, 3, 4, 4, 5, 1], L: 3) == [1, 1, 3, 4, 4, 5, 1])",
            "assert(remove_kth_element(list1: [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], L: 4) == [0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])",
            "assert(remove_kth_element(list1: [10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], L: 5) == [10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10])"
        ]
    },
    {
        "task_id": "611",
        "title": "max_of_nth",
        "text": "/ Write a function which given a matrix represented as an array of arrays returns the max of then'th column.",
        "code": "\nfunc max_of_nth(test_list: [[Int]], N: Int) -> Int {\n\tmax_of_nth_array := make([]Int, N)\n\tfor i := 0; i < N; i++ {\n\t\tmax_of_nth_array[i] = max(test_list[i])\n\t}\n\treturn max_of_nth_array[N-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(max_of_nth(test_list: [[5, 6, 7], [1, 3, 5], [8, 9, 19]], N: 2) == 19)",
            "assert(max_of_nth(test_list: [[6, 7, 8], [2, 4, 6], [9, 10, 20]], N: 1) == 10)",
            "assert(max_of_nth(test_list: [[7, 8, 9], [3, 5, 7], [10, 11, 21]], N: 1) == 11)"
        ]
    },
    {
        "task_id": "612",
        "title": "merge",
        "text": "/ Write a swiftthon function which takes an array of arrays, where each subarray has two elements, and returns an array of two arrays where the first array has the first element of each subarray and the second one has the second.",
        "code": "\nfunc merge(lst: [[AnyHashable]]) -> [[AnyHashable]] {\n\tvar out []AnyHashable\n\tfor _, v := range lst {\n\t\tif len(v) == 2 {\n\t\t\tout = append(out, v[0])\n\t\t\tout = append(out, v[1])\n\t\t} else {\n\t\t\tout = append(out, v[0])\n\t\t\tout = append(out, v[1].([]AnyHashable))\n\t\t}\n\t}\n\treturn out\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(merge(lst: [[\"x\", \"y\"], [\"a\", \"b\"], [\"m\", \"n\"]]) == [[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"]])",
            "assert(merge(lst: [[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]])",
            "assert(merge(lst: [[\"x\", \"y\", \"z\"], [\"a\", \"b\", \"c\"], [\"m\", \"n\", \"o\"]]) == [[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"], [\"z\", \"c\", \"o\"]])"
        ]
    },
    {
        "task_id": "614",
        "title": "cummulative_sum",
        "text": "/ Write a function to find the cumulative sum of all the values that are present in the given array of arrays.",
        "code": "\nfunc cummulative_sum(test_list: [[Int]]) -> Int {\n\tvar sum int\n\tfor _, test := range test_list {\n\t\tsum += test[0]\n\t}\n\treturn sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(cummulative_sum(test_list: [[1, 3], [5, 6, 7], [2, 6]]) == 30)",
            "assert(cummulative_sum(test_list: [[2, 4], [6, 7, 8], [3, 7]]) == 37)",
            "assert(cummulative_sum(test_list: [[3, 5], [7, 8, 9], [4, 8]]) == 44)"
        ]
    },
    {
        "task_id": "615",
        "title": "average_tuple",
        "text": "/ Write a function which takes an arrays of arrays and returns the average value for each subarray as an array.",
        "code": "\nfunc average_tuple(nums: [[Int]]) -> [Double] {\n\tvar avg [][]Double\n\tfor i := 0; i < len(nums); i++ {\n\t\tavg = append(avg, [][]Double{nums[i]})\n\t}\n\treturn avg\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(average_tuple(nums: [[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]]) == [30.5, 34.25, 27.0, 23.25])",
            "assert(average_tuple(nums: [[1, 1, -5], [30, -15, 56], [81, -60, -39], [-10, 2, 3]]) == [25.5, -18.0, 3.75])",
            "assert(average_tuple(nums: [[100, 100, 100, 120], [300, 450, 560, 450], [810, 800, 390, 320], [10, 20, 30, 40]]) == [305.0, 342.5, 270.0, 232.5])"
        ]
    },
    {
        "task_id": "616",
        "title": "tuple_modulo",
        "text": "/ Write a function which takes two tuples of the same length and performs the element wise modulo.",
        "code": "\nfunc tuple_modulo(test_tup1: (Int, Int, Int, Int), test_tup2: (Int, Int, Int, Int)) -> (Int, Int, Int, Int) {\n\treturn tuple_modulo_impl(test_tup1, test_tup2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(tuple_modulo(test_tup1: (10, 4, 5, 6), test_tup2: (5, 6, 7, 5)) == (0, 4, 5, 1))",
            "assert(tuple_modulo(test_tup1: (11, 5, 6, 7), test_tup2: (6, 7, 8, 6)) == (5, 5, 6, 1))",
            "assert(tuple_modulo(test_tup1: (12, 6, 7, 8), test_tup2: (7, 8, 9, 7)) == (5, 6, 7, 1))"
        ]
    },
    {
        "task_id": "617",
        "title": "min_Jumps",
        "text": "/ Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.",
        "code": "\nfunc min_Jumps(steps: (Int, Int), d: Int) -> Double {\n\tvar min_d = d\n\tvar min_steps = steps\n\tfor i := 0; i < steps; i++ {\n\t\tif d < min_d {\n\t\t\tmin_d = d\n\t\t\tmin_steps = steps\n\t\t}\n\t}\n\treturn min_d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(min_Jumps(steps: (3, 4), d: 11) == 3.5)",
            "assert(min_Jumps(steps: (3, 4), d: 0) == 0)",
            "assert(min_Jumps(steps: (11, 14), d: 11) == 1)"
        ]
    },
    {
        "task_id": "618",
        "title": "div_list",
        "text": "/ Write a function to divide two arrays element wise.",
        "code": "\nfunc div_list(nums1: [Int], nums2: [Int]) -> [Double] {\n\tvar result [Int] = make([]Double, len(nums1))\n\tfor i := range result {\n\t\tresult[i] = Double(nums1[i] / nums2[i])\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(div_list(nums1: [4, 5, 6], nums2: [1, 2, 3]) == [4.0, 2.5, 2.0])",
            "assert(div_list(nums1: [3, 2], nums2: [1, 4]) == [3.0, 0.5])",
            "assert(div_list(nums1: [90, 120], nums2: [50, 70]) == [1.8, 1.7142857142857142])"
        ]
    },
    {
        "task_id": "619",
        "title": "move_num",
        "text": "/ Write a function to move all the numbers to the end of the given string.",
        "code": "\nfunc move_num(test_str: String) -> String {\n\tvar nums []int\n\tfor i := 0; i < len(test_str); i++ {\n\t\tnums = append(nums, test_str[i])\n\t}\n\treturn strings.Join(nums, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(move_num(test_str: \"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")",
            "assert(move_num(test_str: \"Avengers124Assemble\") == \"AvengersAssemble124\")",
            "assert(move_num(test_str: \"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")"
        ]
    },
    {
        "task_id": "61",
        "title": "count_Substrings",
        "text": "/ Write a swiftthon function to count the number of substrings with the sum of digits equal to their length.",
        "code": "\nfunc count_Substrings(s: String) -> Int {\n\tvar count int\n\tfor _, c := range s {\n\t\tif c >= '0' && c <= '9' {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(count_Substrings(s: \"112112\") == 6)",
            "assert(count_Substrings(s: \"111\") == 6)",
            "assert(count_Substrings(s: \"1101112\") == 12)"
        ]
    },
    {
        "task_id": "622",
        "title": "get_median",
        "text": "/ Write a function to find the median of two sorted arrays of same size.",
        "code": "\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n\tif len(arr1) < len(arr2) {\n\t\treturn 0.0\n\t}\n\tif len(arr1) == len(arr2) {\n\t\treturn arr1[n/2]\n\t}\n\treturn get_median(arr1[:n/2], arr2[:n/2], n/2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)",
            "assert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)",
            "assert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)"
        ]
    },
    {
        "task_id": "623",
        "title": "nth_nums",
        "text": "/ Write a function to compute the n-th power of each number in an array.",
        "code": "\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n\tif n == 0 {\n\t\treturn nums\n\t}\n\tvar res [Int] = nums\n\tfor i := 0; i < n; i++ {\n\t\tres[i] = res[i] * res[i]\n\t}\n\treturn res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])",
            "assert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])",
            "assert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])"
        ]
    },
    {
        "task_id": "624",
        "title": "is_upper",
        "text": "/ Write a swiftthon function to convert a given string to uppercase.",
        "code": "\nfunc is_upper(string: String) -> String {\n\treturn string.ToUpper()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(is_upper(string: \"person\") == \"PERSON\")",
            "assert(is_upper(string: \"final\") == \"FINAL\")",
            "assert(is_upper(string: \"Valid\") == \"VALID\")"
        ]
    },
    {
        "task_id": "625",
        "title": "swap_List",
        "text": "/ Write a swiftthon function to interchange the first and last element in a given array.",
        "code": "\nfunc swap_List(newList: [Int]) -> [Int] {\n\tnewList = newList[:len(newList)-1]\n\tnewList[len(newList)-1] = newList[len(newList)-2]\n\tnewList[len(newList)-2] = newList[len(newList)-1]\n\treturn newList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(swap_List(newList: [1, 2, 3]) == [3, 2, 1])",
            "assert(swap_List(newList: [1, 2, 3, 4, 4]) == [4, 2, 3, 4, 1])",
            "assert(swap_List(newList: [4, 5, 6]) == [6, 5, 4])"
        ]
    },
    {
        "task_id": "626",
        "title": "triangle_area",
        "text": "/ Write a swiftthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.",
        "code": "\nfunc triangle_area(r: Int) -> Int? {\n\tif r.IsZero() {\n\t\treturn r\n\t}\n\tif r.IsNegative() {\n\t\treturn r.Neg()\n\t}\n\tif r.IsZero() {\n\t\treturn r\n\t}\n\tif r.IsOne() {\n\t\treturn r\n\t}\n\tif r.IsNegative() {\n\t\treturn r.Neg()\n\t}\n\tif r.IsOne() {\n\t\treturn r\n\t}\n\tif r.IsNegative() {\n\t\treturn r.Neg()\n\t}\n\tif r.IsZero() {\n\t\treturn r\n\t}\n\tif r.IsOne() {\n\t\treturn r\n\t}\n\tif r.IsNegative() {\n\t\treturn r.Neg()\n\t}\n\tif r.IsOne() {\n\t\treturn r\n\t}\n\tif r.IsNegative() {\n\t\treturn r.Neg()\n\t}\n\tif r.IsZero() {\n\t\treturn r\n\t}\n\tif r.IsOne() {\n\t\treturn r\n\t}\n\tif r.IsNegative() {\n\t\treturn r.Neg()\n\t}\n\tif r.IsOne() {\n\t\treturn r\n\t}\n\tif r.IsNegative() {\n\t\treturn r.Neg()\n\t}\n\tif r.IsZero() {\n\t\treturn r\n\t}\n\tif r.IsOne() {\n\t\treturn r\n\t}\n\tif r.IsNegative() {\n\t\treturn r.Neg()\n\t}\n\tif r.IsOne() {\n\t\treturn r\n\t}\n\tif r.IsNegative() {\n\t\treturn r.Neg()\n\t}\n\tif r.IsZero() {\n\t\treturn r\n\t}\n\tif r.IsOne() {\n\t\treturn r\n\t}\n\tif r.IsNegative() {\n\t\treturn r.Neg()\n\t}\n\tif r.IsOne() {\n\t\treturn r\n\t}\n\tif r.IsNegative() {\n\t\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(triangle_area(r: -1) == nil)",
            "assert(triangle_area(r: 0) == 0)",
            "assert(triangle_area(r: 2) == 4)"
        ]
    },
    {
        "task_id": "627",
        "title": "find_First_Missing",
        "text": "/ Write a swiftthon function to find the smallest missing number from a sorted array of natural numbers.",
        "code": "\nfunc find_First_Missing(array: [Int]) -> Int {\n\tvar index int\n\tvar smallest int\n\tvar smallest_index int\n\tvar smallest_value int\n\tvar largest int\n\tvar largest_index int\n\tvar largest_value int\n\tfor i := 0; i < len(array); i++ {\n\t\tif array[i] < smallest {\n\t\t\tsmallest = array[i]\n\t\t\tsmallest_index = i\n\t\t}\n\t\tif array[i] > largest {\n\t\t\tlargest = array[i]\n\t\t\tlargest_index = i\n\t\t}\n\t\tif array[i] == smallest {\n\t\t\tsmallest_value = array[i]\n\t\t\tsmallest_index = i\n\t\t}\n\t\tif array[i] == largest {\n\t\t\tlargest_value = array[i]\n\t\t\tlargest_index = i\n\t\t}\n\t}\n\treturn smallest_value\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(find_First_Missing(array: [0, 1, 2, 3]) == 4)",
            "assert(find_First_Missing(array: [0, 1, 2, 6, 9]) == 3)",
            "assert(find_First_Missing(array: [2, 3, 5, 8, 9]) == 0)"
        ]
    },
    {
        "task_id": "628",
        "title": "replace_spaces",
        "text": "/ Write a function to replace all spaces in the given string with '%20'.",
        "code": "\nfunc replace_spaces(string: String) -> String {\n\treturn string.ReplaceAll(\n\t\tstrings.Replace(string, \" \", \"%20\", -1),\n\t\tstrings.Replace(string, \"%20\", \" \", -1),\n\t)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(replace_spaces(string: \"My Name is Dawood\") == \"My%20Name%20is%20Dawood\")",
            "assert(replace_spaces(string: \"I am a Programmer\") == \"I%20am%20a%20Programmer\")",
            "assert(replace_spaces(string: \"I love Coding\") == \"I%20love%20Coding\")"
        ]
    },
    {
        "task_id": "629",
        "title": "Split",
        "text": "/ Write a swiftthon function to find even numbers from an array of numbers.",
        "code": "\nfunc Split(list: [Int]) -> [Int] {\n\tvar result [Int]\n\tfor i := 0; i < len(list); i++ {\n\t\tif list[i] == 0 {\n\t\t\tresult = append(result, i)\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])",
            "assert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])",
            "assert(Split(list: [8, 12, 15, 19]) == [8, 12])"
        ]
    },
    {
        "task_id": "62",
        "title": "smallest_num",
        "text": "/ Write a swiftthon function to find smallest number in an array.",
        "code": "\nfunc smallest_num(xs: [Int]) -> Int {\n\tvar smallest int\n\tfor i := 0; i < len(xs); i++ {\n\t\tif xs[i] < smallest {\n\t\t\tsmallest = xs[i]\n\t\t}\n\t}\n\treturn smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(smallest_num(xs: [10, 20, 1, 45, 99]) == 1)",
            "assert(smallest_num(xs: [1, 2, 3]) == 1)",
            "assert(smallest_num(xs: [45, 46, 50, 60]) == 45)"
        ]
    },
    {
        "task_id": "630",
        "title": "get_coordinates",
        "text": "/ Write a function to extract all the adjacent coordinates of the given coordinate tuple.",
        "code": "\nfunc get_coordinates(test_tup: (Int, Int)) -> [[Int]] {\n\tcoordinates := make([][]Int, len(test_tup))\n\tfor i, coord := range test_tup {\n\t\tcoordinates[i] = []Int{coord}\n\t}\n\treturn coordinates\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(get_coordinates(test_tup: (3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]])",
            "assert(get_coordinates(test_tup: (4, 5)) == [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]])",
            "assert(get_coordinates(test_tup: (5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]])"
        ]
    },
    {
        "task_id": "631",
        "title": "replace_spaces",
        "text": "/ Write a function to replace whitespaces with an underscore and vice versa in a given string.",
        "code": "\nfunc replace_spaces(text: String) -> String {\n\treturn strings.Replace(text, \" \", \"_\", -1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(replace_spaces(text: \"Jumanji The Jungle\") == \"Jumanji_The_Jungle\")",
            "assert(replace_spaces(text: \"The_Avengers\") == \"The Avengers\")",
            "assert(replace_spaces(text: \"Fast and Furious\") == \"Fast_and_Furious\")"
        ]
    },
    {
        "task_id": "632",
        "title": "move_zero",
        "text": "/ Write a swiftthon function to move all zeroes to the end of the given array.",
        "code": "\nfunc move_zero(num_list: [Int]) -> [Int] {\n\tvar num_array [Int]\n\tfor i := 0; i < len(num_list); i++ {\n\t\tif num_list[i] == 0 {\n\t\t\tnum_array[i] = num_list[i]\n\t\t}\n\t}\n\treturn num_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])",
            "assert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])",
            "assert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])"
        ]
    },
    {
        "task_id": "633",
        "title": "pair_xor_Sum",
        "text": "/ Write a swiftthon function to find the sum of xor of all pairs of numbers in the given array.",
        "code": "\nfunc pair_xor_Sum(arr: [Int], n: Int) -> Int {\n\tvar sum Int\n\tfor i := 0; i < n; i++ {\n\t\tsum += arr[i]\n\t}\n\treturn sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(pair_xor_Sum(arr: [5, 9, 7, 6], n: 4) == 47)",
            "assert(pair_xor_Sum(arr: [7, 3, 5], n: 3) == 12)",
            "assert(pair_xor_Sum(arr: [7, 3], n: 2) == 4)"
        ]
    },
    {
        "task_id": "635",
        "title": "heap_sort",
        "text": "/ Write a function to sort the given array.",
        "code": "\nfunc heap_sort(iterable: [Int]) -> [Int] {\n\tvar heap [Int]\n\tfor i := 0; i < len(iterable); i++ {\n\t\theap[i] = iterable[i]\n\t}\n\tfor i := len(heap) - 1; i >= 0; i-- {\n\t\tj := i + 1\n\t\tfor j < len(heap) {\n\t\t\tif heap[i] > heap[j] {\n\t\t\t\tswap(heap[i], heap[j])\n\t\t\t\ti++\n\t\t\t\tj++\n\t\t\t} else {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif i < j {\n\t\t\tswap(heap[i], heap[j])\n\t\t}\n\t}\n\treturn heap\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(heap_sort(iterable: [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
            "assert(heap_sort(iterable: [25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])",
            "assert(heap_sort(iterable: [7, 1, 9, 5]) == [1, 5, 7, 9])"
        ]
    },
    {
        "task_id": "637",
        "title": "noprofit_noloss",
        "text": "/ Write a function to check whether the given amount has no profit and no loss",
        "code": "\nfunc noprofit_noloss(actual_cost: Int, sale_amount: Int) -> Bool {\n\tif actual_cost == 0 {\n\t\treturn true\n\t}\n\tif actual_cost == sale_amount {\n\t\treturn false\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(noprofit_noloss(actual_cost: 1500, sale_amount: 1200) == false)",
            "assert(noprofit_noloss(actual_cost: 100, sale_amount: 100) == true)",
            "assert(noprofit_noloss(actual_cost: 2000, sale_amount: 5000) == false)"
        ]
    },
    {
        "task_id": "638",
        "title": "wind_chill",
        "text": "/ Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.",
        "code": "\nfunc wind_chill(v: Int, t: Int) -> Int {\n\treturn v + wind_chill_offset(v, t)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(wind_chill(v: 120, t: 35) == 40)",
            "assert(wind_chill(v: 40, t: 20) == 19)",
            "assert(wind_chill(v: 10, t: 8) == 6)"
        ]
    },
    {
        "task_id": "639",
        "title": "sample_nam",
        "text": "/ Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.",
        "code": "\nfunc sample_nam(sample_names: [String]) -> Int {\n\tvar sum int\n\tfor _, name := range sample_names {\n\t\tif name[0] == 'a' {\n\t\t\tsum += len(name)\n\t\t}\n\t}\n\treturn sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(sample_nam(sample_names: [\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16)",
            "assert(sample_nam(sample_names: [\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10)",
            "assert(sample_nam(sample_names: [\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6)"
        ]
    },
    {
        "task_id": "63",
        "title": "max_difference",
        "text": "/ Write a function to find the maximum difference between available pairs in the given tuple array.",
        "code": "\nfunc max_difference(test_list: [(Int, Int)]) -> Int {\n\tmax_difference_count := 0\n\tfor _, test_pair := range test_list {\n\t\tif test_pair[0] > test_pair[1] {\n\t\t\tmax_difference_count++\n\t\t}\n\t}\n\treturn max_difference_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(max_difference(test_list: [(3, 5), (1, 7), (10, 3), (1, 2)]) == 7)",
            "assert(max_difference(test_list: [(4, 6), (2, 17), (9, 13), (11, 12)]) == 15)",
            "assert(max_difference(test_list: [(12, 35), (21, 27), (13, 23), (41, 22)]) == 23)"
        ]
    },
    {
        "task_id": "640",
        "title": "remove_parenthesis",
        "text": "/ Write a function to remove the parenthesis and what is inbetween them from a string.",
        "code": "\nfunc remove_parenthesis(items: [String]) -> String {\n\tvar result String\n\tfor _, item := range items {\n\t\tif item == \"(\" {\n\t\t\tresult += \"(\"\n\t\t} else if item == \")\" {\n\t\t\tresult += \")\"\n\t\t} else {\n\t\t\tresult += item\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(remove_parenthesis(items: [\"python (chrome)\"]) == \"python\")",
            "assert(remove_parenthesis(items: [\"string(.abc)\"]) == \"string\")",
            "assert(remove_parenthesis(items: [\"alpha(num)\"]) == \"alpha\")"
        ]
    },
    {
        "task_id": "641",
        "title": "is_nonagonal",
        "text": "/ Write a function to find the nth nonagonal number.",
        "code": "\nfunc is_nonagonal(n: Int) -> Int {\n\tif n == 0 {\n\t\treturn 0\n\t}\n\tif n == 1 {\n\t\treturn 1\n\t}\n\treturn n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(is_nonagonal(n: 10) == 325)",
            "assert(is_nonagonal(n: 15) == 750)",
            "assert(is_nonagonal(n: 18) == 1089)"
        ]
    },
    {
        "task_id": "643",
        "title": "text_match_wordz_middle",
        "text": "/ Write a function that checks if a strings contains 'z', except at the start and end of the word.",
        "code": "\nfunc text_match_wordz_middle(text: String) -> Bool {\n\treturn text.MatchWord(strings.TrimSpace(strings.TrimPrefix(text.String(), \"z\")))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(text_match_wordz_middle(text: \"pythonzabc.\") == true)",
            "assert(text_match_wordz_middle(text: \"zxyabc.\") == false)",
            "assert(text_match_wordz_middle(text: \"  lang  .\") == false)"
        ]
    },
    {
        "task_id": "644",
        "title": "reverse_Array_Upto_K",
        "text": "/ Write a swiftthon function to reverse an array upto a given position.",
        "code": "\nfunc reverse_Array_Upto_K(input: [Int], k: Int) -> [Int] {\n\toutput := make([][]Int, k)\n\tfor i := 0; i < k; i++ {\n\t\toutput[i] = make([]Int, len(input))\n\t}\n\tfor i := 0; i < k; i++ {\n\t\toutput[i][k-i-1] = input[i]\n\t}\n\treturn output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(reverse_Array_Upto_K(input: [1, 2, 3, 4, 5, 6], k: 4) == [4, 3, 2, 1, 5, 6])",
            "assert(reverse_Array_Upto_K(input: [4, 5, 6, 7], k: 2) == [5, 4, 6, 7])",
            "assert(reverse_Array_Upto_K(input: [9, 8, 7, 6, 5], k: 3) == [7, 8, 9, 6, 5])"
        ]
    },
    {
        "task_id": "64",
        "title": "subject_marks",
        "text": "/ Write a function to sort an array of tuples using the second value of each tuple.",
        "code": "\nfunc subject_marks(subjectmarks: [(String, Int)]) -> [(String, Int)] {\n\tsubjectmarks = sort(subjectmarks)\n\treturn subjectmarks\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(subject_marks(subjectmarks: [(\"English\", 88), (\"Science\", 90), (\"Maths\", 97), (\"Social sciences\", 82)]) == [(\"Social sciences\", 82), (\"English\", 88), (\"Science\", 90), (\"Maths\", 97)])",
            "assert(subject_marks(subjectmarks: [(\"Telugu\", 49), (\"Hindhi\", 54), (\"Social\", 33)]) == [(\"Social\", 33), (\"Telugu\", 49), (\"Hindhi\", 54)])",
            "assert(subject_marks(subjectmarks: [(\"Physics\", 96), (\"Chemistry\", 97), (\"Biology\", 45)]) == [(\"Biology\", 45), (\"Physics\", 96), (\"Chemistry\", 97)])"
        ]
    },
    {
        "task_id": "65",
        "title": "recursive_list_sum",
        "text": "/ Write a function to flatten an array and sum all of its elements.",
        "code": "\nextension [Int]: Error {}\n        \nfunc recursive_list_sum(data_list: [Result<Int, [Int]>]) -> Int {\n    var sum = 0\n    for _, element := range data_list {\n        sum += element\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(recursive_list_sum(data_list: [.success(1), .success(2), .failure([3, 4]), .failure([5, 6])]) == 21)",
            "assert(recursive_list_sum(data_list: [.success(7), .success(10), .failure([15, 14]), .failure([19, 41])]) == 106)",
            "assert(recursive_list_sum(data_list: [.success(10), .success(20), .failure([30, 40]), .failure([50, 60])]) == 210)"
        ]
    },
    {
        "task_id": "66",
        "title": "pos_count",
        "text": "/ Write a swiftthon function to count the number of positive numbers in an array.",
        "code": "\nfunc pos_count(list: [Int]) -> Int {\n\tvar count int\n\tfor _, v := range list {\n\t\tif v > 0 {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(pos_count(list: [1, -2, 3, -4]) == 2)",
            "assert(pos_count(list: [3, 4, 5, -1]) == 3)",
            "assert(pos_count(list: [1, 2, 3, 4]) == 4)"
        ]
    },
    {
        "task_id": "67",
        "title": "bell_number",
        "text": "/ Write a function to find the number of ways to partition a set of Bell numbers.",
        "code": "\nfunc bell_number(n: Int) -> Int {\n\tif n == 0 {\n\t\treturn 1\n\t}\n\treturn bell_number(n.Sub(n))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(bell_number(n: 2) == 2)",
            "assert(bell_number(n: 10) == 115975)",
            "assert(bell_number(n: 56) == 6775685320645824322581483068371419745979053216268760300)"
        ]
    },
    {
        "task_id": "68",
        "title": "is_Monotonic",
        "text": "/ Write a swiftthon function to check whether the given array is monotonic or not.",
        "code": "\nfunc is_Monotonic(A: [Int]) -> Bool {\n\tif len(A) == 0 {\n\t\treturn false\n\t}\n\tvar x Int\n\tfor i := 0; i < len(A); i++ {\n\t\tx = A[i]\n\t\tif x < 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(is_Monotonic(A: [6, 5, 4, 4]) == true)",
            "assert(is_Monotonic(A: [1, 2, 2, 3]) == true)",
            "assert(is_Monotonic(A: [1, 3, 2]) == false)"
        ]
    },
    {
        "task_id": "69",
        "title": "is_sublist",
        "text": "/ Write a function to check whether an array contains the given subarray or not.",
        "code": "\nfunc is_sublist(l: [Int], s: [Int]) -> Bool {\n\tfor i := 0; i < len(l); i++ {\n\t\tif l[i] == s[i] {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(is_sublist(l: [2, 4, 3, 5, 7], s: [3, 7]) == false)",
            "assert(is_sublist(l: [2, 4, 3, 5, 7], s: [4, 3]) == true)",
            "assert(is_sublist(l: [2, 4, 3, 5, 7], s: [1, 6]) == false)"
        ]
    },
    {
        "task_id": "6",
        "title": "differ_At_One_Bit_Pos",
        "text": "/ Write a swiftthon function to check whether the two numbers differ at one bit position only or not.",
        "code": "\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n\tif a == b {\n\t\treturn true\n\t}\n\tif a == 0 {\n\t\treturn false\n\t}\n\tif b == 0 {\n\t\treturn false\n\t}\n\tif a == 1 {\n\t\treturn false\n\t}\n\tif b == 1 {\n\t\treturn false\n\t}\n\tif a == -1 {\n\t\treturn false\n\t}\n\tif b == -1 {\n\t\treturn false\n\t}\n\tif a == a {\n\t\treturn false\n\t}\n\tif b == b {\n\t\treturn false\n\t}\n\tif a == a {\n\t\treturn false\n\t}\n\tif a == b {\n\t\treturn false\n\t}\n\tif a == 0 {\n\t\treturn false\n\t}\n\tif b == 0 {\n\t\treturn false\n\t}\n\tif a == 1 {\n\t\treturn false\n\t}\n\tif b == 1 {\n\t\treturn false\n\t}\n\tif a == -1 {\n\t\treturn false\n\t}\n\tif b == -1 {\n\t\treturn false\n\t}\n\tif a == a {\n\t\treturn false\n\t}\n\tif b == b {\n\t\treturn false\n\t}\n\tif a == 0 {\n\t\treturn false\n\t}\n\tif b == 0 {\n\t\treturn false\n\t}\n\tif a == 1 {\n\t\treturn false\n\t}\n\tif b == 1 {\n\t\treturn false\n\t}\n\tif a == -1 {\n\t\treturn false\n\t}\n\tif b == -1 {\n\t\treturn false\n\t}\n\tif a == a {\n\t\treturn false\n\t}\n\tif b == b {\n\t\treturn false\n\t}\n\tif a == 0 {\n\t\treturn false\n\t}\n\tif b == 0 {\n\t\treturn false\n\t}\n\tif a == 1 {\n\t\treturn false\n\t}\n\tif b == 1 {\n\t\treturn false\n\t}\n\tif a == -1 {\n\t\treturn false\n\t}\n\tif b == -1 {\n\t\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)",
            "assert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)",
            "assert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)",
            "assert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)",
            "assert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)",
            "assert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)"
        ]
    },
    {
        "task_id": "70",
        "title": "get_equal",
        "text": "/ Write a function to find whether all the given arrays have equal length or not.",
        "code": "\nfunc get_equal(Input: [[Int]]) -> Bool {\n\tvar output Bool\n\tfor _, i := range Input {\n\t\tif len(i)!= len(i) {\n\t\t\toutput = false\n\t\t\tbreak\n\t\t}\n\t}\n\treturn output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(get_equal(Input: [[11, 22, 33], [44, 55, 66]]) == true)",
            "assert(get_equal(Input: [[1, 2, 3], [4, 5, 6, 7]]) == false)",
            "assert(get_equal(Input: [[1, 2], [3, 4]]) == true)"
        ]
    },
    {
        "task_id": "71",
        "title": "comb_sort",
        "text": "/ Write a function to sort an array of elements.",
        "code": "\nfunc comb_sort(nums: [Int]) -> [Int] {\n\tvar result [Int] = make([]Int, len(nums))\n\tfor i := 0; i < len(nums); i++ {\n\t\tresult[i] = nums[i]\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])",
            "assert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])",
            "assert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])"
        ]
    },
    {
        "task_id": "720",
        "title": "add_dict_to_tuple",
        "text": "/ Write a function to add a dictionary to the tuple. The output should be a tuple.",
        "code": "\nfunc add_dict_to_tuple(test_tup: (Int, Int, Int), test_dict: [String : Int]) -> (Int, Int, Int, [String : Int]) {\n\ttuple := make(Int, len(test_dict))\n\tfor i, key := range test_dict {\n\t\ttuple[i] = test_tup[key]\n\t}\n\treturn tuple, tuple, tuple, test_dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(add_dict_to_tuple(test_tup: (4, 5, 6), test_dict: [\"MSAM\" : 1, \"is\" : 2, \"best\" : 3]) == (4, 5, 6, [\"MSAM\" : 1, \"is\" : 2, \"best\" : 3]))",
            "assert(add_dict_to_tuple(test_tup: (1, 2, 3), test_dict: [\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4]) == (1, 2, 3, [\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4]))",
            "assert(add_dict_to_tuple(test_tup: (8, 9, 10), test_dict: [\"POS\" : 3, \"is\" : 4, \"Okay\" : 5]) == (8, 9, 10, [\"POS\" : 3, \"is\" : 4, \"Okay\" : 5]))"
        ]
    },
    {
        "task_id": "721",
        "title": "maxAverageOfPath",
        "text": "/ Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.",
        "code": "\nfunc maxAverageOfPath(cost: [[Int]]) -> Double {\n\tvar maxAverage Double\n\tvar maxIndex int\n\tvar maxCost int\n\tvar maxCostIndex int\n\tvar maxCostCost int\n\tvar maxCostIndexCost int\n\tvar maxCostCostIndex int\n\tvar maxCostCostIndexCost int\n\tvar maxCostCostIndexCost int\n\tvar maxCostCostIndexCostInt int\n\tvar maxCostCostIndexCostInt int\n\tvar maxCostCostIndexCostIntInt int\n\tvar maxCostCostIndexCostIntIntInt int\n\tvar maxCostCostIndexCostIntIntIntInt int\n\tvar maxCostCostIndexCostIntIntIntIntInt int\n\tvar maxCostCostIndexCostIntIntIntIntIntIntInt int\n\tvar maxCostCostIndexCostIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(maxAverageOfPath(cost: [[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)",
            "assert(maxAverageOfPath(cost: [[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)",
            "assert(maxAverageOfPath(cost: [[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)",
            "assert(maxAverageOfPath(cost: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)"
        ]
    },
    {
        "task_id": "722",
        "title": "filter_data",
        "text": "/ The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.",
        "code": "\nfunc filter_data(students: [String : (Double, Int)], h: Double, w: Int) -> [String : (Double, Int)] {\n\tvar students_to_filter []String\n\tfor student_name, student_height, student_weight := students[0]; student_height > h; student_height, student_weight = student_weight, student_height {\n\t\tstudents_to_filter = append(students_to_filter, student_name)\n\t}\n\tfor student_name, student_height, student_weight := students[1]; student_height > w; student_height, student_weight = student_weight, student_height {\n\t\tstudents_to_filter = append(students_to_filter, student_name)\n\t}\n\treturn students_to_filter\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(filter_data(students: [\"Cierra Vega\" : (6.2, 70), \"Alden Cantrell\" : (5.9, 65), \"Kierra Gentry\" : (6.0, 68), \"Pierre Cox\" : (5.8, 66)], h: 6.0, w: 70) == [\"Cierra Vega\" : (6.2, 70)])",
            "assert(filter_data(students: [\"Cierra Vega\" : (6.2, 70), \"Alden Cantrell\" : (5.9, 65), \"Kierra Gentry\" : (6.0, 68), \"Pierre Cox\" : (5.8, 66)], h: 5.9, w: 67) == [\"Cierra Vega\" : (6.2, 70), \"Kierra Gentry\" : (6.0, 68)])",
            "assert(filter_data(students: [\"Cierra Vega\" : (6.2, 70), \"Alden Cantrell\" : (5.9, 65), \"Kierra Gentry\" : (6.0, 68), \"Pierre Cox\" : (5.8, 66)], h: 5.7, w: 64) == [\"Cierra Vega\" : (6.2, 70), \"Alden Cantrell\" : (5.9, 65), \"Kierra Gentry\" : (6.0, 68), \"Pierre Cox\" : (5.8, 66)])"
        ]
    },
    {
        "task_id": "723",
        "title": "count_same_pair",
        "text": "/ The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.",
        "code": "\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n\tvar count = 0\n\tfor i := 0; i < len(nums1); i++ {\n\t\tif nums1[i] == nums2[i] {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)",
            "assert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)",
            "assert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)",
            "assert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)"
        ]
    },
    {
        "task_id": "724",
        "title": "power_base_sum",
        "text": "/ Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.",
        "code": "\nfunc power_base_sum(base: Int, power: Int) -> Int {\n\tsum := 0\n\tfor i := 0; i < power; i++ {\n\t\tsum += base\n\t}\n\treturn sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(power_base_sum(base: 2, power: 100) == 115)",
            "assert(power_base_sum(base: 8, power: 10) == 37)",
            "assert(power_base_sum(base: 8, power: 15) == 62)",
            "assert(power_base_sum(base: 3, power: 3) == 9)"
        ]
    },
    {
        "task_id": "725",
        "title": "extract_quotation",
        "text": "/ Write a function to extract values between quotation marks \" \" of the given string.",
        "code": "\nfunc extract_quotation(text1: String) -> [AnyHashable] {\n\tvar result [AnyHashable]\n\tvar i int\n\tfor i = 0; i < len(text1); i++ {\n\t\tif text1[i] == '\"' {\n\t\t\tresult = append(result, AnyHashable{})\n\t\t} else {\n\t\t\tresult = append(result, AnyHashable{text1[i]})\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(extract_quotation(text1: \"Cortex \\\"A53\\\" Based \\\"multi\\\" tasking \\\"Processor\\\"\") == [\"A53\", \"multi\", \"Processor\"])",
            "assert(extract_quotation(text1: \"Cast your \\\"favorite\\\" entertainment \\\"apps\\\"\") == [\"favorite\", \"apps\"])",
            "assert(extract_quotation(text1: \"Watch content \\\"4k Ultra HD\\\" resolution with \\\"HDR 10\\\" Support\") == [\"4k Ultra HD\", \"HDR 10\"])",
            "assert(extract_quotation(text1: \"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") == [] as [AnyHashable])"
        ]
    },
    {
        "task_id": "726",
        "title": "multiply_elements",
        "text": "/ Write a function that takes as input an array of numbers (t_1,...,t_{N+1}) and returns an array of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.",
        "code": "\nfunc multiply_elements(test_tup: [Int]) -> [AnyHashable] {\n\tvar test_tuple_array [][]Int\n\tfor i := 0; i < len(test_tup); i++ {\n\t\ttest_tuple_array = append(test_tuple_array, test_tup[i])\n\t}\n\treturn multiply_elements_array(test_tuple_array)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(multiply_elements(test_tup: [1, 5, 7, 8, 10]) == [5, 35, 56, 80])",
            "assert(multiply_elements(test_tup: [2, 4, 5, 6, 7]) == [8, 20, 30, 42])",
            "assert(multiply_elements(test_tup: [12, 13, 14, 9, 15]) == [156, 182, 126, 135])",
            "assert(multiply_elements(test_tup: [12]) == [] as [AnyHashable])"
        ]
    },
    {
        "task_id": "728",
        "title": "sum_list",
        "text": "/ Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].",
        "code": "\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n\tvar sum [Int]\n\tfor i := 0; i < len(lst1); i++ {\n\t\tsum[lst1[i]] = sum[lst1[i]] + lst2[i]\n\t}\n\treturn sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])",
            "assert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])",
            "assert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])"
        ]
    },
    {
        "task_id": "72",
        "title": "dif_Square",
        "text": "/ Write a swiftthon function to check whether the given number can be represented as the difference of two squares or not.",
        "code": "\nfunc dif_Square(n: Int) -> Bool {\n\tif n.IsZero() {\n\t\treturn Bool(false)\n\t}\n\tif n.IsOne() {\n\t\treturn Bool(true)\n\t}\n\tif n.IsNegative() {\n\t\treturn Bool(true)\n\t}\n\tif n.IsPositive() {\n\t\treturn Bool(true)\n\t}\n\treturn Bool(false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(dif_Square(n: 5) == true)",
            "assert(dif_Square(n: 10) == false)",
            "assert(dif_Square(n: 15) == true)"
        ]
    },
    {
        "task_id": "730",
        "title": "consecutive_duplicates",
        "text": "/ Write a function to remove consecutive duplicates of a given array.",
        "code": "\nfunc consecutive_duplicates(nums: [AnyHashable]) -> [AnyHashable] {\n\tvar result [AnyHashable] = make([]AnyHashable, len(nums))\n\tfor i := range result {\n\t\tresult[i] = nums[i]\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(consecutive_duplicates(nums: [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4])",
            "assert(consecutive_duplicates(nums: [10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [10, 15, 19, 18, 17, 26, 17, 18, 10])",
            "assert(consecutive_duplicates(nums: [\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [\"a\", \"b\", \"c\", \"d\"])",
            "assert(consecutive_duplicates(nums: [\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]) == [\"a\", \"b\", \"c\", \"d\", \"a\"])"
        ]
    },
    {
        "task_id": "731",
        "title": "lateralsurface_cone",
        "text": "/ Write a function to find the lateral surface area of a cone given radius r and the height h.",
        "code": "\nfunc lateralsurface_cone(r: Int, h: Int) -> Double {\n\treturn r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(lateralsurface_cone(r: 5, h: 12) == 204.20352248333654)",
            "assert(lateralsurface_cone(r: 10, h: 15) == 566.3586699569488)",
            "assert(lateralsurface_cone(r: 19, h: 17) == 1521.8090132193388)"
        ]
    },
    {
        "task_id": "732",
        "title": "replace_specialchar",
        "text": "/ Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
        "code": "\nfunc replace_specialchar(text: String) -> String {\n\treturn replace_specialchar_with_colon(text, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(replace_specialchar(text: \"Python language, Programming language.\") == \"Python:language::Programming:language:\")",
            "assert(replace_specialchar(text: \"a b c,d e f\") == \"a:b:c:d:e:f\")",
            "assert(replace_specialchar(text: \"ram reshma,ram rahim\") == \"ram:reshma:ram:rahim\")"
        ]
    },
    {
        "task_id": "733",
        "title": "find_first_occurrence",
        "text": "/ Write a function to find the index of the first occurrence of a given number in a sorted array.",
        "code": "\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n\tif len(A) == 0 {\n\t\treturn 0\n\t}\n\tif x == 0 {\n\t\treturn A[0]\n\t}\n\tfor i := 1; i < len(A); i++ {\n\t\tif A[i] == x {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)",
            "assert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)",
            "assert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)"
        ]
    },
    {
        "task_id": "734",
        "title": "sum_Of_Subarray_Prod",
        "text": "/ Write a swiftthon function to find sum of products of all possible subarrays of a given array. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/",
        "code": "\nfunc sum_Of_Subarray_Prod(arr: [Int]) -> Int {\n\tvar sum int\n\tfor _, v := range arr {\n\t\tsum += v\n\t}\n\treturn sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(sum_Of_Subarray_Prod(arr: [1, 2, 3]) == 20)",
            "assert(sum_Of_Subarray_Prod(arr: [1, 2]) == 5)",
            "assert(sum_Of_Subarray_Prod(arr: [1, 2, 3, 4]) == 84)"
        ]
    },
    {
        "task_id": "735",
        "title": "toggle_middle_bits",
        "text": "/ Write a swiftthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/",
        "code": "\nfunc toggle_middle_bits(n: Int) -> Int {\n\tvar first, last, middle int\n\tfor i := 0; i < n; i++ {\n\t\tif i == 0 {\n\t\t\tfirst = 1\n\t\t} else {\n\t\t\tfirst = 0\n\t\t}\n\t\tif i == n-1 {\n\t\t\tlast = 1\n\t\t} else {\n\t\t\tlast = 0\n\t\t}\n\t\tmiddle = first | last\n\t}\n\treturn middle\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(toggle_middle_bits(n: 9) == 15)",
            "assert(toggle_middle_bits(n: 10) == 12)",
            "assert(toggle_middle_bits(n: 11) == 13)",
            "assert(toggle_middle_bits(n: 65) == 127)",
            "assert(toggle_middle_bits(n: 77) == 115)"
        ]
    },
    {
        "task_id": "736",
        "title": "left_insertion",
        "text": "/ Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-data-structure-exercise-24.php",
        "code": "\nfunc left_insertion(a: [Int], x: Int) -> Int {\n\tif len(a) == 0 {\n\t\treturn 0\n\t}\n\tif x < a[0] {\n\t\treturn a[0]\n\t}\n\treturn a[len(a)-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)",
            "assert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)",
            "assert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)"
        ]
    },
    {
        "task_id": "737",
        "title": "check_str",
        "text": "/ Write a function to check whether the given string is starting with a vowel or not using regex.",
        "code": "\nfunc check_str(string: String) -> Bool {\n\tif string == \"\" {\n\t\treturn false\n\t}\n\tif string[0] == 'a' {\n\t\treturn true\n\t}\n\tif string[0] == 'e' {\n\t\treturn true\n\t}\n\tif string[0] == 'i' {\n\t\treturn true\n\t}\n\tif string[0] == 'o' {\n\t\treturn true\n\t}\n\tif string[0] == 'u' {\n\t\treturn true\n\t}\n\tif string[0] == 'y' {\n\t\treturn true\n\t}\n\tif string[0] == 'z' {\n\t\treturn true\n\t}\n\treturn false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(check_str(string: \"annie\") == true)",
            "assert(check_str(string: \"dawood\") == false)",
            "assert(check_str(string: \"Else\") == true)"
        ]
    },
    {
        "task_id": "738",
        "title": "geometric_sum",
        "text": "/ Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-recursion-exercise-9.php",
        "code": "\nfunc geometric_sum(n: Int) -> Double {\n\tif n == 0 {\n\t\treturn 0.0\n\t}\n\treturn math.Pow(n, 1.0 / n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(geometric_sum(n: 7) == 1.9921875)",
            "assert(geometric_sum(n: 4) == 1.9375)",
            "assert(geometric_sum(n: 8) == 1.99609375)"
        ]
    },
    {
        "task_id": "739",
        "title": "find_Index",
        "text": "/ Write a swiftthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/",
        "code": "\nfunc find_Index(n: Int) -> Int {\n\tif n == 0 {\n\t\treturn 0\n\t}\n\tif n == 1 {\n\t\treturn 1\n\t}\n\tif n == 2 {\n\t\treturn 2\n\t}\n\tif n == 3 {\n\t\treturn 3\n\t}\n\tif n == 4 {\n\t\treturn 4\n\t}\n\tif n == 5 {\n\t\treturn 5\n\t}\n\tif n == 6 {\n\t\treturn 6\n\t}\n\tif n == 7 {\n\t\treturn 7\n\t}\n\tif n == 8 {\n\t\treturn 8\n\t}\n\tif n == 9 {\n\t\treturn 9\n\t}\n\tif n == 10 {\n\t\treturn 10\n\t}\n\tif n == 11 {\n\t\treturn 11\n\t}\n\tif n == 12 {\n\t\treturn 12\n\t}\n\tif n == 13 {\n\t\treturn 13\n\t}\n\tif n == 14 {\n\t\treturn 14\n\t}\n\tif n == 15 {\n\t\treturn 15\n\t}\n\tif n == 16 {\n\t\treturn 16\n\t}\n\tif n == 17 {\n\t\treturn 17\n\t}\n\tif n == 18 {\n\t\treturn 18\n\t}\n\tif n == 19 {\n\t\treturn 19\n\t}\n\tif n == 20 {\n\t\treturn 20\n\t}\n\tif n == 21 {\n\t\treturn 21\n\t}\n\tif n == 22 {\n\t\treturn 22\n\t}\n\tif n == 23 {\n\t\treturn 23\n\t}\n\tif n == 24 {\n\t\treturn 24\n\t}\n\tif n == 25 {\n\t\treturn 25\n\t}\n\tif n == 26 {\n\t\treturn 26\n\t}\n\tif n == 27 {\n\t\treturn 27\n\t}\n\tif n == 28 {\n\t\treturn 28\n\t}\n\tif n == 29 {\n\t\treturn 29\n\t}\n\tif n == 30 {\n\t\treturn 30\n\t}\n\tif n == 31 {\n\t\treturn 31\n\t}\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(find_Index(n: 2) == 4)",
            "assert(find_Index(n: 3) == 14)",
            "assert(find_Index(n: 4) == 45)"
        ]
    },
    {
        "task_id": "740",
        "title": "tuple_to_dict",
        "text": "/ Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/swiftthon-convert-tuple-to-adjacent-pair-dictionary/",
        "code": "\nfunc tuple_to_dict(test_tup: (Int, Int, Int, Int, Int, Int)) -> [Int : Int] {\n\tvar key_value_dict [][]Int\n\tfor i := 0; i < len(test_tup); i += 2 {\n\t\tkey_value_dict = append(key_value_dict, [Int]{test_tup[i], test_tup[i+1]})\n\t}\n\treturn key_value_dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(tuple_to_dict(test_tup: (1, 5, 7, 10, 13, 5)) == [1 : 5, 7 : 10, 13 : 5])",
            "assert(tuple_to_dict(test_tup: (1, 2, 3, 4, 5, 6)) == [1 : 2, 3 : 4, 5 : 6])",
            "assert(tuple_to_dict(test_tup: (7, 8, 9, 10, 11, 12)) == [7 : 8, 9 : 10, 11 : 12])"
        ]
    },
    {
        "task_id": "741",
        "title": "all_Characters_Same",
        "text": "/ Write a swiftthon function to check whether all the characters are same or not.",
        "code": "\nfunc all_Characters_Same(s: String) -> Bool {\n\tif s.length() == 0 {\n\t\treturn Bool(false)\n\t}\n\tfor i := 0; i < s.length(); i++ {\n\t\tif s.charAt(i)!= s.charAt(i+1) {\n\t\t\treturn Bool(false)\n\t\t}\n\t}\n\treturn Bool(true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(all_Characters_Same(s: \"python\") == false)",
            "assert(all_Characters_Same(s: \"aaa\") == true)",
            "assert(all_Characters_Same(s: \"data\") == false)"
        ]
    },
    {
        "task_id": "742",
        "title": "area_tetrahedron",
        "text": "/ Write a function to caluclate the area of a tetrahedron.",
        "code": "\nfunc area_tetrahedron(side: Int) -> Double {\n\tvar area = Double(0)\n\tfor i := 0; i < side; i++ {\n\t\tarea += Double(0)\n\t}\n\treturn area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(area_tetrahedron(side: 3) == 15.588457268119894)",
            "assert(area_tetrahedron(side: 20) == 692.8203230275509)",
            "assert(area_tetrahedron(side: 10) == 173.20508075688772)"
        ]
    },
    {
        "task_id": "743",
        "title": "rotate_right",
        "text": "/ Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/swiftthon-program-right-rotate-array-n/",
        "code": "\nfunc rotate_right(list: [Int], m: Int) -> [Int] {\n\tif len(list) == 0 {\n\t\treturn list\n\t}\n\tif m == 0 {\n\t\treturn list\n\t}\n\tif m > len(list) {\n\t\treturn list\n\t}\n\tif m < 0 {\n\t\treturn list\n\t}\n\tif m == 0 {\n\t\treturn list\n\t}\n\tif m == len(list) {\n\t\treturn list\n\t}\n\tif m == 1 {\n\t\treturn list\n\t}\n\tif m == 2 {\n\t\treturn list\n\t}\n\tif m == 3 {\n\t\treturn list\n\t}\n\tif m == 4 {\n\t\treturn list\n\t}\n\tif m == 5 {\n\t\treturn list\n\t}\n\tif m == 6 {\n\t\treturn list\n\t}\n\tif m == 7 {\n\t\treturn list\n\t}\n\tif m == 8 {\n\t\treturn list\n\t}\n\tif m == 9 {\n\t\treturn list\n\t}\n\tif m == 10 {\n\t\treturn list\n\t}\n\tif m == 11 {\n\t\treturn list\n\t}\n\tif m == 12 {\n\t\treturn list\n\t}\n\tif m == 13 {\n\t\treturn list\n\t}\n\tif m == 14 {\n\t\treturn list\n\t}\n\tif m == 15 {\n\t\treturn list\n\t}\n\tif m == 16 {\n\t\treturn list\n\t}\n\tif m == 17 {\n\t\treturn list\n\t}\n\tif m == 18 {\n\t\treturn list\n\t}\n\tif m == 19 {\n\t\treturn list\n\t}\n\tif m == 20 {\n\t\treturn list\n\t}\n\tif m == 21 {\n\t\treturn list\n\t}\n\tif m == 22 {\n\t\treturn list\n\t}\n\tif m == 23 {\n\t\treturn list\n\t}\n\tif m == 24 {\n\t\treturn list\n\t}\n\tif m == 25 {\n\t\treturn list\n\t}\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])",
            "assert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])",
            "assert(rotate_right(list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m: 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])"
        ]
    },
    {
        "task_id": "745",
        "title": "divisible_by_digits",
        "text": "/ Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/swiftthon-exercises/lambda/swiftthon-lambda-exercise-24.php",
        "code": "\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n\tvar result [Int] = make([]Int, endnum-startnum+1)\n\tfor i := startnum; i <= endnum; i++ {\n\t\tif i%10 == 0 {\n\t\t\tresult[i-startnum] = i\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])",
            "assert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])",
            "assert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])"
        ]
    },
    {
        "task_id": "746",
        "title": "sector_area",
        "text": "/ Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return nil if the angle is larger than 360 degrees.",
        "code": "\nfunc sector_area(r: Int, a: Int) -> Double? {\n\tif a > 360 {\n\t\treturn nil\n\t}\n\treturn func(r: Int, a: Int) -> Double? {\n\t\tif r > r_max {\n\t\t\treturn nil\n\t\t}\n\t\tif a > a_max {\n\t\t\treturn nil\n\t\t}\n\t\treturn r * r_max / r_max + a * a_max / a_max\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(sector_area(r: 4, a: 45) == 6.283185307179586)",
            "assert(sector_area(r: 9, a: 45) == 31.808625617596654)",
            "assert(sector_area(r: 9, a: 361) == nil)"
        ]
    },
    {
        "task_id": "747",
        "title": "lcs_of_three",
        "text": "/ Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/",
        "code": "\nfunc lcs_of_three(X: String, Y: String, Z: String) -> Int {\n\tif len(X) == 0 || len(Y) == 0 || len(Z) == 0 {\n\t\treturn 0\n\t}\n\tif len(X) == 1 && len(Y) == 1 && len(Z) == 1 {\n\t\treturn 1\n\t}\n\tif len(X) == 1 && len(Y) == 0 && len(Z) == 1 {\n\t\treturn 2\n\t}\n\tif len(X) == 0 && len(Y) == 1 && len(Z) == 0 {\n\t\treturn 3\n\t}\n\tif len(X) == 0 && len(Y) == 0 && len(Z) == 1 {\n\t\treturn 4\n\t}\n\tif len(X) == 1 && len(Y) == 0 && len(Z) == 0 {\n\t\treturn 5\n\t}\n\tif len(X) == 1 && len(Y) == 1 && len(Z) == 1 {\n\t\treturn 6\n\t}\n\tif len(X) == 0 && len(Y) == 1 && len(Z) == 0 {\n\t\treturn 7\n\t}\n\tif len(X) == 0 && len(Y) == 0 && len(Z) == 1 {\n\t\treturn 8\n\t}\n\tif len(X) == 1 && len(Y) == 1 && len(Z) == 0 {\n\t\treturn 9\n\t}\n\tif len(X) == 1 && len(Y) == 0 && len(Z) == 1 {\n\t\treturn 10\n\t}\n\tif len(X) == 0 && len(Y) == 1 && len(Z) == 0 {\n\t\treturn 11\n\t}\n\tif len(X) == 1 && len(Y) == 0 && len(Z) == 1 {\n\t\treturn 12\n\t}\n\tif len(X) == 0 && len(Y) == 1 && len(Z) == 0 {\n\t\treturn 13\n\t}\n\tif len(X) == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(lcs_of_three(X: \"AGGT12\", Y: \"12TXAYB\", Z: \"12XBA\") == 2)",
            "assert(lcs_of_three(X: \"Reels\", Y: \"Reelsfor\", Z: \"ReelsforReels\") == 5)",
            "assert(lcs_of_three(X: \"abcd1e2\", Y: \"bc12ea\", Z: \"bd1ea\") == 3)"
        ]
    },
    {
        "task_id": "748",
        "title": "capital_words_spaces",
        "text": "/ Write a function to put spaces between words starting with capital letters in a given string.",
        "code": "\nfunc capital_words_spaces(str1: String) -> String {\n\tstr2 := str1.CapitalWords()\n\treturn str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(capital_words_spaces(str1: \"Python\") == \"Python\")",
            "assert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")",
            "assert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")"
        ]
    },
    {
        "task_id": "749",
        "title": "sort_numeric_strings",
        "text": "/ Write a function to sort a given array of strings of numbers numerically. https://www.geeksforgeeks.org/swiftthon-sort-numeric-strings-in-a-array/",
        "code": "\nfunc sort_numeric_strings(nums_str: [String]) -> [Int] {\n\tvar nums_arr [][]int\n\tfor _, num := range nums_str {\n\t\tnums_arr = append(nums_arr, []int{num})\n\t}\n\tsort.Sort(sort.IntSlice(nums_arr))\n\treturn nums_arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(sort_numeric_strings(nums_str: [\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"]) == [-500, -12, 0, 4, 7, 12, 45, 100, 200])",
            "assert(sort_numeric_strings(nums_str: [\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"]) == [1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9])",
            "assert(sort_numeric_strings(nums_str: [\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"]) == [1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17])"
        ]
    },
    {
        "task_id": "74",
        "title": "is_samepatterns",
        "text": "/ Write a function to check whether it follows the sequence given in the patterns array.",
        "code": "\nfunc is_samepatterns(colors: [String], patterns: [String]) -> Bool {\n\tfor i := 0; i < len(colors); i++ {\n\t\tif!is_samepattern(colors[i], patterns[i]) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(is_samepatterns(colors: [\"red\", \"green\", \"green\"], patterns: [\"a\", \"b\", \"b\"]) == true)",
            "assert(is_samepatterns(colors: [\"red\", \"green\", \"greenn\"], patterns: [\"a\", \"b\", \"b\"]) == false)",
            "assert(is_samepatterns(colors: [\"red\", \"green\", \"greenn\"], patterns: [\"a\", \"b\"]) == false)"
        ]
    },
    {
        "task_id": "750",
        "title": "add_tuple",
        "text": "/ Write a function to add the given tuple to the given array.",
        "code": "\nfunc add_tuple(test_list: [Int], test_tup: (Int, Int)) -> [Int] {\n\tvar result [Int]\n\tfor i := 0; i < len(test_list); i++ {\n\t\tresult[i] = test_list[i] + test_tup[i]\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(add_tuple(test_list: [5, 6, 7], test_tup: (9, 10)) == [5, 6, 7, 9, 10])",
            "assert(add_tuple(test_list: [6, 7, 8], test_tup: (10, 11)) == [6, 7, 8, 10, 11])",
            "assert(add_tuple(test_list: [7, 8, 9], test_tup: (11, 12)) == [7, 8, 9, 11, 12])"
        ]
    },
    {
        "task_id": "751",
        "title": "check_min_heap",
        "text": "/ Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/",
        "code": "\nfunc check_min_heap(arr: [Int]) -> Bool {\n\tif len(arr) == 0 {\n\t\treturn false\n\t}\n\tif len(arr) == 1 {\n\t\treturn true\n\t}\n\tif arr[0] < arr[1] {\n\t\treturn true\n\t}\n\treturn false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(check_min_heap(arr: [1, 2, 3, 4, 5, 6]) == true)",
            "assert(check_min_heap(arr: [2, 3, 4, 5, 10, 15]) == true)",
            "assert(check_min_heap(arr: [2, 10, 4, 5, 3, 15]) == false)"
        ]
    },
    {
        "task_id": "752",
        "title": "jacobsthal_num",
        "text": "/ Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...",
        "code": "\nfunc jacobsthal_num(n: Int) -> Int {\n\tif n == 0 {\n\t\treturn 0\n\t}\n\tif n == 1 {\n\t\treturn 1\n\t}\n\tif n == 2 {\n\t\treturn 2\n\t}\n\tif n == 3 {\n\t\treturn 3\n\t}\n\tif n == 4 {\n\t\treturn 4\n\t}\n\tif n == 5 {\n\t\treturn 5\n\t}\n\tif n == 6 {\n\t\treturn 6\n\t}\n\tif n == 7 {\n\t\treturn 7\n\t}\n\tif n == 8 {\n\t\treturn 8\n\t}\n\tif n == 9 {\n\t\treturn 9\n\t}\n\tif n == 10 {\n\t\treturn 10\n\t}\n\tif n == 11 {\n\t\treturn 11\n\t}\n\tif n == 12 {\n\t\treturn 12\n\t}\n\tif n == 13 {\n\t\treturn 13\n\t}\n\tif n == 14 {\n\t\treturn 14\n\t}\n\tif n == 15 {\n\t\treturn 15\n\t}\n\tif n == 16 {\n\t\treturn 16\n\t}\n\tif n == 17 {\n\t\treturn 17\n\t}\n\tif n == 18 {\n\t\treturn 18\n\t}\n\tif n == 19 {\n\t\treturn 19\n\t}\n\tif n == 20 {\n\t\treturn 20\n\t}\n\tif n == 21 {\n\t\treturn 21\n\t}\n\tif n == 22 {\n\t\treturn 22\n\t}\n\tif n == 23 {\n\t\treturn 23\n\t}\n\tif n == 24 {\n\t\treturn 24\n\t}\n\tif n == 25 {\n\t\treturn 25\n\t}\n\tif n == 26 {\n\t\treturn 26\n\t}\n\tif n == 27 {\n\t\treturn 27\n\t}\n\tif n == 28 {\n\t\treturn 28\n\t}\n\tif n == 29 {\n\t\treturn\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(jacobsthal_num(n: 5) == 11)",
            "assert(jacobsthal_num(n: 2) == 1)",
            "assert(jacobsthal_num(n: 4) == 5)",
            "assert(jacobsthal_num(n: 13) == 2731)"
        ]
    },
    {
        "task_id": "753",
        "title": "min_k",
        "text": "/ Write a function to find minimum k records from tuple array. https://www.geeksforgeeks.org/swiftthon-find-minimum-k-records-from-tuple-array/ - in this case a verbatim coswift of test cases",
        "code": "\nfunc min_k(test_list: [(String, Int)], K: Int) -> [(String, Int)] {\n\tvar min_k_list []string\n\tfor _, test := range test_list {\n\t\tif len(test) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tif len(test) == 1 {\n\t\t\tmin_k_list = append(min_k_list, test[0])\n\t\t\tcontinue\n\t\t}\n\t\tif len(test) == 2 {\n\t\t\tmin_k_list = append(min_k_list, test[0])\n\t\t\tmin_k_list = append(min_k_list, test[1])\n\t\t\tcontinue\n\t\t}\n\t\tif len(test) == 3 {\n\t\t\tmin_k_list = append(min_k_list, test[0])\n\t\t\tmin_k_list = append(min_k_list, test[1])\n\t\t\tmin_k_list = append(min_k_list, test[2])\n\t\t\tcontinue\n\t\t}\n\t\tif len(test) == 4 {\n\t\t\tmin_k_list = append(min_k_list, test[0])\n\t\t\tmin_k_list = append(min_k_list, test[1])\n\t\t\tmin_k_list = append(min_k_list, test[2])\n\t\t\tmin_k_list = append(min_k_list, test[3])\n\t\t\tcontinue\n\t\t}\n\t}\n\treturn min_k_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(min_k(test_list: [(\"Manjeet\", 10), (\"Akshat\", 4), (\"Akash\", 2), (\"Nikhil\", 8)], K: 2) == [(\"Akash\", 2), (\"Akshat\", 4)])",
            "assert(min_k(test_list: [(\"Sanjeev\", 11), (\"Angat\", 5), (\"Akash\", 3), (\"Nepin\", 9)], K: 3) == [(\"Akash\", 3), (\"Angat\", 5), (\"Nepin\", 9)])",
            "assert(min_k(test_list: [(\"tanmay\", 14), (\"Amer\", 11), (\"Ayesha\", 9), (\"SKD\", 16)], K: 1) == [(\"Ayesha\", 9)])"
        ]
    },
    {
        "task_id": "754",
        "title": "extract_index_list",
        "text": "/ We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.",
        "code": "\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> [AnyHashable] {\n\tindex_list := make([]AnyHashable, 0)\n\tfor i := 0; i < len(l1); i++ {\n\t\tif l1[i] == l2[i] && l1[i] == l3[i] {\n\t\t\tindex_list = append(index_list, l1[i])\n\t\t}\n\t}\n\treturn index_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])",
            "assert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])",
            "assert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])",
            "assert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])"
        ]
    },
    {
        "task_id": "755",
        "title": "second_smallest",
        "text": "/ Write a function to find the second smallest number in an array.",
        "code": "\nextension Double: Error {}\n        \nfunc second_smallest(numbers: [Result<Int, Double>]) -> Double? {\n    if len(numbers) == 0 {\n        return 0\n    }\n    \n    var smallest = numbers[0].Value\n    \n    for _, number := range numbers {\n        if number.Value < smallest {\n            smallest = number.Value\n        }\n    }\n    \n    return smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(second_smallest(numbers: [.success(1), .success(2), .success(-8), .success(-2), .success(0), .success(-2)]) == -2)",
            "assert(second_smallest(numbers: [.success(1), .success(1), .failure(-0.5), .success(0), .success(2), .success(-2), .success(-2)]) == -0.5)",
            "assert(second_smallest(numbers: [.success(2), .success(2)]) == nil)",
            "assert(second_smallest(numbers: [.success(2), .success(2), .success(2)]) == nil)"
        ]
    },
    {
        "task_id": "756",
        "title": "text_match_zero_one",
        "text": "/ Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/swiftthon-exercises/re/swiftthon-re-exercise-3.php",
        "code": "\nfunc text_match_zero_one(text: String) -> Bool {\n\treturn text.Match(`a`)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(text_match_zero_one(text: \"ac\") == false)",
            "assert(text_match_zero_one(text: \"dc\") == false)",
            "assert(text_match_zero_one(text: \"abbbba\") == true)",
            "assert(text_match_zero_one(text: \"dsabbbba\") == true)",
            "assert(text_match_zero_one(text: \"asbbbba\") == false)",
            "assert(text_match_zero_one(text: \"abaaa\") == true)"
        ]
    },
    {
        "task_id": "757",
        "title": "count_reverse_pairs",
        "text": "/ Write a function to count the pairs of reverse strings in the given string array. https://www.geeksforgeeks.org/swiftthon-program-to-count-the-pairs-of-reverse-strings/",
        "code": "\nfunc count_reverse_pairs(test_list: [String]) -> Int {\n\tvar count int\n\tfor _, test := range test_list {\n\t\tcount += count_reverse_pairs(test)\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(count_reverse_pairs(test_list: [\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2)",
            "assert(count_reverse_pairs(test_list: [\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1)",
            "assert(count_reverse_pairs(test_list: [\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2)"
        ]
    },
    {
        "task_id": "759",
        "title": "is_decimal",
        "text": "/ Write a function to check whether a given string is a decimal number with a precision of 2.",
        "code": "\nfunc is_decimal(num: String) -> Bool {\n\tif num == \"\" {\n\t\treturn false\n\t}\n\tif num[0] == '-' {\n\t\treturn is_decimal(num[1:])\n\t}\n\treturn is_decimal(num[0:2])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(is_decimal(num: \"123.11\") == true)",
            "assert(is_decimal(num: \"e666.86\") == false)",
            "assert(is_decimal(num: \"3.124587\") == false)",
            "assert(is_decimal(num: \"1.11\") == true)",
            "assert(is_decimal(num: \"1.1.11\") == false)"
        ]
    },
    {
        "task_id": "75",
        "title": "find_tuples",
        "text": "/ Write a function to find tuples which have all elements divisible by k from the given array of tuples.",
        "code": "\nfunc find_tuples(test_list: [(Int, Int, Int)], K: Int) -> [(Int, Int, Int)] {\n\tvar test_list_copy []Int\n\tfor _, t := range test_list {\n\t\ttest_list_copy = append(test_list_copy, t[0])\n\t}\n\treturn find_tuples_with_k(test_list_copy, K)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(find_tuples(test_list: [(6, 24, 12), (7, 9, 6), (12, 18, 21)], K: 6) == [(6, 24, 12)])",
            "assert(find_tuples(test_list: [(5, 25, 30), (4, 2, 3), (7, 8, 9)], K: 5) == [(5, 25, 30)])",
            "assert(find_tuples(test_list: [(7, 9, 16), (8, 16, 4), (19, 17, 18)], K: 4) == [(8, 16, 4)])"
        ]
    },
    {
        "task_id": "760",
        "title": "unique_Element",
        "text": "/ Write a swiftthon function to check whether an array of numbers contains only one distinct element or not.",
        "code": "\nfunc unique_Element(arr: [Int]) -> Bool {\n\tif len(arr) == 0 {\n\t\treturn false\n\t}\n\tvar unique = make(map[Int]Bool)\n\tfor _, v := range arr {\n\t\tif unique[v] {\n\t\t\treturn false\n\t\t}\n\t\tunique[v] = true\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(unique_Element(arr: [1, 1, 1]) == true)",
            "assert(unique_Element(arr: [1, 2, 1, 2]) == false)",
            "assert(unique_Element(arr: [1, 2, 3, 4, 5]) == false)"
        ]
    },
    {
        "task_id": "762",
        "title": "check_monthnumber_number",
        "text": "/ Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.",
        "code": "\nfunc check_monthnumber_number(monthnum3: Int) -> Bool {\n\tif monthnum3 < 1 || monthnum3 > 12 {\n\t\treturn false\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(check_monthnumber_number(monthnum3: 6) == true)",
            "assert(check_monthnumber_number(monthnum3: 2) == false)",
            "assert(check_monthnumber_number(monthnum3: 12) == false)"
        ]
    },
    {
        "task_id": "763",
        "title": "find_min_diff",
        "text": "/ Write a swiftthon function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/",
        "code": "\nfunc find_min_diff(arr: [Int], n: Int) -> Int {\n\tif len(arr) == 0 {\n\t\treturn 0\n\t}\n\tmin := arr[0]\n\tfor i := 1; i < len(arr); i++ {\n\t\tif arr[i] < arr[min] {\n\t\t\tmin = i\n\t\t}\n\t}\n\treturn min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(find_min_diff(arr: [1, 5, 3, 19, 18, 25], n: 6) == 1)",
            "assert(find_min_diff(arr: [4, 3, 2, 6], n: 4) == 1)",
            "assert(find_min_diff(arr: [30, 5, 20, 9], n: 4) == 4)"
        ]
    },
    {
        "task_id": "764",
        "title": "number_ctr",
        "text": "/ Write a swiftthon function to count number of digits in a given string.",
        "code": "\nfunc number_ctr(str: String) -> Int {\n\tvar count int\n\tfor i := 0; i < len(str); i++ {\n\t\tif str[i] == '0' {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(number_ctr(str: \"program2bedone\") == 1)",
            "assert(number_ctr(str: \"3wonders\") == 1)",
            "assert(number_ctr(str: \"123\") == 3)",
            "assert(number_ctr(str: \"3wond-1ers2\") == 3)"
        ]
    },
    {
        "task_id": "765",
        "title": "is_polite",
        "text": "/ Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/",
        "code": "\nfunc is_polite(n: Int) -> Int {\n\tif n == 0 {\n\t\treturn 0\n\t}\n\tif n%2 == 0 {\n\t\treturn 1\n\t}\n\treturn 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(is_polite(n: 7) == 11)",
            "assert(is_polite(n: 4) == 7)",
            "assert(is_polite(n: 9) == 13)"
        ]
    },
    {
        "task_id": "766",
        "title": "pair_wise",
        "text": "/ Write a function to return an array of all pairs of consecutive items in a given array.",
        "code": "\nfunc pair_wise(l1: [Int]) -> [(Int, Int)] {\n\tvar pairs [][]Int\n\tfor i := 0; i < len(l1); i++ {\n\t\tpairs = append(pairs, [][]Int{l1[i], l1[i + 1:]})\n\t}\n\treturn pairs\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(pair_wise(l1: [1, 1, 2, 3, 3, 4, 4, 5]) == [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)])",
            "assert(pair_wise(l1: [1, 5, 7, 9, 10]) == [(1, 5), (5, 7), (7, 9), (9, 10)])",
            "assert(pair_wise(l1: [5, 1, 9, 7, 10]) == [(5, 1), (1, 9), (9, 7), (7, 10)])",
            "assert(pair_wise(l1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)])"
        ]
    },
    {
        "task_id": "767",
        "title": "get_pairs_count",
        "text": "/ Write a swiftthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input an array of numbers and the sum,",
        "code": "\nfunc get_pairs_count(arr: [Int], sum: Int) -> Int {\n    var count = 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] == sum {\n            count++\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(get_pairs_count(arr: [1, 1, 1, 1], sum: 2) == 6)",
            "assert(get_pairs_count(arr: [1, 5, 7, -1, 5], sum: 6) == 3)",
            "assert(get_pairs_count(arr: [1, -2, 3], sum: 1) == 1)",
            "assert(get_pairs_count(arr: [-1, -2, 3], sum: -3) == 1)"
        ]
    },
    {
        "task_id": "769",
        "title": "Diff",
        "text": "/ Write a swiftthon function to get the difference between two arrays.",
        "code": "\nfunc Diff(li1: [Int], li2: [Int]) -> [Int] {\n\tvar diff [Int]\n\tfor i := 0; i < len(li1); i++ {\n\t\tdiff[i] = li1[i] - li2[i]\n\t}\n\treturn diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(Diff(li1: [10, 15, 20, 25, 30, 35, 40], li2: [25, 40, 35]) == [10, 20, 30, 15])",
            "assert(Diff(li1: [1, 2, 3, 4, 5], li2: [6, 7, 1]) == [2, 3, 4, 5, 6, 7])",
            "assert(Diff(li1: [1, 2, 3], li2: [6, 7, 1]) == [2, 3, 6, 7])"
        ]
    },
    {
        "task_id": "770",
        "title": "odd_num_sum",
        "text": "/ Write a swiftthon function to find the sum of fourth power of first n odd natural numbers.",
        "code": "\nfunc odd_num_sum(n: Int) -> Int {\n\tif n == 0 {\n\t\treturn 0\n\t}\n\treturn odd_num_sum_helper(n, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(odd_num_sum(n: 2) == 82)",
            "assert(odd_num_sum(n: 3) == 707)",
            "assert(odd_num_sum(n: 4) == 3108)"
        ]
    },
    {
        "task_id": "771",
        "title": "check_expression",
        "text": "/ Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/",
        "code": "\nfunc check_expression(exp: String) -> Bool {\n\tvar result Bool\n\tvar stack = []string{}\n\tstack = append(stack, exp)\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\tstack = append(stack, \"\")\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(check_expression(exp: \"{()}[{}]\") == true)",
            "assert(check_expression(exp: \"{()}[{]\") == false)",
            "assert(check_expression(exp: \"{()}[{}][]({})\") == true)"
        ]
    },
    {
        "task_id": "772",
        "title": "remove_length",
        "text": "/ Write a function to remove all the words with k length in the given string.",
        "code": "\nfunc remove_length(test_str: String, K: Int) -> String {\n\tif test_str == \"\" {\n\t\treturn \"\"\n\t}\n\tvar test_str_copy string\n\tfor i := 0; i < len(test_str); i++ {\n\t\tif test_str[i] =='' {\n\t\t\ttest_str_copy = test_str[i+1:]\n\t\t\tbreak\n\t\t}\n\t}\n\tvar test_str_copy_copy string\n\tfor i := 0; i < len(test_str_copy); i++ {\n\t\tif test_str_copy[i] =='' {\n\t\t\ttest_str_copy_copy = test_str_copy[i+1:]\n\t\t\tbreak\n\t\t}\n\t}\n\tvar test_str_copy_copy_copy string\n\tfor i := 0; i < len(test_str_copy_copy); i++ {\n\t\tif test_str_copy_copy[i] =='' {\n\t\t\ttest_str_copy_copy_copy = test_str_copy_copy[i+1:]\n\t\t\tbreak\n\t\t}\n\t}\n\tvar test_str_copy_copy_copy_copy string\n\tfor i := 0; i < len(test_str_copy_copy_copy); i++ {\n\t\tif test_str_copy_copy_copy[i] =='' {\n\t\t\ttest_str_copy_copy_copy_copy = test_str_copy_copy_copy[i+1:]\n\t\t\tbreak\n\t\t}\n\t}\n\tvar test_str_copy_copy_copy_copy_copy string\n\tfor i := 0; i < len(test_str_copy_copy_copy_copy); i++ {\n\t\tif test_str_copy_copy_copy_copy[i] =='' {\n\t\t\ttest_str_copy_copy_copy_copy_copy = test_str_copy_copy_copy_copy[i+1:]\n\t\t\tbreak\n\t\t}\n\t}\n\tvar test_str_copy_copy_copy_copy_copy_copy_copy string\n\tfor i := 0; i < len(test_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(remove_length(test_str: \"The person is most value tet\", K: 3) == \"person is most value\")",
            "assert(remove_length(test_str: \"If you told me about this ok\", K: 4) == \"If you me about ok\")",
            "assert(remove_length(test_str: \"Forces of darkeness is come into the play\", K: 4) == \"Forces of darkeness is the\")"
        ]
    },
    {
        "task_id": "773",
        "title": "occurance_substring",
        "text": "/ Write a function to find the occurrence and position of the substrings within a string. Return nil if there is no match.",
        "code": "\nfunc occurance_substring(text: String, pattern: String) -> (String, Int, Int)? {\n\tif text == \"\" {\n\t\treturn \"\", 0, 0\n\t}\n\tif pattern == \"\" {\n\t\treturn text, 0, 0\n\t}\n\tif pattern[0] == '*' {\n\t\tpattern = pattern[1:]\n\t}\n\tif pattern[0] == '?' {\n\t\tpattern = pattern[1:]\n\t}\n\tif pattern[0] == '?' {\n\t\tpattern = pattern[1:]\n\t}\n\tif pattern[0] == '?' {\n\t\tpattern = pattern[1:]\n\t}\n\tif pattern[0] == '?' {\n\t\tpattern = pattern[1:]\n\t}\n\tif pattern[0] == '?' {\n\t\tpattern = pattern[1:]\n\t}\n\tif pattern[0] == '?' {\n\t\tpattern = pattern[1:]\n\t}\n\tif pattern[0] == '?' {\n\t\tpattern = pattern[1:]\n\t}\n\tif pattern[0] == '?' {\n\t\tpattern = pattern[1:]\n\t}\n\tif pattern[0] == '?' {\n\t\tpattern = pattern[1:]\n\t}\n\tif pattern[0] == '?' {\n\t\tpattern = pattern[1:]\n\t}\n\tif pattern[0] == '?' {\n\t\tpattern = pattern[1:]\n\t}\n\tif pattern[0] == '?' {\n\t\tpattern = pattern[1:]\n\t}\n\tif pattern[0] == '?' {\n\t\tpattern = pattern[1:]\n\t}\n\tif pattern[0] == '?' {\n\t\tpattern = pattern[1:]\n\t}\n\tif pattern[0] == '?' {\n\t\tpattern = pattern[1:]\n\t}\n\tif pattern[0] == '?' {\n\t\tpattern = pattern[1:]\n\t}\n\tif pattern[0] == '?' {\n\t\tpattern = pattern[1:]\n\t}\n\tif pattern[0] == '?' {\n\t\tpattern = pattern[1:]\n\t}\n\tif pattern[\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(occurance_substring(text: \"python programming, python language\", pattern: \"python\") == (\"python\", 0, 6))",
            "assert(occurance_substring(text: \"python programming,programming language\", pattern: \"programming\") == (\"programming\", 7, 18))",
            "assert(occurance_substring(text: \"python programming,programming language\", pattern: \"language\") == (\"language\", 31, 39))",
            "assert(occurance_substring(text: \"c++ programming, c++ language\", pattern: \"python\") == nil)"
        ]
    },
    {
        "task_id": "775",
        "title": "odd_position",
        "text": "/ Write a swiftthon function to check whether every odd index contains odd numbers of a given array.",
        "code": "\nfunc odd_position(nums: [Int]) -> Bool {\n\todd_count := 0\n\tfor i := 0; i < len(nums); i += 2 {\n\t\tif nums[i]%2 == 1 {\n\t\t\todd_count += 1\n\t\t}\n\t}\n\treturn odd_count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(odd_position(nums: [2, 1, 4, 3, 6, 7, 6, 3]) == true)",
            "assert(odd_position(nums: [4, 1, 2]) == true)",
            "assert(odd_position(nums: [1, 2, 3]) == false)"
        ]
    },
    {
        "task_id": "776",
        "title": "count_vowels",
        "text": "/ Write a function to count those characters which have vowels as their neighbors in the given string.",
        "code": "\nfunc count_vowels(test_str: String) -> Int {\n\tvar count int\n\tfor i := 0; i < len(test_str); i++ {\n\t\tif test_str[i] == 'a' {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(count_vowels(test_str: \"bestinstareels\") == 7)",
            "assert(count_vowels(test_str: \"partofthejourneyistheend\") == 12)",
            "assert(count_vowels(test_str: \"amazonprime\") == 5)"
        ]
    },
    {
        "task_id": "777",
        "title": "find_sum",
        "text": "/ Write a swiftthon function to find the sum of non-repeated elements in a given array.",
        "code": "\nfunc find_sum(arr: [Int]) -> Int {\n\tsum := 0\n\tfor i := 0; i < len(arr); i++ {\n\t\tif arr[i]!= 0 {\n\t\t\tsum += arr[i]\n\t\t}\n\t}\n\treturn sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(find_sum(arr: [1, 2, 3, 1, 1, 4, 5, 6]) == 21)",
            "assert(find_sum(arr: [1, 10, 9, 4, 2, 10, 10, 45, 4]) == 71)",
            "assert(find_sum(arr: [12, 10, 9, 45, 2, 10, 10, 45, 10]) == 78)"
        ]
    },
    {
        "task_id": "778",
        "title": "pack_consecutive_duplicates",
        "text": "/ Write a function to pack consecutive duplicates of a given array elements into subarrays.",
        "code": "\nfunc pack_consecutive_duplicates(list1: [AnyHashable]) -> [[AnyHashable]] {\n\tvar list2 [AnyHashable]\n\tfor i := 0; i < len(list1); i++ {\n\t\tlist2 = append(list2, list1[i])\n\t}\n\treturn pack_consecutive_duplicates(list2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(pack_consecutive_duplicates(list1: [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])",
            "assert(pack_consecutive_duplicates(list1: [10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])",
            "assert(pack_consecutive_duplicates(list1: [\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])"
        ]
    },
    {
        "task_id": "77",
        "title": "is_Diff",
        "text": "/ Write a swiftthon function to find whether a number is divisible by 11.",
        "code": "\nfunc is_Diff(n: Int) -> Bool {\n\tif n == 0 {\n\t\treturn false\n\t}\n\tif n%11 == 0 {\n\t\treturn true\n\t}\n\treturn false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(is_Diff(n: 12345) == false)",
            "assert(is_Diff(n: 1212112) == true)",
            "assert(is_Diff(n: 1212) == false)"
        ]
    },
    {
        "task_id": "780",
        "title": "find_combinations",
        "text": "/ Write a function to find the combinations of sums with tuples in the given tuple array. https://www.geeksforgeeks.org/swiftthon-combinations-of-sum-with-tuples-in-tuple-array/",
        "code": "\nfunc find_combinations(test_list: [(Int, Int)]) -> [(Int, Int)] {\n\tvar combinations []int\n\tfor _, test := range test_list {\n\t\tcombinations = append(combinations, test)\n\t}\n\treturn find_combinations_with_tuples(combinations)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(find_combinations(test_list: [(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)])",
            "assert(find_combinations(test_list: [(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)])",
            "assert(find_combinations(test_list: [(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)])"
        ]
    },
    {
        "task_id": "781",
        "title": "count_divisors",
        "text": "/ Write a swiftthon function to check whether the count of divisors is even. https://www.w3resource.com/swiftthon-exercises/basic/swiftthon-basic-1-exercise-24.php",
        "code": "\nfunc count_divisors(n: Int) -> Bool {\n\tif n == 0 {\n\t\treturn false\n\t}\n\tif n%2 == 0 {\n\t\treturn true\n\t}\n\treturn false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(count_divisors(n: 10) == true)",
            "assert(count_divisors(n: 100) == false)",
            "assert(count_divisors(n: 125) == true)"
        ]
    },
    {
        "task_id": "782",
        "title": "odd_length_sum",
        "text": "/ Write a swiftthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/",
        "code": "\nfunc odd_length_sum(arr: [Int]) -> Int {\n\tsum := 0\n\tfor i := 0; i < len(arr); i++ {\n\t\tif arr[i]%2 == 1 {\n\t\t\tsum += arr[i]\n\t\t}\n\t}\n\treturn sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(odd_length_sum(arr: [1, 2, 4]) == 14)",
            "assert(odd_length_sum(arr: [1, 2, 1, 2]) == 15)",
            "assert(odd_length_sum(arr: [1, 7]) == 8)"
        ]
    },
    {
        "task_id": "783",
        "title": "rgb_to_hsv",
        "text": "/ Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/",
        "code": "\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> [Double] {\n\th, s, v := hsv.RGBToHSV(r, g, b)\n\treturn [][]Double{\n\t\t{h, s, v},\n\t\t{h, 0, v},\n\t\t{0, v, s},\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(rgb_to_hsv(r: 255, g: 255, b: 255) == [0.0, 0.0, 100.0])",
            "assert(rgb_to_hsv(r: 0, g: 215, b: 0) == [120.0, 100.0, 84.31372549019608])",
            "assert(rgb_to_hsv(r: 10, g: 215, b: 110) == [149.26829268292684, 95.34883720930233, 84.31372549019608])"
        ]
    },
    {
        "task_id": "784",
        "title": "mul_even_odd",
        "text": "/ Write a function to find the product of first even and odd number of a given array.",
        "code": "\nfunc mul_even_odd(list1: [Int]) -> Int {\n\tvar product int\n\tfor i := 0; i < len(list1); i++ {\n\t\tproduct = product * list1[i]\n\t}\n\treturn product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)",
            "assert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)",
            "assert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)"
        ]
    },
    {
        "task_id": "785",
        "title": "tuple_str_int",
        "text": "/ Write a function to convert tuple string to integer tuple.",
        "code": "\nfunc tuple_str_int(test_str: String) -> (Int, Int, Int) {\n\tvar tuple_str_int_int = Int{}\n\tvar tuple_str_int_int_int = tuple_str_int_int\n\tvar tuple_str_int_int_int_int = tuple_str_int_int_int\n\tvar tuple_str_int_int_int_int_int = tuple_str_int_int_int_int\n\tvar tuple_str_int_int_int_int_int_int = tuple_str_int_int_int_int_int\n\tvar tuple_str_int_int_int_int_int_int_int = tuple_str_int_int_int_int_int_int\n\tvar tuple_str_int_int_int_int_int_int_int_int = tuple_str_int_int_int_int_int_int_int\n\tvar tuple_str_int_int_int_int_int_int_int_int_int = tuple_str_int_int_int_int_int_int_int\n\tvar tuple_str_int_int_int_int_int_int_int_int_int_int_int = tuple_str_int_int_int_int_int_int_int_int\n\tvar tuple_str_int_int_int_int_int_int_int_int_int_int_int_int_int = tuple_str_int_int_int_int_int_int_int_int_int\n\tvar tuple_str_int_int_int_int_int_int_int_int_int_int_int_int_int_int = tuple_str_int_int_int_int_int_int_int_int_int_int\n\tvar tuple_str_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int_int = tuple_str_int_int_int_int_int_int_int_int_int_int_int\n\tvar tuple_str_int_int_int_int_int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(tuple_str_int(test_str: \"(7, 8, 9)\") == (7, 8, 9))",
            "assert(tuple_str_int(test_str: \"(1, 2, 3)\") == (1, 2, 3))",
            "assert(tuple_str_int(test_str: \"(4, 5, 6)\") == (4, 5, 6))",
            "assert(tuple_str_int(test_str: \"(7, 81, 19)\") == (7, 81, 19))"
        ]
    },
    {
        "task_id": "786",
        "title": "right_insertion",
        "text": "/ Write a function to locate the right insertion point for a specified value in sorted order.",
        "code": "\nfunc right_insertion(a: [Int], x: Int) -> Int {\n\tif len(a) == 0 {\n\t\treturn x\n\t}\n\tif x < a[0] {\n\t\treturn right_insertion(a, x)\n\t}\n\treturn right_insertion(a[1:], x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(right_insertion(a: [1, 2, 4, 5], x: 6) == 4)",
            "assert(right_insertion(a: [1, 2, 4, 5], x: 3) == 2)",
            "assert(right_insertion(a: [1, 2, 4, 5], x: 7) == 4)"
        ]
    },
    {
        "task_id": "787",
        "title": "text_match_three",
        "text": "/ Write a function that matches a string that has an a followed by three 'b'.",
        "code": "\nfunc text_match_three(text: String) -> Bool {\n\treturn text.Match(`b`)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(text_match_three(text: \"ac\") == false)",
            "assert(text_match_three(text: \"dc\") == false)",
            "assert(text_match_three(text: \"abbbba\") == true)",
            "assert(text_match_three(text: \"caacabbbba\") == true)"
        ]
    },
    {
        "task_id": "788",
        "title": "new_tuple",
        "text": "/ Write a function to create a new tuple from the given string and array.",
        "code": "\nfunc new_tuple(test_list: [String], test_str: String) -> (String, String, String) {\n\tvar new_str string\n\tvar new_tuple string\n\tvar new_tuple_str string\n\tvar new_tuple_str_str string\n\tvar new_tuple_str_str_str string\n\tvar new_tuple_str_str_str_str string\n\tvar new_tuple_str_str_str_str_str string\n\tvar new_tuple_str_str_str_str_str_str string\n\tvar new_tuple_str_str_str_str_str_str_str_str string\n\tvar new_tuple_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(new_tuple(test_list: [\"WEB\", \"is\"], test_str: \"best\") == (\"WEB\", \"is\", \"best\"))",
            "assert(new_tuple(test_list: [\"We\", \"are\"], test_str: \"Developers\") == (\"We\", \"are\", \"Developers\"))",
            "assert(new_tuple(test_list: [\"Part\", \"is\"], test_str: \"Wrong\") == (\"Part\", \"is\", \"Wrong\"))"
        ]
    },
    {
        "task_id": "790",
        "title": "even_position",
        "text": "/ Write a swiftthon function to check whether every even index contains even numbers of a given array.",
        "code": "\nfunc even_position(nums: [Int]) -> Bool {\n\tfor i := 0; i < len(nums); i += 2 {\n\t\tif nums[i]%2 == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(even_position(nums: [3, 2, 1]) == false)",
            "assert(even_position(nums: [1, 2, 3]) == false)",
            "assert(even_position(nums: [2, 1, 4]) == true)"
        ]
    },
    {
        "task_id": "791",
        "title": "remove_nested",
        "text": "/ Write a function to remove tuples from the given tuple.",
        "code": "\nfunc remove_nested(test_tup: AnyHashable) -> (Int, Int, Int, Int) {\n\tvar result Int\n\tvar result_tup Int\n\tvar result_tup_tup Int\n\tvar result_tup_tup_tup Int\n\tvar result_tup_tup_tup_tup Int\n\tvar result_tup_tup_tup_tup_tup Int\n\tvar result_tup_tup_tup_tup_tup_tup Int\n\tvar result_tup_tup_tup_tup_tup_tup_tup_tup Int\n\tvar result_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup Int\n\tvar result_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_tup_t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(remove_nested(test_tup: (1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10))",
            "assert(remove_nested(test_tup: (2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11))",
            "assert(remove_nested(test_tup: (3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12))",
            "assert(remove_nested(test_tup: (3, 7, 9, (6, 8), (5, 12), 12)) == (3, 7, 9, 12))"
        ]
    },
    {
        "task_id": "792",
        "title": "count_list",
        "text": "/ Write a swiftthon function to count the number of arrays in a given number of arrays.",
        "code": "\nfunc count_list(input_list: [[Int]]) -> Int {\n\tvar count int\n\tfor _, input_list_element := range input_list {\n\t\tcount += len(input_list_element)\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(count_list(input_list: [[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4)",
            "assert(count_list(input_list: [[1, 2], [2, 3], [4, 5]]) == 3)",
            "assert(count_list(input_list: [[1, 0], [2, 0]]) == 2)"
        ]
    },
    {
        "task_id": "793",
        "title": "last",
        "text": "/ Write a swiftthon function to find the last position of an element in a sorted array.",
        "code": "\nfunc last(arr: [Int], x: Int) -> Int {\n\tif len(arr) == 0 {\n\t\treturn 0\n\t}\n\treturn arr[len(arr)-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(last(arr: [1, 2, 3], x: 1) == 0)",
            "assert(last(arr: [1, 1, 1, 2, 3, 4], x: 1) == 2)",
            "assert(last(arr: [2, 3, 2, 3, 6, 8, 9], x: 3) == 3)"
        ]
    },
    {
        "task_id": "794",
        "title": "text_starta_endb",
        "text": "/ Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
        "code": "\nfunc text_starta_endb(text: String) -> Bool {\n\treturn text.Match(func(s string) bool {\n\t\treturn s[0] == 'a' && s[len(s)-1] == 'b'\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(text_starta_endb(text: \"aabbbb\") == true)",
            "assert(text_starta_endb(text: \"aabAbbbc\") == false)",
            "assert(text_starta_endb(text: \"accddbbjjj\") == false)"
        ]
    },
    {
        "task_id": "796",
        "title": "return_sum",
        "text": "/ Write function to find the sum of all items in the given dictionary.",
        "code": "\nfunc return_sum(dict: [String : Int]) -> Int {\n\tsum := 0\n\tfor _, item := range dict {\n\t\tsum += item\n\t}\n\treturn sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(return_sum(dict: [\"a\" : 100, \"b\" : 200, \"c\" : 300]) == 600)",
            "assert(return_sum(dict: [\"a\" : 25, \"b\" : 18, \"c\" : 45]) == 88)",
            "assert(return_sum(dict: [\"a\" : 36, \"b\" : 39, \"c\" : 49]) == 124)"
        ]
    },
    {
        "task_id": "797",
        "title": "sum_in_range",
        "text": "/ Write a swiftthon function to find the sum of all odd natural numbers within the range l and r.",
        "code": "\nfunc sum_in_range(l: Int, r: Int) -> Int {\n\tif l.IsNegative() || r.IsNegative() {\n\t\treturn 0\n\t}\n\tif l.IsZero() || r.IsZero() {\n\t\treturn 0\n\t}\n\tif l.IsOne() || r.IsOne() {\n\t\treturn 1\n\t}\n\tif l.IsNegative() {\n\t\treturn -1\n\t}\n\tif r.IsNegative() {\n\t\treturn -1\n\t}\n\tif l.IsZero() {\n\t\treturn 0\n\t}\n\tif r.IsZero() {\n\t\treturn 0\n\t}\n\tif l.IsOne() {\n\t\treturn 1\n\t}\n\tif r.IsOne() {\n\t\treturn 1\n\t}\n\tif l.IsNegative() {\n\t\treturn -1\n\t}\n\tif r.IsNegative() {\n\t\treturn -1\n\t}\n\tif l.IsOne() {\n\t\treturn 1\n\t}\n\tif r.IsOne() {\n\t\treturn 1\n\t}\n\tif l.IsNegative() {\n\t\treturn -1\n\t}\n\tif r.IsNegative() {\n\t\treturn -1\n\t}\n\tif l.IsZero() {\n\t\treturn 0\n\t}\n\tif r.IsZero() {\n\t\treturn 0\n\t}\n\tif l.IsOne() {\n\t\treturn 1\n\t}\n\tif r.IsOne() {\n\t\treturn 1\n\t}\n\tif l.IsNegative() {\n\t\treturn -1\n\t}\n\tif r.IsNegative() {\n\t\treturn -1\n\t}\n\tif l.IsOne() {\n\t\treturn 1\n\t}\n\tif r.IsOne() {\n\t\treturn 1\n\t}\n\tif l.IsNegative() {\n\t\treturn -1\n\t}\n\tif r.IsNegative() {\n\t\treturn -1\n\t}\n\tif l.IsZero() {\n\t\treturn 0\n\t}\n\tif r.IsZero() {\n\t\treturn 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(sum_in_range(l: 2, r: 5) == 8)",
            "assert(sum_in_range(l: 5, r: 7) == 12)",
            "assert(sum_in_range(l: 7, r: 13) == 40)"
        ]
    },
    {
        "task_id": "798",
        "title": "_sum",
        "text": "/ Write a swiftthon function to find the sum of an array.",
        "code": "\nfunc _sum(arr: [Int]) -> Int {\n\tsum := 0\n\tfor _, v := range arr {\n\t\tsum += v\n\t}\n\treturn sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(_sum(arr: [1, 2, 3]) == 6)",
            "assert(_sum(arr: [15, 12, 13, 10]) == 50)",
            "assert(_sum(arr: [0, 1, 2]) == 3)"
        ]
    },
    {
        "task_id": "799",
        "title": "left_rotate",
        "text": "/ Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.",
        "code": "\nfunc left_rotate(n: Int, d: Int) -> Int {\n\tif n == 0 {\n\t\treturn 0\n\t}\n\tif n < 0 {\n\t\treturn n\n\t}\n\tif n == 1 {\n\t\treturn 1\n\t}\n\tif n == 2 {\n\t\treturn 2\n\t}\n\tif n == 3 {\n\t\treturn 3\n\t}\n\tif n == 4 {\n\t\treturn 4\n\t}\n\tif n == 5 {\n\t\treturn 5\n\t}\n\tif n == 6 {\n\t\treturn 6\n\t}\n\tif n == 7 {\n\t\treturn 7\n\t}\n\tif n == 8 {\n\t\treturn 8\n\t}\n\tif n == 9 {\n\t\treturn 9\n\t}\n\tif n == 10 {\n\t\treturn 10\n\t}\n\tif n == 11 {\n\t\treturn 11\n\t}\n\tif n == 12 {\n\t\treturn 12\n\t}\n\tif n == 13 {\n\t\treturn 13\n\t}\n\tif n == 14 {\n\t\treturn 14\n\t}\n\tif n == 15 {\n\t\treturn 15\n\t}\n\tif n == 16 {\n\t\treturn 16\n\t}\n\tif n == 17 {\n\t\treturn 17\n\t}\n\tif n == 18 {\n\t\treturn 18\n\t}\n\tif n == 19 {\n\t\treturn 19\n\t}\n\tif n == 20 {\n\t\treturn 20\n\t}\n\tif n == 21 {\n\t\treturn 21\n\t}\n\tif n == 22 {\n\t\treturn 22\n\t}\n\tif n == 23 {\n\t\treturn 23\n\t}\n\tif n == 24 {\n\t\treturn 24\n\t}\n\tif n == 25 {\n\t\treturn 25\n\t}\n\tif n == 26 {\n\t\treturn 26\n\t}\n\tif n == 27 {\n\t\treturn 27\n\t}\n\tif n == 28 {\n\t\treturn 28\n\t}\n\tif n == 29 {\n\t\treturn 29\n\t}\n\tif n == 30 {\n\t\treturn 30\n\t}\n\tif n == 31 {\n\t\treturn 31\n\t}\n\tif n == 32\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(left_rotate(n: 16, d: 2) == 64)",
            "assert(left_rotate(n: 10, d: 2) == 40)",
            "assert(left_rotate(n: 99, d: 3) == 792)",
            "assert(left_rotate(n: 99, d: 3) == 792)",
            "assert(left_rotate(n: 1, d: 3) == 8)",
            "assert(left_rotate(n: 5, d: 3) == 40)",
            "assert(left_rotate(n: 29, d: 3) == 232)"
        ]
    },
    {
        "task_id": "79",
        "title": "word_len",
        "text": "/ Write a swiftthon function to check whether the length of the word is odd or not.",
        "code": "\nfunc word_len(s: String) -> Bool {\n\tif s.Len()%2!= 0 {\n\t\treturn false\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(word_len(s: \"Hadoop\") == false)",
            "assert(word_len(s: \"great\") == true)",
            "assert(word_len(s: \"structure\") == true)"
        ]
    },
    {
        "task_id": "800",
        "title": "remove_all_spaces",
        "text": "/ Write a function to remove all whitespaces from a string.",
        "code": "\nfunc remove_all_spaces(text: String) -> String {\n\treturn text.ReplaceAll(\n\t\tfunc(s string) string {\n\t\t\treturn s.ReplaceAll(\n\t\t\t\tfunc(r rune) rune {\n\t\t\t\t\treturn r =='' || r == '\\t' || r == '\\n' || r == '\\r'\n\t\t\t\t},\n\t\t\t\t\" \")\n\t\t},\n\t\t\"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(remove_all_spaces(text: \"python  program\") == \"pythonprogram\")",
            "assert(remove_all_spaces(text: \"python   programming    language\") == \"pythonprogramminglanguage\")",
            "assert(remove_all_spaces(text: \"python                     program\") == \"pythonprogram\")",
            "assert(remove_all_spaces(text: \"   python                     program\") == \"pythonprogram\")"
        ]
    },
    {
        "task_id": "801",
        "title": "test_three_equal",
        "text": "/ Write a swiftthon function to count the number of equal numbers from three given integers.",
        "code": "\nfunc test_three_equal(x: Int, y: Int, z: Int) -> Int {\n\treturn x + y + z\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(test_three_equal(x: 1, y: 1, z: 1) == 3)",
            "assert(test_three_equal(x: -1, y: -2, z: -3) == 0)",
            "assert(test_three_equal(x: 1, y: 2, z: 2) == 2)"
        ]
    },
    {
        "task_id": "802",
        "title": "count_rotation",
        "text": "/ Write a swiftthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/",
        "code": "\nfunc count_rotation(arr: [Int]) -> Int {\n\tvar count = 0\n\tfor i := 0; i < len(arr); i++ {\n\t\tif arr[i] == 1 {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(count_rotation(arr: [3, 2, 1]) == 1)",
            "assert(count_rotation(arr: [4, 5, 1, 2, 3]) == 2)",
            "assert(count_rotation(arr: [7, 8, 9, 1, 2, 3]) == 3)",
            "assert(count_rotation(arr: [1, 2, 3]) == 0)",
            "assert(count_rotation(arr: [1, 3, 2]) == 2)"
        ]
    },
    {
        "task_id": "803",
        "title": "is_perfect_square",
        "text": "/ Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/",
        "code": "\nfunc is_perfect_square(n: Int) -> Bool {\n    if (n == 0) {\n        return true\n    }\n    if (n == 1) {\n        return true\n    }\n    if (n == 2) {\n        return true\n    }\n    if (n == 3) {\n        return true\n    }\n    if (n == 4) {\n        return true\n    }\n    if (n == 5) {\n        return true\n    }\n    if (n == 6) {\n        return true\n    }\n    if (n == 7) {\n        return true\n    }\n    if (n == 8) {\n        return true\n    }\n    if (n == 9) {\n        return true\n    }\n    if (n == 10) {\n        return true\n    }\n    if (n == 11) {\n        return true\n    }\n    if (n == 12) {\n        return true\n    }\n    if (n == 13) {\n        return true\n    }\n    if (n == 14) {\n        return true\n    }\n    if (n == 15) {\n        return true\n    }\n    if (n == 16) {\n        return true\n    }\n    if (n == 17) {\n        return true\n    }\n    if (n == 18) {\n        return true\n    }\n    if (n == 19) {\n        return true\n    }\n    if (n == 20) {\n        return true\n    }\n    if (n == 21) {\n        return true\n    }\n    if (n == 22) {\n        return true\n    }\n    if (n == 23) {\n        return true\n    }\n    if (n == 24) {\n        return true\n    }\n    if (n == 25) {\n        return true\n    }\n    if (n == 26) {\n        return true\n    }\n    if (n == 27) {\n        return true\n    }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(is_perfect_square(n: 10) == false)",
            "assert(is_perfect_square(n: 36) == true)",
            "assert(is_perfect_square(n: 14) == false)",
            "assert(is_perfect_square(n: 196) == true)",
            "assert(is_perfect_square(n: 125) == false)",
            "assert(is_perfect_square(n: 15625) == true)"
        ]
    },
    {
        "task_id": "804",
        "title": "is_product_even",
        "text": "/ Write a function to check whether the product of numbers in an array is even or not.",
        "code": "\nfunc is_product_even(arr: [Int]) -> Bool {\n\tfor i := 0; i < len(arr); i++ {\n\t\tif arr[i]%2 == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(is_product_even(arr: [1, 2, 3]) == true)",
            "assert(is_product_even(arr: [1, 2, 1, 4]) == true)",
            "assert(is_product_even(arr: [1, 1]) == false)"
        ]
    },
    {
        "task_id": "805",
        "title": "max_sum_list",
        "text": "/ Write a function that returns the array in an array of arrays whose sum of elements is the highest.",
        "code": "\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n\tvar max_sum_list = make([][]Int, len(lists))\n\tfor i, list := range lists {\n\t\tmax_sum_list[i] = make([]Int, len(list))\n\t\tfor j, val := range list {\n\t\t\tmax_sum_list[i][j] = val\n\t\t}\n\t}\n\treturn max_sum_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])",
            "assert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])",
            "assert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])"
        ]
    },
    {
        "task_id": "806",
        "title": "max_run_uppercase",
        "text": "/ Write a function to find maximum run of uppercase characters in the given string.",
        "code": "\nfunc max_run_uppercase(test_str: String) -> Int {\n\tmax_run := 0\n\tfor i := 0; i < len(test_str); i++ {\n\t\tif test_str[i] == 'U' {\n\t\t\tmax_run = i\n\t\t}\n\t}\n\treturn max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)",
            "assert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)",
            "assert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)"
        ]
    },
    {
        "task_id": "807",
        "title": "first_odd",
        "text": "/ Write a swiftthon function to find the first odd number in a given array of numbers.",
        "code": "\nfunc first_odd(nums: [Int]) -> Int {\n\todd := 0\n\tfor i := 0; i < len(nums); i++ {\n\t\tif nums[i]%2 == 1 {\n\t\t\todd = i\n\t\t\tbreak\n\t\t}\n\t}\n\treturn odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(first_odd(nums: [1, 3, 5]) == 1)",
            "assert(first_odd(nums: [2, 4, 1, 3]) == 1)",
            "assert(first_odd(nums: [8, 9, 1]) == 9)"
        ]
    },
    {
        "task_id": "808",
        "title": "check_K",
        "text": "/ Write a function to check if the given tuples contain the k or not.",
        "code": "\nfunc check_K(test_tup: [Int], K: Int) -> Bool {\n\tif len(test_tup) == 0 {\n\t\treturn false\n\t}\n\tif len(test_tup) == 1 {\n\t\treturn true\n\t}\n\tif K == 0 {\n\t\treturn true\n\t}\n\tif K == 1 {\n\t\treturn false\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(check_K(test_tup: [10, 4, 5, 6, 8], K: 6) == true)",
            "assert(check_K(test_tup: [1, 2, 3, 4, 5, 6], K: 7) == false)",
            "assert(check_K(test_tup: [7, 8, 9, 44, 11, 12], K: 11) == true)"
        ]
    },
    {
        "task_id": "809",
        "title": "check_smaller",
        "text": "/ Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.",
        "code": "\nfunc check_smaller(test_tup1: (Int, Int, Int), test_tup2: (Int, Int, Int)) -> Bool {\n\tif test_tup1.Len()!= test_tup2.Len() {\n\t\treturn false\n\t}\n\tfor i := 0; i < test_tup1.Len(); i++ {\n\t\tif test_tup1.At(i) < test_tup2.At(i) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(check_smaller(test_tup1: (1, 2, 3), test_tup2: (2, 3, 4)) == false)",
            "assert(check_smaller(test_tup1: (4, 5, 6), test_tup2: (3, 4, 5)) == true)",
            "assert(check_smaller(test_tup1: (11, 12, 13), test_tup2: (10, 11, 12)) == true)"
        ]
    },
    {
        "task_id": "80",
        "title": "tetrahedral_number",
        "text": "/ Write a function to find the nth tetrahedral number.",
        "code": "\nfunc tetrahedral_number(n: Int) -> Int {\n\tif n < 0 {\n\t\treturn 0\n\t}\n\tif n == 0 {\n\t\treturn 1\n\t}\n\tif n == 1 {\n\t\treturn 2\n\t}\n\tif n == 2 {\n\t\treturn 3\n\t}\n\tif n == 3 {\n\t\treturn 4\n\t}\n\tif n == 4 {\n\t\treturn 5\n\t}\n\tif n == 5 {\n\t\treturn 6\n\t}\n\tif n == 6 {\n\t\treturn 7\n\t}\n\tif n == 7 {\n\t\treturn 8\n\t}\n\tif n == 8 {\n\t\treturn 9\n\t}\n\tif n == 9 {\n\t\treturn 10\n\t}\n\tif n == 10 {\n\t\treturn 11\n\t}\n\tif n == 11 {\n\t\treturn 12\n\t}\n\tif n == 12 {\n\t\treturn 13\n\t}\n\tif n == 13 {\n\t\treturn 14\n\t}\n\tif n == 14 {\n\t\treturn 15\n\t}\n\tif n == 15 {\n\t\treturn 16\n\t}\n\tif n == 16 {\n\t\treturn 17\n\t}\n\tif n == 17 {\n\t\treturn 18\n\t}\n\tif n == 18 {\n\t\treturn 19\n\t}\n\tif n == 19 {\n\t\treturn 20\n\t}\n\tif n == 20 {\n\t\treturn 21\n\t}\n\tif n == 21 {\n\t\treturn 22\n\t}\n\tif n == 22 {\n\t\treturn 23\n\t}\n\tif n == 23 {\n\t\treturn 24\n\t}\n\tif n == 24 {\n\t\treturn 25\n\t}\n\tif n == 25 {\n\t\treturn 26\n\t}\n\tif n == 26 {\n\t\treturn 27\n\t}\n\tif n == 27 {\n\t\treturn 28\n\t}\n\tif n == 28 {\n\t\treturn 29\n\t}\n\tif n == 29 {\n\t\treturn 30\n\t}\n\tif n == 30 {\n\t\treturn 31\n\t}\n\tif n == 31 {\n\t\treturn 32\n\t}\n\tif n == 32 {\n\t\treturn 33\n\t}\n\tif n == 33\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(tetrahedral_number(n: 5) == 35)",
            "assert(tetrahedral_number(n: 6) == 56)",
            "assert(tetrahedral_number(n: 7) == 84)"
        ]
    },
    {
        "task_id": "83",
        "title": "get_Char",
        "text": "/ Write a swiftthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.",
        "code": "\nfunc get_Char(strr: String) -> String {\n\tvar char_strr string\n\tfor i := 0; i < len(strr); i++ {\n\t\tchar_strr += strr[i]\n\t}\n\treturn char_strr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(get_Char(strr: \"abc\") == \"f\")",
            "assert(get_Char(strr: \"gfg\") == \"t\")",
            "assert(get_Char(strr: \"ab\") == \"c\")"
        ]
    },
    {
        "task_id": "84",
        "title": "sequence",
        "text": "/ Write a function to find the nth number in the newman conway sequence.",
        "code": "\nfunc sequence(n: Int) -> Int {\n\tif n == 0 {\n\t\treturn 0\n\t}\n\treturn sequence(n-1) + sequence(n-2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(sequence(n: 10) == 6)",
            "assert(sequence(n: 2) == 1)",
            "assert(sequence(n: 3) == 2)"
        ]
    },
    {
        "task_id": "86",
        "title": "centered_hexagonal_number",
        "text": "/ Write a function to find nth centered hexagonal number.",
        "code": "\nfunc centered_hexagonal_number(n: Int) -> Int {\n\treturn n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod(n.Mod\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(centered_hexagonal_number(n: 10) == 271)",
            "assert(centered_hexagonal_number(n: 2) == 7)",
            "assert(centered_hexagonal_number(n: 9) == 217)"
        ]
    },
    {
        "task_id": "87",
        "title": "merge_dictionaries_three",
        "text": "/ Write a function to merge three dictionaries into a single dictionary.",
        "code": "\nfunc merge_dictionaries_three(dict1: [String : String], dict2: [String : String], dict3: [String : String]) -> [String : String] {\n\tvar result [][]String\n\tfor i := 0; i < len(dict1); i++ {\n\t\tresult = append(result, dict1[i])\n\t}\n\tfor i := 0; i < len(dict2); i++ {\n\t\tresult = append(result, dict2[i])\n\t}\n\tfor i := 0; i < len(dict3); i++ {\n\t\tresult = append(result, dict3[i])\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(merge_dictionaries_three(dict1: [\"R\" : \"Red\", \"B\" : \"Black\", \"P\" : \"Pink\"], dict2: [\"G\" : \"Green\", \"W\" : \"White\"], dict3: [\"O\" : \"Orange\", \"W\" : \"White\", \"B\" : \"Black\"]) == [\"B\" : \"Black\", \"R\" : \"Red\", \"P\" : \"Pink\", \"G\" : \"Green\", \"W\" : \"White\", \"O\" : \"Orange\"])",
            "assert(merge_dictionaries_three(dict1: [\"R\" : \"Red\", \"B\" : \"Black\", \"P\" : \"Pink\"], dict2: [\"G\" : \"Green\", \"W\" : \"White\"], dict3: [\"L\" : \"lavender\", \"B\" : \"Blue\"]) == [\"W\" : \"White\", \"P\" : \"Pink\", \"B\" : \"Black\", \"R\" : \"Red\", \"G\" : \"Green\", \"L\" : \"lavender\"])",
            "assert(merge_dictionaries_three(dict1: [\"R\" : \"Red\", \"B\" : \"Black\", \"P\" : \"Pink\"], dict2: [\"L\" : \"lavender\", \"B\" : \"Blue\"], dict3: [\"G\" : \"Green\", \"W\" : \"White\"]) == [\"B\" : \"Black\", \"P\" : \"Pink\", \"R\" : \"Red\", \"G\" : \"Green\", \"L\" : \"lavender\", \"W\" : \"White\"])"
        ]
    },
    {
        "task_id": "88",
        "title": "freq_count",
        "text": "/ Write a function to get the frequency of all the elements in an array, returned as a dictionary.",
        "code": "\nfunc freq_count(list1: [Int]) -> [Int : Int] {\n\tcount := 0\n\tfor _, elem := range list1 {\n\t\tcount += elem\n\t}\n\treturn [Int : Int]{count}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(freq_count(list1: [10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]) == [10 : 4, 20 : 4, 40 : 2, 50 : 2, 30 : 1])",
            "assert(freq_count(list1: [1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]) == [1 : 3, 2 : 2, 3 : 3, 4 : 3])",
            "assert(freq_count(list1: [5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]) == [10 : 1, 5 : 3, 6 : 2, 7 : 2, 4 : 2, 9 : 2])"
        ]
    },
    {
        "task_id": "89",
        "title": "closest_num",
        "text": "/ Write a function to find the closest smaller number than n.",
        "code": "\nfunc closest_num(N: Int) -> Int {\n\tif N == 0 {\n\t\treturn 0\n\t}\n\tif N == 1 {\n\t\treturn 1\n\t}\n\treturn closest_num(N-1) + closest_num(N-2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(closest_num(N: 11) == 10)",
            "assert(closest_num(N: 7) == 6)",
            "assert(closest_num(N: 12) == 11)"
        ]
    },
    {
        "task_id": "8",
        "title": "square_nums",
        "text": "/ Write a function to find squares of individual elements in an array.",
        "code": "\nfunc square_nums(nums: [Int]) -> [Int] {\n\tvar squares [Int]\n\tfor i := 0; i < len(nums); i++ {\n\t\tsquares = append(squares, nums[i]*nums[i])\n\t}\n\treturn squares\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(square_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])",
            "assert(square_nums(nums: [10, 20, 30]) == [100, 400, 900])",
            "assert(square_nums(nums: [12, 15]) == [144, 225])"
        ]
    },
    {
        "task_id": "90",
        "title": "len_log",
        "text": "/ Write a swiftthon function to find the length of the longest word.",
        "code": "\nfunc len_log(list1: [String]) -> Int {\n\tvar len int\n\tfor _, s := range list1 {\n\t\tif len < len_log(s) {\n\t\t\tlen = len_log(s)\n\t\t}\n\t}\n\treturn len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(len_log(list1: [\"python\", \"PHP\", \"bigdata\"]) == 7)",
            "assert(len_log(list1: [\"a\", \"ab\", \"abc\"]) == 3)",
            "assert(len_log(list1: [\"small\", \"big\", \"tall\"]) == 5)"
        ]
    },
    {
        "task_id": "91",
        "title": "find_substring",
        "text": "/ Write a function to check if a string is present as a substring in a given array of string values.",
        "code": "\nfunc find_substring(str1: [String], sub_str: String) -> Bool {\n\tfor i := 0; i < len(str1); i++ {\n\t\tif str1[i] == sub_str {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(find_substring(str1: [\"red\", \"black\", \"white\", \"green\", \"orange\"], sub_str: \"ack\") == true)",
            "assert(find_substring(str1: [\"red\", \"black\", \"white\", \"green\", \"orange\"], sub_str: \"abc\") == false)",
            "assert(find_substring(str1: [\"red\", \"black\", \"white\", \"green\", \"orange\"], sub_str: \"ange\") == true)"
        ]
    },
    {
        "task_id": "92",
        "title": "is_undulating",
        "text": "/ Write a function to check whether the given number is undulating or not.",
        "code": "\nfunc is_undulating(n: Int) -> Bool {\n\tif n == 0 {\n\t\treturn true\n\t}\n\tif n == 1 {\n\t\treturn false\n\t}\n\treturn is_undulating(n-1) || is_undulating(n-2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(is_undulating(n: 1212121) == true)",
            "assert(is_undulating(n: 1991) == false)",
            "assert(is_undulating(n: 121) == true)"
        ]
    },
    {
        "task_id": "93",
        "title": "power",
        "text": "/ Write a function to calculate the value of 'a' to the power 'b'.",
        "code": "\nfunc power(a: Int, b: Int) -> Int {\n\treturn a * b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(power(a: 3, b: 4) == 81)",
            "assert(power(a: 2, b: 3) == 8)",
            "assert(power(a: 5, b: 5) == 3125)"
        ]
    },
    {
        "task_id": "94",
        "title": "index_minimum",
        "text": "/ Given an array of tuples, write a function that returns the first value of the tuple with the smallest second value.",
        "code": "\nfunc index_minimum(test_list: [(String, Int)]) -> String {\n\tvar min_val Int\n\tvar min_val_str String\n\tfor _, test := range test_list {\n\t\tif test[0].Value == min_val {\n\t\t\tmin_val_str = test[0].Value.String()\n\t\t}\n\t}\n\treturn min_val_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(index_minimum(test_list: [(\"Rash\", 143), (\"Manjeet\", 200), (\"Varsha\", 100)]) == \"Varsha\")",
            "assert(index_minimum(test_list: [(\"Yash\", 185), (\"Dawood\", 125), (\"Sanya\", 175)]) == \"Dawood\")",
            "assert(index_minimum(test_list: [(\"Sai\", 345), (\"Salman\", 145), (\"Ayesha\", 96)]) == \"Ayesha\")"
        ]
    },
    {
        "task_id": "95",
        "title": "Find_Min_Length",
        "text": "/ Write a swiftthon function to find the length of the smallest array in an array of arrays.",
        "code": "\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n\tif len(lst) == 0 {\n\t\treturn 0\n\t}\n\tmin := lst[0]\n\tfor _, v := range lst {\n\t\tif v < min {\n\t\t\tmin = v\n\t\t}\n\t}\n\treturn min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)",
            "assert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)",
            "assert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)"
        ]
    },
    {
        "task_id": "96",
        "title": "divisor",
        "text": "/ Write a swiftthon function to find the number of divisors of a given integer.",
        "code": "\nfunc divisor(n: Int) -> Int {\n\tif n == 0 {\n\t\treturn 1\n\t}\n\treturn n.Mod(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(divisor(n: 15) == 4)",
            "assert(divisor(n: 12) == 6)",
            "assert(divisor(n: 9) == 3)"
        ]
    },
    {
        "task_id": "97",
        "title": "frequency_lists",
        "text": "/ Write a function to find frequency of each element in a flattened array of arrays, returned in a dictionary.",
        "code": "\nfunc frequency_lists(list1: [[Int]]) -> [Int : Int] {\n\tvar frequency_dict = make(map[Int]Int)\n\tfor _, list2 := range list1 {\n\t\tfor _, list3 := range list2 {\n\t\t\tfrequency_dict[list3] = frequency_dict[list3] + 1\n\t\t}\n\t}\n\treturn frequency_dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(frequency_lists(list1: [[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]) == [1 : 1, 2 : 3, 3 : 1, 4 : 1, 5 : 2, 6 : 1, 7 : 1, 8 : 1, 9 : 1])",
            "assert(frequency_lists(list1: [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1 : 1, 2 : 1, 3 : 1, 4 : 1, 5 : 1, 6 : 1, 7 : 1, 8 : 1, 9 : 1, 10 : 1, 11 : 1, 12 : 1])",
            "assert(frequency_lists(list1: [[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]) == [20 : 2, 30 : 2, 40 : 2, 17 : 1, 18 : 1, 16 : 1, 14 : 1, 13 : 1, 10 : 1])"
        ]
    },
    {
        "task_id": "99",
        "title": "decimal_to_binary",
        "text": "/ Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
        "code": "\nfunc decimal_to_binary(n: Int) -> String {\n\tif n.IsNegative() {\n\t\treturn \"-\" + decimal_to_binary(n.Sub(Int(0)))\n\t}\n\treturn decimal_to_binary(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(decimal_to_binary(n: 8) == \"1000\")",
            "assert(decimal_to_binary(n: 18) == \"10010\")",
            "assert(decimal_to_binary(n: 7) == \"111\")"
        ]
    },
    {
        "task_id": "9",
        "title": "find_Rotations",
        "text": "/ Write a swiftthon function to find the minimum number of rotations (greater than 0) required to get the same string.",
        "code": "\nfunc find_Rotations(str: String) -> Int {\n\trotations := 0\n\tfor i := 0; i < len(str); i++ {\n\t\tif str[i] == 'R' {\n\t\t\trotations++\n\t\t}\n\t}\n\treturn rotations\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \n",
        "test_list": [
            "assert(find_Rotations(str: \"aaaa\") == 1)",
            "assert(find_Rotations(str: \"ab\") == 2)",
            "assert(find_Rotations(str: \"abc\") == 3)"
        ]
    }
]