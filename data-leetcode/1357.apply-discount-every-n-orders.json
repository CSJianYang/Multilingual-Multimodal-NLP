[
    {
        "title": "Long Pressed Name",
        "question_content": "Your friend is typing his name into a keyboard. Sometimes, when typing a character c, the key might get long pressed, and the character will be typed 1 or more times.\nYou examine the typed characters of the keyboard. Return True if it is possible that it was your friends name, with some characters (possibly none) being long pressed.\n&nbsp;\nExample 1:\n\nInput: name = \"alex\", typed = \"aaleex\"\nOutput: true\nExplanation: 'a' and 'e' in 'alex' were long pressed.\n\nExample 2:\n\nInput: name = \"saeed\", typed = \"ssaaedd\"\nOutput: false\nExplanation: 'e' must have been pressed twice, but it was not in the typed output.\n\n&nbsp;\nConstraints:\n\n\t1 <= name.length, typed.length <= 1000\n\tname and typed consist of only lowercase English letters.",
        "solutions": [
            {
                "id": 183994,
                "title": "c-java-python-two-pointers",
                "content": "**C++:**\\n```\\n    bool isLongPressedName(string name, string typed) {\\n        int i = 0, m = name.length(), n = typed.length();\\n        for (int j = 0; j < n; ++j)\\n            if (i < m && name[i] == typed[j])\\n                ++i;\\n            else if (!j || typed[j] != typed[j - 1])\\n                return false;\\n        return i == m;\\n    }\\n```\\n\\n**Java:**\\n```\\n    public boolean isLongPressedName(String name, String typed) {\\n        int i = 0, m = name.length(), n = typed.length();\\n        for (int j = 0; j < n; ++j)\\n            if (i < m && name.charAt(i) == typed.charAt(j))\\n                ++i;\\n            else if (j == 0 || typed.charAt(j) != typed.charAt(j - 1))\\n                return false;\\n        return i == m;\\n    }\\n```\\n**Python:**\\n```\\n    def isLongPressedName(self, name, typed):\\n        i = 0\\n        for j in range(len(typed)):\\n            if i < len(name) and name[i] == typed[j]:\\n                i += 1\\n            elif j == 0 or typed[j] != typed[j - 1]:\\n                return False\\n        return i == len(name)\\n```\\n",
                "solutionTags": [],
                "code": "```\\n    bool isLongPressedName(string name, string typed) {\\n        int i = 0, m = name.length(), n = typed.length();\\n        for (int j = 0; j < n; ++j)\\n            if (i < m && name[i] == typed[j])\\n                ++i;\\n            else if (!j || typed[j] != typed[j - 1])\\n                return false;\\n        return i == m;\\n    }\\n```\n```\\n    public boolean isLongPressedName(String name, String typed) {\\n        int i = 0, m = name.length(), n = typed.length();\\n        for (int j = 0; j < n; ++j)\\n            if (i < m && name.charAt(i) == typed.charAt(j))\\n                ++i;\\n            else if (j == 0 || typed.charAt(j) != typed.charAt(j - 1))\\n                return false;\\n        return i == m;\\n    }\\n```\n```\\n    def isLongPressedName(self, name, typed):\\n        i = 0\\n        for j in range(len(typed)):\\n            if i < len(name) and name[i] == typed[j]:\\n                i += 1\\n            elif j == 0 or typed[j] != typed[j - 1]:\\n                return False\\n        return i == len(name)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 184488,
                "title": "java-one-pass-solution-4ms-with-o-1-extra-space",
                "content": "The idea evert letter in **typed** should be the same as **name**, but \"shifted\" (or spreaded to be more exact) to some number of positions.\\nThat\\'s why, we go through **typed** and trying to identify if we have a corrponding letter in **name**. At the same time, we calculate the difference in positions of these corresponding letters in **typed** and **name**. In other words, difference identicates how many \"additional\" letters contains **typed**. For example:\\nname: **AABCD**\\ntyped: **AAAABBCDDDDDD**\\n\\nAt the beginning difference is 0.\\nWe go through **AAAABBCDDDDDD**:\\nCompare first letter of **typed** and **name**:\\n![image](https://assets.leetcode.com/users/olsh/image_1540209344.png)\\n\\n\\nThe are equal -> all is ok, go further, difference remains unchanged\\n![image](https://assets.leetcode.com/users/olsh/image_1540209466.png)\\n\\n\\nAgain equal -> go next:\\n![image](https://assets.leetcode.com/users/olsh/image_1540210445.png)\\n\\n\\nNot equal, but we can link **A** (**typed**)  to  **A** (**name**) from the previous step. As a result, our difference was incremented:\\n![image](https://assets.leetcode.com/users/olsh/image_1540210721.png)\\n\\n\\nThe same will do next: **A** (**typed**) != **B** (**name**), but we can link **A** (**typed**) to **A** (**name**) from the previous step -> the difference was incremented again:\\n![image](https://assets.leetcode.com/users/olsh/image_1540210926.png)\\n\\n\\n\\nAt the end of all these manipulations, we see the following:\\n![image](https://assets.leetcode.com/users/olsh/image_1540208693.png)\\nThe whole implementation:\\n```\\nclass Solution {\\n public boolean isLongPressedName(String name, String typed) {\\n  int difference = 0;\\n  for (int i = 0; i < typed.length();) {\\n\\t//letters are equal -> go next\\n   if (difference <= i && i - difference < name.length() && typed.charAt(i) == name.charAt(i - difference)) {\\n    i++;\\n   } \\n\\t // letters are not equal,  but we can link typed letter to name letter from the previous iteration\\n\\t else if (difference < i && i - difference - 1 < name.length() && typed.charAt(i) == name.charAt(i - difference - 1)) {\\n    difference++;\\n   } else return false;\\n  }\\n\\t// check that at the end of name there\\'s no odd symbols\\n    return typed.length() - difference == name.length();\\n }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n public boolean isLongPressedName(String name, String typed) {\\n  int difference = 0;\\n  for (int i = 0; i < typed.length();) {\\n\\t//letters are equal -> go next\\n   if (difference <= i && i - difference < name.length() && typed.charAt(i) == name.charAt(i - difference)) {\\n    i++;\\n   } \\n\\t // letters are not equal,  but we can link typed letter to name letter from the previous iteration\\n\\t else if (difference < i && i - difference - 1 < name.length() && typed.charAt(i) == name.charAt(i - difference - 1)) {\\n    difference++;\\n   } else return false;\\n  }\\n\\t// check that at the end of name there\\'s no odd symbols\\n    return typed.length() - difference == name.length();\\n }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 238723,
                "title": "java-2-pointers-natural-general-easiest-to-understand-code",
                "content": "Don\\'t have much time, but the keys are:\\n1. 2 pointers `i` and `j` are handling the same characters at the same time(let\\'s say `c`)\\n2. The count of consecutive `c` in `typed` >= the count of  consecutive  `c` in `name`\\n\\n```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int m = name.length(), n = typed.length();\\n        int i = 0, j = 0;\\n        \\n        while(i < m && j < n){\\n            char c1 = name.charAt(i), c2 = typed.charAt(j);\\n            if(c1 != c2) return false; // we are handling different chars, no!\\n            \\n\\t\\t\\t// count of consecutive c1/c2\\n            int count1 = 0; \\n            while(i < m && name.charAt(i) == c1){\\n                count1++;\\n                i++;\\n            }\\n            \\n\\t\\t\\t// count of consecutive c1/c2\\n            int count2 = 0; \\n            while(j < n && typed.charAt(j) == c2){\\n                count2++;\\n                j++;\\n            }\\n            \\n            if(count2 < count1) return false;\\n        }\\n        \\n\\t\\t// they both reach the end\\n        return i == m && j == n;\\n    }\\n}\\n```\\n\\ntime complexity: `O(m + n)`\\nspace complexity: `O(1)`",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int m = name.length(), n = typed.length();\\n        int i = 0, j = 0;\\n        \\n        while(i < m && j < n){\\n            char c1 = name.charAt(i), c2 = typed.charAt(j);\\n            if(c1 != c2) return false; // we are handling different chars, no!\\n            \\n\\t\\t\\t// count of consecutive c1/c2\\n            int count1 = 0; \\n            while(i < m && name.charAt(i) == c1){\\n                count1++;\\n                i++;\\n            }\\n            \\n\\t\\t\\t// count of consecutive c1/c2\\n            int count2 = 0; \\n            while(j < n && typed.charAt(j) == c2){\\n                count2++;\\n                j++;\\n            }\\n            \\n            if(count2 < count1) return false;\\n        }\\n        \\n\\t\\t// they both reach the end\\n        return i == m && j == n;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 183929,
                "title": "c-2-lines-accepted-and-5-lines-accurate",
                "content": "This very naive solution got accepted. It fails of course for any test case where ```typed``` contains extra letters.\\n```\\nbool isLongPressedName(string name, string typed, int i = 0) {\\n    for (auto c : typed) i += name[i] == c;\\n    return i == name.size();\\n}\\n```\\nHere is a bit more lengthy but accurate solution:\\n```\\nbool isLongPressedName(string name, string typed, int i = 0, int j = 0) {\\n    while (j < typed.size()) {\\n        if (i < name.size() && name[i] == typed[j]) ++i, ++j;\\n        else if (i > 0 && name[i - 1] == typed[j]) ++j;\\n        else return false;\\n    }\\n    return i == name.size();\\n}\\n```",
                "solutionTags": [],
                "code": "```typed```\n```\\nbool isLongPressedName(string name, string typed, int i = 0) {\\n    for (auto c : typed) i += name[i] == c;\\n    return i == name.size();\\n}\\n```\n```\\nbool isLongPressedName(string name, string typed, int i = 0, int j = 0) {\\n    while (j < typed.size()) {\\n        if (i < name.size() && name[i] == typed[j]) ++i, ++j;\\n        else if (i > 0 && name[i - 1] == typed[j]) ++j;\\n        else return false;\\n    }\\n    return i == name.size();\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1312505,
                "title": "java-two-pointer-1ms-solution-faster-than-100-solutions",
                "content": "Two Pointer Easy Approach with added comments to understand. Please do up-vote if you do find this solution helpful.\\n\\n\\n\\'\\'\\'\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        \\n        int i=1 , j=1;\\n        \\n        //Checking the first character\\n        if(name.charAt(0) != typed.charAt(0))\\n            return false;\\n        \\n        \\n        //Traversing the Strings using two pointer\\n        while(i<name.length() && j<typed.length()){\\n            if(name.charAt(i) == typed.charAt(j)){\\n                i++;\\n                j++;\\n            }\\n            \\n            else {  \\n                if(typed.charAt(j) == typed.charAt(j-1))\\n                    j++;\\n                \\n                else\\n                    return false;    \\n            }\\n        }\\n        \\n        \\n        //Case 1 : i and j both reached end of the String\\n        if(i == name.length() && j == typed.length())\\n            return true;\\n        \\n        //Case 2 : First word is not yet complete traversed. The second word is complete\\n        else if(i != name.length() && j == typed.length())\\n            return false;\\n        \\n        //Case 3: First word complete. The second word still has some characters left.\\n        else{\\n            while(j != typed.length()){\\n                if(typed.charAt(j) == typed.charAt(j-1))\\n                    j++;\\n                \\n                else\\n                    return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n\\'\\'\\'",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "class Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        \\n        int i=1 , j=1;\\n        \\n        //Checking the first character\\n        if(name.charAt(0) != typed.charAt(0))\\n            return false;\\n        \\n        \\n        //Traversing the Strings using two pointer\\n        while(i<name.length() && j<typed.length()){\\n            if(name.charAt(i) == typed.charAt(j)){\\n                i++;\\n                j++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 698368,
                "title": "easy-python-solution",
                "content": "```\\nclass Solution(object):\\n    def isLongPressedName(self, name, typed):\\n        \"\"\"\\n        :type name: str\\n        :type typed: str\\n        :rtype: bool\\n        \"\"\"\\n        j = 0\\n        i = 0\\n        n = len(name)\\n        t = len(typed)\\n        \\n        while j < t:\\n            if i < n and name[i] == typed[j]:\\n                i +=1\\n            elif j == 0 or typed[j] != typed[j-1]:\\n                return False\\n            j +=1\\n        return i == n\\n\\t\\t```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def isLongPressedName(self, name, typed):\\n        \"\"\"\\n        :type name: str\\n        :type typed: str\\n        :rtype: bool\\n        \"\"\"\\n        j = 0\\n        i = 0\\n        n = len(name)\\n        t = len(typed)\\n        \\n        while j < t:\\n            if i < n and name[i] == typed[j]:\\n                i +=1\\n            elif j == 0 or typed[j] != typed[j-1]:\\n                return False\\n            j +=1\\n        return i == n\\n\\t\\t```",
                "codeTag": "Java"
            },
            {
                "id": 220554,
                "title": "c-4ms-simple-answer",
                "content": "\\n    bool isLongPressedName(string name, string typed) {\\n        int i =0; int j =0;\\n        while(i<name.size() || j <typed.size()) {\\n            char current = name[i];\\n            if(name[i] != typed[j]) return false;\\n            i++;\\n            j++;\\n            if(name[i] != typed[j]) {\\n                while(current == typed[j]) j++;\\n            } \\n        }\\n        return true;\\n    };",
                "solutionTags": [],
                "code": "\\n    bool isLongPressedName(string name, string typed) {\\n        int i =0; int j =0;\\n        while(i<name.size() || j <typed.size()) {\\n            char current = name[i];\\n            if(name[i] != typed[j]) return false;\\n            i++;\\n            j++;\\n            if(name[i] != typed[j]) {\\n                while(current == typed[j]) j++;\\n            } \\n        }\\n        return true;\\n    };",
                "codeTag": "Unknown"
            },
            {
                "id": 183965,
                "title": "short-java-solution",
                "content": "```java\\npublic boolean isLongPressedName(String nameStr, String typeStr) {\\n        char[] name = nameStr.toCharArray(), typed = typeStr.toCharArray();\\n        int n = 0, t = 0;\\n        while (n < name.length && t < typed.length) {\\n            int need = 1;\\n            char c = name[n++];\\n            while (n < name.length && c == name[n]) {\\n                n++;\\n                need++;\\n            }\\n            while (t < typed.length && typed[t] == c) {\\n                need--;\\n                t++;\\n            }\\n            if (need > 0)\\n                return false;\\n        }\\n        return n == name.length && t == typed.length;\\n    }",
                "solutionTags": [],
                "code": "```java\\npublic boolean isLongPressedName(String nameStr, String typeStr) {\\n        char[] name = nameStr.toCharArray(), typed = typeStr.toCharArray();\\n        int n = 0, t = 0;\\n        while (n < name.length && t < typed.length) {\\n            int need = 1;\\n            char c = name[n++];\\n            while (n < name.length && c == name[n]) {\\n                n++;\\n                need++;\\n            }\\n            while (t < typed.length && typed[t] == c) {\\n                need--;\\n                t++;\\n            }\\n            if (need > 0)\\n                return false;\\n        }\\n        return n == name.length && t == typed.length;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1343001,
                "title": "python3-2-pointers",
                "content": "```\\nclass Solution:\\n    def isLongPressedName(self, name: str, typed: str) -> bool:\\n        ni = 0       # index of name\\n        ti = 0       # index of typed\\n        while ni <= len(name) and ti < len(typed):\\n            if ni < len(name) and typed[ti] == name[ni]:\\n                ti += 1\\n                ni += 1\\n            elif typed[ti] == name[ni-1] and ni != 0:\\n                ti += 1\\n            else:\\n                return False\\n            \\n        return ni == len(name) and ti == len(typed)\\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution:\\n    def isLongPressedName(self, name: str, typed: str) -> bool:\\n        ni = 0       # index of name\\n        ti = 0       # index of typed\\n        while ni <= len(name) and ti < len(typed):\\n            if ni < len(name) and typed[ti] == name[ni]:\\n                ti += 1\\n                ni += 1\\n            elif typed[ti] == name[ni-1] and ni != 0:\\n                ti += 1\\n            else:\\n                return False\\n            \\n        return ni == len(name) and ti == len(typed)\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1896406,
                "title": "0-ms-100-faster-c-clean-easy-two-pointers",
                "content": "\\tclass Solution {\\n\\tpublic:\\n\\t\\tbool isLongPressedName(string name, string typed) {\\n\\t\\t\\tif(name.size()>typed.size())\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\tint i=0,j=0;\\n\\t\\t\\twhile(i<name.size() && j<typed.size()){\\n\\t\\t\\t\\tif(name[i]==typed[j]){\\n\\t\\t\\t\\t\\ti++;\\n\\t\\t\\t\\t\\tj++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse if(j!=0 && typed[j]==typed[j-1]){\\n\\t\\t\\t\\t\\tj++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\twhile(j<typed.size()){\\n\\t\\t\\t\\tif(typed[j]==typed[j-1])\\n\\t\\t\\t\\t\\tj++;\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t\\treturn i==name.size();\\n\\t\\t}\\n\\t};\\n\\n\\tfeel free to ask your doubts :)\\n\\tand pls upvote if it was helpful :)",
                "solutionTags": [
                    "C",
                    "Two Pointers"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tbool isLongPressedName(string name, string typed) {\\n\\t\\t\\tif(name.size()>typed.size())\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\tint i=0,j=0;\\n\\t\\t\\twhile(i<name.size() && j<typed.size()){\\n\\t\\t\\t\\tif(name[i]==typed[j]){\\n\\t\\t\\t\\t\\ti++;\\n\\t\\t\\t\\t\\tj++;\\n\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 843049,
                "title": "easy-understanding-3-ways-c",
                "content": "```\\n//1.[ faster than 100.00%][Runtime: 0 ms]\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        if(name[0]!=typed[0]) return false;\\n        int i=0,j=0;\\n        while(i<typed.size() || j<name.size()){\\n            if(typed[i]==name[j]) j++;\\n            else if(typed[i]!=typed[i-1]) return false;\\n            i++;\\n        }\\n        return true;\\n    }\\n};\\n//2.[ faster than 100.00%][Runtime: 0ms]\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n    if(name.size()>typed.size()) return false;\\n    \\n    if(name[0]!=typed[0]) return false;\\n    \\n    int i=1,j=1;\\n    while(i<name.size() && j<typed.size()){\\n        if(name[i]==typed[j])\\n            i++,j++;\\n        else if(typed[j]==typed[j-1])\\n            j++;\\n        else\\n            return false;\\n    }\\n    \\n    while(j<typed.size()){\\n        if(typed[j]!=typed[j-1]) return false;\\n        j++;\\n    }\\n    \\n    if(i==name.size())\\n        return true;\\n    else\\n        return false;\\n    }\\n};\\n//3.[Runtime: 4 ms]\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) \\n    {\\n        for(int i=0; i<typed.size(); i++){\\n            while((i+1 < typed.size()) && (typed[i] == typed[i+1]) && (name[i+1] != typed[i+1]))\\n                 typed.erase(i+1, 1);\\n        }\\n        \\n        if(name == typed)\\n            return true;\\n        return false;\\n    }\\n};\\n```\\n**Feel free to ask any question in the comment section.**\\nI hope that you\\'ve found the solution useful.\\nIn that case, **please do upvote and encourage me** to on my quest to document all leetcode problems\\uD83D\\uDE03\\nHappy Coding :)\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n//1.[ faster than 100.00%][Runtime: 0 ms]\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        if(name[0]!=typed[0]) return false;\\n        int i=0,j=0;\\n        while(i<typed.size() || j<name.size()){\\n            if(typed[i]==name[j]) j++;\\n            else if(typed[i]!=typed[i-1]) return false;\\n            i++;\\n        }\\n        return true;\\n    }\\n};\\n//2.[ faster than 100.00%][Runtime: 0ms]\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n    if(name.size()>typed.size()) return false;\\n    \\n    if(name[0]!=typed[0]) return false;\\n    \\n    int i=1,j=1;\\n    while(i<name.size() && j<typed.size()){\\n        if(name[i]==typed[j])\\n            i++,j++;\\n        else if(typed[j]==typed[j-1])\\n            j++;\\n        else\\n            return false;\\n    }\\n    \\n    while(j<typed.size()){\\n        if(typed[j]!=typed[j-1]) return false;\\n        j++;\\n    }\\n    \\n    if(i==name.size())\\n        return true;\\n    else\\n        return false;\\n    }\\n};\\n//3.[Runtime: 4 ms]\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) \\n    {\\n        for(int i=0; i<typed.size(); i++){\\n            while((i+1 < typed.size()) && (typed[i] == typed[i+1]) && (name[i+1] != typed[i+1]))\\n                 typed.erase(i+1, 1);\\n        }\\n        \\n        if(name == typed)\\n            return true;\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1214637,
                "title": "java-100ms-two-pointer-solution",
                "content": "class Solution {\\n\\n    public boolean isLongPressedName(String name, String typed) {\\n        \\n\\t\\tint n = name.length();\\n        int m = typed.length();\\n        int j = 0;\\n        char last = \\'@\\';\\n                \\n        for(int i = 0; i < m; i++){\\n            \\n            if(j < n && name.charAt(j) == typed.charAt(i)){\\n            \\n                last = typed.charAt(i);\\n                j++;\\n            }\\n            else if(typed.charAt(i) != last) {\\n                return false;\\n            }\\n        }\\n        \\n        \\n        return j == n;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "class Solution {\\n\\n    public boolean isLongPressedName(String name, String typed) {\\n        \\n\\t\\tint n = name.length();\\n        int m = typed.length();\\n        int j = 0;\\n        char last = \\'@\\';\\n                \\n        for(int i = 0; i < m; i++){\\n            \\n            if(j < n && name.charAt(j) == typed.charAt(i)){\\n            \\n                last = typed.charAt(i);\\n                j++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 199144,
                "title": "7-line-python-beats-100",
                "content": "The idea is to iterate through the `typed` string, because it\\'s longer, checking against a particular location in `name` as you go. There are only a couple of possibilities:\\n\\n1. There is a match (`name[i] == typed[j]`). In this case you want to increment both pointers.\\n2. There isn\\'t a match `and` (given by `else` condition to case 1) there also isn\\'t a match to the *previous* character in `name` (`not name[i-1] == typed[j]`), in which case it\\'s clear the strings don\\'t meet the condition.\\n\\nNote you also have to be careful with the pointer `i` in to `name`, because it starts off not large enough to index `name` at `i-1`, and it can keep growing so long as there are matches. So ensure it\\'s greater than zero before entering the second condition, and cap it at `len(name)` for the cases like `[\\'vtkgn\\', \\'vttkgnn\\']`: `i` ends up being 5 at the end there while `j` keeps running along the extra `\\'n\\'`s, so we fall in to the second condition and check `name[i-1]` against `typed[j]`.\\n\\nIf we violate both conditions, we know the things don\\'t match, so we can return `False` immediately. If we meet both conditions for the duration of `typed`, then we only have to make sure we\\'ve also gotten entirely through the `name` so we catch cases like `[\\'pyplrz\\', \\'ppyypllr\\']`.\\n\\n        i = 0\\n        for j in range(len(typed)):\\n            if i < len(name) and name[i] == typed[j]:\\n                i += 1\\n            elif not i > 0 and name[i-1] == typed[j]:\\n                return False\\n        return i == len(name)",
                "solutionTags": [],
                "code": "The idea is to iterate through the `typed` string, because it\\'s longer, checking against a particular location in `name` as you go. There are only a couple of possibilities:\\n\\n1. There is a match (`name[i] == typed[j]`). In this case you want to increment both pointers.\\n2. There isn\\'t a match `and` (given by `else` condition to case 1) there also isn\\'t a match to the *previous* character in `name` (`not name[i-1] == typed[j]`), in which case it\\'s clear the strings don\\'t meet the condition.\\n\\nNote you also have to be careful with the pointer `i` in to `name`, because it starts off not large enough to index `name` at `i-1`, and it can keep growing so long as there are matches. So ensure it\\'s greater than zero before entering the second condition, and cap it at `len(name)` for the cases like `[\\'vtkgn\\', \\'vttkgnn\\']`: `i` ends up being 5 at the end there while `j` keeps running along the extra `\\'n\\'`s, so we fall in to the second condition and check `name[i-1]` against `typed[j]`.\\n\\nIf we violate both conditions, we know the things don\\'t match, so we can return `False` immediately. If we meet both conditions for the duration of `typed`, then we only have to make sure we\\'ve also gotten entirely through the `name` so we catch cases like `[\\'pyplrz\\', \\'ppyypllr\\']`.\\n\\n        i = 0\\n        for j in range(len(typed)):\\n            if i < len(name) and name[i] == typed[j]:\\n                i += 1\\n            elif not i > 0 and name[i-1] == typed[j]:\\n                return False\\n        return i == len(name)",
                "codeTag": "Unknown"
            },
            {
                "id": 2967326,
                "title": "java-two-pointer-explaination-100-faster",
                "content": "# Intuition\\nMaintain two pointer i and j to traverse both the string. We have to check 4 edge cases in this question.\\n# Approach\\ni=0 pointing to \"name\" string and j=0 pointing to \"typed\" string.\\n1. If char at index 0 in both name and typed is not equal:\\n   return false; Example: name: \"rick\" | typed: \"kric\"\\n\\n2. if length of name is greater than typed:\\n   return false;\\n\\n3. main logic goes in step 3:\\n   Run a loop while i<n && j<m:\\n    if char at i and char at j is equal increment both i++ and j++\\n\\nelse{\\ncheck if char at j is equal to the char at i-1: if \"yes\": j++;\\nBy doing this we are checking that whether the char at j index is long pressed of previous char of \"name\" string.\\n}\\nelse{\\nreturn false;\\n}\\n\\n4. suppose you completely traversed string name and there are still characters remaing in string \"typed\" to traverse.\\n5. check if char at last index of \"name\" is getting repeated in string \"typed\".\\nExample: name: \"alex\" | types: \"aaleexa\"\\n\\n6. if j is completely traversed but i is still have some char to check: return false\\nif(i<n){\\nreturn false;\\n}\\nExample: name: \"pyplrz\" | typed: \"ppyypllr\"\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int n = name.length();\\n        int m = typed.length();\\n        int i=0;\\n        int j=0;\\n        if(name.charAt(0) != typed.charAt(0)) //step 1\\n            return false;\\n        if(n>m){            // step 2\\n            return false;\\n        }\\n        while(i<n && j<m){    //step 3\\n            if(name.charAt(i) == typed.charAt(j)){\\n                i++;\\n                j++;\\n            }\\n            else if(name.charAt(i-1) == typed.charAt(j)){\\n                j++;\\n            }\\n            else{\\n                return false;\\n            }\\n        }\\n        while(j<m){       //Step 4 & 5\\n            if(name.charAt(i-1) == typed.charAt(j)){\\n                j++;\\n            }\\n            else{\\n                return false;\\n            }\\n        }\\n        if(i<n){      // step 6\\n            return false;\\n        }\\n        return true;       \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int n = name.length();\\n        int m = typed.length();\\n        int i=0;\\n        int j=0;\\n        if(name.charAt(0) != typed.charAt(0)) //step 1\\n            return false;\\n        if(n>m){            // step 2\\n            return false;\\n        }\\n        while(i<n && j<m){    //step 3\\n            if(name.charAt(i) == typed.charAt(j)){\\n                i++;\\n                j++;\\n            }\\n            else if(name.charAt(i-1) == typed.charAt(j)){\\n                j++;\\n            }\\n            else{\\n                return false;\\n            }\\n        }\\n        while(j<m){       //Step 4 & 5\\n            if(name.charAt(i-1) == typed.charAt(j)){\\n                j++;\\n            }\\n            else{\\n                return false;\\n            }\\n        }\\n        if(i<n){      // step 6\\n            return false;\\n        }\\n        return true;       \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2521026,
                "title": "c-looping-over-typed-and-use-pointer-into-name-easy-to-understand",
                "content": "This is basically two pointers, but since we loop over all of ```typed``` we can just use a range-based loop.\\n\\n```\\n    bool isLongPressedName(const string& name, const string& typed) {\\n        int i = 0;\\n        for (char t : typed) {\\n            if (i < size(name) && name[i] == t) {\\n                // We have not reached the end of |name| and the\\n                // chararters match.\\n                ++i;\\n            } else if (!(i > 0 && name[i - 1] == t)) {\\n                // |typed| has a character that\\'s not equal to the\\n                // current and previous character in |name|.\\n                return false;\\n            }\\n        }\\n        // Have we matched all characters?\\n        return i == size(name);\\n    }\\n```\\n\\n**Complexity Analysis**\\n\\n* Time Complexity: ```O(size(typed))```, we loop over all of |typed| and look at most as many characters in |name|.\\n* Space Complexity: ```O(1)```, only loop variables\\n\\n\\n_As always: Feedback, questions, and comments are welcome. Leaving an up-vote sparks joy! :)_\\n\\n**p.s. Join us on the [LeetCode The Hard Way Discord Server](https://discord.gg/hFUyVyWy2E)!**",
                "solutionTags": [
                    "C"
                ],
                "code": "```typed```\n```\\n    bool isLongPressedName(const string& name, const string& typed) {\\n        int i = 0;\\n        for (char t : typed) {\\n            if (i < size(name) && name[i] == t) {\\n                // We have not reached the end of |name| and the\\n                // chararters match.\\n                ++i;\\n            } else if (!(i > 0 && name[i - 1] == t)) {\\n                // |typed| has a character that\\'s not equal to the\\n                // current and previous character in |name|.\\n                return false;\\n            }\\n        }\\n        // Have we matched all characters?\\n        return i == size(name);\\n    }\\n```\n```O(size(typed))```\n```O(1)```",
                "codeTag": "Unknown"
            },
            {
                "id": 512597,
                "title": "javascript-two-pointers",
                "content": "```javascript\\n/**\\n * @param {string} name\\n * @param {string} typed\\n * @return {boolean}\\n */\\nvar isLongPressedName = function(name, typed) {\\n  let j = 0;\\n  for (let i = 0; i < typed.length; i++) {\\n    if (typed[i] === name[j]) {\\n      j++;\\n    } else if (typed[i] === name[j - 1]) {\\n      continue;\\n    } else {\\n      return false;\\n    }\\n  }\\n  return j === name.length;\\n};\\n```\\n\\n* 71/71 cases passed (48 ms)\\n* Your runtime beats 98.18 % of javascript submissions\\n* Your memory usage beats 100 % of javascript submissions (35.6 MB)",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```javascript\\n/**\\n * @param {string} name\\n * @param {string} typed\\n * @return {boolean}\\n */\\nvar isLongPressedName = function(name, typed) {\\n  let j = 0;\\n  for (let i = 0; i < typed.length; i++) {\\n    if (typed[i] === name[j]) {\\n      j++;\\n    } else if (typed[i] === name[j - 1]) {\\n      continue;\\n    } else {\\n      return false;\\n    }\\n  }\\n  return j === name.length;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 183969,
                "title": "c-quick-and-easy-just-learned-after-the-contest",
                "content": "Oct. 20, 2018\\nIt is an easy level algorithm. I have to learn how to write an elegant solution after the contest, now it is 9:40 PM Oct. 20, 2018. Now there are only 30 discuss, I can easily figure out which one is most easy to follow. \\n\\nI wrote one and added some comment in the code to make it more readable. \\n\\n```\\npublic class Solution {\\n    /// <summary>\\n        /// learn to write very elegant code based on the discuss:\\n        /// https://leetcode.com/problems/long-pressed-name/discuss/183929/C%2B%2B-2-lines-accepted-and-5-lines-accurate\\n        /// </summary>\\n        /// <param name=\"name\"></param>\\n        /// <param name=\"typed\"></param>\\n        /// <param name=\"index\"></param>\\n        /// <param name=\"indexTyped\"></param>\\n        /// <returns></returns>\\n        public  bool IsLongPressedName(string name, string typed, int index = 0, int indexTyped = 0) {\\n            while (indexTyped < typed.Length) {\\n                //  match current\\n                if (index < name.Length && name[index] == typed[indexTyped])\\n                {\\n                    index++;\\n                    indexTyped++;\\n                }\\n                // match previous one\\n                else if (index > 0 && name[index - 1] == typed[indexTyped])\\n                {\\n                    ++indexTyped;\\n                }\\n                else\\n                {\\n                    return false;\\n                }\\n            }\\n\\n            // make sure that original string is iterated completely. \\n            return index == name.Length;\\n        }\\n}\\n```\\n\\n\\n",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    /// <summary>\\n        /// learn to write very elegant code based on the discuss:\\n        /// https://leetcode.com/problems/long-pressed-name/discuss/183929/C%2B%2B-2-lines-accepted-and-5-lines-accurate\\n        /// </summary>\\n        /// <param name=\"name\"></param>\\n        /// <param name=\"typed\"></param>\\n        /// <param name=\"index\"></param>\\n        /// <param name=\"indexTyped\"></param>\\n        /// <returns></returns>\\n        public  bool IsLongPressedName(string name, string typed, int index = 0, int indexTyped = 0) {\\n            while (indexTyped < typed.Length) {\\n                //  match current\\n                if (index < name.Length && name[index] == typed[indexTyped])\\n                {\\n                    index++;\\n                    indexTyped++;\\n                }\\n                // match previous one\\n                else if (index > 0 && name[index - 1] == typed[indexTyped])\\n                {\\n                    ++indexTyped;\\n                }\\n                else\\n                {\\n                    return false;\\n                }\\n            }\\n\\n            // make sure that original string is iterated completely. \\n            return index == name.Length;\\n        }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 183920,
                "title": "python-one-liner",
                "content": "itertools.groupby() and itertools.zip_longest() are used\\n```\\nfrom itertools import zip_longest, groupby\\nclass Solution:\\n    def isLongPressedName(self, name, typed):\\n        \"\"\"\\n        :type name: str\\n        :type typed: str\\n        :rtype: bool\\n        \"\"\"\\n        return all(ch1 == ch2 and len(list(g1)) <= len(list(g2)) for ((ch1, g1), (ch2, g2)) in zip_longest(groupby(name), groupby(typed), fillvalue=(None, None)))\\n```\\nCheck the below example for groupby() and zip_longest()\\n![image](https://assets.leetcode.com/users/yaqizhang/image_1540097319.png)\\n",
                "solutionTags": [],
                "code": "```\\nfrom itertools import zip_longest, groupby\\nclass Solution:\\n    def isLongPressedName(self, name, typed):\\n        \"\"\"\\n        :type name: str\\n        :type typed: str\\n        :rtype: bool\\n        \"\"\"\\n        return all(ch1 == ch2 and len(list(g1)) <= len(list(g2)) for ((ch1, g1), (ch2, g2)) in zip_longest(groupby(name), groupby(typed), fillvalue=(None, None)))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3671243,
                "title": "beginner-friendly-approach-o-n-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {    \\n        int i =0;\\n        if(name[0]!=typed[0]){\\n            return false;\\n        }\\n        \\n       for(int j =0; j<typed.length();j++){\\n           if(name[i]==typed[j]){\\n               i++;\\n           }\\n           if(name[i] != typed[j]  && name[i-1] != typed[j]){\\n               return false;\\n           }\\n       }\\n     \\n\\n    if(i==name.length()){\\n        return true;\\n    }\\n    return false;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {    \\n        int i =0;\\n        if(name[0]!=typed[0]){\\n            return false;\\n        }\\n        \\n       for(int j =0; j<typed.length();j++){\\n           if(name[i]==typed[j]){\\n               i++;\\n           }\\n           if(name[i] != typed[j]  && name[i-1] != typed[j]){\\n               return false;\\n           }\\n       }\\n     \\n\\n    if(i==name.length()){\\n        return true;\\n    }\\n    return false;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1956961,
                "title": "java-0ms-100-faster-linear-solution",
                "content": "# Please Upvote If You Find This Helpful\\n![image](https://assets.leetcode.com/users/images/f02f68dd-dd45-4303-8fc7-27c163511e71_1650192077.1112297.png)\\n```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        if (name.charAt(0) != typed.charAt(0)) return false;\\n        int i = 1;\\n        int j = 1;\\n        while (i < typed.length()) {\\n            if (j < name.length() && typed.charAt(i) == name.charAt(j)) {\\n                i++;\\n                j++;\\n            }\\n            else if (typed.charAt(i) == name.charAt(j - 1)) i++;\\n            else return false;\\n        }\\n        return j == name.length();\\n    }\\n}\\n```\\n# Please Upvote If You Find This Helpful",
                "solutionTags": [
                    "Java",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        if (name.charAt(0) != typed.charAt(0)) return false;\\n        int i = 1;\\n        int j = 1;\\n        while (i < typed.length()) {\\n            if (j < name.length() && typed.charAt(i) == name.charAt(j)) {\\n                i++;\\n                j++;\\n            }\\n            else if (typed.charAt(i) == name.charAt(j - 1)) i++;\\n            else return false;\\n        }\\n        return j == name.length();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1886760,
                "title": "java-simple-solution-o-n",
                "content": "Two pointers. One pointer *i* counts how many times char appears in name, the other pointer *j* finds the same char in typed and offsets the count. At the end check if ponter *j* has reached the end of typed.\\n```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        if (name == null || name.length() == 0) return false;\\n        if (typed.length() < name.length()) return false;\\n        if (typed.length() == name.length()) return name.equals(typed);\\n        int i = 0;\\n        int j = 0;\\n        while (i < name.length()) {\\n            char nameChar = name.charAt(i);\\n            int count = 1;\\n            i++;\\n            while (i < name.length() && name.charAt(i) == nameChar) {\\n                i++;\\n                count++;\\n            }\\n            while (j < typed.length() && typed.charAt(j) == nameChar) {\\n                j++;\\n                count--;\\n            }\\n            if (count > 0) {\\n                return false;\\n            }         \\n        }\\n        if (j != typed.length()) {\\n            return false;\\n        }\\n        return true;\\n    }\\n} \\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        if (name == null || name.length() == 0) return false;\\n        if (typed.length() < name.length()) return false;\\n        if (typed.length() == name.length()) return name.equals(typed);\\n        int i = 0;\\n        int j = 0;\\n        while (i < name.length()) {\\n            char nameChar = name.charAt(i);\\n            int count = 1;\\n            i++;\\n            while (i < name.length() && name.charAt(i) == nameChar) {\\n                i++;\\n                count++;\\n            }\\n            while (j < typed.length() && typed.charAt(j) == nameChar) {\\n                j++;\\n                count--;\\n            }\\n            if (count > 0) {\\n                return false;\\n            }         \\n        }\\n        if (j != typed.length()) {\\n            return false;\\n        }\\n        return true;\\n    }\\n} \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1679795,
                "title": "java-0-ms-explained",
                "content": "**Idea:**\\n* Base cases: \\n\\t* If the strings are the same, then they qualify, so return true\\n\\t* If `name` is longer than `typed`, then typed can\\'t be long pressed, so return false\\n* Use 2 pointers, 1 for each string\\n* Keep both moving till chars are same\\n* When chars are different, ensure typed\\'s previous char is the same as current char (long pressed). If not return false\\n* At the end check if the pointer for the `name` string has reached the end of `name`. If yes, then all the chars (even if long) have matched. Else they haven\\'t matched because `typed` is missing some letters towards the end\\n>**T/S:** O(n)/O(1)\\n```\\npublic boolean isLongPressedName(String name, String typed) {\\n\\tif (name.equals(typed))\\n\\t\\treturn true;\\n\\tif (name.length() > typed.length())\\n\\t\\treturn false;\\n\\t\\t\\n\\tvar i = 0;\\n\\tfor (var j = 0; j < typed.length(); j++)\\n\\t\\tif (i < name.length() && name.charAt(i) == typed.charAt(j))\\n\\t\\t\\ti++;\\n\\t\\telse if (j == 0 || typed.charAt(j - 1) != typed.charAt(j))\\n\\t\\t\\treturn false;\\n\\n\\treturn i == name.length();\\n}\\n```\\n***Please upvote if this helps***",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "```\\npublic boolean isLongPressedName(String name, String typed) {\\n\\tif (name.equals(typed))\\n\\t\\treturn true;\\n\\tif (name.length() > typed.length())\\n\\t\\treturn false;\\n\\t\\t\\n\\tvar i = 0;\\n\\tfor (var j = 0; j < typed.length(); j++)\\n\\t\\tif (i < name.length() && name.charAt(i) == typed.charAt(j))\\n\\t\\t\\ti++;\\n\\t\\telse if (j == 0 || typed.charAt(j - 1) != typed.charAt(j))\\n\\t\\t\\treturn false;\\n\\n\\treturn i == name.length();\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1081300,
                "title": "java-solution-with-two-pointers",
                "content": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int m = name.length(), n = typed.length();\\n        int i = 0, j = 0;\\n        \\n        while (i < m && j < n){\\n            char c1 = name.charAt(i);\\n            char c2 = typed.charAt(j);\\n            //exit if the character do not match\\n\\t\\t\\tif (c1 != c2) return false;\\n            \\n            int l1 = 0, l2 = 0;\\n            // count duplicate character length for both strings\\n\\t\\t\\twhile (i < m && name.charAt(i) == c1){ \\n                i++;\\n                l1++;  \\n            } \\n            while (j < n && typed.charAt(j) == c1){\\n                j++;\\n                l2++;  \\n            } \\n            \\n\\t\\t\\t//l2 should be always greater than l1\\n            if (l2 < l1) return false;\\n        }\\n        return i == m && j == n;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int m = name.length(), n = typed.length();\\n        int i = 0, j = 0;\\n        \\n        while (i < m && j < n){\\n            char c1 = name.charAt(i);\\n            char c2 = typed.charAt(j);\\n            //exit if the character do not match\\n\\t\\t\\tif (c1 != c2) return false;\\n            \\n            int l1 = 0, l2 = 0;\\n            // count duplicate character length for both strings\\n\\t\\t\\twhile (i < m && name.charAt(i) == c1){ \\n                i++;\\n                l1++;  \\n            } \\n            while (j < n && typed.charAt(j) == c1){\\n                j++;\\n                l2++;  \\n            } \\n            \\n\\t\\t\\t//l2 should be always greater than l1\\n            if (l2 < l1) return false;\\n        }\\n        return i == m && j == n;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 803246,
                "title": "faster-than-100-of-online-submission",
                "content": "\\tclass Solution {\\n\\tpublic:\\n\\t\\tbool isLongPressedName(string name, string typed) {\\n\\t\\t\\tint i = 0, m = name.length(), n = typed.length();\\n\\t\\t\\tfor (int j = 0; j < n; ++j)\\n\\t\\t\\t\\tif (i < m && name[i] == typed[j])\\n\\t\\t\\t\\t\\t++i;\\n\\t\\t\\t\\telse if (!j || typed[j] != typed[j - 1])\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\treturn i == m;\\n\\t\\t}\\n\\t};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tbool isLongPressedName(string name, string typed) {\\n\\t\\t\\tint i = 0, m = name.length(), n = typed.length();\\n\\t\\t\\tfor (int j = 0; j < n; ++j)\\n\\t\\t\\t\\tif (i < m && name[i] == typed[j])\\n\\t\\t\\t\\t\\t++i;\\n\\t\\t\\t\\telse if (!j || typed[j] != typed[j - 1])\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\treturn i == m;\\n\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 183903,
                "title": "java-2-pointer-solution",
                "content": "```\\nclass Solution {\\n    public static boolean isLongPressedName(String name, String typed) {\\n        int slow = 0;\\n        int fast = 0;\\n\\n        while (slow < name.length() && fast < typed.length()) {\\n            if (name.charAt(slow) == typed.charAt(fast)) {\\n                slow++;\\n                fast++;\\n            }\\n            else if (fast > 0 && typed.charAt(fast) == typed.charAt(fast-1)) {\\n                fast++;\\n            }\\n            else {\\n                return false;\\n            }\\n        }\\n\\n        while (fast < typed.length()) {\\n            if (typed.charAt(fast) != typed.charAt(fast-1)) {\\n                return false;\\n            }\\n\\n            fast++;\\n        }\\n\\n        return slow == name.length();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public static boolean isLongPressedName(String name, String typed) {\\n        int slow = 0;\\n        int fast = 0;\\n\\n        while (slow < name.length() && fast < typed.length()) {\\n            if (name.charAt(slow) == typed.charAt(fast)) {\\n                slow++;\\n                fast++;\\n            }\\n            else if (fast > 0 && typed.charAt(fast) == typed.charAt(fast-1)) {\\n                fast++;\\n            }\\n            else {\\n                return false;\\n            }\\n        }\\n\\n        while (fast < typed.length()) {\\n            if (typed.charAt(fast) != typed.charAt(fast-1)) {\\n                return false;\\n            }\\n\\n            fast++;\\n        }\\n\\n        return slow == name.length();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3254985,
                "title": "easy-c-two-pointer-solution-t-o-n-s-o-1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe problem is little tricky. We have keep in mind the different possibilities of \"typed\" string.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nSet both the pointers to the starting \\'char\\' and run a while loop about the length of \"typed\" string.  \\n\\n- Make a base case ,i.e., if the starting \\'char\\' doesn\\'t match then return false to avoid the runtime error.\\n\\n- If both the \\'char\\' of string mathces, increment both the pointers and if it doesn\\'t matches then it should match the previous \\'char\\', otherwise return false.\\n\\n- the true condition will only be when the first pointer reaches to size of \"name\" string.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(typed.length())\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int i = 0 , j = 0 ;\\n        if(name[0] != typed[0]){\\n            return false;\\n        }\\n        while( j < typed.length() ){\\n            if(name[i] == typed[j]){\\n                i++;\\n                j++;\\n            }else if (name[i-1] == typed[j] ){\\n                j++;\\n            }else{\\n                return false;\\n            }\\n        } \\n        if( i == name.length()){\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int i = 0 , j = 0 ;\\n        if(name[0] != typed[0]){\\n            return false;\\n        }\\n        while( j < typed.length() ){\\n            if(name[i] == typed[j]){\\n                i++;\\n                j++;\\n            }else if (name[i-1] == typed[j] ){\\n                j++;\\n            }else{\\n                return false;\\n            }\\n        } \\n        if( i == name.length()){\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2606084,
                "title": "python-elegant-short-one-line-itertools-groupby",
                "content": "```\\t\\nfrom itertools import groupby, zip_longest\\n\\n\\nclass Solution:\\n\\t\"\"\"\\n\\tTime:   O(max(n, m))\\n\\tMemory: O(1)\\n\\t\"\"\"\\n\\n\\tdef isLongPressedName(self, name: str, typed: str) -> bool:\\n\\t\\tfor (a, a_gr), (b, b_gr) in zip_longest(groupby(name), groupby(typed), fillvalue=(None, None)):\\n\\t\\t\\tif a != b or sum(1 for _ in a_gr) > sum(1 for _ in b_gr):\\n\\t\\t\\t\\treturn False\\n\\t\\treturn True\\n\\n\\nclass Solution:\\n\\t\"\"\"\\n\\tTime:   O(max(n, m))\\n\\tMemory: O(1)\\n\\t\"\"\"\\n\\n\\tdef isLongPressedName(self, name: str, typed: str) -> bool:\\n\\t\\treturn all(\\n\\t\\t\\ta == b and sum(1 for _ in a_gr) <= sum(1 for _ in b_gr)\\n\\t\\t\\tfor (a, a_gr), (b, b_gr) in zip_longest(groupby(name), groupby(typed), fillvalue=(None, None))\\n\\t\\t)\\n```\\n\\nIf you like this solution remember to **upvote it** to let me know.",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\t\\nfrom itertools import groupby, zip_longest\\n\\n\\nclass Solution:\\n\\t\"\"\"\\n\\tTime:   O(max(n, m))\\n\\tMemory: O(1)\\n\\t\"\"\"\\n\\n\\tdef isLongPressedName(self, name: str, typed: str) -> bool:\\n\\t\\tfor (a, a_gr), (b, b_gr) in zip_longest(groupby(name), groupby(typed), fillvalue=(None, None)):\\n\\t\\t\\tif a != b or sum(1 for _ in a_gr) > sum(1 for _ in b_gr):\\n\\t\\t\\t\\treturn False\\n\\t\\treturn True\\n\\n\\nclass Solution:\\n\\t\"\"\"\\n\\tTime:   O(max(n, m))\\n\\tMemory: O(1)\\n\\t\"\"\"\\n\\n\\tdef isLongPressedName(self, name: str, typed: str) -> bool:\\n\\t\\treturn all(\\n\\t\\t\\ta == b and sum(1 for _ in a_gr) <= sum(1 for _ in b_gr)\\n\\t\\t\\tfor (a, a_gr), (b, b_gr) in zip_longest(groupby(name), groupby(typed), fillvalue=(None, None))\\n\\t\\t)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1508705,
                "title": "java-2-pointer-faster-than-100",
                "content": "You can find my solutions to other leetcode problems on my Github: https://linktr.ee/rohitdhatrak\\n\\n```\\npublic boolean isLongPressedName(String name, String typed) {\\n\\tif (typed.length() < name.length()) return false;\\n\\tint namePtr = 0;\\n\\tint typedPtr = 0;\\n\\n\\twhile (typedPtr < typed.length() || namePtr < name.length()) {\\n\\t\\tif(typedPtr >= typed.length()) return false;\\n\\t\\tif (namePtr < name.length() && name.charAt(namePtr) == typed.charAt(typedPtr)) {\\n\\t\\t\\tnamePtr++;\\n\\t\\t\\ttypedPtr++;\\n\\t\\t} else if (namePtr != 0 && name.charAt(namePtr - 1) == typed.charAt(typedPtr)) {\\n\\t\\t\\ttypedPtr++;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\treturn true;\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "```\\npublic boolean isLongPressedName(String name, String typed) {\\n\\tif (typed.length() < name.length()) return false;\\n\\tint namePtr = 0;\\n\\tint typedPtr = 0;\\n\\n\\twhile (typedPtr < typed.length() || namePtr < name.length()) {\\n\\t\\tif(typedPtr >= typed.length()) return false;\\n\\t\\tif (namePtr < name.length() && name.charAt(namePtr) == typed.charAt(typedPtr)) {\\n\\t\\t\\tnamePtr++;\\n\\t\\t\\ttypedPtr++;\\n\\t\\t} else if (namePtr != 0 && name.charAt(namePtr - 1) == typed.charAt(typedPtr)) {\\n\\t\\t\\ttypedPtr++;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\treturn true;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1380410,
                "title": "28-ms-faster-than-87-66-of-python3-online-submissions",
                "content": "```\\nclass Solution:\\n    def isLongPressedName(self, name: str, typed: str) -> bool:\\n        n=len(name)\\n        m=len(typed)\\n        \\n        if m<n:\\n            return False\\n        i=j=0\\n        while(True):\\n            print(i,j)\\n            if i==n and j==m:\\n                return True\\n            \\n            if i<n and j<m and name[i]==typed[j]:\\n                i+=1\\n                j+=1\\n            elif j>0 and j<m and typed[j-1]==typed[j]:\\n\\n                j+=1\\n            else:\\n                return False\\n        ```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isLongPressedName(self, name: str, typed: str) -> bool:\\n        n=len(name)\\n        m=len(typed)\\n        \\n        if m<n:\\n            return False\\n        i=j=0\\n        while(True):\\n            print(i,j)\\n            if i==n and j==m:\\n                return True\\n            \\n            if i<n and j<m and name[i]==typed[j]:\\n                i+=1\\n                j+=1\\n            elif j>0 and j<m and typed[j-1]==typed[j]:\\n\\n                j+=1\\n            else:\\n                return False\\n        ```",
                "codeTag": "Java"
            },
            {
                "id": 930314,
                "title": "python-3-explained-memorization-24-ms",
                "content": "A couple of facts or corner cases. First if both strings are equal, then it was your friends name. Second, if both ending strings are different, then it was NOT your friends name.\\nThe main idea is to iterate the string name, and at the same time to iterate the string typed to compare.\\nExample: \"alex\", \"aaleelx\"\\nIterate \"alex\", char = \"a\", prev = \"a\", indice = 0, typed becomes \"aleelx\", the first \"a\" is deleted from typed.\\nMove on to char = \"l\", indice = 1, so in the (updated) typed before \"l\" there is one char. We want to see this char is a long pressed char meaning it should equal to the prev (\"a\"). Otherwise, the typed is not your friends name. So we iterate the typed (0 to 1) to make sure. Then typed becomes \"eelx\", the \"al\" are deleted from typed. Update prev = \"l\".\\nMove on to char = \"e\", indice = zero, so we are good. Update typed to \"elx\", and prev = \"e\".\\nMove on to char = \"x\", indice = 2, so in typed before \"x\" there are two chars, We want to see these chars are equal to prev \"e\". When we iterate the typed (0 to 2), we find a char \"l\" which is not equal to \"e\". So it was not your friends name.\\n\\n~~~\\nclass Solution:\\n    def isLongPressedName(self, name: str, typed: str) -> bool:\\n        # cover the case: that the name and typed are equal, e.g., \"laiden\", \"laiden\"\\n\\t\\tif name == typed:\\n            return True\\n\\t\\t\\n\\t\\t# Note that it is necessary to have both strings ending the same. E.g., \"alex\", \"alexxr\"\\n        if typed[-1] != name[-1]:\\n            return False\\n        \\n\\t\\t# Index of the name char in string typed, the very first time iteratation it\\'s always zero\\n\\t\\tindice = -1\\n\\t\\t\\n\\t\\t# Memorize the previous char in string name, starting from the first char in string name\\n        prev = name[0]\\n\\t\\t\\n\\t\\t# Iterate the string name. Make the decision on the fly.\\n        for char in name:\\n            if (char in typed):\\n                indice = typed.index(char)\\n                if indice > 0:\\n                    for i in range(0, indice):\\n                        if typed[i] != prev:\\n                            return False\\n                typed = typed[(indice+1):]\\n                prev = char\\n            else:\\n                return False\\n        return True\\n~~~",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Memoization"
                ],
                "code": "A couple of facts or corner cases. First if both strings are equal, then it was your friends name. Second, if both ending strings are different, then it was NOT your friends name.\\nThe main idea is to iterate the string name, and at the same time to iterate the string typed to compare.\\nExample: \"alex\", \"aaleelx\"\\nIterate \"alex\", char = \"a\", prev = \"a\", indice = 0, typed becomes \"aleelx\", the first \"a\" is deleted from typed.\\nMove on to char = \"l\", indice = 1, so in the (updated) typed before \"l\" there is one char. We want to see this char is a long pressed char meaning it should equal to the prev (\"a\"). Otherwise, the typed is not your friends name. So we iterate the typed (0 to 1) to make sure. Then typed becomes \"eelx\", the \"al\" are deleted from typed. Update prev = \"l\".\\nMove on to char = \"e\", indice = zero, so we are good. Update typed to \"elx\", and prev = \"e\".\\nMove on to char = \"x\", indice = 2, so in typed before \"x\" there are two chars, We want to see these chars are equal to prev \"e\". When we iterate the typed (0 to 2), we find a char \"l\" which is not equal to \"e\". So it was not your friends name.\\n\\n~~~\\nclass Solution:\\n    def isLongPressedName(self, name: str, typed: str) -> bool:\\n        # cover the case: that the name and typed are equal, e.g., \"laiden\", \"laiden\"\\n\\t\\tif name == typed:\\n            return True\\n\\t\\t\\n\\t\\t# Note that it is necessary to have both strings ending the same. E.g., \"alex\", \"alexxr\"\\n        if typed[-1] != name[-1]:\\n            return False\\n        \\n\\t\\t# Index of the name char in string typed, the very first time iteratation it\\'s always zero\\n\\t\\tindice = -1\\n\\t\\t\\n\\t\\t# Memorize the previous char in string name, starting from the first char in string name\\n        prev = name[0]\\n\\t\\t\\n\\t\\t# Iterate the string name. Make the decision on the fly.\\n        for char in name:\\n            if (char in typed):\\n                indice = typed.index(char)\\n                if indice > 0:\\n                    for i in range(0, indice):\\n                        if typed[i] != prev:\\n                            return False\\n                typed = typed[(indice+1):]\\n                prev = char\\n            else:\\n                return False\\n        return True\\n~~~",
                "codeTag": "Java"
            },
            {
                "id": 216697,
                "title": "python-two-pointer-slightly-different-from-existing-solutions",
                "content": "```python\\nclass Solution:\\n    def isLongPressedName(self, name, typed):\\n        \"\"\"\\n        :type name: str\\n        :type typed: str\\n        :rtype: bool\\n        \"\"\"\\n        i, j = 0, 0\\n        while i < len(name) and j < len(typed):\\n            if name[i] == typed[j]:\\n                i += 1\\n                j += 1\\n            else:\\n                j += 1\\n        if i == len(name):\\n            return True\\n        return False\\n```",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def isLongPressedName(self, name, typed):\\n        \"\"\"\\n        :type name: str\\n        :type typed: str\\n        :rtype: bool\\n        \"\"\"\\n        i, j = 0, 0\\n        while i < len(name) and j < len(typed):\\n            if name[i] == typed[j]:\\n                i += 1\\n                j += 1\\n            else:\\n                j += 1\\n        if i == len(name):\\n            return True\\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 200415,
                "title": "clean-java-code",
                "content": "```\\n   public boolean isLongPressedName(String name, String typed) {\\n        int i = 0, j = 0; \\n        for(;i < name.length() && j < typed.length(); j++) \\n            if(typed.charAt(j) == name.charAt(i)) \\n                i++;\\n        return i == name.length();\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n   public boolean isLongPressedName(String name, String typed) {\\n        int i = 0, j = 0; \\n        for(;i < name.length() && j < typed.length(); j++) \\n            if(typed.charAt(j) == name.charAt(i)) \\n                i++;\\n        return i == name.length();\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 183854,
                "title": "a-few-solutions",
                "content": "**Synopsis:**\\n\\nThere are 3 use cases to consider for each i<sup>th</sup> char of `A` and each j<sup>th</sup> char of `B`:\\n1. if `A[i] == B[j]`, then advance both `i` and `j` forward and track the last `A[i]` value\\n2. if `A[i] != B[j]`, but `B[j]` is equal to the last i<sup>th</sup> value, then advance `j` forward\\n3. if `A[i] != B[j]`, and `B[j]` is *not* equal to the last i<sup>th</sup> value, then return false immediately\\n\\n**Note:** the C++ solution assumes it is OK to deference end() as the NULL char.\\n\\n---\\n\\n*Javascript*\\n```\\nlet isLongPressedName = (A, B) => {\\n    let M = A.length,\\n        N = B.length,\\n        i = 0,\\n        j = 0,\\n\\t\\tlast = \\'\\\\0\\';\\n    while (!(i == M && j == N)) {\\n        if (i < M && j < N && A[i] == B[j])\\n            last = A[i], ++i, ++j;\\n        else if (j < N && last == B[j])\\n            ++j;\\n        else\\n            return false\\n    }\\n    return true;\\n};\\n```\\n\\n*Python3*\\n```\\nclass Solution:\\n    def isLongPressedName(self, A: str, B: str) -> bool:\\n        M = len(A)\\n        N = len(B)\\n        i = 0\\n        j = 0\\n        last = \\'\\\\0\\'\\n        while not (i == M and j == N):\\n            if i < M and j < N and A[i] == B[j]:\\n                last = A[i]\\n                i += 1\\n                j += 1\\n            elif j < N and last == B[j]:\\n                j += 1\\n            else:\\n                return False\\n        return True\\n```\\n\\n*C++*\\n```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string A, string B) {\\n        auto i = A.begin(),\\n             j = B.begin(),\\n             last{ i };\\n        while (!(i == A.end() && j == B.end())) {\\n            if (*i == *j)\\n                i = next(last = i),\\n                j = next(j);\\n            else if (*last == *j)\\n                j = next(j);\\n            else\\n                return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nlet isLongPressedName = (A, B) => {\\n    let M = A.length,\\n        N = B.length,\\n        i = 0,\\n        j = 0,\\n\\t\\tlast = \\'\\\\0\\';\\n    while (!(i == M && j == N)) {\\n        if (i < M && j < N && A[i] == B[j])\\n            last = A[i], ++i, ++j;\\n        else if (j < N && last == B[j])\\n            ++j;\\n        else\\n            return false\\n    }\\n    return true;\\n};\\n```\n```\\nclass Solution:\\n    def isLongPressedName(self, A: str, B: str) -> bool:\\n        M = len(A)\\n        N = len(B)\\n        i = 0\\n        j = 0\\n        last = \\'\\\\0\\'\\n        while not (i == M and j == N):\\n            if i < M and j < N and A[i] == B[j]:\\n                last = A[i]\\n                i += 1\\n                j += 1\\n            elif j < N and last == B[j]:\\n                j += 1\\n            else:\\n                return False\\n        return True\\n```\n```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string A, string B) {\\n        auto i = A.begin(),\\n             j = B.begin(),\\n             last{ i };\\n        while (!(i == A.end() && j == B.end())) {\\n            if (*i == *j)\\n                i = next(last = i),\\n                j = next(j);\\n            else if (*last == *j)\\n                j = next(j);\\n            else\\n                return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3519608,
                "title": "solution",
                "content": "```C++ []\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n      int i=0,j=0;\\n      while(i< name.length() && j< typed.length()){\\n          if(name[i]==typed[j]){\\n              i++;\\n              j++;\\n          }\\n          else{\\n              if(i>0 &&name[i-1]==typed[j])\\n                j++;\\n                else{\\n                    return false;\\n                }\\n          }\\n      }\\n      while(j< typed.length()){\\n          if(name[i-1]!=typed[j])\\n          return false;\\n          j++;\\n      }\\n      while(i< name.length()){\\n          if(name[i]!=typed[j])\\n          return false;\\n          i++;\\n      }\\n      return true;\\n    }\\n};\\n```\\n\\n```Python3 []\\nclass Solution:\\n    def isLongPressedName(self, name: str, typed: str) -> bool:\\n        \\n        name = list(name)\\n        typed = list(typed)\\n        if name[0] != typed[0]:\\n            return False\\n        i = 1\\n        j = 1\\n        while i < len(name) and j < len(typed):\\n            if name[i] == typed[j]:\\n                i += 1\\n                j += 1\\n            elif name[i-1] == typed[j]:\\n                j += 1\\n            else:\\n                return False\\n        while j < len(typed):\\n            if name[i-1] == typed[j]:\\n                j += 1\\n            else:\\n                return False\\n        return i == len(name)\\n```\\n\\n```Java []\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int n = name.length();\\n        int m = typed.length();\\n        int i=0;\\n        int j=0;\\n        if(name.charAt(0) != typed.charAt(0))\\n            return false;\\n        if(n>m){\\n            return false;\\n        }\\n        while(i<n && j<m){\\n            if(name.charAt(i) == typed.charAt(j)){\\n                i++;\\n                j++;\\n            }\\n            else if(name.charAt(i-1) == typed.charAt(j)){\\n                j++;\\n            }\\n            else{\\n                return false;\\n            }\\n        }\\n        while(j<m){\\n            if(name.charAt(i-1) == typed.charAt(j)){\\n                j++;\\n            }\\n            else{\\n                return false;\\n            }\\n        }\\n        if(i<n){\\n            return false;\\n        }\\n        return true;       \\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n      int i=0,j=0;\\n      while(i< name.length() && j< typed.length()){\\n          if(name[i]==typed[j]){\\n              i++;\\n              j++;\\n          }\\n          else{\\n              if(i>0 &&name[i-1]==typed[j])\\n                j++;\\n                else{\\n                    return false;\\n                }\\n          }\\n      }\\n      while(j< typed.length()){\\n          if(name[i-1]!=typed[j])\\n          return false;\\n          j++;\\n      }\\n      while(i< name.length()){\\n          if(name[i]!=typed[j])\\n          return false;\\n          i++;\\n      }\\n      return true;\\n    }\\n};\\n```\n```Python3 []\\nclass Solution:\\n    def isLongPressedName(self, name: str, typed: str) -> bool:\\n        \\n        name = list(name)\\n        typed = list(typed)\\n        if name[0] != typed[0]:\\n            return False\\n        i = 1\\n        j = 1\\n        while i < len(name) and j < len(typed):\\n            if name[i] == typed[j]:\\n                i += 1\\n                j += 1\\n            elif name[i-1] == typed[j]:\\n                j += 1\\n            else:\\n                return False\\n        while j < len(typed):\\n            if name[i-1] == typed[j]:\\n                j += 1\\n            else:\\n                return False\\n        return i == len(name)\\n```\n```Java []\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int n = name.length();\\n        int m = typed.length();\\n        int i=0;\\n        int j=0;\\n        if(name.charAt(0) != typed.charAt(0))\\n            return false;\\n        if(n>m){\\n            return false;\\n        }\\n        while(i<n && j<m){\\n            if(name.charAt(i) == typed.charAt(j)){\\n                i++;\\n                j++;\\n            }\\n            else if(name.charAt(i-1) == typed.charAt(j)){\\n                j++;\\n            }\\n            else{\\n                return false;\\n            }\\n        }\\n        while(j<m){\\n            if(name.charAt(i-1) == typed.charAt(j)){\\n                j++;\\n            }\\n            else{\\n                return false;\\n            }\\n        }\\n        if(i<n){\\n            return false;\\n        }\\n        return true;       \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3335371,
                "title": "trying-to-store-the-name-and-typed-with-thier-frequecy-and-then-compare-the-frequecy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n Easy Solution  using stack\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexityo(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\no(n)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n\\n        stack<pair<char,int>> q;\\n\\n        for(int i=0;i<typed.size();i++){\\n            if(q.size()==0)\\n            q.push({typed[i],1});\\n\\n\\n           else if(q.top().first==typed[i]){\\n               int k=q.top().second;\\n               q.pop();\\n               k++;\\n               q.push({typed[i],k});\\n\\n           }\\n\\n           else{\\n               q.push({typed[i],1});\\n           }\\n\\n        }\\n    stack<pair<char,int>> q1;\\n\\n        for(int i=0;i<name.size();i++){\\n            if(q1.size()==0)\\n            q1.push({name[i],1});\\n\\n\\n           else if(q1.top().first==name[i]){\\n               int k=q1.top().second;\\n               q1.pop();\\n               k++;\\n               q1.push({name[i],k});\\n\\n           }\\n\\n           else{\\n               q1.push({name[i],1});\\n           }\\n\\n        }\\n   \\n  if(q.size()!=q1.size()) return false;\\n  while(q.size()>0 && q1.size()>0){\\n            if(q.top().first==q1.top().first){\\n                       \\n                        if(q.top().second<q1.top().second){\\n                            return false;\\n                        }\\n            }\\n            else if(q.top().first!=q1.top().second){\\n                return false;\\n            }\\n        q.pop();\\n        q1.pop();\\n\\n  }\\n\\n\\n\\n   return true;\\n\\n\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n\\n        stack<pair<char,int>> q;\\n\\n        for(int i=0;i<typed.size();i++){\\n            if(q.size()==0)\\n            q.push({typed[i],1});\\n\\n\\n           else if(q.top().first==typed[i]){\\n               int k=q.top().second;\\n               q.pop();\\n               k++;\\n               q.push({typed[i],k});\\n\\n           }\\n\\n           else{\\n               q.push({typed[i],1});\\n           }\\n\\n        }\\n    stack<pair<char,int>> q1;\\n\\n        for(int i=0;i<name.size();i++){\\n            if(q1.size()==0)\\n            q1.push({name[i],1});\\n\\n\\n           else if(q1.top().first==name[i]){\\n               int k=q1.top().second;\\n               q1.pop();\\n               k++;\\n               q1.push({name[i],k});\\n\\n           }\\n\\n           else{\\n               q1.push({name[i],1});\\n           }\\n\\n        }\\n   \\n  if(q.size()!=q1.size()) return false;\\n  while(q.size()>0 && q1.size()>0){\\n            if(q.top().first==q1.top().first){\\n                       \\n                        if(q.top().second<q1.top().second){\\n                            return false;\\n                        }\\n            }\\n            else if(q.top().first!=q1.top().second){\\n                return false;\\n            }\\n        q.pop();\\n        q1.pop();\\n\\n  }\\n\\n\\n\\n   return true;\\n\\n\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2405461,
                "title": "java-solution-92-faster-than-others-easily-understandable",
                "content": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int i=0, j=0;\\n        boolean ans = true;\\n        while(i < name.length() && j < typed.length()){\\n            char chari = name.charAt(i);\\n            char charj = typed.charAt(j);\\n            if(chari == charj){\\n                i++; j++;\\n            } \\n            else {\\n                if (j != 0 && typed.charAt(j-1) == charj){\\n                    j++;\\n                }\\n                else{  \\n                    ans = false;\\n                    break;\\n                }\\n            }\\n        }\\n        while(j > 0 && j < typed.length()){\\n            if(typed.charAt(j-1) != typed.charAt(j)){\\n                ans = false;\\n                break;\\n            }\\n            j++;\\n        }\\n        if(i != name.length()){\\n            ans =false;\\n        }\\n        \\n        return ans; \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int i=0, j=0;\\n        boolean ans = true;\\n        while(i < name.length() && j < typed.length()){\\n            char chari = name.charAt(i);\\n            char charj = typed.charAt(j);\\n            if(chari == charj){\\n                i++; j++;\\n            } \\n            else {\\n                if (j != 0 && typed.charAt(j-1) == charj){\\n                    j++;\\n                }\\n                else{  \\n                    ans = false;\\n                    break;\\n                }\\n            }\\n        }\\n        while(j > 0 && j < typed.length()){\\n            if(typed.charAt(j-1) != typed.charAt(j)){\\n                ans = false;\\n                break;\\n            }\\n            j++;\\n        }\\n        if(i != name.length()){\\n            ans =false;\\n        }\\n        \\n        return ans; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2129245,
                "title": "so-nice-easy",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        if(name[0]!=typed[0])   return false;\\n        int n=name.size(), m=typed.size();\\n        int i=0, j=0;\\n        while(i<n || j<m) {\\n            if(name[i]==typed[j])   i++;\\n            else if(typed[j]!=typed[j-1])   return false;\\n            j++;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        if(name[0]!=typed[0])   return false;\\n        int n=name.size(), m=typed.size();\\n        int i=0, j=0;\\n        while(i<n || j<m) {\\n            if(name[i]==typed[j])   i++;\\n            else if(typed[j]!=typed[j-1])   return false;\\n            j++;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1849733,
                "title": "java-fast-2-pointers-solution",
                "content": "```\\npublic boolean isLongPressedName(String name, String typed) {\\n        if (typed.length() < name.length()) {\\n            return false;\\n        }\\n        int i = 0;\\n        int j = 0;\\n\\n        while (j < typed.length()) {\\n            if (i < name.length() && (name.charAt(i) == typed.charAt(j))) {\\n                i++;\\n                j++;\\n            }\\n\\n            else if (j > 0 && typed.charAt(j) == typed.charAt(j - 1)) {\\n                j++;\\n            }\\n\\n            else {\\n                return false;\\n            }\\n\\n        }\\n        return i == name.length();\\n    }\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "```\\npublic boolean isLongPressedName(String name, String typed) {\\n        if (typed.length() < name.length()) {\\n            return false;\\n        }\\n        int i = 0;\\n        int j = 0;\\n\\n        while (j < typed.length()) {\\n            if (i < name.length() && (name.charAt(i) == typed.charAt(j))) {\\n                i++;\\n                j++;\\n            }\\n\\n            else if (j > 0 && typed.charAt(j) == typed.charAt(j - 1)) {\\n                j++;\\n            }\\n\\n            else {\\n                return false;\\n            }\\n\\n        }\\n        return i == name.length();\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1739037,
                "title": "beginner-friendly-java-solution",
                "content": "**Time Complexity : O(n)**\\nWhere n is length of typed\\n```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int c = 0;\\n        for(int i=0; i<typed.length(); i++){\\n            if(c < name.length() && name.charAt(c) == typed.charAt(i))   c++;\\n            else if(i == 0 || typed.charAt(i) != typed.charAt(i-1))  return false;\\n        }\\n        return c == name.length();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int c = 0;\\n        for(int i=0; i<typed.length(); i++){\\n            if(c < name.length() && name.charAt(c) == typed.charAt(i))   c++;\\n            else if(i == 0 || typed.charAt(i) != typed.charAt(i-1))  return false;\\n        }\\n        return c == name.length();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1331646,
                "title": "python-easy",
                "content": "Our special technique here is this line: `f = lambda x: [list(group) for c, group in itertools.groupby(x)]`, specifically, the `groupby` function!\\n\\n```python\\ndef isLongPressedName(self, name, typed):\\n\\n\\tf = lambda x: [list(group) for c, group in itertools.groupby(x)]\\n\\t\\n\\tname, typed = f(name), f(typed)\\n\\t\\n\\tif len(name) != len(typed): return False\\n\\t\\n\\tfor i in range(len(name)):\\n\\t\\tif not (name[i][0] == typed[i][0] and len(name[i]) <= len(typed[i])):\\n\\t\\t\\treturn False\\n\\t\\t\\t\\n\\treturn True\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```python\\ndef isLongPressedName(self, name, typed):\\n\\n\\tf = lambda x: [list(group) for c, group in itertools.groupby(x)]\\n\\t\\n\\tname, typed = f(name), f(typed)\\n\\t\\n\\tif len(name) != len(typed): return False\\n\\t\\n\\tfor i in range(len(name)):\\n\\t\\tif not (name[i][0] == typed[i][0] and len(name[i]) <= len(typed[i])):\\n\\t\\t\\treturn False\\n\\t\\t\\t\\n\\treturn True\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1003777,
                "title": "clean-o-n-javascript-solution-with-two-pointers",
                "content": "```\\nvar isLongPressedName = function(name, typed) {\\n  for (var i = 0,j=0; i < typed.length && j<=name.length; i++) {\\n      if (typed[i] == name[j]) j++;\\n      else if (typed[i]!=name[j-1]) return false\\n    } \\n    return i==typed.length && j==name.length\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Two Pointers"
                ],
                "code": "```\\nvar isLongPressedName = function(name, typed) {\\n  for (var i = 0,j=0; i < typed.length && j<=name.length; i++) {\\n      if (typed[i] == name[j]) j++;\\n      else if (typed[i]!=name[j-1]) return false\\n    } \\n    return i==typed.length && j==name.length\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 884853,
                "title": "c-brute-force-solution-0ms-100-runtime-53-less-space-explained",
                "content": "```\\nclass Solution\\n{\\npublic:\\n    bool isLongPressedName(string name, string typed)\\n    {\\n        if (name[0] != typed[0])\\n            return 0;\\n        bool res = 0;\\n        int k = 0, count = 0; // count is track no. of char found\\n        // k is used to traverse typed char\\'s\\n        char prev = \\'a\\'; // next element either should be prev char or required char,\\n                         // if we found any other char, then return false\\n        for (int i = 0; i < name.length(); i++)\\n        {\\n            while (k < typed.length())\\n            {\\n                if (name[i] == typed[k])\\n                {\\n                    res = 1;\\n                    prev = typed[k];\\n                    k++;\\n                    count++;\\n                    break;\\n                }\\n                else if (prev != typed[k])\\n                    return 0;\\n                k++;\\n            }\\n        }\\n\\n        if (count != name.length()) // this is to check wheither we found all char in name or not\\n            res = 0;\\n\\n        if (k != typed.length()) // this is to check wheither typed has any other char after we found all name char\\n        {\\n            while (k < typed.length())\\n            {\\n                if (name[name.length() - 1] != typed[k])\\n                    return 0;\\n                k++;\\n            }\\n            res = 1; // this is for last char of name is repeating in typed\\n        }\\n        /* Example Test case:\\n               \"alex\"\\n               \"alexxe\"\\n        */\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution\\n{\\npublic:\\n    bool isLongPressedName(string name, string typed)\\n    {\\n        if (name[0] != typed[0])\\n            return 0;\\n        bool res = 0;\\n        int k = 0, count = 0; // count is track no. of char found\\n        // k is used to traverse typed char\\'s\\n        char prev = \\'a\\'; // next element either should be prev char or required char,\\n                         // if we found any other char, then return false\\n        for (int i = 0; i < name.length(); i++)\\n        {\\n            while (k < typed.length())\\n            {\\n                if (name[i] == typed[k])\\n                {\\n                    res = 1;\\n                    prev = typed[k];\\n                    k++;\\n                    count++;\\n                    break;\\n                }\\n                else if (prev != typed[k])\\n                    return 0;\\n                k++;\\n            }\\n        }\\n\\n        if (count != name.length()) // this is to check wheither we found all char in name or not\\n            res = 0;\\n\\n        if (k != typed.length()) // this is to check wheither typed has any other char after we found all name char\\n        {\\n            while (k < typed.length())\\n            {\\n                if (name[name.length() - 1] != typed[k])\\n                    return 0;\\n                k++;\\n            }\\n            res = 1; // this is for last char of name is repeating in typed\\n        }\\n        /* Example Test case:\\n               \"alex\"\\n               \"alexxe\"\\n        */\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 826004,
                "title": "c-one-pass-solution-using-two-pointers-o-n-m-time-o-1-space",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int i = 0; // i indexes into name\\n        int j = 0; // j indexes into typed\\n        \\n        if (name[i] != typed[j]) return false;\\n        \\n        while(i < name.length()) {\\n            // comparing letter by letter until mismatched\\n            while(i < name.length() && name[i] == typed[j]) {\\n                i++;\\n                j++;\\n            }\\n            // stop here at first mismatch between name[i] and typed[j]\\n            // here the mismatch could be the result of long pressed key, thus \\n            // we keep checking typed[j] against previous character name[i-1] \\n            // until we run into another mismatch.\\n            while(typed[j] == name[i-1]) {\\n                j++;\\n            }\\n            // if the pairing after long-pressed key has been accounted    \\n            // is still a mismatch, return false\\n            if (name[i] != typed[j]) {\\n                return false;\\n            }\\n            \\n        }\\n        return true;\\n        \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int i = 0; // i indexes into name\\n        int j = 0; // j indexes into typed\\n        \\n        if (name[i] != typed[j]) return false;\\n        \\n        while(i < name.length()) {\\n            // comparing letter by letter until mismatched\\n            while(i < name.length() && name[i] == typed[j]) {\\n                i++;\\n                j++;\\n            }\\n            // stop here at first mismatch between name[i] and typed[j]\\n            // here the mismatch could be the result of long pressed key, thus \\n            // we keep checking typed[j] against previous character name[i-1] \\n            // until we run into another mismatch.\\n            while(typed[j] == name[i-1]) {\\n                j++;\\n            }\\n            // if the pairing after long-pressed key has been accounted    \\n            // is still a mismatch, return false\\n            if (name[i] != typed[j]) {\\n                return false;\\n            }\\n            \\n        }\\n        return true;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 642164,
                "title": "short-simple-and-self-explanatory-c",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        \\n        int j=0;\\n        \\n        for(int i=0;i<typed.size();i++)\\n        {\\n            if(name[j]==typed[i]) j++;\\n            else\\n            {\\n                if(i==0) return false;\\n                else if(typed[i]!=name[j-1]) return false;\\n            }\\n        }\\n        \\n        return j==name.size();\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        \\n        int j=0;\\n        \\n        for(int i=0;i<typed.size();i++)\\n        {\\n            if(name[j]==typed[i]) j++;\\n            else\\n            {\\n                if(i==0) return false;\\n                else if(typed[i]!=name[j-1]) return false;\\n            }\\n        }\\n        \\n        return j==name.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 441783,
                "title": "easy-to-follow-python-solution",
                "content": "The question seems to have loose test cases. This solution should cover all of cases not accounted for. \\n\\nThe idea is to make sure the next seen typed character is either the Next name character we\\'re expecting OR part of a long-press sequence of the Last name character.\\n\\n```\\nclass Solution:\\n    def isLongPressedName(self, name: str, typed: str) -> bool:\\n\\t\\t# First confirm the typed string at least starts with the first character of the name\\n        if typed[0] != name[0]:\\n            return False\\n\\t\\t# Start your traversal expecting to see the next name character.\\n        last_name_char, next_name_char = 0, 1\\n        for typed_char in range(1, len(typed)):\\n\\t\\t\\t# if next name character was seen, update the next and last name character\\n            if next_name_char < len(name) and typed[typed_char] == name[next_name_char]:\\n                last_name_char = next_name_char\\n                next_name_char += 1\\n\\t\\t\\t# if next character was not seen, then the current character must be part of a long-press sequence of the last seen name character\\n            elif typed[typed_char] != name[last_name_char]:\\n                return False\\n        return next_name_char == len(name)\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def isLongPressedName(self, name: str, typed: str) -> bool:\\n\\t\\t# First confirm the typed string at least starts with the first character of the name\\n        if typed[0] != name[0]:\\n            return False\\n\\t\\t# Start your traversal expecting to see the next name character.\\n        last_name_char, next_name_char = 0, 1\\n        for typed_char in range(1, len(typed)):\\n\\t\\t\\t# if next name character was seen, update the next and last name character\\n            if next_name_char < len(name) and typed[typed_char] == name[next_name_char]:\\n                last_name_char = next_name_char\\n                next_name_char += 1\\n\\t\\t\\t# if next character was not seen, then the current character must be part of a long-press sequence of the last seen name character\\n            elif typed[typed_char] != name[last_name_char]:\\n                return False\\n        return next_name_char == len(name)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 208759,
                "title": "c-4-lines",
                "content": "```\\npublic class Solution {\\n    public bool IsLongPressedName(string name, string typed) {\\n        for(int i=0,j=0;i<typed.Length;i++){\\n            if(name[j]==typed[i]) j++;\\n            if(j==name.Length) return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public bool IsLongPressedName(string name, string typed) {\\n        for(int i=0,j=0;i<typed.Length;i++){\\n            if(name[j]==typed[i]) j++;\\n            if(j==name.Length) return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3775146,
                "title": "beats-100-using-java-simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int n=name.length();\\n        int m=typed.length();\\n        if(n>m)return false;\\n        if(name.charAt(0)!=typed.charAt(0))return false;\\n        int i=0,j=0;\\n        while(i<n && j<m)\\n        {\\n            if(name.charAt(i)==typed.charAt(j))\\n            {\\n                i++;\\n                j++;\\n            }\\n            else if(name.charAt(i-1)==typed.charAt(j))\\n            {\\n                j++;\\n            }\\n            else \\n            return false;\\n\\n        }\\n        while(j<m)\\n        {\\n            if(name.charAt(i-1)==typed.charAt(j))j++;\\n            else \\n            return false;\\n\\n        }\\n        if(i<n)\\n            return false;\\n\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int n=name.length();\\n        int m=typed.length();\\n        if(n>m)return false;\\n        if(name.charAt(0)!=typed.charAt(0))return false;\\n        int i=0,j=0;\\n        while(i<n && j<m)\\n        {\\n            if(name.charAt(i)==typed.charAt(j))\\n            {\\n                i++;\\n                j++;\\n            }\\n            else if(name.charAt(i-1)==typed.charAt(j))\\n            {\\n                j++;\\n            }\\n            else \\n            return false;\\n\\n        }\\n        while(j<m)\\n        {\\n            if(name.charAt(i-1)==typed.charAt(j))j++;\\n            else \\n            return false;\\n\\n        }\\n        if(i<n)\\n            return false;\\n\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3215353,
                "title": "python3-wasy-peasy-solution",
                "content": "# Intuition\\ntwo pointers\\n\\n# Approach\\nIn this implementation, we are using two pointers i and j to traverse the name and typed strings respectively. We compare the characters at these pointers and move the pointers accordingly.\\n\\nIf the characters at the current positions are equal, we increment both i and j, and move on to the next character. If the characters are not equal, we check if the previous character in the typed string is the same as the current character, and if it is, we increment j and move on to the next character. If the previous character in the typed string is not the same as the current character, we can immediately return False as this means that the current character in typed is not part of the name.\\n\\nWe continue this process until we have traversed the entire typed string. Finally, we check if we have traversed the entire name string by comparing the value of i with n, the length of name.\\n\\n\\n# Complexity\\n- Time complexity:\\nO(n), where n is the length of the typed string. This is already an optimal time complexity as we need to examine each character of the typed string at least once to compare it with the corresponding character in the name string.\\n\\n- Space complexity:\\nThis implementation has a space complexity of O(1), as we are not using any additional data structures to store the counts of characters.\\n\\n# Code\\n```\\nclass Solution:\\n    def isLongPressedName(self, name: str, typed: str) -> bool:\\n\\n\\n        i, j = 0, 0\\n        while j < len(typed):\\n\\n            if i < len(name) and name[i] == typed[j]:\\n                i += 1\\n                j += 1\\n            elif j > 0 and typed[j-1] == typed[j]:\\n                j += 1\\n            else:\\n                return False\\n\\n        return i == len(name)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isLongPressedName(self, name: str, typed: str) -> bool:\\n\\n\\n        i, j = 0, 0\\n        while j < len(typed):\\n\\n            if i < len(name) and name[i] == typed[j]:\\n                i += 1\\n                j += 1\\n            elif j > 0 and typed[j-1] == typed[j]:\\n                j += 1\\n            else:\\n                return False\\n\\n        return i == len(name)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3054798,
                "title": "easy-cpp-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n0(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\no(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        vector<pair<char,int>>v,v1;\\n        char x,y;\\n        x=typed[0];\\n        y=name[0];\\n        int count=1;\\n        for(int i=1;i<typed.length();i++)\\n        {\\n            if(x==typed[i])\\n            {\\n                count++;\\n            }\\n            else\\n            {\\n                v.push_back({x,count});\\n                count=1;\\n                x=typed[i];\\n            }\\n            \\n        }\\n        v.push_back({x,count});\\n        count=1;\\n        for(int i=1;i<name.length();i++)\\n        {\\n            if(y==name[i])\\n            {\\n                count++;\\n            }\\n            else\\n            {\\n                v1.push_back({y,count});\\n                count=1;\\n                y=name[i];\\n            }\\n            \\n        }\\n       v1.push_back({y,count});\\n        if(v.size()!=v1.size())\\n        {\\n            return false;\\n        }\\n        for(int i=0;i<v.size();i++)\\n        { \\n            if(v[i].first==v1[i].first)\\n            {\\n                if(v[i].second<v1[i].second)\\n                {\\n                    return false;\\n                }\\n            }\\n            else\\n            {\\n                return false;\\n            }\\n            \\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        vector<pair<char,int>>v,v1;\\n        char x,y;\\n        x=typed[0];\\n        y=name[0];\\n        int count=1;\\n        for(int i=1;i<typed.length();i++)\\n        {\\n            if(x==typed[i])\\n            {\\n                count++;\\n            }\\n            else\\n            {\\n                v.push_back({x,count});\\n                count=1;\\n                x=typed[i];\\n            }\\n            \\n        }\\n        v.push_back({x,count});\\n        count=1;\\n        for(int i=1;i<name.length();i++)\\n        {\\n            if(y==name[i])\\n            {\\n                count++;\\n            }\\n            else\\n            {\\n                v1.push_back({y,count});\\n                count=1;\\n                y=name[i];\\n            }\\n            \\n        }\\n       v1.push_back({y,count});\\n        if(v.size()!=v1.size())\\n        {\\n            return false;\\n        }\\n        for(int i=0;i<v.size();i++)\\n        { \\n            if(v[i].first==v1[i].first)\\n            {\\n                if(v[i].second<v1[i].second)\\n                {\\n                    return false;\\n                }\\n            }\\n            else\\n            {\\n                return false;\\n            }\\n            \\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2919033,
                "title": "easy-c-code",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n     bool isLongPressedName(string name, string typed) {\\n        int i = 0, m = name.length(), n = typed.length();\\n        for (int j = 0; j < n; ++j)\\n            if (i < m && name[i] == typed[j])\\n                ++i;\\n            else if (!j || typed[j] != typed[j - 1])\\n                return false;\\n        return i == m;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n     bool isLongPressedName(string name, string typed) {\\n        int i = 0, m = name.length(), n = typed.length();\\n        for (int j = 0; j < n; ++j)\\n            if (i < m && name[i] == typed[j])\\n                ++i;\\n            else if (!j || typed[j] != typed[j - 1])\\n                return false;\\n        return i == m;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2882875,
                "title": "cpp-easy-to-understand-two-pointers",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) \\n\\t{\\n         int idx1=0;  //pointer on name\\n\\t\\t int idx2=0;  //pointer on typed\\n\\t\\t \\n\\t\\t while(idx1<name.length() and idx2<typed.length())\\n\\t\\t {\\n              if(name[idx1] != typed[idx2])\\n              return false;\\n\\n\\t\\t      int count1=1;\\n  \\t          while(idx1<(name.length()-1) and name[idx1] == name[idx1+1])\\n  \\t          {\\n  \\t               count1++;\\n\\t\\t\\t\\t   idx1++;\\t\\n\\t\\t\\t  }\\n\\t\\t\\t  int count2=1;\\n\\t\\t\\t  while(idx2<(typed.length()-1) and typed[idx2] == typed[idx2+1])\\n\\t\\t\\t  {\\n\\t\\t\\t      count2++;\\n\\t\\t\\t\\t  idx2++;\\t\\n\\t\\t\\t  }\\n\\t\\t\\t  if(count1 > count2)\\n\\t\\t\\t  return false;\\n\\n              idx1++;\\n              idx2++;\\n\\t     }    \\n         if(idx2 < typed.length() or idx1 < name.length()) \\n         return false;\\n\\n\\t     return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) \\n\\t{\\n         int idx1=0;  //pointer on name\\n\\t\\t int idx2=0;  //pointer on typed\\n\\t\\t \\n\\t\\t while(idx1<name.length() and idx2<typed.length())\\n\\t\\t {\\n              if(name[idx1] != typed[idx2])\\n              return false;\\n\\n\\t\\t      int count1=1;\\n  \\t          while(idx1<(name.length()-1) and name[idx1] == name[idx1+1])\\n  \\t          {\\n  \\t               count1++;\\n\\t\\t\\t\\t   idx1++;\\t\\n\\t\\t\\t  }\\n\\t\\t\\t  int count2=1;\\n\\t\\t\\t  while(idx2<(typed.length()-1) and typed[idx2] == typed[idx2+1])\\n\\t\\t\\t  {\\n\\t\\t\\t      count2++;\\n\\t\\t\\t\\t  idx2++;\\t\\n\\t\\t\\t  }\\n\\t\\t\\t  if(count1 > count2)\\n\\t\\t\\t  return false;\\n\\n              idx1++;\\n              idx2++;\\n\\t     }    \\n         if(idx2 < typed.length() or idx1 < name.length()) \\n         return false;\\n\\n\\t     return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2685094,
                "title": "python-1-iteration-solution",
                "content": "```\\nclass Solution:\\n\\t def isLongPressedName(self, name: str, typed: str) -> bool:\\n        if name != typed:\\n            for i in name:\\n                if typed.count(i) < name.count(i):\\n                    result = False\\n                    break\\n                else:\\n                    result = True\\n                \\n            return result\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n\\t def isLongPressedName(self, name: str, typed: str) -> bool:\\n        if name != typed:\\n            for i in name:\\n                if typed.count(i) < name.count(i):\\n                    result = False\\n                    break\\n                else:\\n                    result = True\\n                \\n            return result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2641335,
                "title": "100-fast-cpp-o-n",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int i = 0, m = name.length(), n = typed.length();\\n        for (int j = 0; j < n; ++j)\\n            if (i < m && name[i] == typed[j])\\n                ++i;\\n            else if (!j || typed[j] != typed[j - 1])\\n                return false;\\n        return i == m;\\n    }\\n};\\n```",
                "solutionTags": [
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int i = 0, m = name.length(), n = typed.length();\\n        for (int j = 0; j < n; ++j)\\n            if (i < m && name[i] == typed[j])\\n                ++i;\\n            else if (!j || typed[j] != typed[j - 1])\\n                return false;\\n        return i == m;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2589413,
                "title": "c-compact-100-o-n-6-lines-only",
                "content": "```c++\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string n, string t) {\\n        int index = 0, i = 0;\\n        for (i = 0; i < t.size(); i++) {\\n            if (n[index] == t[i]) index++;\\n            else if (index && n[index - 1] == t[i]) {}\\n            else return false;\\n        }\\n        return i == t.size() && index == n.size();\\n    }\\n};\\n```\\n\\n**For more solutions, check out this \\uD83C\\uDFC6  [GITHUB REPOSITORY](https://github.com/MuhtasimTanmoy/playground) with over 1500+ solutions.**",
                "solutionTags": [],
                "code": "```c++\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string n, string t) {\\n        int index = 0, i = 0;\\n        for (i = 0; i < t.size(); i++) {\\n            if (n[index] == t[i]) index++;\\n            else if (index && n[index - 1] == t[i]) {}\\n            else return false;\\n        }\\n        return i == t.size() && index == n.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2542269,
                "title": "java-regular-expression-solution",
                "content": "```java\\nimport java.util.regex.*;\\n\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        \\n        if (name.equals(typed)) return true;\\n        \\n        StringBuilder allowed = new StringBuilder();\\n        \\n\\t\\t// start of string character\\n        allowed.append(\"^\");\\n        \\n\\t\\t// add groups for each letter\\n        for (Character c : name.toCharArray()) {\\n            allowed.append(\"(\");\\n            allowed.append(c);\\n\\t\\t\\t// allow for long-typed\\n            allowed.append(\")+\");\\n        }\\n        \\n\\t\\t// end of string character\\n        allowed.append(\"$\");\\n        \\n\\t\\t// create pattern\\n        Pattern pattern = Pattern.compile(allowed.toString());\\n        \\n\\t\\t// create pattern matcher\\n\\t\\tMatcher matcher = pattern.matcher(typed);\\n        \\n\\t\\t// return if match found\\n        return matcher.find();\\n        \\n    }\\n}\\n```\\n\\nTo better understand regular expression syntax, visit my [Interview Cheat Sheet](https://github.com/joshuajerome/Leetcode/wiki/Interview-Cheat-Sheet/)!",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java\\nimport java.util.regex.*;\\n\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        \\n        if (name.equals(typed)) return true;\\n        \\n        StringBuilder allowed = new StringBuilder();\\n        \\n\\t\\t// start of string character\\n        allowed.append(\"^\");\\n        \\n\\t\\t// add groups for each letter\\n        for (Character c : name.toCharArray()) {\\n            allowed.append(\"(\");\\n            allowed.append(c);\\n\\t\\t\\t// allow for long-typed\\n            allowed.append(\")+\");\\n        }\\n        \\n\\t\\t// end of string character\\n        allowed.append(\"$\");\\n        \\n\\t\\t// create pattern\\n        Pattern pattern = Pattern.compile(allowed.toString());\\n        \\n\\t\\t// create pattern matcher\\n\\t\\tMatcher matcher = pattern.matcher(typed);\\n        \\n\\t\\t// return if match found\\n        return matcher.find();\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2434170,
                "title": "javascript-one-line-solution",
                "content": "```\\n/**\\n * @param {string} name\\n * @param {string} typed\\n * @return {boolean}\\n */\\nvar isLongPressedName = function(name, typed) {\\n    return new RegExp(\"^\" + name.match(/(.)\\\\1*/g).join(\"+\") + \"+$\").test(typed)\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} name\\n * @param {string} typed\\n * @return {boolean}\\n */\\nvar isLongPressedName = function(name, typed) {\\n    return new RegExp(\"^\" + name.match(/(.)\\\\1*/g).join(\"+\") + \"+$\").test(typed)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2394268,
                "title": "c-0ms-solution-two-pointer-approach-fundamental-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        \\n        int j = 0, i = 0;\\n        for( ; i<name.length() && j<typed.length() ; i++)\\n        {\\n            if(name[i]!=typed[j++])\\n                return false;\\n            \\n            \\n            if(i<name.length() && name[i]!= name[i+1])\\n            {\\n                while(j<typed.length() && typed[j] == name[i])\\n                j++;\\n            }\\n        }\\n        \\n         return (i == name.length() && j == typed.length());\\n    }\\n};\\n```\\n\\n![image](https://assets.leetcode.com/users/images/28fa170a-71bd-4459-bab2-fb737c5b8383_1659891804.5864234.png)\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        \\n        int j = 0, i = 0;\\n        for( ; i<name.length() && j<typed.length() ; i++)\\n        {\\n            if(name[i]!=typed[j++])\\n                return false;\\n            \\n            \\n            if(i<name.length() && name[i]!= name[i+1])\\n            {\\n                while(j<typed.length() && typed[j] == name[i])\\n                j++;\\n            }\\n        }\\n        \\n         return (i == name.length() && j == typed.length());\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2388808,
                "title": "one-more-easy-to-understand-solution-xd",
                "content": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int i = 0;\\n        int j = 0;\\n        int m = name.length();\\n        int n = typed.length();\\n        \\n        while(j < n)\\n        {\\n            if(i < m && name.charAt(i) == typed.charAt(j))\\n            {\\n                i++;\\n                j++;\\n            }\\n            else if(j > 0 && typed.charAt(j) == typed.charAt(j-1))\\n            {\\n                j++;\\n            }\\n            else\\n            {\\n                return false;\\n            }\\n        }\\n        \\n        return i == m;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int i = 0;\\n        int j = 0;\\n        int m = name.length();\\n        int n = typed.length();\\n        \\n        while(j < n)\\n        {\\n            if(i < m && name.charAt(i) == typed.charAt(j))\\n            {\\n                i++;\\n                j++;\\n            }\\n            else if(j > 0 && typed.charAt(j) == typed.charAt(j-1))\\n            {\\n                j++;\\n            }\\n            else\\n            {\\n                return false;\\n            }\\n        }\\n        \\n        return i == m;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2324127,
                "title": "c",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n       \\n int i =0; int j =0;\\n    while(i<name.size() || j <typed.size()) {\\n        char current = name[i];\\n        if(name[i] != typed[j]) return false;\\n        i++;\\n        j++;\\n        if(name[i] != typed[j]) {\\n            while(current == typed[j]) j++;\\n        } \\n    }\\n    return true;\\n    }\\n};\\n\\n\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n       \\n int i =0; int j =0;\\n    while(i<name.size() || j <typed.size()) {\\n        char current = name[i];\\n        if(name[i] != typed[j]) return false;\\n        i++;\\n        j++;\\n        if(name[i] != typed[j]) {\\n            while(current == typed[j]) j++;\\n        } \\n    }\\n    return true;\\n    }\\n};\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2210947,
                "title": "0-ms-faster-than-100",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int j(1);\\n        if(name[0] != typed[0]) return false;\\n        \\n        for(int i = 1; i < typed.size(); i++){\\n            if(typed[i] != name[j] and typed[i] != name[j - 1])\\n                return false;\\n            j += typed[i] == name[j];\\n        }\\n                    \\n        return j == name.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int j(1);\\n        if(name[0] != typed[0]) return false;\\n        \\n        for(int i = 1; i < typed.size(); i++){\\n            if(typed[i] != name[j] and typed[i] != name[j - 1])\\n                return false;\\n            j += typed[i] == name[j];\\n        }\\n                    \\n        return j == name.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2082388,
                "title": "python-o-n-by-two-pointer-easy-and-intuitive-approach",
                "content": "Simple approach and efficient solution using two pointer for each strings. \\n##### If order isn\\'t matter then we can use Counter in python to simply.\\n\\n```\\n def isLongPressedName(self, name: str, typed: str) -> bool:\\n        i,j = 0,0\\n        a,b = len(name),len(typed)\\n        \\n        while (i<a and j<b):\\n            if name[i] == typed[j]:\\n                i += 1\\n                j += 1\\n                continue\\n            elif (i!=0) and (name[i-1] == typed[j]):\\n                j += 1\\n            else:\\n                return False\\n\\t\\t\\t\\n\\t\\t# Check the edge cases\\n        if i<a:\\n            return False\\n        if j<b:\\n            while j<b:\\n                if name[a-1] != typed[j]:\\n                    return False\\n                j += 1\\n        \\n\\t\\t# If not returned False then it\\'s right.. return True\\n        return True\\n\\t```\\n\\t\\t\\nIf you find this helpful, then give UpVote, much appriciated.\\n### Thanks",
                "solutionTags": [
                    "Two Pointers"
                ],
                "code": "```\\n def isLongPressedName(self, name: str, typed: str) -> bool:\\n        i,j = 0,0\\n        a,b = len(name),len(typed)\\n        \\n        while (i<a and j<b):\\n            if name[i] == typed[j]:\\n                i += 1\\n                j += 1\\n                continue\\n            elif (i!=0) and (name[i-1] == typed[j]):\\n                j += 1\\n            else:\\n                return False\\n\\t\\t\\t\\n\\t\\t# Check the edge cases\\n        if i<a:\\n            return False\\n        if j<b:\\n            while j<b:\\n                if name[a-1] != typed[j]:\\n                    return False\\n                j += 1\\n        \\n\\t\\t# If not returned False then it\\'s right.. return True\\n        return True\\n\\t```",
                "codeTag": "Python3"
            },
            {
                "id": 1944902,
                "title": "python3-10-line-code-using-2-pointers",
                "content": "```\\nclass Solution:\\n    def isLongPressedName(self, name: str, typed: str) -> bool:\\n        i, j, m, n = 0, 0, len(name), len(typed)\\n        if n < m: return False\\n        while i < m and j < n:\\n            if name[i] == typed[j]:\\n                i += 1\\n                j += 1\\n            elif j == 0 or typed[j] != typed[j - 1]: return False\\n            else:\\n                j += 1\\n        return i == m and typed[j:] == typed[j - 1] * (n - j)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution:\\n    def isLongPressedName(self, name: str, typed: str) -> bool:\\n        i, j, m, n = 0, 0, len(name), len(typed)\\n        if n < m: return False\\n        while i < m and j < n:\\n            if name[i] == typed[j]:\\n                i += 1\\n                j += 1\\n            elif j == 0 or typed[j] != typed[j - 1]: return False\\n            else:\\n                j += 1\\n        return i == m and typed[j:] == typed[j - 1] * (n - j)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1739039,
                "title": "beginner-friendly-javascript-solution",
                "content": "**Time Complexity : O(n)**\\nWhere n is length of typed\\n```\\n/**\\n * @param {string} name\\n * @param {string} typed\\n * @return {boolean}\\n */\\nvar isLongPressedName = function(name, typed) {\\n    let c = 0;\\n    for(let i=0; i<typed.length; i++){\\n        if(c < name.length && name[c] == typed[i])   c++;\\n        else if(i == 0 || typed[i] != typed[i-1])  return false;\\n    }\\n    return c == name.length;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} name\\n * @param {string} typed\\n * @return {boolean}\\n */\\nvar isLongPressedName = function(name, typed) {\\n    let c = 0;\\n    for(let i=0; i<typed.length; i++){\\n        if(c < name.length && name[c] == typed[i])   c++;\\n        else if(i == 0 || typed[i] != typed[i-1])  return false;\\n    }\\n    return c == name.length;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1491537,
                "title": "java-simple-solution-faster-than-100-submissions",
                "content": "Steps:\\n1. If `typed.length() < name.length()`, it means the name is not typed so `return false`.\\n2. Take two pointers-\\n\\t1. `i` -> For traversing the typed string\\n\\t2. `j` -> For traversing the name string\\n3. Iterate through the typed string\\n\\t1. if `j < name.length()` i.e. all the characters in name string is not yet traversed\\n\\t\\ti.  if `name.charAt(j) == typed.charAt(i)` i.e. a character of name is matched then increment the `j` pointer to check for the next\\n\\t\\tii. if the chars don\\'t match, check if it matches with the previous character, if not return false. This case will occur when we have same consecutive chars in typed string, in the first occurence we have moved the j pointer forward but it is same as the previous char at j.\\n\\t2. if name has been matched completely i.e. `j >=  name.length()`, then all the chars in typed string has to be same to the last character in name string, if not then `return false`\\n4. Finally return true if name is completely matched else return false, thus return `j == name.length()`\\n```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        if (typed.length() < name.length())\\n            return false;\\n        int i = 0, j = 0;\\n        for (; i < typed.length(); i++) {\\n            if (j < name.length()) {\\n                if (name.charAt(j) == typed.charAt(i))\\n                    j++;\\n                else if (name.charAt(j) != typed.charAt(i)) {\\n                    if (j == 0 || typed.charAt(i) != name.charAt(j - 1))\\n                        return false;\\n                }\\n            }\\n            else if (typed.charAt(i) != name.charAt(j - 1))\\n                return false;\\n        }\\n        return j == name.length();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        if (typed.length() < name.length())\\n            return false;\\n        int i = 0, j = 0;\\n        for (; i < typed.length(); i++) {\\n            if (j < name.length()) {\\n                if (name.charAt(j) == typed.charAt(i))\\n                    j++;\\n                else if (name.charAt(j) != typed.charAt(i)) {\\n                    if (j == 0 || typed.charAt(i) != name.charAt(j - 1))\\n                        return false;\\n                }\\n            }\\n            else if (typed.charAt(i) != name.charAt(j - 1))\\n                return false;\\n        }\\n        return j == name.length();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1455806,
                "title": "0ms-and-100-faster-java-solution-using-two-pointers-algo",
                "content": "# **Upvote if you like it\\n\\n\\tpublic boolean isLongPressedName(String name, String typed) {\\n\\t\\t\\tif(name.length() > typed.length()) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Using two pointers algo.\\n\\t\\t\\tint i = 0;\\n\\t\\t\\tint j = 0;\\n\\t\\t\\twhile((i < name.length()) && (j < typed.length())) {\\n\\t\\t\\t\\tif(name.charAt(i) == typed.charAt(j)) {\\n\\t\\t\\t\\t\\ti++;\\n\\t\\t\\t\\t\\tj++;\\n\\t\\t\\t\\t} else if((i > 0) && (name.charAt(i - 1) == typed.charAt(j))) {\\n\\t\\t\\t\\t\\tj++;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile(j < typed.length()) {\\n\\t\\t\\t\\tif(typed.charAt(j) == name.charAt(i - 1)) {\\n\\t\\t\\t\\t\\tj++;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn i < name.length() ? false : true;\\n\\t\\t}",
                "solutionTags": [],
                "code": "# **Upvote if you like it\\n\\n\\tpublic boolean isLongPressedName(String name, String typed) {\\n\\t\\t\\tif(name.length() > typed.length()) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Using two pointers algo.\\n\\t\\t\\tint i = 0;\\n\\t\\t\\tint j = 0;\\n\\t\\t\\twhile((i < name.length()) && (j < typed.length())) {\\n\\t\\t\\t\\tif(name.charAt(i) == typed.charAt(j)) {\\n\\t\\t\\t\\t\\ti++;\\n\\t\\t\\t\\t\\tj++;\\n\\t\\t\\t\\t} else if((i > 0) && (name.charAt(i - 1) == typed.charAt(j))) {\\n\\t\\t\\t\\t\\tj++;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile(j < typed.length()) {\\n\\t\\t\\t\\tif(typed.charAt(j) == name.charAt(i - 1)) {\\n\\t\\t\\t\\t\\tj++;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn i < name.length() ? false : true;\\n\\t\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 1389528,
                "title": "c-runtime-0-ms-faster-than-100-00-clean-code",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        \\n        int i=0, j=0;\\n        while(i<name.size())\\n        {\\n            if(name[i]==typed[j])\\n            {\\n                j++;\\n                i++;\\n            }\\n            else\\n            {\\n                if((j-1>=0&&typed[j]!=typed[j-1])||j==0)\\n                {\\n                    return 0;\\n                }\\n                j++;\\n            }\\n        }\\n        \\n        /*\\n\\t\\tFor the Test cases like:\\n\\t\\t\"alex\"\\n        \"alexxp\"\\n\\t\\t*/\\n        \\n        while(j<typed.size())\\n        {\\n            if(typed[j]!=typed[j-1])\\n                return 0;\\n            j++;\\n        }\\n        return 1;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        \\n        int i=0, j=0;\\n        while(i<name.size())\\n        {\\n            if(name[i]==typed[j])\\n            {\\n                j++;\\n                i++;\\n            }\\n            else\\n            {\\n                if((j-1>=0&&typed[j]!=typed[j-1])||j==0)\\n                {\\n                    return 0;\\n                }\\n                j++;\\n            }\\n        }\\n        \\n        /*\\n\\t\\tFor the Test cases like:\\n\\t\\t\"alex\"\\n        \"alexxp\"\\n\\t\\t*/\\n        \\n        while(j<typed.size())\\n        {\\n            if(typed[j]!=typed[j-1])\\n                return 0;\\n            j++;\\n        }\\n        return 1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1305306,
                "title": "c-easy-and-fast-solution-100-fast",
                "content": "\\tclass Solution {\\n\\tpublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int i=0,j=0;\\n        if(name[i]!=typed[j])return false;\\n        while(i<name.size())\\n        {\\n            if(name[i]==typed[j]){\\n                i++;j++;\\n            }\\n            else{\\n                if(typed[j]==typed[j-1])\\n                    j++;\\n                else\\n                    return false;\\n            }\\n        }\\n        if(j!=typed.size())\\n        {\\n            for(int i=j;i<typed.size();i++)\\n                if(typed[i]!=typed[i-1])\\n                    return false;\\n        }\\n        return true;\\n    }\\n\\t};",
                "solutionTags": [],
                "code": "class Solution {\\n\\tpublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int i=0,j=0;\\n        if(name[i]!=typed[j])return false;\\n        while(i<name.size())\\n        {\\n            if(name[i]==typed[j]){\\n                i++;j++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1103637,
                "title": "5-lines-in-c-0ms",
                "content": "```\\n    char prev = name[0];\\n    for (; *typed; ++typed)\\n        if (*typed == *name) prev = *name++;\\n        else if (*typed != prev) return false;\\n    return !*name;\\n```",
                "solutionTags": [],
                "code": "```\\n    char prev = name[0];\\n    for (; *typed; ++typed)\\n        if (*typed == *name) prev = *name++;\\n        else if (*typed != prev) return false;\\n    return !*name;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1043121,
                "title": "java-two-pointer-solution",
                "content": "\\tclass Solution {\\n\\t\\tpublic boolean isLongPressedName(String name, String typed) {\\n\\n\\t\\t\\tint i = 0, j = 0;\\n\\n\\t\\t\\twhile(j < typed.length()){\\n\\n\\t\\t\\t\\tif(i < name.length() && name.charAt(i) == typed.charAt(j)){\\n\\t\\t\\t\\t\\ti++;\\n\\t\\t\\t\\t\\tj++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse if(j > 0 && typed.charAt(j) == typed.charAt(j - 1)){\\n\\t\\t\\t\\t\\tj++;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\telse{\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn i == name.length();\\n\\t\\t}\\n\\t}",
                "solutionTags": [],
                "code": "class Solution {\\n\\t\\tpublic boolean isLongPressedName(String name, String typed) {\\n\\n\\t\\t\\tint i = 0, j = 0;\\n\\n\\t\\t\\twhile(j < typed.length()){\\n\\n\\t\\t\\t\\tif(i < name.length() && name.charAt(i) == typed.charAt(j)){\\n\\t\\t\\t\\t\\ti++;\\n\\t\\t\\t\\t\\tj++;\\n\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 983967,
                "title": "java-100-faster",
                "content": "class Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int i = 0, j= 0;\\n        while(j<typed.length()){\\n            if(i<name.length() && (name.charAt(i) == typed.charAt(j)))\\n            { \\n\\t\\t\\ti++ ;\\n            j++;\\n            }\\n            else if( j>0 && (typed.charAt(j) == typed.charAt(j-1))) j++;\\n            else return false;\\n        }\\n        return (i==name.length());\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int i = 0, j= 0;\\n        while(j<typed.length()){\\n            if(i<name.length() && (name.charAt(i) == typed.charAt(j)))\\n            { \\n\\t\\t\\ti++ ;\\n            j++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 744272,
                "title": "cpp-solution-0ms-extremely-simple",
                "content": "```\\n bool isLongPressedName(string name, string typed) {\\n        int i{0},j{0};\\n        while(i<name.length()){\\n            if(name[i]==typed[j]) i++,j++;\\n            else if(name[i]!=typed[j] && j>0 && typed[j]==typed[j-1]) j++;\\n            else return 0;\\n        }\\n\\t\\t/*\\n\\t\\tFor the Test cases like:\\n\\t\\t\"alex\"\\n        \"alexxr\"\\n\\t\\t*/\\n\\n        while(j<typed.length())\\n            if(typed[j++]!=name[name.length()-1]) return 0;\\n        return 1;\\n    }\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n bool isLongPressedName(string name, string typed) {\\n        int i{0},j{0};\\n        while(i<name.length()){\\n            if(name[i]==typed[j]) i++,j++;\\n            else if(name[i]!=typed[j] && j>0 && typed[j]==typed[j-1]) j++;\\n            else return 0;\\n        }\\n\\t\\t/*\\n\\t\\tFor the Test cases like:\\n\\t\\t\"alex\"\\n        \"alexxr\"\\n\\t\\t*/\\n\\n        while(j<typed.length())\\n            if(typed[j++]!=name[name.length()-1]) return 0;\\n        return 1;\\n    }\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 722749,
                "title": "c-2-pointer-fastest-memory-efficient",
                "content": "```\\nbool isLongPressedName(string& name, string& typed) {\\n\\tint ptr1 = 0, ptr2 = 0, N = name.length(), M = typed.length();\\n\\twhile (ptr1 != N && ptr2 != M) {\\n\\t\\tif (name[ptr1] == typed[ptr2]) {\\n\\t\\t\\tptr1++;\\n\\t\\t\\tptr2++;\\n\\t\\t} else {\\n\\t\\t\\tif (!ptr2 || typed[ptr2] != typed[ptr2 - 1]) return false;\\n\\t\\t\\tptr2++;\\n\\t\\t}\\n\\t}\\n\\n\\twhile (ptr2 != M) {\\n\\t\\tif (typed[ptr2] != typed[ptr2 - 1]) return false;\\n\\t\\tptr2++;\\n\\t}\\n\\treturn ptr1 == N;\\n}\\n```",
                "solutionTags": [
                    "C",
                    "Two Pointers"
                ],
                "code": "```\\nbool isLongPressedName(string& name, string& typed) {\\n\\tint ptr1 = 0, ptr2 = 0, N = name.length(), M = typed.length();\\n\\twhile (ptr1 != N && ptr2 != M) {\\n\\t\\tif (name[ptr1] == typed[ptr2]) {\\n\\t\\t\\tptr1++;\\n\\t\\t\\tptr2++;\\n\\t\\t} else {\\n\\t\\t\\tif (!ptr2 || typed[ptr2] != typed[ptr2 - 1]) return false;\\n\\t\\t\\tptr2++;\\n\\t\\t}\\n\\t}\\n\\n\\twhile (ptr2 != M) {\\n\\t\\tif (typed[ptr2] != typed[ptr2 - 1]) return false;\\n\\t\\tptr2++;\\n\\t}\\n\\treturn ptr1 == N;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 672530,
                "title": "java-two-pointer-0ms-100-99-28",
                "content": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int n=name.length(), m = typed.length(), i=0, j=0;\\n        while(i<n && j<m){\\n\\t\\t\\t// same character, move both i and j\\n            if(name.charAt(i)==typed.charAt(j)){\\n                i++;j++;\\n            } \\n\\t\\t\\t// different one, check if j keep move along same character\\n            else if(j>0&&typed.charAt(j)==typed.charAt(j-1)){\\n                 j++;\\n            }\\n\\t\\t\\t// if meet a different character in j but not in i\\n            else return false;\\n        }\\n\\t\\t// keep move j until end\\n        while(j<m && typed.charAt(j)==typed.charAt(j-1)) j++;\\n        return i==n && j==m;\\n      \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int n=name.length(), m = typed.length(), i=0, j=0;\\n        while(i<n && j<m){\\n\\t\\t\\t// same character, move both i and j\\n            if(name.charAt(i)==typed.charAt(j)){\\n                i++;j++;\\n            } \\n\\t\\t\\t// different one, check if j keep move along same character\\n            else if(j>0&&typed.charAt(j)==typed.charAt(j-1)){\\n                 j++;\\n            }\\n\\t\\t\\t// if meet a different character in j but not in i\\n            else return false;\\n        }\\n\\t\\t// keep move j until end\\n        while(j<m && typed.charAt(j)==typed.charAt(j-1)) j++;\\n        return i==n && j==m;\\n      \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 656534,
                "title": "c-beats-100-two-pointer",
                "content": "Easy to Understand C++ Solution\\n\\n\\tbool isLongPressedName(string name, string typed)\\n\\t{\\n\\t\\tint n = name.size(), m = typed.size(), i = 0, j = 0;\\n\\n\\t\\twhile(i < n && j < m)\\n\\t\\t{\\n\\t\\t\\tint start1 = i;\\n\\t\\t\\twhile(i < n && name[i] == name[start1])\\n\\t\\t\\t\\ti = i + 1;\\n\\n\\t\\t\\tint count1 = i - start1;\\n\\n\\t\\t\\tint start2 = j;\\n\\n\\t\\t\\twhile(j < m && typed[j] == name[start1])\\n\\t\\t\\t\\tj =  j + 1;\\n\\n\\t\\t\\tint count2 = j - start2;\\n\\n\\t\\t\\tif(count2 < count1)\\n\\t\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\treturn i == n && j == m ? true: false;\\n\\t}",
                "solutionTags": [],
                "code": "Easy to Understand C++ Solution\\n\\n\\tbool isLongPressedName(string name, string typed)\\n\\t{\\n\\t\\tint n = name.size(), m = typed.size(), i = 0, j = 0;\\n\\n\\t\\twhile(i < n && j < m)\\n\\t\\t{\\n\\t\\t\\tint start1 = i;\\n\\t\\t\\twhile(i < n && name[i] == name[start1])\\n\\t\\t\\t\\ti = i + 1;\\n\\n\\t\\t\\tint count1 = i - start1;\\n\\n\\t\\t\\tint start2 = j;\\n\\n\\t\\t\\twhile(j < m && typed[j] == name[start1])\\n\\t\\t\\t\\tj =  j + 1;\\n\\n\\t\\t\\tint count2 = j - start2;\\n\\n\\t\\t\\tif(count2 < count1)\\n\\t\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\treturn i == n && j == m ? true: false;\\n\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 649208,
                "title": "0-ms-c-easy-solution",
                "content": "```\\nbool isLongPressedName(string name, string typed) {\\n\\tint i=0, j=0;\\n\\twhile(i<name.size() && j<typed.size()){\\n\\t\\tint ct=0, cn=0;\\n\\t\\twhile(typed[j+1]==typed[j]){\\n\\t\\t\\tct++;\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\t\\twhile(name[i+1]==name[i]){\\n\\t\\t\\tcn++;\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tif(typed[j]!=name[i] || cn>ct) return false;\\n\\t\\ti++;\\n\\t\\tj++;\\n\\t}\\n\\tif(i==name.size() && j==typed.size() && name[i]==typed[j]) return true;\\n\\treturn false;\\n}",
                "solutionTags": [],
                "code": "```\\nbool isLongPressedName(string name, string typed) {\\n\\tint i=0, j=0;\\n\\twhile(i<name.size() && j<typed.size()){\\n\\t\\tint ct=0, cn=0;\\n\\t\\twhile(typed[j+1]==typed[j]){\\n\\t\\t\\tct++;\\n\\t\\t\\tj++;\\n\\t\\t}\\n\\t\\twhile(name[i+1]==name[i]){\\n\\t\\t\\tcn++;\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tif(typed[j]!=name[i] || cn>ct) return false;\\n\\t\\ti++;\\n\\t\\tj++;\\n\\t}\\n\\tif(i==name.size() && j==typed.size() && name[i]==typed[j]) return true;\\n\\treturn false;\\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 442779,
                "title": "python-two-pointer",
                "content": "```\\nclass Solution(object):\\n    def isLongPressedName(self, name, typed):\\n        #to determine if name is contained in typed.(equal by reduce some duplicate letters without reduce all)\\n        #two pointer,when not match,check if j is same as last letter.\\n        i=j=0\\n        m,n=len(name),len(typed)\\n        while j<n:\\n            if i<m and name[i]==typed[j]:\\n                i+=1\\n                j+=1\\n            elif typed[j]==name[i-1]:\\n                j+=1\\n            else:\\n                return False \\n        return i==m",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def isLongPressedName(self, name, typed):\\n        #to determine if name is contained in typed.(equal by reduce some duplicate letters without reduce all)\\n        #two pointer,when not match,check if j is same as last letter.\\n        i=j=0\\n        m,n=len(name),len(typed)\\n        while j<n:\\n            if i<m and name[i]==typed[j]:\\n                i+=1\\n                j+=1\\n            elif typed[j]==name[i-1]:\\n                j+=1\\n            else:\\n                return False \\n        return i==m",
                "codeTag": "Java"
            },
            {
                "id": 374722,
                "title": "c-100-time-100-space-optimized-0ms-soln",
                "content": "just take two pointers one on the name string and other typed string and count the number of characters matched \\nFinally return if your count matches the original length of name string\\n```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int p1=0,p2=0;   // p1 for name string and p2 for typed\\n        int c=0;                           // counts number of matched char\\n        while(p2<typed.length()){                 //loop until typed string gets over\\n            if(name[p1]==typed[p2]){               // if charachter matches move pointers ahead\\n                p1++;                                               //and increment the char count\\n                p2++;\\n                c++;\\n                continue;\\n            } \\n            p2++;                                           //else continue traversal\\n        }\\n        \\n        return c==name.length();                 //finally if count matches the name length\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int p1=0,p2=0;   // p1 for name string and p2 for typed\\n        int c=0;                           // counts number of matched char\\n        while(p2<typed.length()){                 //loop until typed string gets over\\n            if(name[p1]==typed[p2]){               // if charachter matches move pointers ahead\\n                p1++;                                               //and increment the char count\\n                p2++;\\n                c++;\\n                continue;\\n            } \\n            p2++;                                           //else continue traversal\\n        }\\n        \\n        return c==name.length();                 //finally if count matches the name length\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 346232,
                "title": "javascript-1-2-line-solution",
                "content": "```\\nvar isLongPressedName = function(name, typed) {\\n    let i = 0; return typed.split(\"\").filter(s => s == name[i] ? ++i : false).length == name.length;\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar isLongPressedName = function(name, typed) {\\n    let i = 0; return typed.split(\"\").filter(s => s == name[i] ? ++i : false).length == name.length;\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 309750,
                "title": "javascript-regex-based-solution-3-line",
                "content": "```\\n/**\\n * @param {string} name\\n * @param {string} typed\\n * @return {boolean}\\n */\\nvar isLongPressedName = function(name, typed) {\\n    if(name==typed)\\n        return true;\\n    let reg=name.split(\\'\\').join(\\'+\\');\\n    return (new RegExp(reg)).test(typed);    \\n};\\n```",
                "solutionTags": [],
                "code": "```\\n/**\\n * @param {string} name\\n * @param {string} typed\\n * @return {boolean}\\n */\\nvar isLongPressedName = function(name, typed) {\\n    if(name==typed)\\n        return true;\\n    let reg=name.split(\\'\\').join(\\'+\\');\\n    return (new RegExp(reg)).test(typed);    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 304666,
                "title": "java-one-pass-solution",
                "content": "Java one pass solution\\n\\n```\\n    public boolean isLongPressedName(String name, String typed) {\\n        if(typed.length() < name.length()) return false;\\n        char[] n = name.toCharArray();\\n        char[] t = typed.toCharArray();\\n        int j = 0;\\n        for (int i = 0; i < t.length; i++) {\\n            if(j < n.length && t[i] == n[j]) {\\n                j++; \\n            } else if( j == 0 || n[j-1] != t[i]) {\\n                return false;\\n            }\\n        }\\n        return j == n.length;\\n    }\\n\\n```",
                "solutionTags": [],
                "code": "```\\n    public boolean isLongPressedName(String name, String typed) {\\n        if(typed.length() < name.length()) return false;\\n        char[] n = name.toCharArray();\\n        char[] t = typed.toCharArray();\\n        int j = 0;\\n        for (int i = 0; i < t.length; i++) {\\n            if(j < n.length && t[i] == n[j]) {\\n                j++; \\n            } else if( j == 0 || n[j-1] != t[i]) {\\n                return false;\\n            }\\n        }\\n        return j == n.length;\\n    }\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 270602,
                "title": "easy-python-20-ms",
                "content": "```\\n    def isLongPressedName(self, name, typed):\\n        \"\"\"\\n        :type name: str\\n        :type typed: str\\n        :rtype: bool\\n        \"\"\"\\n        if name==typed:return True\\n        j = 0\\n        for x in typed:\\n            if j< len(name) and name[j]==x:\\n                j += 1\\n        return len(name) == j \\n```",
                "solutionTags": [],
                "code": "```\\n    def isLongPressedName(self, name, typed):\\n        \"\"\"\\n        :type name: str\\n        :type typed: str\\n        :rtype: bool\\n        \"\"\"\\n        if name==typed:return True\\n        j = 0\\n        for x in typed:\\n            if j< len(name) and name[j]==x:\\n                j += 1\\n        return len(name) == j \\n```",
                "codeTag": "Python3"
            },
            {
                "id": 256052,
                "title": "easy-understand-javascript-solution",
                "content": "```\\nvar isLongPressedName = function(name, typed) {\\n   typed = typed.split(\\'\\');\\n    for(var i=0;i<typed.length;i++){\\n        if(typed[i]===name[i]){\\n            continue\\n        }\\n        if(typed[i-1]&&typed[i]===typed[i-1]){\\n            typed.splice(i,1);\\n            i--;\\n        }\\n    }\\n    return name === typed.join(\\'\\');\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar isLongPressedName = function(name, typed) {\\n   typed = typed.split(\\'\\');\\n    for(var i=0;i<typed.length;i++){\\n        if(typed[i]===name[i]){\\n            continue\\n        }\\n        if(typed[i-1]&&typed[i]===typed[i-1]){\\n            typed.splice(i,1);\\n            i--;\\n        }\\n    }\\n    return name === typed.join(\\'\\');\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 194718,
                "title": "5-lines-c",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int a = 0, b = 0, n = name.size(), m = typed.size();\\n        while (a < n && b < m) {\\n            if (name[a++] != typed[b++]) return false;\\n            while (b > 0 && name[a] != typed[b] && typed[b] == typed[b - 1]) ++b;\\n        }\\n        return a == n && b == m;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int a = 0, b = 0, n = name.size(), m = typed.size();\\n        while (a < n && b < m) {\\n            if (name[a++] != typed[b++]) return false;\\n            while (b > 0 && name[a] != typed[b] && typed[b] == typed[b - 1]) ++b;\\n        }\\n        return a == n && b == m;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 186023,
                "title": "100-python",
                "content": "        i,j=0,0\\n        L1,L2=len(name),len(typed)\\n        while i<L1 and j<L2:\\n            if name[i]==typed[j]:\\n                i,j=i+1,j+1\\n            elif typed[j]==typed[j-1]:\\n                j=j+1\\n            else:\\n                return False\\n        return True if i==L1 else False",
                "solutionTags": [],
                "code": "        i,j=0,0\\n        L1,L2=len(name),len(typed)\\n        while i<L1 and j<L2:\\n            if name[i]==typed[j]:\\n                i,j=i+1,j+1\\n            elif typed[j]==typed[j-1]:\\n                j=j+1\\n            else:\\n                return False\\n        return True if i==L1 else False",
                "codeTag": "Unknown"
            },
            {
                "id": 183893,
                "title": "python-solution-with-groupby",
                "content": "```\ndef isLongPressedName(self, name, typed):\n    from itertools import groupby\n    name_groups = [(ch, len(list(g))) for ch, g in groupby(name)]\n    typed_groups = [(ch, len(list(g))) for ch, g in groupby(typed)]\n    if len(typed_groups) < len(name_groups):\n        return False\n    for i in range(len(name_groups)):\n        if typed_groups[i][0] != name_groups[i][0] or \\\n            typed_groups[i][1] < name_groups[i][1]:\n            return False\n    return True\n```",
                "solutionTags": [],
                "code": "```\ndef isLongPressedName(self, name, typed):\n    from itertools import groupby\n    name_groups = [(ch, len(list(g))) for ch, g in groupby(name)]\n    typed_groups = [(ch, len(list(g))) for ch, g in groupby(typed)]\n    if len(typed_groups) < len(name_groups):\n        return False\n    for i in range(len(name_groups)):\n        if typed_groups[i][0] != name_groups[i][0] or \\\n            typed_groups[i][1] < name_groups[i][1]:\n            return False\n    return True\n```",
                "codeTag": "Python3"
            },
            {
                "id": 183845,
                "title": "easiest-o-n-time-and-o-1-space-c",
                "content": "    bool isLongPressedName(string name, string typed) {\n        int len1 = name.length(), len2 = typed.length();\n        int i = 0, j = 0;\n        while(i < len1 && j < len2) {\n            if(name[i] == typed[j]) {\n                i++;j++;\n            } else {\n                if(j == 0 || typed[j] != typed[j -1])\n                    return false;\n                j++;\n            }\n        }\n        return i == len1;\n    }",
                "solutionTags": [],
                "code": "    bool isLongPressedName(string name, string typed) {\n        int len1 = name.length(), len2 = typed.length();\n        int i = 0, j = 0;\n        while(i < len1 && j < len2) {\n            if(name[i] == typed[j]) {\n                i++;j++;\n            } else {\n                if(j == 0 || typed[j] != typed[j -1])\n                    return false;\n                j++;\n            }\n        }\n        return i == len1;\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3947927,
                "title": "solution-in-dart-with-two-pointers",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n bool isLongPressedName(String name, String typed) {\\n  if (typed.length < name.length) {\\n    return false;\\n  }\\n  \\n  int i = 0;\\n  int j = 0;\\n  \\n  while (j < typed.length) {\\n    if (i < name.length && (name[i] == typed[j])) {\\n      i++;\\n      j++;\\n    } else if (j > 0 && typed[j] == typed[j - 1]) {\\n      j++;\\n    } else {\\n      return false;\\n    }\\n  }\\n  \\n  return i == name.length;\\n}\\n\\n}\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\n bool isLongPressedName(String name, String typed) {\\n  if (typed.length < name.length) {\\n    return false;\\n  }\\n  \\n  int i = 0;\\n  int j = 0;\\n  \\n  while (j < typed.length) {\\n    if (i < name.length && (name[i] == typed[j])) {\\n      i++;\\n      j++;\\n    } else if (j > 0 && typed[j] == typed[j - 1]) {\\n      j++;\\n    } else {\\n      return false;\\n    }\\n  }\\n  \\n  return i == name.length;\\n}\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3909464,
                "title": "java-solution-long-pressed-name-two-pointer-approach",
                "content": "**Please Upvote!!**\\n\\n# Approach\\nThis solution uses two pointers (i for the \\'typed\\' string and j for the \\'name\\' string) to compare characters and handle the long-press scenario. It iterates through the \\'typed\\' string, ensuring that each character in \\'name\\' matches the corresponding character in \\'typed\\' and handles long-press cases.\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int j = 0;  // Initialize a pointer for the \\'name\\' string\\n        if (typed.length() < name.length()) return false;  // If \\'typed\\' is shorter, it can\\'t match \\'name\\'\\n        for (int i = 0; i < typed.length(); i++) {\\n            // If the current characters in \\'name\\' and \\'typed\\' match, move the \\'name\\' pointer\\n            if (j < name.length() && name.charAt(j) == typed.charAt(i)) {\\n                j++;\\n            } else if (i > 0 && typed.charAt(i) == typed.charAt(i - 1)) {\\n                // If the current character in \\'typed\\' is the same as the previous one, it\\'s allowed (long press)\\n                continue;\\n            } else {\\n                // If none of the conditions match, it means the characters don\\'t match\\n                return false;\\n            }\\n        }\\n        // If we reached the end of the \\'name\\' string, it means all characters were found in \\'typed\\'\\n        return j == name.length();\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int j = 0;  // Initialize a pointer for the \\'name\\' string\\n        if (typed.length() < name.length()) return false;  // If \\'typed\\' is shorter, it can\\'t match \\'name\\'\\n        for (int i = 0; i < typed.length(); i++) {\\n            // If the current characters in \\'name\\' and \\'typed\\' match, move the \\'name\\' pointer\\n            if (j < name.length() && name.charAt(j) == typed.charAt(i)) {\\n                j++;\\n            } else if (i > 0 && typed.charAt(i) == typed.charAt(i - 1)) {\\n                // If the current character in \\'typed\\' is the same as the previous one, it\\'s allowed (long press)\\n                continue;\\n            } else {\\n                // If none of the conditions match, it means the characters don\\'t match\\n                return false;\\n            }\\n        }\\n        // If we reached the end of the \\'name\\' string, it means all characters were found in \\'typed\\'\\n        return j == name.length();\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3878610,
                "title": "java-0-ms-100-faster-time-complexity-o-n-space-complexity-o-1-easy-approach",
                "content": "# Intuition\\nHere we have to Compare the both string and see can we create the typed word by pressing the key long. \\n\\n# Approach\\nWe will use the two variable to store the index for each string and then we compare values at that index and based on that we will move the indexs forward. if character at both index match then move both pointer forward otherwise check it matchs prev value of the named String is equals to value at the index in typed String if yes then move only typed pointer and if not then return false. \\nAlso we have to check that both of pointer of string reach the end of the string. \\n\\n# Complexity\\n- Time complexity:\\nAs only one traverse required. Time Complexity : O(N)\\n\\n- Space complexity:\\nAs only constant Space for variables required. Space Complexity : O(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int len1 = name.length();\\n        int len2 = typed.length();\\n        int idx1 = 0;\\n        int idx2 = 0;\\n        char prev = name.charAt(0);\\n        char c2 = typed.charAt(0);\\n        char c1 = prev;\\n        while(idx1 < len1 && idx2 < len2 ){\\n            c1 = name.charAt(idx1);\\n            c2 = typed.charAt(idx2);\\n            if(c1 == c2){\\n                idx1++;\\n                idx2++;\\n                prev = c1;\\n            }\\n            else if(c2 == prev){\\n                idx2++;\\n            }\\n            else{\\n                return false;\\n            }   \\n        } \\n        while(idx2<len2){\\n            c2 = typed.charAt(idx2);\\n            if(c2 != c1){\\n                return false;\\n            }\\n            idx2++;\\n        }\\n        return idx1==len1 && idx2==len2;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int len1 = name.length();\\n        int len2 = typed.length();\\n        int idx1 = 0;\\n        int idx2 = 0;\\n        char prev = name.charAt(0);\\n        char c2 = typed.charAt(0);\\n        char c1 = prev;\\n        while(idx1 < len1 && idx2 < len2 ){\\n            c1 = name.charAt(idx1);\\n            c2 = typed.charAt(idx2);\\n            if(c1 == c2){\\n                idx1++;\\n                idx2++;\\n                prev = c1;\\n            }\\n            else if(c2 == prev){\\n                idx2++;\\n            }\\n            else{\\n                return false;\\n            }   \\n        } \\n        while(idx2<len2){\\n            c2 = typed.charAt(idx2);\\n            if(c2 != c1){\\n                return false;\\n            }\\n            idx2++;\\n        }\\n        return idx1==len1 && idx2==len2;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3872920,
                "title": "python-compress-strings-then-compare",
                "content": "First I wrote a solution based on various conditions and it produced a good result. But I didn\\'t like the way it looked. You can skip it, because the second solution is below and I like it much better.\\n# My first solution (Beats 98.86% - skip it):\\n```\\nclass Solution:\\n    def isLongPressedName(self, name: str, typed: str) -> bool:\\n        if name[-1] != typed[-1] or len(set(name)) > len(set(typed)):\\n            return False\\n        name_pointer = 0\\n        typed_pointer = 0\\n        while name_pointer <= len(name) - 1:\\n            if (typed_pointer == len(typed) - 1 and name_pointer != len(name) - 1) or name[name_pointer] != typed[typed_pointer]:\\n                return False\\n            if name_pointer != len(name) - 1 and name[name_pointer] != name[name_pointer + 1]:\\n                while typed_pointer <= len(typed) - 1 and name[name_pointer] == typed[typed_pointer]:\\n                    typed_pointer += 1\\n                name_pointer += 1\\n            elif name_pointer == len(name) - 1:\\n                if \\'\\'.join(set(typed[typed_pointer:])) == name[name_pointer]:\\n                    return True\\n                else:\\n                    return False\\n            else:\\n                typed_pointer += 1\\n                name_pointer += 1\\n```\\n# My second solution (Beats 92.68%)\\nThen I remembered the string compression problem and decided to implement a solution based on it. I wrote a function that compresses, then splits the original strings, and then compares them.\\nFor example:\\n```\\n>>>compress_split_string(\"saeed\") \\n[\\'s1\\',\\'a1\\',\\'e2\\',\\'d1\\']\\n>>>compress_split_string(\"ssaaedd\")\\n[\\'s2\\',\\'a2\\',\\'e1\\',\\'d2\\']\\n```\\n```\\nclass Solution:\\n    def isLongPressedName(self, name: str, typed: str) -> bool:\\n        if set(name) != set(typed):\\n            return False\\n        def compress_split_string(str_):\\n            char_counter = 1\\n            str_ += \\' \\'\\n            list_compress = []\\n            for idx, t_char in enumerate(str_):\\n                if idx == 0:\\n                    continue\\n                if t_char != str_[idx - 1]:\\n                    list_compress.append(str_[idx - 1] + str(char_counter))\\n                    char_counter = 1\\n                else:\\n                    char_counter += 1\\n            return list_compress\\n        name_compress = compress_split_string(name)\\n        typed_compress = compress_split_string(typed)\\n        if len(name_compress) != len(typed_compress):\\n            return False\\n        for n_num, t_num in zip(name_compress, typed_compress):\\n            if t_num < n_num:\\n                return False\\n        return True\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isLongPressedName(self, name: str, typed: str) -> bool:\\n        if name[-1] != typed[-1] or len(set(name)) > len(set(typed)):\\n            return False\\n        name_pointer = 0\\n        typed_pointer = 0\\n        while name_pointer <= len(name) - 1:\\n            if (typed_pointer == len(typed) - 1 and name_pointer != len(name) - 1) or name[name_pointer] != typed[typed_pointer]:\\n                return False\\n            if name_pointer != len(name) - 1 and name[name_pointer] != name[name_pointer + 1]:\\n                while typed_pointer <= len(typed) - 1 and name[name_pointer] == typed[typed_pointer]:\\n                    typed_pointer += 1\\n                name_pointer += 1\\n            elif name_pointer == len(name) - 1:\\n                if \\'\\'.join(set(typed[typed_pointer:])) == name[name_pointer]:\\n                    return True\\n                else:\\n                    return False\\n            else:\\n                typed_pointer += 1\\n                name_pointer += 1\\n```\n```\\n>>>compress_split_string(\"saeed\") \\n[\\'s1\\',\\'a1\\',\\'e2\\',\\'d1\\']\\n>>>compress_split_string(\"ssaaedd\")\\n[\\'s2\\',\\'a2\\',\\'e1\\',\\'d2\\']\\n```\n```\\nclass Solution:\\n    def isLongPressedName(self, name: str, typed: str) -> bool:\\n        if set(name) != set(typed):\\n            return False\\n        def compress_split_string(str_):\\n            char_counter = 1\\n            str_ += \\' \\'\\n            list_compress = []\\n            for idx, t_char in enumerate(str_):\\n                if idx == 0:\\n                    continue\\n                if t_char != str_[idx - 1]:\\n                    list_compress.append(str_[idx - 1] + str(char_counter))\\n                    char_counter = 1\\n                else:\\n                    char_counter += 1\\n            return list_compress\\n        name_compress = compress_split_string(name)\\n        typed_compress = compress_split_string(typed)\\n        if len(name_compress) != len(typed_compress):\\n            return False\\n        for n_num, t_num in zip(name_compress, typed_compress):\\n            if t_num < n_num:\\n                return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3619680,
                "title": "100-fastest-easy-to-understand",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        if(typed.size()<name.size())\\n        return false;\\n        if(typed == name)\\n        return true;\\n        int i,j;\\n        for(i = 0,j=0; i<name.size() && j<typed.size(); )\\n        {\\n            if(name[i] == typed[j])\\n            {\\n                i++;\\n                j++;\\n            }\\n            else\\n            if(j>0 && typed[j] == typed[j-1])\\n            j++;\\n            else\\n            return false;\\n        }\\n        while(j<typed.size())\\n        {\\n            if(typed[j]!=typed[j-1])\\n            return false;\\n            j++;\\n        }\\n\\n        if(i>=name.size() && j>=typed.size())\\n        return true;\\n\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        if(typed.size()<name.size())\\n        return false;\\n        if(typed == name)\\n        return true;\\n        int i,j;\\n        for(i = 0,j=0; i<name.size() && j<typed.size(); )\\n        {\\n            if(name[i] == typed[j])\\n            {\\n                i++;\\n                j++;\\n            }\\n            else\\n            if(j>0 && typed[j] == typed[j-1])\\n            j++;\\n            else\\n            return false;\\n        }\\n        while(j<typed.size())\\n        {\\n            if(typed[j]!=typed[j-1])\\n            return false;\\n            j++;\\n        }\\n\\n        if(i>=name.size() && j>=typed.size())\\n        return true;\\n\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3556560,
                "title": "kotlin-simple-o-n-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    fun isLongPressedName(name: String, typed: String): Boolean {\\n\\n        var index = 0\\n        var lastChar : Char? = null\\n        for(ch in typed){\\n            if(index< name.length && ch == name[index]) {\\n                lastChar = ch\\n                index++\\n            }else if(ch == lastChar){\\n                continue\\n            }else{\\n                return false\\n            }\\n        }\\n\\n        return index == name.length\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun isLongPressedName(name: String, typed: String): Boolean {\\n\\n        var index = 0\\n        var lastChar : Char? = null\\n        for(ch in typed){\\n            if(index< name.length && ch == name[index]) {\\n                lastChar = ch\\n                index++\\n            }else if(ch == lastChar){\\n                continue\\n            }else{\\n                return false\\n            }\\n        }\\n\\n        return index == name.length\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3005558,
                "title": "925-java-2-approach",
                "content": "# Complexity\\n- Runtime : 0 ms\\n- Beats : 100%\\n- Memory : 40.5 MB\\n- Beats : 69.85%\\n# Code 1\\n```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        if(name.equals(typed)) return true;\\n        int i = 0;\\n        char n = name.charAt(0) , prev = name.charAt(0);\\n        for(char c : typed.toCharArray()){\\n            if(n == c){\\n                if(i < name.length()-1) {\\n                    i++;\\n                    prev = n;\\n                    n = name.charAt(i);\\n                }else prev = n;\\n            }\\n            else if(c == prev);\\n            else return false;\\n        }\\n        if(i < name.length()-1 || n != prev ) return false;\\n        return true;\\n    }\\n}\\n```\\n# Complexity\\n- Runtime : 1 ms\\n- Beats : 82.59%\\n- Memory : 42.1 MB\\n- Beats : 36.72%\\n# Code 2\\n```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int i = 0;\\n        char n = name.charAt(0) , prev = name.charAt(0);\\n        for(char c : typed.toCharArray()){\\n            if(n == c){\\n                if(i < name.length()-1) {\\n                    i++;\\n                    prev = n;\\n                    n = name.charAt(i);\\n                }else prev = n;\\n            }\\n            else if(c == prev);\\n            else return false;\\n        }\\n        if(i < name.length()-1 || n != prev ) return false;\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        if(name.equals(typed)) return true;\\n        int i = 0;\\n        char n = name.charAt(0) , prev = name.charAt(0);\\n        for(char c : typed.toCharArray()){\\n            if(n == c){\\n                if(i < name.length()-1) {\\n                    i++;\\n                    prev = n;\\n                    n = name.charAt(i);\\n                }else prev = n;\\n            }\\n            else if(c == prev);\\n            else return false;\\n        }\\n        if(i < name.length()-1 || n != prev ) return false;\\n        return true;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int i = 0;\\n        char n = name.charAt(0) , prev = name.charAt(0);\\n        for(char c : typed.toCharArray()){\\n            if(n == c){\\n                if(i < name.length()-1) {\\n                    i++;\\n                    prev = n;\\n                    n = name.charAt(i);\\n                }else prev = n;\\n            }\\n            else if(c == prev);\\n            else return false;\\n        }\\n        if(i < name.length()-1 || n != prev ) return false;\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2830105,
                "title": "python-solution-two-pointers-approach-explained-100",
                "content": "```\\nclass Solution:\\n    def isLongPressedName(self, name: str, typed: str) -> bool: \\n        \\n        n=len(name) #length of name\\n        m=len(typed) #length of typed \\n\\t\\t\\n        #if name is shorter than typed means keys arent enough pressed in typed to become equal to name\\n        if m<n: \\n            return False\\n        \\n        #if first elements are differnt means that first element in name is never be \\n        #pressed at first position of typed\\n        if name[0]!=typed[0]:  \\n            return False \\n        \\n        #remaining code \\n        \\n        i=0 #index for name\\n        j=0 #index for typed\\n        \\n        #need to check if all chracters of name are present in typed\\n        #that\\'s why only running loop till the name\\'s length\\n        while i<n:  \\n            if name[i]==typed[j]: #if characters found same\\n                i+=1 #move forward in name\\n                j+=1 #and move forward in typed\\n                \\n            else: #if characters not found same at those positions\\n                \\n                #check if name\\'s previous element is long pressing in typed (i.e, \\n                #current element of typed equal to previous name\\'s element)\\n                if typed[j]==name[i-1]: \\n                    j+=1 #if above condition goes true, now move further in typed\\n                \\n                #otherwise it means the current charcter of typed is different \\n                #or not available in whole name string\\n                else: \\n                    return False\\n                \\n            #if on moving the indeces of j , somehow reached to typed\\'s end but names indeces are\\n            # still not fully traversed means name string is not present in typed in any condition\\n            if j==m and i!=n:  \\n                return False\\n            \\n        #AFTER WHILE LOOP CHECK-\\n            \\n        #if name string completely traversed but typed isnt means we need to check remaining characters of typed\\n        if j!=m: \\n            while j<m: #traversing remainings\\n                \\n                #if last character of name is long pressed then all the remainings of typed \\n                #would be equal to names last character, but in case they arent equal (differnt \\n                # charcters found in typed) then return false\\n                if typed[j]!=name[n-1]:   \\n                    return False\\n                \\n                j+=1 #moving indeces of typed\\n                \\n        return True #if nothing goes wrong , return true\\n            \\n        \\n```\\n**PLEASE UPVOTE IF YOU FOUND THE SOLUTION HELPFUL**",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution:\\n    def isLongPressedName(self, name: str, typed: str) -> bool: \\n        \\n        n=len(name) #length of name\\n        m=len(typed) #length of typed \\n\\t\\t\\n        #if name is shorter than typed means keys arent enough pressed in typed to become equal to name\\n        if m<n: \\n            return False\\n        \\n        #if first elements are differnt means that first element in name is never be \\n        #pressed at first position of typed\\n        if name[0]!=typed[0]:  \\n            return False \\n        \\n        #remaining code \\n        \\n        i=0 #index for name\\n        j=0 #index for typed\\n        \\n        #need to check if all chracters of name are present in typed\\n        #that\\'s why only running loop till the name\\'s length\\n        while i<n:  \\n            if name[i]==typed[j]: #if characters found same\\n                i+=1 #move forward in name\\n                j+=1 #and move forward in typed\\n                \\n            else: #if characters not found same at those positions\\n                \\n                #check if name\\'s previous element is long pressing in typed (i.e, \\n                #current element of typed equal to previous name\\'s element)\\n                if typed[j]==name[i-1]: \\n                    j+=1 #if above condition goes true, now move further in typed\\n                \\n                #otherwise it means the current charcter of typed is different \\n                #or not available in whole name string\\n                else: \\n                    return False\\n                \\n            #if on moving the indeces of j , somehow reached to typed\\'s end but names indeces are\\n            # still not fully traversed means name string is not present in typed in any condition\\n            if j==m and i!=n:  \\n                return False\\n            \\n        #AFTER WHILE LOOP CHECK-\\n            \\n        #if name string completely traversed but typed isnt means we need to check remaining characters of typed\\n        if j!=m: \\n            while j<m: #traversing remainings\\n                \\n                #if last character of name is long pressed then all the remainings of typed \\n                #would be equal to names last character, but in case they arent equal (differnt \\n                # charcters found in typed) then return false\\n                if typed[j]!=name[n-1]:   \\n                    return False\\n                \\n                j+=1 #moving indeces of typed\\n                \\n        return True #if nothing goes wrong , return true\\n            \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2828740,
                "title": "c-with-explanation-100-runtime-97-memory",
                "content": "# General idea\\nIterate through *typed* and compare with n. If the two compared characters are not equal, check if it is a mistype.\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int n=0;\\n        for (int t=0;t<typed.size();t++) // Iterate through typed\\n        {\\n            if (name[n]==typed[t]) {n++;continue;} // If the typed character equals the correct name character, we can continue, incrementing n to look at the next character in name.\\n            if (t==0) {return false;} // Special case: If the first typed character is incorrect, return false.\\n            if (typed[t] == typed[t-1]) {continue;} // If the typed character is a possible mistype (equal to the previous typed character), we can continue.\\n            return false; // We find a discrepancy that is not a possible mistype.\\n        }\\n        return n==name.size(); // Check that all characters of the name and no more have been typed.\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int n=0;\\n        for (int t=0;t<typed.size();t++) // Iterate through typed\\n        {\\n            if (name[n]==typed[t]) {n++;continue;} // If the typed character equals the correct name character, we can continue, incrementing n to look at the next character in name.\\n            if (t==0) {return false;} // Special case: If the first typed character is incorrect, return false.\\n            if (typed[t] == typed[t-1]) {continue;} // If the typed character is a possible mistype (equal to the previous typed character), we can continue.\\n            return false; // We find a discrepancy that is not a possible mistype.\\n        }\\n        return n==name.size(); // Check that all characters of the name and no more have been typed.\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2582561,
                "title": "js-simple-solution-with-hashmap",
                "content": "```\\nvar isLongPressedName = function(name, typed) {\\n    if (typed.length < name.length || typed[typed.length - 1] !== name[name.length - 1]) return false;\\n    const hashmap = new Map();\\n    let cursorName = 0;\\n    \\n    for (let i = 0; i < name.length; i++) {\\n        hashmap.set(i, name[i]);\\n    }\\n    for (let i = 0; i < typed.length; i++) {\\n        const character = typed[i];\\n        if (character === hashmap.get(cursorName)) {\\n            cursorName++;\\n        } else if (character !== hashmap.get(cursorName - 1)) {\\n            return false;\\n        }\\n    }\\n    \\n    if (cursorName < name.length - 1) return false;\\n    \\n    return true;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar isLongPressedName = function(name, typed) {\\n    if (typed.length < name.length || typed[typed.length - 1] !== name[name.length - 1]) return false;\\n    const hashmap = new Map();\\n    let cursorName = 0;\\n    \\n    for (let i = 0; i < name.length; i++) {\\n        hashmap.set(i, name[i]);\\n    }\\n    for (let i = 0; i < typed.length; i++) {\\n        const character = typed[i];\\n        if (character === hashmap.get(cursorName)) {\\n            cursorName++;\\n        } else if (character !== hashmap.get(cursorName - 1)) {\\n            return false;\\n        }\\n    }\\n    \\n    if (cursorName < name.length - 1) return false;\\n    \\n    return true;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2393570,
                "title": "java-solution",
                "content": "```\\n\\n```class Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int i=0,j=0;\\n        while(j<typed.length()){\\n        if(i<name.length() && name.charAt(i)==typed.charAt(j)){\\n            i++;\\n            j++;\\n        }\\n        else if(j>0 && typed.charAt(j)==typed.charAt(j-1))\\n            j++;\\n        else\\n            return false;\\n           // System.out.println(i+\" \"+j);\\n        }\\n        return i==name.length();\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2330519,
                "title": "runtime-1-ms-faster-than-91-83-of-java-online-submissions",
                "content": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int i = 0;\\n        int j = 0;\\n        \\n        while(j < typed.length()){\\n            if(i < name.length() && name.charAt(i) == typed.charAt(j)){\\n                i++;\\n                j++;\\n            }else if(j != 0 && typed.charAt(j) == name.charAt(i-1)){\\n                j++;\\n            }else{\\n                return false;\\n            }\\n        }\\n        return i == name.length();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int i = 0;\\n        int j = 0;\\n        \\n        while(j < typed.length()){\\n            if(i < name.length() && name.charAt(i) == typed.charAt(j)){\\n                i++;\\n                j++;\\n            }else if(j != 0 && typed.charAt(j) == name.charAt(i-1)){\\n                j++;\\n            }else{\\n                return false;\\n            }\\n        }\\n        return i == name.length();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2293896,
                "title": "python-o-n-using-simple-string-operators",
                "content": "Use string strip option with groupby function, simple O(N) method\\n\\n```class Solution:\\n    def isLongPressedName(self, name: str, typed: str) -> bool:\\n        for char,group in itertools.groupby(name):\\n            c = str(char) * len(list(group))\\n            if not typed.startswith(c):\\n                return False\\n            typed = typed.lstrip(c)\\n        return typed == \"\"",
                "solutionTags": [],
                "code": "Use string strip option with groupby function, simple O(N) method\\n\\n```class Solution:\\n    def isLongPressedName(self, name: str, typed: str) -> bool:\\n        for char,group in itertools.groupby(name):\\n            c = str(char) * len(list(group))\\n            if not typed.startswith(c):\\n                return False\\n            typed = typed.lstrip(c)\\n        return typed == \"\"",
                "codeTag": "Java"
            },
            {
                "id": 2249249,
                "title": "python-easy-and-fast-o-n",
                "content": "```\\nclass Solution:\\n    def isLongPressedName(self, name: str, typed: str) -> bool:\\n        i = 0\\n        for c in typed:\\n            if i < len(name) and name[i] == c: i += 1\\n            else:\\n                if i == 0 or name[i-1] != c: return False\\n        return i == len(name)",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def isLongPressedName(self, name: str, typed: str) -> bool:\\n        i = 0\\n        for c in typed:\\n            if i < len(name) and name[i] == c: i += 1\\n            else:\\n                if i == 0 or name[i-1] != c: return False\\n        return i == len(name)",
                "codeTag": "Java"
            },
            {
                "id": 2238236,
                "title": "two-pointer-solution",
                "content": "**Two pointer solution readable code self explanatory comments**\\n```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string a,string b){\\n    int i = 0 , j = 0;\\n    int n = a.size() , m = b.size();\\n    \\n    //if typed is smaller than original\\n    if(m < n) return false;\\n        \\n    while(i < n and j < m){\\n        if(a[i] == b[j]){\\n            i++,j++;\\n        }\\n        else{\\n            if(j == 0) return false;\\n            if(j > 0 && b[j - 1] != b[j]) return false;\\n            else if(b[j - 1] == b[j]){\\n                j++;\\n            }\\n        }\\n    }\\n        \\n    //if original string has not completed traversal\\n    if(i != n) return false;\\n    \\n    //if i has ended but j has more characters check if there are any character that is different\\n    while(j < m){\\n        if(j > 0 and b[j] != b[j - 1]) return false;\\n        j++;\\n    }\\n    return true;\\n}\\n};\\n```",
                "solutionTags": [
                    "Array",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string a,string b){\\n    int i = 0 , j = 0;\\n    int n = a.size() , m = b.size();\\n    \\n    //if typed is smaller than original\\n    if(m < n) return false;\\n        \\n    while(i < n and j < m){\\n        if(a[i] == b[j]){\\n            i++,j++;\\n        }\\n        else{\\n            if(j == 0) return false;\\n            if(j > 0 && b[j - 1] != b[j]) return false;\\n            else if(b[j - 1] == b[j]){\\n                j++;\\n            }\\n        }\\n    }\\n        \\n    //if original string has not completed traversal\\n    if(i != n) return false;\\n    \\n    //if i has ended but j has more characters check if there are any character that is different\\n    while(j < m){\\n        if(j > 0 and b[j] != b[j - 1]) return false;\\n        j++;\\n    }\\n    return true;\\n}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2191234,
                "title": "java-o-n-solution-1ms-runtime-beats-91-intuition",
                "content": "**Approach:**\\nThe approach is to count the number of similar characters for each string. \\n\\n1. Taken a character **typed** should have more or equal count than **name**.\\n2. Total length of typed string should be more than name string.\\n\\n```\\npublic boolean isLongPressedName(String name, String typed) {\\n\\tif (name.charAt(0) != typed.charAt(0) || name.length() > typed.length() ) return false;\\n\\tint c1 = 1, c2 = 1, i = 1, j = 1;\\n\\twhile ( i < name.length() && j < typed.length() ) {\\n\\t\\tboolean b = false;\\n\\t\\tif ( name.charAt(i) == name.charAt(i - 1) ) {\\n\\t\\t\\tc1++;\\n\\t\\t\\ti++;\\n\\t\\t\\tb = true;\\n\\t\\t}\\n\\t\\tif ( typed.charAt(j) == typed.charAt(j - 1) ) {\\n\\t\\t\\tc2++;\\n\\t\\t\\tj++;\\n\\t\\t\\tb = true;\\n\\t\\t}\\n\\t\\tif ( !b ) {\\n\\t\\t\\tif ( name.charAt(i) != typed.charAt(j) || c2 < c1 ) return false;\\n\\t\\t\\ti++;\\n\\t\\t\\tj++;\\n\\t\\t\\tc1 = c2 = 1;\\n\\t\\t}\\n\\t}\\n\\tif ( i < name.length() ) return false;\\n\\twhile ( j < typed.length() ) {\\n\\t\\tif (typed.charAt(j) != typed.charAt(j - 1)) return false;\\n\\t\\tj++;\\n\\t}\\n\\n\\treturn true;\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Iterator"
                ],
                "code": "```\\npublic boolean isLongPressedName(String name, String typed) {\\n\\tif (name.charAt(0) != typed.charAt(0) || name.length() > typed.length() ) return false;\\n\\tint c1 = 1, c2 = 1, i = 1, j = 1;\\n\\twhile ( i < name.length() && j < typed.length() ) {\\n\\t\\tboolean b = false;\\n\\t\\tif ( name.charAt(i) == name.charAt(i - 1) ) {\\n\\t\\t\\tc1++;\\n\\t\\t\\ti++;\\n\\t\\t\\tb = true;\\n\\t\\t}\\n\\t\\tif ( typed.charAt(j) == typed.charAt(j - 1) ) {\\n\\t\\t\\tc2++;\\n\\t\\t\\tj++;\\n\\t\\t\\tb = true;\\n\\t\\t}\\n\\t\\tif ( !b ) {\\n\\t\\t\\tif ( name.charAt(i) != typed.charAt(j) || c2 < c1 ) return false;\\n\\t\\t\\ti++;\\n\\t\\t\\tj++;\\n\\t\\t\\tc1 = c2 = 1;\\n\\t\\t}\\n\\t}\\n\\tif ( i < name.length() ) return false;\\n\\twhile ( j < typed.length() ) {\\n\\t\\tif (typed.charAt(j) != typed.charAt(j - 1)) return false;\\n\\t\\tj++;\\n\\t}\\n\\n\\treturn true;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2158084,
                "title": "c-two-pointers",
                "content": "class Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        \\n        int i = 0, j = 0, n1 = name.size(), n2 = typed.size();\\n        \\n        while(i < n1 && j < n2)\\n        {\\n            if(name[i] != typed[j])\\n                return false;\\n            \\n            int cnt1 = 1, cnt2 = 1;\\n            i++, j++;\\n            while(i < n1 && name[i] == name[i - 1])\\n                cnt1++, i++;\\n            \\n            while(j < n2 && typed[j] == typed[j - 1])\\n                cnt2++, j++;\\n            \\n            if(cnt2 < cnt1)\\n                return false;\\n        }\\n        \\n        return i == n1 && j == n2;\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Two Pointers"
                ],
                "code": "class Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        \\n        int i = 0, j = 0, n1 = name.size(), n2 = typed.size();\\n        \\n        while(i < n1 && j < n2)\\n        {\\n            if(name[i] != typed[j])\\n                return false;\\n            \\n            int cnt1 = 1, cnt2 = 1;\\n            i++, j++;\\n            while(i < n1 && name[i] == name[i - 1])\\n                cnt1++, i++;\\n            \\n            while(j < n2 && typed[j] == typed[j - 1])\\n                cnt2++, j++;\\n            \\n            if(cnt2 < cnt1)\\n                return false;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2099093,
                "title": "go-two-pointer",
                "content": "Runtime:\\xA00 ms, faster than\\xA0100.00%\\xA0of\\xA0Go\\xA0online submissions for\\xA0Long Pressed Name.\\nMemory Usage:\\xA01.9 MB, less than\\xA068.57%\\xA0of\\xA0Go\\xA0online submissions for\\xA0Long Pressed Name.\\n```\\nfunc isLongPressedName(name string, typed string) bool {\\n    if len(name) > len(typed) {\\n        return false\\n    }\\n    nameChars := []byte(name)\\n    typedChars := []byte(typed)\\n    \\n    i, j := 0, 0\\n    \\n    for j < len(typedChars) && i < len(nameChars) {\\n        if nameChars[i] == typedChars[j] {\\n            i++\\n            j++\\n        } else if isLongPressed(typedChars, j) {\\n            j++\\n        } else {\\n            return false\\n        }\\n    }\\n    \\n    // increment j until longpressed chars found\\n    for j < len(typedChars) {\\n        if isLongPressed(typedChars, j) {\\n            j++\\n        } else {\\n            return false\\n        }\\n    }\\n    \\n    return i == len(name) && j == len(typed)\\n\\n}\\n\\nfunc isLongPressed(typed []byte, i int) bool {\\n    return i > 0 && typed[i] == typed[i - 1]\\n}\\n```\\n\\n",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc isLongPressedName(name string, typed string) bool {\\n    if len(name) > len(typed) {\\n        return false\\n    }\\n    nameChars := []byte(name)\\n    typedChars := []byte(typed)\\n    \\n    i, j := 0, 0\\n    \\n    for j < len(typedChars) && i < len(nameChars) {\\n        if nameChars[i] == typedChars[j] {\\n            i++\\n            j++\\n        } else if isLongPressed(typedChars, j) {\\n            j++\\n        } else {\\n            return false\\n        }\\n    }\\n    \\n    // increment j until longpressed chars found\\n    for j < len(typedChars) {\\n        if isLongPressed(typedChars, j) {\\n            j++\\n        } else {\\n            return false\\n        }\\n    }\\n    \\n    return i == len(name) && j == len(typed)\\n\\n}\\n\\nfunc isLongPressed(typed []byte, i int) bool {\\n    return i > 0 && typed[i] == typed[i - 1]\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2093768,
                "title": "easy-solution-in-c",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int i=0, j=0;\\n        int n=name.length(), t = typed.length();\\n        \\n        if(name[0]!=typed[0]) return false;\\n        \\n        while(i<n || j<t){\\n            if(name[i] == typed[j]){\\n                i++,j++;\\n            }\\n            else{\\n                if(typed[j] == typed[j-1]){ //check for repeated characters\\n                    j++;\\n                }else{\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int i=0, j=0;\\n        int n=name.length(), t = typed.length();\\n        \\n        if(name[0]!=typed[0]) return false;\\n        \\n        while(i<n || j<t){\\n            if(name[i] == typed[j]){\\n                i++,j++;\\n            }\\n            else{\\n                if(typed[j] == typed[j-1]){ //check for repeated characters\\n                    j++;\\n                }else{\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2066375,
                "title": "java-two-pointer",
                "content": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int i=1;\\n        int n=name.length(), m=typed.length();\\n        if(name.charAt(0)!=typed.charAt(0)) return false; \\n        for(int j=1;j<m;j++){\\n            if(i<n && name.charAt(i)==typed.charAt(j)) i++;\\n            else if(name.charAt(i-1)!=typed.charAt(j)) return false;\\n        }\\n        return i==n;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int i=1;\\n        int n=name.length(), m=typed.length();\\n        if(name.charAt(0)!=typed.charAt(0)) return false; \\n        for(int j=1;j<m;j++){\\n            if(i<n && name.charAt(i)==typed.charAt(j)) i++;\\n            else if(name.charAt(i-1)!=typed.charAt(j)) return false;\\n        }\\n        return i==n;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2061680,
                "title": "javascript-2-pointers",
                "content": "```\\nvar isLongPressedName = function(name, typed) {\\n    let i=0, j=0, prev=name[i];\\n    while(j<typed.length) {\\n        if(name[i] === typed[j]) {\\n            prev = name[i];\\n            i+=1;\\n            j+=1;\\n        } else if(prev === typed[j]) {\\n            j+=1;\\n        } else {\\n            return false;\\n        }\\n    }\\n    return i === name.length;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar isLongPressedName = function(name, typed) {\\n    let i=0, j=0, prev=name[i];\\n    while(j<typed.length) {\\n        if(name[i] === typed[j]) {\\n            prev = name[i];\\n            i+=1;\\n            j+=1;\\n        } else if(prev === typed[j]) {\\n            j+=1;\\n        } else {\\n            return false;\\n        }\\n    }\\n    return i === name.length;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2031497,
                "title": "java-easy-understand",
                "content": "class Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n\\t\\n\\t\\n\\t\\n        if(name.length()>typed.length()){\\n            return false;\\n        }\\n        int i=0;\\n        int j=0;\\n        while(name.length()>i&&typed.length()>j){\\n            if(name.charAt(i)==typed.charAt(j)){\\n                i++;\\n                j++;\\n            }else if(i>0&&name.charAt(i-1)==typed.charAt(j)){\\n                j++;\\n            }else{\\n                return false;\\n            }\\n            \\n        }\\n        //if j is remainig\\n        while(j<typed.length()){\\n            if(name.charAt(name.length()-1)!=typed.charAt(j)){\\n                return false;\\n            }\\n            j++;\\n        }\\n        \\n        //if i is remaining\\n        if(i<name.length()){\\n            return false;\\n        }\\n        return true;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "class Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n\\t\\n\\t\\n\\t\\n        if(name.length()>typed.length()){\\n            return false;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2020502,
                "title": "simplest-java-solution",
                "content": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        if(typed.length() < name.length()) return false;\\n        \\n        int i=0;\\n        int j=0;\\n        \\n        while(i< name.length() && j < typed.length()){\\n            if(name.charAt(i) == typed.charAt(j)){\\n                i++;\\n                j++;\\n            }\\n            else if(i > 0 && name.charAt(i-1) == typed.charAt(j)){\\n                j++;\\n            }\\n            else {\\n                return false;\\n            }\\n            \\n        }\\n        \\n        while(j <typed.length()){\\n            if(name.charAt(i-1) != typed.charAt(j)) return false;\\n            j++;\\n        }\\n        return i<name.length() ?false : true;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        if(typed.length() < name.length()) return false;\\n        \\n        int i=0;\\n        int j=0;\\n        \\n        while(i< name.length() && j < typed.length()){\\n            if(name.charAt(i) == typed.charAt(j)){\\n                i++;\\n                j++;\\n            }\\n            else if(i > 0 && name.charAt(i-1) == typed.charAt(j)){\\n                j++;\\n            }\\n            else {\\n                return false;\\n            }\\n            \\n        }\\n        \\n        while(j <typed.length()){\\n            if(name.charAt(i-1) != typed.charAt(j)) return false;\\n            j++;\\n        }\\n        return i<name.length() ?false : true;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1993716,
                "title": "easy-java-100-faster-basic",
                "content": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n         int i = 0, j = 0;\\n         int n = name.length(), m = typed.length();\\n         while(i<n && j<m){\\n             if(name.charAt(i) == typed.charAt(j))\\n             {\\n                 i++; \\n                 j++;\\n             }\\n             else{\\n                 if(i>0 && name.charAt(i-1) == typed.charAt(j)){\\n                     j++;\\n                 }\\n                 else\\n                     return false;\\n             }\\n         }\\n             \\n             if(i!=n)\\n                 return false;\\n             \\n             while(j < m){\\n                 if(name.charAt(i-1) == typed.charAt(j))\\n                     j++;\\n                 else\\n                     return false;\\n             }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Iterator"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n         int i = 0, j = 0;\\n         int n = name.length(), m = typed.length();\\n         while(i<n && j<m){\\n             if(name.charAt(i) == typed.charAt(j))\\n             {\\n                 i++; \\n                 j++;\\n             }\\n             else{\\n                 if(i>0 && name.charAt(i-1) == typed.charAt(j)){\\n                     j++;\\n                 }\\n                 else\\n                     return false;\\n             }\\n         }\\n             \\n             if(i!=n)\\n                 return false;\\n             \\n             while(j < m){\\n                 if(name.charAt(i-1) == typed.charAt(j))\\n                     j++;\\n                 else\\n                     return false;\\n             }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1978723,
                "title": "python-two-pointers-easy-to-understand-code-with-comments",
                "content": "```\\n# Algo:\\n# 1. iterate both name and typed strings together with different index \\n# 2. keep count of current character contiguous occuring for both strings in different variables\\n# 3. check if current character in name and typed is not same then return False \\n# 4. check if name current character contiguous occuring is more than typed current character occuring then False\\n# 5. when outer loop exits then check if we have checked both strings completely then True else False\\nname_idx = 0\\ntyped_idx = 0\\n# in starting first character occurs at least once\\nname_curr_char_contiguous_freq = 1\\ntyped_curr_char_contiguous_freq = 1\\n\\nwhile name_idx < len(name) and typed_idx < len(typed):\\n\\n\\twhile name_idx + 1 < len(name) and name[name_idx] == name[name_idx+1]:\\n\\t\\tname_curr_char_contiguous_freq += 1\\n\\t\\tname_idx += 1\\n\\n\\twhile typed_idx + 1 < len(typed) and typed[typed_idx] == typed[typed_idx+1]:\\n\\t\\ttyped_curr_char_contiguous_freq += 1    \\n\\t\\ttyped_idx += 1\\n\\n\\t# check current character is not same or name current character occuring more than typed current character\\n\\tif name[name_idx] != typed[typed_idx] or name_curr_char_contiguous_freq > typed_curr_char_contiguous_freq:\\n\\t\\treturn False\\n\\n\\t# next character will occurs at least once\\n\\tname_curr_char_contiguous_freq = 1\\n\\ttyped_curr_char_contiguous_freq = 1\\n\\tname_idx += 1\\n\\ttyped_idx += 1\\nreturn True if name_idx >= len(name) and typed_idx >= len(typed) else False\\n```",
                "solutionTags": [],
                "code": "```\\n# Algo:\\n# 1. iterate both name and typed strings together with different index \\n# 2. keep count of current character contiguous occuring for both strings in different variables\\n# 3. check if current character in name and typed is not same then return False \\n# 4. check if name current character contiguous occuring is more than typed current character occuring then False\\n# 5. when outer loop exits then check if we have checked both strings completely then True else False\\nname_idx = 0\\ntyped_idx = 0\\n# in starting first character occurs at least once\\nname_curr_char_contiguous_freq = 1\\ntyped_curr_char_contiguous_freq = 1\\n\\nwhile name_idx < len(name) and typed_idx < len(typed):\\n\\n\\twhile name_idx + 1 < len(name) and name[name_idx] == name[name_idx+1]:\\n\\t\\tname_curr_char_contiguous_freq += 1\\n\\t\\tname_idx += 1\\n\\n\\twhile typed_idx + 1 < len(typed) and typed[typed_idx] == typed[typed_idx+1]:\\n\\t\\ttyped_curr_char_contiguous_freq += 1    \\n\\t\\ttyped_idx += 1\\n\\n\\t# check current character is not same or name current character occuring more than typed current character\\n\\tif name[name_idx] != typed[typed_idx] or name_curr_char_contiguous_freq > typed_curr_char_contiguous_freq:\\n\\t\\treturn False\\n\\n\\t# next character will occurs at least once\\n\\tname_curr_char_contiguous_freq = 1\\n\\ttyped_curr_char_contiguous_freq = 1\\n\\tname_idx += 1\\n\\ttyped_idx += 1\\nreturn True if name_idx >= len(name) and typed_idx >= len(typed) else False\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1973603,
                "title": "c-easy-solution",
                "content": "use two pointers\\n```\\nbool isLongPressedName(string name, string typed) {\\n    //two pointers\\n    int i = 0;\\n    int j = 0;\\n\\n    while (j < typed.size()) {\\n        if (i < name.size() && name[i] == typed[j]) {\\n            i++;\\n            j++;\\n        } else if (j > 0 && typed[j] == typed[j - 1]) {\\n            j++;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    return i == name.size();\\n}\\n```",
                "solutionTags": [
                    "Two Pointers"
                ],
                "code": "```\\nbool isLongPressedName(string name, string typed) {\\n    //two pointers\\n    int i = 0;\\n    int j = 0;\\n\\n    while (j < typed.size()) {\\n        if (i < name.size() && name[i] == typed[j]) {\\n            i++;\\n            j++;\\n        } else if (j > 0 && typed[j] == typed[j - 1]) {\\n            j++;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    return i == name.size();\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1930189,
                "title": "simple-handle-4-cases-java-solution",
                "content": "class Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n       \\n\\t   //case - 1\\n\\t   //eg.name = abc & typed = ab\\n        if(name.length() > typed.length())  \\n            return false;\\n        \\n        int i = 0;\\n        int j = 0;\\n        \\n        //case - 2\\n        //eg. name = alex & saeed \\n        //eg. typed = aaleex & ssaaedd\\n        //This below case handle above eg.\\n        while(i < name.length() && j < typed.length()){ \\n            \\n            if(name.charAt(i) == typed.charAt(j)){\\n                i++;\\n                j++;\\n            } else if(i > 0 && name.charAt(i-1) == typed.charAt(j)){\\n                j++;\\n            } else {\\n                return false;\\n            }\\n        }\\n        \\n        //case - 3\\n        //eg. name = aabbc  && aabbc\\n        //eg. typed = aabbcc && aabbcd\\n        //This below case handle above eg.\\n        while(j < typed.length()){\\n            if(name.charAt(i-1) != typed.charAt(j))  return false;\\n            j++;\\n        }\\n        \\n        //case - 4\\n        //eg. name = aabbcd\\n        //eg. typed = aabbb\\n        //This below case handle above eg.\\n        if(i < name.length())\\n            return false;\\n        \\n        return true;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "class Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n       \\n\\t   //case - 1\\n\\t   //eg.name = abc & typed = ab\\n        if(name.length() > typed.length())  \\n            return false;\\n        \\n        int i = 0;\\n        int j = 0;\\n        \\n        //case - 2\\n        //eg. name = alex & saeed \\n        //eg. typed = aaleex & ssaaedd\\n        //This below case handle above eg.\\n        while(i < name.length() && j < typed.length()){ \\n            \\n            if(name.charAt(i) == typed.charAt(j)){\\n                i++;\\n                j++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1820479,
                "title": "easy-c-solution-linear",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int curr=0;\\n        for(int i=0;i<typed.size();i++){\\n            if(typed[i]==name[curr]){\\n                curr++;\\n            }else{\\n                if(i>0){\\n                    if(typed[i]!=typed[i-1]){\\n                        return false;\\n                    }\\n                }else{\\n                    return false;\\n                }\\n            }\\n        }\\n        return curr == name.size();\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int curr=0;\\n        for(int i=0;i<typed.size();i++){\\n            if(typed[i]==name[curr]){\\n                curr++;\\n            }else{\\n                if(i>0){\\n                    if(typed[i]!=typed[i-1]){\\n                        return false;\\n                    }\\n                }else{\\n                    return false;\\n                }\\n            }\\n        }\\n        return curr == name.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1811322,
                "title": "easy-solution-100-faster-iteration-java",
                "content": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int i = 0;\\n        int j = 0;\\n        int n = name.length();\\n        int m = typed.length();\\n        while(i<n && j<m)\\n        {\\n            if(name.charAt(i) == typed.charAt(j))\\n            {\\n                i++; j++;\\n            }\\n            else if(i>0 && name.charAt(i-1)==typed.charAt(j))\\n                j++;\\n            else\\n                return false;\\n        }\\n        if(i != n)\\n            return false;\\n        while(j<m){\\n            if(i>0 && name.charAt(i-1)!=typed.charAt(j))\\n                return false;\\n            j++;\\n            }\\n        return true; \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Iterator"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int i = 0;\\n        int j = 0;\\n        int n = name.length();\\n        int m = typed.length();\\n        while(i<n && j<m)\\n        {\\n            if(name.charAt(i) == typed.charAt(j))\\n            {\\n                i++; j++;\\n            }\\n            else if(i>0 && name.charAt(i-1)==typed.charAt(j))\\n                j++;\\n            else\\n                return false;\\n        }\\n        if(i != n)\\n            return false;\\n        while(j<m){\\n            if(i>0 && name.charAt(i-1)!=typed.charAt(j))\\n                return false;\\n            j++;\\n            }\\n        return true; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1787290,
                "title": "python-solution-using-2-pointers",
                "content": "```\\nclass Solution:\\n    def isLongPressedName(self, name: str, typed: str) -> bool:\\n        i = 0\\n        j = 0\\n        \\n\\t\\t# Run the loop until the end of one of the strings\\n        while i < len(name) and j < len(typed):\\n            \\n\\t\\t\\t# Check the character\\n            if name[i] != typed[j]:\\n                return False\\n            \\n\\t\\t\\t#  If the next character in name is different then skip all long pressed characters in typed.\\n\\t\\t\\t#  For example:  name = \"ab\" and typed = \"aaaaab\"\\n\\t\\t\\t# But there is a tricky case here: name: \"aab\" and typed: \"aaaab\". \\n\\t\\t\\t# In this case we need to first match as many characters required \\n\\t\\t\\t# and only then consider the later ones as long pressed. \\n\\t\\t\\t# So match the 2 first 2 a\\'s and then skip the other a\\'s.\\n            if i != len(name) - 1 and name[i] != name[i+1]:\\n                while j != len(typed) - 1 and typed[j] == typed[j+1] :\\n                    j += 1\\n            \\n\\t\\t\\t# After all long pressed characters have been skipped increment pointer and repeat the process\\n            i += 1\\n            j += 1\\n        \\n\\t\\t# This is required for cases where the strings were matched but there were repating characters at the last.\\n\\t\\t# For example name: \"abc\" typed: \"abcccccccc\".  \\n\\t\\t# We need to skip the c\\'s present towards the end\\n        while j < len(typed) and typed[j] == typed[j-1]:\\n            j += 1\\n\\t\\t\\n\\t\\t# If everything went well then both the pointers were at the end, so return True\\n        if i == len(name) and j == len(typed):\\n            return True\\n        \\n\\t\\t# One of the pointers  was not at the end\\n        return False\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def isLongPressedName(self, name: str, typed: str) -> bool:\\n        i = 0\\n        j = 0\\n        \\n\\t\\t# Run the loop until the end of one of the strings\\n        while i < len(name) and j < len(typed):\\n            \\n\\t\\t\\t# Check the character\\n            if name[i] != typed[j]:\\n                return False\\n            \\n\\t\\t\\t#  If the next character in name is different then skip all long pressed characters in typed.\\n\\t\\t\\t#  For example:  name = \"ab\" and typed = \"aaaaab\"\\n\\t\\t\\t# But there is a tricky case here: name: \"aab\" and typed: \"aaaab\". \\n\\t\\t\\t# In this case we need to first match as many characters required \\n\\t\\t\\t# and only then consider the later ones as long pressed. \\n\\t\\t\\t# So match the 2 first 2 a\\'s and then skip the other a\\'s.\\n            if i != len(name) - 1 and name[i] != name[i+1]:\\n                while j != len(typed) - 1 and typed[j] == typed[j+1] :\\n                    j += 1\\n            \\n\\t\\t\\t# After all long pressed characters have been skipped increment pointer and repeat the process\\n            i += 1\\n            j += 1\\n        \\n\\t\\t# This is required for cases where the strings were matched but there were repating characters at the last.\\n\\t\\t# For example name: \"abc\" typed: \"abcccccccc\".  \\n\\t\\t# We need to skip the c\\'s present towards the end\\n        while j < len(typed) and typed[j] == typed[j-1]:\\n            j += 1\\n\\t\\t\\n\\t\\t# If everything went well then both the pointers were at the end, so return True\\n        if i == len(name) and j == len(typed):\\n            return True\\n        \\n\\t\\t# One of the pointers  was not at the end\\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1783743,
                "title": "two-pointers-approach-faster-than-100-of-solution",
                "content": "So the basic idea behind the code is to use two vectors who are suppose two store the continuous occurance of each element. if element of name element is not equal to element of typed array we will instantly return false, but if they are equal then the only chance we can return false is when the count of continuous occurence of an element is greater than the count of continuous occurence of the same element. If typed string element count is greater we will jump to next element and repeat the same process.\\n\\n\\n\"\"\"class Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int n1 = name.length(), n2=typed.length(), i=n1-2, j=n2-2;\\n        if(n1>n2) return false;\\n        vector<int> one(n1,1), second(n2,1);\\n        while(i>=0) {\\n            if(name[i]==name[i+1]) one[i]+=one[i+1];\\n            i--;\\n        }\\n            \\n        while(j>=0) {\\n            if(typed[j]==typed[j+1]) second[j]+=second[j+1];\\n            j--;\\n        }\\n            \\n        i=0,j=0;\\n        while(i<n1) {\\n            if(name[i]!=typed[j] || one[i]>second[j]) return false;\\n            i+=one[i];\\n            j+=second[j];\\n        }\\n        if(j>=n2) return true;\\n        return false;\\n    }\\n};\"\"\"",
                "solutionTags": [
                    "C++",
                    "Two Pointers"
                ],
                "code": "class Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int n1 = name.length(), n2=typed.length(), i=n1-2, j=n2-2;\\n        if(n1>n2) return false;\\n        vector<int> one(n1,1), second(n2,1);\\n        while(i>=0) {\\n            if(name[i]==name[i+1]) one[i]+=one[i+1];\\n            i--;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1707486,
                "title": "c-solution-fastest-clear-and-concise",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        vector<pair<char,int>>v;\\n        v.push_back(make_pair(name[0],1));\\n        for(int i=1;i<name.size();i++){\\n           if(name[i]==name[i-1]){\\n               v[v.size()-1].second++;\\n           }else{\\n               v.push_back(make_pair(name[i],1));\\n           }\\n        }\\n        vector<pair<char,int>>v1;\\n        v1.push_back(make_pair(typed[0],1));\\n        for(int i=1;i<typed.size();i++){\\n           if(typed[i]==typed[i-1]){\\n               v1[v1.size()-1].second++;\\n           }else{\\n               v1.push_back(make_pair(typed[i],1));\\n           }\\n        }\\n        \\n        if(v.size()!=v1.size()){\\n            return false;\\n        }\\n        for(int i=0;i<v.size();i++){\\n            if(v[i].first!=v1[i].first){\\n                return false;\\n            }\\n            if(v[i].second>v1[i].second){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        vector<pair<char,int>>v;\\n        v.push_back(make_pair(name[0],1));\\n        for(int i=1;i<name.size();i++){\\n           if(name[i]==name[i-1]){\\n               v[v.size()-1].second++;\\n           }else{\\n               v.push_back(make_pair(name[i],1));\\n           }\\n        }\\n        vector<pair<char,int>>v1;\\n        v1.push_back(make_pair(typed[0],1));\\n        for(int i=1;i<typed.size();i++){\\n           if(typed[i]==typed[i-1]){\\n               v1[v1.size()-1].second++;\\n           }else{\\n               v1.push_back(make_pair(typed[i],1));\\n           }\\n        }\\n        \\n        if(v.size()!=v1.size()){\\n            return false;\\n        }\\n        for(int i=0;i<v.size();i++){\\n            if(v[i].first!=v1[i].first){\\n                return false;\\n            }\\n            if(v[i].second>v1[i].second){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1661537,
                "title": "java-solution-time-o-n-space-o-1-two-pointers-approach",
                "content": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        if(typed.length() < name.length()){\\n            return false;\\n        }\\n        \\n        int i = 0; // pointer 1\\n        int j = 0; // pointer 2\\n        \\n        while(j < typed.length()){\\n            if(i < name.length() && name.charAt(i) == typed.charAt(j)){\\n                i++;\\n                j++;\\n            }\\n            else if(j > 0 && typed.charAt(j) == typed.charAt(j - 1)){\\n                j++;\\n            }\\n            else{\\n                return false;\\n            }\\n        }\\n        return i == name.length();\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        if(typed.length() < name.length()){\\n            return false;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1652517,
                "title": "easiest-c-solution-925-long-pressed-name",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string s1, string s2) {\\n        int n = s1.length();\\n        int m = s2.length();\\n        int i=0; \\n        int j = 0;\\n        while(j<m)\\n        {\\n            if(i<n && s1[i] == s2[j])\\n            {\\n                i++;\\n                j++;\\n            }\\n            else if(j>0 && s1[i-1] == s2[j])\\n            {\\n                j++;\\n            }\\n            else{\\n                return false;\\n            }\\n        }\\n        \\n        return i == s1.length();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string s1, string s2) {\\n        int n = s1.length();\\n        int m = s2.length();\\n        int i=0; \\n        int j = 0;\\n        while(j<m)\\n        {\\n            if(i<n && s1[i] == s2[j])\\n            {\\n                i++;\\n                j++;\\n            }\\n            else if(j>0 && s1[i-1] == s2[j])\\n            {\\n                j++;\\n            }\\n            else{\\n                return false;\\n            }\\n        }\\n        \\n        return i == s1.length();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1644410,
                "title": "c-faster-than-100-o-n-time-and-o-1-space",
                "content": "**Intuition Behind**\\nImagine that we are trying to compress the string `typed` into string `name`.\\nWe take 2 pointers, and then count the characters ahead of it that are same to the curr_char.\\nSay in some iteration similar char count for `name` is `n1` and for `typed` is `n2`\\nThen only way the string is valid if `n1<= n2` (since in `typed` there can\\'t be any `char` loss (it can be either equal or more than that).\\nFinally, if the string is valid we point `pointer1 -> pointer1 + n1 and pointer2 -> pointer2 + n2`\\n```\\n\\nbool isLongPressedName(string name, string typed) {\\n\\tint pointer1 = 0;\\n\\tint pointer2 = 0;\\n\\n\\twhile(pointer2 < typed.size() && pointer1 < name.size()){\\n\\n\\t\\tif(name[pointer1] != typed[pointer2]) return false;\\n\\n\\t\\tchar prev_char_typed = typed[pointer2];\\n\\t\\tint count_char_typed = 0;\\n\\t\\twhile(pointer2 < typed.size() && typed[pointer2] == prev_char_typed){\\n\\t\\t\\tcount_char_typed++;\\n\\t\\t\\tpointer2++;\\n\\t\\t}\\n\\n\\t\\tint count_char_name = 0;\\n\\t\\tchar prev_char_name = name[pointer1];\\n\\t\\twhile(pointer1 < name.size() && name[pointer1] == prev_char_name){\\n\\t\\t\\tcount_char_name++;\\n\\t\\t\\tpointer1++;\\n\\t\\t}\\n\\n\\t\\tif(count_char_typed < count_char_name){\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tif(pointer1 == name.size() && pointer2 < typed.size() || (pointer2 == typed.size() && pointer1 < name.size())){\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\treturn true;\\n}\\n\\n```",
                "solutionTags": [
                    "Two Pointers"
                ],
                "code": "```\\n\\nbool isLongPressedName(string name, string typed) {\\n\\tint pointer1 = 0;\\n\\tint pointer2 = 0;\\n\\n\\twhile(pointer2 < typed.size() && pointer1 < name.size()){\\n\\n\\t\\tif(name[pointer1] != typed[pointer2]) return false;\\n\\n\\t\\tchar prev_char_typed = typed[pointer2];\\n\\t\\tint count_char_typed = 0;\\n\\t\\twhile(pointer2 < typed.size() && typed[pointer2] == prev_char_typed){\\n\\t\\t\\tcount_char_typed++;\\n\\t\\t\\tpointer2++;\\n\\t\\t}\\n\\n\\t\\tint count_char_name = 0;\\n\\t\\tchar prev_char_name = name[pointer1];\\n\\t\\twhile(pointer1 < name.size() && name[pointer1] == prev_char_name){\\n\\t\\t\\tcount_char_name++;\\n\\t\\t\\tpointer1++;\\n\\t\\t}\\n\\n\\t\\tif(count_char_typed < count_char_name){\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tif(pointer1 == name.size() && pointer2 < typed.size() || (pointer2 == typed.size() && pointer1 < name.size())){\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\treturn true;\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1637515,
                "title": "java-easy-solution",
                "content": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        if(name.charAt(0)!=typed.charAt(0)||name.length()>typed.length()) return false;\\n        int i=0,j=0;\\n        for(i=0,j=0;i<name.length()&&j<typed.length();){\\n            if(name.charAt(i)==typed.charAt(j))\\n            {\\n                i++;\\n                j++;\\n            }\\n            else if(name.charAt(i-1)==typed.charAt(j)) j++;\\n            else\\n                return false;\\n        }\\n        if(i<name.length()) return false;\\n        for(int k=j;k<typed.length();k++) if(typed.charAt(j-1)!=typed.charAt(k)) return false;\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        if(name.charAt(0)!=typed.charAt(0)||name.length()>typed.length()) return false;\\n        int i=0,j=0;\\n        for(i=0,j=0;i<name.length()&&j<typed.length();){\\n            if(name.charAt(i)==typed.charAt(j))\\n            {\\n                i++;\\n                j++;\\n            }\\n            else if(name.charAt(i-1)==typed.charAt(j)) j++;\\n            else\\n                return false;\\n        }\\n        if(i<name.length()) return false;\\n        for(int k=j;k<typed.length();k++) if(typed.charAt(j-1)!=typed.charAt(k)) return false;\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1609785,
                "title": "java",
                "content": "```\\npublic boolean isLongPressedName(String name, String typed) {\\n        int n1 = name.length(); \\n        int n2 = typed.length(); \\n        \\n        if(n1 > n2) return false; // typed should be equal or greater than name\\n        int j = 0; \\n        \\n        for(int i=0; i<n2; i++){\\n           if(j<n1 && typed.charAt(i) == name.charAt(j)){ // if char match\\n               j++; \\n           }\\n           else{\\n               if(i>0 && typed.charAt(i) != typed.charAt(i-1) || i==0) return false; // if typed[0] is mismatched or typed[i] != typed[i-1] \\n           }\\n        }\\n        return j == n1; // if all char in name have found a match j == n2\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic boolean isLongPressedName(String name, String typed) {\\n        int n1 = name.length(); \\n        int n2 = typed.length(); \\n        \\n        if(n1 > n2) return false; // typed should be equal or greater than name\\n        int j = 0; \\n        \\n        for(int i=0; i<n2; i++){\\n           if(j<n1 && typed.charAt(i) == name.charAt(j)){ // if char match\\n               j++; \\n           }\\n           else{\\n               if(i>0 && typed.charAt(i) != typed.charAt(i-1) || i==0) return false; // if typed[0] is mismatched or typed[i] != typed[i-1] \\n           }\\n        }\\n        return j == n1; // if all char in name have found a match j == n2\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1604860,
                "title": "python-o-n-simple",
                "content": "```\\nclass Solution:\\n    def isLongPressedName(self, name: str, typed: str) -> bool:   \\n        i, N = 0, len(name)\\n        for index, c in enumerate(typed):    \\n            if i < N: \\n                if c == name[i]: i += 1\\n                elif i == 0 or c != name[i - 1]: return False            \\n            if i == N: \\n                if c != name[-1]: return False\\n        return i >= N\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def isLongPressedName(self, name: str, typed: str) -> bool:   \\n        i, N = 0, len(name)\\n        for index, c in enumerate(typed):    \\n            if i < N: \\n                if c == name[i]: i += 1\\n                elif i == 0 or c != name[i - 1]: return False            \\n            if i == N: \\n                if c != name[-1]: return False\\n        return i >= N\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1599096,
                "title": "python-easy-to-understand",
                "content": "I hope that this method helps you :3 \\n\\n```\\nclass Solution(object):\\n    def isLongPressedName(self, name, typed):\\n        \"\"\"\\n        :type name: str\\n        :type typed: str\\n        :rtype: bool\\n        \"\"\"\\n        elementOfTypedName = 0\\n        charactersOfNamePresents = 0\\n        numberOfCharactersInName = len(name)\\n        numerOfCharacthersInTyped = len(typed)\\n        ###if the first letter of the name and typed don\\'t match ::: case :::\\n        if name[0] != typed[0]:\\n            return False\\n            \\n        ### if  elementOfTypedName is equal to  numberOfElementsInTyped then len(typed) == 0\\n\\t\\t##since name starts to count from  0 then we don\\'t need the last element \\n        while elementOfTypedName < numerOfCharacthersInTyped:\\n            \\n            \\n            if charactersOfNamePresents < numberOfCharactersInName and name[charactersOfNamePresents] == typed[elementOfTypedName]:\\n                charactersOfNamePresents +=1\\n                ### with the next line I\\'m wondering if is a repeated character\\n\\t\\t\\t\\t## if not then is an additional letter and then is a false case\\n            elif typed[elementOfTypedName] != typed[elementOfTypedName-1]:\\n                return False\\n            elementOfTypedName +=1\\n        return charactersOfNamePresents == numberOfCharactersInName\\n\\t\\t```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def isLongPressedName(self, name, typed):\\n        \"\"\"\\n        :type name: str\\n        :type typed: str\\n        :rtype: bool\\n        \"\"\"\\n        elementOfTypedName = 0\\n        charactersOfNamePresents = 0\\n        numberOfCharactersInName = len(name)\\n        numerOfCharacthersInTyped = len(typed)\\n        ###if the first letter of the name and typed don\\'t match ::: case :::\\n        if name[0] != typed[0]:\\n            return False\\n            \\n        ### if  elementOfTypedName is equal to  numberOfElementsInTyped then len(typed) == 0\\n\\t\\t##since name starts to count from  0 then we don\\'t need the last element \\n        while elementOfTypedName < numerOfCharacthersInTyped:\\n            \\n            \\n            if charactersOfNamePresents < numberOfCharactersInName and name[charactersOfNamePresents] == typed[elementOfTypedName]:\\n                charactersOfNamePresents +=1\\n                ### with the next line I\\'m wondering if is a repeated character\\n\\t\\t\\t\\t## if not then is an additional letter and then is a false case\\n            elif typed[elementOfTypedName] != typed[elementOfTypedName-1]:\\n                return False\\n            elementOfTypedName +=1\\n        return charactersOfNamePresents == numberOfCharactersInName\\n\\t\\t```",
                "codeTag": "Java"
            },
            {
                "id": 1592749,
                "title": "java-o-t-time-t-length-of-typed-o-1-space",
                "content": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        if (name.length() == typed.length() && name.equals(typed)) {\\n            return true;\\n        }\\n\\n        int i = 0, j = 0;\\n        while (j < typed.length()) {\\n            if (i < name.length() && name.charAt(i) == typed.charAt(j)) {\\n                i++;\\n                j++;\\n            } else if (i > 0 && typed.charAt(j) == name.charAt(i - 1)) {\\n                j++;\\n            } else {\\n                return false;\\n            }\\n        }\\n\\n        return i >= name.length();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        if (name.length() == typed.length() && name.equals(typed)) {\\n            return true;\\n        }\\n\\n        int i = 0, j = 0;\\n        while (j < typed.length()) {\\n            if (i < name.length() && name.charAt(i) == typed.charAt(j)) {\\n                i++;\\n                j++;\\n            } else if (i > 0 && typed.charAt(j) == name.charAt(i - 1)) {\\n                j++;\\n            } else {\\n                return false;\\n            }\\n        }\\n\\n        return i >= name.length();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1567084,
                "title": "simple-java-solution-using-two-pointer-technique",
                "content": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        if(typed.length()<name.length()){\\n            return false;\\n        }\\n        int i=0;\\n        int j=0;\\n        while(j<typed.length()){\\n            if(i<name.length() && name.charAt(i)==typed.charAt(j)){\\n                i++;\\n                j++;\\n            }else if(j>0 && typed.charAt(j)==typed.charAt(j-1)){\\n                j++;\\n            }else{\\n                return false;\\n            }\\n        }\\n        return i==name.length();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        if(typed.length()<name.length()){\\n            return false;\\n        }\\n        int i=0;\\n        int j=0;\\n        while(j<typed.length()){\\n            if(i<name.length() && name.charAt(i)==typed.charAt(j)){\\n                i++;\\n                j++;\\n            }else if(j>0 && typed.charAt(j)==typed.charAt(j-1)){\\n                j++;\\n            }else{\\n                return false;\\n            }\\n        }\\n        return i==name.length();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1563281,
                "title": "rust-solution",
                "content": "```\\nimpl Solution {\\n    pub fn is_long_pressed_name(name: String, typed: String) -> bool {\\n        let nb = name.as_bytes();\\n        let mut i = 0;\\n        for &b in typed.as_bytes() {\\n            if i < name.len() && b == nb[i] {\\n                i += 1;\\n            } else if b != nb[i.saturating_sub(1)] {\\n                return false;\\n            }\\n        }\\n        i == name.len()\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn is_long_pressed_name(name: String, typed: String) -> bool {\\n        let nb = name.as_bytes();\\n        let mut i = 0;\\n        for &b in typed.as_bytes() {\\n            if i < name.len() && b == nb[i] {\\n                i += 1;\\n            } else if b != nb[i.saturating_sub(1)] {\\n                return false;\\n            }\\n        }\\n        i == name.len()\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1556917,
                "title": "c-easy-to-understand-2-pointers-approach",
                "content": "**Please upvote to motivate me in my quest of documenting all leetcode solutions(to help the community). HAPPY CODING:)\\nAny suggestions and improvements are always welcome**\\n```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n      int i=0,j=0;\\n      while(j<typed.length())\\n      {\\n          if(i!=name.length()&&name[i]==typed[j])\\n          {\\n              i++;\\n              j++;\\n          }\\n          else if(name[i]!=typed[j]&&j!=0&&j<typed.length()&&typed[j]==typed[j-1])\\n          {\\n              j++;\\n          }\\n          else\\n          break;\\n      }\\n    return (i==name.length()&&j==typed.length());\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n      int i=0,j=0;\\n      while(j<typed.length())\\n      {\\n          if(i!=name.length()&&name[i]==typed[j])\\n          {\\n              i++;\\n              j++;\\n          }\\n          else if(name[i]!=typed[j]&&j!=0&&j<typed.length()&&typed[j]==typed[j-1])\\n          {\\n              j++;\\n          }\\n          else\\n          break;\\n      }\\n    return (i==name.length()&&j==typed.length());\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1554666,
                "title": "python-intuitive-o-n-solution",
                "content": "```\\nclass Solution:\\n    def isLongPressedName(self, name: str, typed: str) -> bool:\\n        \\n        name_pointer , typed_pointer = 0 ,0 \\n        while name_pointer < len(name) and typed_pointer < len(typed):\\n            \\n            name_cnt , typed_cnt = 1 , 1 \\n            \\n            # count number of same char\\'s in name \\n            while name_pointer+1 < len(name) and name[name_pointer] == name[name_pointer+1]:\\n                name_cnt += 1 \\n                name_pointer +=1\\n            \\n            # count number of same char\\'s in typed  \\n            while typed_pointer+1 < len(typed) and typed[typed_pointer] == typed[typed_pointer+1]:\\n                typed_cnt += 1 \\n                typed_pointer += 1 \\n                            \\n            # char\\'s should be same and count in type should be greater or equal to cnt \\n            if name_cnt >  typed_cnt or name[name_pointer] != typed[typed_pointer] :\\n                return False \\n            \\n            name_pointer+= 1 \\n            typed_pointer += 1 \\n        \\n        # pointers should be at the end of named and typed \\n        if name_pointer == len(name) and typed_pointer == len(typed) : \\n            return True\\n        else : \\n            return False \\n            \\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def isLongPressedName(self, name: str, typed: str) -> bool:\\n        \\n        name_pointer , typed_pointer = 0 ,0 \\n        while name_pointer < len(name) and typed_pointer < len(typed):\\n            \\n            name_cnt , typed_cnt = 1 , 1 \\n            \\n            # count number of same char\\'s in name \\n            while name_pointer+1 < len(name) and name[name_pointer] == name[name_pointer+1]:\\n                name_cnt += 1 \\n                name_pointer +=1\\n            \\n            # count number of same char\\'s in typed  \\n            while typed_pointer+1 < len(typed) and typed[typed_pointer] == typed[typed_pointer+1]:\\n                typed_cnt += 1 \\n                typed_pointer += 1 \\n                            \\n            # char\\'s should be same and count in type should be greater or equal to cnt \\n            if name_cnt >  typed_cnt or name[name_pointer] != typed[typed_pointer] :\\n                return False \\n            \\n            name_pointer+= 1 \\n            typed_pointer += 1 \\n        \\n        # pointers should be at the end of named and typed \\n        if name_pointer == len(name) and typed_pointer == len(typed) : \\n            return True\\n        else : \\n            return False \\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1508653,
                "title": "javascript-2-pointers-approach",
                "content": "You can find my solutions to other leetcode problems on my Github: https://linktr.ee/rohitdhatrak\\n\\n```\\nvar isLongPressedName = function (name, typed) {\\n    if (typed.length < name.length) return false;\\n    let namePtr = 0;\\n    let typedPtr = 0;\\n\\n    while (typedPtr < typed.length || namePtr < name.length) {\\n        if (name[namePtr] === typed[typedPtr]) {\\n            namePtr++;\\n            typedPtr++;\\n        } else if (name[namePtr - 1] === typed[typedPtr]) {\\n            typedPtr++;\\n        } else {\\n            return false;\\n        }\\n    }\\n    return true;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Two Pointers"
                ],
                "code": "```\\nvar isLongPressedName = function (name, typed) {\\n    if (typed.length < name.length) return false;\\n    let namePtr = 0;\\n    let typedPtr = 0;\\n\\n    while (typedPtr < typed.length || namePtr < name.length) {\\n        if (name[namePtr] === typed[typedPtr]) {\\n            namePtr++;\\n            typedPtr++;\\n        } else if (name[namePtr - 1] === typed[typedPtr]) {\\n            typedPtr++;\\n        } else {\\n            return false;\\n        }\\n    }\\n    return true;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1480327,
                "title": "simple-short-java-explanation",
                "content": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        if(name.length() > typed.length()) return false;\\n        //typed length will be greater or equal to name, hence iterating on typed\\n        \\n        if(name.charAt(0) != typed.charAt(0)) return false;\\n       \\n        int j=0, i=0;\\n        \\n        while(j < typed.length()){\\n            // check index bound for i and increment i when i==j\\n            if(i < name.length() && name.charAt(i) == typed.charAt(j)){\\n                i++;\\n            } else if(typed.charAt(j) != typed.charAt(j-1)){\\n                //characters not matched means long press, so check previously typed\\n                return false;\\n            }\\n            j++;\\n        }\\n        \\n        // i must reach end\\n        return i == name.length();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        if(name.length() > typed.length()) return false;\\n        //typed length will be greater or equal to name, hence iterating on typed\\n        \\n        if(name.charAt(0) != typed.charAt(0)) return false;\\n       \\n        int j=0, i=0;\\n        \\n        while(j < typed.length()){\\n            // check index bound for i and increment i when i==j\\n            if(i < name.length() && name.charAt(i) == typed.charAt(j)){\\n                i++;\\n            } else if(typed.charAt(j) != typed.charAt(j-1)){\\n                //characters not matched means long press, so check previously typed\\n                return false;\\n            }\\n            j++;\\n        }\\n        \\n        // i must reach end\\n        return i == name.length();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1436993,
                "title": "two-pointer-faster-than-100-00-of-c-online-submissions",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int n = name.size();\\n        int m = typed.size();\\n        \\n        if(n>m) return false;\\n        int i =0,j=0;\\n        while(i<n){\\n            if(name[i] == typed[j]){\\n                i++;\\n                j++;\\n            }else if(j!=0 && typed[j] == typed[j-1]){\\n                j++;\\n            }else{\\n                return false;\\n            }\\n        }\\n        while(j<m){\\n            if(typed[j] != name[n-1]){\\n                return false;\\n            }\\n            j++;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int n = name.size();\\n        int m = typed.size();\\n        \\n        if(n>m) return false;\\n        int i =0,j=0;\\n        while(i<n){\\n            if(name[i] == typed[j]){\\n                i++;\\n                j++;\\n            }else if(j!=0 && typed[j] == typed[j-1]){\\n                j++;\\n            }else{\\n                return false;\\n            }\\n        }\\n        while(j<m){\\n            if(typed[j] != name[n-1]){\\n                return false;\\n            }\\n            j++;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1396905,
                "title": "java-detailed-explanation-tc-o-n-faster-than-100",
                "content": "**Do vote up if you like it :)**\\n\\nThe idea is to check if the current ith and jth charcacter is equal then move to check for the next ith and jth character, if characters are different then check if it is mistyped due to faulty keyboard, to check for mistyped characters you need to check if the jth character is equal to the i - 1 th  character, if it is equal then just increase j (beacause i is already pointing to the next valid character of the name).\\n\\nSpace Complexity : O(1)\\nTime Complexity : O(N), where N is typed string\\'s length\\n\\n```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        if(name.charAt(0) != typed.charAt(0)) return false; //Check for the 0th i and j characters,\\n                                                            //if both are different then the name cannot be achieved\\n        int i = 1;\\n        int j = 1;\\n        \\n        while(i < name.length() && j < typed.length()) {\\n            if(name.charAt(i) != typed.charAt(j)) {         // Current i and current j is not equal then\\n                if(name.charAt(i - 1) != typed.charAt(j)){  // Check for the previous i and current j\\n                    return false;                           // If not equal return false \\n                }\\n                else {\\n                    j++;           // If equal simply increase j, \\n                    continue;      //because i is already pointing to the valid name character\\n                    \\n                }\\n            }\\n\\t\\t\\ti++;    //Both ith and jth character was equal\\n            j++;    //hence you need to check for the next character  \\n        }\\n        \\n        while(j < typed.length()) {     //If j < typed.length, then there\\'s still the possibility to achieve the name     \\n            if(typed.charAt(j) != name.charAt(i - 1)) {     // Last character of name != to the current jth character\\n                return false;\\n            }\\n            j++;         //If equal check for the next jth character\\n        }\\n        \\n        return i < name.length() ? false : true; \\n        //If i < name.length means typed String\\'s length was less the name String\\'s length\\n        //in that case name can never be achieved, so return accordingly\\n    }\\n}\\n```\\n-----------------------------------------------------------------------",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        if(name.charAt(0) != typed.charAt(0)) return false; //Check for the 0th i and j characters,\\n                                                            //if both are different then the name cannot be achieved\\n        int i = 1;\\n        int j = 1;\\n        \\n        while(i < name.length() && j < typed.length()) {\\n            if(name.charAt(i) != typed.charAt(j)) {         // Current i and current j is not equal then\\n                if(name.charAt(i - 1) != typed.charAt(j)){  // Check for the previous i and current j\\n                    return false;                           // If not equal return false \\n                }\\n                else {\\n                    j++;           // If equal simply increase j, \\n                    continue;      //because i is already pointing to the valid name character\\n                    \\n                }\\n            }\\n\\t\\t\\ti++;    //Both ith and jth character was equal\\n            j++;    //hence you need to check for the next character  \\n        }\\n        \\n        while(j < typed.length()) {     //If j < typed.length, then there\\'s still the possibility to achieve the name     \\n            if(typed.charAt(j) != name.charAt(i - 1)) {     // Last character of name != to the current jth character\\n                return false;\\n            }\\n            j++;         //If equal check for the next jth character\\n        }\\n        \\n        return i < name.length() ? false : true; \\n        //If i < name.length means typed String\\'s length was less the name String\\'s length\\n        //in that case name can never be achieved, so return accordingly\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1386915,
                "title": "python-solution",
                "content": "```\\nclass Solution(object):\\n    def isLongPressedName(self, name, typed):\\n        \"\"\"\\n        :type name: str\\n        :type typed: str\\n        :rtype: bool\\n        \"\"\"\\n        \\n        if typed[0]!=name[0]:return False\\n        i=0\\n        j=0\\n        while i<len(name) and j<len(typed):\\n            \\n            if name[i]==typed[j]:\\n                i+=1\\n                j+=1\\n            elif i>0 and name[i-1]==typed[j]:\\n                j+=1\\n            else:\\n                return False\\n#         not possible to form all name char    \\n        if i<len(name):\\n            return False\\n#         when form all char of name but some char left in type then check char is match with last char of name or not\\n        while j<len(typed):\\n            if name[i-1]!=typed[j]:return False\\n            j+=1\\n        \\n           \\n        return True",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def isLongPressedName(self, name, typed):\\n        \"\"\"\\n        :type name: str\\n        :type typed: str\\n        :rtype: bool\\n        \"\"\"\\n        \\n        if typed[0]!=name[0]:return False\\n        i=0\\n        j=0\\n        while i<len(name) and j<len(typed):\\n            \\n            if name[i]==typed[j]:\\n                i+=1\\n                j+=1\\n            elif i>0 and name[i-1]==typed[j]:\\n                j+=1\\n            else:\\n                return False\\n#         not possible to form all name char    \\n        if i<len(name):\\n            return False\\n#         when form all char of name but some char left in type then check char is match with last char of name or not\\n        while j<len(typed):\\n            if name[i-1]!=typed[j]:return False\\n            j+=1\\n        \\n           \\n        return True",
                "codeTag": "Java"
            },
            {
                "id": 1378832,
                "title": "0-ms-faster-than-100-00-of-c-online-submissions",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n         int i=0;\\n         int j=0;\\n        int n=name.length();\\n        int m=typed.length();\\n        if(n>m){\\n            return false;\\n        }\\n        while(1){\\n            if(i==n && j==m){\\n                return true; \\n            }\\n            if(i<n && j<m && name[i]==typed[j]){\\n                i++;\\n                j++;\\n            }\\n            \\n            else if(j>0 && j<m && typed[j-1]==typed[j]){\\n                j++;\\n            }\\n            else{\\n                return false;\\n            }\\n        }\\n    }\\n};\\n  \\n        ```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n         int i=0;\\n         int j=0;\\n        int n=name.length();\\n        int m=typed.length();\\n        if(n>m){\\n            return false;\\n        }\\n        while(1){\\n            if(i==n && j==m){\\n                return true; \\n            }\\n            if(i<n && j<m && name[i]==typed[j]){\\n                i++;\\n                j++;\\n            }\\n            \\n            else if(j>0 && j<m && typed[j-1]==typed[j]){\\n                j++;\\n            }\\n            else{\\n                return false;\\n            }\\n        }\\n    }\\n};\\n  \\n        ```",
                "codeTag": "Java"
            },
            {
                "id": 1376839,
                "title": "c-2-pointer-approach",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int n = name.size();\\n        int t = typed.size();\\n        if(t < n) return false;\\n        int i, j;\\n        for(i = 0, j = 0; i < n; ) {\\n            if(name[i] == typed[j]) {\\n                ++i;\\n                ++j;\\n            } else if(j!=0 && (typed[j] == typed[j-1])) {\\n                ++j;\\n            } else {\\n                return false;\\n            }\\n        }\\n        if(j <= t-1) {\\n            for(; j < t; ++j) {\\n            if(typed[j] != name[n-1])  return false;\\n            }\\n        }\\n        \\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int n = name.size();\\n        int t = typed.size();\\n        if(t < n) return false;\\n        int i, j;\\n        for(i = 0, j = 0; i < n; ) {\\n            if(name[i] == typed[j]) {\\n                ++i;\\n                ++j;\\n            } else if(j!=0 && (typed[j] == typed[j-1])) {\\n                ++j;\\n            } else {\\n                return false;\\n            }\\n        }\\n        if(j <= t-1) {\\n            for(; j < t; ++j) {\\n            if(typed[j] != name[n-1])  return false;\\n            }\\n        }\\n        \\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1355084,
                "title": "4-lines-of-c-faster-than-100-of-c-submissions",
                "content": "Didn\\'t see many solutions in C so I want to share mine - upvote if you like it!\\n\\nRuntime: 0 ms, faster than 100.00% of C online submissions for Long Pressed Name.\\nMemory Usage: 5.6 MB, less than 95.83% of C online submissions for Long Pressed Name.\\n```\\nbool isLongPressedName(char * name, char * typed){\\n    if (*name != *typed) return false;\\n    else if (!*name) return true;           // condition could also be (*name == \\'\\\\0\\' || *typed == \\'\\\\0\\')\\n    else if (*(name+1) == *(typed+1)) return isLongPressedName(++name, ++typed);\\n    return isLongPressedName(name, ++typed);\\n}\\n```",
                "solutionTags": [
                    "C",
                    "Recursion"
                ],
                "code": "```\\nbool isLongPressedName(char * name, char * typed){\\n    if (*name != *typed) return false;\\n    else if (!*name) return true;           // condition could also be (*name == \\'\\\\0\\' || *typed == \\'\\\\0\\')\\n    else if (*(name+1) == *(typed+1)) return isLongPressedName(++name, ++typed);\\n    return isLongPressedName(name, ++typed);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1345055,
                "title": "c-clean-2-pointer-0ms",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int m = name.length(), n = typed.length();\\n                \\n        int i = 0, j = 0;\\n        while(j < n) {         \\n            if(i < m && name[i] == typed[j]) {\\n                i++;\\n            } else if( j == 0 || typed[j] != typed[j-1]) {\\n                return false;\\n            }\\n            j++;\\n        }\\n        return i == m;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int m = name.length(), n = typed.length();\\n                \\n        int i = 0, j = 0;\\n        while(j < n) {         \\n            if(i < m && name[i] == typed[j]) {\\n                i++;\\n            } else if( j == 0 || typed[j] != typed[j-1]) {\\n                return false;\\n            }\\n            j++;\\n        }\\n        return i == m;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1317444,
                "title": "java-solution-using-two-pointers",
                "content": "Wrote this code although I Know there is some room for improvement\\n\\n```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int i = 0;\\n        int j = 0;\\n        \\n        while(j < typed.length()){\\n            if(i < name.length() && name.charAt(i) == typed.charAt(j)){\\n                i++;\\n                j++;\\n            }else{\\n                if(j != 0 && typed.charAt(j) == name.charAt(i-1)){\\n                    j++;\\n                }else{\\n                    return false;\\n                }\\n            }\\n        }\\n        return i == name.length();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int i = 0;\\n        int j = 0;\\n        \\n        while(j < typed.length()){\\n            if(i < name.length() && name.charAt(i) == typed.charAt(j)){\\n                i++;\\n                j++;\\n            }else{\\n                if(j != 0 && typed.charAt(j) == name.charAt(i-1)){\\n                    j++;\\n                }else{\\n                    return false;\\n                }\\n            }\\n        }\\n        return i == name.length();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1308682,
                "title": "easy-c-solution-100-fast-with-proper-explaination",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n       \\n        if(name.size() > typed.size()) return false;// no possibility \\n        int i =0; // initialize two pointers to 0\\n        int j =0;\\n        while(i< name.size() && j <typed.size()){ // while loop till the size of name and typed string is greater than i and j respectively\\n            if(name.at(i) == typed.at(j)){ // check if the character at i and j are same if yes than  \\n            //increment i & j pointer\\n                i++;\\n                j++;\\n            }else if( i> 0 && name.at(i-1) == typed.at(j)){// if the charcters are not same check for the i-1 character & j if they are same than increment j only\\n                j++;\\n            }else{//if all the above cases are not satisfied return false \\n                return false;\\n            }\\n        }\\n         while(typed.size() > j ){ \\n              if(name.at(i-1) != typed.at(j))return false;\\n               j++;\\n        }\\n        \\n        return i< name.size() ? false : true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n       \\n        if(name.size() > typed.size()) return false;// no possibility \\n        int i =0; // initialize two pointers to 0\\n        int j =0;\\n        while(i< name.size() && j <typed.size()){ // while loop till the size of name and typed string is greater than i and j respectively\\n            if(name.at(i) == typed.at(j)){ // check if the character at i and j are same if yes than  \\n            //increment i & j pointer\\n                i++;\\n                j++;\\n            }else if( i> 0 && name.at(i-1) == typed.at(j)){// if the charcters are not same check for the i-1 character & j if they are same than increment j only\\n                j++;\\n            }else{//if all the above cases are not satisfied return false \\n                return false;\\n            }\\n        }\\n         while(typed.size() > j ){ \\n              if(name.at(i-1) != typed.at(j))return false;\\n               j++;\\n        }\\n        \\n        return i< name.size() ? false : true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1284861,
                "title": "python-stack-solution-alternative",
                "content": "```\\n\\nclass Solution:\\n    def isLongPressedName(self, name: str, typed: str) -> bool:\\n        \\n        t = collections.deque(typed)\\n        n = collections.deque(name)\\n        while t and n:\\n            c = n.popleft()\\n            tmp = [c]\\n            \\n            while n and n[0] == c:\\n                tmp += [n.popleft()]\\n                \\n            while tmp and t and t[0] == c:\\n                tmp.pop()\\n                t.popleft()\\n                \\n            while t and t[0] == c:\\n                t.popleft()\\n                    \\n            if len(tmp) > 0:\\n                return False\\n\\n        return len(n) == 0 and len(t) == 0\\n``` \\n\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n\\nclass Solution:\\n    def isLongPressedName(self, name: str, typed: str) -> bool:\\n        \\n        t = collections.deque(typed)\\n        n = collections.deque(name)\\n        while t and n:\\n            c = n.popleft()\\n            tmp = [c]\\n            \\n            while n and n[0] == c:\\n                tmp += [n.popleft()]\\n                \\n            while tmp and t and t[0] == c:\\n                tmp.pop()\\n                t.popleft()\\n                \\n            while t and t[0] == c:\\n                t.popleft()\\n                    \\n            if len(tmp) > 0:\\n                return False\\n\\n        return len(n) == 0 and len(t) == 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1283314,
                "title": "c-2-pointers-0-ms",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int i=0,j=0;\\n        while(j<typed.length()){\\n            if(name[i]!=typed[j]){\\n                return false;\\n            }\\n            char ch = name[i];\\n            char chh = typed[j];\\n            int cnt = 1;\\n            while(name[i+1]==ch){\\n                cnt++;\\n                i++;\\n            }\\n            int ct = 0;\\n            while(typed[j]==ch){\\n                ct++;\\n                j++;\\n            }\\n            if(cnt>ct){\\n                return false;\\n            }\\n            i++;\\n        }\\n        if(j!=typed.length() || i!=name.length()){\\n            return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int i=0,j=0;\\n        while(j<typed.length()){\\n            if(name[i]!=typed[j]){\\n                return false;\\n            }\\n            char ch = name[i];\\n            char chh = typed[j];\\n            int cnt = 1;\\n            while(name[i+1]==ch){\\n                cnt++;\\n                i++;\\n            }\\n            int ct = 0;\\n            while(typed[j]==ch){\\n                ct++;\\n                j++;\\n            }\\n            if(cnt>ct){\\n                return false;\\n            }\\n            i++;\\n        }\\n        if(j!=typed.length() || i!=name.length()){\\n            return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1282263,
                "title": "cpp-0ms-easy-o-n-time-o-1-space",
                "content": "```\\nbool isLongPressedName(string name, string typed) {\\n        if(name.size()>typed.size()) return false;\\n        if(name.size()==typed.size()) return name==typed;\\n        int count(0), pos(0), i(0);\\n        char prev;\\n        while( i < name.size())\\n        {\\n             int j=i;\\n             prev = name[i];\\n             while(name[j]==prev && j < name.size())\\n             {\\n                 count++;\\n                 j++;\\n             }\\n            while( pos<typed.size() && typed[pos] == prev )\\n            {\\n                count--;\\n                pos++;\\n            }\\n            if( count > 0) return false;\\n            else count = 0;  \\n            i = j;\\n        }\\n        return pos == typed.size();\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nbool isLongPressedName(string name, string typed) {\\n        if(name.size()>typed.size()) return false;\\n        if(name.size()==typed.size()) return name==typed;\\n        int count(0), pos(0), i(0);\\n        char prev;\\n        while( i < name.size())\\n        {\\n             int j=i;\\n             prev = name[i];\\n             while(name[j]==prev && j < name.size())\\n             {\\n                 count++;\\n                 j++;\\n             }\\n            while( pos<typed.size() && typed[pos] == prev )\\n            {\\n                count--;\\n                pos++;\\n            }\\n            if( count > 0) return false;\\n            else count = 0;  \\n            i = j;\\n        }\\n        return pos == typed.size();\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1261647,
                "title": "long-pressed-name-simple-two-pointer-solution",
                "content": "hint : Maintain two pointer i, j where i -> name and j-> typed no increment there value as\\n1) when both eqaul inc both i++ j++;\\n2) when i-1 == j then inc only j;\\n3) else return false\\n4) coming out of the loop if  i < name.length then return false else return true;\\nSolution :\\n\\n```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int i=0; int j=0;\\n        if(name.length()>typed.length()) return false;\\n        while(i!=name.length() && j!=typed.length()){\\n            if(name.charAt(i)==typed.charAt(j)){\\n                i++;\\n                j++;\\n            }else if(i>0 && name.charAt(i-1)==typed.charAt(j)){\\n                j++;\\n            }\\n            else{\\n                return false;\\n            }\\n        }\\n        while(j<typed.length()){\\n            if(typed.charAt(j)!=name.charAt(i-1)) return false;\\n            j++;\\n        }\\n        \\n        if(i<name.length()){\\n            return false;\\n        }else{\\n            return true;\\n        } \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int i=0; int j=0;\\n        if(name.length()>typed.length()) return false;\\n        while(i!=name.length() && j!=typed.length()){\\n            if(name.charAt(i)==typed.charAt(j)){\\n                i++;\\n                j++;\\n            }else if(i>0 && name.charAt(i-1)==typed.charAt(j)){\\n                j++;\\n            }\\n            else{\\n                return false;\\n            }\\n        }\\n        while(j<typed.length()){\\n            if(typed.charAt(j)!=name.charAt(i-1)) return false;\\n            j++;\\n        }\\n        \\n        if(i<name.length()){\\n            return false;\\n        }else{\\n            return true;\\n        } \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1261171,
                "title": "java-with-examples",
                "content": "```\\nclass Solution {\\npublic boolean isLongPressedName(String name, String typed) {\\n\\n int m=name.length();\\n int n=typed.length();\\n     \\n     if(m>n)                //case 1 ale and al\\n     return false;\\nint i=0;\\nfor(int j=0;j<n;j++){\\nif(i<=m-1 && name.charAt(i)==typed.charAt(j))\\ni++;\\n\\nelse if(j==0 || typed.charAt(j)!=typed.charAt(j-1)) //\"aabbc\" \"aabbccd\" fails for j=6 c!=d\\nreturn false;                                      // \"a\" \"b\" j==0 =?false\\n}\\n\\nreturn i<m?false:true; //if i<m and j==n => false\\n                      //\"aabbcc\" \"aabbbb\" i=4<5\\n\\n}\\n}\\n\\ndry run these examples\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic boolean isLongPressedName(String name, String typed) {\\n\\n int m=name.length();\\n int n=typed.length();\\n     \\n     if(m>n)                //case 1 ale and al\\n     return false;\\nint i=0;\\nfor(int j=0;j<n;j++){\\nif(i<=m-1 && name.charAt(i)==typed.charAt(j))\\ni++;\\n\\nelse if(j==0 || typed.charAt(j)!=typed.charAt(j-1)) //\"aabbc\" \"aabbccd\" fails for j=6 c!=d\\nreturn false;                                      // \"a\" \"b\" j==0 =?false\\n}\\n\\nreturn i<m?false:true; //if i<m and j==n => false\\n                      //\"aabbcc\" \"aabbbb\" i=4<5\\n\\n}\\n}\\n\\ndry run these examples\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1260642,
                "title": "java-1ms",
                "content": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        char[] n=name.toCharArray();\\n        char[] type=typed.toCharArray();\\n        int i=0;\\n        int j=0;\\n        while(i<n.length && j<type.length && n[i]==type[j])\\n        {\\n           int count=0;\\n           int count1=0;\\n            while(i<n.length-1 && n[i]==n[i+1])\\n            {\\n                count++;\\n                i++;\\n            }\\n            while(j<type.length && n[i]==type[j] )\\n            {\\n              count1++; \\n              j++;\\n            }\\n            if(count1<=count)\\n                return false;\\n             i++;\\n        }   \\n        if(i==n.length && j==type.length)\\n            return true;\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        char[] n=name.toCharArray();\\n        char[] type=typed.toCharArray();\\n        int i=0;\\n        int j=0;\\n        while(i<n.length && j<type.length && n[i]==type[j])\\n        {\\n           int count=0;\\n           int count1=0;\\n            while(i<n.length-1 && n[i]==n[i+1])\\n            {\\n                count++;\\n                i++;\\n            }\\n            while(j<type.length && n[i]==type[j] )\\n            {\\n              count1++; \\n              j++;\\n            }\\n            if(count1<=count)\\n                return false;\\n             i++;\\n        }   \\n        if(i==n.length && j==type.length)\\n            return true;\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1244443,
                "title": "java-1ms-solution",
                "content": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        if(name.equals(typed))\\n            return true;\\n        int i=name.length()-1,j=typed.length()-1;\\n        while(i>=0 && j>=0)\\n        {\\n            int count=0;\\n            char ch = name.charAt(i);\\n            while(i>=0 && name.charAt(i) == ch)\\n            {\\n                i--;\\n                count++;\\n            }\\n            while(j>=0 && typed.charAt(j) == ch)\\n            {\\n                j--;\\n                count--;\\n            }\\n            if(count > 0 ||(i>=0 && j<0)||(i<0 && j>=0))\\n                return false;\\n        }\\n        return true;\\n    }\\n}\\n```\\nPlease upvote if u find my code easy to understand",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        if(name.equals(typed))\\n            return true;\\n        int i=name.length()-1,j=typed.length()-1;\\n        while(i>=0 && j>=0)\\n        {\\n            int count=0;\\n            char ch = name.charAt(i);\\n            while(i>=0 && name.charAt(i) == ch)\\n            {\\n                i--;\\n                count++;\\n            }\\n            while(j>=0 && typed.charAt(j) == ch)\\n            {\\n                j--;\\n                count--;\\n            }\\n            if(count > 0 ||(i>=0 && j<0)||(i<0 && j>=0))\\n                return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1240329,
                "title": "java-solution-0ms-runtime",
                "content": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int j=0;\\n        if(name.equals(typed))\\n        {\\n            return true;\\n        }\\nif(typed.length()<name.length()||typed.charAt(0)!=name.charAt(0))\\n        {\\n            return false;\\n        }\\n        for(int i=0;i<typed.length();i++)\\n        {\\n            if(j<name.length()&&name.charAt(j)==typed.charAt(i))\\n            {\\n                j++;\\n            }\\n            else if(typed.charAt(i)!=typed.charAt(i-1))\\n            {\\n                return false;\\n            }\\n        }\\n        \\n        \\n        return j==name.length();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isLongPressedName(String name, String typed) {\\n        int j=0;\\n        if(name.equals(typed))\\n        {\\n            return true;\\n        }\\nif(typed.length()<name.length()||typed.charAt(0)!=name.charAt(0))\\n        {\\n            return false;\\n        }\\n        for(int i=0;i<typed.length();i++)\\n        {\\n            if(j<name.length()&&name.charAt(j)==typed.charAt(i))\\n            {\\n                j++;\\n            }\\n            else if(typed.charAt(i)!=typed.charAt(i-1))\\n            {\\n                return false;\\n            }\\n        }\\n        \\n        \\n        return j==name.length();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1237536,
                "title": "c-two-pointers-solution-100-faster-with-comments-o-n-time-and-o-1-space",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n```\\n        \\n        /* typed should atleast be of same length as name in the best case where there are no duplicates \\n           in typed */\\n        if(typed.length() < name.length())\\n            return false;\\n        \\n        int i=0, j=0;\\n        while(i<name.length() || j<typed.length())\\n        {   \\n            /* If current we are looking at the same caharacter in both the strings,\\n               move both the pointers forward \\n            */\\n            if(i< name.length() && name[i] == typed[j])  i++, j++;\\n            \\n            /*  If not, typed[j] should be a duplicated character which means it should be same as \\n                name[i-1]. Increment onlt j forward as we might have more duplicate characters in typed\\n                that we need to process.\\n                Note: This will also handle the case where we have reached the end of \\n                name, but still have some characters left in typed to process.\\n                Example: name=\"abc\" and typed=\"abccc\" \\n            */\\n            else if(i>0 && j<typed.length() && name[i-1] == typed[j]) j++;\\n            \\n            /* If typed[j] is not the same as name[i] or name[i-1], we can return here as \\n               typed has a character that is not a duplicate of a character in name\\n               eg: name=\"abccdd\", typed=\"abbbccced\"\\n               name : abcc    | dd\\n               typed: abbbccc | ed   ->typed[7]->\"e\" is not equal to name[4]->\"d\" or name[3]->\"c\"\\n\\t\\t\\t   so \"e\" is not a duplicate character here\\n            */\\n            else return false;  \\n        }\\n        \\n        /*We have successfully reached the end of both the strings, so return true*/\\n        return true;\\n    }\\n};",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1570171,
                "content": [
                    {
                        "username": "nareshvishram",
                        "content": "Shouldn\\'t be in Easy Section !!\\nShould be in medium at least !!"
                    },
                    {
                        "username": "mutasim77",
                        "content": "hate u alexx"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Poor Alex... \\uD83D\\uDE14"
                    },
                    {
                        "username": "anupamkolay6",
                        "content": "My solution didn\\'t work because of alex."
                    },
                    {
                        "username": "cabbagehao",
                        "content": "From the describtion\\uFF0C I think the follow testcase should be Failed, but it\\'s not:  \\n\\nname = \"alex\"\\ntyped = \"alexs\"\\n\\nHow do you think?"
                    },
                    {
                        "username": "ZANGO_27",
                        "content": "it fails"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would rather tell this fellow to go buy a new keyboard than look at the mistyped word."
                    },
                    {
                        "username": "nicomp42",
                        "content": "Explanation in Example 2 is poorly worded. "
                    },
                    {
                        "username": "archieny",
                        "content": "Others may disagree, and that\\'s fine but I think at least one testcase misrepresents the problem as described. \\n\\nMy current solution (which I acknowledge as a wrong solution for this question obviously, it failed), but the solution it fails on is misrepresentative of the problem as described. \\n\\nThe problem description guarantees that the typed characters will clearly be typed **1 or more times** with **some characters (possibly one) being long pressed.** That, effectively guarantees against characters being **not typed** where they are expected. But this test case, \"kikcxmvzi\" \"kiikcxxmmvvzz\", removes a letter from the end of the typed string.\\n\\nI understand that he **could forget to type a letter**, but this question seems to imply the that all letters are typed, with maybe some typed more than once - not never.\\n\\nMany answer title suggest a two pointer solution, which I intend to begin implementing to see if I can suceed against all given test cases, but I thought this confusion may be worth noting."
                    },
                    {
                        "username": "madpoly",
                        "content": "stupid problem, gave me ptsd. Should be medium!"
                    },
                    {
                        "username": "Kratos50",
                        "content": "Entry level medium problem. \\n\"F\" for all those trying to solve it using hashmap \\nlike all of you, i too am stuck at test cases 77/94 lmao"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Why you overcomplicate your life?\nIt's tagged 'Two Pointers', not 'Hashmap'. Easy and classical case for two pointers..."
                    },
                    {
                        "username": "Django3",
                        "content": "A question with incomplete explanations is not a difficult or easy question, it is a wrong question. I can\\'t understand what they are trying to do with such a question.\\n"
                    },
                    {
                        "username": "arnabroy10121998",
                        "content": "My solution passed 91/94 test cases...still somewhat fell short just because of alex.....hate u "
                    }
                ]
            },
            {
                "id": 1835360,
                "content": [
                    {
                        "username": "nareshvishram",
                        "content": "Shouldn\\'t be in Easy Section !!\\nShould be in medium at least !!"
                    },
                    {
                        "username": "mutasim77",
                        "content": "hate u alexx"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Poor Alex... \\uD83D\\uDE14"
                    },
                    {
                        "username": "anupamkolay6",
                        "content": "My solution didn\\'t work because of alex."
                    },
                    {
                        "username": "cabbagehao",
                        "content": "From the describtion\\uFF0C I think the follow testcase should be Failed, but it\\'s not:  \\n\\nname = \"alex\"\\ntyped = \"alexs\"\\n\\nHow do you think?"
                    },
                    {
                        "username": "ZANGO_27",
                        "content": "it fails"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would rather tell this fellow to go buy a new keyboard than look at the mistyped word."
                    },
                    {
                        "username": "nicomp42",
                        "content": "Explanation in Example 2 is poorly worded. "
                    },
                    {
                        "username": "archieny",
                        "content": "Others may disagree, and that\\'s fine but I think at least one testcase misrepresents the problem as described. \\n\\nMy current solution (which I acknowledge as a wrong solution for this question obviously, it failed), but the solution it fails on is misrepresentative of the problem as described. \\n\\nThe problem description guarantees that the typed characters will clearly be typed **1 or more times** with **some characters (possibly one) being long pressed.** That, effectively guarantees against characters being **not typed** where they are expected. But this test case, \"kikcxmvzi\" \"kiikcxxmmvvzz\", removes a letter from the end of the typed string.\\n\\nI understand that he **could forget to type a letter**, but this question seems to imply the that all letters are typed, with maybe some typed more than once - not never.\\n\\nMany answer title suggest a two pointer solution, which I intend to begin implementing to see if I can suceed against all given test cases, but I thought this confusion may be worth noting."
                    },
                    {
                        "username": "madpoly",
                        "content": "stupid problem, gave me ptsd. Should be medium!"
                    },
                    {
                        "username": "Kratos50",
                        "content": "Entry level medium problem. \\n\"F\" for all those trying to solve it using hashmap \\nlike all of you, i too am stuck at test cases 77/94 lmao"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Why you overcomplicate your life?\nIt's tagged 'Two Pointers', not 'Hashmap'. Easy and classical case for two pointers..."
                    },
                    {
                        "username": "Django3",
                        "content": "A question with incomplete explanations is not a difficult or easy question, it is a wrong question. I can\\'t understand what they are trying to do with such a question.\\n"
                    },
                    {
                        "username": "arnabroy10121998",
                        "content": "My solution passed 91/94 test cases...still somewhat fell short just because of alex.....hate u "
                    }
                ]
            },
            {
                "id": 1572319,
                "content": [
                    {
                        "username": "nareshvishram",
                        "content": "Shouldn\\'t be in Easy Section !!\\nShould be in medium at least !!"
                    },
                    {
                        "username": "mutasim77",
                        "content": "hate u alexx"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Poor Alex... \\uD83D\\uDE14"
                    },
                    {
                        "username": "anupamkolay6",
                        "content": "My solution didn\\'t work because of alex."
                    },
                    {
                        "username": "cabbagehao",
                        "content": "From the describtion\\uFF0C I think the follow testcase should be Failed, but it\\'s not:  \\n\\nname = \"alex\"\\ntyped = \"alexs\"\\n\\nHow do you think?"
                    },
                    {
                        "username": "ZANGO_27",
                        "content": "it fails"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would rather tell this fellow to go buy a new keyboard than look at the mistyped word."
                    },
                    {
                        "username": "nicomp42",
                        "content": "Explanation in Example 2 is poorly worded. "
                    },
                    {
                        "username": "archieny",
                        "content": "Others may disagree, and that\\'s fine but I think at least one testcase misrepresents the problem as described. \\n\\nMy current solution (which I acknowledge as a wrong solution for this question obviously, it failed), but the solution it fails on is misrepresentative of the problem as described. \\n\\nThe problem description guarantees that the typed characters will clearly be typed **1 or more times** with **some characters (possibly one) being long pressed.** That, effectively guarantees against characters being **not typed** where they are expected. But this test case, \"kikcxmvzi\" \"kiikcxxmmvvzz\", removes a letter from the end of the typed string.\\n\\nI understand that he **could forget to type a letter**, but this question seems to imply the that all letters are typed, with maybe some typed more than once - not never.\\n\\nMany answer title suggest a two pointer solution, which I intend to begin implementing to see if I can suceed against all given test cases, but I thought this confusion may be worth noting."
                    },
                    {
                        "username": "madpoly",
                        "content": "stupid problem, gave me ptsd. Should be medium!"
                    },
                    {
                        "username": "Kratos50",
                        "content": "Entry level medium problem. \\n\"F\" for all those trying to solve it using hashmap \\nlike all of you, i too am stuck at test cases 77/94 lmao"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Why you overcomplicate your life?\nIt's tagged 'Two Pointers', not 'Hashmap'. Easy and classical case for two pointers..."
                    },
                    {
                        "username": "Django3",
                        "content": "A question with incomplete explanations is not a difficult or easy question, it is a wrong question. I can\\'t understand what they are trying to do with such a question.\\n"
                    },
                    {
                        "username": "arnabroy10121998",
                        "content": "My solution passed 91/94 test cases...still somewhat fell short just because of alex.....hate u "
                    }
                ]
            },
            {
                "id": 2025468,
                "content": [
                    {
                        "username": "nareshvishram",
                        "content": "Shouldn\\'t be in Easy Section !!\\nShould be in medium at least !!"
                    },
                    {
                        "username": "mutasim77",
                        "content": "hate u alexx"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Poor Alex... \\uD83D\\uDE14"
                    },
                    {
                        "username": "anupamkolay6",
                        "content": "My solution didn\\'t work because of alex."
                    },
                    {
                        "username": "cabbagehao",
                        "content": "From the describtion\\uFF0C I think the follow testcase should be Failed, but it\\'s not:  \\n\\nname = \"alex\"\\ntyped = \"alexs\"\\n\\nHow do you think?"
                    },
                    {
                        "username": "ZANGO_27",
                        "content": "it fails"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would rather tell this fellow to go buy a new keyboard than look at the mistyped word."
                    },
                    {
                        "username": "nicomp42",
                        "content": "Explanation in Example 2 is poorly worded. "
                    },
                    {
                        "username": "archieny",
                        "content": "Others may disagree, and that\\'s fine but I think at least one testcase misrepresents the problem as described. \\n\\nMy current solution (which I acknowledge as a wrong solution for this question obviously, it failed), but the solution it fails on is misrepresentative of the problem as described. \\n\\nThe problem description guarantees that the typed characters will clearly be typed **1 or more times** with **some characters (possibly one) being long pressed.** That, effectively guarantees against characters being **not typed** where they are expected. But this test case, \"kikcxmvzi\" \"kiikcxxmmvvzz\", removes a letter from the end of the typed string.\\n\\nI understand that he **could forget to type a letter**, but this question seems to imply the that all letters are typed, with maybe some typed more than once - not never.\\n\\nMany answer title suggest a two pointer solution, which I intend to begin implementing to see if I can suceed against all given test cases, but I thought this confusion may be worth noting."
                    },
                    {
                        "username": "madpoly",
                        "content": "stupid problem, gave me ptsd. Should be medium!"
                    },
                    {
                        "username": "Kratos50",
                        "content": "Entry level medium problem. \\n\"F\" for all those trying to solve it using hashmap \\nlike all of you, i too am stuck at test cases 77/94 lmao"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Why you overcomplicate your life?\nIt's tagged 'Two Pointers', not 'Hashmap'. Easy and classical case for two pointers..."
                    },
                    {
                        "username": "Django3",
                        "content": "A question with incomplete explanations is not a difficult or easy question, it is a wrong question. I can\\'t understand what they are trying to do with such a question.\\n"
                    },
                    {
                        "username": "arnabroy10121998",
                        "content": "My solution passed 91/94 test cases...still somewhat fell short just because of alex.....hate u "
                    }
                ]
            },
            {
                "id": 1999974,
                "content": [
                    {
                        "username": "nareshvishram",
                        "content": "Shouldn\\'t be in Easy Section !!\\nShould be in medium at least !!"
                    },
                    {
                        "username": "mutasim77",
                        "content": "hate u alexx"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Poor Alex... \\uD83D\\uDE14"
                    },
                    {
                        "username": "anupamkolay6",
                        "content": "My solution didn\\'t work because of alex."
                    },
                    {
                        "username": "cabbagehao",
                        "content": "From the describtion\\uFF0C I think the follow testcase should be Failed, but it\\'s not:  \\n\\nname = \"alex\"\\ntyped = \"alexs\"\\n\\nHow do you think?"
                    },
                    {
                        "username": "ZANGO_27",
                        "content": "it fails"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would rather tell this fellow to go buy a new keyboard than look at the mistyped word."
                    },
                    {
                        "username": "nicomp42",
                        "content": "Explanation in Example 2 is poorly worded. "
                    },
                    {
                        "username": "archieny",
                        "content": "Others may disagree, and that\\'s fine but I think at least one testcase misrepresents the problem as described. \\n\\nMy current solution (which I acknowledge as a wrong solution for this question obviously, it failed), but the solution it fails on is misrepresentative of the problem as described. \\n\\nThe problem description guarantees that the typed characters will clearly be typed **1 or more times** with **some characters (possibly one) being long pressed.** That, effectively guarantees against characters being **not typed** where they are expected. But this test case, \"kikcxmvzi\" \"kiikcxxmmvvzz\", removes a letter from the end of the typed string.\\n\\nI understand that he **could forget to type a letter**, but this question seems to imply the that all letters are typed, with maybe some typed more than once - not never.\\n\\nMany answer title suggest a two pointer solution, which I intend to begin implementing to see if I can suceed against all given test cases, but I thought this confusion may be worth noting."
                    },
                    {
                        "username": "madpoly",
                        "content": "stupid problem, gave me ptsd. Should be medium!"
                    },
                    {
                        "username": "Kratos50",
                        "content": "Entry level medium problem. \\n\"F\" for all those trying to solve it using hashmap \\nlike all of you, i too am stuck at test cases 77/94 lmao"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Why you overcomplicate your life?\nIt's tagged 'Two Pointers', not 'Hashmap'. Easy and classical case for two pointers..."
                    },
                    {
                        "username": "Django3",
                        "content": "A question with incomplete explanations is not a difficult or easy question, it is a wrong question. I can\\'t understand what they are trying to do with such a question.\\n"
                    },
                    {
                        "username": "arnabroy10121998",
                        "content": "My solution passed 91/94 test cases...still somewhat fell short just because of alex.....hate u "
                    }
                ]
            },
            {
                "id": 1569851,
                "content": [
                    {
                        "username": "nareshvishram",
                        "content": "Shouldn\\'t be in Easy Section !!\\nShould be in medium at least !!"
                    },
                    {
                        "username": "mutasim77",
                        "content": "hate u alexx"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Poor Alex... \\uD83D\\uDE14"
                    },
                    {
                        "username": "anupamkolay6",
                        "content": "My solution didn\\'t work because of alex."
                    },
                    {
                        "username": "cabbagehao",
                        "content": "From the describtion\\uFF0C I think the follow testcase should be Failed, but it\\'s not:  \\n\\nname = \"alex\"\\ntyped = \"alexs\"\\n\\nHow do you think?"
                    },
                    {
                        "username": "ZANGO_27",
                        "content": "it fails"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would rather tell this fellow to go buy a new keyboard than look at the mistyped word."
                    },
                    {
                        "username": "nicomp42",
                        "content": "Explanation in Example 2 is poorly worded. "
                    },
                    {
                        "username": "archieny",
                        "content": "Others may disagree, and that\\'s fine but I think at least one testcase misrepresents the problem as described. \\n\\nMy current solution (which I acknowledge as a wrong solution for this question obviously, it failed), but the solution it fails on is misrepresentative of the problem as described. \\n\\nThe problem description guarantees that the typed characters will clearly be typed **1 or more times** with **some characters (possibly one) being long pressed.** That, effectively guarantees against characters being **not typed** where they are expected. But this test case, \"kikcxmvzi\" \"kiikcxxmmvvzz\", removes a letter from the end of the typed string.\\n\\nI understand that he **could forget to type a letter**, but this question seems to imply the that all letters are typed, with maybe some typed more than once - not never.\\n\\nMany answer title suggest a two pointer solution, which I intend to begin implementing to see if I can suceed against all given test cases, but I thought this confusion may be worth noting."
                    },
                    {
                        "username": "madpoly",
                        "content": "stupid problem, gave me ptsd. Should be medium!"
                    },
                    {
                        "username": "Kratos50",
                        "content": "Entry level medium problem. \\n\"F\" for all those trying to solve it using hashmap \\nlike all of you, i too am stuck at test cases 77/94 lmao"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Why you overcomplicate your life?\nIt's tagged 'Two Pointers', not 'Hashmap'. Easy and classical case for two pointers..."
                    },
                    {
                        "username": "Django3",
                        "content": "A question with incomplete explanations is not a difficult or easy question, it is a wrong question. I can\\'t understand what they are trying to do with such a question.\\n"
                    },
                    {
                        "username": "arnabroy10121998",
                        "content": "My solution passed 91/94 test cases...still somewhat fell short just because of alex.....hate u "
                    }
                ]
            },
            {
                "id": 1917078,
                "content": [
                    {
                        "username": "nareshvishram",
                        "content": "Shouldn\\'t be in Easy Section !!\\nShould be in medium at least !!"
                    },
                    {
                        "username": "mutasim77",
                        "content": "hate u alexx"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Poor Alex... \\uD83D\\uDE14"
                    },
                    {
                        "username": "anupamkolay6",
                        "content": "My solution didn\\'t work because of alex."
                    },
                    {
                        "username": "cabbagehao",
                        "content": "From the describtion\\uFF0C I think the follow testcase should be Failed, but it\\'s not:  \\n\\nname = \"alex\"\\ntyped = \"alexs\"\\n\\nHow do you think?"
                    },
                    {
                        "username": "ZANGO_27",
                        "content": "it fails"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would rather tell this fellow to go buy a new keyboard than look at the mistyped word."
                    },
                    {
                        "username": "nicomp42",
                        "content": "Explanation in Example 2 is poorly worded. "
                    },
                    {
                        "username": "archieny",
                        "content": "Others may disagree, and that\\'s fine but I think at least one testcase misrepresents the problem as described. \\n\\nMy current solution (which I acknowledge as a wrong solution for this question obviously, it failed), but the solution it fails on is misrepresentative of the problem as described. \\n\\nThe problem description guarantees that the typed characters will clearly be typed **1 or more times** with **some characters (possibly one) being long pressed.** That, effectively guarantees against characters being **not typed** where they are expected. But this test case, \"kikcxmvzi\" \"kiikcxxmmvvzz\", removes a letter from the end of the typed string.\\n\\nI understand that he **could forget to type a letter**, but this question seems to imply the that all letters are typed, with maybe some typed more than once - not never.\\n\\nMany answer title suggest a two pointer solution, which I intend to begin implementing to see if I can suceed against all given test cases, but I thought this confusion may be worth noting."
                    },
                    {
                        "username": "madpoly",
                        "content": "stupid problem, gave me ptsd. Should be medium!"
                    },
                    {
                        "username": "Kratos50",
                        "content": "Entry level medium problem. \\n\"F\" for all those trying to solve it using hashmap \\nlike all of you, i too am stuck at test cases 77/94 lmao"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Why you overcomplicate your life?\nIt's tagged 'Two Pointers', not 'Hashmap'. Easy and classical case for two pointers..."
                    },
                    {
                        "username": "Django3",
                        "content": "A question with incomplete explanations is not a difficult or easy question, it is a wrong question. I can\\'t understand what they are trying to do with such a question.\\n"
                    },
                    {
                        "username": "arnabroy10121998",
                        "content": "My solution passed 91/94 test cases...still somewhat fell short just because of alex.....hate u "
                    }
                ]
            },
            {
                "id": 1779244,
                "content": [
                    {
                        "username": "nareshvishram",
                        "content": "Shouldn\\'t be in Easy Section !!\\nShould be in medium at least !!"
                    },
                    {
                        "username": "mutasim77",
                        "content": "hate u alexx"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Poor Alex... \\uD83D\\uDE14"
                    },
                    {
                        "username": "anupamkolay6",
                        "content": "My solution didn\\'t work because of alex."
                    },
                    {
                        "username": "cabbagehao",
                        "content": "From the describtion\\uFF0C I think the follow testcase should be Failed, but it\\'s not:  \\n\\nname = \"alex\"\\ntyped = \"alexs\"\\n\\nHow do you think?"
                    },
                    {
                        "username": "ZANGO_27",
                        "content": "it fails"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would rather tell this fellow to go buy a new keyboard than look at the mistyped word."
                    },
                    {
                        "username": "nicomp42",
                        "content": "Explanation in Example 2 is poorly worded. "
                    },
                    {
                        "username": "archieny",
                        "content": "Others may disagree, and that\\'s fine but I think at least one testcase misrepresents the problem as described. \\n\\nMy current solution (which I acknowledge as a wrong solution for this question obviously, it failed), but the solution it fails on is misrepresentative of the problem as described. \\n\\nThe problem description guarantees that the typed characters will clearly be typed **1 or more times** with **some characters (possibly one) being long pressed.** That, effectively guarantees against characters being **not typed** where they are expected. But this test case, \"kikcxmvzi\" \"kiikcxxmmvvzz\", removes a letter from the end of the typed string.\\n\\nI understand that he **could forget to type a letter**, but this question seems to imply the that all letters are typed, with maybe some typed more than once - not never.\\n\\nMany answer title suggest a two pointer solution, which I intend to begin implementing to see if I can suceed against all given test cases, but I thought this confusion may be worth noting."
                    },
                    {
                        "username": "madpoly",
                        "content": "stupid problem, gave me ptsd. Should be medium!"
                    },
                    {
                        "username": "Kratos50",
                        "content": "Entry level medium problem. \\n\"F\" for all those trying to solve it using hashmap \\nlike all of you, i too am stuck at test cases 77/94 lmao"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Why you overcomplicate your life?\nIt's tagged 'Two Pointers', not 'Hashmap'. Easy and classical case for two pointers..."
                    },
                    {
                        "username": "Django3",
                        "content": "A question with incomplete explanations is not a difficult or easy question, it is a wrong question. I can\\'t understand what they are trying to do with such a question.\\n"
                    },
                    {
                        "username": "arnabroy10121998",
                        "content": "My solution passed 91/94 test cases...still somewhat fell short just because of alex.....hate u "
                    }
                ]
            },
            {
                "id": 2073628,
                "content": [
                    {
                        "username": "nareshvishram",
                        "content": "Shouldn\\'t be in Easy Section !!\\nShould be in medium at least !!"
                    },
                    {
                        "username": "mutasim77",
                        "content": "hate u alexx"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Poor Alex... \\uD83D\\uDE14"
                    },
                    {
                        "username": "anupamkolay6",
                        "content": "My solution didn\\'t work because of alex."
                    },
                    {
                        "username": "cabbagehao",
                        "content": "From the describtion\\uFF0C I think the follow testcase should be Failed, but it\\'s not:  \\n\\nname = \"alex\"\\ntyped = \"alexs\"\\n\\nHow do you think?"
                    },
                    {
                        "username": "ZANGO_27",
                        "content": "it fails"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would rather tell this fellow to go buy a new keyboard than look at the mistyped word."
                    },
                    {
                        "username": "nicomp42",
                        "content": "Explanation in Example 2 is poorly worded. "
                    },
                    {
                        "username": "archieny",
                        "content": "Others may disagree, and that\\'s fine but I think at least one testcase misrepresents the problem as described. \\n\\nMy current solution (which I acknowledge as a wrong solution for this question obviously, it failed), but the solution it fails on is misrepresentative of the problem as described. \\n\\nThe problem description guarantees that the typed characters will clearly be typed **1 or more times** with **some characters (possibly one) being long pressed.** That, effectively guarantees against characters being **not typed** where they are expected. But this test case, \"kikcxmvzi\" \"kiikcxxmmvvzz\", removes a letter from the end of the typed string.\\n\\nI understand that he **could forget to type a letter**, but this question seems to imply the that all letters are typed, with maybe some typed more than once - not never.\\n\\nMany answer title suggest a two pointer solution, which I intend to begin implementing to see if I can suceed against all given test cases, but I thought this confusion may be worth noting."
                    },
                    {
                        "username": "madpoly",
                        "content": "stupid problem, gave me ptsd. Should be medium!"
                    },
                    {
                        "username": "Kratos50",
                        "content": "Entry level medium problem. \\n\"F\" for all those trying to solve it using hashmap \\nlike all of you, i too am stuck at test cases 77/94 lmao"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Why you overcomplicate your life?\nIt's tagged 'Two Pointers', not 'Hashmap'. Easy and classical case for two pointers..."
                    },
                    {
                        "username": "Django3",
                        "content": "A question with incomplete explanations is not a difficult or easy question, it is a wrong question. I can\\'t understand what they are trying to do with such a question.\\n"
                    },
                    {
                        "username": "arnabroy10121998",
                        "content": "My solution passed 91/94 test cases...still somewhat fell short just because of alex.....hate u "
                    }
                ]
            },
            {
                "id": 2070071,
                "content": [
                    {
                        "username": "nareshvishram",
                        "content": "Shouldn\\'t be in Easy Section !!\\nShould be in medium at least !!"
                    },
                    {
                        "username": "mutasim77",
                        "content": "hate u alexx"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Poor Alex... \\uD83D\\uDE14"
                    },
                    {
                        "username": "anupamkolay6",
                        "content": "My solution didn\\'t work because of alex."
                    },
                    {
                        "username": "cabbagehao",
                        "content": "From the describtion\\uFF0C I think the follow testcase should be Failed, but it\\'s not:  \\n\\nname = \"alex\"\\ntyped = \"alexs\"\\n\\nHow do you think?"
                    },
                    {
                        "username": "ZANGO_27",
                        "content": "it fails"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would rather tell this fellow to go buy a new keyboard than look at the mistyped word."
                    },
                    {
                        "username": "nicomp42",
                        "content": "Explanation in Example 2 is poorly worded. "
                    },
                    {
                        "username": "archieny",
                        "content": "Others may disagree, and that\\'s fine but I think at least one testcase misrepresents the problem as described. \\n\\nMy current solution (which I acknowledge as a wrong solution for this question obviously, it failed), but the solution it fails on is misrepresentative of the problem as described. \\n\\nThe problem description guarantees that the typed characters will clearly be typed **1 or more times** with **some characters (possibly one) being long pressed.** That, effectively guarantees against characters being **not typed** where they are expected. But this test case, \"kikcxmvzi\" \"kiikcxxmmvvzz\", removes a letter from the end of the typed string.\\n\\nI understand that he **could forget to type a letter**, but this question seems to imply the that all letters are typed, with maybe some typed more than once - not never.\\n\\nMany answer title suggest a two pointer solution, which I intend to begin implementing to see if I can suceed against all given test cases, but I thought this confusion may be worth noting."
                    },
                    {
                        "username": "madpoly",
                        "content": "stupid problem, gave me ptsd. Should be medium!"
                    },
                    {
                        "username": "Kratos50",
                        "content": "Entry level medium problem. \\n\"F\" for all those trying to solve it using hashmap \\nlike all of you, i too am stuck at test cases 77/94 lmao"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Why you overcomplicate your life?\nIt's tagged 'Two Pointers', not 'Hashmap'. Easy and classical case for two pointers..."
                    },
                    {
                        "username": "Django3",
                        "content": "A question with incomplete explanations is not a difficult or easy question, it is a wrong question. I can\\'t understand what they are trying to do with such a question.\\n"
                    },
                    {
                        "username": "arnabroy10121998",
                        "content": "My solution passed 91/94 test cases...still somewhat fell short just because of alex.....hate u "
                    }
                ]
            },
            {
                "id": 1570171,
                "content": [
                    {
                        "username": "nareshvishram",
                        "content": "Shouldn\\'t be in Easy Section !!\\nShould be in medium at least !!"
                    },
                    {
                        "username": "mutasim77",
                        "content": "hate u alexx"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Poor Alex... \\uD83D\\uDE14"
                    },
                    {
                        "username": "anupamkolay6",
                        "content": "My solution didn\\'t work because of alex."
                    },
                    {
                        "username": "cabbagehao",
                        "content": "From the describtion\\uFF0C I think the follow testcase should be Failed, but it\\'s not:  \\n\\nname = \"alex\"\\ntyped = \"alexs\"\\n\\nHow do you think?"
                    },
                    {
                        "username": "ZANGO_27",
                        "content": "it fails"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would rather tell this fellow to go buy a new keyboard than look at the mistyped word."
                    },
                    {
                        "username": "nicomp42",
                        "content": "Explanation in Example 2 is poorly worded. "
                    },
                    {
                        "username": "archieny",
                        "content": "Others may disagree, and that\\'s fine but I think at least one testcase misrepresents the problem as described. \\n\\nMy current solution (which I acknowledge as a wrong solution for this question obviously, it failed), but the solution it fails on is misrepresentative of the problem as described. \\n\\nThe problem description guarantees that the typed characters will clearly be typed **1 or more times** with **some characters (possibly one) being long pressed.** That, effectively guarantees against characters being **not typed** where they are expected. But this test case, \"kikcxmvzi\" \"kiikcxxmmvvzz\", removes a letter from the end of the typed string.\\n\\nI understand that he **could forget to type a letter**, but this question seems to imply the that all letters are typed, with maybe some typed more than once - not never.\\n\\nMany answer title suggest a two pointer solution, which I intend to begin implementing to see if I can suceed against all given test cases, but I thought this confusion may be worth noting."
                    },
                    {
                        "username": "madpoly",
                        "content": "stupid problem, gave me ptsd. Should be medium!"
                    },
                    {
                        "username": "Kratos50",
                        "content": "Entry level medium problem. \\n\"F\" for all those trying to solve it using hashmap \\nlike all of you, i too am stuck at test cases 77/94 lmao"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Why you overcomplicate your life?\nIt's tagged 'Two Pointers', not 'Hashmap'. Easy and classical case for two pointers..."
                    },
                    {
                        "username": "Django3",
                        "content": "A question with incomplete explanations is not a difficult or easy question, it is a wrong question. I can\\'t understand what they are trying to do with such a question.\\n"
                    },
                    {
                        "username": "arnabroy10121998",
                        "content": "My solution passed 91/94 test cases...still somewhat fell short just because of alex.....hate u "
                    }
                ]
            },
            {
                "id": 1835360,
                "content": [
                    {
                        "username": "nareshvishram",
                        "content": "Shouldn\\'t be in Easy Section !!\\nShould be in medium at least !!"
                    },
                    {
                        "username": "mutasim77",
                        "content": "hate u alexx"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Poor Alex... \\uD83D\\uDE14"
                    },
                    {
                        "username": "anupamkolay6",
                        "content": "My solution didn\\'t work because of alex."
                    },
                    {
                        "username": "cabbagehao",
                        "content": "From the describtion\\uFF0C I think the follow testcase should be Failed, but it\\'s not:  \\n\\nname = \"alex\"\\ntyped = \"alexs\"\\n\\nHow do you think?"
                    },
                    {
                        "username": "ZANGO_27",
                        "content": "it fails"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would rather tell this fellow to go buy a new keyboard than look at the mistyped word."
                    },
                    {
                        "username": "nicomp42",
                        "content": "Explanation in Example 2 is poorly worded. "
                    },
                    {
                        "username": "archieny",
                        "content": "Others may disagree, and that\\'s fine but I think at least one testcase misrepresents the problem as described. \\n\\nMy current solution (which I acknowledge as a wrong solution for this question obviously, it failed), but the solution it fails on is misrepresentative of the problem as described. \\n\\nThe problem description guarantees that the typed characters will clearly be typed **1 or more times** with **some characters (possibly one) being long pressed.** That, effectively guarantees against characters being **not typed** where they are expected. But this test case, \"kikcxmvzi\" \"kiikcxxmmvvzz\", removes a letter from the end of the typed string.\\n\\nI understand that he **could forget to type a letter**, but this question seems to imply the that all letters are typed, with maybe some typed more than once - not never.\\n\\nMany answer title suggest a two pointer solution, which I intend to begin implementing to see if I can suceed against all given test cases, but I thought this confusion may be worth noting."
                    },
                    {
                        "username": "madpoly",
                        "content": "stupid problem, gave me ptsd. Should be medium!"
                    },
                    {
                        "username": "Kratos50",
                        "content": "Entry level medium problem. \\n\"F\" for all those trying to solve it using hashmap \\nlike all of you, i too am stuck at test cases 77/94 lmao"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Why you overcomplicate your life?\nIt's tagged 'Two Pointers', not 'Hashmap'. Easy and classical case for two pointers..."
                    },
                    {
                        "username": "Django3",
                        "content": "A question with incomplete explanations is not a difficult or easy question, it is a wrong question. I can\\'t understand what they are trying to do with such a question.\\n"
                    },
                    {
                        "username": "arnabroy10121998",
                        "content": "My solution passed 91/94 test cases...still somewhat fell short just because of alex.....hate u "
                    }
                ]
            },
            {
                "id": 1572319,
                "content": [
                    {
                        "username": "nareshvishram",
                        "content": "Shouldn\\'t be in Easy Section !!\\nShould be in medium at least !!"
                    },
                    {
                        "username": "mutasim77",
                        "content": "hate u alexx"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Poor Alex... \\uD83D\\uDE14"
                    },
                    {
                        "username": "anupamkolay6",
                        "content": "My solution didn\\'t work because of alex."
                    },
                    {
                        "username": "cabbagehao",
                        "content": "From the describtion\\uFF0C I think the follow testcase should be Failed, but it\\'s not:  \\n\\nname = \"alex\"\\ntyped = \"alexs\"\\n\\nHow do you think?"
                    },
                    {
                        "username": "ZANGO_27",
                        "content": "it fails"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would rather tell this fellow to go buy a new keyboard than look at the mistyped word."
                    },
                    {
                        "username": "nicomp42",
                        "content": "Explanation in Example 2 is poorly worded. "
                    },
                    {
                        "username": "archieny",
                        "content": "Others may disagree, and that\\'s fine but I think at least one testcase misrepresents the problem as described. \\n\\nMy current solution (which I acknowledge as a wrong solution for this question obviously, it failed), but the solution it fails on is misrepresentative of the problem as described. \\n\\nThe problem description guarantees that the typed characters will clearly be typed **1 or more times** with **some characters (possibly one) being long pressed.** That, effectively guarantees against characters being **not typed** where they are expected. But this test case, \"kikcxmvzi\" \"kiikcxxmmvvzz\", removes a letter from the end of the typed string.\\n\\nI understand that he **could forget to type a letter**, but this question seems to imply the that all letters are typed, with maybe some typed more than once - not never.\\n\\nMany answer title suggest a two pointer solution, which I intend to begin implementing to see if I can suceed against all given test cases, but I thought this confusion may be worth noting."
                    },
                    {
                        "username": "madpoly",
                        "content": "stupid problem, gave me ptsd. Should be medium!"
                    },
                    {
                        "username": "Kratos50",
                        "content": "Entry level medium problem. \\n\"F\" for all those trying to solve it using hashmap \\nlike all of you, i too am stuck at test cases 77/94 lmao"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Why you overcomplicate your life?\nIt's tagged 'Two Pointers', not 'Hashmap'. Easy and classical case for two pointers..."
                    },
                    {
                        "username": "Django3",
                        "content": "A question with incomplete explanations is not a difficult or easy question, it is a wrong question. I can\\'t understand what they are trying to do with such a question.\\n"
                    },
                    {
                        "username": "arnabroy10121998",
                        "content": "My solution passed 91/94 test cases...still somewhat fell short just because of alex.....hate u "
                    }
                ]
            },
            {
                "id": 2025468,
                "content": [
                    {
                        "username": "nareshvishram",
                        "content": "Shouldn\\'t be in Easy Section !!\\nShould be in medium at least !!"
                    },
                    {
                        "username": "mutasim77",
                        "content": "hate u alexx"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Poor Alex... \\uD83D\\uDE14"
                    },
                    {
                        "username": "anupamkolay6",
                        "content": "My solution didn\\'t work because of alex."
                    },
                    {
                        "username": "cabbagehao",
                        "content": "From the describtion\\uFF0C I think the follow testcase should be Failed, but it\\'s not:  \\n\\nname = \"alex\"\\ntyped = \"alexs\"\\n\\nHow do you think?"
                    },
                    {
                        "username": "ZANGO_27",
                        "content": "it fails"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would rather tell this fellow to go buy a new keyboard than look at the mistyped word."
                    },
                    {
                        "username": "nicomp42",
                        "content": "Explanation in Example 2 is poorly worded. "
                    },
                    {
                        "username": "archieny",
                        "content": "Others may disagree, and that\\'s fine but I think at least one testcase misrepresents the problem as described. \\n\\nMy current solution (which I acknowledge as a wrong solution for this question obviously, it failed), but the solution it fails on is misrepresentative of the problem as described. \\n\\nThe problem description guarantees that the typed characters will clearly be typed **1 or more times** with **some characters (possibly one) being long pressed.** That, effectively guarantees against characters being **not typed** where they are expected. But this test case, \"kikcxmvzi\" \"kiikcxxmmvvzz\", removes a letter from the end of the typed string.\\n\\nI understand that he **could forget to type a letter**, but this question seems to imply the that all letters are typed, with maybe some typed more than once - not never.\\n\\nMany answer title suggest a two pointer solution, which I intend to begin implementing to see if I can suceed against all given test cases, but I thought this confusion may be worth noting."
                    },
                    {
                        "username": "madpoly",
                        "content": "stupid problem, gave me ptsd. Should be medium!"
                    },
                    {
                        "username": "Kratos50",
                        "content": "Entry level medium problem. \\n\"F\" for all those trying to solve it using hashmap \\nlike all of you, i too am stuck at test cases 77/94 lmao"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Why you overcomplicate your life?\nIt's tagged 'Two Pointers', not 'Hashmap'. Easy and classical case for two pointers..."
                    },
                    {
                        "username": "Django3",
                        "content": "A question with incomplete explanations is not a difficult or easy question, it is a wrong question. I can\\'t understand what they are trying to do with such a question.\\n"
                    },
                    {
                        "username": "arnabroy10121998",
                        "content": "My solution passed 91/94 test cases...still somewhat fell short just because of alex.....hate u "
                    }
                ]
            },
            {
                "id": 1999974,
                "content": [
                    {
                        "username": "nareshvishram",
                        "content": "Shouldn\\'t be in Easy Section !!\\nShould be in medium at least !!"
                    },
                    {
                        "username": "mutasim77",
                        "content": "hate u alexx"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Poor Alex... \\uD83D\\uDE14"
                    },
                    {
                        "username": "anupamkolay6",
                        "content": "My solution didn\\'t work because of alex."
                    },
                    {
                        "username": "cabbagehao",
                        "content": "From the describtion\\uFF0C I think the follow testcase should be Failed, but it\\'s not:  \\n\\nname = \"alex\"\\ntyped = \"alexs\"\\n\\nHow do you think?"
                    },
                    {
                        "username": "ZANGO_27",
                        "content": "it fails"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would rather tell this fellow to go buy a new keyboard than look at the mistyped word."
                    },
                    {
                        "username": "nicomp42",
                        "content": "Explanation in Example 2 is poorly worded. "
                    },
                    {
                        "username": "archieny",
                        "content": "Others may disagree, and that\\'s fine but I think at least one testcase misrepresents the problem as described. \\n\\nMy current solution (which I acknowledge as a wrong solution for this question obviously, it failed), but the solution it fails on is misrepresentative of the problem as described. \\n\\nThe problem description guarantees that the typed characters will clearly be typed **1 or more times** with **some characters (possibly one) being long pressed.** That, effectively guarantees against characters being **not typed** where they are expected. But this test case, \"kikcxmvzi\" \"kiikcxxmmvvzz\", removes a letter from the end of the typed string.\\n\\nI understand that he **could forget to type a letter**, but this question seems to imply the that all letters are typed, with maybe some typed more than once - not never.\\n\\nMany answer title suggest a two pointer solution, which I intend to begin implementing to see if I can suceed against all given test cases, but I thought this confusion may be worth noting."
                    },
                    {
                        "username": "madpoly",
                        "content": "stupid problem, gave me ptsd. Should be medium!"
                    },
                    {
                        "username": "Kratos50",
                        "content": "Entry level medium problem. \\n\"F\" for all those trying to solve it using hashmap \\nlike all of you, i too am stuck at test cases 77/94 lmao"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Why you overcomplicate your life?\nIt's tagged 'Two Pointers', not 'Hashmap'. Easy and classical case for two pointers..."
                    },
                    {
                        "username": "Django3",
                        "content": "A question with incomplete explanations is not a difficult or easy question, it is a wrong question. I can\\'t understand what they are trying to do with such a question.\\n"
                    },
                    {
                        "username": "arnabroy10121998",
                        "content": "My solution passed 91/94 test cases...still somewhat fell short just because of alex.....hate u "
                    }
                ]
            },
            {
                "id": 1569851,
                "content": [
                    {
                        "username": "nareshvishram",
                        "content": "Shouldn\\'t be in Easy Section !!\\nShould be in medium at least !!"
                    },
                    {
                        "username": "mutasim77",
                        "content": "hate u alexx"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Poor Alex... \\uD83D\\uDE14"
                    },
                    {
                        "username": "anupamkolay6",
                        "content": "My solution didn\\'t work because of alex."
                    },
                    {
                        "username": "cabbagehao",
                        "content": "From the describtion\\uFF0C I think the follow testcase should be Failed, but it\\'s not:  \\n\\nname = \"alex\"\\ntyped = \"alexs\"\\n\\nHow do you think?"
                    },
                    {
                        "username": "ZANGO_27",
                        "content": "it fails"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would rather tell this fellow to go buy a new keyboard than look at the mistyped word."
                    },
                    {
                        "username": "nicomp42",
                        "content": "Explanation in Example 2 is poorly worded. "
                    },
                    {
                        "username": "archieny",
                        "content": "Others may disagree, and that\\'s fine but I think at least one testcase misrepresents the problem as described. \\n\\nMy current solution (which I acknowledge as a wrong solution for this question obviously, it failed), but the solution it fails on is misrepresentative of the problem as described. \\n\\nThe problem description guarantees that the typed characters will clearly be typed **1 or more times** with **some characters (possibly one) being long pressed.** That, effectively guarantees against characters being **not typed** where they are expected. But this test case, \"kikcxmvzi\" \"kiikcxxmmvvzz\", removes a letter from the end of the typed string.\\n\\nI understand that he **could forget to type a letter**, but this question seems to imply the that all letters are typed, with maybe some typed more than once - not never.\\n\\nMany answer title suggest a two pointer solution, which I intend to begin implementing to see if I can suceed against all given test cases, but I thought this confusion may be worth noting."
                    },
                    {
                        "username": "madpoly",
                        "content": "stupid problem, gave me ptsd. Should be medium!"
                    },
                    {
                        "username": "Kratos50",
                        "content": "Entry level medium problem. \\n\"F\" for all those trying to solve it using hashmap \\nlike all of you, i too am stuck at test cases 77/94 lmao"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Why you overcomplicate your life?\nIt's tagged 'Two Pointers', not 'Hashmap'. Easy and classical case for two pointers..."
                    },
                    {
                        "username": "Django3",
                        "content": "A question with incomplete explanations is not a difficult or easy question, it is a wrong question. I can\\'t understand what they are trying to do with such a question.\\n"
                    },
                    {
                        "username": "arnabroy10121998",
                        "content": "My solution passed 91/94 test cases...still somewhat fell short just because of alex.....hate u "
                    }
                ]
            },
            {
                "id": 1917078,
                "content": [
                    {
                        "username": "nareshvishram",
                        "content": "Shouldn\\'t be in Easy Section !!\\nShould be in medium at least !!"
                    },
                    {
                        "username": "mutasim77",
                        "content": "hate u alexx"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Poor Alex... \\uD83D\\uDE14"
                    },
                    {
                        "username": "anupamkolay6",
                        "content": "My solution didn\\'t work because of alex."
                    },
                    {
                        "username": "cabbagehao",
                        "content": "From the describtion\\uFF0C I think the follow testcase should be Failed, but it\\'s not:  \\n\\nname = \"alex\"\\ntyped = \"alexs\"\\n\\nHow do you think?"
                    },
                    {
                        "username": "ZANGO_27",
                        "content": "it fails"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would rather tell this fellow to go buy a new keyboard than look at the mistyped word."
                    },
                    {
                        "username": "nicomp42",
                        "content": "Explanation in Example 2 is poorly worded. "
                    },
                    {
                        "username": "archieny",
                        "content": "Others may disagree, and that\\'s fine but I think at least one testcase misrepresents the problem as described. \\n\\nMy current solution (which I acknowledge as a wrong solution for this question obviously, it failed), but the solution it fails on is misrepresentative of the problem as described. \\n\\nThe problem description guarantees that the typed characters will clearly be typed **1 or more times** with **some characters (possibly one) being long pressed.** That, effectively guarantees against characters being **not typed** where they are expected. But this test case, \"kikcxmvzi\" \"kiikcxxmmvvzz\", removes a letter from the end of the typed string.\\n\\nI understand that he **could forget to type a letter**, but this question seems to imply the that all letters are typed, with maybe some typed more than once - not never.\\n\\nMany answer title suggest a two pointer solution, which I intend to begin implementing to see if I can suceed against all given test cases, but I thought this confusion may be worth noting."
                    },
                    {
                        "username": "madpoly",
                        "content": "stupid problem, gave me ptsd. Should be medium!"
                    },
                    {
                        "username": "Kratos50",
                        "content": "Entry level medium problem. \\n\"F\" for all those trying to solve it using hashmap \\nlike all of you, i too am stuck at test cases 77/94 lmao"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Why you overcomplicate your life?\nIt's tagged 'Two Pointers', not 'Hashmap'. Easy and classical case for two pointers..."
                    },
                    {
                        "username": "Django3",
                        "content": "A question with incomplete explanations is not a difficult or easy question, it is a wrong question. I can\\'t understand what they are trying to do with such a question.\\n"
                    },
                    {
                        "username": "arnabroy10121998",
                        "content": "My solution passed 91/94 test cases...still somewhat fell short just because of alex.....hate u "
                    }
                ]
            },
            {
                "id": 1779244,
                "content": [
                    {
                        "username": "nareshvishram",
                        "content": "Shouldn\\'t be in Easy Section !!\\nShould be in medium at least !!"
                    },
                    {
                        "username": "mutasim77",
                        "content": "hate u alexx"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Poor Alex... \\uD83D\\uDE14"
                    },
                    {
                        "username": "anupamkolay6",
                        "content": "My solution didn\\'t work because of alex."
                    },
                    {
                        "username": "cabbagehao",
                        "content": "From the describtion\\uFF0C I think the follow testcase should be Failed, but it\\'s not:  \\n\\nname = \"alex\"\\ntyped = \"alexs\"\\n\\nHow do you think?"
                    },
                    {
                        "username": "ZANGO_27",
                        "content": "it fails"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would rather tell this fellow to go buy a new keyboard than look at the mistyped word."
                    },
                    {
                        "username": "nicomp42",
                        "content": "Explanation in Example 2 is poorly worded. "
                    },
                    {
                        "username": "archieny",
                        "content": "Others may disagree, and that\\'s fine but I think at least one testcase misrepresents the problem as described. \\n\\nMy current solution (which I acknowledge as a wrong solution for this question obviously, it failed), but the solution it fails on is misrepresentative of the problem as described. \\n\\nThe problem description guarantees that the typed characters will clearly be typed **1 or more times** with **some characters (possibly one) being long pressed.** That, effectively guarantees against characters being **not typed** where they are expected. But this test case, \"kikcxmvzi\" \"kiikcxxmmvvzz\", removes a letter from the end of the typed string.\\n\\nI understand that he **could forget to type a letter**, but this question seems to imply the that all letters are typed, with maybe some typed more than once - not never.\\n\\nMany answer title suggest a two pointer solution, which I intend to begin implementing to see if I can suceed against all given test cases, but I thought this confusion may be worth noting."
                    },
                    {
                        "username": "madpoly",
                        "content": "stupid problem, gave me ptsd. Should be medium!"
                    },
                    {
                        "username": "Kratos50",
                        "content": "Entry level medium problem. \\n\"F\" for all those trying to solve it using hashmap \\nlike all of you, i too am stuck at test cases 77/94 lmao"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Why you overcomplicate your life?\nIt's tagged 'Two Pointers', not 'Hashmap'. Easy and classical case for two pointers..."
                    },
                    {
                        "username": "Django3",
                        "content": "A question with incomplete explanations is not a difficult or easy question, it is a wrong question. I can\\'t understand what they are trying to do with such a question.\\n"
                    },
                    {
                        "username": "arnabroy10121998",
                        "content": "My solution passed 91/94 test cases...still somewhat fell short just because of alex.....hate u "
                    }
                ]
            },
            {
                "id": 2073628,
                "content": [
                    {
                        "username": "nareshvishram",
                        "content": "Shouldn\\'t be in Easy Section !!\\nShould be in medium at least !!"
                    },
                    {
                        "username": "mutasim77",
                        "content": "hate u alexx"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Poor Alex... \\uD83D\\uDE14"
                    },
                    {
                        "username": "anupamkolay6",
                        "content": "My solution didn\\'t work because of alex."
                    },
                    {
                        "username": "cabbagehao",
                        "content": "From the describtion\\uFF0C I think the follow testcase should be Failed, but it\\'s not:  \\n\\nname = \"alex\"\\ntyped = \"alexs\"\\n\\nHow do you think?"
                    },
                    {
                        "username": "ZANGO_27",
                        "content": "it fails"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would rather tell this fellow to go buy a new keyboard than look at the mistyped word."
                    },
                    {
                        "username": "nicomp42",
                        "content": "Explanation in Example 2 is poorly worded. "
                    },
                    {
                        "username": "archieny",
                        "content": "Others may disagree, and that\\'s fine but I think at least one testcase misrepresents the problem as described. \\n\\nMy current solution (which I acknowledge as a wrong solution for this question obviously, it failed), but the solution it fails on is misrepresentative of the problem as described. \\n\\nThe problem description guarantees that the typed characters will clearly be typed **1 or more times** with **some characters (possibly one) being long pressed.** That, effectively guarantees against characters being **not typed** where they are expected. But this test case, \"kikcxmvzi\" \"kiikcxxmmvvzz\", removes a letter from the end of the typed string.\\n\\nI understand that he **could forget to type a letter**, but this question seems to imply the that all letters are typed, with maybe some typed more than once - not never.\\n\\nMany answer title suggest a two pointer solution, which I intend to begin implementing to see if I can suceed against all given test cases, but I thought this confusion may be worth noting."
                    },
                    {
                        "username": "madpoly",
                        "content": "stupid problem, gave me ptsd. Should be medium!"
                    },
                    {
                        "username": "Kratos50",
                        "content": "Entry level medium problem. \\n\"F\" for all those trying to solve it using hashmap \\nlike all of you, i too am stuck at test cases 77/94 lmao"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Why you overcomplicate your life?\nIt's tagged 'Two Pointers', not 'Hashmap'. Easy and classical case for two pointers..."
                    },
                    {
                        "username": "Django3",
                        "content": "A question with incomplete explanations is not a difficult or easy question, it is a wrong question. I can\\'t understand what they are trying to do with such a question.\\n"
                    },
                    {
                        "username": "arnabroy10121998",
                        "content": "My solution passed 91/94 test cases...still somewhat fell short just because of alex.....hate u "
                    }
                ]
            },
            {
                "id": 2070071,
                "content": [
                    {
                        "username": "nareshvishram",
                        "content": "Shouldn\\'t be in Easy Section !!\\nShould be in medium at least !!"
                    },
                    {
                        "username": "mutasim77",
                        "content": "hate u alexx"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Poor Alex... \\uD83D\\uDE14"
                    },
                    {
                        "username": "anupamkolay6",
                        "content": "My solution didn\\'t work because of alex."
                    },
                    {
                        "username": "cabbagehao",
                        "content": "From the describtion\\uFF0C I think the follow testcase should be Failed, but it\\'s not:  \\n\\nname = \"alex\"\\ntyped = \"alexs\"\\n\\nHow do you think?"
                    },
                    {
                        "username": "ZANGO_27",
                        "content": "it fails"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would rather tell this fellow to go buy a new keyboard than look at the mistyped word."
                    },
                    {
                        "username": "nicomp42",
                        "content": "Explanation in Example 2 is poorly worded. "
                    },
                    {
                        "username": "archieny",
                        "content": "Others may disagree, and that\\'s fine but I think at least one testcase misrepresents the problem as described. \\n\\nMy current solution (which I acknowledge as a wrong solution for this question obviously, it failed), but the solution it fails on is misrepresentative of the problem as described. \\n\\nThe problem description guarantees that the typed characters will clearly be typed **1 or more times** with **some characters (possibly one) being long pressed.** That, effectively guarantees against characters being **not typed** where they are expected. But this test case, \"kikcxmvzi\" \"kiikcxxmmvvzz\", removes a letter from the end of the typed string.\\n\\nI understand that he **could forget to type a letter**, but this question seems to imply the that all letters are typed, with maybe some typed more than once - not never.\\n\\nMany answer title suggest a two pointer solution, which I intend to begin implementing to see if I can suceed against all given test cases, but I thought this confusion may be worth noting."
                    },
                    {
                        "username": "madpoly",
                        "content": "stupid problem, gave me ptsd. Should be medium!"
                    },
                    {
                        "username": "Kratos50",
                        "content": "Entry level medium problem. \\n\"F\" for all those trying to solve it using hashmap \\nlike all of you, i too am stuck at test cases 77/94 lmao"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Why you overcomplicate your life?\nIt's tagged 'Two Pointers', not 'Hashmap'. Easy and classical case for two pointers..."
                    },
                    {
                        "username": "Django3",
                        "content": "A question with incomplete explanations is not a difficult or easy question, it is a wrong question. I can\\'t understand what they are trying to do with such a question.\\n"
                    },
                    {
                        "username": "arnabroy10121998",
                        "content": "My solution passed 91/94 test cases...still somewhat fell short just because of alex.....hate u "
                    }
                ]
            },
            {
                "id": 2067643,
                "content": [
                    {
                        "username": "rtrain",
                        "content": "Why is case two false im confused"
                    },
                    {
                        "username": "raaven_4321",
                        "content": "name =\\n\"alex\"\\ntyped =\\n\"aaleexa\"\\n\\nwhy the expected output is false?"
                    },
                    {
                        "username": "Kartikey_Bartwal",
                        "content": "this had too many edge cases man!"
                    },
                    {
                        "username": "Manohar_001",
                        "content": "Hey Leetcode this is not at all an EASY question it should be a MEDIUM one."
                    },
                    {
                        "username": "nitishrawat2002",
                        "content": "why it is failing on the  following test case ?\\nname=\"pyplrz\"\\ntyped=\"ppyypllr\"\\n\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int m=name.size();\\n        int n=typed.size();\\n        if(name.length()>typed.length()) return false;\\n        \\n        int i=0,j=0;\\n        while(i<m && j<n)\\n        {\\n            if(name[i]==typed[j])\\n            {\\n                i++;\\n                j++;\\n            }\\n            else if(i>0 && name[i-1]==typed[j])\\n            {\\n                j++;\\n            }\\n            else\\n\\n            return false;\\n        }\\n        \\n        while(j<n)\\n        {\\n            if(name[i-1]!=typed[j])\\n            return false;\\n            j++;\\n        }\\n        return true;\\n    }\\n};\\n   @[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "kasukurthibhargav",
                        "content": "while(j<n)\\n    {\\n        if(name[i-1]!=typed[j])\\n        return false;\\n        j++;\\n    }\\n    return true;\\n}\\n\\n\\nreplace this snippet to \\nif( i == name.length()){\\n            return true;\\n        }\\n        return true;"
                    },
                    {
                        "username": "shashank_maikhuri",
                        "content": "You could just add a check if(i<m) after the while loop is exited and if that\\'s the case this means that there are still some characters in name which were not in typed hence it should return false.\\n\\nif(i<m){return false;}"
                    },
                    {
                        "username": "kishor_123",
                        "content": "put in 2nd while(j<n || i<n) because \"pyplrz\" \"i\" is on z and \"i\" still not completed just trace it you know"
                    },
                    {
                        "username": "IOseph",
                        "content": "One of the more simple questions in the category easy... As a hint, if you store the previous state (i.e. character) you can 'skip' it when you traverse `typed` and only increase the index for `typed` (and not `name`). Thanks for the interesting problem, especially the care (housekeeping) for the extra check for any tailing characters that could match the stored previous state."
                    },
                    {
                        "username": "ddvuser",
                        "content": "name = \"alex\" and typed = \"aaleexa\", why testcase expecting it to be False?"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Simply because of the last 'a' in ``typed`` which is not a duplicate of the last 'x' in ``name``."
                    },
                    {
                        "username": "c0rt3s",
                        "content": "Even if you are stuck after applying two pointers, then you see my submission."
                    },
                    {
                        "username": "Msey",
                        "content": "this soulution is really pain in the.. head\\none of the most difficult I met at easy category"
                    },
                    {
                        "username": "arrowmaster1252",
                        "content": "All hail Regex"
                    }
                ]
            },
            {
                "id": 2067308,
                "content": [
                    {
                        "username": "rtrain",
                        "content": "Why is case two false im confused"
                    },
                    {
                        "username": "raaven_4321",
                        "content": "name =\\n\"alex\"\\ntyped =\\n\"aaleexa\"\\n\\nwhy the expected output is false?"
                    },
                    {
                        "username": "Kartikey_Bartwal",
                        "content": "this had too many edge cases man!"
                    },
                    {
                        "username": "Manohar_001",
                        "content": "Hey Leetcode this is not at all an EASY question it should be a MEDIUM one."
                    },
                    {
                        "username": "nitishrawat2002",
                        "content": "why it is failing on the  following test case ?\\nname=\"pyplrz\"\\ntyped=\"ppyypllr\"\\n\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int m=name.size();\\n        int n=typed.size();\\n        if(name.length()>typed.length()) return false;\\n        \\n        int i=0,j=0;\\n        while(i<m && j<n)\\n        {\\n            if(name[i]==typed[j])\\n            {\\n                i++;\\n                j++;\\n            }\\n            else if(i>0 && name[i-1]==typed[j])\\n            {\\n                j++;\\n            }\\n            else\\n\\n            return false;\\n        }\\n        \\n        while(j<n)\\n        {\\n            if(name[i-1]!=typed[j])\\n            return false;\\n            j++;\\n        }\\n        return true;\\n    }\\n};\\n   @[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "kasukurthibhargav",
                        "content": "while(j<n)\\n    {\\n        if(name[i-1]!=typed[j])\\n        return false;\\n        j++;\\n    }\\n    return true;\\n}\\n\\n\\nreplace this snippet to \\nif( i == name.length()){\\n            return true;\\n        }\\n        return true;"
                    },
                    {
                        "username": "shashank_maikhuri",
                        "content": "You could just add a check if(i<m) after the while loop is exited and if that\\'s the case this means that there are still some characters in name which were not in typed hence it should return false.\\n\\nif(i<m){return false;}"
                    },
                    {
                        "username": "kishor_123",
                        "content": "put in 2nd while(j<n || i<n) because \"pyplrz\" \"i\" is on z and \"i\" still not completed just trace it you know"
                    },
                    {
                        "username": "IOseph",
                        "content": "One of the more simple questions in the category easy... As a hint, if you store the previous state (i.e. character) you can 'skip' it when you traverse `typed` and only increase the index for `typed` (and not `name`). Thanks for the interesting problem, especially the care (housekeeping) for the extra check for any tailing characters that could match the stored previous state."
                    },
                    {
                        "username": "ddvuser",
                        "content": "name = \"alex\" and typed = \"aaleexa\", why testcase expecting it to be False?"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Simply because of the last 'a' in ``typed`` which is not a duplicate of the last 'x' in ``name``."
                    },
                    {
                        "username": "c0rt3s",
                        "content": "Even if you are stuck after applying two pointers, then you see my submission."
                    },
                    {
                        "username": "Msey",
                        "content": "this soulution is really pain in the.. head\\none of the most difficult I met at easy category"
                    },
                    {
                        "username": "arrowmaster1252",
                        "content": "All hail Regex"
                    }
                ]
            },
            {
                "id": 1989950,
                "content": [
                    {
                        "username": "rtrain",
                        "content": "Why is case two false im confused"
                    },
                    {
                        "username": "raaven_4321",
                        "content": "name =\\n\"alex\"\\ntyped =\\n\"aaleexa\"\\n\\nwhy the expected output is false?"
                    },
                    {
                        "username": "Kartikey_Bartwal",
                        "content": "this had too many edge cases man!"
                    },
                    {
                        "username": "Manohar_001",
                        "content": "Hey Leetcode this is not at all an EASY question it should be a MEDIUM one."
                    },
                    {
                        "username": "nitishrawat2002",
                        "content": "why it is failing on the  following test case ?\\nname=\"pyplrz\"\\ntyped=\"ppyypllr\"\\n\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int m=name.size();\\n        int n=typed.size();\\n        if(name.length()>typed.length()) return false;\\n        \\n        int i=0,j=0;\\n        while(i<m && j<n)\\n        {\\n            if(name[i]==typed[j])\\n            {\\n                i++;\\n                j++;\\n            }\\n            else if(i>0 && name[i-1]==typed[j])\\n            {\\n                j++;\\n            }\\n            else\\n\\n            return false;\\n        }\\n        \\n        while(j<n)\\n        {\\n            if(name[i-1]!=typed[j])\\n            return false;\\n            j++;\\n        }\\n        return true;\\n    }\\n};\\n   @[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "kasukurthibhargav",
                        "content": "while(j<n)\\n    {\\n        if(name[i-1]!=typed[j])\\n        return false;\\n        j++;\\n    }\\n    return true;\\n}\\n\\n\\nreplace this snippet to \\nif( i == name.length()){\\n            return true;\\n        }\\n        return true;"
                    },
                    {
                        "username": "shashank_maikhuri",
                        "content": "You could just add a check if(i<m) after the while loop is exited and if that\\'s the case this means that there are still some characters in name which were not in typed hence it should return false.\\n\\nif(i<m){return false;}"
                    },
                    {
                        "username": "kishor_123",
                        "content": "put in 2nd while(j<n || i<n) because \"pyplrz\" \"i\" is on z and \"i\" still not completed just trace it you know"
                    },
                    {
                        "username": "IOseph",
                        "content": "One of the more simple questions in the category easy... As a hint, if you store the previous state (i.e. character) you can 'skip' it when you traverse `typed` and only increase the index for `typed` (and not `name`). Thanks for the interesting problem, especially the care (housekeeping) for the extra check for any tailing characters that could match the stored previous state."
                    },
                    {
                        "username": "ddvuser",
                        "content": "name = \"alex\" and typed = \"aaleexa\", why testcase expecting it to be False?"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Simply because of the last 'a' in ``typed`` which is not a duplicate of the last 'x' in ``name``."
                    },
                    {
                        "username": "c0rt3s",
                        "content": "Even if you are stuck after applying two pointers, then you see my submission."
                    },
                    {
                        "username": "Msey",
                        "content": "this soulution is really pain in the.. head\\none of the most difficult I met at easy category"
                    },
                    {
                        "username": "arrowmaster1252",
                        "content": "All hail Regex"
                    }
                ]
            },
            {
                "id": 1857370,
                "content": [
                    {
                        "username": "rtrain",
                        "content": "Why is case two false im confused"
                    },
                    {
                        "username": "raaven_4321",
                        "content": "name =\\n\"alex\"\\ntyped =\\n\"aaleexa\"\\n\\nwhy the expected output is false?"
                    },
                    {
                        "username": "Kartikey_Bartwal",
                        "content": "this had too many edge cases man!"
                    },
                    {
                        "username": "Manohar_001",
                        "content": "Hey Leetcode this is not at all an EASY question it should be a MEDIUM one."
                    },
                    {
                        "username": "nitishrawat2002",
                        "content": "why it is failing on the  following test case ?\\nname=\"pyplrz\"\\ntyped=\"ppyypllr\"\\n\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int m=name.size();\\n        int n=typed.size();\\n        if(name.length()>typed.length()) return false;\\n        \\n        int i=0,j=0;\\n        while(i<m && j<n)\\n        {\\n            if(name[i]==typed[j])\\n            {\\n                i++;\\n                j++;\\n            }\\n            else if(i>0 && name[i-1]==typed[j])\\n            {\\n                j++;\\n            }\\n            else\\n\\n            return false;\\n        }\\n        \\n        while(j<n)\\n        {\\n            if(name[i-1]!=typed[j])\\n            return false;\\n            j++;\\n        }\\n        return true;\\n    }\\n};\\n   @[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "kasukurthibhargav",
                        "content": "while(j<n)\\n    {\\n        if(name[i-1]!=typed[j])\\n        return false;\\n        j++;\\n    }\\n    return true;\\n}\\n\\n\\nreplace this snippet to \\nif( i == name.length()){\\n            return true;\\n        }\\n        return true;"
                    },
                    {
                        "username": "shashank_maikhuri",
                        "content": "You could just add a check if(i<m) after the while loop is exited and if that\\'s the case this means that there are still some characters in name which were not in typed hence it should return false.\\n\\nif(i<m){return false;}"
                    },
                    {
                        "username": "kishor_123",
                        "content": "put in 2nd while(j<n || i<n) because \"pyplrz\" \"i\" is on z and \"i\" still not completed just trace it you know"
                    },
                    {
                        "username": "IOseph",
                        "content": "One of the more simple questions in the category easy... As a hint, if you store the previous state (i.e. character) you can 'skip' it when you traverse `typed` and only increase the index for `typed` (and not `name`). Thanks for the interesting problem, especially the care (housekeeping) for the extra check for any tailing characters that could match the stored previous state."
                    },
                    {
                        "username": "ddvuser",
                        "content": "name = \"alex\" and typed = \"aaleexa\", why testcase expecting it to be False?"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Simply because of the last 'a' in ``typed`` which is not a duplicate of the last 'x' in ``name``."
                    },
                    {
                        "username": "c0rt3s",
                        "content": "Even if you are stuck after applying two pointers, then you see my submission."
                    },
                    {
                        "username": "Msey",
                        "content": "this soulution is really pain in the.. head\\none of the most difficult I met at easy category"
                    },
                    {
                        "username": "arrowmaster1252",
                        "content": "All hail Regex"
                    }
                ]
            },
            {
                "id": 1832951,
                "content": [
                    {
                        "username": "rtrain",
                        "content": "Why is case two false im confused"
                    },
                    {
                        "username": "raaven_4321",
                        "content": "name =\\n\"alex\"\\ntyped =\\n\"aaleexa\"\\n\\nwhy the expected output is false?"
                    },
                    {
                        "username": "Kartikey_Bartwal",
                        "content": "this had too many edge cases man!"
                    },
                    {
                        "username": "Manohar_001",
                        "content": "Hey Leetcode this is not at all an EASY question it should be a MEDIUM one."
                    },
                    {
                        "username": "nitishrawat2002",
                        "content": "why it is failing on the  following test case ?\\nname=\"pyplrz\"\\ntyped=\"ppyypllr\"\\n\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int m=name.size();\\n        int n=typed.size();\\n        if(name.length()>typed.length()) return false;\\n        \\n        int i=0,j=0;\\n        while(i<m && j<n)\\n        {\\n            if(name[i]==typed[j])\\n            {\\n                i++;\\n                j++;\\n            }\\n            else if(i>0 && name[i-1]==typed[j])\\n            {\\n                j++;\\n            }\\n            else\\n\\n            return false;\\n        }\\n        \\n        while(j<n)\\n        {\\n            if(name[i-1]!=typed[j])\\n            return false;\\n            j++;\\n        }\\n        return true;\\n    }\\n};\\n   @[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "kasukurthibhargav",
                        "content": "while(j<n)\\n    {\\n        if(name[i-1]!=typed[j])\\n        return false;\\n        j++;\\n    }\\n    return true;\\n}\\n\\n\\nreplace this snippet to \\nif( i == name.length()){\\n            return true;\\n        }\\n        return true;"
                    },
                    {
                        "username": "shashank_maikhuri",
                        "content": "You could just add a check if(i<m) after the while loop is exited and if that\\'s the case this means that there are still some characters in name which were not in typed hence it should return false.\\n\\nif(i<m){return false;}"
                    },
                    {
                        "username": "kishor_123",
                        "content": "put in 2nd while(j<n || i<n) because \"pyplrz\" \"i\" is on z and \"i\" still not completed just trace it you know"
                    },
                    {
                        "username": "IOseph",
                        "content": "One of the more simple questions in the category easy... As a hint, if you store the previous state (i.e. character) you can 'skip' it when you traverse `typed` and only increase the index for `typed` (and not `name`). Thanks for the interesting problem, especially the care (housekeeping) for the extra check for any tailing characters that could match the stored previous state."
                    },
                    {
                        "username": "ddvuser",
                        "content": "name = \"alex\" and typed = \"aaleexa\", why testcase expecting it to be False?"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Simply because of the last 'a' in ``typed`` which is not a duplicate of the last 'x' in ``name``."
                    },
                    {
                        "username": "c0rt3s",
                        "content": "Even if you are stuck after applying two pointers, then you see my submission."
                    },
                    {
                        "username": "Msey",
                        "content": "this soulution is really pain in the.. head\\none of the most difficult I met at easy category"
                    },
                    {
                        "username": "arrowmaster1252",
                        "content": "All hail Regex"
                    }
                ]
            },
            {
                "id": 1810042,
                "content": [
                    {
                        "username": "rtrain",
                        "content": "Why is case two false im confused"
                    },
                    {
                        "username": "raaven_4321",
                        "content": "name =\\n\"alex\"\\ntyped =\\n\"aaleexa\"\\n\\nwhy the expected output is false?"
                    },
                    {
                        "username": "Kartikey_Bartwal",
                        "content": "this had too many edge cases man!"
                    },
                    {
                        "username": "Manohar_001",
                        "content": "Hey Leetcode this is not at all an EASY question it should be a MEDIUM one."
                    },
                    {
                        "username": "nitishrawat2002",
                        "content": "why it is failing on the  following test case ?\\nname=\"pyplrz\"\\ntyped=\"ppyypllr\"\\n\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int m=name.size();\\n        int n=typed.size();\\n        if(name.length()>typed.length()) return false;\\n        \\n        int i=0,j=0;\\n        while(i<m && j<n)\\n        {\\n            if(name[i]==typed[j])\\n            {\\n                i++;\\n                j++;\\n            }\\n            else if(i>0 && name[i-1]==typed[j])\\n            {\\n                j++;\\n            }\\n            else\\n\\n            return false;\\n        }\\n        \\n        while(j<n)\\n        {\\n            if(name[i-1]!=typed[j])\\n            return false;\\n            j++;\\n        }\\n        return true;\\n    }\\n};\\n   @[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "kasukurthibhargav",
                        "content": "while(j<n)\\n    {\\n        if(name[i-1]!=typed[j])\\n        return false;\\n        j++;\\n    }\\n    return true;\\n}\\n\\n\\nreplace this snippet to \\nif( i == name.length()){\\n            return true;\\n        }\\n        return true;"
                    },
                    {
                        "username": "shashank_maikhuri",
                        "content": "You could just add a check if(i<m) after the while loop is exited and if that\\'s the case this means that there are still some characters in name which were not in typed hence it should return false.\\n\\nif(i<m){return false;}"
                    },
                    {
                        "username": "kishor_123",
                        "content": "put in 2nd while(j<n || i<n) because \"pyplrz\" \"i\" is on z and \"i\" still not completed just trace it you know"
                    },
                    {
                        "username": "IOseph",
                        "content": "One of the more simple questions in the category easy... As a hint, if you store the previous state (i.e. character) you can 'skip' it when you traverse `typed` and only increase the index for `typed` (and not `name`). Thanks for the interesting problem, especially the care (housekeeping) for the extra check for any tailing characters that could match the stored previous state."
                    },
                    {
                        "username": "ddvuser",
                        "content": "name = \"alex\" and typed = \"aaleexa\", why testcase expecting it to be False?"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Simply because of the last 'a' in ``typed`` which is not a duplicate of the last 'x' in ``name``."
                    },
                    {
                        "username": "c0rt3s",
                        "content": "Even if you are stuck after applying two pointers, then you see my submission."
                    },
                    {
                        "username": "Msey",
                        "content": "this soulution is really pain in the.. head\\none of the most difficult I met at easy category"
                    },
                    {
                        "username": "arrowmaster1252",
                        "content": "All hail Regex"
                    }
                ]
            },
            {
                "id": 1769635,
                "content": [
                    {
                        "username": "rtrain",
                        "content": "Why is case two false im confused"
                    },
                    {
                        "username": "raaven_4321",
                        "content": "name =\\n\"alex\"\\ntyped =\\n\"aaleexa\"\\n\\nwhy the expected output is false?"
                    },
                    {
                        "username": "Kartikey_Bartwal",
                        "content": "this had too many edge cases man!"
                    },
                    {
                        "username": "Manohar_001",
                        "content": "Hey Leetcode this is not at all an EASY question it should be a MEDIUM one."
                    },
                    {
                        "username": "nitishrawat2002",
                        "content": "why it is failing on the  following test case ?\\nname=\"pyplrz\"\\ntyped=\"ppyypllr\"\\n\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int m=name.size();\\n        int n=typed.size();\\n        if(name.length()>typed.length()) return false;\\n        \\n        int i=0,j=0;\\n        while(i<m && j<n)\\n        {\\n            if(name[i]==typed[j])\\n            {\\n                i++;\\n                j++;\\n            }\\n            else if(i>0 && name[i-1]==typed[j])\\n            {\\n                j++;\\n            }\\n            else\\n\\n            return false;\\n        }\\n        \\n        while(j<n)\\n        {\\n            if(name[i-1]!=typed[j])\\n            return false;\\n            j++;\\n        }\\n        return true;\\n    }\\n};\\n   @[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "kasukurthibhargav",
                        "content": "while(j<n)\\n    {\\n        if(name[i-1]!=typed[j])\\n        return false;\\n        j++;\\n    }\\n    return true;\\n}\\n\\n\\nreplace this snippet to \\nif( i == name.length()){\\n            return true;\\n        }\\n        return true;"
                    },
                    {
                        "username": "shashank_maikhuri",
                        "content": "You could just add a check if(i<m) after the while loop is exited and if that\\'s the case this means that there are still some characters in name which were not in typed hence it should return false.\\n\\nif(i<m){return false;}"
                    },
                    {
                        "username": "kishor_123",
                        "content": "put in 2nd while(j<n || i<n) because \"pyplrz\" \"i\" is on z and \"i\" still not completed just trace it you know"
                    },
                    {
                        "username": "IOseph",
                        "content": "One of the more simple questions in the category easy... As a hint, if you store the previous state (i.e. character) you can 'skip' it when you traverse `typed` and only increase the index for `typed` (and not `name`). Thanks for the interesting problem, especially the care (housekeeping) for the extra check for any tailing characters that could match the stored previous state."
                    },
                    {
                        "username": "ddvuser",
                        "content": "name = \"alex\" and typed = \"aaleexa\", why testcase expecting it to be False?"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Simply because of the last 'a' in ``typed`` which is not a duplicate of the last 'x' in ``name``."
                    },
                    {
                        "username": "c0rt3s",
                        "content": "Even if you are stuck after applying two pointers, then you see my submission."
                    },
                    {
                        "username": "Msey",
                        "content": "this soulution is really pain in the.. head\\none of the most difficult I met at easy category"
                    },
                    {
                        "username": "arrowmaster1252",
                        "content": "All hail Regex"
                    }
                ]
            },
            {
                "id": 1709483,
                "content": [
                    {
                        "username": "rtrain",
                        "content": "Why is case two false im confused"
                    },
                    {
                        "username": "raaven_4321",
                        "content": "name =\\n\"alex\"\\ntyped =\\n\"aaleexa\"\\n\\nwhy the expected output is false?"
                    },
                    {
                        "username": "Kartikey_Bartwal",
                        "content": "this had too many edge cases man!"
                    },
                    {
                        "username": "Manohar_001",
                        "content": "Hey Leetcode this is not at all an EASY question it should be a MEDIUM one."
                    },
                    {
                        "username": "nitishrawat2002",
                        "content": "why it is failing on the  following test case ?\\nname=\"pyplrz\"\\ntyped=\"ppyypllr\"\\n\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int m=name.size();\\n        int n=typed.size();\\n        if(name.length()>typed.length()) return false;\\n        \\n        int i=0,j=0;\\n        while(i<m && j<n)\\n        {\\n            if(name[i]==typed[j])\\n            {\\n                i++;\\n                j++;\\n            }\\n            else if(i>0 && name[i-1]==typed[j])\\n            {\\n                j++;\\n            }\\n            else\\n\\n            return false;\\n        }\\n        \\n        while(j<n)\\n        {\\n            if(name[i-1]!=typed[j])\\n            return false;\\n            j++;\\n        }\\n        return true;\\n    }\\n};\\n   @[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "kasukurthibhargav",
                        "content": "while(j<n)\\n    {\\n        if(name[i-1]!=typed[j])\\n        return false;\\n        j++;\\n    }\\n    return true;\\n}\\n\\n\\nreplace this snippet to \\nif( i == name.length()){\\n            return true;\\n        }\\n        return true;"
                    },
                    {
                        "username": "shashank_maikhuri",
                        "content": "You could just add a check if(i<m) after the while loop is exited and if that\\'s the case this means that there are still some characters in name which were not in typed hence it should return false.\\n\\nif(i<m){return false;}"
                    },
                    {
                        "username": "kishor_123",
                        "content": "put in 2nd while(j<n || i<n) because \"pyplrz\" \"i\" is on z and \"i\" still not completed just trace it you know"
                    },
                    {
                        "username": "IOseph",
                        "content": "One of the more simple questions in the category easy... As a hint, if you store the previous state (i.e. character) you can 'skip' it when you traverse `typed` and only increase the index for `typed` (and not `name`). Thanks for the interesting problem, especially the care (housekeeping) for the extra check for any tailing characters that could match the stored previous state."
                    },
                    {
                        "username": "ddvuser",
                        "content": "name = \"alex\" and typed = \"aaleexa\", why testcase expecting it to be False?"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Simply because of the last 'a' in ``typed`` which is not a duplicate of the last 'x' in ``name``."
                    },
                    {
                        "username": "c0rt3s",
                        "content": "Even if you are stuck after applying two pointers, then you see my submission."
                    },
                    {
                        "username": "Msey",
                        "content": "this soulution is really pain in the.. head\\none of the most difficult I met at easy category"
                    },
                    {
                        "username": "arrowmaster1252",
                        "content": "All hail Regex"
                    }
                ]
            },
            {
                "id": 1692603,
                "content": [
                    {
                        "username": "rtrain",
                        "content": "Why is case two false im confused"
                    },
                    {
                        "username": "raaven_4321",
                        "content": "name =\\n\"alex\"\\ntyped =\\n\"aaleexa\"\\n\\nwhy the expected output is false?"
                    },
                    {
                        "username": "Kartikey_Bartwal",
                        "content": "this had too many edge cases man!"
                    },
                    {
                        "username": "Manohar_001",
                        "content": "Hey Leetcode this is not at all an EASY question it should be a MEDIUM one."
                    },
                    {
                        "username": "nitishrawat2002",
                        "content": "why it is failing on the  following test case ?\\nname=\"pyplrz\"\\ntyped=\"ppyypllr\"\\n\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int m=name.size();\\n        int n=typed.size();\\n        if(name.length()>typed.length()) return false;\\n        \\n        int i=0,j=0;\\n        while(i<m && j<n)\\n        {\\n            if(name[i]==typed[j])\\n            {\\n                i++;\\n                j++;\\n            }\\n            else if(i>0 && name[i-1]==typed[j])\\n            {\\n                j++;\\n            }\\n            else\\n\\n            return false;\\n        }\\n        \\n        while(j<n)\\n        {\\n            if(name[i-1]!=typed[j])\\n            return false;\\n            j++;\\n        }\\n        return true;\\n    }\\n};\\n   @[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "kasukurthibhargav",
                        "content": "while(j<n)\\n    {\\n        if(name[i-1]!=typed[j])\\n        return false;\\n        j++;\\n    }\\n    return true;\\n}\\n\\n\\nreplace this snippet to \\nif( i == name.length()){\\n            return true;\\n        }\\n        return true;"
                    },
                    {
                        "username": "shashank_maikhuri",
                        "content": "You could just add a check if(i<m) after the while loop is exited and if that\\'s the case this means that there are still some characters in name which were not in typed hence it should return false.\\n\\nif(i<m){return false;}"
                    },
                    {
                        "username": "kishor_123",
                        "content": "put in 2nd while(j<n || i<n) because \"pyplrz\" \"i\" is on z and \"i\" still not completed just trace it you know"
                    },
                    {
                        "username": "IOseph",
                        "content": "One of the more simple questions in the category easy... As a hint, if you store the previous state (i.e. character) you can 'skip' it when you traverse `typed` and only increase the index for `typed` (and not `name`). Thanks for the interesting problem, especially the care (housekeeping) for the extra check for any tailing characters that could match the stored previous state."
                    },
                    {
                        "username": "ddvuser",
                        "content": "name = \"alex\" and typed = \"aaleexa\", why testcase expecting it to be False?"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Simply because of the last 'a' in ``typed`` which is not a duplicate of the last 'x' in ``name``."
                    },
                    {
                        "username": "c0rt3s",
                        "content": "Even if you are stuck after applying two pointers, then you see my submission."
                    },
                    {
                        "username": "Msey",
                        "content": "this soulution is really pain in the.. head\\none of the most difficult I met at easy category"
                    },
                    {
                        "username": "arrowmaster1252",
                        "content": "All hail Regex"
                    }
                ]
            },
            {
                "id": 1671035,
                "content": [
                    {
                        "username": "rtrain",
                        "content": "Why is case two false im confused"
                    },
                    {
                        "username": "raaven_4321",
                        "content": "name =\\n\"alex\"\\ntyped =\\n\"aaleexa\"\\n\\nwhy the expected output is false?"
                    },
                    {
                        "username": "Kartikey_Bartwal",
                        "content": "this had too many edge cases man!"
                    },
                    {
                        "username": "Manohar_001",
                        "content": "Hey Leetcode this is not at all an EASY question it should be a MEDIUM one."
                    },
                    {
                        "username": "nitishrawat2002",
                        "content": "why it is failing on the  following test case ?\\nname=\"pyplrz\"\\ntyped=\"ppyypllr\"\\n\\nclass Solution {\\npublic:\\n    bool isLongPressedName(string name, string typed) {\\n        int m=name.size();\\n        int n=typed.size();\\n        if(name.length()>typed.length()) return false;\\n        \\n        int i=0,j=0;\\n        while(i<m && j<n)\\n        {\\n            if(name[i]==typed[j])\\n            {\\n                i++;\\n                j++;\\n            }\\n            else if(i>0 && name[i-1]==typed[j])\\n            {\\n                j++;\\n            }\\n            else\\n\\n            return false;\\n        }\\n        \\n        while(j<n)\\n        {\\n            if(name[i-1]!=typed[j])\\n            return false;\\n            j++;\\n        }\\n        return true;\\n    }\\n};\\n   @[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "kasukurthibhargav",
                        "content": "while(j<n)\\n    {\\n        if(name[i-1]!=typed[j])\\n        return false;\\n        j++;\\n    }\\n    return true;\\n}\\n\\n\\nreplace this snippet to \\nif( i == name.length()){\\n            return true;\\n        }\\n        return true;"
                    },
                    {
                        "username": "shashank_maikhuri",
                        "content": "You could just add a check if(i<m) after the while loop is exited and if that\\'s the case this means that there are still some characters in name which were not in typed hence it should return false.\\n\\nif(i<m){return false;}"
                    },
                    {
                        "username": "kishor_123",
                        "content": "put in 2nd while(j<n || i<n) because \"pyplrz\" \"i\" is on z and \"i\" still not completed just trace it you know"
                    },
                    {
                        "username": "IOseph",
                        "content": "One of the more simple questions in the category easy... As a hint, if you store the previous state (i.e. character) you can 'skip' it when you traverse `typed` and only increase the index for `typed` (and not `name`). Thanks for the interesting problem, especially the care (housekeeping) for the extra check for any tailing characters that could match the stored previous state."
                    },
                    {
                        "username": "ddvuser",
                        "content": "name = \"alex\" and typed = \"aaleexa\", why testcase expecting it to be False?"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Simply because of the last 'a' in ``typed`` which is not a duplicate of the last 'x' in ``name``."
                    },
                    {
                        "username": "c0rt3s",
                        "content": "Even if you are stuck after applying two pointers, then you see my submission."
                    },
                    {
                        "username": "Msey",
                        "content": "this soulution is really pain in the.. head\\none of the most difficult I met at easy category"
                    },
                    {
                        "username": "arrowmaster1252",
                        "content": "All hail Regex"
                    }
                ]
            }
        ]
    },
    {
        "title": "Apply Discount Every n Orders",
        "question_content": "<p>There is a supermarket that is frequented by many customers. The products sold at the supermarket are represented as two parallel integer arrays <code>products</code> and <code>prices</code>, where the <code>i<sup>th</sup></code> product has an ID of <code>products[i]</code> and a price of <code>prices[i]</code>.</p>\n\n<p>When a customer is paying, their bill is represented as two parallel integer arrays <code>product</code> and <code>amount</code>, where the <code>j<sup>th</sup></code> product they purchased has an ID of <code>product[j]</code>, and <code>amount[j]</code> is how much of the product they bought. Their subtotal is calculated as the sum of each <code>amount[j] * (price of the j<sup>th</sup> product)</code>.</p>\n\n<p>The supermarket decided to have a sale. Every <code>n<sup>th</sup></code> customer paying for their groceries will be given a <strong>percentage discount</strong>. The discount amount is given by <code>discount</code>, where they will be given <code>discount</code> percent off their subtotal. More formally, if their subtotal is <code>bill</code>, then they would actually pay <code>bill * ((100 - discount) / 100)</code>.</p>\n\n<p>Implement the <code>Cashier</code> class:</p>\n\n<ul>\n\t<li><code>Cashier(int n, int discount, int[] products, int[] prices)</code> Initializes the object with <code>n</code>, the <code>discount</code>, and the <code>products</code> and their <code>prices</code>.</li>\n\t<li><code>double getBill(int[] product, int[] amount)</code> Returns the final total of the bill with the discount applied (if any). Answers within <code>10<sup>-5</sup></code> of the actual value will be accepted.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Cashier&quot;,&quot;getBill&quot;,&quot;getBill&quot;,&quot;getBill&quot;,&quot;getBill&quot;,&quot;getBill&quot;,&quot;getBill&quot;,&quot;getBill&quot;]\n[[3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]],[[1,2],[1,2]],[[3,7],[10,10]],[[1,2,3,4,5,6,7],[1,1,1,1,1,1,1]],[[4],[10]],[[7,3],[10,10]],[[7,5,3,1,6,4,2],[10,10,10,9,9,9,7]],[[2,3,5],[5,3,2]]]\n<strong>Output</strong>\n[null,500.0,4000.0,800.0,4000.0,4000.0,7350.0,2500.0]\n<strong>Explanation</strong>\nCashier cashier = new Cashier(3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]);\ncashier.getBill([1,2],[1,2]);                        // return 500.0. 1<sup>st</sup> customer, no discount.\n                                                     // bill = 1 * 100 + 2 * 200 = 500.\ncashier.getBill([3,7],[10,10]);                      // return 4000.0. 2<sup>nd</sup> customer, no discount.\n                                                     // bill = 10 * 300 + 10 * 100 = 4000.\ncashier.getBill([1,2,3,4,5,6,7],[1,1,1,1,1,1,1]);    // return 800.0. 3<sup>rd</sup> customer, 50% discount.\n                                                     // Original bill = 1600\n                                                     // Actual bill = 1600 * ((100 - 50) / 100) = 800.\ncashier.getBill([4],[10]);                           // return 4000.0. 4<sup>th</sup> customer, no discount.\ncashier.getBill([7,3],[10,10]);                      // return 4000.0. 5<sup>th</sup> customer, no discount.\ncashier.getBill([7,5,3,1,6,4,2],[10,10,10,9,9,9,7]); // return 7350.0. 6<sup>th</sup> customer, 50% discount.\n                                                     // Original bill = 14700, but with\n                                                     // Actual bill = 14700 * ((100 - 50) / 100) = 7350.\ncashier.getBill([2,3,5],[5,3,2]);                    // return 2500.0.  7<sup>th</sup> customer, no discount.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= discount &lt;= 100</code></li>\n\t<li><code>1 &lt;= products.length &lt;= 200</code></li>\n\t<li><code>prices.length == products.length</code></li>\n\t<li><code>1 &lt;= products[i] &lt;= 200</code></li>\n\t<li><code>1 &lt;= prices[i] &lt;= 1000</code></li>\n\t<li>The elements in <code>products</code> are <strong>unique</strong>.</li>\n\t<li><code>1 &lt;= product.length &lt;= products.length</code></li>\n\t<li><code>amount.length == product.length</code></li>\n\t<li><code>product[j]</code> exists in <code>products</code>.</li>\n\t<li><code>1 &lt;= amount[j] &lt;= 1000</code></li>\n\t<li>The elements of <code>product</code> are <strong>unique</strong>.</li>\n\t<li>At most <code>1000</code> calls will be made to <code>getBill</code>.</li>\n\t<li>Answers within <code>10<sup>-5</sup></code> of the actual value will be accepted.</li>\n</ul>\n",
        "solutions": [
            {
                "id": 516990,
                "title": "java-python-3-hashmap-dictionary",
                "content": "```java\\n    private int cnt = 0, n, discount;\\n    private Map<Integer, Integer> price = new HashMap<>();\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n = n;\\n        this.discount = discount;\\n        for (int i = 0; i < products.length; ++i)\\n            price.put(products[i], prices[i]);\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double total = 0.0d;\\n        for (int i = 0; i < product.length; ++i)\\n            total += price.get(product[i]) * amount[i];\\n        return total * (++cnt % n == 0 ? 1 - discount / 100d : 1);\\n    }\\n```\\n```python\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.price = dict(zip(products, prices)) # here credit to @danielmittereder for making code clean.\\n        self.discount = discount\\n        self.n = n\\n        self.cnt = 0\\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        self.cnt += 1\\n        total = 0.0\\n        for i, p in enumerate(product):\\n            total += self.price[p] * amount[i]\\n        return total * (1 - self.discount / 100 if self.cnt % self.n == 0 else 1)    \\n```",
                "solutionTags": [],
                "code": "```java\\n    private int cnt = 0, n, discount;\\n    private Map<Integer, Integer> price = new HashMap<>();\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n = n;\\n        this.discount = discount;\\n        for (int i = 0; i < products.length; ++i)\\n            price.put(products[i], prices[i]);\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double total = 0.0d;\\n        for (int i = 0; i < product.length; ++i)\\n            total += price.get(product[i]) * amount[i];\\n        return total * (++cnt % n == 0 ? 1 - discount / 100d : 1);\\n    }\\n```\n```python\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.price = dict(zip(products, prices)) # here credit to @danielmittereder for making code clean.\\n        self.discount = discount\\n        self.n = n\\n        self.cnt = 0\\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        self.cnt += 1\\n        total = 0.0\\n        for i, p in enumerate(product):\\n            total += self.price[p] * amount[i]\\n        return total * (1 - self.discount / 100 if self.cnt % self.n == 0 else 1)    \\n```",
                "codeTag": "Python3"
            },
            {
                "id": 516964,
                "title": "c-hashmap",
                "content": "```\\nclass Cashier {\\npublic:\\n    unordered_map<int, int> tags;\\n    int cnt, mod;\\n    double pct;\\n    \\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        cnt = 0;\\n        mod = n;\\n        pct = (100.0 - discount) / 100.0;\\n        for (int i = 0; i < products.size(); ++i)\\n            tags[products[i]] = prices[i];\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        cnt++;\\n        double ans(0.0);\\n        for (int i = 0; i < product.size(); ++i)\\n            ans += tags[product[i]] * amount[i];\\n        return cnt % mod ? ans : ans * pct;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Cashier {\\npublic:\\n    unordered_map<int, int> tags;\\n    int cnt, mod;\\n    double pct;\\n    \\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        cnt = 0;\\n        mod = n;\\n        pct = (100.0 - discount) / 100.0;\\n        for (int i = 0; i < products.size(); ++i)\\n            tags[products[i]] = prices[i];\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        cnt++;\\n        double ans(0.0);\\n        for (int i = 0; i < product.size(); ++i)\\n            ans += tags[product[i]] * amount[i];\\n        return cnt % mod ? ans : ans * pct;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 751400,
                "title": "java-easiest-solution-with-explanation",
                "content": "Concept : As we have given the array of ids of products and correspondig to that prices of products, one can easily think that this problem can solved by making key-value pair ( product-id, product-amount ) And after that we can use built-in HashMap interface defined in java.\\n\\nSo first of all, we can initialize all the required properties of Cashier class using the <b>this</b> keyword. And using for loop we will add the id-amount pair to the map.\\n\\nWhenever there is call of function getBill we have to increment the customer count by one. If it is equal to the total no of customers then we have to subtract the discount from the bill. And also we have to make count to zero so that we can again keep track of the customer who can get discount.\\n\\n<b> Note : Use the datatype double in initialization of the bill variable because in int, it will give wrong answer due to decimal point. </b>\\n\\nSolution :\\n\\n```\\nclass Cashier {\\n    \\n    int count;\\n    Map<Integer,Integer> map;\\n    int d;\\n    int total_cus;\\n\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        count = 0;\\n        this.d = discount;\\n        this.total_cus = n;\\n        map = new HashMap<>();\\n        \\n        for(int i=0; i<products.length; i++) {\\n            map.put(products[i], prices[i]);\\n        }\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        \\n        count++;\\n        double bill = 0;\\n        \\n        for(int i=0; i<product.length; i++) {\\n            bill += map.get(product[i]) * amount[i];\\n        }\\n        \\n        if(count == total_cus) {\\n            count = 0;\\n            return (bill - (d * bill)/100);   \\n        } else {\\n            return bill;\\n        }\\n    }\\n}\\n```\\n\\nDo upvote if you like solution.",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Cashier {\\n    \\n    int count;\\n    Map<Integer,Integer> map;\\n    int d;\\n    int total_cus;\\n\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        count = 0;\\n        this.d = discount;\\n        this.total_cus = n;\\n        map = new HashMap<>();\\n        \\n        for(int i=0; i<products.length; i++) {\\n            map.put(products[i], prices[i]);\\n        }\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        \\n        count++;\\n        double bill = 0;\\n        \\n        for(int i=0; i<product.length; i++) {\\n            bill += map.get(product[i]) * amount[i];\\n        }\\n        \\n        if(count == total_cus) {\\n            count = 0;\\n            return (bill - (d * bill)/100);   \\n        } else {\\n            return bill;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3572465,
                "title": "solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Cashier {\\npublic:\\n    unordered_map<int, int> tags;\\n    int cnt, mod;\\n    double pct;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) \\n    {\\n        cnt = 0;\\n        mod = n;\\n        pct = (100.0 - discount) / 100.0;\\n        for (int i = 0; i < products.size(); ++i)\\n            tags[products[i]] = prices[i];\\n    }\\n    double getBill(vector<int> product, vector<int> amount) \\n    {\\n        cnt++;\\n        double ans(0.0);\\n        for (int i = 0; i < product.size(); ++i)\\n            ans += tags[product[i]] * amount[i];\\n        return cnt % mod ? ans : ans * pct;\\n    }\\n};\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Cashier {\\npublic:\\n    unordered_map<int, int> tags;\\n    int cnt, mod;\\n    double pct;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) \\n    {\\n        cnt = 0;\\n        mod = n;\\n        pct = (100.0 - discount) / 100.0;\\n        for (int i = 0; i < products.size(); ++i)\\n            tags[products[i]] = prices[i];\\n    }\\n    double getBill(vector<int> product, vector<int> amount) \\n    {\\n        cnt++;\\n        double ans(0.0);\\n        for (int i = 0; i < product.size(); ++i)\\n            ans += tags[product[i]] * amount[i];\\n        return cnt % mod ? ans : ans * pct;\\n    }\\n};\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 726941,
                "title": "python3-defaultdict-solution-hashmap",
                "content": "Map all the products with their value, after that it\\'s simple discount application\\n```\\nclass Cashier:\\n    from collections import defaultdict\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.n = n\\n        self.x = discount\\n        self.mp = defaultdict(int)\\n        for i in range(len(products)):\\n            self.mp[products[i]] = prices[i]\\n        self.ctr = 0\\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        self.ctr += 1\\n        bill = 0\\n        for i in range(len(product)):\\n            bill += self.mp[product[i]] * amount[i]\\n        if (self.ctr % self.n == 0):\\n            disc = (self.x/100) * bill\\n            bill -= disc\\n        return bill\\n```\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Cashier:\\n    from collections import defaultdict\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.n = n\\n        self.x = discount\\n        self.mp = defaultdict(int)\\n        for i in range(len(products)):\\n            self.mp[products[i]] = prices[i]\\n        self.ctr = 0\\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        self.ctr += 1\\n        bill = 0\\n        for i in range(len(product)):\\n            bill += self.mp[product[i]] * amount[i]\\n        if (self.ctr % self.n == 0):\\n            disc = (self.x/100) * bill\\n            bill -= disc\\n        return bill\\n```",
                "codeTag": "Java"
            },
            {
                "id": 516982,
                "title": "java-straight-forward-store-price-in-hashmap",
                "content": "```\\nclass Cashier {\\n    static int n;\\n    static int discount;\\n    static HashMap<Integer, Integer> prices;\\n    static int counter;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.prices = new HashMap<>();\\n        this.n = n;\\n        counter = n;\\n        this.discount = discount;\\n        for(int i = 0; i < prices.length; i++) this.prices.put(products[i], prices[i]);\\n    }\\n    public double getBill(int[] product, int[] amount) {\\n        counter--;\\n        double ans = 0;\\n        for(int i = 0; i < product.length; i++) {\\n            ans += prices.get(product[i]) * amount[i];\\n        }\\n        if(counter == 0) {\\n            counter = n;\\n            ans -= (discount * ans) / (100.0);\\n        }\\n        return ans;\\n    }\\n}",
                "solutionTags": [],
                "code": "```\\nclass Cashier {\\n    static int n;\\n    static int discount;\\n    static HashMap<Integer, Integer> prices;\\n    static int counter;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.prices = new HashMap<>();\\n        this.n = n;\\n        counter = n;\\n        this.discount = discount;\\n        for(int i = 0; i < prices.length; i++) this.prices.put(products[i], prices[i]);\\n    }\\n    public double getBill(int[] product, int[] amount) {\\n        counter--;\\n        double ans = 0;\\n        for(int i = 0; i < product.length; i++) {\\n            ans += prices.get(product[i]) * amount[i];\\n        }\\n        if(counter == 0) {\\n            counter = n;\\n            ans -= (discount * ans) / (100.0);\\n        }\\n        return ans;\\n    }\\n}",
                "codeTag": "Java"
            },
            {
                "id": 867819,
                "title": "typescript-javascript-hash-map-easy-w-comments",
                "content": "```\\nclass Cashier {\\n    // attributes\\n    private n: number;\\n    private discount: number;\\n    private count: number;\\n    private price: Map<number, number>;\\n\\n    constructor(n: number, discount: number, products: number[], prices: number[]) {\\n        // set attrs\\n        this.n = n;\\n        this.discount = discount;\\n        this.count = 0;\\n        this.price = new Map();\\n\\n        // iterate thru products/prices, and set the price for each product in map\\n        for (let i = 0; i < prices.length; i++) this.price.set(products[i], prices[i]);\\n    }\\n\\n    getBill(product: number[], amount: number[]): number {\\n        // first, get total cost of this order (pre-discount)\\n        let cost = 0;\\n        for (let i = 0; i < product.length; i++)\\n            cost += this.price.get(product[i])! * amount[i];\\n\\n        // now, determine if this customer gets a discount (they are nth customer)\\n        return ++this.count % this.n === 0 ? cost * (1 - this.discount / 100) : cost;\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nclass Cashier {\\n    // attributes\\n    private n: number;\\n    private discount: number;\\n    private count: number;\\n    private price: Map<number, number>;\\n\\n    constructor(n: number, discount: number, products: number[], prices: number[]) {\\n        // set attrs\\n        this.n = n;\\n        this.discount = discount;\\n        this.count = 0;\\n        this.price = new Map();\\n\\n        // iterate thru products/prices, and set the price for each product in map\\n        for (let i = 0; i < prices.length; i++) this.price.set(products[i], prices[i]);\\n    }\\n\\n    getBill(product: number[], amount: number[]): number {\\n        // first, get total cost of this order (pre-discount)\\n        let cost = 0;\\n        for (let i = 0; i < product.length; i++)\\n            cost += this.price.get(product[i])! * amount[i];\\n\\n        // now, determine if this customer gets a discount (they are nth customer)\\n        return ++this.count % this.n === 0 ? cost * (1 - this.discount / 100) : cost;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 516954,
                "title": "hashmap-java",
                "content": "```\\nclass Cashier {\\n    int n;\\n    int discount;\\n    int[] products;\\n    int[] prices;\\n    Map<Integer, Integer> priceMap = new HashMap<>();\\n    int counter;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n = n;\\n        this.discount = discount;\\n        for(int i =0; i< products.length; i++)\\n            this.priceMap.put(products[i], prices[i]);\\n    }\\n\\n    public double getBill(int[] product, int[] amount) {\\n        ++counter; double total =0, discount = 0;\\n        for(int i = 0; i< product.length; i++){\\n            total += (priceMap.get(product[i]) * amount[i]);\\n        }\\n        if(counter == n){\\n            discount = total *(this.discount/100d);\\n            counter =0;\\n        }\\n        return total - discount;\\n    }\\n}",
                "solutionTags": [],
                "code": "```\\nclass Cashier {\\n    int n;\\n    int discount;\\n    int[] products;\\n    int[] prices;\\n    Map<Integer, Integer> priceMap = new HashMap<>();\\n    int counter;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n = n;\\n        this.discount = discount;\\n        for(int i =0; i< products.length; i++)\\n            this.priceMap.put(products[i], prices[i]);\\n    }\\n\\n    public double getBill(int[] product, int[] amount) {\\n        ++counter; double total =0, discount = 0;\\n        for(int i = 0; i< product.length; i++){\\n            total += (priceMap.get(product[i]) * amount[i]);\\n        }\\n        if(counter == n){\\n            discount = total *(this.discount/100d);\\n            counter =0;\\n        }\\n        return total - discount;\\n    }\\n}",
                "codeTag": "Java"
            },
            {
                "id": 2181380,
                "title": "c-solution-hashmap",
                "content": "```\\nclass Cashier {\\npublic:\\n    int count=0,x;\\n    double d;\\n    unordered_map<int,int>mp;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        x=n;\\n        d=(double)(100-discount)/100;\\n        int m=products.size();\\n        for(int i=0;i<m;i++){\\n            mp[products[i]]=prices[i];\\n        }\\n    }\\n    double getBill(vector<int> p, vector<int> a) {\\n        count++;\\n        int m=p.size();\\n        double res=0;\\n        for(int i=0;i<m;i++){\\n            res=res+(mp[p[i]]*a[i]);\\n        }\\n        if(count%x==0){\\n            res=res*d;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Cashier {\\npublic:\\n    int count=0,x;\\n    double d;\\n    unordered_map<int,int>mp;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        x=n;\\n        d=(double)(100-discount)/100;\\n        int m=products.size();\\n        for(int i=0;i<m;i++){\\n            mp[products[i]]=prices[i];\\n        }\\n    }\\n    double getBill(vector<int> p, vector<int> a) {\\n        count++;\\n        int m=p.size();\\n        double res=0;\\n        for(int i=0;i<m;i++){\\n            res=res+(mp[p[i]]*a[i]);\\n        }\\n        if(count%x==0){\\n            res=res*d;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1716479,
                "title": "python3-dictionary-hash-table-easy-understanding",
                "content": "```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.prices = {products[i]:prices[i] for i in range(len(products))}\\n        self.n = n\\n        self.discount = discount\\n        self.cus = 0\\n        \\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        total_bill = 0\\n        \\n        for i in range(len(product)):\\n            total_bill += self.prices[product[i]] * amount[i]\\n        \\n        self.cus += 1\\n        if self.cus % self.n == 0:\\n            return total_bill * (100 - self.discount) / 100\\n        \\n        return total_bill\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Hash Table"
                ],
                "code": "```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.prices = {products[i]:prices[i] for i in range(len(products))}\\n        self.n = n\\n        self.discount = discount\\n        self.cus = 0\\n        \\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        total_bill = 0\\n        \\n        for i in range(len(product)):\\n            total_bill += self.prices[product[i]] * amount[i]\\n        \\n        self.cus += 1\\n        if self.cus % self.n == 0:\\n            return total_bill * (100 - self.discount) / 100\\n        \\n        return total_bill\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1088602,
                "title": "python-easy-to-understand-faster-than-91",
                "content": "```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.customer = 0 #Track what customer number we\\'re on currently\\n        self.discount = discount / 100 #Discount as a decimal value\\n        self.customer_number = n #What customer number should get a discount\\n        self.product_prices = {} \\n        #In a dictionary, store products as keys, prices as values for quick lookups\\n        for i in range(len(products)):\\n            self.product_prices[products[i]] = prices[i]\\n        \\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        #Order placed. Increment how many customers there have been by 1\\n        self.customer += 1\\n        #Check if the current customer number matches the n number we should be applying discounts to\\n        if self.customer == self.customer_number:\\n            self.customer = 0 #Reset customer to 0\\n            total_cost = 0\\n            #Iterate over each product number and query the dictionary for the price. Multiply this price\\n            #by how many units of the product the customer is buying and total this up. \\n            for i in range(len(product)):\\n                price = self.product_prices[product[i]] * amount[i]\\n                total_cost += price\\n            #Apply the discount as the formula suggests in the prompt. Only difference in else statement is that\\n            #we don\\'t apply discount, everything else is the same\\n            return total_cost - (self.discount * total_cost)\\n        else:\\n            total_cost = 0\\n            for i in range(len(product)):\\n                price = self.product_prices[product[i]] * amount[i]\\n                total_cost += price\\n            return total_cost\\n```",
                "solutionTags": [],
                "code": "```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.customer = 0 #Track what customer number we\\'re on currently\\n        self.discount = discount / 100 #Discount as a decimal value\\n        self.customer_number = n #What customer number should get a discount\\n        self.product_prices = {} \\n        #In a dictionary, store products as keys, prices as values for quick lookups\\n        for i in range(len(products)):\\n            self.product_prices[products[i]] = prices[i]\\n        \\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        #Order placed. Increment how many customers there have been by 1\\n        self.customer += 1\\n        #Check if the current customer number matches the n number we should be applying discounts to\\n        if self.customer == self.customer_number:\\n            self.customer = 0 #Reset customer to 0\\n            total_cost = 0\\n            #Iterate over each product number and query the dictionary for the price. Multiply this price\\n            #by how many units of the product the customer is buying and total this up. \\n            for i in range(len(product)):\\n                price = self.product_prices[product[i]] * amount[i]\\n                total_cost += price\\n            #Apply the discount as the formula suggests in the prompt. Only difference in else statement is that\\n            #we don\\'t apply discount, everything else is the same\\n            return total_cost - (self.discount * total_cost)\\n        else:\\n            total_cost = 0\\n            for i in range(len(product)):\\n                price = self.product_prices[product[i]] * amount[i]\\n                total_cost += price\\n            return total_cost\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4081528,
                "title": "easy-clear",
                "content": "________________________________\\n\\n# Code\\n```\\nclass Cashier {\\n    int discount;\\n    int n;\\n    int []products;\\n    int []prices=new int[200];\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.discount=discount;\\n        this.n=n;\\n        this.products=products;\\n        for(int i=0; i<products.length; i++){\\n            this.prices[products[i]-1]=prices[i];\\n        }\\n    }\\n    int count=1;\\n    public double getBill(int[] product, int[] amount) {\\n        double cost=0;\\n        for(int i=0; i<product.length; i++){\\n            cost+=amount[i]*this.prices[product[i]-1];    \\n        }\\n        if(count==n){\\n            cost*=(double)(100-this.discount)/100.00;\\n            count=1;         \\n        }else{\\n            count++;\\n        }        \\n        return cost;\\n    }\\n}\\n```\\n________________________________\\n\\n**Up Vote if Helps**![image.png](https://assets.leetcode.com/users/images/23d8443e-ac59-49d5-99f0-9273a2147be2_1687635435.0337658.png)\\n\\n________________________________",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Cashier {\\n    int discount;\\n    int n;\\n    int []products;\\n    int []prices=new int[200];\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.discount=discount;\\n        this.n=n;\\n        this.products=products;\\n        for(int i=0; i<products.length; i++){\\n            this.prices[products[i]-1]=prices[i];\\n        }\\n    }\\n    int count=1;\\n    public double getBill(int[] product, int[] amount) {\\n        double cost=0;\\n        for(int i=0; i<product.length; i++){\\n            cost+=amount[i]*this.prices[product[i]-1];    \\n        }\\n        if(count==n){\\n            cost*=(double)(100-this.discount)/100.00;\\n            count=1;         \\n        }else{\\n            count++;\\n        }        \\n        return cost;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3767417,
                "title": "solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Cashier {\\n\\n    private int n;\\n    private int discount;\\n    private Map<Integer, Integer> prices = new HashMap<>();\\n    private int idx = 0;\\n\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n = n;\\n        this.discount = discount;\\n        for(int i = 0; i < products.length; ++i) {\\n            this.prices.put(products[i], prices[i]);\\n        }\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double result = 0;\\n        for(int i = 0; i < product.length; ++i) {\\n            result += amount[i]*prices.get(product[i]);\\n        }\\n        idx += 1;\\n        if(idx % n == 0) {\\n            result = result * (100 - discount) / 100;\\n        }\\n        return result;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Cashier {\\n\\n    private int n;\\n    private int discount;\\n    private Map<Integer, Integer> prices = new HashMap<>();\\n    private int idx = 0;\\n\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n = n;\\n        this.discount = discount;\\n        for(int i = 0; i < products.length; ++i) {\\n            this.prices.put(products[i], prices[i]);\\n        }\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double result = 0;\\n        for(int i = 0; i < product.length; ++i) {\\n            result += amount[i]*prices.get(product[i]);\\n        }\\n        idx += 1;\\n        if(idx % n == 0) {\\n            result = result * (100 - discount) / 100;\\n        }\\n        return result;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3554184,
                "title": "java-easy-100-solution",
                "content": "```java\\nclass Cashier {\\n    private final int[] prices;\\n    private final int n;\\n    private final int discount;\\n    private int customerNumber;\\n\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.prices = new int[200];\\n\\n        for(int i = 0; i < products.length; ++i)\\n            this.prices[products[i] - 1] = prices[i];\\n\\n        this.n = n;\\n        this.discount = discount;\\n        this.customerNumber = 1;\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double sum = 0;\\n\\n        for(int i = 0; i < product.length; ++i)\\n            sum += this.prices[product[i] - 1] * amount[i];\\n\\n        if(this.customerNumber != 0 && this.customerNumber % n == 0)\\n            sum *= (double) (100 - this.discount) / 100;\\n\\n        this.customerNumber++;\\n\\n        return sum;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java\\nclass Cashier {\\n    private final int[] prices;\\n    private final int n;\\n    private final int discount;\\n    private int customerNumber;\\n\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.prices = new int[200];\\n\\n        for(int i = 0; i < products.length; ++i)\\n            this.prices[products[i] - 1] = prices[i];\\n\\n        this.n = n;\\n        this.discount = discount;\\n        this.customerNumber = 1;\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double sum = 0;\\n\\n        for(int i = 0; i < product.length; ++i)\\n            sum += this.prices[product[i] - 1] * amount[i];\\n\\n        if(this.customerNumber != 0 && this.customerNumber % n == 0)\\n            sum *= (double) (100 - this.discount) / 100;\\n\\n        this.customerNumber++;\\n\\n        return sum;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3113989,
                "title": "easy-solution-c-maping-beats-90",
                "content": "\\n\\n# Code\\n```\\nclass Cashier {\\npublic:\\n    int n;\\n    int dis;\\n    unordered_map<int,int>price;\\n    int idx=0;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        this->n=n;\\n        this->dis=discount;\\n        for(int i=0;i<products.size();i++){\\n            price[products[i]]=prices[i];\\n        }\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        double res=0;\\n        idx++;\\n        for(int i=0;i<product.size();i++){\\n            res+=(price[product[i]]*amount[i]);\\n        }\\n        if(idx%n==0){\\n            return (res*(100-dis))/100;\\n        }\\n        return res;\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table"
                ],
                "code": "```\\nclass Cashier {\\npublic:\\n    int n;\\n    int dis;\\n    unordered_map<int,int>price;\\n    int idx=0;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        this->n=n;\\n        this->dis=discount;\\n        for(int i=0;i<products.size();i++){\\n            price[products[i]]=prices[i];\\n        }\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        double res=0;\\n        idx++;\\n        for(int i=0;i<product.size();i++){\\n            res+=(price[product[i]]*amount[i]);\\n        }\\n        if(idx%n==0){\\n            return (res*(100-dis))/100;\\n        }\\n        return res;\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3113985,
                "title": "easy-solution-c-maping",
                "content": "\\n\\n# Code\\n```\\nclass Cashier {\\npublic:\\n    int n;\\n    int dis;\\n    unordered_map<int,int>price;\\n    int idx=0;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        this->n=n;\\n        this->dis=discount;\\n        for(int i=0;i<products.size();i++){\\n            price[products[i]]=prices[i];\\n        }\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        double res=0;\\n        idx++;\\n        for(int i=0;i<product.size();i++){\\n            res+=(price[product[i]]*amount[i]);\\n        }\\n        if(idx%n==0){\\n            return (res*(100-dis))/100;\\n        }\\n        return res;\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table"
                ],
                "code": "```\\nclass Cashier {\\npublic:\\n    int n;\\n    int dis;\\n    unordered_map<int,int>price;\\n    int idx=0;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        this->n=n;\\n        this->dis=discount;\\n        for(int i=0;i<products.size();i++){\\n            price[products[i]]=prices[i];\\n        }\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        double res=0;\\n        idx++;\\n        for(int i=0;i<product.size();i++){\\n            res+=(price[product[i]]*amount[i]);\\n        }\\n        if(idx%n==0){\\n            return (res*(100-dis))/100;\\n        }\\n        return res;\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2975443,
                "title": "beginner-friendly-beats-90-of-solutions",
                "content": "\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(N)\\n\\n# Code\\n```\\nclass Cashier {\\n\\n    HashMap<Integer,Integer>mp=new HashMap<>();\\n\\n    int count=1;\\n\\n    int n;\\n\\n    double discount;\\n\\n    public Cashier(int m, int disc, int[] products, int[] prices) {\\n\\n    n=m;\\n\\n    discount=disc;\\n\\n    for(int i=0;i<products.length;i++){\\n\\n    mp.put(products[i],prices[i]);\\n\\n    }\\n\\n    }\\n    \\n    public double getBill(int[] products, int[] amount) {\\n\\n    double total=0;\\n\\n    for(int i=0;i<products.length;i++){\\n\\n    total+=mp.get(products[i])*amount[i];\\n\\n    }\\n    \\n    if(count==n){\\n\\n    total= total * ((100.00 - discount) / 100.00);\\n\\n    count=1;\\n\\n    }\\n    else{\\n\\n    count++;\\n\\n    }\\n\\n    return total;\\n        \\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Hash Table",
                    "Design"
                ],
                "code": "```\\nclass Cashier {\\n\\n    HashMap<Integer,Integer>mp=new HashMap<>();\\n\\n    int count=1;\\n\\n    int n;\\n\\n    double discount;\\n\\n    public Cashier(int m, int disc, int[] products, int[] prices) {\\n\\n    n=m;\\n\\n    discount=disc;\\n\\n    for(int i=0;i<products.length;i++){\\n\\n    mp.put(products[i],prices[i]);\\n\\n    }\\n\\n    }\\n    \\n    public double getBill(int[] products, int[] amount) {\\n\\n    double total=0;\\n\\n    for(int i=0;i<products.length;i++){\\n\\n    total+=mp.get(products[i])*amount[i];\\n\\n    }\\n    \\n    if(count==n){\\n\\n    total= total * ((100.00 - discount) / 100.00);\\n\\n    count=1;\\n\\n    }\\n    else{\\n\\n    count++;\\n\\n    }\\n\\n    return total;\\n        \\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2961459,
                "title": "hashmap-java-solution",
                "content": "# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(N)\\n\\n# Code\\n```\\nclass Cashier {\\n    HashMap<Integer,Integer>stock=new HashMap<>();\\n    int n;\\n    int discount;\\n    int itr=0;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        for(int i=0;i<products.length;i++){\\n            stock.put(products[i],prices[i]);\\n        }\\n        this.n=n;\\n        this.discount=discount;\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double total=0;\\n        for(int i=0;i<product.length;i++){\\n            total+=(double)(amount[i]*stock.get(product[i]));\\n        }\\n        itr++;\\n        if(itr==n){\\n            total*=(double)(((100-discount)/100d));\\n            itr=0;\\n        }\\n        return total;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Hash Table",
                    "Design"
                ],
                "code": "```\\nclass Cashier {\\n    HashMap<Integer,Integer>stock=new HashMap<>();\\n    int n;\\n    int discount;\\n    int itr=0;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        for(int i=0;i<products.length;i++){\\n            stock.put(products[i],prices[i]);\\n        }\\n        this.n=n;\\n        this.discount=discount;\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double total=0;\\n        for(int i=0;i<product.length;i++){\\n            total+=(double)(amount[i]*stock.get(product[i]));\\n        }\\n        itr++;\\n        if(itr==n){\\n            total*=(double)(((100-discount)/100d));\\n            itr=0;\\n        }\\n        return total;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2741480,
                "title": "java-87-speed-89-memory-solutions",
                "content": "# Approach\\nUsing hashmap for products which optimizes time performance\\n\\n# Code\\n```\\nclass Cashier {\\n\\n    int discountOnEach, numOfBills, discount;\\n    int[] products, prices;\\n    Map<Integer, Integer> mapOfProducts;\\n\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        discountOnEach = n;\\n        numOfBills = 0;\\n        this.discount = discount;\\n        this.products = products;\\n        this.prices = prices;\\n        initializeMapOfProducts();\\n    }\\n\\n    private void initializeMapOfProducts() {\\n        mapOfProducts = new HashMap<>();\\n        for (int i = 0; i < products.length; i++) {\\n            mapOfProducts.put(products[i], i);\\n        }\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        int sum = 0;\\n            numOfBills++;\\n            for (int i = 0; i < product.length; i++) {\\n                int currentProduct = product[i];\\n                int idx = mapOfProducts.get(currentProduct);\\n                sum += prices[idx] * amount[i];\\n            }\\n            if (numOfBills % discountOnEach == 0) {\\n                return sum * ((100 - discount) / 100.0);\\n            }\\n            return sum * 1.0;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Cashier {\\n\\n    int discountOnEach, numOfBills, discount;\\n    int[] products, prices;\\n    Map<Integer, Integer> mapOfProducts;\\n\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        discountOnEach = n;\\n        numOfBills = 0;\\n        this.discount = discount;\\n        this.products = products;\\n        this.prices = prices;\\n        initializeMapOfProducts();\\n    }\\n\\n    private void initializeMapOfProducts() {\\n        mapOfProducts = new HashMap<>();\\n        for (int i = 0; i < products.length; i++) {\\n            mapOfProducts.put(products[i], i);\\n        }\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        int sum = 0;\\n            numOfBills++;\\n            for (int i = 0; i < product.length; i++) {\\n                int currentProduct = product[i];\\n                int idx = mapOfProducts.get(currentProduct);\\n                sum += prices[idx] * amount[i];\\n            }\\n            if (numOfBills % discountOnEach == 0) {\\n                return sum * ((100 - discount) / 100.0);\\n            }\\n            return sum * 1.0;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2735257,
                "title": "easy-java-solution-using-hashmap",
                "content": "\\n# Code\\n```\\nclass Cashier {\\n\\n    int customer;\\n    int n;\\n    int discount;\\n    HashMap<Integer , Integer> map;\\n\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n\\n        customer = 0;\\n        this.n = n;\\n        this.discount = discount;\\n        map = new HashMap<>();\\n\\n\\n        for(int j = 0 ; j < products.length ; j++){\\n            //product with its price\\n            map.put(products[j] , prices[j]);\\n        }\\n\\n        \\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n\\n        customer++;\\n\\n        double bill = 0;\\n\\n        for(int i = 0 ; i < product.length ; i++){\\n\\n            bill  += amount[i]*map.get(product[i]);\\n\\n        }\\n\\n\\n        if(customer % n == 0){\\n            bill -= bill * discount/100.0;\\n        }\\n\\n\\n        return bill;\\n\\n\\n       \\n        \\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table",
                    "Design"
                ],
                "code": "```\\nclass Cashier {\\n\\n    int customer;\\n    int n;\\n    int discount;\\n    HashMap<Integer , Integer> map;\\n\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n\\n        customer = 0;\\n        this.n = n;\\n        this.discount = discount;\\n        map = new HashMap<>();\\n\\n\\n        for(int j = 0 ; j < products.length ; j++){\\n            //product with its price\\n            map.put(products[j] , prices[j]);\\n        }\\n\\n        \\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n\\n        customer++;\\n\\n        double bill = 0;\\n\\n        for(int i = 0 ; i < product.length ; i++){\\n\\n            bill  += amount[i]*map.get(product[i]);\\n\\n        }\\n\\n\\n        if(customer % n == 0){\\n            bill -= bill * discount/100.0;\\n        }\\n\\n\\n        return bill;\\n\\n\\n       \\n        \\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2190124,
                "title": "100-hashmap-easy-cpp-soln",
                "content": "```\\nclass Cashier {\\n    int nth, dis, i;\\n    map<int,int>mp;\\npublic:\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        i=0;\\n        nth=n;\\n        dis=discount;\\n        for(int i=0;i<products.size();i++)\\n            mp[products[i]]=prices[i];\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        i%=nth;\\n        i++;\\n        double bill;\\n        for(int i=0;i<product.size();i++)\\n            bill += (double)amount[i]*mp[product[i]];\\n        if(i==nth)\\n            return bill*((double)(100-dis)/100.0);\\n        return bill;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Cashier {\\n    int nth, dis, i;\\n    map<int,int>mp;\\npublic:\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        i=0;\\n        nth=n;\\n        dis=discount;\\n        for(int i=0;i<products.size();i++)\\n            mp[products[i]]=prices[i];\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        i%=nth;\\n        i++;\\n        double bill;\\n        for(int i=0;i<product.size();i++)\\n            bill += (double)amount[i]*mp[product[i]];\\n        if(i==nth)\\n            return bill*((double)(100-dis)/100.0);\\n        return bill;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1832417,
                "title": "python-hash-map-with-modulo-counter",
                "content": "```\\nclass Cashier:\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.n = n\\n        self.count = 0\\n        self.discount_factor = ((100 - discount) / 100)\\n        self.prices = dict(zip(products, prices))\\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        self.count = (self.count + 1) % self.n\\n        res = sum(self.prices[p] * a for p, a in zip(product, amount))\\n        return res * self.discount_factor if self.count == 0 else res\\n```",
                "solutionTags": [],
                "code": "```\\nclass Cashier:\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.n = n\\n        self.count = 0\\n        self.discount_factor = ((100 - discount) / 100)\\n        self.prices = dict(zip(products, prices))\\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        self.count = (self.count + 1) % self.n\\n        res = sum(self.prices[p] * a for p, a in zip(product, amount))\\n        return res * self.discount_factor if self.count == 0 else res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1633258,
                "title": "rust-very-fast-o-n-no-hashmap",
                "content": "When considering using a `HashMap` in a scenario where the keys are integers that fall within a small fixed range, it\\'s usually better to use an array or vector instead.  Array lookups are much faster since keys don\\'t need to be hashed.\\n\\nThere is some inaccuracy associated with floating point arithmetic, which is why  this statement is included in the problem description: \"*Answers within 10<sup>-5</sup> of the actual value will be accepted.*\"  Since the input data consists of integer values, if the necessary math operations are performed entirely in integer arithmetic until the very end, the accuracy of the result, however minutely, is improved,\\n\\n```rust\\nstruct Cashier {\\n    prices   : Vec<i64>,\\n    discount : i64,\\n    counter  : (i32, i32),\\n}\\n\\n\\nimpl Cashier {\\n\\n    fn new(n: i32, discount: i32, products: Vec<i32>, prices: Vec<i32>) -> Self {\\n        let mut prices_ = vec![0; 201];\\n        \\n        products.into_iter()\\n                .zip(prices)\\n                .for_each(|(prod_id, price)| \\n                          prices_[prod_id as usize] = price as i64);\\n        Self { \\n            prices   : prices_,\\n            discount : discount as i64, \\n            counter  : (0, n), \\n        }\\n    }\\n    \\n    fn get_bill(&mut self, product: Vec<i32>, amount: Vec<i32>) -> f64 {\\n        let total = product.into_iter()\\n                           .zip(amount)\\n                           .fold(0, |acm, (prod_id, quantity)| \\n                                     acm + quantity  as i64 *\\n                                     self.prices[prod_id as usize]);\\n        self.counter.0 += 1;\\n        \\n        if self.counter.0 % self.counter.1 == 0 \\n             { (total * (100 - self.discount)) as f64 / 100.0 } \\n        else { total as f64                                   }\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```rust\\nstruct Cashier {\\n    prices   : Vec<i64>,\\n    discount : i64,\\n    counter  : (i32, i32),\\n}\\n\\n\\nimpl Cashier {\\n\\n    fn new(n: i32, discount: i32, products: Vec<i32>, prices: Vec<i32>) -> Self {\\n        let mut prices_ = vec![0; 201];\\n        \\n        products.into_iter()\\n                .zip(prices)\\n                .for_each(|(prod_id, price)| \\n                          prices_[prod_id as usize] = price as i64);\\n        Self { \\n            prices   : prices_,\\n            discount : discount as i64, \\n            counter  : (0, n), \\n        }\\n    }\\n    \\n    fn get_bill(&mut self, product: Vec<i32>, amount: Vec<i32>) -> f64 {\\n        let total = product.into_iter()\\n                           .zip(amount)\\n                           .fold(0, |acm, (prod_id, quantity)| \\n                                     acm + quantity  as i64 *\\n                                     self.prices[prod_id as usize]);\\n        self.counter.0 += 1;\\n        \\n        if self.counter.0 % self.counter.1 == 0 \\n             { (total * (100 - self.discount)) as f64 / 100.0 } \\n        else { total as f64                                   }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1452992,
                "title": "python3-easy-solution-with-dict",
                "content": "```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        # discount for every n-th customer.\\n        self.n = n\\n        self.nth_customer = 1\\n        self.discount = discount\\n        self.pid_price = {prod: price for prod, price in zip(products, prices)}\\n        \\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        \"\"\"\\n        product: ID\\n        amount = # of products\\n        subtotal = product[j]*amount[j]        \\n        \"\"\"\\n        def get_subtotal(product, amount):\\n            total = 0\\n            for pid, ea in zip(product, amount):\\n                total += (self.pid_price[pid]*ea)\\n            \\n            return total\\n        \\n        def get_discount(total):\\n            if self.nth_customer%self.n == 0:\\n                # Discount total price.\\n                self.nth_customer = 1\\n                return total*((100. - self.discount)/100.)\\n            else:\\n                # Don\\'t discount.\\n                self.nth_customer += 1\\n                return total\\n        \\n        return get_discount(get_subtotal(product, amount))\\n        \\n\\n\\n# Your Cashier object will be instantiated and called as such:\\n# obj = Cashier(n, discount, products, prices)\\n# param_1 = obj.getBill(product,amount)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        # discount for every n-th customer.\\n        self.n = n\\n        self.nth_customer = 1\\n        self.discount = discount\\n        self.pid_price = {prod: price for prod, price in zip(products, prices)}\\n        \\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        \"\"\"\\n        product: ID\\n        amount = # of products\\n        subtotal = product[j]*amount[j]        \\n        \"\"\"\\n        def get_subtotal(product, amount):\\n            total = 0\\n            for pid, ea in zip(product, amount):\\n                total += (self.pid_price[pid]*ea)\\n            \\n            return total\\n        \\n        def get_discount(total):\\n            if self.nth_customer%self.n == 0:\\n                # Discount total price.\\n                self.nth_customer = 1\\n                return total*((100. - self.discount)/100.)\\n            else:\\n                # Don\\'t discount.\\n                self.nth_customer += 1\\n                return total\\n        \\n        return get_discount(get_subtotal(product, amount))\\n        \\n\\n\\n# Your Cashier object will be instantiated and called as such:\\n# obj = Cashier(n, discount, products, prices)\\n# param_1 = obj.getBill(product,amount)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1428454,
                "title": "c-simple",
                "content": "```\\n\\n```public:\\n    int count=0;\\n    map<int,int>mp;\\n    double dis;\\n    int n;\\n    Cashier(int num, int discount, vector<int>& products, vector<int>& prices) {\\n        dis=(double)discount;\\n        n=num;\\n        for(int i=0;i<products.size();i++)\\n        {\\n            mp[products[i]]=prices[i];\\n        }\\n    }\\n    double getBill(vector<int> product, vector<int> amount) {\\n        count++;\\n        double sum=0;\\n        for(int i=0;i<product.size();i++)\\n        {\\n            sum=sum+(double)mp[product[i]]*amount[i];\\n        }\\n        if(count%n==0)\\n        {\\n            sum=sum*((100-dis)/100);\\n        }\\n        return sum;\\n    }\\n};\\n",
                "solutionTags": [],
                "code": "```\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1382271,
                "title": "c-easiest-hashmap-solution",
                "content": "```\\nclass Cashier {\\npublic:\\n    int count=0;    \\n    int n , discount;\\n    unordered_map<int,int> prodPrice;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        this->n = n ;\\n        this->discount = discount;\\n        for(int i =0;i<products.size();i++)        \\n            prodPrice[products[i]] = prices[i];\\n    }\\n    \\n    double getBill(vector<int> prod, vector<int> amount) {\\n        count++;\\n        bool flag = 0;\\n        if(count%n == 0 ) {\\n            flag = 1;\\n            count  = 0;\\n        }\\n        double cost = 0;\\n        for(int i=0;i<prod.size();i++){\\n            cost += (prodPrice[prod[i]] * amount[i]);\\n        }\\n        if(!flag)\\n            return cost; \\n        cost = cost - ((discount*cost)/100);\\n        return cost; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Cashier {\\npublic:\\n    int count=0;    \\n    int n , discount;\\n    unordered_map<int,int> prodPrice;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        this->n = n ;\\n        this->discount = discount;\\n        for(int i =0;i<products.size();i++)        \\n            prodPrice[products[i]] = prices[i];\\n    }\\n    \\n    double getBill(vector<int> prod, vector<int> amount) {\\n        count++;\\n        bool flag = 0;\\n        if(count%n == 0 ) {\\n            flag = 1;\\n            count  = 0;\\n        }\\n        double cost = 0;\\n        for(int i=0;i<prod.size();i++){\\n            cost += (prodPrice[prod[i]] * amount[i]);\\n        }\\n        if(!flag)\\n            return cost; \\n        cost = cost - ((discount*cost)/100);\\n        return cost; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1328130,
                "title": "java-simple-hashmap-solution",
                "content": "```\\nclass Cashier {\\n\\n    int n;\\n    int discount;\\n    Map<Integer,Integer> prodmap;\\n    int current;\\n    \\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n = n;\\n        this.discount = discount;\\n        prodmap = new HashMap<>();\\n        for(int i=0;i<products.length;i++){\\n            prodmap.put(products[i],prices[i]);\\n        }\\n        current = 0;\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        current++;\\n        double total = 0;\\n        for(int i=0;i<product.length;i++){\\n            int index = product[i];\\n            int price = prodmap.get(index);\\n            total += price * amount[i];\\n        }\\n        \\n        if(current%n==0){\\n            total = (total - (total*discount)/100);\\n            current = current % n;\\n        }\\n        \\n        return total;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "solutionTags": [],
                "code": "```\\nclass Cashier {\\n\\n    int n;\\n    int discount;\\n    Map<Integer,Integer> prodmap;\\n    int current;\\n    \\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n = n;\\n        this.discount = discount;\\n        prodmap = new HashMap<>();\\n        for(int i=0;i<products.length;i++){\\n            prodmap.put(products[i],prices[i]);\\n        }\\n        current = 0;\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        current++;\\n        double total = 0;\\n        for(int i=0;i<product.length;i++){\\n            int index = product[i];\\n            int price = prodmap.get(index);\\n            total += price * amount[i];\\n        }\\n        \\n        if(current%n==0){\\n            total = (total - (total*discount)/100);\\n            current = current % n;\\n        }\\n        \\n        return total;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1324088,
                "title": "easy-python-solution-using-hash-map-with-comments-and-explanation",
                "content": "```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        \\n        self.a = 0;self.n = n;self.dis = discount\\n        \\n        self.abhi = dict(zip(products, prices))# this operation will make a dictionary with key as product[i](ith product id) and its value corresponding price\\n         \\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        \\n        self.a+=1;self.total = 0\\n        \\n        for i in range(len(product)):self.total += self.abhi[product[i]]*amount[i]# calculating the total amount\\n            \\n        \\n        if self.a%self.n==0:return self.total - (self.dis * self.total)/100# applying the discount \\n        else:return self.total\\n            \\n            \\n            \\n            \\n        \\n\\n\\n# Your Cashier object will be instantiated and called as such:\\n# obj = Cashier(n, discount, products, prices)\\n# param_1 = obj.getBill(product,amount)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        \\n        self.a = 0;self.n = n;self.dis = discount\\n        \\n        self.abhi = dict(zip(products, prices))# this operation will make a dictionary with key as product[i](ith product id) and its value corresponding price\\n         \\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        \\n        self.a+=1;self.total = 0\\n        \\n        for i in range(len(product)):self.total += self.abhi[product[i]]*amount[i]# calculating the total amount\\n            \\n        \\n        if self.a%self.n==0:return self.total - (self.dis * self.total)/100# applying the discount \\n        else:return self.total\\n            \\n            \\n            \\n            \\n        \\n\\n\\n# Your Cashier object will be instantiated and called as such:\\n# obj = Cashier(n, discount, products, prices)\\n# param_1 = obj.getBill(product,amount)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1150178,
                "title": "python-messes-up-on-one-of-test-cases-any-idea-why",
                "content": "```\\nclass Cashier:\\n    \\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.n = n\\n        self.discount = discount/100\\n        self.products = products\\n        self.prices = prices\\n        self.customer_count = 1\\n\\n \\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        bill = 0\\n        count = 0\\n        for item in product:\\n            index = self.products.index(item)\\n            number = amount[count]\\n            bill += number * self.prices[index]\\n            count+=1\\n            \\n        if self.customer_count == self.n:\\n            self.customer_count = 1\\n            return bill*self.discount\\n        else:\\n            self.customer_count += 1\\n            return bill\\n        \\n```",
                "solutionTags": [],
                "code": "```\\nclass Cashier:\\n    \\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.n = n\\n        self.discount = discount/100\\n        self.products = products\\n        self.prices = prices\\n        self.customer_count = 1\\n\\n \\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        bill = 0\\n        count = 0\\n        for item in product:\\n            index = self.products.index(item)\\n            number = amount[count]\\n            bill += number * self.prices[index]\\n            count+=1\\n            \\n        if self.customer_count == self.n:\\n            self.customer_count = 1\\n            return bill*self.discount\\n        else:\\n            self.customer_count += 1\\n            return bill\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 998745,
                "title": "c-elegant-dictionary-solution-100-cpu",
                "content": "```\\npublic class Cashier {\\n    int customerNo;\\n    int discountCust;\\n    int discountPercent;\\n    Dictionary<int, int> prodPrices;\\n    \\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        customerNo = 0;\\n        discountCust = n;\\n        discountPercent = discount;\\n        prodPrices = new Dictionary<int, int>();\\n        for(int i = 0; i < products.Length; i++){\\n            prodPrices.Add(products[i], prices[i]);\\n        }\\n    }\\n    \\n    public double GetBill(int[] product, int[] amount) {\\n        customerNo++;\\n        double sum = 0;\\n        \\n        for(int i = 0; i < product.Length; i++){\\n            sum += prodPrices[product[i]] * amount[i];\\n        }\\n        \\n        if(customerNo == discountCust){\\n            sum -= (discountPercent * sum) / 100;\\n            customerNo = 0;\\n        }\\n        \\n        return sum;\\n    }\\n}",
                "solutionTags": [],
                "code": "```\\npublic class Cashier {\\n    int customerNo;\\n    int discountCust;\\n    int discountPercent;\\n    Dictionary<int, int> prodPrices;\\n    \\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        customerNo = 0;\\n        discountCust = n;\\n        discountPercent = discount;\\n        prodPrices = new Dictionary<int, int>();\\n        for(int i = 0; i < products.Length; i++){\\n            prodPrices.Add(products[i], prices[i]);\\n        }\\n    }\\n    \\n    public double GetBill(int[] product, int[] amount) {\\n        customerNo++;\\n        double sum = 0;\\n        \\n        for(int i = 0; i < product.Length; i++){\\n            sum += prodPrices[product[i]] * amount[i];\\n        }\\n        \\n        if(customerNo == discountCust){\\n            sum -= (discountPercent * sum) / 100;\\n            customerNo = 0;\\n        }\\n        \\n        return sum;\\n    }\\n}",
                "codeTag": "Java"
            },
            {
                "id": 641473,
                "title": "c-straight-forward-solution-using-unordered-map",
                "content": "```\\nclass Cashier {\\npublic:\\n    int count = 0, disc = 0, luckyp = 0;\\n    unordered_map<int, int> prod_price;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        luckyp = n;\\n        disc = discount;\\n        for(int i=0; i<products.size(); i++) {\\n            prod_price.insert({products[i], prices[i]});   \\n        }\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        count++;\\n        double bill = 0;\\n        for(int i=0; i<product.size(); i++) {\\n            bill += prod_price[product[i]] * amount[i];\\n        }\\n        if(count == luckyp) {\\n            count = 0;\\n            bill -= ((disc * bill) / 100); \\n        }\\n        return bill;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Cashier {\\npublic:\\n    int count = 0, disc = 0, luckyp = 0;\\n    unordered_map<int, int> prod_price;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        luckyp = n;\\n        disc = discount;\\n        for(int i=0; i<products.size(); i++) {\\n            prod_price.insert({products[i], prices[i]});   \\n        }\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        count++;\\n        double bill = 0;\\n        for(int i=0; i<product.size(); i++) {\\n            bill += prod_price[product[i]] * amount[i];\\n        }\\n        if(count == luckyp) {\\n            count = 0;\\n            bill -= ((disc * bill) / 100); \\n        }\\n        return bill;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 520279,
                "title": "python-java-c-javascript",
                "content": "```\\nimport functools\\n\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.prices = {product : price for product, price in zip(products, prices)}\\n        self.discount = discount\\n        self.n = n\\n        self.count = 0\\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        self.count += 1\\n        return functools.reduce(operator.add, map(operator.mul, map(self.prices.get, product), amount)) * (1 if self.count % self.n else 1 - self.discount / 100)    \\n    \\n\\n\\n# Your Cashier object will be instantiated and called as such:\\n# obj = Cashier(n, discount, products, prices)\\n# param_1 = obj.getBill(product,amount)\\n```\\n```\\nclass Cashier {\\n    private int n, discount, count = 0;\\n    private Map<Integer, Integer> prices;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.prices = IntStream.range(0, products.length).boxed().collect(Collectors.toMap($ -> products[$], $ -> prices[$]));\\n        this.n = n;\\n        this.discount = discount;\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        return IntStream.range(0, product.length).map($ -> this.prices.get(product[$]) * amount[$]).sum() * (++this.count % this.n == 0 ? 1 - this.discount / 100. : 1);\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```\\n```\\nclass Cashier {\\nprivate:\\n    int n, discount, count{0};\\n    std::unordered_map<int, int> prices;\\npublic:\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        std::transform(std::cbegin(products), std::cend(products), std::cbegin(prices), std::inserter(this->prices, std::begin(this->prices)), [](auto const product, auto const price){return std::pair{product, price};});\\n        this->n = n;\\n        this->discount = discount;\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        std::transform(std::cbegin(product), std::cend(product), std::begin(product), [this](auto const _){return this->prices.at(_);});\\n        return std::inner_product(std::cbegin(product), std::cend(product), std::cbegin(amount), 0) * (++this->count % this->n ? 1 : 1 - this->discount / 100.);\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```\\n```\\n/**\\n * @param {number} n\\n * @param {number} discount\\n * @param {number[]} products\\n * @param {number[]} prices\\n */\\nconst lodash = require(\\'lodash\\')\\n\\nvar Cashier = function(n, discount, products, prices) {\\n    this.prices = new Map(lodash.zip(products, prices))\\n    this.n = n\\n    this.discount = discount\\n    this.count = 0\\n};\\n\\n/** \\n * @param {number[]} product \\n * @param {number[]} amount\\n * @return {number}\\n */\\nCashier.prototype.getBill = function(product, amount) {\\n    return lodash.zipWith(product.map(this.prices.get.bind(this.prices)), amount, (a, b) => a * b).reduce((a, b) => a + b) * (++this.count % this.n ? 1 : 1 - this.discount / 100)\\n};\\n\\n/** \\n * Your Cashier object will be instantiated and called as such:\\n * var obj = new Cashier(n, discount, products, prices)\\n * var param_1 = obj.getBill(product,amount)\\n */\\n```",
                "solutionTags": [],
                "code": "```\\nimport functools\\n\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.prices = {product : price for product, price in zip(products, prices)}\\n        self.discount = discount\\n        self.n = n\\n        self.count = 0\\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        self.count += 1\\n        return functools.reduce(operator.add, map(operator.mul, map(self.prices.get, product), amount)) * (1 if self.count % self.n else 1 - self.discount / 100)    \\n    \\n\\n\\n# Your Cashier object will be instantiated and called as such:\\n# obj = Cashier(n, discount, products, prices)\\n# param_1 = obj.getBill(product,amount)\\n```\n```\\nclass Cashier {\\n    private int n, discount, count = 0;\\n    private Map<Integer, Integer> prices;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.prices = IntStream.range(0, products.length).boxed().collect(Collectors.toMap($ -> products[$], $ -> prices[$]));\\n        this.n = n;\\n        this.discount = discount;\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        return IntStream.range(0, product.length).map($ -> this.prices.get(product[$]) * amount[$]).sum() * (++this.count % this.n == 0 ? 1 - this.discount / 100. : 1);\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```\n```\\nclass Cashier {\\nprivate:\\n    int n, discount, count{0};\\n    std::unordered_map<int, int> prices;\\npublic:\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        std::transform(std::cbegin(products), std::cend(products), std::cbegin(prices), std::inserter(this->prices, std::begin(this->prices)), [](auto const product, auto const price){return std::pair{product, price};});\\n        this->n = n;\\n        this->discount = discount;\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        std::transform(std::cbegin(product), std::cend(product), std::begin(product), [this](auto const _){return this->prices.at(_);});\\n        return std::inner_product(std::cbegin(product), std::cend(product), std::cbegin(amount), 0) * (++this->count % this->n ? 1 : 1 - this->discount / 100.);\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```\n```\\n/**\\n * @param {number} n\\n * @param {number} discount\\n * @param {number[]} products\\n * @param {number[]} prices\\n */\\nconst lodash = require(\\'lodash\\')\\n\\nvar Cashier = function(n, discount, products, prices) {\\n    this.prices = new Map(lodash.zip(products, prices))\\n    this.n = n\\n    this.discount = discount\\n    this.count = 0\\n};\\n\\n/** \\n * @param {number[]} product \\n * @param {number[]} amount\\n * @return {number}\\n */\\nCashier.prototype.getBill = function(product, amount) {\\n    return lodash.zipWith(product.map(this.prices.get.bind(this.prices)), amount, (a, b) => a * b).reduce((a, b) => a + b) * (++this.count % this.n ? 1 : 1 - this.discount / 100)\\n};\\n\\n/** \\n * Your Cashier object will be instantiated and called as such:\\n * var obj = new Cashier(n, discount, products, prices)\\n * var param_1 = obj.getBill(product,amount)\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 517265,
                "title": "java-hashmap",
                "content": "```\\nclass Cashier {\\n    private int d;\\n    private int n;\\n    private int cnt;\\n    Map<Integer, Integer> map;\\n    public Cashier(int n, int discount, int[] pd, int[] pr) {\\n        this.n = n;\\n        map = new HashMap<>();\\n        cnt = 0;\\n        d = discount;\\n        for (int i = 0; i < pd.length; i++) {\\n            map.put(pd[i], pr[i]);\\n        }\\n    }\\n    \\n    public double getBill(int[] ps, int[] as) {\\n        cnt++;\\n        double bl = 0.0d;\\n        for (int i = 0; i < ps.length; i++ ) {\\n            bl += map.get(ps[i]) * as[i];\\n        }\\n        if (cnt % n == 0) {\\n            bl -= bl * d / 100.0;\\n        }\\n        return bl;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Cashier {\\n    private int d;\\n    private int n;\\n    private int cnt;\\n    Map<Integer, Integer> map;\\n    public Cashier(int n, int discount, int[] pd, int[] pr) {\\n        this.n = n;\\n        map = new HashMap<>();\\n        cnt = 0;\\n        d = discount;\\n        for (int i = 0; i < pd.length; i++) {\\n            map.put(pd[i], pr[i]);\\n        }\\n    }\\n    \\n    public double getBill(int[] ps, int[] as) {\\n        cnt++;\\n        double bl = 0.0d;\\n        for (int i = 0; i < ps.length; i++ ) {\\n            bl += map.get(ps[i]) * as[i];\\n        }\\n        if (cnt % n == 0) {\\n            bl -= bl * d / 100.0;\\n        }\\n        return bl;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 517252,
                "title": "this-is-a-problem-for-novel-writers-other-than-developers",
                "content": "Simple math but long description...\\n\\n```\\nclass Cashier {\\n    private int d;\\n    private int n;\\n    private int cnt;\\n    Map<Integer, Integer> map;\\n    public Cashier(int n, int discount, int[] pd, int[] pr) {\\n        this.n = n;\\n        map = new HashMap<>();\\n        cnt = 0;\\n        d = discount;\\n        for (int i = 0; i < pd.length; i++) {\\n            map.put(pd[i], pr[i]);\\n        }\\n    }\\n    \\n    public double getBill(int[] ps, int[] as) {\\n        cnt++;\\n        double bl = 0.0d;\\n        for (int i = 0; i < ps.length; i++ ) {\\n            bl += map.get(ps[i]) * as[i];\\n        }\\n        if (cnt % n == 0) {\\n            bl -= bl * d / 100.0;\\n        }\\n        return bl;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Cashier {\\n    private int d;\\n    private int n;\\n    private int cnt;\\n    Map<Integer, Integer> map;\\n    public Cashier(int n, int discount, int[] pd, int[] pr) {\\n        this.n = n;\\n        map = new HashMap<>();\\n        cnt = 0;\\n        d = discount;\\n        for (int i = 0; i < pd.length; i++) {\\n            map.put(pd[i], pr[i]);\\n        }\\n    }\\n    \\n    public double getBill(int[] ps, int[] as) {\\n        cnt++;\\n        double bl = 0.0d;\\n        for (int i = 0; i < ps.length; i++ ) {\\n            bl += map.get(ps[i]) * as[i];\\n        }\\n        if (cnt % n == 0) {\\n            bl -= bl * d / 100.0;\\n        }\\n        return bl;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 517128,
                "title": "java-100-solution-constant-space",
                "content": "```\\nclass Cashier {\\n\\n    int n,discount, counter=0;\\n    int[] products;\\n    int[] prices;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n=n;\\n        this.discount=discount;\\n        this.products= products.clone();\\n        this.prices= prices.clone();\\n        printArray();\\n    }\\n    public int getIndexOf(int t)\\n    {\\n        for(int i=0; i<products.length; i++)\\n        {\\n            if(products[i]==t)\\n                return i;\\n        }\\n        return -1;\\n    }\\n    public double getBill(int[] product, int[] amount) {\\n        counter++;\\n        double ans=0.0;\\n        for(int i=0; i<product.length; i++)\\n        {\\n            int index= getIndexOf(product[i]);\\n            ans+=(amount[i]*prices[index]);\\n        }\\n        if(counter%n==0)\\n        {\\n            ans-=(((double)discount/100)*ans);\\n        }\\n        return ans;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "solutionTags": [],
                "code": "```\\nclass Cashier {\\n\\n    int n,discount, counter=0;\\n    int[] products;\\n    int[] prices;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n=n;\\n        this.discount=discount;\\n        this.products= products.clone();\\n        this.prices= prices.clone();\\n        printArray();\\n    }\\n    public int getIndexOf(int t)\\n    {\\n        for(int i=0; i<products.length; i++)\\n        {\\n            if(products[i]==t)\\n                return i;\\n        }\\n        return -1;\\n    }\\n    public double getBill(int[] product, int[] amount) {\\n        counter++;\\n        double ans=0.0;\\n        for(int i=0; i<product.length; i++)\\n        {\\n            int index= getIndexOf(product[i]);\\n            ans+=(amount[i]*prices[index]);\\n        }\\n        if(counter%n==0)\\n        {\\n            ans-=(((double)discount/100)*ans);\\n        }\\n        return ans;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 517066,
                "title": "5-line-python-solution",
                "content": "The key is using a dict to directly access the price by product ID.\\n```python\\nclass Cashier:\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.n, self.i, self.d = n, 0, discount\\n        self.price = {product: price for product, price in zip(products, prices)}\\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        self.i += 1\\n        s = sum(self.price[p] * a for p, a in zip(product, amount))\\n        return s if self.i % self.n else s * (1 - self.d / 100)\\n```\\nVote up if find this helpful, thanks!",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```python\\nclass Cashier:\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.n, self.i, self.d = n, 0, discount\\n        self.price = {product: price for product, price in zip(products, prices)}\\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        self.i += 1\\n        s = sum(self.price[p] * a for p, a in zip(product, amount))\\n        return s if self.i % self.n else s * (1 - self.d / 100)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 517013,
                "title": "c-simple-cashier-using-hashmap-and-counter",
                "content": "Keep a hashmap to store price per unit for each product id. Also, keep a counter to track the n-th customer and apply discount.\\nTime complexity of getBill : O(P), where P is number of products bought by customer.\\n\\n```\\nclass Cashier {\\npublic:\\n    int n, dis, c = 0;\\n    unordered_map<int, int> pr;\\n    Cashier(int N, int discount, vector<int>& products, vector<int>& prices) {\\n        pr.clear();\\n        for(int i = 0; i < products.size(); i++)\\n        {\\n            pr[products[i]] = prices[i];\\n        }\\n        n = N;\\n        dis = discount;\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        c++;\\n        double cost = 0;\\n        for(int i = 0; i < product.size(); i++)\\n        {\\n            cost += amount[i] * pr[ product[i] ];\\n        }\\n        \\n        if(c == n)\\n        {\\n            cost = (cost * (100 - dis)) / 100.0;\\n            c = 0;\\n        }\\n        \\n        return cost;\\n    }\\n};\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Cashier {\\npublic:\\n    int n, dis, c = 0;\\n    unordered_map<int, int> pr;\\n    Cashier(int N, int discount, vector<int>& products, vector<int>& prices) {\\n        pr.clear();\\n        for(int i = 0; i < products.size(); i++)\\n        {\\n            pr[products[i]] = prices[i];\\n        }\\n        n = N;\\n        dis = discount;\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        c++;\\n        double cost = 0;\\n        for(int i = 0; i < product.size(); i++)\\n        {\\n            cost += amount[i] * pr[ product[i] ];\\n        }\\n        \\n        if(c == n)\\n        {\\n            cost = (cost * (100 - dis)) / 100.0;\\n            c = 0;\\n        }\\n        \\n        return cost;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 517000,
                "title": "java-python-simple-solution-in-o-n-time-and-o-1-space",
                "content": "**Python**\\n```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.count = 0\\n        self.discountAvail = False\\n        \\n        self.n = n\\n        self.disc = discount\\n        self.products = products\\n        self.prices = prices\\n        \\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        self.count += 1\\n        if self.count == self.n:\\n            self.count = 0\\n            self.discountAvail = True\\n            \\n        cost = 0\\n        for i in range(len(product)):\\n            cost += self.prices[self.products.index(product[i])] * amount[i]\\n        \\n        if self.discountAvail:\\n            self.discountAvail = False\\n            cost -= cost * self.disc /100\\n            \\n        return (cost)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.count = 0\\n        self.discountAvail = False\\n        \\n        self.n = n\\n        self.disc = discount\\n        self.products = products\\n        self.prices = prices\\n        \\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        self.count += 1\\n        if self.count == self.n:\\n            self.count = 0\\n            self.discountAvail = True\\n            \\n        cost = 0\\n        for i in range(len(product)):\\n            cost += self.prices[self.products.index(product[i])] * amount[i]\\n        \\n        if self.discountAvail:\\n            self.discountAvail = False\\n            cost -= cost * self.disc /100\\n            \\n        return (cost)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 516961,
                "title": "clean-python-3-straightforward",
                "content": "```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.n = self.i = n\\n        self.discount = discount\\n        self.prices = {id_: price for id_, price in zip(products, prices)}\\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        self.i -= 1\\n        total = sum(self.prices[id_] * count for id_, count in zip(product, amount))\\n        if not self.i:\\n            total *= (100 - self.discount) / 100\\n            self.i = self.n\\n        return total\\n\\n\\n# Your Cashier object will be instantiated and called as such:\\n# obj = Cashier(n, discount, products, prices)\\n# param_1 = obj.getBill(product,amount)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.n = self.i = n\\n        self.discount = discount\\n        self.prices = {id_: price for id_, price in zip(products, prices)}\\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        self.i -= 1\\n        total = sum(self.prices[id_] * count for id_, count in zip(product, amount))\\n        if not self.i:\\n            total *= (100 - self.discount) / 100\\n            self.i = self.n\\n        return total\\n\\n\\n# Your Cashier object will be instantiated and called as such:\\n# obj = Cashier(n, discount, products, prices)\\n# param_1 = obj.getBill(product,amount)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4103300,
                "title": "simple-c-solution",
                "content": "# Intuition\\nThe given code defines a `Cashier` class that simulates a cashier process for applying discounts to bills based on a given discount rate. The cashier maintains a mapping of products to their prices. The `getBill` function calculates the bill for a given set of products and quantities, applying the discount if applicable. The code uses an `unordered_map` to store product prices, and it keeps track of the number of times the `getBill` function is called.\\n\\n# Approach\\nThe `Cashier` class maintains a map `mp` to store product prices and initializes with product prices provided during object creation. The `getBill` function calculates the bill for a given set of products and amounts by looking up the prices in the map. If the call count is a multiple of `k`, a discount is applied to the total bill.\\n\\n# Code Explanation\\n1. The `Cashier` class is defined with a constructor that takes the number of products, a discount percentage, product IDs, and their corresponding prices.\\n2. In the constructor, product IDs and their corresponding prices are stored in an unordered map `mp`.\\n3. The `getBill` function calculates the total bill by multiplying the prices of each product with the respective amounts and summing them up.\\n4. If the call count `x` (incremented with each call to `getBill`) is a multiple of `k`, a discount is applied to the total bill based on the given discount percentage.\\n5. The calculated bill is returned.\\n\\n# Complexity\\n- Time complexity:\\n  - Constructing the `Cashier` object: $$O(m)$$, where $$m$$ is the number of products.\\n  - Calculating the bill in `getBill`: $$O(p)$$, where $$p$$ is the number of products in the input.\\n- Space complexity:\\n  - $$O(m)$$ for storing product prices in the map, where $$m$$ is the number of products.\\n\\n# Code\\n```\\n\\nclass Cashier {\\npublic:\\n    unordered_map<int,int> mp;  // Map to store product prices (product ID -> price)\\n    int k,d;  // Variables to store the discount frequency (k) and discount rate (d)\\n    int x=1;  // Counter to keep track of the number of times getBill is called\\n\\n    // Constructor to initialize the Cashier object\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        k = n;  // Assign the discount frequency\\n        d = discount;  // Assign the discount rate\\n\\n        // Store product prices in the map\\n        for(int i=0; i<products.size(); i++){\\n            mp[products[i]] = prices[i];\\n        }\\n    }\\n    \\n    // Function to calculate the bill for a given set of products and amounts\\n    double getBill(vector<int> product, vector<int> amount) {\\n        double ans = 0;  // Initialize the total bill\\n\\n        // Calculate the total bill by summing the product of price and quantity for each product\\n        for(int i=0; i<product.size(); i++){\\n            ans += mp[product[i]] * amount[i];\\n        }\\n\\n        // If the call count is a multiple of k, apply the discount to the total bill\\n        if(x != 0 && x % k == 0){\\n            ans = ans * ((100 - d) / 100.0);  // Apply the discount\\n        }\\n        x++;  // Increment the call count\\n\\n        return ans;  // Return the calculated bill\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table"
                ],
                "code": "```\\n\\nclass Cashier {\\npublic:\\n    unordered_map<int,int> mp;  // Map to store product prices (product ID -> price)\\n    int k,d;  // Variables to store the discount frequency (k) and discount rate (d)\\n    int x=1;  // Counter to keep track of the number of times getBill is called\\n\\n    // Constructor to initialize the Cashier object\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        k = n;  // Assign the discount frequency\\n        d = discount;  // Assign the discount rate\\n\\n        // Store product prices in the map\\n        for(int i=0; i<products.size(); i++){\\n            mp[products[i]] = prices[i];\\n        }\\n    }\\n    \\n    // Function to calculate the bill for a given set of products and amounts\\n    double getBill(vector<int> product, vector<int> amount) {\\n        double ans = 0;  // Initialize the total bill\\n\\n        // Calculate the total bill by summing the product of price and quantity for each product\\n        for(int i=0; i<product.size(); i++){\\n            ans += mp[product[i]] * amount[i];\\n        }\\n\\n        // If the call count is a multiple of k, apply the discount to the total bill\\n        if(x != 0 && x % k == 0){\\n            ans = ans * ((100 - d) / 100.0);  // Apply the discount\\n        }\\n        x++;  // Increment the call count\\n\\n        return ans;  // Return the calculated bill\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4028330,
                "title": "python-simple-class-structure",
                "content": "# Code\\n```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.n = n\\n        self.current = 0\\n        self.discount = discount\\n        self.d = {products[i]:prices[i] for i in range(len(products))}\\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        self.current += 1\\n        suma = 0\\n        for i in range(len(product)):\\n            suma += amount[i]*self.d[product[i]]\\n        return suma * ((100-self.discount)/100) if self.current%self.n == 0 else suma\\n\\n\\n\\n# Your Cashier object will be instantiated and called as such:\\n# obj = Cashier(n, discount, products, prices)\\n# param_1 = obj.getBill(product,amount)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.n = n\\n        self.current = 0\\n        self.discount = discount\\n        self.d = {products[i]:prices[i] for i in range(len(products))}\\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        self.current += 1\\n        suma = 0\\n        for i in range(len(product)):\\n            suma += amount[i]*self.d[product[i]]\\n        return suma * ((100-self.discount)/100) if self.current%self.n == 0 else suma\\n\\n\\n\\n# Your Cashier object will be instantiated and called as such:\\n# obj = Cashier(n, discount, products, prices)\\n# param_1 = obj.getBill(product,amount)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4015122,
                "title": "103ms-73-java-hashmap",
                "content": "\\n\\n# Code\\n```\\nclass Cashier {\\n\\n    HashMap<Integer, Integer> mp = new HashMap<>();\\n    int n=0;\\n    int max = 0;\\n    int dis = 0;\\n\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        for(int i=0; i<products.length; i++){\\n            mp.put(products[i] , prices[i]);\\n        }\\n\\n        max = n;\\n        dis = discount;\\n\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double bill = 0.0;\\n\\n        for(int i=0; i<product.length; i++){\\n            \\n            bill += amount[i]*mp.get(product[i]);\\n        }\\n        n++;\\n\\n        if(n==max){\\n            bill -= (bill*dis)/100;\\n            n=0;\\n        }\\n\\n        return bill;\\n\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Cashier {\\n\\n    HashMap<Integer, Integer> mp = new HashMap<>();\\n    int n=0;\\n    int max = 0;\\n    int dis = 0;\\n\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        for(int i=0; i<products.length; i++){\\n            mp.put(products[i] , prices[i]);\\n        }\\n\\n        max = n;\\n        dis = discount;\\n\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double bill = 0.0;\\n\\n        for(int i=0; i<product.length; i++){\\n            \\n            bill += amount[i]*mp.get(product[i]);\\n        }\\n        n++;\\n\\n        if(n==max){\\n            bill -= (bill*dis)/100;\\n            n=0;\\n        }\\n\\n        return bill;\\n\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4012247,
                "title": "apply-discount-every-n-orders",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Cashier {\\n    int count =1;\\n    int val;\\n    int disc;\\n    HashMap<Integer,Integer> hm = new HashMap<Integer,Integer>();\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        val = n;\\n        disc =discount;\\n        for(int i=0;i<products.length;i++)\\n        {\\n            hm.put(products[i],prices[i]);\\n        }\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double result = 0;\\n        for(int i=0;i<product.length;i++)\\n        {\\n            result = result+(float)hm.get(product[i])*amount[i];\\n        }\\n        if(count%val==0)\\n        {\\n            result = result*(1-disc/100.0);\\n        }\\n        count++;\\n        return result;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Cashier {\\n    int count =1;\\n    int val;\\n    int disc;\\n    HashMap<Integer,Integer> hm = new HashMap<Integer,Integer>();\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        val = n;\\n        disc =discount;\\n        for(int i=0;i<products.length;i++)\\n        {\\n            hm.put(products[i],prices[i]);\\n        }\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double result = 0;\\n        for(int i=0;i<product.length;i++)\\n        {\\n            result = result+(float)hm.get(product[i])*amount[i];\\n        }\\n        if(count%val==0)\\n        {\\n            result = result*(1-disc/100.0);\\n        }\\n        count++;\\n        return result;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3984505,
                "title": "nice-and-elegant-solution-in-java-beats-100-rt-and-100-memory",
                "content": "```\\nclass Cashier {\\n    int dis;\\n    int customer;\\n    int origCustomer;\\n    int[] price;\\n    int[] prods;\\n    int[] map;\\n\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        dis = discount;\\n        customer = n;\\n        origCustomer = n;\\n        prods = products;\\n        price = prices;\\n        map = setPrices();\\n    }\\n\\n    private int[] setPrices() {\\n        map = new int[201];\\n        int index = 0;\\n        for (int i : prods) {\\n            map[i] = price[index++];\\n        }\\n        return map;\\n    }\\n\\n    public double getBill(int[] product, int[] amount) {\\n        double bill = 0;\\n        int index = 0;\\n        for (int i : product) {\\n            bill += map[i] * amount[index++];\\n        }\\n        if (--customer == 0) {\\n            bill = bill * (double) (100 - dis) / 100;\\n            customer = origCustomer;\\n        }\\n        return bill;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Hash Table",
                    "Design"
                ],
                "code": "```\\nclass Cashier {\\n    int dis;\\n    int customer;\\n    int origCustomer;\\n    int[] price;\\n    int[] prods;\\n    int[] map;\\n\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        dis = discount;\\n        customer = n;\\n        origCustomer = n;\\n        prods = products;\\n        price = prices;\\n        map = setPrices();\\n    }\\n\\n    private int[] setPrices() {\\n        map = new int[201];\\n        int index = 0;\\n        for (int i : prods) {\\n            map[i] = price[index++];\\n        }\\n        return map;\\n    }\\n\\n    public double getBill(int[] product, int[] amount) {\\n        double bill = 0;\\n        int index = 0;\\n        for (int i : product) {\\n            bill += map[i] * amount[index++];\\n        }\\n        if (--customer == 0) {\\n            bill = bill * (double) (100 - dis) / 100;\\n            customer = origCustomer;\\n        }\\n        return bill;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3885173,
                "title": "c-easy-solution-using-hash-table",
                "content": "```\\npublic class Cashier {\\n    int n,customer;\\n    double discount;\\n    Dictionary<int,int> map;\\n    public Cashier(int N, int Discount, int[] products, int[] prices) {\\n        map = new Dictionary<int,int>();\\n        for(int i = 0;i < products.Length;i++) map.Add(products[i],prices[i]);\\n        n = N;\\n        discount = Discount;\\n        customer = 0;\\n    }\\n    \\n    public double GetBill(int[] product, int[] amount) {\\n        customer++;\\n        double sum = 0;\\n        for(int i = 0;i < product.Length;i++)\\n            sum+= (amount[i] * map[product[i]]);        \\n        if(customer % n == 0)\\n            sum *= ((100 - discount) / 100);\\n        return sum;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.GetBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "C#",
                    "Hash Table"
                ],
                "code": "```\\npublic class Cashier {\\n    int n,customer;\\n    double discount;\\n    Dictionary<int,int> map;\\n    public Cashier(int N, int Discount, int[] products, int[] prices) {\\n        map = new Dictionary<int,int>();\\n        for(int i = 0;i < products.Length;i++) map.Add(products[i],prices[i]);\\n        n = N;\\n        discount = Discount;\\n        customer = 0;\\n    }\\n    \\n    public double GetBill(int[] product, int[] amount) {\\n        customer++;\\n        double sum = 0;\\n        for(int i = 0;i < product.Length;i++)\\n            sum+= (amount[i] * map[product[i]]);        \\n        if(customer % n == 0)\\n            sum *= ((100 - discount) / 100);\\n        return sum;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.GetBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3851087,
                "title": "c-easy-solution-beats-97",
                "content": "\\n# Code\\n```\\nclass Cashier {\\npublic:\\n    int d=0;\\n    int no=0;\\n    map<int,int>mp;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        d=discount;\\n        no=n;\\n        for(int i=0;i<products.size();i++){\\n            mp[products[i]]=prices[i];\\n        }\\n    }\\n    int c=0;\\n    double getBill(vector<int> product, vector<int> amount) {\\n        c++;\\n        if(c%no==0){\\n            double ans=0;\\n            for(int i=0;i<product.size();i++){\\n                ans+=mp[product[i]]*amount[i];\\n            }\\n            return ans-(ans*d/100);\\n        }\\n        double ans=0;\\n            for(int i=0;i<product.size();i++){\\n                ans+=mp[product[i]]*amount[i];\\n            }\\n            return ans;\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Cashier {\\npublic:\\n    int d=0;\\n    int no=0;\\n    map<int,int>mp;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        d=discount;\\n        no=n;\\n        for(int i=0;i<products.size();i++){\\n            mp[products[i]]=prices[i];\\n        }\\n    }\\n    int c=0;\\n    double getBill(vector<int> product, vector<int> amount) {\\n        c++;\\n        if(c%no==0){\\n            double ans=0;\\n            for(int i=0;i<product.size();i++){\\n                ans+=mp[product[i]]*amount[i];\\n            }\\n            return ans-(ans*d/100);\\n        }\\n        double ans=0;\\n            for(int i=0;i<product.size();i++){\\n                ans+=mp[product[i]]*amount[i];\\n            }\\n            return ans;\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3830678,
                "title": "not-a-medium-question-easy",
                "content": "# Code\\n```\\nclass Cashier {\\nprivate:\\n    double discount;\\n    int n;\\n    vector<int> products;\\n    vector<int> prices;\\n    // customer number to be served.\\n    int totalCustomerServed;\\n    // product ID -> price.\\n    map<int, int> productPriceMap;\\npublic:\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        this->n = n;\\n        this->discount = discount;\\n        this->products = products;\\n        this->prices = prices;\\n        this->totalCustomerServed = 0;\\n        for (int i=0; i<this->products.size(); i++) {\\n            this->productPriceMap[products[i]] = prices[i];\\n        }\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        bool shouldApplyDiscount = false;\\n        double bill = 0;\\n        this->totalCustomerServed = this->totalCustomerServed + 1;\\n\\n        if (this->totalCustomerServed != 0 && this->totalCustomerServed%this->n == 0) {\\n            shouldApplyDiscount = true;\\n        }\\n        \\n        for (int i=0; i<product.size(); i++) {\\n            bill += this->productPriceMap[product[i]] * amount[i];\\n        }\\n\\n        if (shouldApplyDiscount) {\\n            return bill * (1.0 - this->discount/100);\\n        }\\n        return bill;\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Cashier {\\nprivate:\\n    double discount;\\n    int n;\\n    vector<int> products;\\n    vector<int> prices;\\n    // customer number to be served.\\n    int totalCustomerServed;\\n    // product ID -> price.\\n    map<int, int> productPriceMap;\\npublic:\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        this->n = n;\\n        this->discount = discount;\\n        this->products = products;\\n        this->prices = prices;\\n        this->totalCustomerServed = 0;\\n        for (int i=0; i<this->products.size(); i++) {\\n            this->productPriceMap[products[i]] = prices[i];\\n        }\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        bool shouldApplyDiscount = false;\\n        double bill = 0;\\n        this->totalCustomerServed = this->totalCustomerServed + 1;\\n\\n        if (this->totalCustomerServed != 0 && this->totalCustomerServed%this->n == 0) {\\n            shouldApplyDiscount = true;\\n        }\\n        \\n        for (int i=0; i<product.size(); i++) {\\n            bill += this->productPriceMap[product[i]] * amount[i];\\n        }\\n\\n        if (shouldApplyDiscount) {\\n            return bill * (1.0 - this->discount/100);\\n        }\\n        return bill;\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3829614,
                "title": "easy-java-solution-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Cashier {\\n    int customer;\\n    int prices[];\\n    int products[];\\n    int discount;\\n    int n;\\n\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.prices = new int[200];\\n        this.n = n;\\n        this.discount = discount;\\n        this.customer = 1;\\n\\n        for(int i=0; i<products.length; i++){\\n            this.prices[products[i]-1] = prices[i];\\n        }\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double sum = 0;\\n\\n        for(int i = 0; i < product.length; ++i)\\n            sum += this.prices[product[i] - 1] * amount[i];\\n\\n        if(this.customer != 0 && this.customer % n == 0)\\n            sum *= (double) (100 - this.discount) / 100;\\n\\n        this.customer++;\\n\\n        return sum;\\n\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Cashier {\\n    int customer;\\n    int prices[];\\n    int products[];\\n    int discount;\\n    int n;\\n\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.prices = new int[200];\\n        this.n = n;\\n        this.discount = discount;\\n        this.customer = 1;\\n\\n        for(int i=0; i<products.length; i++){\\n            this.prices[products[i]-1] = prices[i];\\n        }\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double sum = 0;\\n\\n        for(int i = 0; i < product.length; ++i)\\n            sum += this.prices[product[i] - 1] * amount[i];\\n\\n        if(this.customer != 0 && this.customer % n == 0)\\n            sum *= (double) (100 - this.discount) / 100;\\n\\n        this.customer++;\\n\\n        return sum;\\n\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3786801,
                "title": "simple-java-solution",
                "content": "```\\nclass Cashier {\\n    \\n    int customer=0;\\n    int freq;\\n    double disc;\\n    \\n    Map<Integer, Integer> hm = new HashMap<>();\\n    \\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        freq=n;\\n        disc=1-(double)discount/100;    \\n        \\n        for(int i=0; i<products.length; i++) {\\n            hm.put(products[i], prices[i]);\\n        }        \\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        customer++;\\n        double bill=0;\\n        for(int i=0; i<product.length; i++) {\\n            bill+=hm.get(product[i])*amount[i];\\n        }\\n        if(customer%freq==0) {\\n            bill*=disc;\\n        }\\n        return bill;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Cashier {\\n    \\n    int customer=0;\\n    int freq;\\n    double disc;\\n    \\n    Map<Integer, Integer> hm = new HashMap<>();\\n    \\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        freq=n;\\n        disc=1-(double)discount/100;    \\n        \\n        for(int i=0; i<products.length; i++) {\\n            hm.put(products[i], prices[i]);\\n        }        \\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        customer++;\\n        double bill=0;\\n        for(int i=0; i<product.length; i++) {\\n            bill+=hm.get(product[i])*amount[i];\\n        }\\n        if(customer%freq==0) {\\n            bill*=disc;\\n        }\\n        return bill;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3783262,
                "title": "c-clean-code-easy",
                "content": "\\n\\n# Code\\n```\\nclass Cashier {\\npublic:int c=0;\\n    map<int,int> p;\\n    int n;int d;\\n    Cashier(int nt, int dd, vector<int>& pr, vector<int>& price) {\\n        d=dd;\\n        n=nt;\\n        for(int i=0;i<pr.size();i++)\\n            p[pr[i]]=price[i];\\n    }\\n    \\n    double getBill(vector<int> pr, vector<int> q) {\\n        double a=0;\\n        c++;\\n        for(int i=0;i<pr.size();i++)\\n            a+=(double)p[pr[i]]*q[i];\\n        \\n        if(c%n==0)\\n        a=a*((double)(100-d)/100);\\n        return a;\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Cashier {\\npublic:int c=0;\\n    map<int,int> p;\\n    int n;int d;\\n    Cashier(int nt, int dd, vector<int>& pr, vector<int>& price) {\\n        d=dd;\\n        n=nt;\\n        for(int i=0;i<pr.size();i++)\\n            p[pr[i]]=price[i];\\n    }\\n    \\n    double getBill(vector<int> pr, vector<int> q) {\\n        double a=0;\\n        c++;\\n        for(int i=0;i<pr.size();i++)\\n            a+=(double)p[pr[i]]*q[i];\\n        \\n        if(c%n==0)\\n        a=a*((double)(100-d)/100);\\n        return a;\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3733604,
                "title": "c-easy-to-understand",
                "content": "# Intuition\\nDo what needed\\n\\n# Approach\\nStore products and prices in the map to access them easily\\n\\n# Complexity\\n- Time complexity: \\n- Constructor - $$O(P)$$ P - number of products in the store\\n- get_bill - $$O(P)$$ P - number of products to be bought\\n\\n- Space complexity: $$O(P)$$ P - number of products in the store\\n\\n# Code\\n```\\nclass Cashier {\\nprivate:\\n    const int N;\\n    const double discount;\\n    int customer_count;\\n\\n    map<int, int> table;\\n\\npublic:\\n    Cashier(int _n, int _discount, vector<int>& _products, vector<int>& _prices) : N(_n), discount((100.0 - _discount) / 100.0), customer_count(0)\\n    {  \\n        for(int i=0; i < _products.size(); i++)\\n        {\\n            table.insert( {_products[i] , _prices[i]} );\\n        }\\n        return;\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) \\n    {\\n        double bill = 0.0;\\n        // increase coustomer_count\\n        customer_count += 1;\\n\\n        // count goods\\n        for(int i=0; i < product.size(); i++)\\n        {\\n            bill += table[ product[i] ] * (double)amount[i];\\n        }\\n\\n        // coustomer_count == N -> apply discount, reset the counter;\\n        if(customer_count == N)\\n        {\\n            bill *= discount;\\n            customer_count = 0;\\n        }\\n\\n        return bill;\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table",
                    "Design"
                ],
                "code": "```\\nclass Cashier {\\nprivate:\\n    const int N;\\n    const double discount;\\n    int customer_count;\\n\\n    map<int, int> table;\\n\\npublic:\\n    Cashier(int _n, int _discount, vector<int>& _products, vector<int>& _prices) : N(_n), discount((100.0 - _discount) / 100.0), customer_count(0)\\n    {  \\n        for(int i=0; i < _products.size(); i++)\\n        {\\n            table.insert( {_products[i] , _prices[i]} );\\n        }\\n        return;\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) \\n    {\\n        double bill = 0.0;\\n        // increase coustomer_count\\n        customer_count += 1;\\n\\n        // count goods\\n        for(int i=0; i < product.size(); i++)\\n        {\\n            bill += table[ product[i] ] * (double)amount[i];\\n        }\\n\\n        // coustomer_count == N -> apply discount, reset the counter;\\n        if(customer_count == N)\\n        {\\n            bill *= discount;\\n            customer_count = 0;\\n        }\\n\\n        return bill;\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3651485,
                "title": "easy-to-understand-javascript-solution",
                "content": "```\\nvar Cashier = function(n, discount, products, prices) {\\n    this.n = n;\\n    this.nth = 0;\\n    this.discount = (100 - discount) / 100;\\n    this.productsMap = products.reduce((map, product, index) => {\\n        return map.set(product, prices[index]);\\n    }, new Map());\\n};\\n\\nCashier.prototype.getBill = function(product, amount) {\\n    this.nth += 1;\\n    const isDiscount = this.nth % this.n === 0;\\n    const bill = product.reduce((result, p, index) => {\\n        const price = this.productsMap.get(p);\\n\\n        return result + price * amount[index];\\n    }, 0);\\n\\n    return isDiscount ? bill * this.discount : bill;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar Cashier = function(n, discount, products, prices) {\\n    this.n = n;\\n    this.nth = 0;\\n    this.discount = (100 - discount) / 100;\\n    this.productsMap = products.reduce((map, product, index) => {\\n        return map.set(product, prices[index]);\\n    }, new Map());\\n};\\n\\nCashier.prototype.getBill = function(product, amount) {\\n    this.nth += 1;\\n    const isDiscount = this.nth % this.n === 0;\\n    const bill = product.reduce((result, p, index) => {\\n        const price = this.productsMap.get(p);\\n\\n        return result + price * amount[index];\\n    }, 0);\\n\\n    return isDiscount ? bill * this.discount : bill;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3639579,
                "title": "apply-discount-every-n-orders-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n# Code\\n```\\nclass Cashier {\\npublic:\\n    int m, dis;\\n    unordered_map<int,int> mp;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        m = n;\\n        dis = discount;\\n        for(int i=0 ; i<products.size() ; i++)\\n        {\\n            mp[products[i]] = prices[i];\\n        }\\n    }\\n    int count=0;\\n    double getBill(vector<int> product, vector<int> amount) {\\n        count++;\\n        double bill=0;\\n        for(int i=0 ; i<product.size() ; i++)\\n        {\\n            bill += mp[product[i]]*amount[i];\\n        }\\n        if(count==m)\\n        {\\n            bill = bill*(100-dis)/100;\\n            count=0;\\n        }\\n        return bill;\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```\\n![upvote new.jpg](https://assets.leetcode.com/users/images/706d0bac-b96f-4cc9-86e7-4d7b13d45e2a_1686802279.640041.jpeg)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Cashier {\\npublic:\\n    int m, dis;\\n    unordered_map<int,int> mp;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        m = n;\\n        dis = discount;\\n        for(int i=0 ; i<products.size() ; i++)\\n        {\\n            mp[products[i]] = prices[i];\\n        }\\n    }\\n    int count=0;\\n    double getBill(vector<int> product, vector<int> amount) {\\n        count++;\\n        double bill=0;\\n        for(int i=0 ; i<product.size() ; i++)\\n        {\\n            bill += mp[product[i]]*amount[i];\\n        }\\n        if(count==m)\\n        {\\n            bill = bill*(100-dis)/100;\\n            count=0;\\n        }\\n        return bill;\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3585840,
                "title": "python-easy-solution-using-dict",
                "content": "```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.dis = discount / 100\\n        self.currentCustomer = 0\\n        self.n = n\\n        self.products = {i: j for i, j in  zip(products, prices)}\\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        self.currentCustomer += 1\\n        bill = sum([(self.products[i] * j) for i, j in zip(product, amount)])\\n        return bill * (1 - self.dis) if self.currentCustomer % self.n == 0 else bill\\n\\n\\n# Your Cashier object will be instantiated and called as such:\\n# obj = Cashier(n, discount, products, prices)\\n# param_1 = obj.getBill(product,amount)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Hash Table",
                    "Design"
                ],
                "code": "```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.dis = discount / 100\\n        self.currentCustomer = 0\\n        self.n = n\\n        self.products = {i: j for i, j in  zip(products, prices)}\\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        self.currentCustomer += 1\\n        bill = sum([(self.products[i] * j) for i, j in zip(product, amount)])\\n        return bill * (1 - self.dis) if self.currentCustomer % self.n == 0 else bill\\n\\n\\n# Your Cashier object will be instantiated and called as such:\\n# obj = Cashier(n, discount, products, prices)\\n# param_1 = obj.getBill(product,amount)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3581171,
                "title": "simple-implementation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Cashier {\\n        private int counts;\\n        private int discount;\\n        private int[] products;\\n        private int[] prices;\\n        private int customerCount;\\n        public Cashier(int n, int discount, int[] products, int[] prices)\\n        {\\n            this.counts = n;\\n            this.discount = discount;\\n            this.products = products;\\n            this.prices = prices;\\n            this.customerCount = 0;\\n        }\\n\\n        public double GetBill(int[] product, int[] amount)\\n        {\\n            customerCount++;\\n            double total = 0;\\n\\n            for (int i = 0; i < product.Length; i++)\\n            {\\n                int indexer = 0;\\n                while (product[i] != products[indexer]) \\n                {\\n                    indexer++;\\n                }\\n                total += (double)amount[i] * prices[indexer];\\n            }\\n\\n             if(customerCount%counts == 0)\\n             {\\n                 total = total * ((100.00 - discount) / 100.00);\\n             }\\n   \\n\\n            return total;\\n        }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.GetBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Cashier {\\n        private int counts;\\n        private int discount;\\n        private int[] products;\\n        private int[] prices;\\n        private int customerCount;\\n        public Cashier(int n, int discount, int[] products, int[] prices)\\n        {\\n            this.counts = n;\\n            this.discount = discount;\\n            this.products = products;\\n            this.prices = prices;\\n            this.customerCount = 0;\\n        }\\n\\n        public double GetBill(int[] product, int[] amount)\\n        {\\n            customerCount++;\\n            double total = 0;\\n\\n            for (int i = 0; i < product.Length; i++)\\n            {\\n                int indexer = 0;\\n                while (product[i] != products[indexer]) \\n                {\\n                    indexer++;\\n                }\\n                total += (double)amount[i] * prices[indexer];\\n            }\\n\\n             if(customerCount%counts == 0)\\n             {\\n                 total = total * ((100.00 - discount) / 100.00);\\n             }\\n   \\n\\n            return total;\\n        }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.GetBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3556998,
                "title": "simple-solution-using-map-in-c",
                "content": "\\n# Complexity\\n- Time complexity:\\n O(N) N is product length\\n\\n- Space complexity:\\nO(N)\\n\\n# Code\\n```\\npublic class Cashier {\\n    int nth = 0;\\n    int customerCount = 0;\\n    int dis = 0;\\n    Dictionary<int,int> map;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        dis = discount;\\n        nth = n;\\n        map = new Dictionary<int,int>();\\n        for(int i = 0;i < products.Length;i++){\\n            map[products[i]] = prices[i];\\n        }\\n    }  \\n    public double GetBill(int[] product, int[] amount) {\\n        customerCount++;\\n        double bill = 0;\\n        for(int i=0;i<product.Length;i++){\\n            bill += map[product[i]] * amount[i];\\n        } \\n        if(customerCount == nth) //give discount\\n        {\\n            customerCount = 0; \\n            bill = bill * ((double)(100 - dis) / 100);\\n        }\\n        return bill;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.GetBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "C#",
                    "Hash Table"
                ],
                "code": "```\\npublic class Cashier {\\n    int nth = 0;\\n    int customerCount = 0;\\n    int dis = 0;\\n    Dictionary<int,int> map;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        dis = discount;\\n        nth = n;\\n        map = new Dictionary<int,int>();\\n        for(int i = 0;i < products.Length;i++){\\n            map[products[i]] = prices[i];\\n        }\\n    }  \\n    public double GetBill(int[] product, int[] amount) {\\n        customerCount++;\\n        double bill = 0;\\n        for(int i=0;i<product.Length;i++){\\n            bill += map[product[i]] * amount[i];\\n        } \\n        if(customerCount == nth) //give discount\\n        {\\n            customerCount = 0; \\n            bill = bill * ((double)(100 - dis) / 100);\\n        }\\n        return bill;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.GetBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3524450,
                "title": "java-short-and-simple",
                "content": "```\\nclass Cashier {\\n    int[] map = new int[201];\\n    int n, discount, cur;\\n    \\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n=n;\\n        this.discount=discount;\\n        for (int i=0;i<products.length;i++) map[products[i]]=prices[i];\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        cur++;\\n        var sum = 0.;\\n        for (int i=0;i<amount.length;i++) sum+=amount[i]*map[product[i]];\\n        return cur%n!=0? sum : (sum/100.)*(100-discount);\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Cashier {\\n    int[] map = new int[201];\\n    int n, discount, cur;\\n    \\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n=n;\\n        this.discount=discount;\\n        for (int i=0;i<products.length;i++) map[products[i]]=prices[i];\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        cur++;\\n        var sum = 0.;\\n        for (int i=0;i<amount.length;i++) sum+=amount[i]*map[product[i]];\\n        return cur%n!=0? sum : (sum/100.)*(100-discount);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3514118,
                "title": "python3-good-enough",
                "content": "``` Python3 []\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.lucky = n\\n        self.discount = discount\\n        self.costs = {}\\n        self.customers = 0\\n\\n        for i in range(len(products)):\\n            self.costs[products[i]] = prices[i]\\n        \\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        self.customers += 1\\n\\n        bill = sum(self.costs[product[i]]*amount[i] for i in range(len(product)))\\n\\n        if self.customers % self.lucky == 0:\\n            bill *= (100-self.discount) / 100\\n        \\n        return bill\\n        \\n\\n\\n# Your Cashier object will be instantiated and called as such:\\n# obj = Cashier(n, discount, products, prices)\\n# param_1 = obj.getBill(product,amount)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "``` Python3 []\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.lucky = n\\n        self.discount = discount\\n        self.costs = {}\\n        self.customers = 0\\n\\n        for i in range(len(products)):\\n            self.costs[products[i]] = prices[i]\\n        \\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        self.customers += 1\\n\\n        bill = sum(self.costs[product[i]]*amount[i] for i in range(len(product)))\\n\\n        if self.customers % self.lucky == 0:\\n            bill *= (100-self.discount) / 100\\n        \\n        return bill\\n        \\n\\n\\n# Your Cashier object will be instantiated and called as such:\\n# obj = Cashier(n, discount, products, prices)\\n# param_1 = obj.getBill(product,amount)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3456743,
                "title": "c-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nUse an $$HashMap$$ to store the price of each product.\\nKeep a counter of how many custumers have been paying so far.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nIf the current number of customers is equal to $$n$$, apply the discount to the subtotal. Then reset the count.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(M*P)$$ where:\\n- $$M$$ $$=$$ $$# customers$$;\\n- $$P$$ $$=$$ $$# products$$ of each customer\\n\\nSpace complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(N)$$, where $$N$$ $$=$$ number of products in the store.\\n# Code\\n```\\nclass Cashier {\\n    int currCust; \\n    const int n;\\n    const int discount;\\n    unordered_map<int, int> prodsAndPrices;\\npublic:\\n    Cashier(int n_, int discount_, vector<int>& products_, vector<int>& prices_) :\\n        currCust(0),\\n        n(n_),\\n        discount(discount_) {\\n            for (int i = 0; i < products_.size(); i++)\\n                prodsAndPrices[products_[i]] = prices_[i];\\n        }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        currCust++;\\n        double subtotal = 0;\\n        for (int i = 0; i < product.size(); i++) \\n            subtotal += amount[i] * (prodsAndPrices[product[i]]);\\n\\n        if (currCust == n) {\\n            currCust = 0; \\n            subtotal *= double(100 - discount) / 100;\\n        }\\n        return subtotal;\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Cashier {\\n    int currCust; \\n    const int n;\\n    const int discount;\\n    unordered_map<int, int> prodsAndPrices;\\npublic:\\n    Cashier(int n_, int discount_, vector<int>& products_, vector<int>& prices_) :\\n        currCust(0),\\n        n(n_),\\n        discount(discount_) {\\n            for (int i = 0; i < products_.size(); i++)\\n                prodsAndPrices[products_[i]] = prices_[i];\\n        }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        currCust++;\\n        double subtotal = 0;\\n        for (int i = 0; i < product.size(); i++) \\n            subtotal += amount[i] * (prodsAndPrices[product[i]]);\\n\\n        if (currCust == n) {\\n            currCust = 0; \\n            subtotal *= double(100 - discount) / 100;\\n        }\\n        return subtotal;\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3414950,
                "title": "easy-java-solution-using-hashmap",
                "content": "\\n\\n# Code\\n```\\nclass Cashier {\\n    int ind = 0;\\n    int nth;\\n    int discounts;\\n    HashMap<Integer,Integer> map;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        nth = n;\\n        discounts = discount;\\n        map = new HashMap<Integer,Integer>();\\n        for(int i=0;i<products.length;i++){\\n            map.put(products[i],prices[i]);\\n        }\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double total = 0;\\n        ind++;\\n        for(int i=0;i<product.length;i++){\\n            total += amount[i]*map.get(product[i]);\\n        }    \\n        if(ind==nth){\\n            total = (double)(total*(100 - discounts) / 100);\\n            ind = 0;\\n        }\\n        return total;\\n    }\\n\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Cashier {\\n    int ind = 0;\\n    int nth;\\n    int discounts;\\n    HashMap<Integer,Integer> map;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        nth = n;\\n        discounts = discount;\\n        map = new HashMap<Integer,Integer>();\\n        for(int i=0;i<products.length;i++){\\n            map.put(products[i],prices[i]);\\n        }\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double total = 0;\\n        ind++;\\n        for(int i=0;i<product.length;i++){\\n            total += amount[i]*map.get(product[i]);\\n        }    \\n        if(ind==nth){\\n            total = (double)(total*(100 - discounts) / 100);\\n            ind = 0;\\n        }\\n        return total;\\n    }\\n\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3362548,
                "title": "java-easy-solution",
                "content": "# Code\\n```\\nclass Cashier {\\n\\n    public int count = 0;\\n    public int[] arr= new int[201];\\n    public int n;\\n    public int discount;\\n\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n = n;\\n        this.discount = discount;\\n        for(int i = 0;i < products.length;i++){\\n            arr[products[i]] = prices[i];\\n        }\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double total = 0;\\n        for(int i = 0;i<product.length;i++){\\n            total += arr[product[i]]*amount[i]*(1.0);\\n        }\\n        count++;\\n        if(count % n == 0){\\n            total = total*(100 - discount)/100;\\n        }\\n        return total;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Cashier {\\n\\n    public int count = 0;\\n    public int[] arr= new int[201];\\n    public int n;\\n    public int discount;\\n\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n = n;\\n        this.discount = discount;\\n        for(int i = 0;i < products.length;i++){\\n            arr[products[i]] = prices[i];\\n        }\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double total = 0;\\n        for(int i = 0;i<product.length;i++){\\n            total += arr[product[i]]*amount[i]*(1.0);\\n        }\\n        count++;\\n        if(count % n == 0){\\n            total = total*(100 - discount)/100;\\n        }\\n        return total;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3362346,
                "title": "easy-c-solution",
                "content": "\\n# Code\\n```\\nclass Cashier {\\npublic:\\n   int n,discount,cnt=0;\\n   vector<int>products,prices;\\n   map<int,int>mp;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        this->n=n;\\n        this->products=products;\\n        this->prices=prices;\\n        this->discount=discount;\\n        for (int i=0;i<products.size();i++)\\n        {\\n            mp[products[i]]=i;\\n        }\\n    }\\n    double getBill(vector<int> product, vector<int> amount) {\\n        cnt++;\\n        double bill=0.0;\\n        for (int i=0;i<product.size();i++)\\n        {\\n            bill+=(prices[mp[product[i]]]*amount[i]);\\n        }\\n        if (cnt==n)\\n        {\\n            bill=(double)(bill*(double)(100-discount)/100);\\n            cnt=0;\\n        }\\n        return bill;\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Cashier {\\npublic:\\n   int n,discount,cnt=0;\\n   vector<int>products,prices;\\n   map<int,int>mp;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        this->n=n;\\n        this->products=products;\\n        this->prices=prices;\\n        this->discount=discount;\\n        for (int i=0;i<products.size();i++)\\n        {\\n            mp[products[i]]=i;\\n        }\\n    }\\n    double getBill(vector<int> product, vector<int> amount) {\\n        cnt++;\\n        double bill=0.0;\\n        for (int i=0;i<product.size();i++)\\n        {\\n            bill+=(prices[mp[product[i]]]*amount[i]);\\n        }\\n        if (cnt==n)\\n        {\\n            bill=(double)(bill*(double)(100-discount)/100);\\n            cnt=0;\\n        }\\n        return bill;\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3351825,
                "title": "beats-100-in-both-time-and-space-complexity",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: `O(no_of_products)` to generate dictionary and `O(no_of_products_in_bill)` for `getBill()` \\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: `O(no_of_products)` for dictionary.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Submission\\nhttps://leetcode.com/submissions/detail/923648029/\\n\\n# Code\\n```\\nclass Cashier(object):\\n\\n    def __init__(self, n, discount, products, prices):\\n        \"\"\"\\n        :type n: int\\n        :type discount: int\\n        :type products: List[int]\\n        :type prices: List[int]\\n        \"\"\"\\n        self.count = 0 # Total no of customers till now\\n        self.n = n # n\\'th customer with discount\\n        self.discount = discount\\n        self.product_prices = {}\\n        for i, prod in enumerate(products):\\n            self.product_prices[prod] = prices[i]\\n        \\n\\n    def getBill(self, product, amount):\\n        \"\"\"\\n        :type product: List[int]\\n        :type amount: List[int]\\n        :rtype: float\\n        \"\"\"\\n        bill = 0\\n        self.count += 1\\n        for i, prod in enumerate(product):\\n            bill += amount[i] * self.product_prices[prod]\\n        \\n        if self.count % self.n == 0: # Discount for nth customer\\n            bill = bill *((100 - self.discount) / 100.0)\\n        \\n        return bill\\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Cashier(object):\\n\\n    def __init__(self, n, discount, products, prices):\\n        \"\"\"\\n        :type n: int\\n        :type discount: int\\n        :type products: List[int]\\n        :type prices: List[int]\\n        \"\"\"\\n        self.count = 0 # Total no of customers till now\\n        self.n = n # n\\'th customer with discount\\n        self.discount = discount\\n        self.product_prices = {}\\n        for i, prod in enumerate(products):\\n            self.product_prices[prod] = prices[i]\\n        \\n\\n    def getBill(self, product, amount):\\n        \"\"\"\\n        :type product: List[int]\\n        :type amount: List[int]\\n        :rtype: float\\n        \"\"\"\\n        bill = 0\\n        self.count += 1\\n        for i, prod in enumerate(product):\\n            bill += amount[i] * self.product_prices[prod]\\n        \\n        if self.count % self.n == 0: # Discount for nth customer\\n            bill = bill *((100 - self.discount) / 100.0)\\n        \\n        return bill\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3344090,
                "title": "hashmap-easy-and-simple-java-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Cashier {\\n    int count;\\n    Map<Integer,Integer>mp;\\n    int dis;\\n    int totalCos;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        count = 0;\\n        mp = new HashMap<>();\\n        this.dis = discount;\\n        this.totalCos = n;\\n\\n        for(int i = 0; i < products.length; i++){\\n            mp.put(products[i],prices[i]);\\n        }\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        count++;\\n        double bill = 0;\\n\\n        for(int i = 0; i < product.length; i++){\\n            bill += mp.get(product[i])* amount[i];\\n        }\\n\\n        if(count == totalCos){\\n            count = 0;\\n            return bill * (100 - dis)/100;\\n        }else{\\n            return bill;\\n        }\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Cashier {\\n    int count;\\n    Map<Integer,Integer>mp;\\n    int dis;\\n    int totalCos;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        count = 0;\\n        mp = new HashMap<>();\\n        this.dis = discount;\\n        this.totalCos = n;\\n\\n        for(int i = 0; i < products.length; i++){\\n            mp.put(products[i],prices[i]);\\n        }\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        count++;\\n        double bill = 0;\\n\\n        for(int i = 0; i < product.length; i++){\\n            bill += mp.get(product[i])* amount[i];\\n        }\\n\\n        if(count == totalCos){\\n            count = 0;\\n            return bill * (100 - dis)/100;\\n        }else{\\n            return bill;\\n        }\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3333904,
                "title": "c-hashmap",
                "content": "```\\nclass Cashier {\\npublic:\\n    int counter = 0;\\n    int disc;\\n    double d;\\n    map<double, double> m;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        disc = n;\\n        d = 100 - discount;\\n        for (int i = 0; i < products.size(); ++i)\\n            m[products[i]] = prices[i];\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        double ans = 0;\\n        // apply discount\\n        for (int i = 0; i < product.size(); ++i){\\n            double next = m[product[i]];\\n            next *= amount[i];\\n            ans += next;\\n        }\\n        if (++counter % disc == 0){\\n            ans *= d;\\n            ans /= 100;\\n        }\\n        return ans;\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "solutionTags": [],
                "code": "```\\nclass Cashier {\\npublic:\\n    int counter = 0;\\n    int disc;\\n    double d;\\n    map<double, double> m;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        disc = n;\\n        d = 100 - discount;\\n        for (int i = 0; i < products.size(); ++i)\\n            m[products[i]] = prices[i];\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        double ans = 0;\\n        // apply discount\\n        for (int i = 0; i < product.size(); ++i){\\n            double next = m[product[i]];\\n            next *= amount[i];\\n            ans += next;\\n        }\\n        if (++counter % disc == 0){\\n            ans *= d;\\n            ans /= 100;\\n        }\\n        return ans;\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3305805,
                "title": "python-clear-solution",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThat\\'s pretty much self-explanatory. Store the prices in dictionary for speed.\\nValue \"c\" counts if it\\'s time to give a discount.\\n\\n\\n# Code\\n```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.n = n\\n        self.c = 1\\n        self.d = discount\\n        self.cat = {x:y for (x,y) in zip(products,prices)}\\n\\n        \\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        res = 0\\n        for i in range(len(amount)):\\n            res += self.cat[product[i]]*amount[i]\\n        if self.c == self.n:\\n            res *= (100-self.d)/100\\n            self.c =1\\n        else: self.c +=1\\n        return res\\n\\n\\n\\n\\n# Your Cashier object will be instantiated and called as such:\\n# obj = Cashier(n, discount, products, prices)\\n# param_1 = obj.getBill(product,amount)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.n = n\\n        self.c = 1\\n        self.d = discount\\n        self.cat = {x:y for (x,y) in zip(products,prices)}\\n\\n        \\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        res = 0\\n        for i in range(len(amount)):\\n            res += self.cat[product[i]]*amount[i]\\n        if self.c == self.n:\\n            res *= (100-self.d)/100\\n            self.c =1\\n        else: self.c +=1\\n        return res\\n\\n\\n\\n\\n# Your Cashier object will be instantiated and called as such:\\n# obj = Cashier(n, discount, products, prices)\\n# param_1 = obj.getBill(product,amount)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3290496,
                "title": "hashing-very-easy-c-solution",
                "content": "# Code\\n```\\nclass Cashier \\n{\\npublic:\\n    int n, d, cnt;\\n    map<int,int> m;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) \\n    {\\n        this->n=n;\\n        d=discount;\\n        cnt=0;\\n        int p=products.size();\\n        for(int x=0; x<p; x++) m[products[x]]=prices[x];\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) \\n    {\\n        cnt++;\\n        double bill=0;\\n        int p=product.size();\\n        for(int x=0; x<p; x++)\\n        {\\n            bill+=(double)(m[product[x]]*amount[x]);\\n        }\\n        if(cnt==n)\\n        {\\n            cnt=0;\\n            bill=bill*((100-d)/100.0);\\n        }\\n        return bill;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Cashier \\n{\\npublic:\\n    int n, d, cnt;\\n    map<int,int> m;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) \\n    {\\n        this->n=n;\\n        d=discount;\\n        cnt=0;\\n        int p=products.size();\\n        for(int x=0; x<p; x++) m[products[x]]=prices[x];\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) \\n    {\\n        cnt++;\\n        double bill=0;\\n        int p=product.size();\\n        for(int x=0; x<p; x++)\\n        {\\n            bill+=(double)(m[product[x]]*amount[x]);\\n        }\\n        if(cnt==n)\\n        {\\n            cnt=0;\\n            bill=bill*((100-d)/100.0);\\n        }\\n        return bill;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3239260,
                "title": "accepted-swift",
                "content": "```\\nclass Cashier {\\n\\n    private let prices: [Int: Int]\\n    private let discount: Double\\n    private let n: Int\\n    private var i = 0\\n\\n    init(_ n: Int, _ discount: Int, _ products: [Int], _ prices: [Int]) {\\n        self.n = n\\n        self.discount = 1 - Double(discount) / 100\\n        self.prices = zip(products, prices).reduce(into: [Int: Int]()) { $0[$1.0] = $1.1 }\\n    }\\n    \\n    func getBill(_ product: [Int], _ amount: [Int]) -> Double {\\n        i += 1\\n        let price = zip(product, amount).map({ prices[$0]! * $1 }).reduce(0, +)\\n        return (i % n != 0) ? Double(price) : Double(price) * discount\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Cashier {\\n\\n    private let prices: [Int: Int]\\n    private let discount: Double\\n    private let n: Int\\n    private var i = 0\\n\\n    init(_ n: Int, _ discount: Int, _ products: [Int], _ prices: [Int]) {\\n        self.n = n\\n        self.discount = 1 - Double(discount) / 100\\n        self.prices = zip(products, prices).reduce(into: [Int: Int]()) { $0[$1.0] = $1.1 }\\n    }\\n    \\n    func getBill(_ product: [Int], _ amount: [Int]) -> Double {\\n        i += 1\\n        let price = zip(product, amount).map({ prices[$0]! * $1 }).reduce(0, +)\\n        return (i % n != 0) ? Double(price) : Double(price) * discount\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3238873,
                "title": "c",
                "content": "```\\nclass Cashier {\\n    int n ; \\n    int discount ;\\n    int totalCustomer ;\\n    unordered_map<int, int>product2price ;\\npublic:    \\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        this->n = n ;\\n        this->discount = discount ;\\n        this->totalCustomer = 0 ;\\n        for(int i = 0; i < products.size(); i++)\\n        {\\n            product2price[products[i]] = prices[i] ;\\n        }\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        double cost = 0 ;\\n        totalCustomer++ ;\\n        for(int i = 0; i < product.size(); i++)\\n        {\\n            cost += (product2price[product[i]] * amount[i]) ;    \\n        }\\n        \\n        if(totalCustomer % n == 0)\\n            return cost* (100 - discount)/100;\\n        \\n        return cost ;\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "solutionTags": [],
                "code": "```\\nclass Cashier {\\n    int n ; \\n    int discount ;\\n    int totalCustomer ;\\n    unordered_map<int, int>product2price ;\\npublic:    \\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        this->n = n ;\\n        this->discount = discount ;\\n        this->totalCustomer = 0 ;\\n        for(int i = 0; i < products.size(); i++)\\n        {\\n            product2price[products[i]] = prices[i] ;\\n        }\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        double cost = 0 ;\\n        totalCustomer++ ;\\n        for(int i = 0; i < product.size(); i++)\\n        {\\n            cost += (product2price[product[i]] * amount[i]) ;    \\n        }\\n        \\n        if(totalCustomer % n == 0)\\n            return cost* (100 - discount)/100;\\n        \\n        return cost ;\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3226007,
                "title": "easy-to-understand-simple-hashing",
                "content": "# Code\\n```\\nclass Cashier {\\npublic:\\n    int N;\\n    int dis;\\n    int counter;\\n    unordered_map<int,int>mp;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) \\n    {\\n          N = n;\\n          dis = discount;\\n          counter = 0;\\n          for(int i=0;i<products.size();i++)\\n          {\\n              int productid = products[i];\\n              int price = prices[i];\\n\\n              mp[productid] = price;\\n          }   \\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) \\n    {\\n        counter = counter + 1;\\n\\n        double bill = 0.00;\\n\\n        for(int i=0;i<product.size();i++)\\n        {\\n            bill = bill + (amount[i] * mp[product[i]]);\\n        }\\n\\n        if(counter == (N))\\n        {\\n            //apply discount\\n            bill = bill - (bill * (dis/100.00));\\n            counter = 0;\\n        }\\n\\n        return bill;\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Hash Table",
                    "Design"
                ],
                "code": "```\\nclass Cashier {\\npublic:\\n    int N;\\n    int dis;\\n    int counter;\\n    unordered_map<int,int>mp;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) \\n    {\\n          N = n;\\n          dis = discount;\\n          counter = 0;\\n          for(int i=0;i<products.size();i++)\\n          {\\n              int productid = products[i];\\n              int price = prices[i];\\n\\n              mp[productid] = price;\\n          }   \\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) \\n    {\\n        counter = counter + 1;\\n\\n        double bill = 0.00;\\n\\n        for(int i=0;i<product.size();i++)\\n        {\\n            bill = bill + (amount[i] * mp[product[i]]);\\n        }\\n\\n        if(counter == (N))\\n        {\\n            //apply discount\\n            bill = bill - (bill * (dis/100.00));\\n            counter = 0;\\n        }\\n\\n        return bill;\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3172768,
                "title": "using-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n# Code\\n```\\nclass Cashier {\\n\\n    HashMap<Integer,Integer> hm;\\n    int n;\\n    int discount;\\n    int i = 0;\\n    int length = 0;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        hm = new HashMap<>();\\n        this.n = n;\\n        this.discount = discount;\\n        \\n        this.length = products.length;\\n        doMap(products,prices);\\n    }\\n    public void doMap(int[] products,int[] prices){\\n        for(int j=0; j<length; j++){\\n            hm.put(products[j],prices[j]);\\n        }\\n    }\\n    public double getBill(int[] product, int[] amount) {\\n        i++;\\n        double subTotal = 0;\\n        int length = product.length;\\n        for(int j=0; j<length; j++){\\n            subTotal += hm.get(product[j])*amount[j];\\n        }\\n        if(i%n ==0){\\n            subTotal = subTotal*(100-discount)/100;\\n        }\\n        return subTotal;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Cashier {\\n\\n    HashMap<Integer,Integer> hm;\\n    int n;\\n    int discount;\\n    int i = 0;\\n    int length = 0;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        hm = new HashMap<>();\\n        this.n = n;\\n        this.discount = discount;\\n        \\n        this.length = products.length;\\n        doMap(products,prices);\\n    }\\n    public void doMap(int[] products,int[] prices){\\n        for(int j=0; j<length; j++){\\n            hm.put(products[j],prices[j]);\\n        }\\n    }\\n    public double getBill(int[] product, int[] amount) {\\n        i++;\\n        double subTotal = 0;\\n        int length = product.length;\\n        for(int j=0; j<length; j++){\\n            subTotal += hm.get(product[j])*amount[j];\\n        }\\n        if(i%n ==0){\\n            subTotal = subTotal*(100-discount)/100;\\n        }\\n        return subTotal;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3103846,
                "title": "just-a-runnable-solution",
                "content": "# Code\\n```\\nuse std::collections::HashMap;\\n\\nstruct Cashier {\\n    n: i32,\\n    discount: i32,\\n    products: HashMap<i32, i32>,\\n    count: i32,\\n}\\n\\nimpl Cashier {\\n    fn new(n: i32, discount: i32, products: Vec<i32>, prices: Vec<i32>) -> Self {\\n        let mut map = HashMap::new();\\n        for i in 0..products.len() {\\n            map.insert(products[i], prices[i]);\\n        }\\n        Cashier {\\n            n,\\n            discount,\\n            products: map,\\n            count: 0,\\n        }\\n    }\\n\\n    fn get_bill(&mut self, product: Vec<i32>, amount: Vec<i32>) -> f64 {\\n        self.count += 1;\\n        let mut total = 0;\\n        for i in 0..product.len() {\\n            total += self.products[&product[i]] * amount[i];\\n        }\\n        if self.count == self.n {\\n            self.count = 0;\\n            total as f64 * (100.0 - self.discount as f64) / 100.0\\n        } else {\\n            total as f64\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nuse std::collections::HashMap;\\n\\nstruct Cashier {\\n    n: i32,\\n    discount: i32,\\n    products: HashMap<i32, i32>,\\n    count: i32,\\n}\\n\\nimpl Cashier {\\n    fn new(n: i32, discount: i32, products: Vec<i32>, prices: Vec<i32>) -> Self {\\n        let mut map = HashMap::new();\\n        for i in 0..products.len() {\\n            map.insert(products[i], prices[i]);\\n        }\\n        Cashier {\\n            n,\\n            discount,\\n            products: map,\\n            count: 0,\\n        }\\n    }\\n\\n    fn get_bill(&mut self, product: Vec<i32>, amount: Vec<i32>) -> f64 {\\n        self.count += 1;\\n        let mut total = 0;\\n        for i in 0..product.len() {\\n            total += self.products[&product[i]] * amount[i];\\n        }\\n        if self.count == self.n {\\n            self.count = 0;\\n            total as f64 * (100.0 - self.discount as f64) / 100.0\\n        } else {\\n            total as f64\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3073976,
                "title": "fast-java-solution-using-hashmap",
                "content": "\\n# Code\\n```\\nclass Cashier {\\n    int n,discount,customerCount = 0;\\n    HashMap<Integer,Integer> price = new HashMap<>();\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n = n;\\n        this.discount = discount;\\n        for(int i=0;i<products.length;i++)\\n            price.put(products[i],prices[i]);\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        customerCount++;\\n        double bill = 0;\\n        for(int i=0;i<product.length;i++)\\n            bill += amount[i]*price.get(product[i]);\\n        if(customerCount%n==0)\\n            bill = (double)(bill*(100-discount)/100);\\n        return bill;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Cashier {\\n    int n,discount,customerCount = 0;\\n    HashMap<Integer,Integer> price = new HashMap<>();\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n = n;\\n        this.discount = discount;\\n        for(int i=0;i<products.length;i++)\\n            price.put(products[i],prices[i]);\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        customerCount++;\\n        double bill = 0;\\n        for(int i=0;i<product.length;i++)\\n            bill += amount[i]*price.get(product[i]);\\n        if(customerCount%n==0)\\n            bill = (double)(bill*(100-discount)/100);\\n        return bill;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3018565,
                "title": "100-faster-easy-and-readable-solution-typescript-js",
                "content": "\\n\\n# Code\\n```\\nclass Cashier {\\n    protected products_prices: {[product_id: number]: number};\\n    protected LUCKY_NUMBER: number;\\n    protected discount: number;\\n    protected customer_count: number;\\n    constructor(n: number, discount: number, products: number[], prices: number[]) {\\n        this.products_prices = {};\\n        for (let i = 0; i < products.length; i += 1){\\n            this.products_prices[products[i]] = prices[i];\\n        }\\n        this.LUCKY_NUMBER = n;\\n        this.discount = discount;\\n        this.customer_count = 0;\\n    }\\n\\n    getBill(product: number[], amount: number[]): number {\\n        let total_bill: number = 0;\\n        this.customer_count += 1;\\n        for (let i = 0; i < product.length; i += 1){\\n            let subtotal_bill: number = amount[i] * this.products_prices[product[i]];\\n            total_bill += subtotal_bill;\\n        }\\n        // if (this.customer_count === this.LUCKY_NUMBER){\\n        if (this.customer_count % this.LUCKY_NUMBER === 0){\\n            // this.customer_count = 0;\\n            return total_bill * ((100-this.discount)/100);\\n        }\\n        return total_bill;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * var obj = new Cashier(n, discount, products, prices)\\n * var param_1 = obj.getBill(product,amount)\\n */",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript",
                    "Array",
                    "Hash Table",
                    "Design"
                ],
                "code": "\\n\\n# Code\\n```\\nclass Cashier {\\n    protected products_prices: {[product_id: number]: number};\\n    protected LUCKY_NUMBER: number;\\n    protected discount: number;\\n    protected customer_count: number;\\n    constructor(n: number, discount: number, products: number[], prices: number[]) {\\n        this.products_prices = {};\\n        for (let i = 0; i < products.length; i += 1){\\n            this.products_prices[products[i]] = prices[i];\\n        }\\n        this.LUCKY_NUMBER = n;\\n        this.discount = discount;\\n        this.customer_count = 0;\\n    }\\n\\n    getBill(product: number[], amount: number[]): number {\\n        let total_bill: number = 0;\\n        this.customer_count += 1;\\n        for (let i = 0; i < product.length; i += 1){\\n            let subtotal_bill: number = amount[i] * this.products_prices[product[i]];\\n            total_bill += subtotal_bill;\\n        }\\n        // if (this.customer_count === this.LUCKY_NUMBER){\\n        if (this.customer_count % this.LUCKY_NUMBER === 0){\\n            // this.customer_count = 0;\\n            return total_bill * ((100-this.discount)/100);\\n        }\\n        return total_bill;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * var obj = new Cashier(n, discount, products, prices)\\n * var param_1 = obj.getBill(product,amount)\\n */",
                "codeTag": "Java"
            },
            {
                "id": 2962170,
                "title": "easiest-solution-c-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Cashier {\\n    int ind = 0,discN,disc;\\n    map<int,int> mp;\\npublic:\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        discN=n;\\n        disc=discount;\\n        for(int i=0;i<products.size();i++) mp[products[i]]=prices[i];\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        double ans = 0;\\n        ind++;\\n        for(int i=0;i<product.size();i++){\\n            ans+=(amount[i]*mp[product[i]]);\\n        }\\n        if(ind%discN==0) return ans*((100.00-disc)/100.00);\\n        return ans;\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Cashier {\\n    int ind = 0,discN,disc;\\n    map<int,int> mp;\\npublic:\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        discN=n;\\n        disc=discount;\\n        for(int i=0;i<products.size();i++) mp[products[i]]=prices[i];\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        double ans = 0;\\n        ind++;\\n        for(int i=0;i<product.size();i++){\\n            ans+=(amount[i]*mp[product[i]]);\\n        }\\n        if(ind%discN==0) return ans*((100.00-disc)/100.00);\\n        return ans;\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2958686,
                "title": "golang-map",
                "content": "# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$ O(n) $$\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$ O(n) $$\\n# Code\\n```\\ntype Cashier struct {\\n    Map map[int]int \\n    n int\\n    discount int\\n    cust_no int\\n}\\n\\n\\nfunc Constructor(n int, discount int, products []int, prices []int) Cashier {\\n    var p Cashier\\n    p.Map = make(map[int]int)\\n    for i := 0; i < len(products); i++ {\\n        p.Map[products[i]] = prices[i]\\n    }\\n    p.n = n\\n    p.discount = discount\\n    p.cust_no = 0\\n    return p\\n}\\n\\n\\nfunc (this *Cashier) GetBill(product []int, amount []int) float64 {\\n    this.cust_no++\\n    var total float64 = 0.0\\n    for i := 0; i < len(product); i++ {\\n        total += float64(amount[i] * this.Map[product[i]])\\n    }\\n    if this.cust_no % this.n == 0 {\\n        total = (100 - float64(this.discount)) * total / 100\\n    }\\n    return total\\n}\\n\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * obj := Constructor(n, discount, products, prices);\\n * param_1 := obj.GetBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "Go",
                    "Array",
                    "Hash Table",
                    "Design"
                ],
                "code": "```\\ntype Cashier struct {\\n    Map map[int]int \\n    n int\\n    discount int\\n    cust_no int\\n}\\n\\n\\nfunc Constructor(n int, discount int, products []int, prices []int) Cashier {\\n    var p Cashier\\n    p.Map = make(map[int]int)\\n    for i := 0; i < len(products); i++ {\\n        p.Map[products[i]] = prices[i]\\n    }\\n    p.n = n\\n    p.discount = discount\\n    p.cust_no = 0\\n    return p\\n}\\n\\n\\nfunc (this *Cashier) GetBill(product []int, amount []int) float64 {\\n    this.cust_no++\\n    var total float64 = 0.0\\n    for i := 0; i < len(product); i++ {\\n        total += float64(amount[i] * this.Map[product[i]])\\n    }\\n    if this.cust_no % this.n == 0 {\\n        total = (100 - float64(this.discount)) * total / 100\\n    }\\n    return total\\n}\\n\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * obj := Constructor(n, discount, products, prices);\\n * param_1 := obj.GetBill(product,amount);\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2958600,
                "title": "c-map",
                "content": "# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$ O(n) $$\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$ O(n) $$\\n# Code\\n```\\nclass Cashier {\\n    map<int, int> Map;\\n    int n;\\n    int discount;\\n    int cust_no;\\npublic:\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        for(int i = 0; i < products.size(); i++) {\\n            Map[products[i]] = prices[i];\\n        }\\n        this -> n = n;\\n        this -> discount = discount;\\n        cust_no = 0;\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        cust_no++;\\n        double total = 0.0;\\n        for(int i = 0; i < product.size(); i++) {\\n            total += (amount[i] * Map[product[i]]);\\n        }\\n        if(cust_no % n == 0) \\n            total = (100 - discount) * total / 100;\\n        return total;\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Hash Table",
                    "Design"
                ],
                "code": "```\\nclass Cashier {\\n    map<int, int> Map;\\n    int n;\\n    int discount;\\n    int cust_no;\\npublic:\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        for(int i = 0; i < products.size(); i++) {\\n            Map[products[i]] = prices[i];\\n        }\\n        this -> n = n;\\n        this -> discount = discount;\\n        cust_no = 0;\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        cust_no++;\\n        double total = 0.0;\\n        for(int i = 0; i < product.size(); i++) {\\n            total += (amount[i] * Map[product[i]]);\\n        }\\n        if(cust_no % n == 0) \\n            total = (100 - discount) * total / 100;\\n        return total;\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2917195,
                "title": "python-3-solution-runtime-754-ms-beats-95-52-memory-22-3-mb-beats-96-27",
                "content": "\\n# Code\\n```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.n = n\\n        self.product_prices = {}\\n        for i in range(len(products)):\\n            self.product_prices[products[i]] = prices[i] \\n        #self.prices = prices\\n        self.cust_num = 0\\n        self.discount = discount\\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        self.cust_num += 1\\n        bill = 0\\n        for i in range(len(product)):\\n            bill += self.product_prices[product[i]] * amount[i]\\n        #print(bill)\\n        #print(self.cust_num)\\n        if (self.cust_num % self.n == 0):\\n            bill = bill - ((self.discount / 100) * bill)\\n        return bill\\n\\n         \\n\\n\\n# Your Cashier object will be instantiated and called as such:\\n# obj = Cashier(n, discount, products, prices)\\n# param_1 = obj.getBill(product,amount)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.n = n\\n        self.product_prices = {}\\n        for i in range(len(products)):\\n            self.product_prices[products[i]] = prices[i] \\n        #self.prices = prices\\n        self.cust_num = 0\\n        self.discount = discount\\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        self.cust_num += 1\\n        bill = 0\\n        for i in range(len(product)):\\n            bill += self.product_prices[product[i]] * amount[i]\\n        #print(bill)\\n        #print(self.cust_num)\\n        if (self.cust_num % self.n == 0):\\n            bill = bill - ((self.discount / 100) * bill)\\n        return bill\\n\\n         \\n\\n\\n# Your Cashier object will be instantiated and called as such:\\n# obj = Cashier(n, discount, products, prices)\\n# param_1 = obj.getBill(product,amount)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2887894,
                "title": "java-hashmap-solution",
                "content": "# Complexity\\n- Time complexity:\\nCashier constructor -> O(n) where n size of products/prices array\\nGet bill -> O(n) where n size of products/amounts array\\n\\n- Space complexity:\\nO(n) where n size of products defined in constructor to store in hashmap\\n\\n# Code\\n```\\nclass Cashier {\\n\\n    int counter = 1;\\n    int n;\\n    int discount;\\n    HashMap<Integer,Integer> idPriceMap = new HashMap();\\n\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n = n;\\n        this.discount = discount;\\n        for (int i = 0; i < products.length; i++) {\\n            idPriceMap.put(products[i], prices[i]);\\n        }\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double totalBill = 0;\\n        for (int i = 0; i < product.length; i++) {\\n            int productId = product[i];\\n            totalBill += idPriceMap.getOrDefault(productId, 0) * amount[i];\\n        }\\n\\n        if (counter == n) {\\n            //apply discount\\n            counter = 1;\\n            double discountedBill = totalBill * (100-discount)/100;\\n            return discountedBill;\\n        } \\n\\n        counter++;\\n        return totalBill;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Cashier {\\n\\n    int counter = 1;\\n    int n;\\n    int discount;\\n    HashMap<Integer,Integer> idPriceMap = new HashMap();\\n\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n = n;\\n        this.discount = discount;\\n        for (int i = 0; i < products.length; i++) {\\n            idPriceMap.put(products[i], prices[i]);\\n        }\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double totalBill = 0;\\n        for (int i = 0; i < product.length; i++) {\\n            int productId = product[i];\\n            totalBill += idPriceMap.getOrDefault(productId, 0) * amount[i];\\n        }\\n\\n        if (counter == n) {\\n            //apply discount\\n            counter = 1;\\n            double discountedBill = totalBill * (100-discount)/100;\\n            return discountedBill;\\n        } \\n\\n        counter++;\\n        return totalBill;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2880710,
                "title": "runtime-faster-than-97-78-of-python3-online-submissions",
                "content": "```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.n = n\\n        self.discount = discount\\n        self.products = {v: k for k, v in enumerate(products)}\\n        self.prices = prices\\n        self.count = 0\\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        self.count += 1\\n        bill = 0\\n        for i in range(len(product)):\\n            bill += amount[i] * self.prices[self.products[product[i]]]\\n        return bill * ((100 - self.discount) / 100) if self.count % self.n == 0 else bill\\n```\\n![image](https://assets.leetcode.com/users/images/02189378-7767-4742-b22a-ca8679026bbf_1670253921.519156.png)\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.n = n\\n        self.discount = discount\\n        self.products = {v: k for k, v in enumerate(products)}\\n        self.prices = prices\\n        self.count = 0\\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        self.count += 1\\n        bill = 0\\n        for i in range(len(product)):\\n            bill += amount[i] * self.prices[self.products[product[i]]]\\n        return bill * ((100 - self.discount) / 100) if self.count % self.n == 0 else bill\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2825724,
                "title": "c-hashmap-and-modulo",
                "content": "Average complexity. Don\\'t know if this is optimal.\\n\\n```\\nclass Cashier {\\npublic:\\n    int n;\\n    int discount;\\n    unordered_map<int,int> indices;\\n    vector<int> prices;\\n    int customers;\\n    \\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        this->n = n;\\n        this->discount = discount;\\n        this->prices = prices;\\n        this->customers = 0;\\n        for (int k = 0; k < products.size(); k++) {\\n            this->indices[products[k]] = k;\\n        }\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        customers++;\\n        int subtotal = 0;\\n        for (int k = 0; k < product.size(); k++) {\\n            subtotal += amount[k]*prices[indices[product[k]]];\\n        }\\n        return subtotal*(!(customers % n) ? 0.01*(100 - discount) : 1);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Cashier {\\npublic:\\n    int n;\\n    int discount;\\n    unordered_map<int,int> indices;\\n    vector<int> prices;\\n    int customers;\\n    \\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        this->n = n;\\n        this->discount = discount;\\n        this->prices = prices;\\n        this->customers = 0;\\n        for (int k = 0; k < products.size(); k++) {\\n            this->indices[products[k]] = k;\\n        }\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        customers++;\\n        int subtotal = 0;\\n        for (int k = 0; k < product.size(); k++) {\\n            subtotal += amount[k]*prices[indices[product[k]]];\\n        }\\n        return subtotal*(!(customers % n) ? 0.01*(100 - discount) : 1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2792843,
                "title": "c-solution",
                "content": "\\tclass Cashier {\\n\\tpublic:\\n    int n , discount, cnt;\\n    vector<int> map; //used to map the productId -> Price\\n    \\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        this->n = n;\\n        this -> discount = discount;\\n        map = vector<int>(201);\\n        cnt = 0;\\n        for(int i = 0; i < products.size(); i++){\\n            this->map[products[i]] = prices[i]; \\n        }\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        cnt++;\\n        int bill = 0;\\n        for(int i = 0; i < product.size(); i++){\\n            int id = product[i];\\n            bill += map[id] * amount[i];\\n        }\\n        if(cnt % n == 0)\\n            return bill * ((100.0 - discount)/100.0);\\n        return bill;\\n    }\\n\\t};",
                "solutionTags": [
                    "C"
                ],
                "code": "\\tclass Cashier {\\n\\tpublic:\\n    int n , discount, cnt;\\n    vector<int> map; //used to map the productId -> Price\\n    \\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        this->n = n;\\n        this -> discount = discount;\\n        map = vector<int>(201);\\n        cnt = 0;\\n        for(int i = 0; i < products.size(); i++){\\n            this->map[products[i]] = prices[i]; \\n        }\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        cnt++;\\n        int bill = 0;\\n        for(int i = 0; i < product.size(); i++){\\n            int id = product[i];\\n            bill += map[id] * amount[i];\\n        }\\n        if(cnt % n == 0)\\n            return bill * ((100.0 - discount)/100.0);\\n        return bill;\\n    }\\n\\t};",
                "codeTag": "Java"
            },
            {
                "id": 2766928,
                "title": "swift-solution",
                "content": "```\\n// Apply discount every n orders\\n// Leetcode: https://leetcode.com/problems/apply-discount-every-n-orders/\\n\\nclass Cashier {\\n    var n: Int\\n    var discount: Int\\n    var products: [Int: Int]\\n    var count: Int\\n    \\n    init(_ n: Int, _ discount: Int, _ products: [Int], _ prices: [Int]) {\\n        self.n = n\\n        self.discount = discount\\n        self.products = [:]\\n        self.count = 0\\n        \\n        for i in 0..<products.count {\\n            self.products[products[i]] = prices[i]\\n        }\\n    }\\n    \\n    func getBill(_ product: [Int], _ amount: [Int]) -> Double {\\n        var total = 0.0\\n        for i in 0..<product.count {\\n            total += Double(amount[i]) * Double(products[product[i]]!)\\n        }\\n        \\n        count += 1\\n        if count == n {\\n            count = 0\\n            total -= total * Double(discount) / 100.0\\n        }\\n        \\n        return total\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\n// Apply discount every n orders\\n// Leetcode: https://leetcode.com/problems/apply-discount-every-n-orders/\\n\\nclass Cashier {\\n    var n: Int\\n    var discount: Int\\n    var products: [Int: Int]\\n    var count: Int\\n    \\n    init(_ n: Int, _ discount: Int, _ products: [Int], _ prices: [Int]) {\\n        self.n = n\\n        self.discount = discount\\n        self.products = [:]\\n        self.count = 0\\n        \\n        for i in 0..<products.count {\\n            self.products[products[i]] = prices[i]\\n        }\\n    }\\n    \\n    func getBill(_ product: [Int], _ amount: [Int]) -> Double {\\n        var total = 0.0\\n        for i in 0..<product.count {\\n            total += Double(amount[i]) * Double(products[product[i]]!)\\n        }\\n        \\n        count += 1\\n        if count == n {\\n            count = 0\\n            total -= total * Double(discount) / 100.0\\n        }\\n        \\n        return total\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2742353,
                "title": "python-fast-and-clear",
                "content": "```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.product_price = {pid: price for pid, price in zip(products, prices)}\\n        self.n = n\\n        self.discount = discount\\n        self.bills = 0\\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        total = 0\\n        for p, a in zip(product, amount):\\n            total += a * self.product_price[p]\\n            \\n        self.bills += 1\\n        if self.bills % self.n == 0:\\n            total = (100 - self.discount) * total / 100\\n            \\n        return total\\n        ```",
                "solutionTags": [],
                "code": "```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.product_price = {pid: price for pid, price in zip(products, prices)}\\n        self.n = n\\n        self.discount = discount\\n        self.bills = 0\\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        total = 0\\n        for p, a in zip(product, amount):\\n            total += a * self.product_price[p]\\n            \\n        self.bills += 1\\n        if self.bills % self.n == 0:\\n            total = (100 - self.discount) * total / 100\\n            \\n        return total\\n        ```",
                "codeTag": "Java"
            },
            {
                "id": 2725095,
                "title": "easy-cpp-solution-hashmap",
                "content": "```\\nclass Cashier {\\npublic:\\n    int dis;\\n    int disIndex;\\n    map <int,int> mp;\\n    int count = 0;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        dis = discount;\\n        disIndex = n;\\n        \\n        for(int i=0;i<products.size();i++){\\n            mp[products[i]] = prices[i];\\n        }\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        count++;\\n        \\n        double bill = 0.0;\\n        \\n        for(int i=0;i<product.size();i++){\\n            bill += double(mp[product[i]]) * double(amount[i]);\\n        }\\n        \\n        if( count % disIndex == 0){\\n            bill = bill * ((100-double(dis))/100.0);\\n        }\\n        \\n        return bill;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Cashier {\\npublic:\\n    int dis;\\n    int disIndex;\\n    map <int,int> mp;\\n    int count = 0;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        dis = discount;\\n        disIndex = n;\\n        \\n        for(int i=0;i<products.size();i++){\\n            mp[products[i]] = prices[i];\\n        }\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        count++;\\n        \\n        double bill = 0.0;\\n        \\n        for(int i=0;i<product.size();i++){\\n            bill += double(mp[product[i]]) * double(amount[i]);\\n        }\\n        \\n        if( count % disIndex == 0){\\n            bill = bill * ((100-double(dis))/100.0);\\n        }\\n        \\n        return bill;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2721616,
                "title": "c-hashmap-easy-approach",
                "content": "```\\nclass Cashier {\\npublic:\\n    int num = 0;\\n    unordered_map<int, int> m;\\n    double disc;\\n    int count = 1;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        num = n;\\n        for(int i = 0; i < prices.size(); i++) {\\n            m[products[i]] = prices[i];\\n        }\\n        disc = discount;\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        double bill = 0;\\n        for(int i = 0; i < amount.size(); i++) {\\n            bill = bill + (m[product[i]] * amount[i]);\\n        }\\n        if(count == num) {\\n            count = 1;\\n            bill = bill * ((100 - disc) / 100);\\n        }\\n        else\\n            count++;\\n        return bill;\\n    }\\n};\\n ```",
                "solutionTags": [],
                "code": "```\\nclass Cashier {\\npublic:\\n    int num = 0;\\n    unordered_map<int, int> m;\\n    double disc;\\n    int count = 1;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        num = n;\\n        for(int i = 0; i < prices.size(); i++) {\\n            m[products[i]] = prices[i];\\n        }\\n        disc = discount;\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        double bill = 0;\\n        for(int i = 0; i < amount.size(); i++) {\\n            bill = bill + (m[product[i]] * amount[i]);\\n        }\\n        if(count == num) {\\n            count = 1;\\n            bill = bill * ((100 - disc) / 100);\\n        }\\n        else\\n            count++;\\n        return bill;\\n    }\\n};\\n ```",
                "codeTag": "Java"
            },
            {
                "id": 2691594,
                "title": "java-easy-understanding-hashmap",
                "content": "\\n# Code\\n```\\nimport java.util.HashMap;\\nimport java.util.Map;\\n\\nclass Cashier {\\n    int n;\\n    int discount;\\n    int customers  = 0;\\n    Map<Integer, Integer> productsWithPrice;\\n    int[] prices;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n = n;\\n        this.discount = discount;\\n        productsWithPrice = mapToProductWithPrices(products, prices);\\n    }\\n\\n    private Map<Integer, Integer> mapToProductWithPrices(int[] products, int[] prices) {\\n        Map<Integer,Integer> map = new HashMap<>();\\n\\n        for (int i = 0; i < products.length; i++)\\n            map.put(products[i],prices[i]);\\n\\n        return map;\\n    }\\n\\n    public double getBill(int[] product, int[] amount) {\\n\\n        customers++;\\n        double total = 0;\\n        for (int i = 0; i < product.length; i++)\\n            total+=(productsWithPrice.get(product[i])*amount[i]);\\n\\n        if (customers%n==0)\\n           total = (total * (100 - discount) / 100);\\n\\n        return total;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nimport java.util.HashMap;\\nimport java.util.Map;\\n\\nclass Cashier {\\n    int n;\\n    int discount;\\n    int customers  = 0;\\n    Map<Integer, Integer> productsWithPrice;\\n    int[] prices;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n = n;\\n        this.discount = discount;\\n        productsWithPrice = mapToProductWithPrices(products, prices);\\n    }\\n\\n    private Map<Integer, Integer> mapToProductWithPrices(int[] products, int[] prices) {\\n        Map<Integer,Integer> map = new HashMap<>();\\n\\n        for (int i = 0; i < products.length; i++)\\n            map.put(products[i],prices[i]);\\n\\n        return map;\\n    }\\n\\n    public double getBill(int[] product, int[] amount) {\\n\\n        customers++;\\n        double total = 0;\\n        for (int i = 0; i < product.length; i++)\\n            total+=(productsWithPrice.get(product[i])*amount[i]);\\n\\n        if (customers%n==0)\\n           total = (total * (100 - discount) / 100);\\n\\n        return total;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2691208,
                "title": "python-simple-maths",
                "content": "\\n\\n    def __init__(self, n, discount, products, prices):\\n        self.n = n\\n        self.discount = discount\\n        self.dict1 = {i:j for i,j in zip(products,prices)}\\n        self.idx = 0\\n\\n    def getBill(self, product, amount):\\n        total = 0\\n        \\n        for i,j in zip(product,amount):\\n            total += j*self.dict1[i]\\n            \\n        self.idx += 1\\n            \\n        return total*((100-self.discount)/100) if self.idx%self.n == 0 else total",
                "solutionTags": [],
                "code": "\\n\\n    def __init__(self, n, discount, products, prices):\\n        self.n = n\\n        self.discount = discount\\n        self.dict1 = {i:j for i,j in zip(products,prices)}\\n        self.idx = 0\\n\\n    def getBill(self, product, amount):\\n        total = 0\\n        \\n        for i,j in zip(product,amount):\\n            total += j*self.dict1[i]\\n            \\n        self.idx += 1\\n            \\n        return total*((100-self.discount)/100) if self.idx%self.n == 0 else total",
                "codeTag": "Python3"
            },
            {
                "id": 2680573,
                "title": "c-easy-to-understand-code-clean-code",
                "content": "![image](https://assets.leetcode.com/users/images/3b9bfced-2d13-4f14-8dfa-b8151f9f66a1_1665306920.233442.png)\\n\\n\\n\\tclass Cashier {\\n\\t\\tpublic:\\n\\t\\t\\tint k=0,n,dis;\\n\\t\\t\\tmap<int,int>mp;\\n\\t\\t\\tCashier(int n, int dis, vector<int>& pro, vector<int>& pri) {\\n\\t\\t\\t\\tfor(int i=0;i<pro.size();i++) mp[pro[i]]=pri[i];\\n\\t\\t\\t\\tthis->n=n;\\n\\t\\t\\t\\tthis->dis=dis;\\n\\t\\t\\t}\\n\\n\\t\\t\\tdouble getBill(vector<int> product, vector<int> amount) {\\n\\t\\t\\t\\tk++;\\n\\t\\t\\t\\tdouble bill=0;\\n\\t\\t\\t\\tfor(int j=0;j<product.size();j++) bill+=mp[product[j]]*amount[j];\\n\\t\\t\\t\\tif(k%n==0) bill-=bill*dis*0.01;\\n\\t\\t\\t\\treturn bill;\\n\\t\\t\\t}\\n\\t\\t};\\n\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "![image](https://assets.leetcode.com/users/images/3b9bfced-2d13-4f14-8dfa-b8151f9f66a1_1665306920.233442.png)\\n\\n\\n\\tclass Cashier {\\n\\t\\tpublic:\\n\\t\\t\\tint k=0,n,dis;\\n\\t\\t\\tmap<int,int>mp;\\n\\t\\t\\tCashier(int n, int dis, vector<int>& pro, vector<int>& pri) {\\n\\t\\t\\t\\tfor(int i=0;i<pro.size();i++) mp[pro[i]]=pri[i];\\n\\t\\t\\t\\tthis->n=n;\\n\\t\\t\\t\\tthis->dis=dis;\\n\\t\\t\\t}\\n\\n\\t\\t\\tdouble getBill(vector<int> product, vector<int> amount) {\\n\\t\\t\\t\\tk++;\\n\\t\\t\\t\\tdouble bill=0;\\n\\t\\t\\t\\tfor(int j=0;j<product.size();j++) bill+=mp[product[j]]*amount[j];\\n\\t\\t\\t\\tif(k%n==0) bill-=bill*dis*0.01;\\n\\t\\t\\t\\treturn bill;\\n\\t\\t\\t}\\n\\t\\t};\\n\\n",
                "codeTag": "Java"
            },
            {
                "id": 2653505,
                "title": "python-solution-straightforward",
                "content": "```\\nclass Cashier:\\n    # Do design as instructed\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.n, self.discount = n, discount\\n        self.customer_id = 0\\n        self.hash_table = {}\\n        for prod, price in zip(products, prices):\\n            self.hash_table[prod] = price\\n        \\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        self.customer_id += 1\\n        result = 0\\n        for prod, num in zip(product, amount):\\n            result += num*self.hash_table[prod]\\n        if self.customer_id % self.n == 0:\\n            return (100-self.discount)*result / 100\\n        else:\\n            return result\\n\\n# Your Cashier object will be instantiated and called as such:\\n# obj = Cashier(n, discount, products, prices)\\n# param_1 = obj.getBill(product,amount)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Cashier:\\n    # Do design as instructed\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.n, self.discount = n, discount\\n        self.customer_id = 0\\n        self.hash_table = {}\\n        for prod, price in zip(products, prices):\\n            self.hash_table[prod] = price\\n        \\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        self.customer_id += 1\\n        result = 0\\n        for prod, num in zip(product, amount):\\n            result += num*self.hash_table[prod]\\n        if self.customer_id % self.n == 0:\\n            return (100-self.discount)*result / 100\\n        else:\\n            return result\\n\\n# Your Cashier object will be instantiated and called as such:\\n# obj = Cashier(n, discount, products, prices)\\n# param_1 = obj.getBill(product,amount)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2631910,
                "title": "python-made-easy-dictionary-explained",
                "content": "Basically we map product id to prices when we store the product price details. We also keep track of the customer number using num. When num == n, that customer wins the special discount and we reset num again to repeat the process.\\n\\nUpvote if you understood the logic :)\\n\\n```\\nclass Cashier:\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.prices = {products[i]: prices[i] for i in range(len(prices))}\\n        self.n = n\\n        self.discount = discount\\n        self.num = 0\\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        total = 0\\n        self.num += 1\\n        \\n        for i in range(len(product)):\\n            total += amount[i] * self.prices[product[i]] \\n        \\n        if self.num == self.n:\\n            total *= ((100 - self.discount) / 100)\\n            self.num = 0\\n        \\n        return total\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Cashier:\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.prices = {products[i]: prices[i] for i in range(len(prices))}\\n        self.n = n\\n        self.discount = discount\\n        self.num = 0\\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        total = 0\\n        self.num += 1\\n        \\n        for i in range(len(product)):\\n            total += amount[i] * self.prices[product[i]] \\n        \\n        if self.num == self.n:\\n            total *= ((100 - self.discount) / 100)\\n            self.num = 0\\n        \\n        return total\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2628555,
                "title": "python-straight-forward-dictionary-solution-faster-than-93",
                "content": "```python\\nclass Cashier:\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.price: Dict[int, int] = {product: price for product, price in zip(products, prices)}\\n        self.discount: int = discount\\n        self.n: int = n\\n        self.count: int = 0\\n        \\n\\n    def getBill(self, products: List[int], amounts: List[int]) -> float:\\n        self.count += 1\\n        \\n        bill = sum(self.price[product] * amount for product, amount in zip(products, amounts))\\n        if self.count % self.n == 0: bill *= ((100 - self.discount) / 100)\\n        \\n        return bill\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```python\\nclass Cashier:\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.price: Dict[int, int] = {product: price for product, price in zip(products, prices)}\\n        self.discount: int = discount\\n        self.n: int = n\\n        self.count: int = 0\\n        \\n\\n    def getBill(self, products: List[int], amounts: List[int]) -> float:\\n        self.count += 1\\n        \\n        bill = sum(self.price[product] * amount for product, amount in zip(products, amounts))\\n        if self.count % self.n == 0: bill *= ((100 - self.discount) / 100)\\n        \\n        return bill\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2591690,
                "title": "rust-solution",
                "content": "```\\nstruct Cashier {\\n    items: [i64; 201],\\n    discount: i64,\\n    discount_period: i32,\\n    counter: i32,\\n}\\n\\nimpl Cashier {\\n    fn new(n: i32, discount: i32, products: Vec<i32>, prices: Vec<i32>) -> Self {\\n        let mut array = [0i64; 201];\\n        for (product_id, price_id) in products.into_iter().zip(prices) {\\n            array[product_id as usize] = price_id as i64;\\n        }\\n\\n        Self { items: array, discount: discount as _, discount_period: n, counter: 0 }\\n    }\\n\\n    fn get_bill(&mut self, product: Vec<i32>, amount: Vec<i32>) -> f64 {\\n        let mut total = 0i64;\\n        for (product_id, quantity) in product.into_iter().zip(amount) {\\n            total += quantity as i64 * self.items[product_id as usize];\\n        }\\n\\n        self.counter += 1;\\n        if self.counter % self.discount_period == 0 {\\n            (total * (100 - self.discount)) as f64 / 100.\\n        } else {\\n            total as _\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nstruct Cashier {\\n    items: [i64; 201],\\n    discount: i64,\\n    discount_period: i32,\\n    counter: i32,\\n}\\n\\nimpl Cashier {\\n    fn new(n: i32, discount: i32, products: Vec<i32>, prices: Vec<i32>) -> Self {\\n        let mut array = [0i64; 201];\\n        for (product_id, price_id) in products.into_iter().zip(prices) {\\n            array[product_id as usize] = price_id as i64;\\n        }\\n\\n        Self { items: array, discount: discount as _, discount_period: n, counter: 0 }\\n    }\\n\\n    fn get_bill(&mut self, product: Vec<i32>, amount: Vec<i32>) -> f64 {\\n        let mut total = 0i64;\\n        for (product_id, quantity) in product.into_iter().zip(amount) {\\n            total += quantity as i64 * self.items[product_id as usize];\\n        }\\n\\n        self.counter += 1;\\n        if self.counter % self.discount_period == 0 {\\n            (total * (100 - self.discount)) as f64 / 100.\\n        } else {\\n            total as _\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2582190,
                "title": "explained-using-doubles-and-map",
                "content": "Visit my Youtube channel for\\n-> videos about developing intuition for difficult coding concepts\\n-> using intuition for solving some good coding questions\\n\\nhttps://www.youtube.com/channel/UC-3Ceh2I6aDerx98d5r2rsQ\\n\\n------------------------------------------------------------------------\\n**Explanation:**\\nThe code will have 2 parts:\\n1. Initialization\\n2. Computation\\n\\n* Initialization:\\n\\t*  Here we can store the product vs price in 2 arrays as given in the question, BUT it will be better to use hashmap.\\n\\t* Using map will enable us to get the price of the `ith` product in `O(1)` time by using the expression: `mp[product[i]]`.\\n\\n* Computation:\\n\\t* This part is also fairly simple, just first keep adding the `(price of each product) * (quantity)`.\\n\\t* To calculate the discount, \\n\\t\\t* keep track of `customer_count` .\\n\\t\\t* once the `customer_count == nth`\\n\\t\\t\\t* initialize the `customer_count = 0`\\n\\t\\t\\t* **Pay attention while calculating the discount**\\n\\t\\t\\t\\t* you need to make sure `1/2` gives `0.5` and not `0`\\n\\t\\t\\t\\t* One way to do it is involve a double value in calculation like : `amt = ((amt*(100 - discount))/100);`\\n\\t\\t\\t\\t*here amt is a double value.*\\n\\n**Code:**\\n```\\nclass Cashier {\\npublic:\\n    int discount;\\n    int nth;\\n    int currCust = 0;\\n    \\n    unordered_map<int, int> mp;\\n    Cashier(int n, int dis, vector<int>& prod, vector<int>& prices) {\\n        discount = dis;\\n        nth = n;\\n        \\n        for(int i=0; i<prod.size(); i++){\\n            mp[prod[i]] = prices[i];\\n        }\\n        \\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        double amt = 0.0;\\n        for(int i=0; i<product.size(); i++){\\n            amt += (double)(mp[product[i]]*amount[i]);\\n        }\\n        \\n        currCust++;\\n        if(currCust == nth){\\n            currCust = 0;\\n            amt = ((amt*(100 - discount))/100);\\n        }\\n        return amt;\\n        \\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Cashier {\\npublic:\\n    int discount;\\n    int nth;\\n    int currCust = 0;\\n    \\n    unordered_map<int, int> mp;\\n    Cashier(int n, int dis, vector<int>& prod, vector<int>& prices) {\\n        discount = dis;\\n        nth = n;\\n        \\n        for(int i=0; i<prod.size(); i++){\\n            mp[prod[i]] = prices[i];\\n        }\\n        \\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        double amt = 0.0;\\n        for(int i=0; i<product.size(); i++){\\n            amt += (double)(mp[product[i]]*amount[i]);\\n        }\\n        \\n        currCust++;\\n        if(currCust == nth){\\n            currCust = 0;\\n            amt = ((amt*(100 - discount))/100);\\n        }\\n        return amt;\\n        \\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2553250,
                "title": "simple-map-solution-c",
                "content": "**Please upvote if you like my solution .**\\n```\\nclass Cashier {\\npublic:\\n    int N;\\n    int orderNo;\\n    int cut;\\n    map<int,int> pr;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        N = n;\\n        orderNo = 0;\\n        cut = discount;\\n        for(int i=0;i<products.size();i++){\\n            pr[products[i]] = prices[i];\\n        }\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        orderNo++;\\n        double amt = 0;\\n        for(int i=0;i<product.size();i++){\\n            amt += amount[i]*pr[product[i]];\\n        }\\n        if(orderNo%N == 0){\\n            amt = amt*((1.0)*(100 - cut)/100);\\n        }\\n        return amt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Cashier {\\npublic:\\n    int N;\\n    int orderNo;\\n    int cut;\\n    map<int,int> pr;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        N = n;\\n        orderNo = 0;\\n        cut = discount;\\n        for(int i=0;i<products.size();i++){\\n            pr[products[i]] = prices[i];\\n        }\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        orderNo++;\\n        double amt = 0;\\n        for(int i=0;i<product.size();i++){\\n            amt += amount[i]*pr[product[i]];\\n        }\\n        if(orderNo%N == 0){\\n            amt = amt*((1.0)*(100 - cut)/100);\\n        }\\n        return amt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2508539,
                "title": "100-efficient-solution",
                "content": "```\\nclass Cashier {\\n     int arr[]=new int[202];\\n    int dis=0,a=0,customer=0;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        a=n; dis=discount;\\n        for(int i=0;i<products.length;i++){\\n            arr[products[i]]=prices[i];\\n        }\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double paybill=0;\\n        customer++;\\n        for(int i=0;i<product.length;i++){\\n            paybill+=arr[product[i]]*amount[i];\\n        }\\n        if(customer%a==0 && customer!=0){\\n            paybill=paybill*(100-dis)/100;\\n        }\\n        return paybill;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n ```",
                "solutionTags": [],
                "code": "```\\nclass Cashier {\\n     int arr[]=new int[202];\\n    int dis=0,a=0,customer=0;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        a=n; dis=discount;\\n        for(int i=0;i<products.length;i++){\\n            arr[products[i]]=prices[i];\\n        }\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double paybill=0;\\n        customer++;\\n        for(int i=0;i<product.length;i++){\\n            paybill+=arr[product[i]]*amount[i];\\n        }\\n        if(customer%a==0 && customer!=0){\\n            paybill=paybill*(100-dis)/100;\\n        }\\n        return paybill;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n ```",
                "codeTag": "Java"
            },
            {
                "id": 2476815,
                "title": "python-simple-solution",
                "content": "class Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.k, self.cur, self.discount = n, 0, discount/100\\n        self.prices = dict(zip(products, prices))\\n        \\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        ans = sum(self.prices[p]*m for p, m in zip(product, amount))\\n        self.cur = (self.cur+1) % self.k\\n        return ans if self.cur else ans*(1-self.discount)",
                "solutionTags": [],
                "code": "class Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.k, self.cur, self.discount = n, 0, discount/100\\n        self.prices = dict(zip(products, prices))\\n        \\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        ans = sum(self.prices[p]*m for p, m in zip(product, amount))\\n        self.cur = (self.cur+1) % self.k\\n        return ans if self.cur else ans*(1-self.discount)",
                "codeTag": "Java"
            },
            {
                "id": 2471528,
                "title": "faster-than-100-o-n-by-hashmap",
                "content": "![image](https://assets.leetcode.com/users/images/c4631673-2440-4de0-b111-1fe25b262a18_1661316385.0550418.png)\\n\\n\\n```\\nvar Cashier = function(n, discount, products, prices) {\\n    this.every = n;\\n    this.count = 0;\\n    this.dis = ((100-discount) / 100);\\n    this.super = {};\\n    \\n    for(let i=0; i<products.length; i++){\\n        this.super[products[i]] = prices[i];\\n    }\\n    \\n};\\n\\nCashier.prototype.getBill = function(product, amount) {\\n    this.count++;\\n    let sum = 0;\\n    \\n    for(let i=0; i<product.length; i++){\\n        sum += this.super[product[i]]*amount[i];\\n    }\\n    \\n    if(this.count == this.every){\\n        this.count = 0;\\n        return sum * this.dis;\\n    }\\n    \\n    return sum;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar Cashier = function(n, discount, products, prices) {\\n    this.every = n;\\n    this.count = 0;\\n    this.dis = ((100-discount) / 100);\\n    this.super = {};\\n    \\n    for(let i=0; i<products.length; i++){\\n        this.super[products[i]] = prices[i];\\n    }\\n    \\n};\\n\\nCashier.prototype.getBill = function(product, amount) {\\n    this.count++;\\n    let sum = 0;\\n    \\n    for(let i=0; i<product.length; i++){\\n        sum += this.super[product[i]]*amount[i];\\n    }\\n    \\n    if(this.count == this.every){\\n        this.count = 0;\\n        return sum * this.dis;\\n    }\\n    \\n    return sum;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2433084,
                "title": "c-dictionary-and-linq",
                "content": "```\\npublic class Cashier {\\n    \\n    private Dictionary<int, int> m_Prices;\\n    \\n    private double m_Discount;\\n    private int m_Count; \\n    \\n    private int m_Index = 0;\\n\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        m_Prices = products\\n            .Zip(prices, (k, v) => (k : k, v : v))\\n            .ToDictionary(p => p.k, p => p.v);\\n                \\n        m_Count = n;\\n        m_Discount = discount;\\n    }\\n    \\n    public double GetBill(int[] product, int[] amount) {\\n        m_Index += 1;\\n                \\n        double result = product\\n            .Zip(amount, (p, a) => (double)m_Prices[p] * a)\\n            .Sum();\\n        \\n        if (++m_Index % m_Count == 0)\\n            result *= (100.0 - m_Discount) / 100.0;\\n               \\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Cashier {\\n    \\n    private Dictionary<int, int> m_Prices;\\n    \\n    private double m_Discount;\\n    private int m_Count; \\n    \\n    private int m_Index = 0;\\n\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        m_Prices = products\\n            .Zip(prices, (k, v) => (k : k, v : v))\\n            .ToDictionary(p => p.k, p => p.v);\\n                \\n        m_Count = n;\\n        m_Discount = discount;\\n    }\\n    \\n    public double GetBill(int[] product, int[] amount) {\\n        m_Index += 1;\\n                \\n        double result = product\\n            .Zip(amount, (p, a) => (double)m_Prices[p] * a)\\n            .Sum();\\n        \\n        if (++m_Index % m_Count == 0)\\n            result *= (100.0 - m_Discount) / 100.0;\\n               \\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2429104,
                "title": "easy-python-solution",
                "content": "```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.n = n \\n        self.discount = discount \\n        self.products = products \\n        self.prices = prices \\n        self.counter = 0\\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        self.counter += 1 \\n        discount_flag = False\\n        if self.counter % self.n == 0 : \\n            discount_flag = True \\n            self.counter = 0\\n        \\n        bill_amount = 0 \\n        for i in range(len(amount)) : \\n            index = self.products.index(product[i])\\n            bill_amount += amount[i] * self.prices[index]\\n            \\n        if discount_flag : \\n            bill_amount = bill_amount * ((100 - self.discount)/100)\\n            \\n        return bill_amount \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.n = n \\n        self.discount = discount \\n        self.products = products \\n        self.prices = prices \\n        self.counter = 0\\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        self.counter += 1 \\n        discount_flag = False\\n        if self.counter % self.n == 0 : \\n            discount_flag = True \\n            self.counter = 0\\n        \\n        bill_amount = 0 \\n        for i in range(len(amount)) : \\n            index = self.products.index(product[i])\\n            bill_amount += amount[i] * self.prices[index]\\n            \\n        if discount_flag : \\n            bill_amount = bill_amount * ((100 - self.discount)/100)\\n            \\n        return bill_amount \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2369016,
                "title": "java-solution-catalogue-as-hashmap",
                "content": "```\\nclass Cashier {\\n    private Map<Integer, Integer> catalogue;\\n    \\n    private int n;\\n    private double discount;\\n    private int orderNumber;\\n    \\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.catalogue = new HashMap<>();\\n        \\n        for (int i = 0; i < prices.length; i++) {\\n            this.catalogue.put(products[i], prices[i]);\\n        }\\n        \\n        this.n = n;\\n        this.discount = ((double) 100 - discount)/100;\\n        this.orderNumber = 0;\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        this.orderNumber++;\\n        \\n        double bill = 0.0;\\n        for (int i = 0; i < amount.length; i++) {\\n            int p = product[i];\\n            int price = this.catalogue.get(p);\\n            bill += price*amount[i];\\n        }\\n        \\n        if (this.orderNumber % n == 0)\\n            bill *= this.discount;\\n        \\n        return bill;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Cashier {\\n    private Map<Integer, Integer> catalogue;\\n    \\n    private int n;\\n    private double discount;\\n    private int orderNumber;\\n    \\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.catalogue = new HashMap<>();\\n        \\n        for (int i = 0; i < prices.length; i++) {\\n            this.catalogue.put(products[i], prices[i]);\\n        }\\n        \\n        this.n = n;\\n        this.discount = ((double) 100 - discount)/100;\\n        this.orderNumber = 0;\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        this.orderNumber++;\\n        \\n        double bill = 0.0;\\n        for (int i = 0; i < amount.length; i++) {\\n            int p = product[i];\\n            int price = this.catalogue.get(p);\\n            bill += price*amount[i];\\n        }\\n        \\n        if (this.orderNumber % n == 0)\\n            bill *= this.discount;\\n        \\n        return bill;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2338493,
                "title": "ruby-solution-faster-and-less-than-100",
                "content": "```\\nRuntime: 351 ms, faster than 100.00% of Ruby online submissions for Apply Discount Every n Orders.\\nMemory Usage: 220.2 MB, less than 100.00% of Ruby online submissions for Apply Discount Every n Orders.\\n```\\n\\n```\\nclass Cashier\\n    attr_reader :n, :discount, :products, :prices\\n=begin\\n    :type n: Integer\\n    :type discount: Integer\\n    :type products: Integer[]\\n    :type prices: Integer[]\\n=end\\n    def initialize(n, discount, products, prices)\\n        @n = n\\n        @discount = discount\\n        @products = products\\n        @prices = prices.map(&:to_f)\\n        @current_n = 0\\n    end\\n\\n=begin\\n    :type product: Integer[]\\n    :type amount: Integer[]\\n    :rtype: Float\\n=end\\n    def get_bill(product, amount)\\n        @current_n += 1\\n        \\n        bill_price(product, amount)\\n    end\\n    \\n    private\\n    \\n    def bill_price(product, amount)\\n        return total_price(product, amount) if (@current_n % n).nonzero?\\n        \\n        total_price(product, amount) / (100.0 / (100 - discount))\\n    end\\n    \\n    def total_price(product, amount)\\n        product.each_with_index.reduce(0) do |bill, (p, i)|\\n            prices[products.index(p)] * amount[i] + bill\\n        end\\n    end\\nend\\n\\n# Your Cashier object will be instantiated and called as such:\\n# obj = Cashier.new(n, discount, products, prices)\\n# param_1 = obj.get_bill(product, amount)\\n```",
                "solutionTags": [],
                "code": "```\\nRuntime: 351 ms, faster than 100.00% of Ruby online submissions for Apply Discount Every n Orders.\\nMemory Usage: 220.2 MB, less than 100.00% of Ruby online submissions for Apply Discount Every n Orders.\\n```\n```\\nclass Cashier\\n    attr_reader :n, :discount, :products, :prices\\n=begin\\n    :type n: Integer\\n    :type discount: Integer\\n    :type products: Integer[]\\n    :type prices: Integer[]\\n=end\\n    def initialize(n, discount, products, prices)\\n        @n = n\\n        @discount = discount\\n        @products = products\\n        @prices = prices.map(&:to_f)\\n        @current_n = 0\\n    end\\n\\n=begin\\n    :type product: Integer[]\\n    :type amount: Integer[]\\n    :rtype: Float\\n=end\\n    def get_bill(product, amount)\\n        @current_n += 1\\n        \\n        bill_price(product, amount)\\n    end\\n    \\n    private\\n    \\n    def bill_price(product, amount)\\n        return total_price(product, amount) if (@current_n % n).nonzero?\\n        \\n        total_price(product, amount) / (100.0 / (100 - discount))\\n    end\\n    \\n    def total_price(product, amount)\\n        product.each_with_index.reduce(0) do |bill, (p, i)|\\n            prices[products.index(p)] * amount[i] + bill\\n        end\\n    end\\nend\\n\\n# Your Cashier object will be instantiated and called as such:\\n# obj = Cashier.new(n, discount, products, prices)\\n# param_1 = obj.get_bill(product, amount)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2285000,
                "title": "c-array-time-o-n-space-o-n",
                "content": "If using hash map\\n* \\'key\\' is  ID, \\'value\\' is price\\n* fully utilize the space\\n* relatively slower memory accessibility in terms of calculation of hash and rehash\\n\\nIf using array\\n* \\'index\\' is ID, \\'value\\' is price\\n* generally we have to know the range of IDs for preserving the size of array\\n* some of redundant memoy blocks, relatively use more space to hash map\\n* relatively faster memory accessibility\\n```\\n// complexity analysis in general cases\\n// time: O(n)\\n// space: O(n)\\n\\nclass Cashier {\\npublic:\\n  Cashier(int n, int discount, vector<int>& products, vector<int>& prices)\\n    : customerCount(0), nth(n), discount((100 - discount) / 100.0) {\\n    \\n    for (int i = 0; i < products.size(); i++) {\\n      int id = products[i], price = prices[i];\\n      productPrices[id] = price;\\n    }\\n  }\\n  \\n  double getBill(vector<int> product, vector<int> amount) {\\n    double bill = 0;\\n    for (int i = 0; i < product.size(); i++) {\\n      int id = product[i], price = productPrices[id], qty = amount[i];\\n      bill += price * qty;\\n    }\\n    return bill * (++customerCount % nth ? 1 : discount);\\n  }\\n  \\nprivate:\\n  int customerCount, nth;\\n  double discount;\\n  array<int, 201> productPrices { 0 };\\n};\\n```\\n\\nThanks for watching : )",
                "solutionTags": [],
                "code": "```\\n// complexity analysis in general cases\\n// time: O(n)\\n// space: O(n)\\n\\nclass Cashier {\\npublic:\\n  Cashier(int n, int discount, vector<int>& products, vector<int>& prices)\\n    : customerCount(0), nth(n), discount((100 - discount) / 100.0) {\\n    \\n    for (int i = 0; i < products.size(); i++) {\\n      int id = products[i], price = prices[i];\\n      productPrices[id] = price;\\n    }\\n  }\\n  \\n  double getBill(vector<int> product, vector<int> amount) {\\n    double bill = 0;\\n    for (int i = 0; i < product.size(); i++) {\\n      int id = product[i], price = productPrices[id], qty = amount[i];\\n      bill += price * qty;\\n    }\\n    return bill * (++customerCount % nth ? 1 : discount);\\n  }\\n  \\nprivate:\\n  int customerCount, nth;\\n  double discount;\\n  array<int, 201> productPrices { 0 };\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2262340,
                "title": "easy-java-solution-using-hashmap",
                "content": "```\\nclass Cashier {\\n    private int count = 0;\\n    private HashMap<Integer, Integer> map = new HashMap<>();\\n    private double discountFactor;\\n    private int n;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        for(int i = 0; i < products.length; i++){\\n            map.put(products[i], prices[i]);\\n        }\\n        discountFactor = (double)(100-discount)/100;\\n        this.n = n;\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        count++;\\n        double bill = 0;\\n        for(int i = 0; i < product.length; i++){\\n            bill += map.get(product[i])*amount[i];\\n        }\\n        if(count == n){\\n            bill = bill*(discountFactor);\\n            count = 0;\\n        }\\n        return bill;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Cashier {\\n    private int count = 0;\\n    private HashMap<Integer, Integer> map = new HashMap<>();\\n    private double discountFactor;\\n    private int n;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        for(int i = 0; i < products.length; i++){\\n            map.put(products[i], prices[i]);\\n        }\\n        discountFactor = (double)(100-discount)/100;\\n        this.n = n;\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        count++;\\n        double bill = 0;\\n        for(int i = 0; i < product.length; i++){\\n            bill += map.get(product[i])*amount[i];\\n        }\\n        if(count == n){\\n            bill = bill*(discountFactor);\\n            count = 0;\\n        }\\n        return bill;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2230268,
                "title": "easy-js-solution",
                "content": "```\\nvar Cashier = function(n, discount, products, prices) {\\n    this.n = n;\\n    this.cc = 0;\\n    this.discount = (100 - discount) / 100;\\n    this.products = new Map();\\n    const len = products.length;\\n    for(let i = 0; i < len; i++) {\\n        this.products.set(products[i], prices[i]);\\n    }\\n};\\n\\n\\nCashier.prototype.getBill = function(product, amount) {\\n    let total = 0, len = product.length;\\n    for(let i = 0; i < len; i++) {\\n        total += amount[i] * this.products.get(product[i]);\\n    }\\n    this.cc++;\\n    if(this.cc % this.n == 0) {\\n        total = total * this.discount;\\n        this.cc = 0;\\n    }\\n    return total;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar Cashier = function(n, discount, products, prices) {\\n    this.n = n;\\n    this.cc = 0;\\n    this.discount = (100 - discount) / 100;\\n    this.products = new Map();\\n    const len = products.length;\\n    for(let i = 0; i < len; i++) {\\n        this.products.set(products[i], prices[i]);\\n    }\\n};\\n\\n\\nCashier.prototype.getBill = function(product, amount) {\\n    let total = 0, len = product.length;\\n    for(let i = 0; i < len; i++) {\\n        total += amount[i] * this.products.get(product[i]);\\n    }\\n    this.cc++;\\n    if(this.cc % this.n == 0) {\\n        total = total * this.discount;\\n        this.cc = 0;\\n    }\\n    return total;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2227712,
                "title": "python-simple-dictionary-based-solution",
                "content": "```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        \\n        self.n = n \\n        self.discount = discount \\n        self.price = { }\\n        self.customer = 0 \\n        \\n        for i in range(len(products))  : \\n            self.price[products[i]] = prices[i]\\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        \\n        self.customer += 1\\n        \\n        bill = 0 \\n        \\n        for i in range(len(product)) : \\n            bill += amount[i] * self.price[product[i]]\\n        \\n        \\n        if self.customer == self.n : \\n            bill = bill * (1 - self.discount / 100)\\n            self.customer = 0 \\n            \\n            \\n        return bill\\n            \\n        \\n\\n\\n# Your Cashier object will be instantiated and called as such:\\n# obj = Cashier(n, discount, products, prices)\\n# param_1 = obj.getBill(product,amount)\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        \\n        self.n = n \\n        self.discount = discount \\n        self.price = { }\\n        self.customer = 0 \\n        \\n        for i in range(len(products))  : \\n            self.price[products[i]] = prices[i]\\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        \\n        self.customer += 1\\n        \\n        bill = 0 \\n        \\n        for i in range(len(product)) : \\n            bill += amount[i] * self.price[product[i]]\\n        \\n        \\n        if self.customer == self.n : \\n            bill = bill * (1 - self.discount / 100)\\n            self.customer = 0 \\n            \\n            \\n        return bill\\n            \\n        \\n\\n\\n# Your Cashier object will be instantiated and called as such:\\n# obj = Cashier(n, discount, products, prices)\\n# param_1 = obj.getBill(product,amount)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2194714,
                "title": "c-solution-by-hashmap-and-normal-logic",
                "content": "```\\nclass Cashier {\\npublic:\\n    int k;\\n    int n;\\n    double coef;\\n    unordered_map<int, int> id_to_price;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        this->k = 1;\\n        this->n = n;\\n        this->coef = (100.0 - (double)discount) / 100.0;\\n        for (int i = 0; i < products.size(); i++){\\n            int id = products[i];\\n            int price = prices[i];\\n            this->id_to_price.insert({id, price});\\n        }\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        double subtotal = 0.0;\\n        for (int i = 0; i < product.size(); i++){\\n            subtotal += this->id_to_price[product[i]] * amount[i];\\n        }\\n        if (this->k % this->n == 0){\\n            subtotal *= this->coef;\\n        }\\n        this->k++;\\n        return subtotal;\\n    }\\n};\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "solutionTags": [],
                "code": "```\\nclass Cashier {\\npublic:\\n    int k;\\n    int n;\\n    double coef;\\n    unordered_map<int, int> id_to_price;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        this->k = 1;\\n        this->n = n;\\n        this->coef = (100.0 - (double)discount) / 100.0;\\n        for (int i = 0; i < products.size(); i++){\\n            int id = products[i];\\n            int price = prices[i];\\n            this->id_to_price.insert({id, price});\\n        }\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        double subtotal = 0.0;\\n        for (int i = 0; i < product.size(); i++){\\n            subtotal += this->id_to_price[product[i]] * amount[i];\\n        }\\n        if (this->k % this->n == 0){\\n            subtotal *= this->coef;\\n        }\\n        this->k++;\\n        return subtotal;\\n    }\\n};\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2159730,
                "title": "c-no-hashing-simple-solution",
                "content": "```\\nclass Cashier {\\npublic:\\n    int nn = 0;\\n    double dis = 0;\\n    vector<int> pro;\\n    vector<int> pri;\\n    int currCustomer = 0; //Declaring these variables here to use it in other fxns as well\\n    \\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        nn = n;\\n        dis = discount;\\n        pro = products;\\n        pri = prices; //Assigning given values to our created variables\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        currCustomer++; //Increasing customer count\\n        double bill = 0; //Bill anount set to 0\\n        for(int i = 0; i < product.size(); i++){ //Iterating over every product\\n            int proId = 0; \\n            \\n            while(pro[proId] != product[i]) proId++; //Finding product ID index\\n            \\n            bill = bill + (amount[i]*pri[proId]); //Adding total amount to bill\\n        }\\n        \\n        if(currCustomer == nn){ //Checking if the customer is eligible for discount\\n            bill = bill * (1 - dis/100); //Giving discount\\n            currCustomer = 0; //Setting customer count to 0 so next third person can have discount\\n        }\\n        return bill; //Returning final bill amount\\n    }\\n};\\n\\n```\\n\\nIf you think this post was ***helpful***, I will be happy if you give a ***upvote***. Any questions or discussions are welcome! **Thanks a lot.** \\uD83D\\uDE04",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Cashier {\\npublic:\\n    int nn = 0;\\n    double dis = 0;\\n    vector<int> pro;\\n    vector<int> pri;\\n    int currCustomer = 0; //Declaring these variables here to use it in other fxns as well\\n    \\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        nn = n;\\n        dis = discount;\\n        pro = products;\\n        pri = prices; //Assigning given values to our created variables\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        currCustomer++; //Increasing customer count\\n        double bill = 0; //Bill anount set to 0\\n        for(int i = 0; i < product.size(); i++){ //Iterating over every product\\n            int proId = 0; \\n            \\n            while(pro[proId] != product[i]) proId++; //Finding product ID index\\n            \\n            bill = bill + (amount[i]*pri[proId]); //Adding total amount to bill\\n        }\\n        \\n        if(currCustomer == nn){ //Checking if the customer is eligible for discount\\n            bill = bill * (1 - dis/100); //Giving discount\\n            currCustomer = 0; //Setting customer count to 0 so next third person can have discount\\n        }\\n        return bill; //Returning final bill amount\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2133461,
                "title": "simple-go-solution",
                "content": "```\\ntype Cashier struct {\\n    n, discount, cur int\\n    pp map[int]float64\\n}\\n\\nfunc Constructor(n int, discount int, products []int, prices []int) Cashier {\\n    mp := make(map[int]float64, 0)\\n    for i := 0; i < len(prices); i++ {\\n        mp[products[i]] = float64(prices[i])\\n    }\\n    \\n    return Cashier{\\n        n: n,\\n        cur: 0,\\n        discount: discount,\\n        pp: mp, \\n    }\\n}\\n\\n\\nfunc (this *Cashier) GetBill(product []int, amount []int) float64 {\\n    r := float64(0)\\n    for i := 0; i < len(product); i++ {\\n        r += this.pp[product[i]] * float64(amount[i])\\n    }\\n    \\n    this.cur++    \\n    if this.cur % this.n == 0 {\\n        r = r * (100.0 - float64(this.discount)) / 100.0 \\n    }\\n    return r\\n}\\n",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\ntype Cashier struct {\\n    n, discount, cur int\\n    pp map[int]float64\\n}\\n\\nfunc Constructor(n int, discount int, products []int, prices []int) Cashier {\\n    mp := make(map[int]float64, 0)\\n    for i := 0; i < len(prices); i++ {\\n        mp[products[i]] = float64(prices[i])\\n    }\\n    \\n    return Cashier{\\n        n: n,\\n        cur: 0,\\n        discount: discount,\\n        pp: mp, \\n    }\\n}\\n\\n\\nfunc (this *Cashier) GetBill(product []int, amount []int) float64 {\\n    r := float64(0)\\n    for i := 0; i < len(product); i++ {\\n        r += this.pp[product[i]] * float64(amount[i])\\n    }\\n    \\n    this.cur++    \\n    if this.cur % this.n == 0 {\\n        r = r * (100.0 - float64(this.discount)) / 100.0 \\n    }\\n    return r\\n}\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2131194,
                "title": "c-hashmap",
                "content": "```\\nclass Cashier {\\npublic:\\n    int count = 0 ; \\n    int n, discount;\\n    double percent; \\n    unordered_map<int,int> prod_prices; \\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        this->n = n ;\\n        this->discount = discount; \\n        percent = (100.0-discount)/100.0;\\n        for(int i=0;i<products.size();i++){\\n            prod_prices[products[i]] = prices[i]; \\n        }\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        count++; \\n        double ans = 0; \\n        for(int i=0;i<product.size();i++) \\n            ans += (prod_prices[product[i]] * amount[i]); \\n        return (count % n == 0 ) ? ans*percent  : ans; \\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Cashier {\\npublic:\\n    int count = 0 ; \\n    int n, discount;\\n    double percent; \\n    unordered_map<int,int> prod_prices; \\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        this->n = n ;\\n        this->discount = discount; \\n        percent = (100.0-discount)/100.0;\\n        for(int i=0;i<products.size();i++){\\n            prod_prices[products[i]] = prices[i]; \\n        }\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        count++; \\n        double ans = 0; \\n        for(int i=0;i<product.size();i++) \\n            ans += (prod_prices[product[i]] * amount[i]); \\n        return (count % n == 0 ) ? ans*percent  : ans; \\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2124021,
                "title": "java-simple-hash-map-solution",
                "content": "```\\nclass Cashier {\\n    private int n, orderNumber, discount;\\n    private Map<Integer, Integer> priceMap;\\n    \\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n = n;\\n        orderNumber = 1;\\n        this.discount = discount;\\n        priceMap = new HashMap<>();\\n        for (int i = 0; i < products.length; i++) {\\n            priceMap.put(products[i], prices[i]);\\n        }\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double bill = 0.0;\\n        for (int i = 0; i < product.length; i++) {\\n            bill += priceMap.get(product[i]) * amount[i];\\n        }\\n        if (orderNumber % n == 0) {\\n            bill *= ((100.0 - discount) / 100.0);\\n        }\\n        orderNumber++;\\n        return bill;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Cashier {\\n    private int n, orderNumber, discount;\\n    private Map<Integer, Integer> priceMap;\\n    \\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n = n;\\n        orderNumber = 1;\\n        this.discount = discount;\\n        priceMap = new HashMap<>();\\n        for (int i = 0; i < products.length; i++) {\\n            priceMap.put(products[i], prices[i]);\\n        }\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double bill = 0.0;\\n        for (int i = 0; i < product.length; i++) {\\n            bill += priceMap.get(product[i]) * amount[i];\\n        }\\n        if (orderNumber % n == 0) {\\n            bill *= ((100.0 - discount) / 100.0);\\n        }\\n        orderNumber++;\\n        return bill;\\n    }\\n}",
                "codeTag": "Java"
            },
            {
                "id": 2120700,
                "title": "c-hashmap-oops",
                "content": "```\\nclass Cashier {\\n    private:\\n    int n;\\n    int person;\\n    int discount;\\n    unordered_map<int,int>mp;\\npublic:\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        this->n = n;\\n        this->person = 0;\\n        this->discount = discount;\\n        for(int i = 0;i<products.size();i++) {\\n            mp[products[i]] = prices[i];\\n        }\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        person++;\\n        double cost = 0;\\n        for(int i = 0;i<product.size();i++) {\\n            cost += amount[i]*(mp[product[i]]);\\n        }\\n        if((person%n!=0)){\\n            return cost;\\n        }\\n        return cost - ((discount*cost)/100);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Cashier {\\n    private:\\n    int n;\\n    int person;\\n    int discount;\\n    unordered_map<int,int>mp;\\npublic:\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        this->n = n;\\n        this->person = 0;\\n        this->discount = discount;\\n        for(int i = 0;i<products.size();i++) {\\n            mp[products[i]] = prices[i];\\n        }\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        person++;\\n        double cost = 0;\\n        for(int i = 0;i<product.size();i++) {\\n            cost += amount[i]*(mp[product[i]]);\\n        }\\n        if((person%n!=0)){\\n            return cost;\\n        }\\n        return cost - ((discount*cost)/100);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2111816,
                "title": "java-simple-hashmap",
                "content": "```\\nclass Cashier {\\n    int n;\\n    double percentage;\\n    int count;\\n    Map<Integer, Integer> productPriceMap;\\n\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n = n;\\n        this.percentage = (((double) 100 - (double) discount) / (double) 100);\\n        this.count = 0;\\n        this.productPriceMap = new HashMap<>();\\n        for (int index = 0; index < products.length; index++) {\\n            this.productPriceMap.put(products[index], prices[index]);\\n        }\\n    }\\n\\n    public double getBill(int[] product, int[] amount) {\\n        double sum = 0;\\n        count++;\\n        for (int index = 0; index < product.length; index++) {\\n            double subTotal = this.productPriceMap.get(product[index]) * amount[index];\\n            sum += (this.count % this.n == 0) ? subTotal * this.percentage : subTotal;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Cashier {\\n    int n;\\n    double percentage;\\n    int count;\\n    Map<Integer, Integer> productPriceMap;\\n\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n = n;\\n        this.percentage = (((double) 100 - (double) discount) / (double) 100);\\n        this.count = 0;\\n        this.productPriceMap = new HashMap<>();\\n        for (int index = 0; index < products.length; index++) {\\n            this.productPriceMap.put(products[index], prices[index]);\\n        }\\n    }\\n\\n    public double getBill(int[] product, int[] amount) {\\n        double sum = 0;\\n        count++;\\n        for (int index = 0; index < product.length; index++) {\\n            double subTotal = this.productPriceMap.get(product[index]) * amount[index];\\n            sum += (this.count % this.n == 0) ? subTotal * this.percentage : subTotal;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2030027,
                "title": "c-using-map",
                "content": "```\\nclass Cashier {\\n    int n_, cnt_;\\n    double discount_;\\n    unordered_map<int, int> pp_;\\npublic:\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) : \\n        cnt_(0), n_(n), discount_(1 - (discount / 100.0)) {\\n        for (auto i = 0; i < products.size(); ++i) {\\n            pp_[products[i]] = prices[i];\\n        }\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        cnt_++;\\n        double d = cnt_ % n_ == 0 ? discount_: 1;\\n        \\n        double total = 0;\\n        for (auto j = 0; j < amount.size(); ++j) {\\n            auto i = product[j];\\n            total += pp_[i] * amount[j];\\n        }\\n        return total * d;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Cashier {\\n    int n_, cnt_;\\n    double discount_;\\n    unordered_map<int, int> pp_;\\npublic:\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) : \\n        cnt_(0), n_(n), discount_(1 - (discount / 100.0)) {\\n        for (auto i = 0; i < products.size(); ++i) {\\n            pp_[products[i]] = prices[i];\\n        }\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        cnt_++;\\n        double d = cnt_ % n_ == 0 ? discount_: 1;\\n        \\n        double total = 0;\\n        for (auto j = 0; j < amount.size(); ++j) {\\n            auto i = product[j];\\n            total += pp_[i] * amount[j];\\n        }\\n        return total * d;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1977490,
                "title": "java-hashmap",
                "content": "```\\nclass Cashier {\\n    int n, discount, count;\\n    HashMap<Integer, Integer> priceMapper;\\n    \\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n = n;\\n        this.discount = discount;\\n        count = 0;\\n        priceMapper = new HashMap<>();\\n        for(int i=0;i<products.length;i++) {\\n            priceMapper.put(products[i], prices[i]);\\n        }\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        count++;\\n        double billAmount = 0;\\n        for(int i=0;i<product.length;i++) {\\n            billAmount += amount[i] * priceMapper.get(product[i]);\\n        }\\n        if(count == n) {\\n            billAmount -= (billAmount * discount) / 100;\\n            count = 0;\\n        }\\n        return billAmount;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Cashier {\\n    int n, discount, count;\\n    HashMap<Integer, Integer> priceMapper;\\n    \\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n = n;\\n        this.discount = discount;\\n        count = 0;\\n        priceMapper = new HashMap<>();\\n        for(int i=0;i<products.length;i++) {\\n            priceMapper.put(products[i], prices[i]);\\n        }\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        count++;\\n        double billAmount = 0;\\n        for(int i=0;i<product.length;i++) {\\n            billAmount += amount[i] * priceMapper.get(product[i]);\\n        }\\n        if(count == n) {\\n            billAmount -= (billAmount * discount) / 100;\\n            count = 0;\\n        }\\n        return billAmount;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1972878,
                "title": "javascript-faster-and-less-memory-usage-than-100",
                "content": "```\\nvar Cashier = function(n, discount, products, prices) {\\n    this.customerId = 0;\\n    this.n = n;\\n    this.discountMultiplier = (100 - discount)/100;\\n    this.catalog = {};\\n    for (index in products) {\\n        this.catalog[products[index]] = prices[index];\\n    }\\n};\\n\\nCashier.prototype.getBill = function(product, amount) {\\n    this.customerId++;\\n    let res = 0;\\n    for (item in product) res += this.catalog[product[item]] * amount[item];\\n    if (this.customerId % this.n === 0) res = res * this.discountMultiplier;\\n    return res;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar Cashier = function(n, discount, products, prices) {\\n    this.customerId = 0;\\n    this.n = n;\\n    this.discountMultiplier = (100 - discount)/100;\\n    this.catalog = {};\\n    for (index in products) {\\n        this.catalog[products[index]] = prices[index];\\n    }\\n};\\n\\nCashier.prototype.getBill = function(product, amount) {\\n    this.customerId++;\\n    let res = 0;\\n    for (item in product) res += this.catalog[product[item]] * amount[item];\\n    if (this.customerId % this.n === 0) res = res * this.discountMultiplier;\\n    return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1970889,
                "title": "basic-c-100-faster",
                "content": "```\\n\\n```class Cashier {\\npublic:\\n    int count=0;    \\n    int n , discount;\\n    unordered_map<int,int> prodPrice;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        this->n = n ;\\n        this->discount = discount;\\n        for(int i =0;i<products.size();i++)        \\n            prodPrice[products[i]] = prices[i];\\n        //creating the map here in this case \\n    }\\n    \\n    double getBill(vector<int> prod, vector<int> amount) {\\n        count++;\\n        bool flag = 0;\\n        if(count%n == 0 ) {\\n            flag = 1;\\n            count  = 0;\\n        }\\n        double cost = 0;\\n        for(int i=0;i<prod.size();i++){\\n            cost += (prodPrice[prod[i]] * amount[i]);\\n        }\\n        if(!flag)\\n            return cost; \\n        cost = cost - ((discount*cost)/100);\\n        //varna subtract karna padega in this cases\\n        return cost; \\n    }\\n};\\n",
                "solutionTags": [],
                "code": "```\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1873575,
                "title": "c-hashmap-so-ution-easy-question",
                "content": "Neat and clean solution easy to understood using hashmap if you like the solution please upvote!!\\n```\\n\\nclass Cashier {\\npublic:\\n    unordered_map<int,int>mp;\\n    int num,dis;\\n    int w=1;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        \\n        num = n;\\n        dis = discount;\\n        for(int i=0;i<products.size();i++)\\n        {\\n            mp[products[i]]=prices[i];\\n        }\\n        \\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        \\n        double total=0;\\n        for(int i=0;i<product.size();i++)\\n        {\\n            total+= mp[product[i]]*amount[i];\\n        }\\n        \\n        if(w==num)\\n        {\\n            total = total*(double)((100.0-(double)dis)/100.0);\\n            w=0;\\n        }\\n        w++;\\n        \\n        return total;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n\\nclass Cashier {\\npublic:\\n    unordered_map<int,int>mp;\\n    int num,dis;\\n    int w=1;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        \\n        num = n;\\n        dis = discount;\\n        for(int i=0;i<products.size();i++)\\n        {\\n            mp[products[i]]=prices[i];\\n        }\\n        \\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        \\n        double total=0;\\n        for(int i=0;i<product.size();i++)\\n        {\\n            total+= mp[product[i]]*amount[i];\\n        }\\n        \\n        if(w==num)\\n        {\\n            total = total*(double)((100.0-(double)dis)/100.0);\\n            w=0;\\n        }\\n        w++;\\n        \\n        return total;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1868871,
                "title": "c-solution",
                "content": "```\\npublic class Cashier {\\n    \\n    public int customerNumber;\\n    \\n    public int n {get ; set;}\\n    \\n    public int discount {get; set;}\\n    \\n    public Dictionary<int, int> productPrices {get; set;}\\n    \\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n = n;\\n        this.discount = discount;\\n        this.productPrices = new Dictionary<int, int>();\\n        for(int i = 0; i<products.Length; i++){\\n            \\n            productPrices.Add(products[i], prices[i]);\\n        }\\n    }\\n    \\n    public double GetBill(int[] product, int[] amount) {\\n        \\n        this.customerNumber += 1;\\n        var bill = 0.0;\\n        \\n        for(int i=0; i<product.Length; i++){\\n            \\n            bill += this.productPrices[product[i]] * amount[i];\\n        }\\n        \\n        return (customerNumber % n == 0)? (bill * ((double)(100 - this.discount) / 100)) : bill;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Cashier {\\n    \\n    public int customerNumber;\\n    \\n    public int n {get ; set;}\\n    \\n    public int discount {get; set;}\\n    \\n    public Dictionary<int, int> productPrices {get; set;}\\n    \\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n = n;\\n        this.discount = discount;\\n        this.productPrices = new Dictionary<int, int>();\\n        for(int i = 0; i<products.Length; i++){\\n            \\n            productPrices.Add(products[i], prices[i]);\\n        }\\n    }\\n    \\n    public double GetBill(int[] product, int[] amount) {\\n        \\n        this.customerNumber += 1;\\n        var bill = 0.0;\\n        \\n        for(int i=0; i<product.Length; i++){\\n            \\n            bill += this.productPrices[product[i]] * amount[i];\\n        }\\n        \\n        return (customerNumber % n == 0)? (bill * ((double)(100 - this.discount) / 100)) : bill;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1864704,
                "title": "easy-c-solution",
                "content": "```\\nclass Cashier {\\npublic:\\n    // \\'count\\' will store the serial no. of a customer\\n    int count,n,discount;\\n    \\n    // In the unordered map key is the product id and value is the corresponding price of the product\\n    unordered_map<int,int>m;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        \\n        // initialise the values\\n        count=0;\\n        this->n=n;\\n        this->discount=discount;\\n        \\n        // populate the unordered map \\n        for(int i=0;i<products.size();i++) {\\n            m[products[i]]=prices[i];\\n        }\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        // as a new customer comes\\n        count++;\\n        \\n        // \\'total\\' will be the actual bill\\n        double total=0;\\n        \\n        // calculate the total bill\\n        for(int i=0;i<product.size();i++) {\\n            total+=(double)(amount[i]*m[product[i]]);\\n        }\\n        \\n        // if he/she is the nth customer then give the discount\\n        if(count%n==0) {\\n            total=total*((100-(double)discount)/100);\\n        }\\n        \\n        // finally return the bill\\n        return total;\\n    }\\n};\\n```\\n***Please upvote if you have got any help from my code. Thank you.***",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Cashier {\\npublic:\\n    // \\'count\\' will store the serial no. of a customer\\n    int count,n,discount;\\n    \\n    // In the unordered map key is the product id and value is the corresponding price of the product\\n    unordered_map<int,int>m;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        \\n        // initialise the values\\n        count=0;\\n        this->n=n;\\n        this->discount=discount;\\n        \\n        // populate the unordered map \\n        for(int i=0;i<products.size();i++) {\\n            m[products[i]]=prices[i];\\n        }\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        // as a new customer comes\\n        count++;\\n        \\n        // \\'total\\' will be the actual bill\\n        double total=0;\\n        \\n        // calculate the total bill\\n        for(int i=0;i<product.size();i++) {\\n            total+=(double)(amount[i]*m[product[i]]);\\n        }\\n        \\n        // if he/she is the nth customer then give the discount\\n        if(count%n==0) {\\n            total=total*((100-(double)discount)/100);\\n        }\\n        \\n        // finally return the bill\\n        return total;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1832553,
                "title": "simple-solution-in-java",
                "content": "```\\nclass Cashier {\\n\\n    int discount;\\n    int[] products;\\n    int[] prices;\\n    int n;\\n    int j;\\n    \\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.discount = discount;\\n        this.products = products;\\n        this.prices = prices;\\n        this.n = n;\\n        this.j= 0;\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        j++;\\n        double sum = 0;\\n        for(int i=0;i<product.length;i++){\\n            sum += findPrice(product[i])*amount[i];\\n        }\\n        if((j)%n==0)\\n            return (sum*(100-discount))/100;\\n        else\\n            return sum;\\n    }\\n    public int findPrice(int prodId){\\n        for(int i=0;i<products.length;i++){\\n            if(prodId==products[i])\\n                return prices[i];\\n        }\\n        return 0;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Cashier {\\n\\n    int discount;\\n    int[] products;\\n    int[] prices;\\n    int n;\\n    int j;\\n    \\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.discount = discount;\\n        this.products = products;\\n        this.prices = prices;\\n        this.n = n;\\n        this.j= 0;\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        j++;\\n        double sum = 0;\\n        for(int i=0;i<product.length;i++){\\n            sum += findPrice(product[i])*amount[i];\\n        }\\n        if((j)%n==0)\\n            return (sum*(100-discount))/100;\\n        else\\n            return sum;\\n    }\\n    public int findPrice(int prodId){\\n        for(int i=0;i<products.length;i++){\\n            if(prodId==products[i])\\n                return prices[i];\\n        }\\n        return 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1824521,
                "title": "python3",
                "content": "class Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.n=n\\n        self.discount=discount\\n        self.count=0\\n        self.maps={}\\n        for product,price in zip(products,prices):\\n            self.maps[product] = price\\n        \\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        self.count+=1\\n        total = 0\\n        for pro,amt in zip(product,amount):\\n            total+=self.maps[pro]*amt\\n        if self.count%self.n==0:\\n            total*=(1-self.discount/100)\\n        return total",
                "solutionTags": [],
                "code": "class Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.n=n\\n        self.discount=discount\\n        self.count=0\\n        self.maps={}\\n        for product,price in zip(products,prices):\\n            self.maps[product] = price\\n        \\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        self.count+=1\\n        total = 0\\n        for pro,amt in zip(product,amount):\\n            total+=self.maps[pro]*amt\\n        if self.count%self.n==0:\\n            total*=(1-self.discount/100)\\n        return total",
                "codeTag": "Java"
            },
            {
                "id": 1760970,
                "title": "c-simple-desiging-hashmap",
                "content": "**Upvote if you found solution helpful**\\n```C++\\nclass Cashier\\n{\\npublic:\\n    unordered_map<int, int> m;\\n    int customerNumber = 0;\\n    int disNumber;\\n    int dis;\\n    Cashier(int n, int discount, vector<int> &products, vector<int> &prices)\\n    {\\n        disNumber = n;\\n        dis = discount;\\n        for (int i = 0; i < products.size(); i++)\\n        {\\n            m.insert({products[i], prices[i]});\\n        }\\n    }\\n\\n    double getBill(vector<int> product, vector<int> amount)\\n    {\\n        customerNumber++;\\n        double Bill = 0;\\n        for (int i = 0; i < amount.size(); i++)\\n        {\\n            Bill += amount[i] * m[product[i]];\\n        }\\n        double totalBill = Bill;\\n        if (customerNumber % disNumber == 0)\\n        {\\n            customerNumber = 0;\\n            totalBill *= ((100 - dis) / double(100));\\n        }\\n        return totalBill;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```C++\\nclass Cashier\\n{\\npublic:\\n    unordered_map<int, int> m;\\n    int customerNumber = 0;\\n    int disNumber;\\n    int dis;\\n    Cashier(int n, int discount, vector<int> &products, vector<int> &prices)\\n    {\\n        disNumber = n;\\n        dis = discount;\\n        for (int i = 0; i < products.size(); i++)\\n        {\\n            m.insert({products[i], prices[i]});\\n        }\\n    }\\n\\n    double getBill(vector<int> product, vector<int> amount)\\n    {\\n        customerNumber++;\\n        double Bill = 0;\\n        for (int i = 0; i < amount.size(); i++)\\n        {\\n            Bill += amount[i] * m[product[i]];\\n        }\\n        double totalBill = Bill;\\n        if (customerNumber % disNumber == 0)\\n        {\\n            customerNumber = 0;\\n            totalBill *= ((100 - dis) / double(100));\\n        }\\n        return totalBill;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1678090,
                "title": "python3-simple",
                "content": "```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.cur=0\\n        self.n=n\\n        self.discount=discount\\n        self.dct={product:price for product,price in zip(products,prices)}\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        self.cur+=1\\n        discount=self.discount if self.cur%self.n==0 else 0\\n        total=0\\n        for p,a in zip(product,amount):\\n            total+=self.dct[p]*a\\n        return total*((100-discount)/100)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.cur=0\\n        self.n=n\\n        self.discount=discount\\n        self.dct={product:price for product,price in zip(products,prices)}\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        self.cur+=1\\n        discount=self.discount if self.cur%self.n==0 else 0\\n        total=0\\n        for p,a in zip(product,amount):\\n            total+=self.dct[p]*a\\n        return total*((100-discount)/100)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1658284,
                "title": "java-hashmap-solution-easy-to-understand",
                "content": "```\\nclass Cashier {\\n\\n    HashMap<Integer, Integer> productMap;\\n    int currentUser;\\n    int discount;\\n    int discountUser;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        productMap = new HashMap<>();\\n        currentUser = 1;\\n        this.discount =  discount;\\n        discountUser = n;\\n        for(int i = 0; i < products.length; i++){\\n            productMap.put(products[i], prices[i]);\\n        }\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double discountApplied = 1;\\n        double billAmount = 0;\\n        for(int i = 0; i < product.length; i++){\\n            billAmount += amount[i] * productMap.get(product[i]);\\n        }\\n        if(currentUser % discountUser == 0){\\n            discountApplied = (100 - discount) / (double)100;\\n        }\\n        currentUser++;\\n        return billAmount * discountApplied;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Cashier {\\n\\n    HashMap<Integer, Integer> productMap;\\n    int currentUser;\\n    int discount;\\n    int discountUser;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        productMap = new HashMap<>();\\n        currentUser = 1;\\n        this.discount =  discount;\\n        discountUser = n;\\n        for(int i = 0; i < products.length; i++){\\n            productMap.put(products[i], prices[i]);\\n        }\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double discountApplied = 1;\\n        double billAmount = 0;\\n        for(int i = 0; i < product.length; i++){\\n            billAmount += amount[i] * productMap.get(product[i]);\\n        }\\n        if(currentUser % discountUser == 0){\\n            discountApplied = (100 - discount) / (double)100;\\n        }\\n        currentUser++;\\n        return billAmount * discountApplied;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1537291,
                "title": "java-solution",
                "content": "```\\nclass Cashier {\\n    Map<Integer,Integer>map;\\n    int nthCustomer;\\n    int customerCountTrack;\\n    double discountPercent;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        map=new HashMap<>();\\n        nthCustomer=n;\\n        customerCountTrack=0;\\n        discountPercent=discount*.01;\\n        for(int i=0;i<products.length;i++)\\n            map.put(products[i],prices[i]);\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        customerCountTrack++;\\n        double sum=0;\\n        for(int i=0;i<product.length;i++){\\n            sum+=map.get(product[i])*amount[i];\\n        }\\n        if(customerCountTrack%nthCustomer==0) //discount customer\\n            return sum-(sum*discountPercent);\\n        \\n        return sum;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Cashier {\\n    Map<Integer,Integer>map;\\n    int nthCustomer;\\n    int customerCountTrack;\\n    double discountPercent;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        map=new HashMap<>();\\n        nthCustomer=n;\\n        customerCountTrack=0;\\n        discountPercent=discount*.01;\\n        for(int i=0;i<products.length;i++)\\n            map.put(products[i],prices[i]);\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        customerCountTrack++;\\n        double sum=0;\\n        for(int i=0;i<product.length;i++){\\n            sum+=map.get(product[i])*amount[i];\\n        }\\n        if(customerCountTrack%nthCustomer==0) //discount customer\\n            return sum-(sum*discountPercent);\\n        \\n        return sum;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1527331,
                "title": "java-simple-solution-using-hashmap",
                "content": "```\\nclass Cashier {\\n    int lucky_customer = 0;\\n    int bill_count = 1;\\n    double disc = 0;\\n    HashMap<Integer, Integer> cashier = new HashMap<>();\\n    \\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        for(int i=0; i<products.length; i++)\\n            cashier.put(products[i], prices[i]);\\n        \\n        lucky_customer = n;\\n        disc = discount;\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double bill = 0;\\n        double total = 0;\\n        for(int i=0; i<product.length; i++)\\n            total += amount[i] * cashier.get(product[i]);\\n        \\n        if(bill_count == lucky_customer){\\n            bill = total * ((100 - disc)/100);\\n            bill_count = 1;\\n        }\\n        else{\\n            bill = total;\\n            bill_count++;\\n        }\\n        return bill;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Cashier {\\n    int lucky_customer = 0;\\n    int bill_count = 1;\\n    double disc = 0;\\n    HashMap<Integer, Integer> cashier = new HashMap<>();\\n    \\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        for(int i=0; i<products.length; i++)\\n            cashier.put(products[i], prices[i]);\\n        \\n        lucky_customer = n;\\n        disc = discount;\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double bill = 0;\\n        double total = 0;\\n        for(int i=0; i<product.length; i++)\\n            total += amount[i] * cashier.get(product[i]);\\n        \\n        if(bill_count == lucky_customer){\\n            bill = total * ((100 - disc)/100);\\n            bill_count = 1;\\n        }\\n        else{\\n            bill = total;\\n            bill_count++;\\n        }\\n        return bill;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1511739,
                "title": "c-176ms-100-simple-easy-small",
                "content": "Runtime: 176 ms, faster than 100.00% of C++ online submissions for Apply Discount Every n Orders.\\nMemory Usage: 120.7 MB, less than 6.88% of C++ online submissions for Apply Discount Every n Orders.\\n**Optimized :  with vector that resize itself through the process**\\n```\\nclass Cashier {\\npublic:\\n  int n, id;\\n  double d;\\n  vector<int>t;\\n    \\n  Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n    this->n = n, this->d = double(100 - discount)/100, id = 0;\\n    for(int i = 0; i != products.size(); i++){\\n      if(products[i] >= t.size()) t.resize(products[i] + 1);\\n      t[products[i]] = prices[i];\\n    } \\n  }\\n    \\n  double getBill(vector<int> product, vector<int> amount) {\\n    int tot = 0;\\n    for(int i = 0; i != product.size(); i++) tot += t[product[i]] * amount[i];\\n    return (id = (++id)%n) == 0 ? double(tot)*d : double(tot);\\n  }\\n};\\n```\\n\\n**Solution with hash_map**\\nRuntime: 196 ms, faster than 87.83% of C++ online submissions for Apply Discount Every n Orders.\\nMemory Usage: 120.7 MB, less than 52.38% of C++ online submissions for Apply Discount Every n Orders.\\n```\\nclass Cashier {\\npublic:\\n  int n, id;\\n  double d;\\n  unordered_map<int,int>t;\\n    \\n  Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n    this->n = n, this->d = double(100 - discount)/100, id = 0;\\n    for(int i = 0; i != products.size(); i++) t[products[i]] = prices[i];\\n  }\\n    \\n  double getBill(vector<int> product, vector<int> amount) {\\n    int tot = 0;\\n    for(int i = 0; i != product.size(); i++) tot += t[product[i]] * amount[i];\\n    return (id = (++id)%n) == 0 ? double(tot)*d : double(tot);\\n  }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Cashier {\\npublic:\\n  int n, id;\\n  double d;\\n  vector<int>t;\\n    \\n  Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n    this->n = n, this->d = double(100 - discount)/100, id = 0;\\n    for(int i = 0; i != products.size(); i++){\\n      if(products[i] >= t.size()) t.resize(products[i] + 1);\\n      t[products[i]] = prices[i];\\n    } \\n  }\\n    \\n  double getBill(vector<int> product, vector<int> amount) {\\n    int tot = 0;\\n    for(int i = 0; i != product.size(); i++) tot += t[product[i]] * amount[i];\\n    return (id = (++id)%n) == 0 ? double(tot)*d : double(tot);\\n  }\\n};\\n```\n```\\nclass Cashier {\\npublic:\\n  int n, id;\\n  double d;\\n  unordered_map<int,int>t;\\n    \\n  Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n    this->n = n, this->d = double(100 - discount)/100, id = 0;\\n    for(int i = 0; i != products.size(); i++) t[products[i]] = prices[i];\\n  }\\n    \\n  double getBill(vector<int> product, vector<int> amount) {\\n    int tot = 0;\\n    for(int i = 0; i != product.size(); i++) tot += t[product[i]] * amount[i];\\n    return (id = (++id)%n) == 0 ? double(tot)*d : double(tot);\\n  }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1485550,
                "title": "java-straightforward-logic",
                "content": "It could probably be improved\\n```\\nclass Cashier {\\n\\n    int customer = 1;\\n    int n;\\n    double discount;\\n    int[] products;\\n    int[] prices;\\n    \\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n = n;\\n        this.discount = (double)discount;\\n        this.products = products;\\n        this.prices = prices;\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double bill = 0.0;\\n        int[] productsInt = this.products;\\n        Integer[] products = Arrays.stream(productsInt).boxed().toArray(Integer[]::new);\\n        int[] prices = this.prices;\\n        for (int i = 0; i < product.length; i ++) {\\n            int ithAmount = amount[i];\\n            int id = product[i];\\n            int price = prices[Arrays.asList(products).indexOf(id)];\\n            bill += price * ithAmount;\\n        }\\n        if (this.customer % n == 0) {\\n            this.customer ++;\\n            return discounted(this.discount, bill);\\n        }\\n        this.customer ++;\\n        return bill;    \\n    }\\n    \\n    public double discounted(double discount, double price) {\\n        double finalPrice = price * (1 - (discount / 100));\\n        return finalPrice;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n ```",
                "solutionTags": [],
                "code": "```\\nclass Cashier {\\n\\n    int customer = 1;\\n    int n;\\n    double discount;\\n    int[] products;\\n    int[] prices;\\n    \\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n = n;\\n        this.discount = (double)discount;\\n        this.products = products;\\n        this.prices = prices;\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double bill = 0.0;\\n        int[] productsInt = this.products;\\n        Integer[] products = Arrays.stream(productsInt).boxed().toArray(Integer[]::new);\\n        int[] prices = this.prices;\\n        for (int i = 0; i < product.length; i ++) {\\n            int ithAmount = amount[i];\\n            int id = product[i];\\n            int price = prices[Arrays.asList(products).indexOf(id)];\\n            bill += price * ithAmount;\\n        }\\n        if (this.customer % n == 0) {\\n            this.customer ++;\\n            return discounted(this.discount, bill);\\n        }\\n        this.customer ++;\\n        return bill;    \\n    }\\n    \\n    public double discounted(double discount, double price) {\\n        double finalPrice = price * (1 - (discount / 100));\\n        return finalPrice;\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n ```",
                "codeTag": "Java"
            },
            {
                "id": 1460582,
                "title": "c-easy-solution-95-beat-o-n-time-o-n-space",
                "content": "```\\nclass Cashier {\\npublic:\\n    unordered_map<int,int>mp;\\n    long long after=0;\\n    int disc = 0;\\n    int op=0;\\n    long long person=0;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        after=n;\\n        op=n;\\n        disc=discount;\\n        for(int i=0;i<products.size();i++)\\n        {\\n            mp[products[i]]=prices[i];\\n        }\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        person++;\\n        long long total =0 ;\\n        for(int i=0;i<product.size();i++)\\n        {\\n            total+= (mp[product[i]]*amount[i]);\\n        }\\n        double ans=0.0;\\n        if(after==person)\\n        {\\n            double t = (100.0-(double)disc)/100.0;\\n            ans = ((double)total)*t;\\n            after+=op;\\n        }\\n        else\\n        {\\n            return (double)total;\\n        }\\n        return ans;\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "solutionTags": [],
                "code": "```\\nclass Cashier {\\npublic:\\n    unordered_map<int,int>mp;\\n    long long after=0;\\n    int disc = 0;\\n    int op=0;\\n    long long person=0;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        after=n;\\n        op=n;\\n        disc=discount;\\n        for(int i=0;i<products.size();i++)\\n        {\\n            mp[products[i]]=prices[i];\\n        }\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        person++;\\n        long long total =0 ;\\n        for(int i=0;i<product.size();i++)\\n        {\\n            total+= (mp[product[i]]*amount[i]);\\n        }\\n        double ans=0.0;\\n        if(after==person)\\n        {\\n            double t = (100.0-(double)disc)/100.0;\\n            ans = ((double)total)*t;\\n            after+=op;\\n        }\\n        else\\n        {\\n            return (double)total;\\n        }\\n        return ans;\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1455075,
                "title": "java-solution",
                "content": "\\tclass Cashier {\\n    int pos = 1;\\n    int n = 0, discount = 0;\\n    Map<Integer, Integer> map = new HashMap<>();\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n = n;\\n        this.discount = discount;\\n        for(int i = 0; i < products.length; i++)\\n        {\\n            map.put(products[i], prices[i]);\\n        }\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double total = 0;\\n        for(int i = 0; i < product.length; i++)\\n        {\\n            total += map.get(product[i])*amount[i]*1.0;\\n        }\\n        \\n        if(pos%n == 0)\\n        {\\n            total = total*((100-discount)*(1.0)/100.0);\\n        }\\n        \\n        pos++;\\n        return total;\\n    }\\n\\t}",
                "solutionTags": [],
                "code": "\\tclass Cashier {\\n    int pos = 1;\\n    int n = 0, discount = 0;\\n    Map<Integer, Integer> map = new HashMap<>();\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n = n;\\n        this.discount = discount;\\n        for(int i = 0; i < products.length; i++)\\n        {\\n            map.put(products[i], prices[i]);\\n        }\\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        double total = 0;\\n        for(int i = 0; i < product.length; i++)\\n        {\\n            total += map.get(product[i])*amount[i]*1.0;\\n        }\\n        \\n        if(pos%n == 0)\\n        {\\n            total = total*((100-discount)*(1.0)/100.0);\\n        }\\n        \\n        pos++;\\n        return total;\\n    }\\n\\t}",
                "codeTag": "Java"
            },
            {
                "id": 1426908,
                "title": "simple-java-solution",
                "content": "```\\nclass Cashier {\\n    HashMap<Integer,Integer> h=new HashMap<Integer,Integer>();\\n    int count=0;\\n    double discountOffer=0.0;\\n    int m=0;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        for(int i=0;i<products.length;i++)\\n        {\\n            h.put(products[i],prices[i]);\\n        }\\n        discountOffer=discount;\\n        m=n;\\n        \\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        count++;\\n        double bill=0.0;\\n       for(int i=0;i<product.length;i++)\\n       {\\n          bill+=(h.get(product[i])*amount[i]);\\n       }\\n        if(count%m==0)\\n        {\\n            bill=bill*((100-discountOffer)/100);\\n        }\\n        \\n        return bill;\\n    }\\n    \\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "solutionTags": [],
                "code": "```\\nclass Cashier {\\n    HashMap<Integer,Integer> h=new HashMap<Integer,Integer>();\\n    int count=0;\\n    double discountOffer=0.0;\\n    int m=0;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        for(int i=0;i<products.length;i++)\\n        {\\n            h.put(products[i],prices[i]);\\n        }\\n        discountOffer=discount;\\n        m=n;\\n        \\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        count++;\\n        double bill=0.0;\\n       for(int i=0;i<product.length;i++)\\n       {\\n          bill+=(h.get(product[i])*amount[i]);\\n       }\\n        if(count%m==0)\\n        {\\n            bill=bill*((100-discountOffer)/100);\\n        }\\n        \\n        return bill;\\n    }\\n    \\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1408922,
                "title": "c-clean-solution",
                "content": "```\\n\\tprivate readonly Dictionary<int, int> ProductPrices;\\n    private readonly int N;\\n    private readonly double DiscountFactor; // in range [0.0, .. ,1.0]\\n    private int CustomerCounter;\\n    \\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        CustomerCounter = 0;\\n        N = n;\\n        DiscountFactor = (double)(100-discount)/100;              \\n        ProductPrices = products.Zip(prices, (product, price) => new { product, price })\\n                                .ToDictionary(k => k.product, v => v.price);\\n    }\\n    \\n    public double GetBill(int[] product, int[] amount) {\\n        double bill = 0.0;\\n        for (int i=0; i<product.Length; i++)\\n            bill += ProductPrices[product[i]] * amount[i];\\n        \\n        return IsNthCustomer(++CustomerCounter) ? bill * DiscountFactor\\n                                                : bill;         \\n        \\n\\t\\tbool IsNthCustomer(int curNumber)\\n            => curNumber % N == 0;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n\\tprivate readonly Dictionary<int, int> ProductPrices;\\n    private readonly int N;\\n    private readonly double DiscountFactor; // in range [0.0, .. ,1.0]\\n    private int CustomerCounter;\\n    \\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        CustomerCounter = 0;\\n        N = n;\\n        DiscountFactor = (double)(100-discount)/100;              \\n        ProductPrices = products.Zip(prices, (product, price) => new { product, price })\\n                                .ToDictionary(k => k.product, v => v.price);\\n    }\\n    \\n    public double GetBill(int[] product, int[] amount) {\\n        double bill = 0.0;\\n        for (int i=0; i<product.Length; i++)\\n            bill += ProductPrices[product[i]] * amount[i];\\n        \\n        return IsNthCustomer(++CustomerCounter) ? bill * DiscountFactor\\n                                                : bill;         \\n        \\n\\t\\tbool IsNthCustomer(int curNumber)\\n            => curNumber % N == 0;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1394248,
                "title": "javascript-solution",
                "content": "```\\nvar Cashier = function(n, discount, products, prices) {\\n    this.luckyNum = n;\\n    this.customers = 1;\\n    this.discount = discount;\\n    this.map = new Map();\\n    \\n    for (let i = 0; i < products.length; i++) {\\n        const product = products[i];\\n        const price = prices[i];\\n        \\n        this.map.set(product, price);\\n    }\\n};\\n\\nCashier.prototype.getBill = function(purchases, quantities) {\\n    let tot = 0;\\n    \\n    for (let i = 0; i < purchases.length; i++) {\\n        const product = purchases[i];\\n        const quantity = quantities[i];\\n        const price = this.map.get(product);\\n        \\n        tot += (price * quantity);\\n    }\\n    \\n    if (this.customers === this.luckyNum) {\\n        tot = tot * ((100 - this.discount) / 100);\\n        this.customers = 1;\\n    }\\n    else {\\n        this.customers++;\\n    }\\n    \\n    return tot;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar Cashier = function(n, discount, products, prices) {\\n    this.luckyNum = n;\\n    this.customers = 1;\\n    this.discount = discount;\\n    this.map = new Map();\\n    \\n    for (let i = 0; i < products.length; i++) {\\n        const product = products[i];\\n        const price = prices[i];\\n        \\n        this.map.set(product, price);\\n    }\\n};\\n\\nCashier.prototype.getBill = function(purchases, quantities) {\\n    let tot = 0;\\n    \\n    for (let i = 0; i < purchases.length; i++) {\\n        const product = purchases[i];\\n        const quantity = quantities[i];\\n        const price = this.map.get(product);\\n        \\n        tot += (price * quantity);\\n    }\\n    \\n    if (this.customers === this.luckyNum) {\\n        tot = tot * ((100 - this.discount) / 100);\\n        this.customers = 1;\\n    }\\n    else {\\n        this.customers++;\\n    }\\n    \\n    return tot;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1369727,
                "title": "1357-calc-total-price-from-prod-id-price-amount-give-discount-if-any-return-total-price",
                "content": "---\\n\\nAnother design & implemenation problem\\n\\n---\\n\\n**Algo**\\n- Create a `map` of product ids vs its prices\\n- For each call to `getBill`\\n  - increment a counter `i`\\n  - For each product in `product`\\n    - get its price from `map` above\\n\\t- mulitply with `amount` to get its `total price` of this product for all items of this product\\n  - if counter `i` is same as `n` th customer, give a `discount` as given in problem, by reducing from `total price`\\n  - Return the `total price`\\n\\nHope it is simple to understand.\\n\\n---\\n\\n```\\nclass Cashier {\\n    n;\\n    discount;\\n    prod_price_map = new Map();\\n    i = 0;\\n    constructor(n, discount, products, prices) {\\n        this.n = n;\\n        this.discount = discount;\\n        for (let i = 0; i < products.length; i++)\\n            this.prod_price_map.set(products[i], prices[i]);\\n    }\\n\\n    getBill(product, amount) {\\n        this.i++;\\n\\n        let total_cost = 0;\\n        for (let i = 0; i < product.length; i++) {\\n            const price = this.prod_price_map.get(product[i]);\\n            total_cost += amount[i] * price;\\n        }\\n\\n        if (this.i % this.n === 0)\\n            total_cost -= (this.discount * total_cost) / 100; // nth customer - give discount\\n        return total_cost;\\n    }\\n}\\n```\\n\\n![image](https://assets.leetcode.com/users/images/d593f56c-cd40-46a4-81f0-94ba681fdd3b_1627542881.3022296.png)\\n\\n---\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nclass Cashier {\\n    n;\\n    discount;\\n    prod_price_map = new Map();\\n    i = 0;\\n    constructor(n, discount, products, prices) {\\n        this.n = n;\\n        this.discount = discount;\\n        for (let i = 0; i < products.length; i++)\\n            this.prod_price_map.set(products[i], prices[i]);\\n    }\\n\\n    getBill(product, amount) {\\n        this.i++;\\n\\n        let total_cost = 0;\\n        for (let i = 0; i < product.length; i++) {\\n            const price = this.prod_price_map.get(product[i]);\\n            total_cost += amount[i] * price;\\n        }\\n\\n        if (this.i % this.n === 0)\\n            total_cost -= (this.discount * total_cost) / 100; // nth customer - give discount\\n        return total_cost;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1347565,
                "title": "java-112ms-beats-95-uses-hashmap-integer-integer-to-store-product-prices-plus-optimizations",
                "content": "Since we call `getBill()` upwards of 1000 times, it\\'s a good place to make some small optimizations. One optimization is to not calculate the discount using the input value of `n` every time. In other words, it\\'s inefficient for us to calculate `double discount = (double) (n / 100)` every time in `getBill()`. Furthermore, if we use the idea of storing the discount as the percent the customer pays, then instead of `discountedPrice = bill - bill * discountAsPercentOff` we can write `discountedPrice = bill * discountAsPercentCustomerPays`. That\\'s one multply operation instead of a multiply and a subtraction. Small savings, but it adds up!\\n\\n\\n```\\n/*\\nRuntime: 112 ms, faster than 95.52% of Java online submissions for Apply Discount Every n Orders.\\nMemory Usage: 62.4 MB, less than 98.21% of Java online submissions for Apply Discount Every n Orders.\\n*/\\n\\nclass Cashier {\\n    \\n    int n;\\n    double discountAsPercentCustomerPays;\\n    int[] products;\\n    int[] prices;\\n    \\n    Map<Integer, Integer> priceLookup = new HashMap<>();\\n    \\n    int customerCounter = 0; // 1-indexed\\n\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n = n;\\n        this.discountAsPercentCustomerPays = (double) (100 - discount) / 100.0d; // no need to calculate this for every bill since it\\'s going\\n                                                                                 //     to be the same for the life of the Cashier object.\\n                                                                                 //     Also, we store discount as shown so we can just multiply\\n                                                                                 //     bill by this value instead of doing `bill - bill * discount` etc.\\n        this.products = products;\\n        this.prices = prices;\\n        \\n        // store all the prices in a `HashMap` for quick lookup\\n        for (int i = 0; i < products.length; ++i) {\\n            priceLookup.put(products[i], prices[i]);\\n        }\\n        \\n    }\\n    \\n    public double getBill(int[] cart, int[] amount) {\\n        ++customerCounter; // increment\\n        double bill = 0.0d;\\n        \\n        // total up the prices of items in the cart\\n        for (int i = 0; i < cart.length; ++i) {\\n            bill += (double) (priceLookup.get(cart[i]) * amount[i]);\\n        }\\n        \\n        if (customerCounter % n == 0) { // we have an nth customer!\\n            return bill * discountAsPercentCustomerPays;\\n        } else {                        // not an nth customer\\n            return bill;\\n        }\\n        \\n    }\\n    \\n}\\n\\n```",
                "solutionTags": [],
                "code": "```\\n/*\\nRuntime: 112 ms, faster than 95.52% of Java online submissions for Apply Discount Every n Orders.\\nMemory Usage: 62.4 MB, less than 98.21% of Java online submissions for Apply Discount Every n Orders.\\n*/\\n\\nclass Cashier {\\n    \\n    int n;\\n    double discountAsPercentCustomerPays;\\n    int[] products;\\n    int[] prices;\\n    \\n    Map<Integer, Integer> priceLookup = new HashMap<>();\\n    \\n    int customerCounter = 0; // 1-indexed\\n\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n = n;\\n        this.discountAsPercentCustomerPays = (double) (100 - discount) / 100.0d; // no need to calculate this for every bill since it\\'s going\\n                                                                                 //     to be the same for the life of the Cashier object.\\n                                                                                 //     Also, we store discount as shown so we can just multiply\\n                                                                                 //     bill by this value instead of doing `bill - bill * discount` etc.\\n        this.products = products;\\n        this.prices = prices;\\n        \\n        // store all the prices in a `HashMap` for quick lookup\\n        for (int i = 0; i < products.length; ++i) {\\n            priceLookup.put(products[i], prices[i]);\\n        }\\n        \\n    }\\n    \\n    public double getBill(int[] cart, int[] amount) {\\n        ++customerCounter; // increment\\n        double bill = 0.0d;\\n        \\n        // total up the prices of items in the cart\\n        for (int i = 0; i < cart.length; ++i) {\\n            bill += (double) (priceLookup.get(cart[i]) * amount[i]);\\n        }\\n        \\n        if (customerCounter % n == 0) { // we have an nth customer!\\n            return bill * discountAsPercentCustomerPays;\\n        } else {                        // not an nth customer\\n            return bill;\\n        }\\n        \\n    }\\n    \\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1325899,
                "title": "golang-solution",
                "content": "```\\ntype Cashier struct {\\n    count int\\n    n int\\n    discount int\\n    prodprice map[int]int\\n}\\n\\n\\nfunc Constructor(n int, discount int, products []int, prices []int) Cashier {\\n    prodprice := make(map[int]int)\\n    for i:=0;i<len(products);i++ {\\n       prodprice[products[i]] = prices[i]\\n    }\\n    return Cashier{count: 0, n:n, discount: discount, prodprice: prodprice}\\n}\\n\\n\\nfunc (this *Cashier) GetBill(product []int, amount []int) float64 {\\n    cost:=0.0\\n    for i, v := range product {\\n        cost+=float64(this.prodprice[v]*amount[i])\\n    }\\n    this.count++\\n    if this.count == this.n {\\n        cost -=(float64(this.discount)*cost)/100\\n        this.count = 0\\n    }\\n    return cost\\n}\\n\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * obj := Constructor(n, discount, products, prices);\\n * param_1 := obj.GetBill(product,amount);\\n */\\n```",
                "solutionTags": [],
                "code": "```\\ntype Cashier struct {\\n    count int\\n    n int\\n    discount int\\n    prodprice map[int]int\\n}\\n\\n\\nfunc Constructor(n int, discount int, products []int, prices []int) Cashier {\\n    prodprice := make(map[int]int)\\n    for i:=0;i<len(products);i++ {\\n       prodprice[products[i]] = prices[i]\\n    }\\n    return Cashier{count: 0, n:n, discount: discount, prodprice: prodprice}\\n}\\n\\n\\nfunc (this *Cashier) GetBill(product []int, amount []int) float64 {\\n    cost:=0.0\\n    for i, v := range product {\\n        cost+=float64(this.prodprice[v]*amount[i])\\n    }\\n    this.count++\\n    if this.count == this.n {\\n        cost -=(float64(this.discount)*cost)/100\\n        this.count = 0\\n    }\\n    return cost\\n}\\n\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * obj := Constructor(n, discount, products, prices);\\n * param_1 := obj.GetBill(product,amount);\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1303757,
                "title": "simple-go",
                "content": "```\\ntype Cashier struct {\\n    LuckyNumber     int\\n    CustomerCnt     int\\n    Discount        int\\n    ProductPrice    map[int] int\\n}\\n\\nfunc Constructor(n int, discount int, products []int, prices []int) Cashier {\\n    record := map[int] int {}\\n    for i:=0; i<len(products); i++ {\\n        record[products[i]] = prices[i]\\n    }\\n    \\n    return Cashier {\\n        LuckyNumber: n,\\n        CustomerCnt: 0,\\n        Discount: discount,\\n        ProductPrice: record,\\n    }\\n}\\n\\n\\nfunc (this *Cashier) GetBill(product []int, amount []int) float64 {\\n    this.CustomerCnt++\\n    sum := 0\\n    for i:=0; i<len(product); i++ {\\n        sum += this.ProductPrice[product[i]] * amount[i]\\n    }\\n    \\n    if this.CustomerCnt == this.LuckyNumber {\\n        this.CustomerCnt = 0\\n        return float64(sum) - (float64(sum) * float64(this.Discount)) / 100\\n    }\\n    return float64(sum)\\n}\\n\\n```",
                "solutionTags": [],
                "code": "```\\ntype Cashier struct {\\n    LuckyNumber     int\\n    CustomerCnt     int\\n    Discount        int\\n    ProductPrice    map[int] int\\n}\\n\\nfunc Constructor(n int, discount int, products []int, prices []int) Cashier {\\n    record := map[int] int {}\\n    for i:=0; i<len(products); i++ {\\n        record[products[i]] = prices[i]\\n    }\\n    \\n    return Cashier {\\n        LuckyNumber: n,\\n        CustomerCnt: 0,\\n        Discount: discount,\\n        ProductPrice: record,\\n    }\\n}\\n\\n\\nfunc (this *Cashier) GetBill(product []int, amount []int) float64 {\\n    this.CustomerCnt++\\n    sum := 0\\n    for i:=0; i<len(product); i++ {\\n        sum += this.ProductPrice[product[i]] * amount[i]\\n    }\\n    \\n    if this.CustomerCnt == this.LuckyNumber {\\n        this.CustomerCnt = 0\\n        return float64(sum) - (float64(sum) * float64(this.Discount)) / 100\\n    }\\n    return float64(sum)\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1299651,
                "title": "python3-solution-using-dictionary",
                "content": "```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.n = n\\n        self.discount = discount\\n        self.price = {}\\n        for i,j in zip(products, prices):\\n            self.price[i] = j\\n        self.count = 0\\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        bill = 0\\n        self.count += 1\\n        for i in range(len(product)):\\n            bill += self.price[product[i]]*amount[i]\\n        if self.count == self.n:\\n            self.count = 0\\n            bill = bill - ((bill*self.discount)/100)\\n        return bill\\n```\\n**If you like this solution, please upvote for this**",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.n = n\\n        self.discount = discount\\n        self.price = {}\\n        for i,j in zip(products, prices):\\n            self.price[i] = j\\n        self.count = 0\\n\\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        bill = 0\\n        self.count += 1\\n        for i in range(len(product)):\\n            bill += self.price[product[i]]*amount[i]\\n        if self.count == self.n:\\n            self.count = 0\\n            bill = bill - ((bill*self.discount)/100)\\n        return bill\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1292611,
                "title": "python3-straight-forward-solution",
                "content": "```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.discount_person = n\\n        self.discount = discount\\n        self.curr_customer = 0\\n        m = len(products)\\n        self.product_price = {products[i] : prices[i] for i in range(m)}\\n        \\n\\n    def getBill(self, products: List[int], amounts: List[int]) -> float:\\n        self.curr_customer += 1\\n        bill = 0\\n        for index, product in enumerate(products):\\n            bill += self.product_price[product]*amounts[index]\\n        \\n        if self.curr_customer%self.discount_person == 0:\\n            bill -= (bill*self.discount)/100\\n        return bill\\n\\n# Your Cashier object will be instantiated and called as such:\\n# obj = Cashier(n, discount, products, prices)\\n# param_1 = obj.getBill(product,amount)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.discount_person = n\\n        self.discount = discount\\n        self.curr_customer = 0\\n        m = len(products)\\n        self.product_price = {products[i] : prices[i] for i in range(m)}\\n        \\n\\n    def getBill(self, products: List[int], amounts: List[int]) -> float:\\n        self.curr_customer += 1\\n        bill = 0\\n        for index, product in enumerate(products):\\n            bill += self.product_price[product]*amounts[index]\\n        \\n        if self.curr_customer%self.discount_person == 0:\\n            bill -= (bill*self.discount)/100\\n        return bill\\n\\n# Your Cashier object will be instantiated and called as such:\\n# obj = Cashier(n, discount, products, prices)\\n# param_1 = obj.getBill(product,amount)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1278414,
                "title": "runtime-192-ms-faster-than-93-82-of-c-subs-memory-usage-120-4-mb-less-than-78-55",
                "content": "class Cashier {\\npublic:\\n    map<int,int>res;\\n    int i,c=0,s;\\n    double d;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        for(i=0;i<products.size();i++)\\n        {\\n            res[products[i]]=prices[i];\\n        }\\n        s=n;\\n        d=(double)discount;\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        c++;\\n        double ans=0.0;\\n            for(i=0;i<product.size();i++)\\n            {\\n                ans+=res[product[i]]*amount[i];\\n            }\\n        if(c%s==0)\\n        {\\n            ans=(ans-ans*(d/100.0));\\n        }\\n        return ans;\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */",
                "solutionTags": [],
                "code": "class Cashier {\\npublic:\\n    map<int,int>res;\\n    int i,c=0,s;\\n    double d;\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        for(i=0;i<products.size();i++)\\n        {\\n            res[products[i]]=prices[i];\\n        }\\n        s=n;\\n        d=(double)discount;\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        c++;\\n        double ans=0.0;\\n            for(i=0;i<product.size();i++)\\n            {\\n                ans+=res[product[i]]*amount[i];\\n            }\\n        if(c%s==0)\\n        {\\n            ans=(ans-ans*(d/100.0));\\n        }\\n        return ans;\\n    }\\n};\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier* obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj->getBill(product,amount);\\n */",
                "codeTag": "Java"
            },
            {
                "id": 1276600,
                "title": "c-oop-style-code-with-product-class-implemented-with-explanation",
                "content": "Implement Product class which stores productId, productPrice\\nImplement Cashier class with Product*, customerCount to apply discount.\\n\\n```\\nclass Product {\\n    int id;\\n    int price;\\n    \\npublic:\\n    Product(int id_, int price_) : id(id_), price(price_) {}\\n    int totalCost(int productCount) {\\n        return productCount * price;\\n    }\\n};\\n\\nclass Cashier {\\n    unordered_map <int, Product*> inventory;\\n    int luckyCustomerNumber;\\n    int discountPercentage;\\n    int currentCustomerId;\\n    \\npublic:\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        for (int i = 0; i < products.size(); i++) {\\n            if (getProduct(products[i]) == NULL) {\\n                Product *product = new Product(products[i], prices[i]);\\n                inventory[products[i]] = product;\\n            }\\n        }\\n        discountPercentage = discount;\\n        luckyCustomerNumber = n;\\n        currentCustomerId = 0;\\n    }\\n    \\n    Product* getProduct(int product_id) {\\n        if (inventory.find(product_id) != inventory.end()) {\\n            return inventory[product_id];\\n        }\\n        return NULL;\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        double totalBill = 0.0;\\n        for (int i = 0; i < product.size(); i++) {\\n            Product *product_i = getProduct(product[i]);\\n            totalBill += product_i->totalCost(amount[i]);\\n        }\\n        if (++currentCustomerId == luckyCustomerNumber) {\\n            totalBill *= (100.0 - discountPercentage) / 100.0;\\n            currentCustomerId = 0;\\n        }\\n        return totalBill;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Design"
                ],
                "code": "```\\nclass Product {\\n    int id;\\n    int price;\\n    \\npublic:\\n    Product(int id_, int price_) : id(id_), price(price_) {}\\n    int totalCost(int productCount) {\\n        return productCount * price;\\n    }\\n};\\n\\nclass Cashier {\\n    unordered_map <int, Product*> inventory;\\n    int luckyCustomerNumber;\\n    int discountPercentage;\\n    int currentCustomerId;\\n    \\npublic:\\n    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {\\n        for (int i = 0; i < products.size(); i++) {\\n            if (getProduct(products[i]) == NULL) {\\n                Product *product = new Product(products[i], prices[i]);\\n                inventory[products[i]] = product;\\n            }\\n        }\\n        discountPercentage = discount;\\n        luckyCustomerNumber = n;\\n        currentCustomerId = 0;\\n    }\\n    \\n    Product* getProduct(int product_id) {\\n        if (inventory.find(product_id) != inventory.end()) {\\n            return inventory[product_id];\\n        }\\n        return NULL;\\n    }\\n    \\n    double getBill(vector<int> product, vector<int> amount) {\\n        double totalBill = 0.0;\\n        for (int i = 0; i < product.size(); i++) {\\n            Product *product_i = getProduct(product[i]);\\n            totalBill += product_i->totalCost(amount[i]);\\n        }\\n        if (++currentCustomerId == luckyCustomerNumber) {\\n            totalBill *= (100.0 - discountPercentage) / 100.0;\\n            currentCustomerId = 0;\\n        }\\n        return totalBill;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1246659,
                "title": "python-solution-with-comments",
                "content": "```python\\nclass Cashier:\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        # Products and number of customers served\\n        self.products, self.nr_customer = {}, 0\\n        \\n        # Discount and Discount for every n\\'th customer\\n        self.discount, self.discount_at_n = discount, n\\n        \\n        for product in products:\\n            # Get the price for the corresponding product\\n            # To get it always pop the first value per product\\n            self.products[product] = prices.pop(0)\\n                \\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        # Increase customer count\\n        self.nr_customer += 1\\n        \\n        # Float value starting at 0.0\\n        total = 0.0\\n        for p in product:\\n            # Calculate total\\n            total += self.products[p] * amount.pop(0)\\n        \\n        if self.nr_customer == self.discount_at_n:\\n            # Reset customer count\\n            self.nr_customer = 0\\n            \\n            # Deduce discount after self.nr_customer\\n            total -= (self.discount * total) / 100\\n        \\n        return total\\n```",
                "solutionTags": [],
                "code": "```python\\nclass Cashier:\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        # Products and number of customers served\\n        self.products, self.nr_customer = {}, 0\\n        \\n        # Discount and Discount for every n\\'th customer\\n        self.discount, self.discount_at_n = discount, n\\n        \\n        for product in products:\\n            # Get the price for the corresponding product\\n            # To get it always pop the first value per product\\n            self.products[product] = prices.pop(0)\\n                \\n    def getBill(self, product: List[int], amount: List[int]) -> float:\\n        # Increase customer count\\n        self.nr_customer += 1\\n        \\n        # Float value starting at 0.0\\n        total = 0.0\\n        for p in product:\\n            # Calculate total\\n            total += self.products[p] * amount.pop(0)\\n        \\n        if self.nr_customer == self.discount_at_n:\\n            # Reset customer count\\n            self.nr_customer = 0\\n            \\n            # Deduce discount after self.nr_customer\\n            total -= (self.discount * total) / 100\\n        \\n        return total\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1239294,
                "title": "113-ms-java-solution-no-hashmap-needed-because-of-constraints",
                "content": "\\tclass Cashier {\\n\\t\\tint[] map;\\n\\t\\tint customer;\\n\\t\\tint n;\\n\\t\\tdouble discount;\\n\\t\\tpublic Cashier(int n, int discount, int[] products, int[] prices) {\\n\\t\\t\\tthis.n = n;\\n\\t\\t\\tthis.customer = 0;\\n\\t\\t\\tthis.discount = (1 - discount/(double)100);\\n\\t\\t\\tmap = new int[201];\\n\\t\\t\\tfor(int i=0; i<products.length; i++) map[products[i]] = prices[i];\\n\\t\\t}\\n\\n\\t\\tpublic double getBill(int[] product, int[] amount) {\\n\\t\\t\\tdouble price = 0;\\n\\t\\t\\tfor(int i=0; i<product.length; i++) {\\n\\t\\t\\t\\tprice += (double)map[product[i]]*amount[i];\\n\\t\\t\\t}\\n\\t\\t\\tthis.customer++;\\n\\t\\t\\treturn this.customer%n == 0?price*discount:price;\\n\\t\\t}\\n\\t}",
                "solutionTags": [],
                "code": "\\tclass Cashier {\\n\\t\\tint[] map;\\n\\t\\tint customer;\\n\\t\\tint n;\\n\\t\\tdouble discount;\\n\\t\\tpublic Cashier(int n, int discount, int[] products, int[] prices) {\\n\\t\\t\\tthis.n = n;\\n\\t\\t\\tthis.customer = 0;\\n\\t\\t\\tthis.discount = (1 - discount/(double)100);\\n\\t\\t\\tmap = new int[201];\\n\\t\\t\\tfor(int i=0; i<products.length; i++) map[products[i]] = prices[i];\\n\\t\\t}\\n\\n\\t\\tpublic double getBill(int[] product, int[] amount) {\\n\\t\\t\\tdouble price = 0;\\n\\t\\t\\tfor(int i=0; i<product.length; i++) {\\n\\t\\t\\t\\tprice += (double)map[product[i]]*amount[i];\\n\\t\\t\\t}\\n\\t\\t\\tthis.customer++;\\n\\t\\t\\treturn this.customer%n == 0?price*discount:price;\\n\\t\\t}\\n\\t}",
                "codeTag": "Java"
            },
            {
                "id": 1236167,
                "title": "java-solution",
                "content": "````\\nclass Cashier {\\n    int n;\\n    int a;\\n    int discount;\\n    int[] products;\\n    int[] prices;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n=n;\\n        this.a=n;\\n        this.discount=discount;\\n        this.products=products;\\n        this.prices=prices;   \\n       \\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        n=(n+1)%a;\\n        double sum=0;\\n        for(int id:product){\\n            sum+=amount[index(id,product)]*prices[index(id,this.products)];\\n        }\\n        if(n==0){\\n            sum=sum-Math.floor(this.discount*sum)/100;\\n        }\\n        return(sum);\\n    }\\n    public int index(int id,int[] arr){\\n        int k=0;\\n        for(int i=0;i<arr.length;i++){\\n            if(arr[i]==id){\\n                k=i;\\n                break;\\n            }\\n        }\\n        return(k);\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */",
                "solutionTags": [],
                "code": "````\\nclass Cashier {\\n    int n;\\n    int a;\\n    int discount;\\n    int[] products;\\n    int[] prices;\\n    public Cashier(int n, int discount, int[] products, int[] prices) {\\n        this.n=n;\\n        this.a=n;\\n        this.discount=discount;\\n        this.products=products;\\n        this.prices=prices;   \\n       \\n    }\\n    \\n    public double getBill(int[] product, int[] amount) {\\n        n=(n+1)%a;\\n        double sum=0;\\n        for(int id:product){\\n            sum+=amount[index(id,product)]*prices[index(id,this.products)];\\n        }\\n        if(n==0){\\n            sum=sum-Math.floor(this.discount*sum)/100;\\n        }\\n        return(sum);\\n    }\\n    public int index(int id,int[] arr){\\n        int k=0;\\n        for(int i=0;i<arr.length;i++){\\n            if(arr[i]==id){\\n                k=i;\\n                break;\\n            }\\n        }\\n        return(k);\\n    }\\n}\\n\\n/**\\n * Your Cashier object will be instantiated and called as such:\\n * Cashier obj = new Cashier(n, discount, products, prices);\\n * double param_1 = obj.getBill(product,amount);\\n */",
                "codeTag": "Java"
            },
            {
                "id": 1216356,
                "title": "javascript-faster-than-82-less-memory-than-100",
                "content": "```\\n/**\\n * @param {number} n\\n * @param {number} discount\\n * @param {number[]} products\\n * @param {number[]} prices\\n */\\nvar Cashier = function(n, discount, products, prices) {\\n    this.n = n;\\n    this.discount = discount; \\n    this.prices = products.reduce((agg, product, index) => {\\n        agg[product] = prices[index];\\n        return agg;\\n    }, {})\\n    this.counter = 0;\\n};\\n\\n/** \\n * @param {number[]} product \\n * @param {number[]} amount\\n * @return {number}\\n */\\nCashier.prototype.getBill = function(product, amount) {\\n    this.counter++;\\n    let sum = product.reduce((agg, prodId, index) => {\\n        const price = this.prices[prodId];\\n        const productSum = amount[index] * price;\\n        return agg + productSum;\\n    }, 0)\\n    if (this.counter % this.n === 0){\\n        sum = sum - (sum / 100 * this.discount); \\n    }\\n    return sum;\\n};\\n\\n/** \\n * Your Cashier object will be instantiated and called as such:\\n * var obj = new Cashier(n, discount, products, prices)\\n * var param_1 = obj.getBill(product,amount)\\n */\\n ```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} n\\n * @param {number} discount\\n * @param {number[]} products\\n * @param {number[]} prices\\n */\\nvar Cashier = function(n, discount, products, prices) {\\n    this.n = n;\\n    this.discount = discount; \\n    this.prices = products.reduce((agg, product, index) => {\\n        agg[product] = prices[index];\\n        return agg;\\n    }, {})\\n    this.counter = 0;\\n};\\n\\n/** \\n * @param {number[]} product \\n * @param {number[]} amount\\n * @return {number}\\n */\\nCashier.prototype.getBill = function(product, amount) {\\n    this.counter++;\\n    let sum = product.reduce((agg, prodId, index) => {\\n        const price = this.prices[prodId];\\n        const productSum = amount[index] * price;\\n        return agg + productSum;\\n    }, 0)\\n    if (this.counter % this.n === 0){\\n        sum = sum - (sum / 100 * this.discount); \\n    }\\n    return sum;\\n};\\n\\n/** \\n * Your Cashier object will be instantiated and called as such:\\n * var obj = new Cashier(n, discount, products, prices)\\n * var param_1 = obj.getBill(product,amount)\\n */\\n ```",
                "codeTag": "Unknown"
            },
            {
                "id": 1190026,
                "title": "python-easy-to-understand-dictonary",
                "content": "```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.discount = discount \\n        self.repeat = n\\n        self.temp = n\\n        \\n        # dict of product:price \\n        self.price = {product:price for product, price in zip(products, prices)}\\n\\n    def getBill(self, products: List[int], amount: List[int]) -> float:\\n        total = 0\\n\\n        #computing total\\n        for product, quantity in zip(products, amount):\\n            total += self.price[product] * quantity\\n        \\n        # if the current customer is not nth customer then return total else nth customer apply disscount\\n        if self.temp > 1:\\n            self.temp -= 1\\n            return float(total)\\n        else:\\n            self.temp = self.repeat\\n            return total - (self.discount * total)/100\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Cashier:\\n\\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n        self.discount = discount \\n        self.repeat = n\\n        self.temp = n\\n        \\n        # dict of product:price \\n        self.price = {product:price for product, price in zip(products, prices)}\\n\\n    def getBill(self, products: List[int], amount: List[int]) -> float:\\n        total = 0\\n\\n        #computing total\\n        for product, quantity in zip(products, amount):\\n            total += self.price[product] * quantity\\n        \\n        # if the current customer is not nth customer then return total else nth customer apply disscount\\n        if self.temp > 1:\\n            self.temp -= 1\\n            return float(total)\\n        else:\\n            self.temp = self.repeat\\n            return total - (self.discount * total)/100\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1180285,
                "title": "javascript-solution",
                "content": "```\\n/**\\n * @param {number} n\\n * @param {number} discount\\n * @param {number[]} products\\n * @param {number[]} prices\\n */\\nvar Cashier = function(n, discount, products, prices) {\\n    this.discount = discount\\n    this.n = n\\n    // product id => price\\n    const map = new Map()\\n    const len = products.length\\n    for (let i = 0; i < len; i++) {\\n        const product = products[i]\\n        const price = prices[i]\\n        map.set(product, price)\\n    }\\n    \\n    this.map = map\\n    this.index = 1\\n};\\n\\n/** \\n * @param {number[]} product \\n * @param {number[]} amount\\n * @return {number}\\n */\\nCashier.prototype.getBill = function(products, amounts) {\\n    const { discount, map, n } = this\\n    const len = products.length\\n    let result = 0\\n    for (let i = 0; i < len; i++) {\\n        const product = products[i]\\n        const price = map.get(product)\\n        const amount = amounts[i]\\n        \\n        let outcome = price * amount\\n        result += outcome\\n    }\\n    \\n    if (this.index % n === 0) {\\n        // should apply discount\\n        const subtractMe = result * discount / 100\\n        result -= subtractMe\\n    }\\n    \\n    \\n    this.index++\\n    return result\\n};\\n\\n/** \\n * Your Cashier object will be instantiated and called as such:\\n * var obj = new Cashier(n, discount, products, prices)\\n * var param_1 = obj.getBill(product,amount)\\n */\\n ```",
                "solutionTags": [],
                "code": "```\\n/**\\n * @param {number} n\\n * @param {number} discount\\n * @param {number[]} products\\n * @param {number[]} prices\\n */\\nvar Cashier = function(n, discount, products, prices) {\\n    this.discount = discount\\n    this.n = n\\n    // product id => price\\n    const map = new Map()\\n    const len = products.length\\n    for (let i = 0; i < len; i++) {\\n        const product = products[i]\\n        const price = prices[i]\\n        map.set(product, price)\\n    }\\n    \\n    this.map = map\\n    this.index = 1\\n};\\n\\n/** \\n * @param {number[]} product \\n * @param {number[]} amount\\n * @return {number}\\n */\\nCashier.prototype.getBill = function(products, amounts) {\\n    const { discount, map, n } = this\\n    const len = products.length\\n    let result = 0\\n    for (let i = 0; i < len; i++) {\\n        const product = products[i]\\n        const price = map.get(product)\\n        const amount = amounts[i]\\n        \\n        let outcome = price * amount\\n        result += outcome\\n    }\\n    \\n    if (this.index % n === 0) {\\n        // should apply discount\\n        const subtractMe = result * discount / 100\\n        result -= subtractMe\\n    }\\n    \\n    \\n    this.index++\\n    return result\\n};\\n\\n/** \\n * Your Cashier object will be instantiated and called as such:\\n * var obj = new Cashier(n, discount, products, prices)\\n * var param_1 = obj.getBill(product,amount)\\n */\\n ```",
                "codeTag": "Unknown"
            },
            {
                "id": 1168724,
                "title": "javascript-solution-hash-map",
                "content": "```\\nvar Cashier = function(n, discount, products, prices) {\\n    this.n = n;\\n    this.discount = discount;\\n    this.prices = {};\\n    this.customer = 0;\\n    for(let i in products) { this.prices[products[i]] = prices[i] }\\n};\\n\\nCashier.prototype.getBill = function(product, amount) {\\n    this.customer++;\\n    let total = 0;\\n    for (let i in product) {\\n       total += amount[i] * this.prices[product[i]]\\n    }\\n     if (this.customer % this.n === 0) {\\n          return total - (this.discount * total) /100\\n    }\\n    return total;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Hash Table"
                ],
                "code": "```\\nvar Cashier = function(n, discount, products, prices) {\\n    this.n = n;\\n    this.discount = discount;\\n    this.prices = {};\\n    this.customer = 0;\\n    for(let i in products) { this.prices[products[i]] = prices[i] }\\n};\\n\\nCashier.prototype.getBill = function(product, amount) {\\n    this.customer++;\\n    let total = 0;\\n    for (let i in product) {\\n       total += amount[i] * this.prices[product[i]]\\n    }\\n     if (this.customer % this.n === 0) {\\n          return total - (this.discount * total) /100\\n    }\\n    return total;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1156951,
                "title": "simple-python",
                "content": "\\'\\'\\'\\n\\t\\n\\tclass Cashier:\\n\\n\\t\\tdef __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n\\t\\t\\tself.current_customer = 0  # used to track if this customer should get a discount\\n\\t\\t\\tself.discount_multiplier = discount / 100  # used to discount\\n\\t\\t\\tself.n = n  # when to use discount on the nth customer\\n\\n\\t\\t\\tself.dict = {}  # dict of all items and their price\\n\\n\\t\\t\\t# adding items and their price to the dict\\n\\t\\t\\tfor i in range(len(products)):\\n\\t\\t\\t\\titem = products[i]\\n\\t\\t\\t\\tself.dict[item] = prices[i]\\n\\n\\t\\tdef getBill(self, product: List[int], amount: List[int]) -> float:\\n\\t\\t\\tself.current_customer += 1\\n\\n\\t\\t\\t# adding up the total price of the bill\\n\\t\\t\\tbill = 0\\n\\n\\t\\t\\tfor i in range(len(product)):\\n\\t\\t\\t\\titem = product[i]\\n\\t\\t\\t\\tbill += self.dict[item] * amount[i]\\n\\n\\t\\t\\t# applying discount if needed\\n\\t\\t\\tif self.current_customer % self.n == 0:  # if nth customer\\n\\t\\t\\t\\tbill = bill - (bill * self.discount_multiplier)\\n\\n\\t\\t\\treturn bill\\n\\t\\t\\t\\n\\'\\'\\'",
                "solutionTags": [],
                "code": "\\'\\'\\'\\n\\t\\n\\tclass Cashier:\\n\\n\\t\\tdef __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\\n\\t\\t\\tself.current_customer = 0  # used to track if this customer should get a discount\\n\\t\\t\\tself.discount_multiplier = discount / 100  # used to discount\\n\\t\\t\\tself.n = n  # when to use discount on the nth customer\\n\\n\\t\\t\\tself.dict = {}  # dict of all items and their price\\n\\n\\t\\t\\t# adding items and their price to the dict\\n\\t\\t\\tfor i in range(len(products)):\\n\\t\\t\\t\\titem = products[i]\\n\\t\\t\\t\\tself.dict[item] = prices[i]\\n\\n\\t\\tdef getBill(self, product: List[int], amount: List[int]) -> float:\\n\\t\\t\\tself.current_customer += 1\\n\\n\\t\\t\\t# adding up the total price of the bill\\n\\t\\t\\tbill = 0\\n\\n\\t\\t\\tfor i in range(len(product)):\\n\\t\\t\\t\\titem = product[i]\\n\\t\\t\\t\\tbill += self.dict[item] * amount[i]\\n\\n\\t\\t\\t# applying discount if needed\\n\\t\\t\\tif self.current_customer % self.n == 0:  # if nth customer\\n\\t\\t\\t\\tbill = bill - (bill * self.discount_multiplier)\\n\\n\\t\\t\\treturn bill\\n\\t\\t\\t\\n\\'\\'\\'",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1803748,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "I feel like reading a novel instead of such a lengthy problem description."
                    },
                    {
                        "username": "sawang325",
                        "content": "The difficulty of this problem should be easy since the solution is quite straight forward."
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "una kenna pa neraya problems poduva"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "I have no idea what this problem is asking.  Can someone explain in simpler terms please"
                    }
                ]
            },
            {
                "id": 1925511,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "I feel like reading a novel instead of such a lengthy problem description."
                    },
                    {
                        "username": "sawang325",
                        "content": "The difficulty of this problem should be easy since the solution is quite straight forward."
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "una kenna pa neraya problems poduva"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "I have no idea what this problem is asking.  Can someone explain in simpler terms please"
                    }
                ]
            },
            {
                "id": 2018405,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "I feel like reading a novel instead of such a lengthy problem description."
                    },
                    {
                        "username": "sawang325",
                        "content": "The difficulty of this problem should be easy since the solution is quite straight forward."
                    },
                    {
                        "username": "ASWINNATH123",
                        "content": "una kenna pa neraya problems poduva"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "I have no idea what this problem is asking.  Can someone explain in simpler terms please"
                    }
                ]
            }
        ]
    }
]