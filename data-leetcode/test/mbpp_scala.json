[
    {
        "task_id": "100",
        "title": "next_smallest_palindrome",
        "text": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def nextSmallestPalindrome(num : Long) : Long = {\n        Long.MIN_VALUE,\n        Long.MAX_VALUE\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(nextSmallestPalindrome((99l)) == (101l));",
            "assert(nextSmallestPalindrome((1221l)) == (1331l));",
            "assert(nextSmallestPalindrome((120l)) == (121l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "101",
        "title": "kth_element",
        "text": "Write a function to find the kth element in the given list using 1-based indexing.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def kthElement(arr : List[Long], k : Long) : Long = {\n        i : i + 1\n        for i in range(len(arr))\n        if arr[i] < k\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(kthElement((List[Long](12l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 19l.toLong)), (2l)) == (3l));",
            "assert(kthElement((List[Long](17l.toLong, 24l.toLong, 8l.toLong, 23l.toLong)), (3l)) == (8l));",
            "assert(kthElement((List[Long](16l.toLong, 21l.toLong, 25l.toLong, 36l.toLong, 4l.toLong)), (4l)) == (36l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "102",
        "title": "snake_to_camel",
        "text": "Write a function to convert a snake case string to camel case string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def snakeToCamel(word : String) : String = {\n        \"A\": \"a\",\n        \"B\": \"b\",\n        \"C\": \"c\",\n        \"D\": \"d\",\n        \"E\": \"e\",\n        \"F\": \"f\",\n        \"G\": \"g\",\n        \"H\": \"h\",\n        \"I\": \"i\",\n        \"J\": \"j\",\n        \"K\": \"k\",\n        \"L\": \"l\",\n        \"M\": \"m\",\n        \"N\": \"n\",\n        \"O\": \"o\",\n        \"P\": \"p\",\n        \"Q\": \"q\",\n        \"R\": \"r\",\n        \"S\": \"s\",\n        \"T\": \"t\",\n        \"U\": \"u\",\n        \"V\": \"v\",\n        \"W\": \"w\",\n        \"X\": \"x\",\n        \"Y\": \"y\",\n        \"Z\": \"z\",\n        \"a\": \"A\",\n        \"b\": \"B\",\n        \"c\": \"C\",\n        \"d\": \"D\",\n        \"e\": \"E\",\n        \"f\": \"F\",\n        \"g\": \"G\",\n        \"h\": \"H\",\n        \"i\": \"I\",\n        \"j\": \"J\",\n        \"k\": \"K\",\n        \"l\": \"L\",\n        \"m\": \"M\",\n        \"n\": \"N\",\n        \"o\": \"O\",\n        \"p\": \"P\",\n        \"q\": \"Q\",\n        \"r\": \"R\",\n        \"s\": \"S\",\n        \"t\": \"T\",\n        \"u\": \"U\",\n        \"v\": \"V\",\n        \"w\": \"W\",\n        \"x\": \"X\",\n        \"y\": \"Y\",\n        \"z\": \"Z\",\n        \"A\": \"A\",\n        \"B\": \"B\",\n        \"C\": \"C\",\n        \"D\": \"D\",\n        \"E\": \"E\",\n        \"\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));",
            "assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));",
            "assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "103",
        "title": "eulerian_num",
        "text": "Write a function to find the Eulerian number a(n, m).",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def eulerianNum(n : Long, m : Long) : Long = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        72 : 72,\n        73 : 73,\n        74 : 74,\n        75\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(eulerianNum((3l), (1l)) == (4l));",
            "assert(eulerianNum((4l), (1l)) == (11l));",
            "assert(eulerianNum((5l), (3l)) == (26l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "104",
        "title": "sort_sublists",
        "text": "Write a function to sort each sublist of strings in a given list of lists.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sortSublists(input_list : List[List[String]]) : List[List[String]] = {\n        input_list[i] : input_list[i] for i in range(len(input_list))\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));",
            "assert(sortSublists((List[List[String]](List[String](\" red \", \"green\"), List[String](\"blue \", \" black\"), List[String](\" orange\", \"brown\")))).equals((List[List[String]](List[String](\" red \", \"green\"), List[String](\" black\", \"blue \"), List[String](\" orange\", \"brown\")))));",
            "assert(sortSublists((List[List[String]](List[String](\"zilver\", \"gold\"), List[String](\"magnesium\", \"aluminium\"), List[String](\"steel\", \"bronze\")))).equals((List[List[String]](List[String](\"gold\", \"zilver\"), List[String](\"aluminium\", \"magnesium\"), List[String](\"bronze\", \"steel\")))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "105",
        "title": "count",
        "text": "Write a scalathon function to count true booleans in the given list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def count(lst : List[Boolean]) : Long = {\n        lst.count(lst.length() == 0)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(count((List[Boolean](true.toBoolean, false.toBoolean, true.toBoolean))) == (2l));",
            "assert(count((List[Boolean](false.toBoolean, false.toBoolean))) == (0l));",
            "assert(count((List[Boolean](true.toBoolean, true.toBoolean, true.toBoolean))) == (3l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "106",
        "title": "add_lists",
        "text": "Write a function to append the given list to the given tuples.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def addLists(test_list : List[Long], test_tup : Tuple2[Long, Long]) : Tuple2[Long, Long, Long, Long, Long] = {\n        test_list.append(test_tup.a),\n        test_list.append(test_tup.b),\n        test_list.append(test_tup.c),\n        test_list.append(test_tup.d),\n        test_list.append(test_tup.e),\n        test_list.append(test_tup.f),\n        test_list.append(test_tup.g),\n        test_list.append(test_tup.h),\n        test_list.append(test_tup.i),\n        test_list.append(test_tup.j),\n        test_list.append(test_tup.k),\n        test_list.append(test_tup.l),\n        test_list.append(test_tup.m),\n        test_list.append(test_tup.n),\n        test_list.append(test_tup.o),\n        test_list.append(test_tup.p),\n        test_list.append(test_tup.q),\n        test_list.append(test_tup.r),\n        test_list.append(test_tup.s),\n        test_list.append(test_tup.t),\n        test_list.append(test_tup.u),\n        test_list.append(test_tup.v),\n        test_list.append(test_tup.w),\n        test_list.append(test_tup.x),\n        test_list.append(test_tup.y),\n        test_list.append(test_tup.z),\n        test_list.append(test_tup.A),\n        test_list.append(test_tup.B),\n        test_list.append(test_\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(addLists((List[Long](5l.toLong, 6l.toLong, 7l.toLong)), ((9l, 10l))).equals(((9l, 10l, 5l, 6l, 7l))));",
            "assert(addLists((List[Long](6l.toLong, 7l.toLong, 8l.toLong)), ((10l, 11l))).equals(((10l, 11l, 6l, 7l, 8l))));",
            "assert(addLists((List[Long](7l.toLong, 8l.toLong, 9l.toLong)), ((11l, 12l))).equals(((11l, 12l, 7l, 8l, 9l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "108",
        "title": "merge_sorted_list",
        "text": "Write a function to merge three lists into a single sorted list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def mergeSortedList(num1 : List[Long], num2 : List[Long], num3 : List[Long]) : List[Long] = {\n        num1.sort(), num2.sort(), num3.sort()\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(mergeSortedList((List[Long](25l.toLong, 24l.toLong, 15l.toLong, 4l.toLong, 5l.toLong, 29l.toLong, 110l.toLong)), (List[Long](19l.toLong, 20l.toLong, 11l.toLong, 56l.toLong, 25l.toLong, 233l.toLong, 154l.toLong)), (List[Long](24l.toLong, 26l.toLong, 54l.toLong, 48l.toLong))).equals((List[Long](4l.toLong, 5l.toLong, 11l.toLong, 15l.toLong, 19l.toLong, 20l.toLong, 24l.toLong, 24l.toLong, 25l.toLong, 25l.toLong, 26l.toLong, 29l.toLong, 48l.toLong, 54l.toLong, 56l.toLong, 110l.toLong, 154l.toLong, 233l.toLong))));",
            "assert(mergeSortedList((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (List[Long](2l.toLong, 5l.toLong, 7l.toLong, 11l.toLong)), (List[Long](1l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 12l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong))));",
            "assert(mergeSortedList((List[Long](18l.toLong, 14l.toLong, 10l.toLong, 9l.toLong, 8l.toLong, 7l.toLong, 9l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 1l.toLong)), (List[Long](25l.toLong, 35l.toLong, 22l.toLong, 85l.toLong, 14l.toLong, 65l.toLong, 75l.toLong, 25l.toLong, 58l.toLong)), (List[Long](12l.toLong, 74l.toLong, 9l.toLong, 50l.toLong, 61l.toLong, 41l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 14l.toLong, 18l.toLong, 22l.toLong, 25l.toLong, 25l.toLong, 35l.toLong, 41l.toLong, 50l.toLong, 58l.toLong, 61l.toLong, 65l.toLong, 74l.toLong, 75l.toLong, 85l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "109",
        "title": "odd_Equivalent",
        "text": "Write a scalathon function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def oddEquivalent(s : String, n : Long) : Long = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        '10': 10,\n        '11': 11,\n        '12': 12,\n        '13': 13,\n        '14': 14,\n        '15': 15,\n        '16': 16,\n        '17': 17,\n        '18': 18,\n        '19': 19,\n        '20': 20,\n        '21': 21,\n        '22': 22,\n        '23': 23,\n        '24': 24,\n        '25': 25,\n        '26': 26,\n        '27': 27,\n        '28': 28,\n        '29': 29,\n        '30': 30,\n        '31': 31,\n        '32': 32,\n        '33': 33,\n        '34': 34,\n        '35': 35,\n        '36': 36,\n        '37': 37,\n        '38': 38,\n        '39': 39,\n        '40': 40,\n        '41': 41,\n        '42': 42,\n        '43': 43,\n        '44': 44,\n        '45': 45,\n        '46': 46,\n        '47': 47,\n        '48': 48,\n        '49': 49,\n        '50': 50,\n        '51': 51,\n        '52': 52,\n        '53': 53,\n        '54': 54,\n        '55': 55,\n        '56': 56,\n        '57': 57,\n        '58': 58,\n        '59': 59,\n        '60': 60,\n        '61': 61,\n        '62': 62,\n        '\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(oddEquivalent((\"011001\"), (6l)) == (3l));",
            "assert(oddEquivalent((\"11011\"), (5l)) == (4l));",
            "assert(oddEquivalent((\"1010\"), (4l)) == (2l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "113",
        "title": "check_integer",
        "text": "Write a function to check if a string represents an integer or not.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def checkInteger(text : String) : Boolean = {\n        Integer.parseInt(text)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(checkInteger((\"python\")) == (false));",
            "assert(checkInteger((\"1\")) == (true));",
            "assert(checkInteger((\"12345\")) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "116",
        "title": "tuple_to_int",
        "text": "Write a function to convert a given tuple of positive integers into a single integer.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def tupleToInt(nums : Tuple2[Long, Long, Long]) : Long = {\n        0: 0,\n        1: 1,\n        2: 2,\n        3: 3,\n        4: 4,\n        5: 5,\n        6: 6,\n        7: 7,\n        8: 8,\n        9: 9,\n        10: 10,\n        11: 11,\n        12: 12,\n        13: 13,\n        14: 14,\n        15: 15,\n        16: 16,\n        17: 17,\n        18: 18,\n        19: 19,\n        20: 20,\n        21: 21,\n        22: 22,\n        23: 23,\n        24: 24,\n        25: 25,\n        26: 26,\n        27: 27,\n        28: 28,\n        29: 29,\n        30: 30,\n        31: 31,\n        32: 32,\n        33: 33,\n        34: 34,\n        35: 35,\n        36: 36,\n        37: 37,\n        38: 38,\n        39: 39,\n        40: 40,\n        41: 41,\n        42: 42,\n        43: 43,\n        44: 44,\n        45: 45,\n        46: 46,\n        47: 47,\n        48: 48,\n        49: 49,\n        50: 50,\n        51: 51,\n        52: 52,\n        53: 53,\n        54: 54,\n        55: 55,\n        56: 56,\n        57: 57,\n        58: 58,\n        59: 59,\n        60: 60,\n        61: 61,\n        62: 62,\n        63: 63,\n        64: 64,\n        65: 65,\n        66: 66,\n        67: 67,\n        68: 68,\n        69: 69,\n        70: 70,\n        71: 71,\n        72: 72,\n        73: 73,\n        74: 74\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(tupleToInt(((1l, 2l, 3l))) == (123l));",
            "assert(tupleToInt(((4l, 5l, 6l))) == (456l));",
            "assert(tupleToInt(((5l, 6l, 7l))) == (567l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "117",
        "title": "list_to_float",
        "text": "Write a function to convert all possible convertible elements in a list of lists to floats.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def listToFloat(test_list : List[Tuple2[String, String]]) : List[Tuple2[Float, Float]] = {\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x, y) : x * y,\n        (x,\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(listToFloat((List[Tuple2[String, String]]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Tuple2[Float, Float]]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));",
            "assert(listToFloat((List[Tuple2[String, String]]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Tuple2[Float, Float]]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));",
            "assert(listToFloat((List[Tuple2[String, String]]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Tuple2[Float, Float]]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "118",
        "title": "string_to_list",
        "text": "Write a function to convert a string to a list of strings split on the space character.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def stringToList(string : String) : List[String] = {\n        string.split(\" \")\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(stringToList((\"python programming\")).equals((List[String](\"python\", \"programming\"))));",
            "assert(stringToList((\"lists tuples strings\")).equals((List[String](\"lists\", \"tuples\", \"strings\"))));",
            "assert(stringToList((\"write a program\")).equals((List[String](\"write\", \"a\", \"program\"))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "119",
        "title": "search",
        "text": "Write a scalathon function to find the element that appears only once in a sorted list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def search(arr : List[Long]) : Long = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        72 : 72,\n        73 : 73,\n        74 : 74,\n        75 : 75,\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));",
            "assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));",
            "assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "11",
        "title": "remove_Occ",
        "text": "Write a scalathon function to remove first and last occurrence of a given character from the string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def removeOcc(s : String, ch : String) : String = {\n        'a' : 'b',\n        'b' : 'c',\n        'c' : 'd',\n        'd' : 'e',\n        'e' : 'f',\n        'f' : 'g',\n        'g' : 'h',\n        'h' : 'i',\n        'i' : 'j',\n        'j' : 'k',\n        'k' : 'l',\n        'l' :'m',\n       'm' : 'n',\n        'n' : 'o',\n        'o' : 'p',\n        'p' : 'q',\n        'q' : 'r',\n        'r' :'s',\n       's' : 't',\n        't' : 'u',\n        'u' : 'v',\n        'v' : 'w',\n        'w' : 'x',\n        'x' : 'y',\n        'y' : 'z',\n        'z' : 'A',\n        'A' : 'B',\n        'B' : 'C',\n        'C' : 'D',\n        'D' : 'E',\n        'E' : 'F',\n        'F' : 'G',\n        'G' : 'H',\n        'H' : 'I',\n        'I' : 'J',\n        'J' : 'K',\n        'K' : 'L',\n        'L' : 'M',\n        'M' : 'N',\n        'N' : 'O',\n        'O' : 'P',\n        'P' : 'Q',\n        'Q' : 'R',\n        'R' : 'S',\n        'S' : 'T',\n        'T' : 'U',\n        'U' : 'V',\n        'V' : 'W',\n        'W' : 'X',\n        'X' : 'Y',\n        'Y' :\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));",
            "assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));",
            "assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "120",
        "title": "max_product_tuple",
        "text": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maxProductTuple(list1 : List[Tuple2[Long, Long]]) : Long = {\n        (x, y) -> x * y\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(maxProductTuple((List[Tuple2[Long, Long]]((2l, 7l), (2l, 6l), (1l, 8l), (4l, 9l)))) == (36l));",
            "assert(maxProductTuple((List[Tuple2[Long, Long]]((10l, 20l), (15l, 2l), (5l, 10l)))) == (200l));",
            "assert(maxProductTuple((List[Tuple2[Long, Long]]((11l, 44l), (10l, 15l), (20l, 5l), (12l, 9l)))) == (484l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "123",
        "title": "amicable_numbers_sum",
        "text": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def amicableNumbersSum(limit : Long) : Long = {\n        1: 1,\n        2: 2,\n        3: 3,\n        4: 4,\n        5: 5,\n        6: 6,\n        7: 7,\n        8: 8,\n        9: 9,\n        10: 10,\n        11: 11,\n        12: 12,\n        13: 13,\n        14: 14,\n        15: 15,\n        16: 16,\n        17: 17,\n        18: 18,\n        19: 19,\n        20: 20,\n        21: 21,\n        22: 22,\n        23: 23,\n        24: 24,\n        25: 25,\n        26: 26,\n        27: 27,\n        28: 28,\n        29: 29,\n        30: 30,\n        31: 31,\n        32: 32,\n        33: 33,\n        34: 34,\n        35: 35,\n        36: 36,\n        37: 37,\n        38: 38,\n        39: 39,\n        40: 40,\n        41: 41,\n        42: 42,\n        43: 43,\n        44: 44,\n        45: 45,\n        46: 46,\n        47: 47,\n        48: 48,\n        49: 49,\n        50: 50,\n        51: 51,\n        52: 52,\n        53: 53,\n        54: 54,\n        55: 55,\n        56: 56,\n        57: 57,\n        58: 58,\n        59: 59,\n        60: 60,\n        61: 61,\n        62: 62,\n        63: 63,\n        64: 64,\n        65: 65,\n        66: 66,\n        67: 67,\n        68: 68,\n        69: 69,\n        70: 70,\n        71: 71,\n        72: 72,\n        73: 73,\n        74: 74,\n        75: 75,\n        76: 76,\n\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(amicableNumbersSum((999l)) == (504l));",
            "assert(amicableNumbersSum((9999l)) == (31626l));",
            "assert(amicableNumbersSum((99l)) == (0l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "125",
        "title": "find_length",
        "text": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findLength(string : String) : Long = {\n        // Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n        '0': {\n            '0': {\n                '0': {\n                    '0': {\n                        '0': {\n                            '0': {\n                                '0': {\n                                    '0': {\n                                        '0': {\n                                            '0': {\n                                                '0': {\n                                                    '0': {\n                                                       '0': {\n                                                          '0': {\n                                                             '0': {\n                                                                '0': {\n                                                                    '0': {\n                                                                        '0': {\n                                                                            '0': {\n                                                                                '0': {\n                                                                                    '0': {\n                                                                                        '0': {\n                                                                                            '0': {\n                                                                                              '0': {\n                                                                                               '0': {\n                                                                                                  '0': {\n                                                                                                     '0': {\n                                                                                                       '0': {\n                                                                                                           '0': {\n                                                                                                               '0': {\n                                                                                                                   '0': {\n                                                                                                                       '0': {\n                                                                                                                           '0': {\n                                                                                                                                   '0': {\n                                                                                                                                   '0': {\n                                                                                                                                   '0': {\n                                                                                                                                   '0': {\n                                                                                                                                   '0': {\n                                                                                                                                   '0': {\n                                                                                                                                   '0': {\n                                                                                                                                   '0': {\n                                                                                                                                   '0': {\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(findLength((\"11000010001\")) == (6l));",
            "assert(findLength((\"10111\")) == (1l));",
            "assert(findLength((\"11011101100101\")) == (2l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "126",
        "title": "sum",
        "text": "Write a scalathon function to find the sum of common divisors of two given numbers.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sum(a : Long, b : Long) : Long = {\n        a : a,\n        b : b\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(sum((10l), (15l)) == (6l));",
            "assert(sum((100l), (150l)) == (93l));",
            "assert(sum((4l), (6l)) == (3l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "127",
        "title": "multiply_int",
        "text": "Write a function to multiply two integers.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def multiplyInt(x : Long, y : Long) : Long = {\n        x * y\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(multiplyInt((10l), (20l)) == (200l));",
            "assert(multiplyInt((5l), (10l)) == (50l));",
            "assert(multiplyInt((4l), (8l)) == (32l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "128",
        "title": "long_words",
        "text": "Write a function to find words that are longer than n characters from a given list of words.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def longWords(n : Long, str : String) : List[String] = {\n        str.substring(i : i + 1, i + n)\n        for i : range(0, len(str))\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(longWords((3l), (\"python is a programming language\")).equals((List[String](\"python\", \"programming\", \"language\"))));",
            "assert(longWords((2l), (\"writing a program\")).equals((List[String](\"writing\", \"program\"))));",
            "assert(longWords((5l), (\"sorting list\")).equals((List[String](\"sorting\"))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "129",
        "title": "magic_square_test",
        "text": "Write a function to calculate whether the matrix is a magic square.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def magicSquareTest(my_matrix : List[List[Long]]) : Boolean = {\n        my_matrix[i][j] == 0 for i in range(len(my_matrix)) for j in range(len(my_matrix[i]))\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(magicSquareTest((List[List[Long]](List[Long](7l.toLong, 12l.toLong, 1l.toLong, 14l.toLong), List[Long](2l.toLong, 13l.toLong, 8l.toLong, 11l.toLong), List[Long](16l.toLong, 3l.toLong, 10l.toLong, 5l.toLong), List[Long](9l.toLong, 6l.toLong, 15l.toLong, 4l.toLong)))) == (true));",
            "assert(magicSquareTest((List[List[Long]](List[Long](2l.toLong, 7l.toLong, 6l.toLong), List[Long](9l.toLong, 5l.toLong, 1l.toLong), List[Long](4l.toLong, 3l.toLong, 8l.toLong)))) == (true));",
            "assert(magicSquareTest((List[List[Long]](List[Long](2l.toLong, 7l.toLong, 6l.toLong), List[Long](9l.toLong, 5l.toLong, 1l.toLong), List[Long](4l.toLong, 3l.toLong, 7l.toLong)))) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "12",
        "title": "sort_matrix",
        "text": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sortMatrix(M : List[List[Long]]) : List[List[Long]] = {\n        [0] : [],\n        [1] : [],\n        [2] : [],\n        [3] : [],\n        [4] : [],\n        [5] : [],\n        [6] : [],\n        [7] : [],\n        [8] : [],\n        [9] : [],\n        [10] : [],\n        [11] : [],\n        [12] : [],\n        [13] : [],\n        [14] : [],\n        [15] : [],\n        [16] : [],\n        [17] : [],\n        [18] : [],\n        [19] : [],\n        [20] : [],\n        [21] : [],\n        [22] : [],\n        [23] : [],\n        [24] : [],\n        [25] : [],\n        [26] : [],\n        [27] : [],\n        [28] : [],\n        [29] : [],\n        [30] : [],\n        [31] : [],\n        [32] : [],\n        [33] : [],\n        [34] : [],\n        [35] : [],\n        [36] : [],\n        [37] : [],\n        [38] : [],\n        [39] : [],\n        [40] : [],\n        [41] : [],\n        [42] : [],\n        [43] : [],\n        [44] : [],\n        [45] : [],\n        [46] : [],\n        [47] : [],\n        [48] : [],\n        [49] : [],\n        [50] : [],\n        [51] : [],\n        [52] : [],\n        [53] : [],\n        [54] : [],\n        [55] :\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(sortMatrix((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong, 5l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong)))).equals((List[List[Long]](List[Long](1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong, 5l.toLong)))));",
            "assert(sortMatrix((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](-2l.toLong, 4l.toLong, -5l.toLong), List[Long](1l.toLong, -1l.toLong, 1l.toLong)))).equals((List[List[Long]](List[Long](-2l.toLong, 4l.toLong, -5l.toLong), List[Long](1l.toLong, -1l.toLong, 1l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong)))));",
            "assert(sortMatrix((List[List[Long]](List[Long](5l.toLong, 8l.toLong, 9l.toLong), List[Long](6l.toLong, 4l.toLong, 3l.toLong), List[Long](2l.toLong, 1l.toLong, 4l.toLong)))).equals((List[List[Long]](List[Long](2l.toLong, 1l.toLong, 4l.toLong), List[Long](6l.toLong, 4l.toLong, 3l.toLong), List[Long](5l.toLong, 8l.toLong, 9l.toLong)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "130",
        "title": "max_occurrences",
        "text": "Write a function to find the item with maximum frequency in a given list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maxOccurrences(nums : List[Long]) : Long = {\n        nums[i] : i\n        for i in range(len(nums))\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(maxOccurrences((List[Long](2l.toLong, 3l.toLong, 8l.toLong, 4l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 2l.toLong, 6l.toLong, 5l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 6l.toLong, 9l.toLong, 1l.toLong, 2l.toLong))) == (2l));",
            "assert(maxOccurrences((List[Long](2l.toLong, 3l.toLong, 8l.toLong, 4l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 7l.toLong, 9l.toLong, 15l.toLong, 14l.toLong, 10l.toLong, 12l.toLong, 13l.toLong, 16l.toLong, 18l.toLong))) == (8l));",
            "assert(maxOccurrences((List[Long](10l.toLong, 20l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 90l.toLong, 80l.toLong, 50l.toLong, 30l.toLong, 20l.toLong, 50l.toLong, 10l.toLong))) == (20l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "131",
        "title": "reverse_vowels",
        "text": "Write a scalathon function to reverse only the vowels of a given string (where y is not a vowel).",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def reverseVowels(str1 : String) : String = {\n        'a' : 'e',\n        'e' : 'i',\n        'i' : 'o',\n        'o' : 'u',\n        'u' : 'y'\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(reverseVowels((\"Python\")).equals((\"Python\")));",
            "assert(reverseVowels((\"USA\")).equals((\"ASU\")));",
            "assert(reverseVowels((\"ab\")).equals((\"ab\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "132",
        "title": "tup_string",
        "text": "Write a function to convert a list to a string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def tupString(tup1 : List[String]) : String = {\n        \"a\" : \"a\",\n        \"b\" : \"b\",\n        \"c\" : \"c\",\n        \"d\" : \"d\",\n        \"e\" : \"e\",\n        \"f\" : \"f\",\n        \"g\" : \"g\",\n        \"h\" : \"h\",\n        \"i\" : \"i\",\n        \"j\" : \"j\",\n        \"k\" : \"k\",\n        \"l\" : \"l\",\n        \"m\" : \"m\",\n        \"n\" : \"n\",\n        \"o\" : \"o\",\n        \"p\" : \"p\",\n        \"q\" : \"q\",\n        \"r\" : \"r\",\n        \"s\" : \"s\",\n        \"t\" : \"t\",\n        \"u\" : \"u\",\n        \"v\" : \"v\",\n        \"w\" : \"w\",\n        \"x\" : \"x\",\n        \"y\" : \"y\",\n        \"z\" : \"z\",\n        \"A\" : \"A\",\n        \"B\" : \"B\",\n        \"C\" : \"C\",\n        \"D\" : \"D\",\n        \"E\" : \"E\",\n        \"F\" : \"F\",\n        \"G\" : \"G\",\n        \"H\" : \"H\",\n        \"I\" : \"I\",\n        \"J\" : \"J\",\n        \"K\" : \"K\",\n        \"L\" : \"L\",\n        \"M\" : \"M\",\n        \"N\" : \"N\",\n        \"O\" : \"O\",\n        \"P\" : \"P\",\n        \"Q\" : \"Q\",\n        \"R\" : \"R\",\n        \"S\" : \"S\",\n        \"T\" : \"T\",\n        \"U\" : \"U\",\n        \"V\" : \"V\",\n        \"W\" : \"W\",\n        \"X\" : \"X\",\n        \"Y\" : \"Y\",\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(tupString((List[String](\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\"))).equals((\"exercises\")));",
            "assert(tupString((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))).equals((\"python\")));",
            "assert(tupString((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))).equals((\"program\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "133",
        "title": "sum_negativenum",
        "text": "Write a function to calculate the sum of the negative numbers of a given list of numbers.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.sum()\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));",
            "assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));",
            "assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "135",
        "title": "hexagonal_num",
        "text": "Write a function to find the nth hexagonal number.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def hexagonalNum(n : Long) : Long = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        72 : 72,\n        73 : 73,\n        74 : 74,\n        75 : 75,\n        76 : 76,\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(hexagonalNum((10l)) == (190l));",
            "assert(hexagonalNum((5l)) == (45l));",
            "assert(hexagonalNum((7l)) == (91l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "138",
        "title": "is_Sum_Of_Powers_Of_Two",
        "text": "Write a scalathon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isSumOfPowersOfTwo(n : Long) : Boolean = {\n        n > 0\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(isSumOfPowersOfTwo((10l)) == (true));",
            "assert(isSumOfPowersOfTwo((7l)) == (false));",
            "assert(isSumOfPowersOfTwo((14l)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "141",
        "title": "pancake_sort",
        "text": "Write a function to sort a list of elements.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def pancakeSort(nums : List[Long]) : List[Long] = {\n        nums[0],\n        nums[1],\n        nums[2],\n        nums[3],\n        nums[4],\n        nums[5],\n        nums[6],\n        nums[7],\n        nums[8],\n        nums[9],\n        nums[10],\n        nums[11],\n        nums[12],\n        nums[13],\n        nums[14],\n        nums[15],\n        nums[16],\n        nums[17],\n        nums[18],\n        nums[19],\n        nums[20],\n        nums[21],\n        nums[22],\n        nums[23],\n        nums[24],\n        nums[25],\n        nums[26],\n        nums[27],\n        nums[28],\n        nums[29],\n        nums[30],\n        nums[31],\n        nums[32],\n        nums[33],\n        nums[34],\n        nums[35],\n        nums[36],\n        nums[37],\n        nums[38],\n        nums[39],\n        nums[40],\n        nums[41],\n        nums[42],\n        nums[43],\n        nums[44],\n        nums[45],\n        nums[46],\n        nums[47],\n        nums[48],\n        nums[49],\n        nums[50],\n        nums[51],\n        nums[52],\n        nums[53],\n        nums[54],\n        nums[55],\n        nums[56],\n        nums[57],\n        nums[58],\n        nums[59],\n        nums[60],\n        nums[61],\n        nums[62],\n        nums[63],\n        nums[64],\n        n\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(pancakeSort((List[Long](15l.toLong, 79l.toLong, 25l.toLong, 38l.toLong, 69l.toLong))).equals((List[Long](15l.toLong, 25l.toLong, 38l.toLong, 69l.toLong, 79l.toLong))));",
            "assert(pancakeSort((List[Long](98l.toLong, 12l.toLong, 54l.toLong, 36l.toLong, 85l.toLong))).equals((List[Long](12l.toLong, 36l.toLong, 54l.toLong, 85l.toLong, 98l.toLong))));",
            "assert(pancakeSort((List[Long](41l.toLong, 42l.toLong, 32l.toLong, 12l.toLong, 23l.toLong))).equals((List[Long](12l.toLong, 23l.toLong, 32l.toLong, 41l.toLong, 42l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "142",
        "title": "count_samepair",
        "text": "Write a function to count number items that are identical in the same position of three given lists.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n        list1.length, list2.length, list3.length\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));",
            "assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));",
            "assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "143",
        "title": "find_lists",
        "text": "Write a function to find number of lists present in the given list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findLists(Input : List[Any]) : Long = {\n        // Write a function to find the number of lists present in the given list.\n        // The function should return a list of the same length as the given list.\n        // The function should return a list of the same length as the given list.\n        // The function should return a list of the same length as the given list.\n        // The function should return a list of the same length as the given list.\n        // The function should return a list of the same length as the given list.\n        // The function should return a list of the same length as the given list.\n        // The function should return a list of the same length as the given list.\n        // The function should return a list of the same length as the given list.\n        // The function should return a list of the same length as the given list.\n        // The function should return a list of the same length as the given list.\n        // The function should return a list of the same length as the given list.\n        // The function should return a list of the same length as the given list.\n        // The function should return a list of the same length as the given list.\n        // The function should return a list of the same length as the given list.\n        // The function should return a list of the same length as the given list.\n        // The function should return a list of the same length as the given list.\n        // The function should return a list of the same length as the given list.\n        // The function should return a list of the same length as the given list.\n        // The function should return a list of the same length as the given list.\n        // The function should return a list of the same length as the given list.\n        // The function should return a list of the same length as the given list.\n        // The function should return a list of the same length as the given list.\n        // The function should return a list of the same length as the given list.\n        // The function should return a list of the same length as the given list.\n        // The function should return a\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(findLists((List[Any](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)))) == (2l));",
            "assert(findLists((List[Any](List[Long](1l.toLong, 2l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (3l));",
            "assert(findLists((List[Any](9l.toLong, 8l.toLong, 7l.toLong, 6l.toLong, 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong))) == (1l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "145",
        "title": "max_Abs_Diff",
        "text": "Write a scalathon function to find the maximum difference between any two elements in a given list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maxAbsDiff(arr : List[Long]) : Long = {\n        Long.MAX_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN_VALUE,\n        Long.MIN\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(maxAbsDiff((List[Long](2l.toLong, 1l.toLong, 5l.toLong, 3l.toLong))) == (4l));",
            "assert(maxAbsDiff((List[Long](9l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (8l));",
            "assert(maxAbsDiff((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (2l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "14",
        "title": "find_Volume",
        "text": "Write a scalathon function to find the volume of a triangular prism.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findVolume(l : Long, b : Long, h : Long) : Long = {\n        // Find the volume of a triangular prism.\n        //\n        // The volume of a triangular prism is the sum of the volume of the\n        // triangle that contains the point (l, b) and the triangle that\n        // contains the point (h, b).\n        //\n        // The volume of a triangular prism is the sum of the volume of the\n        // triangle that contains the point (l, b) and the triangle that\n        // contains the point (h, b).\n        //\n        // The volume of a triangular prism is the sum of the volume of the\n        // triangle that contains the point (l, b) and the triangle that\n        // contains the point (h, b).\n        //\n        // The volume of a triangular prism is the sum of the volume of the\n        // triangle that contains the point (l, b) and the triangle that\n        // contains the point (h, b).\n        //\n        // The volume of a triangular prism is the sum of the volume of the\n        // triangle that contains the point (l, b) and the triangle that\n        // contains the point (h, b).\n        //\n        // The volume of a triangular prism is the sum of the volume of the\n        // triangle that contains the point (l, b) and the triangle that\n        // contains the point (h, b).\n        //\n        // The volume of a triangular prism is the sum of the volume of the\n        // triangle that contains the point (l, b) and the triangle that\n        // contains the point (h, b).\n        //\n        // The volume of a triangular prism is the sum of the volume of the\n        // triangle that contains the point (l, b) and the triangle that\n        // contains the point (h, b).\n        //\n        // The volume of a triangular prism is the sum of the volume of the\n        // triangle that contains the point (l, b) and the triangle that\n        // contains the point (h, b).\n        //\n        // The volume of a\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(findVolume((10l), (8l), (6l)) == (240l));",
            "assert(findVolume((3l), (2l), (2l)) == (6l));",
            "assert(findVolume((1l), (2l), (1l)) == (1l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "160",
        "title": "find_solution",
        "text": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findSolution(a : Long, b : Long, n : Long) : Option[Tuple2[Long, Long]] = {\n        Option.None: scala.Option.none(),\n        Option.True: scala.Option.some(scala.Option.of(1)),\n        Option.False: scala.Option.none()\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(findSolution((2l), (3l), (7l)).equals((2l, 1l)));",
            "assert(findSolution((4l), (2l), (7l)).equals(None));",
            "assert(findSolution((1l), (13l), (17l)).equals((4l, 1l)));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "161",
        "title": "remove_elements",
        "text": "Write a function to remove all elements from a given list present in another list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n        list1.remove(list2)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));",
            "assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));",
            "assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "162",
        "title": "sum_series",
        "text": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumSeries(n : Long) : Long = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        \n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(sumSeries((6l)) == (12l));",
            "assert(sumSeries((10l)) == (30l));",
            "assert(sumSeries((9l)) == (25l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "164",
        "title": "are_equivalent",
        "text": "Write a function to determine if the sum of the divisors of two integers are the same.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def areEquivalent(num1 : Long, num2 : Long) : Boolean = {\n        num1 % num2 == 0\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(areEquivalent((36l), (57l)) == (false));",
            "assert(areEquivalent((2l), (4l)) == (false));",
            "assert(areEquivalent((23l), (47l)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "165",
        "title": "count_char_position",
        "text": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countCharPosition(str1 : String) : Long = {\n        \"a\" : 1,\n        \"b\" : 2,\n        \"c\" : 3,\n        \"d\" : 4,\n        \"e\" : 5,\n        \"f\" : 6,\n        \"g\" : 7,\n        \"h\" : 8,\n        \"i\" : 9,\n        \"j\" : 10,\n        \"k\" : 11,\n        \"l\" : 12,\n        \"m\" : 13,\n        \"n\" : 14,\n        \"o\" : 15,\n        \"p\" : 16,\n        \"q\" : 17,\n        \"r\" : 18,\n        \"s\" : 19,\n        \"t\" : 20,\n        \"u\" : 21,\n        \"v\" : 22,\n        \"w\" : 23,\n        \"x\" : 24,\n        \"y\" : 25,\n        \"z\" : 26,\n        \"A\" : 27,\n        \"B\" : 28,\n        \"C\" : 29,\n        \"D\" : 30,\n        \"E\" : 31,\n        \"F\" : 32,\n        \"G\" : 33,\n        \"H\" : 34,\n        \"I\" : 35,\n        \"J\" : 36,\n        \"K\" : 37,\n        \"L\" : 38,\n        \"M\" : 39,\n        \"N\" : 40,\n        \"O\" : 41,\n        \"P\" : 42,\n        \"Q\" : 43,\n        \"R\" : 44,\n        \"S\" : 45,\n        \"T\" : 46,\n        \"U\" : 47,\n        \"V\" : 48,\n        \"W\" : 49,\n        \"X\" : 50,\n        \"Y\" : 51,\n        \"Z\" : 52,\n        \"0\" : 53,\n        \"1\" : 54,\n        \"2\" : 55,\n        \"\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(countCharPosition((\"xbcefg\")) == (2l));",
            "assert(countCharPosition((\"ABcED\")) == (3l));",
            "assert(countCharPosition((\"AbgdeF\")) == (5l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "166",
        "title": "find_even_pair",
        "text": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findEvenPair(A : List[Long]) : Long = {\n        xor(x, y) : x ^ y\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));",
            "assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));",
            "assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "167",
        "title": "next_power_of_2",
        "text": "Write a scalathon function to find the smallest power of 2 greater than or equal to n.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def nextPowerOf2(n : Long) : Long = {\n        Long.MAX_VALUE\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(nextPowerOf2((0l)) == (1l));",
            "assert(nextPowerOf2((5l)) == (8l));",
            "assert(nextPowerOf2((17l)) == (32l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "168",
        "title": "frequency",
        "text": "Write a function to count the number of occurrences of a number in a given list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def frequency(a : List[Long], x : Long) : Long = {\n        x : x + 1\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));",
            "assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));",
            "assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "16",
        "title": "text_lowercase_underscore",
        "text": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def textLowercaseUnderscore(text : String) : Boolean = {\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\": \"\",\n        \"_\":\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(textLowercaseUnderscore((\"aab_cbbbc\")) == (true));",
            "assert(textLowercaseUnderscore((\"aab_Abbbc\")) == (false));",
            "assert(textLowercaseUnderscore((\"Aaab_abbbc\")) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "170",
        "title": "sum_range_list",
        "text": "Write a function to find the sum of numbers in a list within a range specified by two indices.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumRangeList(list1 : List[Long], m : Long, n : Long) : Long = {\n        sum(list1)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(sumRangeList((List[Long](2l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 8l.toLong, 3l.toLong, 4l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 8l.toLong, 12l.toLong)), (8l), (10l)) == (29l));",
            "assert(sumRangeList((List[Long](2l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 8l.toLong, 3l.toLong, 4l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 8l.toLong, 12l.toLong)), (5l), (7l)) == (16l));",
            "assert(sumRangeList((List[Long](2l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 8l.toLong, 3l.toLong, 4l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 8l.toLong, 12l.toLong)), (7l), (10l)) == (38l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "171",
        "title": "perimeter_pentagon",
        "text": "Write a function to find the perimeter of a regular pentagon from the length of its sides.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def perimeterPentagon(a : Long) : Long = {\n        Long.valueOf(0),\n        Long.valueOf(1),\n        Long.valueOf(2),\n        Long.valueOf(3),\n        Long.valueOf(4),\n        Long.valueOf(5),\n        Long.valueOf(6),\n        Long.valueOf(7),\n        Long.valueOf(8),\n        Long.valueOf(9),\n        Long.valueOf(10),\n        Long.valueOf(11),\n        Long.valueOf(12),\n        Long.valueOf(13),\n        Long.valueOf(14),\n        Long.valueOf(15),\n        Long.valueOf(16),\n        Long.valueOf(17),\n        Long.valueOf(18),\n        Long.valueOf(19),\n        Long.valueOf(20),\n        Long.valueOf(21),\n        Long.valueOf(22),\n        Long.valueOf(23),\n        Long.valueOf(24),\n        Long.valueOf(25),\n        Long.valueOf(26),\n        Long.valueOf(27),\n        Long.valueOf(28),\n        Long.valueOf(29),\n        Long.valueOf(30),\n        Long.valueOf(31),\n        Long.valueOf(32),\n        Long.valueOf(33),\n        Long.valueOf(34),\n        Long.valueOf(35),\n        Long.valueOf(36),\n        Long.valueOf(37),\n        Long.valueOf(38),\n        Long.valueOf(39),\n        Long.valueOf(40),\n        Long.valueOf(41),\n        Long.valueOf(42),\n        Long.valueOf(43),\n        Long.valueOf(44),\n        Long.valueOf(45),\n        Long.valueOf(46),\n        Long.valueOf(47),\n        Long.valueOf(48),\n        Long.valueOf(49),\n        Long.\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(perimeterPentagon((5l)) == (25l));",
            "assert(perimeterPentagon((10l)) == (50l));",
            "assert(perimeterPentagon((15l)) == (75l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "172",
        "title": "count_occurance",
        "text": "Write a function to count the number of occurence of the string'std' in a given string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countOccurance(s : String) : Long = {\n        'a' : 1,\n        'b' : 2,\n        'c' : 3,\n        'd' : 4,\n        'e' : 5,\n        'f' : 6,\n        'g' : 7,\n        'h' : 8,\n        'i' : 9,\n        'j' : 10,\n        'k' : 11,\n        'l' : 12,\n       'm' : 13,\n        'n' : 14,\n        'o' : 15,\n        'p' : 16,\n        'q' : 17,\n        'r' : 18,\n       's' : 19,\n        't' : 20,\n        'u' : 21,\n        'v' : 22,\n        'w' : 23,\n        'x' : 24,\n        'y' : 25,\n        'z' : 26,\n        'A' : 27,\n        'B' : 28,\n        'C' : 29,\n        'D' : 30,\n        'E' : 31,\n        'F' : 32,\n        'G' : 33,\n        'H' : 34,\n        'I' : 35,\n        'J' : 36,\n        'K' : 37,\n        'L' : 38,\n        'M' : 39,\n        'N' : 40,\n        'O' : 41,\n        'P' : 42,\n        'Q' : 43,\n        'R' : 44,\n        'S' : 45,\n        'T' : 46,\n        'U' : 47,\n        'V' : 48,\n        'W' : 49,\n        'X' : 50,\n        'Y' : 51,\n        'Z' : 52,\n        '0' : 53,\n        '1' : 54,\n        '2' : 55,\n        '3' : 56,\n        '4' :\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(countOccurance((\"letstdlenstdporstd\")) == (3l));",
            "assert(countOccurance((\"truststdsolensporsd\")) == (1l));",
            "assert(countOccurance((\"makestdsostdworthit\")) == (2l));",
            "assert(countOccurance((\"stds\")) == (1l));",
            "assert(countOccurance((\"\")) == (0l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "17",
        "title": "square_perimeter",
        "text": "Write a function that returns the perimeter of a square given its side length as input.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def squarePerimeter(a : Long) : Long = {\n        Long.valueOf(a.length()),\n        Long.valueOf(a.length() - 1),\n        Long.valueOf(a.length() - 2),\n        Long.valueOf(a.length() - 3),\n        Long.valueOf(a.length() - 4),\n        Long.valueOf(a.length() - 5),\n        Long.valueOf(a.length() - 6),\n        Long.valueOf(a.length() - 7),\n        Long.valueOf(a.length() - 8),\n        Long.valueOf(a.length() - 9),\n        Long.valueOf(a.length() - 10),\n        Long.valueOf(a.length() - 11),\n        Long.valueOf(a.length() - 12),\n        Long.valueOf(a.length() - 13),\n        Long.valueOf(a.length() - 14),\n        Long.valueOf(a.length() - 15),\n        Long.valueOf(a.length() - 16),\n        Long.valueOf(a.length() - 17),\n        Long.valueOf(a.length() - 18),\n        Long.valueOf(a.length() - 19),\n        Long.valueOf(a.length() - 20),\n        Long.valueOf(a.length() - 21),\n        Long.valueOf(a.length() - 22),\n        Long.valueOf(a.length() - 23),\n        Long.valueOf(a.length() - 24),\n        Long.valueOf(a.length() - 25),\n        Long.valueOf(a.length() - 26),\n        Long.valueOf(a.length() - 27),\n        Long.valueOf(a.length() - 28),\n        Long.valueOf(a.length() - 29),\n        Long.valueOf(a.length() - 30),\n        Long.valueOf(a.length() - 31),\n        Long.valueOf(a.length()\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(squarePerimeter((10l)) == (40l));",
            "assert(squarePerimeter((5l)) == (20l));",
            "assert(squarePerimeter((4l)) == (16l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "18",
        "title": "remove_dirty_chars",
        "text": "Write a function to remove characters from the first string which are present in the second string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def removeDirtyChars(string : String, second_string : String) : String = {\n        'a' : 'b',\n        'c' : 'd',\n        'e' : 'f',\n        'g' : 'h',\n        'i' : 'j',\n        'k' : 'l',\n       'm' : 'n',\n        'o' : 'p',\n        'q' : 'r',\n       's' : 't',\n        'u' : 'v',\n        'w' : 'x',\n        'y' : 'z',\n        'A' : 'B',\n        'C' : 'D',\n        'E' : 'F',\n        'G' : 'H',\n        'I' : 'J',\n        'K' : 'L',\n        'M' : 'N',\n        'O' : 'P',\n        'Q' : 'R',\n        'S' : 'T',\n        'U' : 'V',\n        'W' : 'X',\n        'Y' : 'Z',\n        'a' : 'b',\n        'c' : 'd',\n        'e' : 'f',\n        'g' : 'h',\n        'i' : 'j',\n        'k' : 'l',\n       'm' : 'n',\n        'o' : 'p',\n        'q' : 'r',\n       's' : 't',\n        'u' : 'v',\n        'w' : 'x',\n        'y' : 'z',\n        'A' : 'B',\n        'C' : 'D',\n        'E' : 'F',\n        'G' : 'H',\n        'I' : 'J',\n        'K' : 'L',\n        'M' : 'N',\n        'O' : 'P',\n        'Q' : 'R',\n        'S' : 'T',\n        'U' : 'V',\n        \n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(removeDirtyChars((\"probasscurve\"), (\"pros\")).equals((\"bacuve\")));",
            "assert(removeDirtyChars((\"digitalindia\"), (\"talent\")).equals((\"digiidi\")));",
            "assert(removeDirtyChars((\"exoticmiles\"), (\"toxic\")).equals((\"emles\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "19",
        "title": "test_duplicate",
        "text": "Write a function to find whether a given list of integers contains any duplicate element.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def testDuplicate(arraynums : List[Long]) : Boolean = {\n        arraynums.find(i : Long) : Boolean = {\n            arraynums.find(i : Long) : Boolean = {\n                arraynums.find(i : Long) : Boolean = {\n                    arraynums.find(i : Long) : Boolean = {\n                        arraynums.find(i : Long) : Boolean = {\n                            arraynums.find(i : Long) : Boolean = {\n                                arraynums.find(i : Long) : Boolean = {\n                                    arraynums.find(i : Long) : Boolean = {\n                                        arraynums.find(i : Long) : Boolean = {\n                                            arraynums.find(i : Long) : Boolean = {\n                                                arraynums.find(i : Long) : Boolean = {\n                                                    arraynums.find(i : Long) : Boolean = {\n                                                        arraynums.find(i : Long) : Boolean = {\n                                                            arraynums.find(i : Long) : Boolean = {\n                                                                arraynums.find(i : Long) : Boolean = {\n                                                                    arraynums.find(i : Long) : Boolean = {\n                                                                        arraynums.find(i : Long) : Boolean = {\n                                                                            arraynums.find(i : Long) : Boolean = {\n                                                                                arraynums.find(i : Long) : Boolean = {\n                                                                                    arraynums.find(i : Long) : Boolean = {\n                                                                                        arraynums.find(i : Long) : Boolean = {\n                                                                                            arraynums.find(i : Long) : Boolean = {\n                                                                                                  arraynums.find(i : Long) : Boolean = {\n                                                                                                              arraynums.find(i : Long) : Boolean = {\n\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(testDuplicate((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (false));",
            "assert(testDuplicate((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (true));",
            "assert(testDuplicate((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "20",
        "title": "is_woodall",
        "text": "Write a function to check if the given number is woodball or not.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isWoodall(x : Long) : Boolean = {\n        x < 0 : x < 0,\n        x > 0 : x > 0,\n        x == 0 : x == 0,\n        x!= 0 : x!= 0,\n        x == x : x == x,\n        x!= x : x!= x,\n        x == x : x == x,\n        x!= x : x!= x,\n        x == x : x == x,\n        x!= x : x!= x,\n        x == x : x == x,\n        x!= x : x!= x,\n        x == x : x == x,\n        x!= x : x!= x,\n        x == x : x == x,\n        x!= x : x!= x,\n        x == x : x == x,\n        x!= x : x!= x,\n        x == x : x == x,\n        x!= x : x!= x,\n        x == x : x == x,\n        x!= x : x!= x,\n        x == x : x == x,\n        x!= x : x!= x,\n        x == x : x == x,\n        x!= x : x!= x,\n        x == x : x == x,\n        x!= x : x!= x,\n        x == x : x == x,\n        x!= x : x!= x,\n        x == x : x == x,\n        x!= x : x!= x,\n        x == x : x == x,\n        x!= x : x!= x,\n        x == x : x == x,\n        x!= x : x!= x,\n        x == x : x == x,\n        x!= x : x!= x,\n        x == x : x == x,\n        x!= x : x!= x,\n        x == x : x == x,\n        x!= x : x!= x,\n        x == x : x == x,\n        x!= x : x!= x,\n        x == x : x == x,\n        x!= x : x!= x\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(isWoodall((383l)) == (true));",
            "assert(isWoodall((254l)) == (false));",
            "assert(isWoodall((200l)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "222",
        "title": "check_type",
        "text": "Write a function to check if all the elements in tuple have same data type or not.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def checkType(test_tuple : Any) : Boolean = {\n        scala.math.Tuple.checkType(test_tuple)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(checkType((Any((5l, 6l, 7l, 3l, 5l, 6l)))) == (true));",
            "assert(checkType((Any((1l, 2l, \"4\")))) == (false));",
            "assert(checkType((Any((3l, 2l, 1l, 4l, 5l)))) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "223",
        "title": "is_majority",
        "text": "Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isMajority(arr : List[Long], n : Long, x : Long) : Boolean = {\n        if (n == 0) {\n            return true\n        }\n        if (n == 1) {\n            return arr[x] == x\n        }\n        if (n % 2 == 0) {\n            return arr[x] == x\n        }\n        return arr[x] == x\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(isMajority((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 10l.toLong)), (7l), (3l)) == (true));",
            "assert(isMajority((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 6l.toLong, 6l.toLong)), (8l), (4l)) == (false));",
            "assert(isMajority((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong)), (5l), (1l)) == (true));",
            "assert(isMajority((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong)), (5l), (1l)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "224",
        "title": "count_Set_Bits",
        "text": "Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countSetBits(n : Long) : Long = {\n        0 : 1,\n        1 : 1,\n        2 : 1,\n        3 : 1,\n        4 : 1,\n        5 : 1,\n        6 : 1,\n        7 : 1,\n        8 : 1,\n        9 : 1,\n        10 : 1,\n        11 : 1,\n        12 : 1,\n        13 : 1,\n        14 : 1,\n        15 : 1,\n        16 : 1,\n        17 : 1,\n        18 : 1,\n        19 : 1,\n        20 : 1,\n        21 : 1,\n        22 : 1,\n        23 : 1,\n        24 : 1,\n        25 : 1,\n        26 : 1,\n        27 : 1,\n        28 : 1,\n        29 : 1,\n        30 : 1,\n        31 : 1,\n        32 : 1,\n        33 : 1,\n        34 : 1,\n        35 : 1,\n        36 : 1,\n        37 : 1,\n        38 : 1,\n        39 : 1,\n        40 : 1,\n        41 : 1,\n        42 : 1,\n        43 : 1,\n        44 : 1,\n        45 : 1,\n        46 : 1,\n        47 : 1,\n        48 : 1,\n        49 : 1,\n        50 : 1,\n        51 : 1,\n        52 : 1,\n        53 : 1,\n        54 : 1,\n        55 : 1,\n        56 : 1,\n        57 : 1,\n        58 : 1,\n        59 : 1,\n        60 : 1,\n        61 : 1,\n        62 : 1,\n        63 : 1,\n        64 : 1,\n        65 : 1,\n        66 : 1,\n        67 : 1,\n        68 : 1,\n        69 : 1,\n        70 : 1,\n        71 : 1,\n        72 : 1,\n        73 : 1,\n        74 : 1\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(countSetBits((2l)) == (1l));",
            "assert(countSetBits((4l)) == (1l));",
            "assert(countSetBits((6l)) == (2l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "226",
        "title": "odd_values_string",
        "text": "Write a scalathon function to remove the characters which have odd index values of a given string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def oddValuesString(str : String) : String = {\n        'a' : 'b',\n        'b' : 'c',\n        'c' : 'd',\n        'd' : 'e',\n        'e' : 'f',\n        'f' : 'g',\n        'g' : 'h',\n        'h' : 'i',\n        'i' : 'j',\n        'j' : 'k',\n        'k' : 'l',\n        'l' :'m',\n       'm' : 'n',\n        'n' : 'o',\n        'o' : 'p',\n        'p' : 'q',\n        'q' : 'r',\n        'r' :'s',\n       's' : 't',\n        't' : 'u',\n        'u' : 'v',\n        'v' : 'w',\n        'w' : 'x',\n        'x' : 'y',\n        'y' : 'z',\n        'z' : 'A',\n        'A' : 'B',\n        'B' : 'C',\n        'C' : 'D',\n        'D' : 'E',\n        'E' : 'F',\n        'F' : 'G',\n        'G' : 'H',\n        'H' : 'I',\n        'I' : 'J',\n        'J' : 'K',\n        'K' : 'L',\n        'L' : 'M',\n        'M' : 'N',\n        'N' : 'O',\n        'O' : 'P',\n        'P' : 'Q',\n        'Q' : 'R',\n        'R' : 'S',\n        'S' : 'T',\n        'T' : 'U',\n        'U' : 'V',\n        'V' : 'W',\n        'W' : 'X',\n        'X' : 'Y',\n        'Y' : 'Z',\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(oddValuesString((\"abcdef\")).equals((\"ace\")));",
            "assert(oddValuesString((\"python\")).equals((\"pto\")));",
            "assert(oddValuesString((\"data\")).equals((\"dt\")));",
            "assert(oddValuesString((\"lambs\")).equals((\"lms\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "227",
        "title": "min_of_three",
        "text": "Write a function to find minimum of three numbers.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def minOfThree(a : Long, b : Long, c : Long) : Long = {\n        a, b, c\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(minOfThree((10l), (20l), (0l)) == (0l));",
            "assert(minOfThree((19l), (15l), (18l)) == (15l));",
            "assert(minOfThree((-10l), (-20l), (-30l)) == (-30l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "228",
        "title": "all_Bits_Set_In_The_Given_Range",
        "text": "Write a scalathon function to check whether all the bits are unset in the given range or not.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def allBitsSetInTheGivenRange(n : Long, l : Long, r : Long) : Boolean = {\n        n == 0 || n == 1\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(allBitsSetInTheGivenRange((4l), (1l), (2l)) == (true));",
            "assert(allBitsSetInTheGivenRange((17l), (2l), (4l)) == (true));",
            "assert(allBitsSetInTheGivenRange((39l), (4l), (6l)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "229",
        "title": "re_arrange_array",
        "text": "Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n        i : i + 1\n        for i in range(n)\n        if i < 0\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));",
            "assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));",
            "assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "230",
        "title": "replace_blank",
        "text": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def replaceBlank(str1 : String, char : String) : String = {\n       '' : char,\n        '\\t' : char,\n        '\\n' : char,\n        '\\r' : char,\n        '\\f' : char,\n        '\\v' : char,\n        '\\u00A0' : char,\n        '\\u2028' : char,\n        '\\u2029' : char,\n        '\\u2022' : char,\n        '\\u2026' : char,\n        '\\u00AD' : char,\n        '\\u00AE' : char,\n        '\\u00B0' : char,\n        '\\u00B1' : char,\n        '\\u00B2' : char,\n        '\\u00B3' : char,\n        '\\u00B4' : char,\n        '\\u00B5' : char,\n        '\\u00B6' : char,\n        '\\u00B7' : char,\n        '\\u00B8' : char,\n        '\\u00B9' : char,\n        '\\u00BA' : char,\n        '\\u00BB' : char,\n        '\\u00BC' : char,\n        '\\u00BD' : char,\n        '\\u00BE' : char,\n        '\\u00BF' : char,\n        '\\u00C0' : char,\n        '\\u00C1' : char,\n        '\\u00C2' : char,\n        '\\u00C3' : char,\n        '\\u00C4' : char,\n        '\\u00C5' : char,\n        '\\u00C6' : char,\n        '\\u00C7' : char,\n        '\\u00C8' : char,\n        '\\u00C9' : char,\n        '\\u00CA\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));",
            "assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));",
            "assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "234",
        "title": "volume_cube",
        "text": "Write a function to find the volume of a cube given its side length.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def volumeCube(l : Long) : Long = {\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        \n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(volumeCube((3l)) == (27l));",
            "assert(volumeCube((2l)) == (8l));",
            "assert(volumeCube((5l)) == (125l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "237",
        "title": "check_occurences",
        "text": "Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def checkOccurences(test_list : List[Tuple2[Long, Long]]) : Map[Tuple2[Long, Long],Long] = {\n        (x,y) : 0\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(checkOccurences((List[Tuple2[Long, Long]]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Tuple2[Long, Long],Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));",
            "assert(checkOccurences((List[Tuple2[Long, Long]]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Tuple2[Long, Long],Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));",
            "assert(checkOccurences((List[Tuple2[Long, Long]]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Tuple2[Long, Long],Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "238",
        "title": "number_of_substrings",
        "text": "Write a scalathon function to count the number of non-empty substrings of a given string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def numberOfSubstrings(str : String) : Long = {\n        \"a\" : 1,\n        \"b\" : 1,\n        \"c\" : 1,\n        \"d\" : 1,\n        \"e\" : 1,\n        \"f\" : 1,\n        \"g\" : 1,\n        \"h\" : 1,\n        \"i\" : 1,\n        \"j\" : 1,\n        \"k\" : 1,\n        \"l\" : 1,\n        \"m\" : 1,\n        \"n\" : 1,\n        \"o\" : 1,\n        \"p\" : 1,\n        \"q\" : 1,\n        \"r\" : 1,\n        \"s\" : 1,\n        \"t\" : 1,\n        \"u\" : 1,\n        \"v\" : 1,\n        \"w\" : 1,\n        \"x\" : 1,\n        \"y\" : 1,\n        \"z\" : 1,\n        \"A\" : 1,\n        \"B\" : 1,\n        \"C\" : 1,\n        \"D\" : 1,\n        \"E\" : 1,\n        \"F\" : 1,\n        \"G\" : 1,\n        \"H\" : 1,\n        \"I\" : 1,\n        \"J\" : 1,\n        \"K\" : 1,\n        \"L\" : 1,\n        \"M\" : 1,\n        \"N\" : 1,\n        \"O\" : 1,\n        \"P\" : 1,\n        \"Q\" : 1,\n        \"R\" : 1,\n        \"S\" : 1,\n        \"T\" : 1,\n        \"U\" : 1,\n        \"V\" : 1,\n        \"W\" : 1,\n        \"X\" : 1,\n        \"Y\" : 1,\n        \"Z\" : 1,\n        \"0\" : 1,\n        \"1\" : 1,\n        \"2\" : 1,\n        \"3\" : 1,\n        \"4\"\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(numberOfSubstrings((\"abc\")) == (6l));",
            "assert(numberOfSubstrings((\"abcd\")) == (10l));",
            "assert(numberOfSubstrings((\"abcde\")) == (15l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "239",
        "title": "get_total_number_of_sequences",
        "text": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getTotalNumberOfSequences(m : Long, n : Long) : Long = {\n        1 : 0,\n        2 : 0,\n        3 : 0,\n        4 : 0,\n        5 : 0,\n        6 : 0,\n        7 : 0,\n        8 : 0,\n        9 : 0,\n        10 : 0,\n        11 : 0,\n        12 : 0,\n        13 : 0,\n        14 : 0,\n        15 : 0,\n        16 : 0,\n        17 : 0,\n        18 : 0,\n        19 : 0,\n        20 : 0,\n        21 : 0,\n        22 : 0,\n        23 : 0,\n        24 : 0,\n        25 : 0,\n        26 : 0,\n        27 : 0,\n        28 : 0,\n        29 : 0,\n        30 : 0,\n        31 : 0,\n        32 : 0,\n        33 : 0,\n        34 : 0,\n        35 : 0,\n        36 : 0,\n        37 : 0,\n        38 : 0,\n        39 : 0,\n        40 : 0,\n        41 : 0,\n        42 : 0,\n        43 : 0,\n        44 : 0,\n        45 : 0,\n        46 : 0,\n        47 : 0,\n        48 : 0,\n        49 : 0,\n        50 : 0,\n        51 : 0,\n        52 : 0,\n        53 : 0,\n        54 : 0,\n        55 : 0,\n        56 : 0,\n        57 : 0,\n        58 : 0,\n        59 : 0,\n        60 : 0,\n        61 : 0,\n        62 : 0,\n        63 : 0,\n        64 : 0,\n        65 : 0,\n        66 : 0,\n        67 : 0,\n        68 : 0,\n        69 : 0,\n        70 :\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(getTotalNumberOfSequences((10l), (4l)) == (4l));",
            "assert(getTotalNumberOfSequences((5l), (2l)) == (6l));",
            "assert(getTotalNumberOfSequences((16l), (3l)) == (84l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "240",
        "title": "replace_list",
        "text": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def replaceList(list1 : List[Any], list2 : List[Any]) : List[Any] = {\n        list1.head : list2.head,\n        list1.tail : list2.tail\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(replaceList((List[Any](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong)), (List[Any](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Any](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));",
            "assert(replaceList((List[Any](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (List[Any](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Any](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))));",
            "assert(replaceList((List[Any](\"red\", \"blue\", \"green\")), (List[Any](\"yellow\"))).equals((List[Any](\"red\", \"blue\", \"yellow\"))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "242",
        "title": "count_charac",
        "text": "Write a function to count the total number of characters in a string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countCharac(str1 : String) : Long = {\n        str1.length()\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(countCharac((\"python programming\")) == (18l));",
            "assert(countCharac((\"language\")) == (8l));",
            "assert(countCharac((\"words\")) == (5l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "244",
        "title": "next_Perfect_Square",
        "text": "Write a scalathon function to find the next perfect square greater than a given number.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def nextPerfectSquare(N : Long) : Long = {\n        Long.MAX_VALUE\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(nextPerfectSquare((35l)) == (36l));",
            "assert(nextPerfectSquare((6l)) == (9l));",
            "assert(nextPerfectSquare((9l)) == (16l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "245",
        "title": "max_sum",
        "text": "Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maxSum(arr : List[Long]) : Long = {\n        Long.max(arr)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));",
            "assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));",
            "assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "247",
        "title": "lps",
        "text": "Write a function to find the length of the longest palindromic subsequence in the given string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def lps(str : String) : Long = {\n        str.length()\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(lps((\"TENS FOR TENS\")) == (5l));",
            "assert(lps((\"CARDIO FOR CARDS\")) == (7l));",
            "assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "249",
        "title": "intersection_array",
        "text": "Write a function to find the intersection of two lists.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n        array_nums1.head, array_nums2.head\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));",
            "assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));",
            "assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "250",
        "title": "count_X",
        "text": "Write a scalathon function that takes in a tuple and an element and counts the occcurences of the element in the list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countX(tup : List[Long], x : Long) : Long = {\n        x : x + 1\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(countX((List[Long](10l.toLong, 8l.toLong, 5l.toLong, 2l.toLong, 10l.toLong, 15l.toLong, 10l.toLong, 8l.toLong, 5l.toLong, 8l.toLong, 8l.toLong, 2l.toLong)), (4l)) == (0l));",
            "assert(countX((List[Long](10l.toLong, 8l.toLong, 5l.toLong, 2l.toLong, 10l.toLong, 15l.toLong, 10l.toLong, 8l.toLong, 5l.toLong, 8l.toLong, 8l.toLong, 2l.toLong)), (10l)) == (3l));",
            "assert(countX((List[Long](10l.toLong, 8l.toLong, 5l.toLong, 2l.toLong, 10l.toLong, 15l.toLong, 10l.toLong, 8l.toLong, 5l.toLong, 8l.toLong, 8l.toLong, 2l.toLong)), (8l)) == (4l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "251",
        "title": "insert_element",
        "text": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def insertElement(list : List[String], element : String) : List[String] = {\n        \"a\" : \"b\",\n        \"c\" : \"d\",\n        \"e\" : \"f\",\n        \"g\" : \"h\",\n        \"i\" : \"j\",\n        \"k\" : \"l\",\n        \"m\" : \"n\",\n        \"o\" : \"p\",\n        \"q\" : \"r\",\n        \"s\" : \"t\",\n        \"u\" : \"v\",\n        \"w\" : \"x\",\n        \"x\" : \"y\",\n        \"z\" : \"z\",\n        \"A\" : \"B\",\n        \"C\" : \"D\",\n        \"E\" : \"F\",\n        \"G\" : \"H\",\n        \"I\" : \"J\",\n        \"K\" : \"L\",\n        \"M\" : \"N\",\n        \"O\" : \"P\",\n        \"Q\" : \"R\",\n        \"S\" : \"T\",\n        \"U\" : \"V\",\n        \"W\" : \"X\",\n        \"X\" : \"Y\",\n        \"Z\" : \"Z\",\n        \"a\" : \"b\",\n        \"c\" : \"d\",\n        \"e\" : \"f\",\n        \"g\" : \"h\",\n        \"i\" : \"j\",\n        \"k\" : \"l\",\n        \"m\" : \"n\",\n        \"o\" : \"p\",\n        \"q\" : \"r\",\n        \"s\" : \"t\",\n        \"u\" : \"v\",\n        \"w\" : \"x\",\n        \"x\" : \"y\",\n        \"z\" : \"z\",\n        \"A\" : \"B\",\n        \"C\" : \"D\",\n        \"E\" : \"F\",\n        \"G\" : \"H\",\n        \"I\" : \"J\",\n        \"K\" : \"L\",\n        \"M\" :\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(insertElement((List[String](\"Red\", \"Green\", \"Black\")), (\"c\")).equals((List[String](\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\"))));",
            "assert(insertElement((List[String](\"python\", \"java\")), (\"program\")).equals((List[String](\"program\", \"python\", \"program\", \"java\"))));",
            "assert(insertElement((List[String](\"happy\", \"sad\")), (\"laugh\")).equals((List[String](\"laugh\", \"happy\", \"laugh\", \"sad\"))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "252",
        "title": "convert",
        "text": "Write a scalathon function to convert complex numbers to polar coordinates.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def convert(numbers : Long) : Tuple2[Float, Float] = {\n        0.0 : (0.0, 0.0),\n        1.0 : (1.0, 0.0),\n        2.0 : (0.0, 1.0),\n        3.0 : (0.0, -1.0),\n        4.0 : (1.0, 0.0),\n        5.0 : (0.0, -1.0),\n        6.0 : (0.0, 1.0),\n        7.0 : (1.0, 0.0),\n        8.0 : (0.0, -1.0),\n        9.0 : (0.0, 1.0),\n        10.0 : (1.0, 0.0),\n        11.0 : (0.0, -1.0),\n        12.0 : (0.0, 1.0),\n        13.0 : (1.0, 0.0),\n        14.0 : (0.0, -1.0),\n        15.0 : (0.0, 1.0),\n        16.0 : (1.0, 0.0),\n        17.0 : (0.0, -1.0),\n        18.0 : (0.0, 1.0),\n        19.0 : (1.0, 0.0),\n        20.0 : (0.0, -1.0),\n        21.0 : (0.0, 1.0),\n        22.0 : (1.0, 0.0),\n        23.0 : (0.0, -1.0),\n        24.0 : (0.0, 1.0),\n        25.0 : (1.0, 0.0),\n        26.0 : (0.0, -1.0),\n        27.0 : (0.0, 1.0),\n        28.0 : (1.0, 0.0),\n        29.0 : (0.0,\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(convert((1l)).equals(((1.0f, 0.0f))));",
            "assert(convert((4l)).equals(((4.0f, 0.0f))));",
            "assert(convert((5l)).equals(((5.0f, 0.0f))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "255",
        "title": "combinations_colors",
        "text": "Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a list for each combination.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def combinationsColors(l : List[String], n : Long) : List[List[String]] = {\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n        l : [],\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(combinationsColors((List[String](\"Red\", \"Green\", \"Blue\")), (1l)).equals((List[List[String]](List[String](\"Red\"), List[String](\"Green\"), List[String](\"Blue\")))));",
            "assert(combinationsColors((List[String](\"Red\", \"Green\", \"Blue\")), (2l)).equals((List[List[String]](List[String](\"Red\", \"Red\"), List[String](\"Red\", \"Green\"), List[String](\"Red\", \"Blue\"), List[String](\"Green\", \"Green\"), List[String](\"Green\", \"Blue\"), List[String](\"Blue\", \"Blue\")))));",
            "assert(combinationsColors((List[String](\"Red\", \"Green\", \"Blue\")), (3l)).equals((List[List[String]](List[String](\"Red\", \"Red\", \"Red\"), List[String](\"Red\", \"Red\", \"Green\"), List[String](\"Red\", \"Red\", \"Blue\"), List[String](\"Red\", \"Green\", \"Green\"), List[String](\"Red\", \"Green\", \"Blue\"), List[String](\"Red\", \"Blue\", \"Blue\"), List[String](\"Green\", \"Green\", \"Green\"), List[String](\"Green\", \"Green\", \"Blue\"), List[String](\"Green\", \"Blue\", \"Blue\"), List[String](\"Blue\", \"Blue\", \"Blue\")))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "256",
        "title": "count_Primes_nums",
        "text": "Write a scalathon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countPrimesNums(n : Long) : Long = {\n        n > 0? n : 0\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(countPrimesNums((5l)) == (2l));",
            "assert(countPrimesNums((10l)) == (4l));",
            "assert(countPrimesNums((100l)) == (25l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "257",
        "title": "swap_numbers",
        "text": "Write a function that takes in two numbers and returns a list with the second number and then the first number.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def swapNumbers(a : Long, b : Long) : List[Long] = {\n        a, b\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(swapNumbers((10l), (20l)).equals((List[Long](20l.toLong, 10l.toLong))));",
            "assert(swapNumbers((15l), (17l)).equals((List[Long](17l.toLong, 15l.toLong))));",
            "assert(swapNumbers((100l), (200l)).equals((List[Long](200l.toLong, 100l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "259",
        "title": "maximize_elements",
        "text": "Write a function to maximize the given two lists.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maximizeElements(test_tup1 : List[List[Long]], test_tup2 : List[List[Long]]) : List[List[Long]] = {\n        test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_t\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(maximizeElements((List[List[Long]](List[Long](1l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](2l.toLong, 9l.toLong), List[Long](1l.toLong, 10l.toLong))), (List[List[Long]](List[Long](6l.toLong, 7l.toLong), List[Long](3l.toLong, 9l.toLong), List[Long](1l.toLong, 1l.toLong), List[Long](7l.toLong, 3l.toLong)))).equals((List[List[Long]](List[Long](6l.toLong, 7l.toLong), List[Long](4l.toLong, 9l.toLong), List[Long](2l.toLong, 9l.toLong), List[Long](7l.toLong, 10l.toLong)))));",
            "assert(maximizeElements((List[List[Long]](List[Long](2l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](3l.toLong, 10l.toLong), List[Long](2l.toLong, 11l.toLong))), (List[List[Long]](List[Long](7l.toLong, 8l.toLong), List[Long](4l.toLong, 10l.toLong), List[Long](2l.toLong, 2l.toLong), List[Long](8l.toLong, 4l.toLong)))).equals((List[List[Long]](List[Long](7l.toLong, 8l.toLong), List[Long](5l.toLong, 10l.toLong), List[Long](3l.toLong, 10l.toLong), List[Long](8l.toLong, 11l.toLong)))));",
            "assert(maximizeElements((List[List[Long]](List[Long](3l.toLong, 5l.toLong), List[Long](6l.toLong, 7l.toLong), List[Long](4l.toLong, 11l.toLong), List[Long](3l.toLong, 12l.toLong))), (List[List[Long]](List[Long](8l.toLong, 9l.toLong), List[Long](5l.toLong, 11l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](9l.toLong, 5l.toLong)))).equals((List[List[Long]](List[Long](8l.toLong, 9l.toLong), List[Long](6l.toLong, 11l.toLong), List[Long](4l.toLong, 11l.toLong), List[Long](9l.toLong, 12l.toLong)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "260",
        "title": "newman_prime",
        "text": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def newmanPrime(n : Long) : Long = {\n        Long.valueOf(1) : Long.valueOf(1),\n        Long.valueOf(2) : Long.valueOf(2),\n        Long.valueOf(3) : Long.valueOf(3),\n        Long.valueOf(4) : Long.valueOf(4),\n        Long.valueOf(5) : Long.valueOf(5),\n        Long.valueOf(6) : Long.valueOf(6),\n        Long.valueOf(7) : Long.valueOf(7),\n        Long.valueOf(8) : Long.valueOf(8),\n        Long.valueOf(9) : Long.valueOf(9),\n        Long.valueOf(10) : Long.valueOf(10),\n        Long.valueOf(11) : Long.valueOf(11),\n        Long.valueOf(12) : Long.valueOf(12),\n        Long.valueOf(13) : Long.valueOf(13),\n        Long.valueOf(14) : Long.valueOf(14),\n        Long.valueOf(15) : Long.valueOf(15),\n        Long.valueOf(16) : Long.valueOf(16),\n        Long.valueOf(17) : Long.valueOf(17),\n        Long.valueOf(18) : Long.valueOf(18),\n        Long.valueOf(19) : Long.valueOf(19),\n        Long.valueOf(20) : Long.valueOf(20),\n        Long.valueOf(21) : Long.valueOf(21),\n        Long.valueOf(22) : Long.valueOf(22),\n        Long.valueOf(23) : Long.valueOf(23),\n        Long.valueOf(24) : Long.valueOf(24),\n        Long.valueOf(25) : Long.valueOf(25),\n        Long.valueOf(26) : Long.valueOf(26),\n        Long.valueOf(27) : Long.\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(newmanPrime((3l)) == (7l));",
            "assert(newmanPrime((4l)) == (17l));",
            "assert(newmanPrime((5l)) == (41l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "261",
        "title": "division_elements",
        "text": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def divisionElements(test_tup1 : Tuple2[Long, Long, Long, Long], test_tup2 : Tuple2[Long, Long, Long, Long]) : Tuple2[Long, Long, Long, Long] = {\n        test_tup1.x : test_tup2.x,\n        test_tup1.y : test_tup2.y,\n        test_tup1.z : test_tup2.z,\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(divisionElements(((10l, 4l, 6l, 9l)), ((5l, 2l, 3l, 3l))).equals(((2l, 2l, 2l, 3l))));",
            "assert(divisionElements(((12l, 6l, 8l, 16l)), ((6l, 3l, 4l, 4l))).equals(((2l, 2l, 2l, 4l))));",
            "assert(divisionElements(((20l, 14l, 36l, 18l)), ((5l, 7l, 6l, 9l))).equals(((4l, 2l, 6l, 2l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "262",
        "title": "split_two_parts",
        "text": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def splitTwoParts(list1 : List[Any], L : Long) : Any = {\n        list1.length : L,\n        list1.head : list1.tail.head,\n        list1.tail : list1.tail.tail\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(splitTwoParts((List[Any](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (3l)).equals((Any(1l.toLong, 1l.toLong, 2l.toLong), List[Long](3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)))));",
            "assert(splitTwoParts((List[Any](\"a\", \"b\", \"c\", \"d\")), (2l)).equals((Any(\"a\", \"b\"), List[String](\"c\", \"d\")))));",
            "assert(splitTwoParts((List[Any](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\")), (4l)).equals((Any(\"p\", \"y\", \"t\", \"h\"), List[String](\"o\", \"n\")))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "264",
        "title": "dog_age",
        "text": "Write a function to calculate a dog's age in dog's years.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def dogAge(h_age : Long) : Long = {\n        // Write a function to calculate a dog's age in dog's years.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        // The function should return a Long.\n        \n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(dogAge((12l)) == (61l));",
            "assert(dogAge((15l)) == (73l));",
            "assert(dogAge((24l)) == (109l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "265",
        "title": "list_split",
        "text": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def listSplit(S : List[Any], step : Long) : List[List[Any]] = {\n        S.head(step): S.tail(step),\n        S.head(step + 1): S.tail(step + 1)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(listSplit((List[Any](\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((List[List[Any]](List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));",
            "assert(listSplit((List[Any](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((List[List[Any]](List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));",
            "assert(listSplit((List[Any](\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((List[List[Any]](List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "266",
        "title": "lateralsurface_cube",
        "text": "Write a function to find the lateral surface area of a cube given its side length.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def lateralsurfaceCube(l : Long) : Long = {\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of the cube.\n        l : Long,\n        // The side length of\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(lateralsurfaceCube((5l)) == (100l));",
            "assert(lateralsurfaceCube((9l)) == (324l));",
            "assert(lateralsurfaceCube((10l)) == (400l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "267",
        "title": "square_Sum",
        "text": "Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def squareSum(n : Long) : Long = {\n        n\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(squareSum((2l)) == (10l));",
            "assert(squareSum((3l)) == (35l));",
            "assert(squareSum((4l)) == (84l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "268",
        "title": "find_star_num",
        "text": "Write a function to find then'th star number.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findStarNum(n : Long) : Long = {\n        // Write a function to find then'th star number.\n        def findStarNum(n : Long) : Long = {\n            // Write a function to find then'th star number.\n            def findStarNum(n : Long) : Long = {\n                // Write a function to find then'th star number.\n                def findStarNum(n : Long) : Long = {\n                    // Write a function to find then'th star number.\n                    def findStarNum(n : Long) : Long = {\n                        // Write a function to find then'th star number.\n                        def findStarNum(n : Long) : Long = {\n                            // Write a function to find then'th star number.\n                            def findStarNum(n : Long) : Long = {\n                                // Write a function to find then'th star number.\n                                def findStarNum(n : Long) : Long = {\n                                    // Write a function to find then'th star number.\n                                    def findStarNum(n : Long) : Long = {\n                                        // Write a function to find then'th star number.\n                                        def findStarNum(n : Long) : Long = {\n                                            // Write a function to find then'th star number.\n                                            def findStarNum(n : Long) : Long = {\n                                                // Write a function to find then'th star number.\n                                                def findStarNum(n : Long) : Long = {\n                                                    // Write a function to find then'th star number.\n                                                    def findStarNum(n : Long) : Long = {\n                                                        // Write a function to find then'th star number.\n                                                        def findStarNum(n : Long) : Long = {\n                                                            // Write a function to find then'th star number.\n                                    \n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(findStarNum((3l)) == (37l));",
            "assert(findStarNum((4l)) == (73l));",
            "assert(findStarNum((5l)) == (121l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "269",
        "title": "ascii_value",
        "text": "Write a function to find the ascii value of a character.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def asciiValue(k : String) : Long = {\n        'a' : 0,\n        'b' : 1,\n        'c' : 2,\n        'd' : 3,\n        'e' : 4,\n        'f' : 5,\n        'g' : 6,\n        'h' : 7,\n        'i' : 8,\n        'j' : 9,\n        'k' : 10,\n        'l' : 11,\n       'm' : 12,\n        'n' : 13,\n        'o' : 14,\n        'p' : 15,\n        'q' : 16,\n        'r' : 17,\n       's' : 18,\n        't' : 19,\n        'u' : 20,\n        'v' : 21,\n        'w' : 22,\n        'x' : 23,\n        'y' : 24,\n        'z' : 25,\n        'A' : 26,\n        'B' : 27,\n        'C' : 28,\n        'D' : 29,\n        'E' : 30,\n        'F' : 31,\n        'G' : 32,\n        'H' : 33,\n        'I' : 34,\n        'J' : 35,\n        'K' : 36,\n        'L' : 37,\n        'M' : 38,\n        'N' : 39,\n        'O' : 40,\n        'P' : 41,\n        'Q' : 42,\n        'R' : 43,\n        'S' : 44,\n        'T' : 45,\n        'U' : 46,\n        'V' : 47,\n        'W' : 48,\n        'X' : 49,\n        'Y' : 50,\n        'Z' : 51,\n        '0' : 52,\n        '1' : 53,\n        '2' : 54,\n        '3' : 55,\n        '4' : 56,\n        '5' : 57\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(asciiValue((\"A\")) == (65l));",
            "assert(asciiValue((\"R\")) == (82l));",
            "assert(asciiValue((\"S\")) == (83l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "270",
        "title": "sum_even_and_even_index",
        "text": "Write a scalathon function to find the sum of even numbers at even positions of a list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumEvenAndEvenIndex(arr : List[Long]) : Long = {\n        i : i + 1\n        for i in range(0, len(arr))\n        if arr[i] % 2 == 0\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(sumEvenAndEvenIndex((List[Long](5l.toLong, 6l.toLong, 12l.toLong, 1l.toLong, 18l.toLong, 8l.toLong))) == (30l));",
            "assert(sumEvenAndEvenIndex((List[Long](3l.toLong, 20l.toLong, 17l.toLong, 9l.toLong, 2l.toLong, 10l.toLong, 18l.toLong, 13l.toLong, 6l.toLong, 18l.toLong))) == (26l));",
            "assert(sumEvenAndEvenIndex((List[Long](5l.toLong, 6l.toLong, 12l.toLong, 1l.toLong))) == (12l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "271",
        "title": "even_Power_Sum",
        "text": "Write a scalathon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def evenPowerSum(n : Long) : Long = {\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        72 : 72,\n        73 : 73,\n        74 : 74,\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(evenPowerSum((2l)) == (1056l));",
            "assert(evenPowerSum((3l)) == (8832l));",
            "assert(evenPowerSum((1l)) == (32l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "272",
        "title": "rear_extract",
        "text": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def rearExtract(test_list : List[Tuple2[Long, String, Long]]) : List[Long] = {\n        (0, \"a\"),\n        (1, \"b\"),\n        (2, \"c\"),\n        (3, \"d\"),\n        (4, \"e\"),\n        (5, \"f\"),\n        (6, \"g\"),\n        (7, \"h\"),\n        (8, \"i\"),\n        (9, \"j\"),\n        (10, \"k\"),\n        (11, \"l\"),\n        (12, \"m\"),\n        (13, \"n\"),\n        (14, \"o\"),\n        (15, \"p\"),\n        (16, \"q\"),\n        (17, \"r\"),\n        (18, \"s\"),\n        (19, \"t\"),\n        (20, \"u\"),\n        (21, \"v\"),\n        (22, \"w\"),\n        (23, \"x\"),\n        (24, \"y\"),\n        (25, \"z\"),\n        (26, \"A\"),\n        (27, \"B\"),\n        (28, \"C\"),\n        (29, \"D\"),\n        (30, \"E\"),\n        (31, \"F\"),\n        (32, \"G\"),\n        (33, \"H\"),\n        (34, \"I\"),\n        (35, \"J\"),\n        (36, \"K\"),\n        (37, \"L\"),\n        (38, \"M\"),\n        (39, \"N\"),\n        (40, \"O\"),\n        (41, \"P\"),\n        (42, \"Q\"),\n        (43, \"R\"),\n        (44, \"S\"),\n        (45, \"T\"),\n        (46, \"U\"),\n        (47, \"V\"),\n        (48, \"W\"),\n        (49, \"X\"),\n        (50, \"Y\"),\n        (51, \"Z\"),\n        (52, \"A\"),\n        (53, \"B\"),\n        (\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(rearExtract((List[Tuple2[Long, String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));",
            "assert(rearExtract((List[Tuple2[Long, String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));",
            "assert(rearExtract((List[Tuple2[Long, String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "273",
        "title": "substract_elements",
        "text": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def substractElements(test_tup1 : Tuple2[Long, Long, Long], test_tup2 : Tuple2[Long, Long, Long]) : Tuple2[Long, Long, Long] = {\n        test_tup1[0] - test_tup2[0],\n        test_tup1[1] - test_tup2[1],\n        test_tup1[2] - test_tup2[2]\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(substractElements(((10l, 4l, 5l)), ((2l, 5l, 18l))).equals(((8l, -1l, -13l))));",
            "assert(substractElements(((11l, 2l, 3l)), ((24l, 45l, 16l))).equals(((-13l, -43l, -13l))));",
            "assert(substractElements(((7l, 18l, 9l)), ((10l, 11l, 12l))).equals(((-3l, 7l, -3l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "274",
        "title": "even_binomial_Coeff_Sum",
        "text": "Write a scalathon function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def evenBinomialCoeffSum(n : Long) : Long = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        72 : 72,\n        73 : 73,\n        \n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(evenBinomialCoeffSum((4l)) == (8l));",
            "assert(evenBinomialCoeffSum((6l)) == (32l));",
            "assert(evenBinomialCoeffSum((2l)) == (2l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "277",
        "title": "dict_filter",
        "text": "Write a function that takes in a map and integer n and filters the map to only include entries with values greater than or equal to n.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def dictFilter(dict : Map[String,Long], n : Long) : Map[String,Long] = {\n        k : v for k, v in dict.entries() if v > n\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(dictFilter((Map[String,Long](\"Cierra Vega\" -> 175l, \"Alden Cantrell\" -> 180l, \"Kierra Gentry\" -> 165l, \"Pierre Cox\" -> 190l)), (170l)).equals((Map[String,Long](\"Cierra Vega\" -> 175l, \"Alden Cantrell\" -> 180l, \"Pierre Cox\" -> 190l))));",
            "assert(dictFilter((Map[String,Long](\"Cierra Vega\" -> 175l, \"Alden Cantrell\" -> 180l, \"Kierra Gentry\" -> 165l, \"Pierre Cox\" -> 190l)), (180l)).equals((Map[String,Long](\"Alden Cantrell\" -> 180l, \"Pierre Cox\" -> 190l))));",
            "assert(dictFilter((Map[String,Long](\"Cierra Vega\" -> 175l, \"Alden Cantrell\" -> 180l, \"Kierra Gentry\" -> 165l, \"Pierre Cox\" -> 190l)), (190l)).equals((Map[String,Long](\"Pierre Cox\" -> 190l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "278",
        "title": "count_first_elements",
        "text": "Write a function to find the number of elements that occurs before the list element in the given tuple.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countFirstElements(test_tup : List[Either[Long, Tuple2[Long, Long]]]) : Long = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        72 : 72\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(countFirstElements((List[Either[Long, Tuple2[Long, Long]]](1l, 5l, 7l, (4l, 6l), 10l))) == (3l));",
            "assert(countFirstElements((List[Either[Long, Tuple2[Long, Long]]](2l, 9l, (5l, 7l), 11l))) == (2l));",
            "assert(countFirstElements((List[Either[Long, Tuple2[Long, Long]]](11l, 15l, 5l, 8l, (2l, 3l), 8l))) == (4l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "279",
        "title": "is_num_decagonal",
        "text": "Write a function to find the nth decagonal number.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isNumDecagonal(n : Long) : Long = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        72 : 72,\n        73 : 73,\n        74 : 74,\n        75 : 75,\n        76 : 76\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(isNumDecagonal((3l)) == (27l));",
            "assert(isNumDecagonal((7l)) == (175l));",
            "assert(isNumDecagonal((10l)) == (370l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "280",
        "title": "sequential_search",
        "text": "Write a function that takes in a list and element and returns a tuple containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sequentialSearch(dlist : List[Long], item : Long) : Tuple2[Boolean, Long] = {\n        (item == 0) : True,\n        (item == 1) : False,\n        (item == -1) : None\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals(((true, 3l))));",
            "assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals(((true, 7l))));",
            "assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals(((true, 6l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "281",
        "title": "all_unique",
        "text": "Write a scalathon function to check if the elements of a given list are unique or not.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def allUnique(test_list : List[Long]) : Boolean = {\n        test_list.length == 0\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(allUnique((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));",
            "assert(allUnique((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (false));",
            "assert(allUnique((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "282",
        "title": "sub_list",
        "text": "Write a function to subtract two lists element-wise.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.subList(0, n) : nums1.subList(0, n),\n        nums1.subList(n, n) : nums1.subList(n, n),\n        nums1.subList(n, n) : nums1.subList(n, n),\n        nums1.subList(0, n) : nums1.subList(0, n),\n        nums1.subList(n, n) : nums1.subList(n, n),\n        nums1.subList(n, n) : nums1.subList(n, n),\n        nums1.subList(0, n) : nums1.subList(0, n),\n        nums1.subList(n, n) : nums1.subList(n, n),\n        nums1.subList(0, n) : nums1.subList(0, n),\n        nums1.subList(n, n) : nums1.subList(n, n),\n        nums1.subList(0, n) : nums1.subList(0, n),\n        nums1.subList(n, n) : nums1.subList(n, n),\n        nums1.subList(0, n) : nums1.subList(0, n),\n        nums1.subList(n, n) : nums1.subList(n, n),\n        nums1.subList(0, n) : nums1.subList(0, n),\n        nums1.subList(n, n) : nums1.subList(n, n),\n        nums1.subList(0, n) : nums1.subList(0, n),\n        nums1.subList(n, n) : nums1.subList(n, n\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));",
            "assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));",
            "assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "283",
        "title": "validate",
        "text": "Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def validate(n : Long) : Boolean = {\n        n <= 0\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(validate((1234l)) == (true));",
            "assert(validate((51241l)) == (false));",
            "assert(validate((321l)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "284",
        "title": "check_element",
        "text": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def checkElement(list : List[Any], element : Any) : Boolean = {\n        // Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n        'checkElement' : {\n            'checkElement' : {\n                'checkElement' : {\n                    'checkElement' : {\n                        'checkElement' : {\n                            'checkElement' : {\n                                'checkElement' : {\n                                    'checkElement' : {\n                                        'checkElement' : {\n                                            'checkElement' : {\n                                                'checkElement' : {\n                                                    'checkElement' : {\n                                                        'checkElement' : {\n                                                            'checkElement' : {\n                                                                'checkElement' : {\n                                                                    'checkElement' : {\n                                                                        'checkElement' : {\n                                                                            'checkElement' : {\n                                                                                'checkElement' : {\n                                                                                    'checkElement' : {\n                                                                                        'checkElement' : {\n                                                                                            'checkElement' : {\n                                                                                              'checkElement' : {\n                                                                                                    'checkElement' : {\n                                                                                                        'checkElement' : {\n                                                                                                            'checkElement' : {\n                                                                                                                  'checkElement' : {\n                                                                                                                   'checkElement' : {\n                                                                                                                      'checkElement' : {\n                                                                                                                        'checkElement' : {\n                                                                                                                            'checkElement' : {\n                                                                                                                             'checkElement' : {\n                                                                                                                             'checkElement' : {\n                                                                                                                                   'checkElement' : {\n                                                                                                                                   'checkElement' : {\n                                                                                                                                   'checkElement\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(checkElement((List[Any](\"green\", \"orange\", \"black\", \"white\")), (Any(\"blue\"))) == (false));",
            "assert(checkElement((List[Any](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (Any(7l))) == (false));",
            "assert(checkElement((List[Any](\"green\", \"green\", \"green\", \"green\")), (Any(\"green\"))) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "285",
        "title": "text_match_two_three",
        "text": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def textMatchTwoThree(text : String) : Boolean = {\n        'a': True,\n        'b': True,\n        'c': True,\n        'd': True,\n        'e': True,\n        'f': True,\n        'g': True,\n        'h': True,\n        'i': True,\n        'j': True,\n        'k': True,\n        'l': True,\n       'm': True,\n        'n': True,\n        'o': True,\n        'p': True,\n        'q': True,\n        'r': True,\n       's': True,\n        't': True,\n        'u': True,\n        'v': True,\n        'w': True,\n        'x': True,\n        'y': True,\n        'z': True,\n        'A': True,\n        'B': True,\n        'C': True,\n        'D': True,\n        'E': True,\n        'F': True,\n        'G': True,\n        'H': True,\n        'I': True,\n        'J': True,\n        'K': True,\n        'L': True,\n        'M': True,\n        'N': True,\n        'O': True,\n        'P': True,\n        'Q': True,\n        'R': True,\n        'S': True,\n        'T': True,\n        'U': True,\n        'V': True,\n        'W': True,\n        'X': True,\n        'Y': True,\n        'Z': True,\n        '0': True,\n        '1': True,\n        '2': True,\n        '3': True,\n        '4': True,\n        '5': True,\n        '6': True,\n        '7': True,\n        '8': True,\n        '9': True,\n        'A': True,\n        'B': True,\n        'C':\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(textMatchTwoThree((\"ac\")) == (false));",
            "assert(textMatchTwoThree((\"dc\")) == (false));",
            "assert(textMatchTwoThree((\"abbbba\")) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "286",
        "title": "max_sub_array_sum_repeated",
        "text": "Write a function to find the largest sum of a contiguous list in the modified list which is formed by repeating the given list k times.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maxSubArraySumRepeated(a : List[Long], n : Long, k : Long) : Long = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        \n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(maxSubArraySumRepeated((List[Long](10l.toLong, 20l.toLong, -30l.toLong, -1l.toLong)), (4l), (3l)) == (30l));",
            "assert(maxSubArraySumRepeated((List[Long](-1l.toLong, 10l.toLong, 20l.toLong)), (3l), (2l)) == (59l));",
            "assert(maxSubArraySumRepeated((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)), (3l), (3l)) == (-1l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "287",
        "title": "square_Sum",
        "text": "Write a scalathon function takes in an integer n and returns the sum of squares of first n even natural numbers.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def squareSum(n : Long) : Long = {\n        n\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(squareSum((2l)) == (20l));",
            "assert(squareSum((3l)) == (56l));",
            "assert(squareSum((4l)) == (120l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "290",
        "title": "max_length",
        "text": "Write a function to find the list of maximum length in a list of lists.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maxLength(list1 : List[List[Long]]) : Tuple2[Long, List[Long]] = {\n        0 : list1,\n        1 : [],\n        2 : [],\n        3 : [],\n        4 : [],\n        5 : [],\n        6 : [],\n        7 : [],\n        8 : [],\n        9 : [],\n        10 : [],\n        11 : [],\n        12 : [],\n        13 : [],\n        14 : [],\n        15 : [],\n        16 : [],\n        17 : [],\n        18 : [],\n        19 : [],\n        20 : [],\n        21 : [],\n        22 : [],\n        23 : [],\n        24 : [],\n        25 : [],\n        26 : [],\n        27 : [],\n        28 : [],\n        29 : [],\n        30 : [],\n        31 : [],\n        32 : [],\n        33 : [],\n        34 : [],\n        35 : [],\n        36 : [],\n        37 : [],\n        38 : [],\n        39 : [],\n        40 : [],\n        41 : [],\n        42 : [],\n        43 : [],\n        44 : [],\n        45 : [],\n        46 : [],\n        47 : [],\n        48 : [],\n        49 : [],\n        50 : [],\n        51 : [],\n        52 : [],\n        53 : [],\n        54 : [],\n        55 : [],\n        56 : [],\n        57 : [],\n        58 : [],\n        59 : [],\n        60 : [],\n        61 : [],\n        62 : [],\n        63 : [],\n        64 : [],\n        65 : [],\n        66 : [],\n        67 : [],\n        68 : [],\n        69 : [],\n        70 : [],\n        71 : [],\n        72 : [],\n        73 : [\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals(((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong)))));",
            "assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals(((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))));",
            "assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals(((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "291",
        "title": "count_no_of_ways",
        "text": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countNoOfWays(n : Long, k : Long) : Long = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(countNoOfWays((2l), (4l)) == (16l));",
            "assert(countNoOfWays((3l), (2l)) == (6l));",
            "assert(countNoOfWays((4l), (4l)) == (228l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "292",
        "title": "find",
        "text": "Write a scalathon function to find quotient of two numbers (rounded down to the nearest integer).",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def find(n : Long, m : Long) : Long = {\n        n : n / m,\n        m : m\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(find((10l), (3l)) == (3l));",
            "assert(find((4l), (2l)) == (2l));",
            "assert(find((20l), (5l)) == (4l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "293",
        "title": "otherside_rightangle",
        "text": "Write a function to find the third side of a right angled triangle.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def othersideRightangle(w : Long, h : Long) : Float = {\n        // Write a function to find the third side of a right angled triangle.\n        def othersideRightangle(w : Long, h : Long) : Float = {\n            // Write a function to find the third side of a right angled triangle.\n            def othersideRightangle(w : Long, h : Long) : Float = {\n                // Write a function to find the third side of a right angled triangle.\n                def othersideRightangle(w : Long, h : Long) : Float = {\n                    // Write a function to find the third side of a right angled triangle.\n                    def othersideRightangle(w : Long, h : Long) : Float = {\n                        // Write a function to find the third side of a right angled triangle.\n                        def othersideRightangle(w : Long, h : Long) : Float = {\n                            // Write a function to find the third side of a right angled triangle.\n                            def othersideRightangle(w : Long, h : Long) : Float = {\n                                // Write a function to find the third side of a right angled triangle.\n                                def othersideRightangle(w : Long, h : Long) : Float = {\n                                    // Write a function to find the third side of a right angled triangle.\n                                    def othersideRightangle(w : Long, h : Long) : Float = {\n                                        // Write a function to find the third side of a right angled triangle.\n                                        def othersideRightangle(w : Long, h : Long) : Float = {\n                                            // Write a function to find the third side of a right angled triangle.\n                                            def othersideRightangle(w : Long, h : Long) : Float = {\n                                                // Write a function to find the third side of a right angled triangle.\n                                                def othersideRightangle(w : Long, h : Long) : Float = {\n                                                    // Write a function to find the third side of a right angled triangle.\n                                                    def otherside\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(othersideRightangle((7l), (8l)) == (10.63014581273465f));",
            "assert(othersideRightangle((3l), (4l)) == 5l);",
            "assert(othersideRightangle((7l), (15l)) == (16.55294535724685f));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "294",
        "title": "max_val",
        "text": "Write a function to find the maximum value in a given heterogeneous list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maxVal(listval : List[Either[String, Long]]) : Long = {\n        max(listval)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(maxVal((List[Either[String, Long]](\"Python\", 3l, 2l, 4l, 5l, \"version\"))) == (5l));",
            "assert(maxVal((List[Either[String, Long]](\"Python\", 15l, 20l, 25l))) == (25l));",
            "assert(maxVal((List[Either[String, Long]](\"Python\", 30l, 20l, 40l, 50l, \"version\"))) == (50l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "295",
        "title": "sum_div",
        "text": "Write a function to return the sum of all divisors of a number.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumDiv(number : Long) : Long = {\n        // Return the sum of all divisors of a number.\n        sum : Long = {\n            // Return the sum of all divisors of a number.\n            sum : {\n                // Return the sum of all divisors of a number.\n                sum : {\n                    // Return the sum of all divisors of a number.\n                    sum : {\n                        // Return the sum of all divisors of a number.\n                        sum : {\n                            // Return the sum of all divisors of a number.\n                            sum : {\n                                // Return the sum of all divisors of a number.\n                                sum : {\n                                    // Return the sum of all divisors of a number.\n                                    sum : {\n                                        // Return the sum of all divisors of a number.\n                                        sum : {\n                                            // Return the sum of all divisors of a number.\n                                            sum : {\n                                                // Return the sum of all divisors of a number.\n                                                sum : {\n                                                    // Return the sum of all divisors of a number.\n                                                    sum : {\n                                                        // Return the sum of all divisors of a number.\n                                                        sum : {\n                                                            // Return the sum of all divisors of a number.\n                                                            sum : {\n                                                                // Return the sum of all divisors of a number.\n                                                                sum : {\n                                                                    // Return the sum of all divisors of a number.\n                                                                    sum : {\n                                                                        // Return the sum of all divisors of a number.\n                                                                        sum : {\n                                                                            // Return the sum of all divisors of a number.\n                                                                            sum : {\n                                                                                // Return the sum of\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(sumDiv((8l)) == (7l));",
            "assert(sumDiv((12l)) == (16l));",
            "assert(sumDiv((7l)) == (1l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "296",
        "title": "get_Inv_Count",
        "text": "Write a scalathon function to count inversions in a list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getInvCount(arr : List[Long]) : Long = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        72 : 72,\n        73 : 73,\n        74 : 74,\n        75 : 75,\n        76\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));",
            "assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));",
            "assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "297",
        "title": "flatten_list",
        "text": "Write a function to flatten a given nested list structure.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def flattenList(list1 : List[Either[Long, List[Long]]]) : List[Long] = {\n        list1.head,\n        list1.tail,\n        list1.head.tail,\n        list1.head.tail.tail,\n        list1.head.tail.tail.tail,\n        list1.head.tail.tail.tail.tail,\n        list1.head.tail.tail.tail.tail.tail,\n        list1.head.tail.tail.tail.tail.tail.tail,\n        list1.head.tail.tail.tail.tail.tail.tail,\n        list1.head.tail.tail.tail.tail.tail.tail,\n        list1.head.tail.tail.tail.tail.tail.tail,\n        list1.head.tail.tail.tail.tail.tail.tail,\n        list1.head.tail.tail.tail.tail.tail.tail,\n        list1.head.tail.tail.tail.tail.tail.tail,\n        list1.head.tail.tail.tail.tail.tail.tail,\n        list1.head.tail.tail.tail.tail.tail.tail,\n        list1.head.tail.tail.tail.tail.tail.tail,\n        list1.head.tail.tail.tail.tail.tail.tail,\n        list1.head.tail.tail.tail.tail.tail.tail,\n        list1.head.tail.tail.tail.tail.tail.tail,\n        list1.head.tail.tail.tail.tail.tail.tail,\n        list1.head.tail.tail.tail.tail.tail.tail,\n        list1.head.tail.tail.tail.tail.tail.tail,\n        list1.head.tail.tail.tail.tail.tail.tail,\n        list1.head.tail.tail.tail.tail.tail.tail,\n        list1.head.tail.tail.tail.tail.tail.tail,\n        list1.head.tail.\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(flattenList((List[Either[Long, List[Long]]](0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));",
            "assert(flattenList((List[Either[Long, List[Long]]](List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));",
            "assert(flattenList((List[Either[Long, List[Long]]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "299",
        "title": "max_aggregate",
        "text": "Write a function to calculate the maximum aggregate from the list of tuples.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maxAggregate(stdata : List[Tuple2[String, Long]]) : Tuple2[String, Long] = {\n        \"a\": 0,\n        \"b\": 0,\n        \"c\": 0,\n        \"d\": 0,\n        \"e\": 0,\n        \"f\": 0,\n        \"g\": 0,\n        \"h\": 0,\n        \"i\": 0,\n        \"j\": 0,\n        \"k\": 0,\n        \"l\": 0,\n        \"m\": 0,\n        \"n\": 0,\n        \"o\": 0,\n        \"p\": 0,\n        \"q\": 0,\n        \"r\": 0,\n        \"s\": 0,\n        \"t\": 0,\n        \"u\": 0,\n        \"v\": 0,\n        \"w\": 0,\n        \"x\": 0,\n        \"y\": 0,\n        \"z\": 0,\n        \"A\": 0,\n        \"B\": 0,\n        \"C\": 0,\n        \"D\": 0,\n        \"E\": 0,\n        \"F\": 0,\n        \"G\": 0,\n        \"H\": 0,\n        \"I\": 0,\n        \"J\": 0,\n        \"K\": 0,\n        \"L\": 0,\n        \"M\": 0,\n        \"N\": 0,\n        \"O\": 0,\n        \"P\": 0,\n        \"Q\": 0,\n        \"R\": 0,\n        \"S\": 0,\n        \"T\": 0,\n        \"U\": 0,\n        \"V\": 0,\n        \"W\": 0,\n        \"X\": 0,\n        \"Y\": 0,\n        \"Z\": 0,\n        \"a\": 0,\n        \"b\": 0,\n        \"c\": 0,\n        \"d\": 0,\n        \"e\": 0,\n        \"f\": 0,\n        \"g\": 0,\n        \"h\": 0,\n        \"i\": 0,\n        \"j\": 0,\n        \"k\": 0,\n\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(maxAggregate((List[Tuple2[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals(((\"Juan Whelan\", 212l))));",
            "assert(maxAggregate((List[Tuple2[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals(((\"Juan Whelan\", 72l))));",
            "assert(maxAggregate((List[Tuple2[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals(((\"Sabah Colley\", 70l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "304",
        "title": "find_Element",
        "text": "Write a scalathon function to find element at a given index after number of rotations.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findElement(arr : List[Long], ranges : List[List[Long]], rotations : Long, index : Long) : Long = {\n        // Find the element at the given index.\n        index : Long = index\n        // Find the index of the first element after the given index.\n        index : Long = index + 1\n        // Find the index of the last element after the given index.\n        index : Long = index - 1\n        // Find the index of the first element after the given index.\n        index : Long = index + 1\n        // Find the index of the last element after the given index.\n        index : Long = index - 1\n        // Find the index of the first element after the given index.\n        index : Long = index + 1\n        // Find the index of the last element after the given index.\n        index : Long = index - 1\n        // Find the index of the first element after the given index.\n        index : Long = index + 1\n        // Find the index of the last element after the given index.\n        index : Long = index - 1\n        // Find the index of the first element after the given index.\n        index : Long = index + 1\n        // Find the index of the last element after the given index.\n        index : Long = index - 1\n        // Find the index of the first element after the given index.\n        index : Long = index + 1\n        // Find the index of the last element after the given index.\n        index : Long = index - 1\n        // Find the index of the first element after the given index.\n        index : Long = index + 1\n        // Find the index of the last element after the given index.\n        index : Long = index - 1\n        // Find the index of the first element after the given index.\n        index : Long = index + 1\n        // Find the index of the last element after the given index.\n        index : Long = index - 1\n        // Find the index of the first element after the given index.\n        index : Long = index + 1\n        // Find the index of the last element after\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(findElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (List[List[Long]](List[Long](0l.toLong, 2l.toLong), List[Long](0l.toLong, 3l.toLong))), (2l), (1l)) == (3l));",
            "assert(findElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[List[Long]](List[Long](0l.toLong, 1l.toLong), List[Long](0l.toLong, 2l.toLong))), (1l), (2l)) == (3l));",
            "assert(findElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)), (List[List[Long]](List[Long](0l.toLong, 1l.toLong), List[Long](0l.toLong, 2l.toLong))), (1l), (1l)) == (1l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "305",
        "title": "start_withp",
        "text": "Write a function to return two words from a list of words starting with letter 'p'.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def startWithp(words : List[String]) : Tuple2[String, String] = {\n        \"p\",\n        \"p\"\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals(((\"Python\", \"PHP\"))));",
            "assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals(((\"Python\", \"Programming\"))));",
            "assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals(((\"Pqrst\", \"Pqr\"))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "306",
        "title": "max_sum_increasing_subseq",
        "text": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maxSumIncreasingSubseq(a : List[Long], n : Long, index : Long, k : Long) : Long = {\n        index : index,\n        k : k,\n        a : a,\n        n : n,\n        i : index + 1,\n        j : index + 1,\n        k : k + 1,\n        a : a,\n        n : n,\n        i : index + 1,\n        j : index + 1,\n        k : k + 1,\n        a : a,\n        n : n,\n        i : index + 1,\n        j : index + 1,\n        k : k + 1,\n        a : a,\n        n : n,\n        i : index + 1,\n        j : index + 1,\n        k : k + 1,\n        a : a,\n        n : n,\n        i : index + 1,\n        j : index + 1,\n        k : k + 1,\n        a : a,\n        n : n,\n        i : index + 1,\n        j : index + 1,\n        k : k + 1,\n        a : a,\n        n : n,\n        i : index + 1,\n        j : index + 1,\n        k : k + 1,\n        a : a,\n        n : n,\n        i : index + 1,\n        j : index + 1,\n        k : k + 1,\n        a : a,\n        n : n,\n        i : index + 1,\n        j : index + 1,\n        k : k + 1,\n        a : a,\n        n : n,\n        i : index + 1,\n        j : index + 1,\n        k : k + 1,\n        a : a,\n        n : n,\n        i : index + 1,\n        j : index + 1,\n        k : k + 1,\n        a : a,\n        n :\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(maxSumIncreasingSubseq((List[Long](1l.toLong, 101l.toLong, 2l.toLong, 3l.toLong, 100l.toLong, 4l.toLong, 5l.toLong)), (7l), (4l), (6l)) == (11l));",
            "assert(maxSumIncreasingSubseq((List[Long](1l.toLong, 101l.toLong, 2l.toLong, 3l.toLong, 100l.toLong, 4l.toLong, 5l.toLong)), (7l), (2l), (5l)) == (7l));",
            "assert(maxSumIncreasingSubseq((List[Long](11l.toLong, 15l.toLong, 19l.toLong, 21l.toLong, 26l.toLong, 28l.toLong, 31l.toLong)), (7l), (2l), (4l)) == (71l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "308",
        "title": "large_product",
        "text": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def largeProduct(nums1 : List[Long], nums2 : List[Long], N : Long) : List[Long] = {\n        nums1.max() : nums1.max(),\n        nums1.min() : nums1.min(),\n        nums2.max() : nums2.max(),\n        nums2.min() : nums2.min(),\n        nums1.max() + nums2.max() : nums1.max() + nums2.max(),\n        nums1.min() + nums2.min() : nums1.min() + nums2.min(),\n        nums1.max() + nums2.min() : nums1.max() + nums2.min(),\n        nums1.max() + nums2.max() : nums1.max() + nums2.max(),\n        nums1.max() + nums2.min() : nums1.max() + nums2.min(),\n        nums1.max() + nums2.max() : nums1.max() + nums2.min(),\n        nums1.max() + nums2.min() : nums1.max() + nums2.max(),\n        nums1.max() + nums2.max() : nums1.max() + nums2.min(),\n        nums1.max() + nums2.min() : nums1.max() + nums2.max(),\n        nums1.max() + nums2.max() : nums1.max() + nums2.min(),\n        nums1.max() + nums2.min() : nums1.max() + nums2.max(),\n        nums1.max() + nums2.max() : nums1.max() + nums2.min(),\n        nums1.max() + nums2.min() : nums1.max() + nums\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(largeProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)), (List[Long](3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 6l.toLong)), (3l)).equals((List[Long](60l.toLong, 54l.toLong, 50l.toLong))));",
            "assert(largeProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)), (List[Long](3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 6l.toLong)), (4l)).equals((List[Long](60l.toLong, 54l.toLong, 50l.toLong, 48l.toLong))));",
            "assert(largeProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)), (List[Long](3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 6l.toLong)), (5l)).equals((List[Long](60l.toLong, 54l.toLong, 50l.toLong, 48l.toLong, 45l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "309",
        "title": "maximum",
        "text": "Write a scalathon function to find the maximum of two numbers.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maximum(a : Long, b : Long) : Long = {\n        a > b? a : b\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(maximum((5l), (10l)) == (10l));",
            "assert(maximum((-1l), (-2l)) == (-1l));",
            "assert(maximum((9l), (7l)) == (9l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "310",
        "title": "string_to_tuple",
        "text": "Write a function to convert a given string to a list of characters.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def stringToTuple(str1 : String) : List[String] = {\n        \"a\",\n        \"b\",\n        \"c\",\n        \"d\",\n        \"e\",\n        \"f\",\n        \"g\",\n        \"h\",\n        \"i\",\n        \"j\",\n        \"k\",\n        \"l\",\n        \"m\",\n        \"n\",\n        \"o\",\n        \"p\",\n        \"q\",\n        \"r\",\n        \"s\",\n        \"t\",\n        \"u\",\n        \"v\",\n        \"w\",\n        \"x\",\n        \"y\",\n        \"z\",\n        \"A\",\n        \"B\",\n        \"C\",\n        \"D\",\n        \"E\",\n        \"F\",\n        \"G\",\n        \"H\",\n        \"I\",\n        \"J\",\n        \"K\",\n        \"L\",\n        \"M\",\n        \"N\",\n        \"O\",\n        \"P\",\n        \"Q\",\n        \"R\",\n        \"S\",\n        \"T\",\n        \"U\",\n        \"V\",\n        \"W\",\n        \"X\",\n        \"Y\",\n        \"Z\",\n        \"0\",\n        \"1\",\n        \"2\",\n        \"3\",\n        \"4\",\n        \"5\",\n        \"6\",\n        \"7\",\n        \"8\",\n        \"9\",\n        \"+\",\n        \"-\",\n        \"*\",\n        \"/\",\n        \"=\",\n        \"<\",\n        \">\",\n        \"|\",\n        \"^\",\n        \"&\",\n        \"|\",\n        \"|\",\n        \"|\",\n        \"|\",\n        \"|\",\n        \"|\",\n        \"|\",\n        \"|\",\n        \"|\",\n        \"|\",\n        \"|\",\n        \"|\",\n        \"|\",\n        \"|\",\n        \"|\",\n        \"|\",\n        \"|\",\n        \"|\",\n        \"|\",\n        \n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(stringToTuple((\"python 3.0\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"))));",
            "assert(stringToTuple((\"item1\")).equals((List[String](\"i\", \"t\", \"e\", \"m\", \"1\"))));",
            "assert(stringToTuple((\"15.10\")).equals((List[String](\"1\", \"5\", \".\", \"1\", \"0\"))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "388",
        "title": "highest_Power_of_2",
        "text": "Write a scalathon function to find the highest power of 2 that is less than or equal to n.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def highestPowerOf2(n : Long) : Long = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        72 : 72,\n        73 : 73,\n        74 : 74,\n        \n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(highestPowerOf2((10l)) == (8l));",
            "assert(highestPowerOf2((19l)) == (16l));",
            "assert(highestPowerOf2((32l)) == (32l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "389",
        "title": "find_lucas",
        "text": "Write a function to find then'th lucas number.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findLucas(n : Long) : Long = {\n        // Write a function to find then'th lucas number.\n        def findLucas(n : Long) : Long = {\n            // Write a function to find then'th lucas number.\n            def findLucas(n : Long) : Long = {\n                // Write a function to find then'th lucas number.\n                def findLucas(n : Long) : Long = {\n                    // Write a function to find then'th lucas number.\n                    def findLucas(n : Long) : Long = {\n                        // Write a function to find then'th lucas number.\n                        def findLucas(n : Long) : Long = {\n                            // Write a function to find then'th lucas number.\n                            def findLucas(n : Long) : Long = {\n                                // Write a function to find then'th lucas number.\n                                def findLucas(n : Long) : Long = {\n                                    // Write a function to find then'th lucas number.\n                                    def findLucas(n : Long) : Long = {\n                                        // Write a function to find then'th lucas number.\n                                        def findLucas(n : Long) : Long = {\n                                            // Write a function to find then'th lucas number.\n                                            def findLucas(n : Long) : Long = {\n                                                // Write a function to find then'th lucas number.\n                                                def findLucas(n : Long) : Long = {\n                                                    // Write a function to find then'th lucas number.\n                                                    def findLucas(n : Long) : Long = {\n                                                        // Write a function to find then'th lucas number.\n                                                        def findLucas(n : Long) : Long = {\n                                                            // Write a function to find\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(findLucas((9l)) == (76l));",
            "assert(findLucas((4l)) == (7l));",
            "assert(findLucas((3l)) == (4l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "390",
        "title": "add_string",
        "text": "Write a function to apply a given format string to all of the elements in a list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def addString(list_ : List[Any], string : String) : List[String] = {\n        \"a\" : \"a\",\n        \"b\" : \"b\",\n        \"c\" : \"c\",\n        \"d\" : \"d\",\n        \"e\" : \"e\",\n        \"f\" : \"f\",\n        \"g\" : \"g\",\n        \"h\" : \"h\",\n        \"i\" : \"i\",\n        \"j\" : \"j\",\n        \"k\" : \"k\",\n        \"l\" : \"l\",\n        \"m\" : \"m\",\n        \"n\" : \"n\",\n        \"o\" : \"o\",\n        \"p\" : \"p\",\n        \"q\" : \"q\",\n        \"r\" : \"r\",\n        \"s\" : \"s\",\n        \"t\" : \"t\",\n        \"u\" : \"u\",\n        \"v\" : \"v\",\n        \"w\" : \"w\",\n        \"x\" : \"x\",\n        \"y\" : \"y\",\n        \"z\" : \"z\",\n        \"A\" : \"A\",\n        \"B\" : \"B\",\n        \"C\" : \"C\",\n        \"D\" : \"D\",\n        \"E\" : \"E\",\n        \"F\" : \"F\",\n        \"G\" : \"G\",\n        \"H\" : \"H\",\n        \"I\" : \"I\",\n        \"J\" : \"J\",\n        \"K\" : \"K\",\n        \"L\" : \"L\",\n        \"M\" : \"M\",\n        \"N\" : \"N\",\n        \"O\" : \"O\",\n        \"P\" : \"P\",\n        \"Q\" : \"Q\",\n        \"R\" : \"R\",\n        \"S\" : \"S\",\n        \"T\" : \"T\",\n        \"U\" : \"U\",\n        \"V\" : \"V\",\n        \"W\" : \"W\",\n        \"X\" :\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(addString((List[Any](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (\"temp{0}\")).equals((List[String](\"temp1\", \"temp2\", \"temp3\", \"temp4\"))));",
            "assert(addString((List[Any](\"a\", \"b\", \"c\", \"d\")), (\"python{0}\")).equals((List[String](\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"))));",
            "assert(addString((List[Any](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (\"string{0}\")).equals((List[String](\"string5\", \"string6\", \"string7\", \"string8\"))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "391",
        "title": "convert_list_dictionary",
        "text": "Write a function to convert more than one list to nested map.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def convertListDictionary(l1 : List[String], l2 : List[String], l3 : List[Long]) : List[Map[String,Map[String,Long]]] = {\n        {\n            \"a\": {\n                \"b\": {\n                    \"c\": {\n                        \"d\": {\n                            \"e\": {\n                                \"f\": {\n                                    \"g\": {\n                                        \"h\": {\n                                            \"i\": {\n                                                \"j\": {\n                                                    \"k\": {\n                                                        \"l\": {\n                                                            \"m\": {\n                                                                \"n\": {\n                                                                    \"o\": {\n                                                                        \"p\": {\n                                                                            \"q\": {\n                                                                                \"r\": {\n                                                                                    \"s\": {\n                                                                                        \"t\": {\n                                                                                    \"u\": {\n                                                                                        \"v\": {\n                                                                                            \"w\": {\n                                                                                              \"x\": {\n                                                                                                \"y\": {\n                                                                                                    \"z\": {\n                                                                                                        \"A\": {\n                                                                                                              \"B\": {\n                                                                                                                \"C\": {\n                                                                                                                  \"D\": {\n                                                                                                                    \"E\": {\n                                                                                                                        \"F\": {\n                                                                                                                            \"G\": {\n                                                                                                                                    \"H\": {\n                                                                                                                                      \"I\": {\n                                                                                                                                      \"J\": {\n                                                                                                                                      \"K\": {\n                                                                                                                                      \"L\": {\n                                                                                                                                      \"M\": {\n                                                                                                                                      \"N\": {\n                                                                                                                                      \"O\": {\n                                                                                                                                      \n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(convertListDictionary((List[String](\"S001\", \"S002\", \"S003\", \"S004\")), (List[String](\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\")), (List[Long](85l.toLong, 98l.toLong, 89l.toLong, 92l.toLong))).equals((List[Map[String,Map[String,Long]]](Map[String,Map[String,Long]](\"S001\" -> Map[String,Long](\"Adina Park\" -> 85l)), Map[String,Map[String,Long]](\"S002\" -> Map[String,Long](\"Leyton Marsh\" -> 98l)), Map[String,Map[String,Long]](\"S003\" -> Map[String,Long](\"Duncan Boyle\" -> 89l)), Map[String,Map[String,Long]](\"S004\" -> Map[String,Long](\"Saim Richards\" -> 92l))))));",
            "assert(convertListDictionary((List[String](\"abc\", \"def\", \"ghi\", \"jkl\")), (List[String](\"python\", \"program\", \"language\", \"programs\")), (List[Long](100l.toLong, 200l.toLong, 300l.toLong, 400l.toLong))).equals((List[Map[String,Map[String,Long]]](Map[String,Map[String,Long]](\"abc\" -> Map[String,Long](\"python\" -> 100l)), Map[String,Map[String,Long]](\"def\" -> Map[String,Long](\"program\" -> 200l)), Map[String,Map[String,Long]](\"ghi\" -> Map[String,Long](\"language\" -> 300l)), Map[String,Map[String,Long]](\"jkl\" -> Map[String,Long](\"programs\" -> 400l))))));",
            "assert(convertListDictionary((List[String](\"A1\", \"A2\", \"A3\", \"A4\")), (List[String](\"java\", \"C\", \"C++\", \"DBMS\")), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Map[String,Map[String,Long]]](Map[String,Map[String,Long]](\"A1\" -> Map[String,Long](\"java\" -> 10l)), Map[String,Map[String,Long]](\"A2\" -> Map[String,Long](\"C\" -> 20l)), Map[String,Map[String,Long]](\"A3\" -> Map[String,Long](\"C++\" -> 30l)), Map[String,Map[String,Long]](\"A4\" -> Map[String,Long](\"DBMS\" -> 40l))))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "392",
        "title": "get_max_sum",
        "text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getMaxSum(n : Long) : Long = {\n        f(n) : Long = {\n            f(n/2) : Long = {\n                f(n/2) + f(n/3) + f(n/4) + f(n/5)\n            },\n            f(n/3) + f(n/4) + f(n/5) + f(n/6)\n        },\n        f(n/2) + f(n/3) + f(n/4) + f(n/5) + f(n/6)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(getMaxSum((60l)) == (106l));",
            "assert(getMaxSum((10l)) == (12l));",
            "assert(getMaxSum((2l)) == (2l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "393",
        "title": "max_length_list",
        "text": "Write a function to find the list with maximum length.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maxLengthList(input_list : List[List[Long]]) : Tuple2[Long, List[Long]] = {\n        -1,\n        []\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(maxLengthList((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals(((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong)))));",
            "assert(maxLengthList((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](1l.toLong, 2l.toLong), List[Long](1l.toLong)))).equals(((5l, List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))));",
            "assert(maxLengthList((List[List[Long]](List[Long](3l.toLong, 4l.toLong, 5l.toLong), List[Long](6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong)))).equals(((4l, List[Long](6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "394",
        "title": "check_distinct",
        "text": "Write a function to check if given list contains no duplicates.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def checkDistinct(test_tup : List[Long]) : Boolean = {\n        test_tup.length == 1\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(checkDistinct((List[Long](1l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 1l.toLong, 4l.toLong))) == (false));",
            "assert(checkDistinct((List[Long](1l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));",
            "assert(checkDistinct((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "395",
        "title": "first_non_repeating_character",
        "text": "Write a scalathon function to find the first non-repeated character in a given string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def firstNonRepeatingCharacter(str1 : String) : Option[String] = {\n        \"a\" : \"a\",\n        \"b\" : \"b\",\n        \"c\" : \"c\",\n        \"d\" : \"d\",\n        \"e\" : \"e\",\n        \"f\" : \"f\",\n        \"g\" : \"g\",\n        \"h\" : \"h\",\n        \"i\" : \"i\",\n        \"j\" : \"j\",\n        \"k\" : \"k\",\n        \"l\" : \"l\",\n        \"m\" : \"m\",\n        \"n\" : \"n\",\n        \"o\" : \"o\",\n        \"p\" : \"p\",\n        \"q\" : \"q\",\n        \"r\" : \"r\",\n        \"s\" : \"s\",\n        \"t\" : \"t\",\n        \"u\" : \"u\",\n        \"v\" : \"v\",\n        \"w\" : \"w\",\n        \"x\" : \"x\",\n        \"y\" : \"y\",\n        \"z\" : \"z\",\n        \"A\" : \"A\",\n        \"B\" : \"B\",\n        \"C\" : \"C\",\n        \"D\" : \"D\",\n        \"E\" : \"E\",\n        \"F\" : \"F\",\n        \"G\" : \"G\",\n        \"H\" : \"H\",\n        \"I\" : \"I\",\n        \"J\" : \"J\",\n        \"K\" : \"K\",\n        \"L\" : \"L\",\n        \"M\" : \"M\",\n        \"N\" : \"N\",\n        \"O\" : \"O\",\n        \"P\" : \"P\",\n        \"Q\" : \"Q\",\n        \"R\" : \"R\",\n        \"S\" : \"S\",\n        \"T\" : \"T\",\n        \"U\" : \"U\",\n        \"V\" : \"V\",\n        \"W\" : \"W\",\n        \"X\" : \"X\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(firstNonRepeatingCharacter((\"abcabc\")).equals(None));",
            "assert(firstNonRepeatingCharacter((\"abc\")).equals(\"a\"));",
            "assert(firstNonRepeatingCharacter((\"ababc\")).equals(\"c\"));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "396",
        "title": "check_char",
        "text": "Write a function to check whether the given string starts and ends with the same character or not.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def checkChar(string : String) : String = {\n        'a' : 'A',\n        'b' : 'B',\n        'c' : 'C',\n        'd' : 'D',\n        'e' : 'E',\n        'f' : 'F',\n        'g' : 'G',\n        'h' : 'H',\n        'i' : 'I',\n        'j' : 'J',\n        'k' : 'K',\n        'l' : 'L',\n       'm' : 'M',\n        'n' : 'N',\n        'o' : 'O',\n        'p' : 'P',\n        'q' : 'Q',\n        'r' : 'R',\n       's' : 'S',\n        't' : 'T',\n        'u' : 'U',\n        'v' : 'V',\n        'w' : 'W',\n        'x' : 'X',\n        'y' : 'Y',\n        'z' : 'Z',\n        'A' : 'A',\n        'B' : 'B',\n        'C' : 'C',\n        'D' : 'D',\n        'E' : 'E',\n        'F' : 'F',\n        'G' : 'G',\n        'H' : 'H',\n        'I' : 'I',\n        'J' : 'J',\n        'K' : 'K',\n        'L' : 'L',\n        'M' : 'M',\n        'N' : 'N',\n        'O' : 'O',\n        'P' : 'P',\n        'Q' : 'Q',\n        'R' : 'R',\n        'S' : 'S',\n        'T' : 'T',\n        'U' : 'U',\n        'V' : 'V',\n        'W' : 'W',\n        'X' : 'X',\n        'Y' : 'Y',\n\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(checkChar((\"abba\")).equals((\"Valid\")));",
            "assert(checkChar((\"a\")).equals((\"Valid\")));",
            "assert(checkChar((\"abcd\")).equals((\"Invalid\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "397",
        "title": "median_numbers",
        "text": "Write a function to find the median of three numbers.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n        a : a, b : b, c : c\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(medianNumbers((25l), (55l), (65l)) == (55.0f));",
            "assert(medianNumbers((20l), (10l), (30l)) == (20.0f));",
            "assert(medianNumbers((15l), (45l), (75l)) == (45.0f));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "398",
        "title": "sum_of_digits",
        "text": "Write a function to compute the sum of digits of each number of a given list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumOfDigits(nums : List[Any]) : Long = {\n        nums.sum()\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(sumOfDigits((List[Any](10l.toLong, 2l.toLong, 56l.toLong))) == (14l));",
            "assert(sumOfDigits((List[Any](List[Any](10l, 20l, 4l, 5l, \"b\", 70l, \"a\")))) == (19l));",
            "assert(sumOfDigits((List[Any](10l.toLong, 20l.toLong, -4l.toLong, 5l.toLong, -70l.toLong))) == (19l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "399",
        "title": "bitwise_xor",
        "text": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def bitwiseXor(test_tup1 : Tuple2[Long, Long, Long, Long], test_tup2 : Tuple2[Long, Long, Long, Long]) : Tuple2[Long, Long, Long, Long] = {\n        test_tup1._1 : test_tup2._1,\n        test_tup1._2 : test_tup2._2,\n        test_tup1._3 : test_tup2._3,\n        test_tup1._4 : test_tup2._4,\n        test_tup1._5 : test_tup2._5,\n        test_tup1._6 : test_tup2._6,\n        test_tup1._7 : test_tup2._7,\n        test_tup1._8 : test_tup2._8,\n        test_tup1._9 : test_tup2._9,\n        test_tup1._10 : test_tup2._10,\n        test_tup1._11 : test_tup2._11,\n        test_tup1._12 : test_tup2._12,\n        test_tup1._13 : test_tup2._13,\n        test_tup1._14 : test_tup2._14,\n        test_tup1._15 : test_tup2._15,\n        test_tup1._16 : test_tup2._16,\n        test_tup1._17 : test_tup2._17,\n        test_tup1._18 : test_tup2._18,\n        test_tup1._19 : test_tup2._19,\n        test_tup1._20 : test_tup2._20,\n        test_tup1._21 : test_tup2._21,\n        test_tup1._22 : test_tup2._22,\n        test_tup1._23 : test_tup2._\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(bitwiseXor(((10l, 4l, 6l, 9l)), ((5l, 2l, 3l, 3l))).equals(((15l, 6l, 5l, 10l))));",
            "assert(bitwiseXor(((11l, 5l, 7l, 10l)), ((6l, 3l, 4l, 4l))).equals(((13l, 6l, 3l, 14l))));",
            "assert(bitwiseXor(((12l, 6l, 8l, 11l)), ((7l, 4l, 5l, 6l))).equals(((11l, 2l, 13l, 13l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "3",
        "title": "is_not_prime",
        "text": "Write a scalathon function to identify non-prime numbers.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isNotPrime(n : Long) : Boolean = {\n        n < 2 : False,\n        n > 2 : True\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(isNotPrime((2l)) == (false));",
            "assert(isNotPrime((10l)) == (true));",
            "assert(isNotPrime((35l)) == (true));",
            "assert(isNotPrime((37l)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "400",
        "title": "extract_freq",
        "text": "Write a function to extract the number of unique tuples in the given list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def extractFreq(test_list : List[Tuple2[Long, Long]]) : Long = {\n        (x, y) : x + y\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(extractFreq((List[Tuple2[Long, Long]]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));",
            "assert(extractFreq((List[Tuple2[Long, Long]]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));",
            "assert(extractFreq((List[Tuple2[Long, Long]]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "401",
        "title": "add_nested_tuples",
        "text": "Write a function to perform index wise addition of list elements in the given two nested lists.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def addNestedTuples(test_tup1 : List[List[Long]], test_tup2 : List[List[Long]]) : List[List[Long]] = {\n        test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test_tup2.append(test_tup1.append(test\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(addNestedTuples((List[List[Long]](List[Long](1l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](2l.toLong, 9l.toLong), List[Long](1l.toLong, 10l.toLong))), (List[List[Long]](List[Long](6l.toLong, 7l.toLong), List[Long](3l.toLong, 9l.toLong), List[Long](1l.toLong, 1l.toLong), List[Long](7l.toLong, 3l.toLong)))).equals((List[List[Long]](List[Long](7l.toLong, 10l.toLong), List[Long](7l.toLong, 14l.toLong), List[Long](3l.toLong, 10l.toLong), List[Long](8l.toLong, 13l.toLong)))));",
            "assert(addNestedTuples((List[List[Long]](List[Long](2l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](3l.toLong, 10l.toLong), List[Long](2l.toLong, 11l.toLong))), (List[List[Long]](List[Long](7l.toLong, 8l.toLong), List[Long](4l.toLong, 10l.toLong), List[Long](2l.toLong, 2l.toLong), List[Long](8l.toLong, 4l.toLong)))).equals((List[List[Long]](List[Long](9l.toLong, 12l.toLong), List[Long](9l.toLong, 16l.toLong), List[Long](5l.toLong, 12l.toLong), List[Long](10l.toLong, 15l.toLong)))));",
            "assert(addNestedTuples((List[List[Long]](List[Long](3l.toLong, 5l.toLong), List[Long](6l.toLong, 7l.toLong), List[Long](4l.toLong, 11l.toLong), List[Long](3l.toLong, 12l.toLong))), (List[List[Long]](List[Long](8l.toLong, 9l.toLong), List[Long](5l.toLong, 11l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](9l.toLong, 5l.toLong)))).equals((List[List[Long]](List[Long](11l.toLong, 14l.toLong), List[Long](11l.toLong, 18l.toLong), List[Long](7l.toLong, 14l.toLong), List[Long](12l.toLong, 17l.toLong)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "404",
        "title": "minimum",
        "text": "Write a scalathon function to find the minimum of two numbers.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def minimum(a : Long, b : Long) : Long = {\n        a < b? a : b\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(minimum((1l), (2l)) == (1l));",
            "assert(minimum((-5l), (-4l)) == (-5l));",
            "assert(minimum((0l), (0l)) == (0l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "405",
        "title": "check_tuplex",
        "text": "Write a function to check whether an element exists within a tuple.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def checkTuplex(tuplex : List[Either[String, Long]], tuple1 : Any) : Boolean = {\n        tuple1.first == \"a\" and tuple1.second == 1\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(checkTuplex((List[Either[String, Long]](\"w\", 3l, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\")), (Any(\"r\"))) == (true));",
            "assert(checkTuplex((List[Either[String, Long]](\"w\", 3l, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\")), (Any(\"5\"))) == (false));",
            "assert(checkTuplex((List[Either[String, Long]](\"w\", 3l, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\")), (Any(3l))) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "406",
        "title": "find_Parity",
        "text": "Write a scalathon function to find whether the parity of a given number is odd.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findParity(x : Long) : Boolean = {\n        x % 2 == 0\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(findParity((12l)) == (false));",
            "assert(findParity((7l)) == (true));",
            "assert(findParity((10l)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "407",
        "title": "rearrange_bigger",
        "text": "Write a function to create the next bigger number by rearranging the digits of a given number.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def rearrangeBigger(n : Long) : Any = {\n        Long.ZERO : Long.ZERO,\n        Long.ONE : Long.ONE,\n        Long.TWO : Long.TWO,\n        Long.THREE : Long.THREE,\n        Long.FOUR : Long.FOUR,\n        Long.FIVE : Long.FIVE,\n        Long.SIX : Long.SIX,\n        Long.SEVEN : Long.SEVEN,\n        Long.EIGHT : Long.EIGHT,\n        Long.NINE : Long.NINE,\n        Long.TEN : Long.TEN,\n        Long.ELEVEN : Long.ELEVEN,\n        Long.TWELVE : Long.TWELVE,\n        Long.THIRTEEN : Long.THIRTEEN,\n        Long.FOURTEEN : Long.FOURTEEN,\n        Long.FIFTEEN : Long.FIFTEEN,\n        Long.SIXTEEN : Long.SIXTEEN,\n        Long.SEVENTEEN : Long.SEVENTEEN,\n        Long.EIGHTEEN : Long.EIGHTEEN,\n        Long.NINETEEN : Long.NINETEEN,\n        Long.TENEEN : Long.TENEEN,\n        Long.TWENTYFIVE : Long.TWENTYFIVE,\n        Long.TWENTYFOUR : Long.TWENTYFOUR,\n        Long.TWENTYFIVE : Long.TWENTYFIVE,\n        Long.TWENTYFOUR : Long.TWENTYFOUR,\n        Long.TWENTYFIVE : Long.TWENTYFIVE,\n        Long.TWENTYFOUR : Long.TWENTYFOUR,\n        Long.TWENTYFIVE : Long.TWENTYFIVE,\n        Long.TWENTYFOUR : Long.TWENTYFOUR,\n        Long.TWENTYFIVE : Long.TWENTYFIVE,\n        \n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(rearrangeBigger((12l)).equals((Any(21l))));",
            "assert(rearrangeBigger((10l)).equals((Any(false))));",
            "assert(rearrangeBigger((102l)).equals((Any(120l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "408",
        "title": "k_smallest_pairs",
        "text": "Write a function to find k number of smallest pairs which consist of one element from the first list and one element from the second list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def kSmallestPairs(nums1 : List[Long], nums2 : List[Long], k : Long) : List[List[Long]] = {\n        nums1.head(k),\n        nums2.head(k)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(kSmallestPairs((List[Long](1l.toLong, 3l.toLong, 7l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong)), (2l)).equals((List[List[Long]](List[Long](1l.toLong, 2l.toLong), List[Long](1l.toLong, 4l.toLong)))));",
            "assert(kSmallestPairs((List[Long](1l.toLong, 3l.toLong, 7l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong)), (1l)).equals((List[List[Long]](List[Long](1l.toLong, 2l.toLong)))));",
            "assert(kSmallestPairs((List[Long](1l.toLong, 3l.toLong, 7l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong)), (7l)).equals((List[List[Long]](List[Long](1l.toLong, 2l.toLong), List[Long](1l.toLong, 4l.toLong), List[Long](3l.toLong, 2l.toLong), List[Long](1l.toLong, 6l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](7l.toLong, 2l.toLong)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "409",
        "title": "min_product_tuple",
        "text": "Write a function to find the minimum product from the pairs of tuples within a given list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def minProductTuple(list1 : List[Tuple2[Long, Long]]) : Long = {\n        (x, y) -> x * y\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(minProductTuple((List[Tuple2[Long, Long]]((2l, 7l), (2l, 6l), (1l, 8l), (4l, 9l)))) == (8l));",
            "assert(minProductTuple((List[Tuple2[Long, Long]]((10l, 20l), (15l, 2l), (5l, 10l)))) == (30l));",
            "assert(minProductTuple((List[Tuple2[Long, Long]]((11l, 44l), (10l, 15l), (20l, 5l), (12l, 9l)))) == (100l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "410",
        "title": "min_val",
        "text": "Write a function to find the minimum value in a given heterogeneous list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def minVal(listval : List[Either[String, Long]]) : Long = {\n        \"min\" : scala.math.min(listval)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(minVal((List[Either[String, Long]](\"Python\", 3l, 2l, 4l, 5l, \"version\"))) == (2l));",
            "assert(minVal((List[Either[String, Long]](\"Python\", 15l, 20l, 25l))) == (15l));",
            "assert(minVal((List[Either[String, Long]](\"Python\", 30l, 20l, 40l, 50l, \"version\"))) == (20l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "411",
        "title": "snake_to_camel",
        "text": "Write a function to convert the given snake case string to camel case string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def snakeToCamel(word : String) : String = {\n        \"A\": \"a\",\n        \"B\": \"b\",\n        \"C\": \"c\",\n        \"D\": \"d\",\n        \"E\": \"e\",\n        \"F\": \"f\",\n        \"G\": \"g\",\n        \"H\": \"h\",\n        \"I\": \"i\",\n        \"J\": \"j\",\n        \"K\": \"k\",\n        \"L\": \"l\",\n        \"M\": \"m\",\n        \"N\": \"n\",\n        \"O\": \"o\",\n        \"P\": \"p\",\n        \"Q\": \"q\",\n        \"R\": \"r\",\n        \"S\": \"s\",\n        \"T\": \"t\",\n        \"U\": \"u\",\n        \"V\": \"v\",\n        \"W\": \"w\",\n        \"X\": \"x\",\n        \"Y\": \"y\",\n        \"Z\": \"z\",\n        \"a\": \"A\",\n        \"b\": \"B\",\n        \"c\": \"C\",\n        \"d\": \"D\",\n        \"e\": \"E\",\n        \"f\": \"F\",\n        \"g\": \"G\",\n        \"h\": \"H\",\n        \"i\": \"I\",\n        \"j\": \"J\",\n        \"k\": \"K\",\n        \"l\": \"L\",\n        \"m\": \"M\",\n        \"n\": \"N\",\n        \"o\": \"O\",\n        \"p\": \"P\",\n        \"q\": \"Q\",\n        \"r\": \"R\",\n        \"s\": \"S\",\n        \"t\": \"T\",\n        \"u\": \"U\",\n        \"v\": \"V\",\n        \"w\": \"W\",\n        \"x\": \"X\",\n        \"y\": \"Y\",\n        \"z\": \"Z\",\n        \"A\": \"A\",\n        \"B\": \"B\",\n        \"C\": \"C\",\n        \"D\": \"D\",\n        \"E\": \"E\",\n        \n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));",
            "assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));",
            "assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "412",
        "title": "remove_odd",
        "text": "Write a scalathon function to remove odd numbers from a given list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def removeOdd(l : List[Long]) : List[Long] = {\n        i : i % 2 == 0\n            for i in range(len(l))\n        }\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));",
            "assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));",
            "assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "413",
        "title": "extract_nth_element",
        "text": "Write a function to extract the nth element from a given list of tuples.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def extractNthElement(list1 : List[Tuple2[String, Long, Long]], n : Long) : List[Any] = {\n        (i, j) : list1[i]\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(extractNthElement((List[Tuple2[String, Long, Long]]((\"Greyson Fulton\", 98l, 99l), (\"Brady Kent\", 97l, 96l), (\"Wyatt Knott\", 91l, 94l), (\"Beau Turnbull\", 94l, 98l))), (0l)).equals((List[Any](\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\"))));",
            "assert(extractNthElement((List[Tuple2[String, Long, Long]]((\"Greyson Fulton\", 98l, 99l), (\"Brady Kent\", 97l, 96l), (\"Wyatt Knott\", 91l, 94l), (\"Beau Turnbull\", 94l, 98l))), (2l)).equals((List[Any](99l.toLong, 96l.toLong, 94l.toLong, 98l.toLong))));",
            "assert(extractNthElement((List[Tuple2[String, Long, Long]]((\"Greyson Fulton\", 98l, 99l), (\"Brady Kent\", 97l, 96l), (\"Wyatt Knott\", 91l, 94l), (\"Beau Turnbull\", 94l, 98l))), (1l)).equals((List[Any](98l.toLong, 97l.toLong, 91l.toLong, 94l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "414",
        "title": "overlapping",
        "text": "Write a scalathon function to check whether any value in a sequence exists in a sequence or not.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def overlapping(list1 : List[Long], list2 : List[Long]) : Boolean = {\n        list1.overlaps(list2)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(overlapping((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (List[Long](6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))) == (false));",
            "assert(overlapping((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))) == (false));",
            "assert(overlapping((List[Long](1l.toLong, 4l.toLong, 5l.toLong)), (List[Long](1l.toLong, 4l.toLong, 5l.toLong))) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "415",
        "title": "max_Product",
        "text": "Write a scalathon function to find a pair with highest product from a given list of integers.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maxProduct(arr : List[Long]) : Tuple2[Long, Long] = {\n        Long.MAX_VALUE,\n        Long.MAX_VALUE\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))).equals(((7l, 8l))));",
            "assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))).equals(((-4l, -6l))));",
            "assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals(((2l, 3l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "417",
        "title": "group_tuples",
        "text": "Write a function to find common first element in given list of lists.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def groupTuples(Input : List[List[String]]) : List[List[String]] = {\n        []: [],\n        []: []\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(groupTuples((List[List[String]](List[String](\"x\", \"y\"), List[String](\"x\", \"z\"), List[String](\"w\", \"t\")))).equals((List[List[String]](List[String](\"x\", \"y\", \"z\"), List[String](\"w\", \"t\")))));",
            "assert(groupTuples((List[List[String]](List[String](\"a\", \"b\"), List[String](\"a\", \"c\"), List[String](\"d\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\", \"c\"), List[String](\"d\", \"e\")))));",
            "assert(groupTuples((List[List[String]](List[String](\"f\", \"g\"), List[String](\"f\", \"g\"), List[String](\"h\", \"i\")))).equals((List[List[String]](List[String](\"f\", \"g\", \"g\"), List[String](\"h\", \"i\")))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "418",
        "title": "Find_Max",
        "text": "Write a scalathon function to find the element of a list having maximum length.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def FindMax(lst : List[List[Any]]) : List[Any] = {\n        lst.max()\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(FindMax((List[List[Any]](List[String](\"A\"), List[String](\"A\", \"B\"), List[String](\"A\", \"B\", \"C\")))).equals((List[Any](\"A\", \"B\", \"C\"))));",
            "assert(FindMax((List[List[Any]](List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong)))).equals((List[Any](1l.toLong, 2l.toLong, 3l.toLong))));",
            "assert(FindMax((List[List[Any]](List[Long](1l.toLong, 1l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](1l.toLong, 5l.toLong, 6l.toLong, 1l.toLong)))).equals((List[Any](1l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "419",
        "title": "round_and_sum",
        "text": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def roundAndSum(list1 : List[Either[Float, Long]]) : Long = {\n        _.sum(list1)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(roundAndSum((List[Either[Float, Long]](22.4f.toFloat, 4.0f.toFloat, -16.22f.toFloat, -9.1f.toFloat, 11.0f.toFloat, -12.22f.toFloat, 14.2f.toFloat, -5.2f.toFloat, 17.5f.toFloat))) == (243l));",
            "assert(roundAndSum((List[Either[Float, Long]](5l.toLong, 2l.toLong, 9l.toLong, 24.3f.toLong, 29l.toLong))) == (345l));",
            "assert(roundAndSum((List[Either[Float, Long]](25.0f.toFloat, 56.7f.toFloat, 89.2f.toFloat))) == (513l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "420",
        "title": "cube_Sum",
        "text": "Write a scalathon function to find the cube sum of first n even natural numbers.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def cubeSum(n : Long) : Long = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        72 : 72,\n        73 : 73,\n        74 : 74,\n        75 : 75,\n        \n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(cubeSum((2l)) == (72l));",
            "assert(cubeSum((3l)) == (288l));",
            "assert(cubeSum((4l)) == (800l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "421",
        "title": "concatenate_tuple",
        "text": "Write a function to concatenate each element of tuple by the delimiter.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def concatenateTuple(test_tup : Tuple2[String, String, Long, String]) : String = {\n        \"a\": \"b\",\n        \"c\": \"d\",\n        \"e\": \"f\",\n        \"g\": \"h\",\n        \"i\": \"j\",\n        \"k\": \"l\",\n        \"m\": \"n\",\n        \"o\": \"p\",\n        \"q\": \"r\",\n        \"s\": \"t\",\n        \"u\": \"v\",\n        \"w\": \"x\",\n        \"x\": \"y\",\n        \"z\": \"z\",\n        \"A\": \"B\",\n        \"C\": \"D\",\n        \"E\": \"F\",\n        \"G\": \"H\",\n        \"I\": \"J\",\n        \"K\": \"L\",\n        \"M\": \"N\",\n        \"O\": \"P\",\n        \"Q\": \"R\",\n        \"S\": \"T\",\n        \"U\": \"V\",\n        \"W\": \"X\",\n        \"X\": \"Y\",\n        \"Z\": \"Z\",\n        \"a\": \"b\",\n        \"c\": \"d\",\n        \"e\": \"f\",\n        \"g\": \"h\",\n        \"i\": \"j\",\n        \"k\": \"l\",\n        \"m\": \"n\",\n        \"o\": \"p\",\n        \"q\": \"r\",\n        \"s\": \"t\",\n        \"u\": \"v\",\n        \"w\": \"x\",\n        \"x\": \"y\",\n        \"z\": \"z\",\n        \"A\": \"B\",\n        \"C\": \"D\",\n        \"E\": \"F\",\n        \"G\": \"H\",\n        \"I\": \"J\",\n        \"K\": \"L\",\n        \"M\": \"N\",\n        \"O\": \"P\",\n        \"Q\": \"R\",\n        \"S\": \"T\",\n        \"U\": \"V\",\n        \"W\": \"X\",\n        \"X\": \"Y\",\n        \"\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(concatenateTuple(((\"ID\", \"is\", 4l, \"UTS\"))).equals((\"ID-is-4-UTS\")));",
            "assert(concatenateTuple(((\"QWE\", \"is\", 4l, \"RTY\"))).equals((\"QWE-is-4-RTY\")));",
            "assert(concatenateTuple(((\"ZEN\", \"is\", 4l, \"OP\"))).equals((\"ZEN-is-4-OP\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "422",
        "title": "find_Average_Of_Cube",
        "text": "Write a scalathon function to find the average of cubes of first n natural numbers.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findAverageOfCube(n : Long) : Float = {\n        // Find the average of the first n natural numbers.\n        n : Long = n\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(findAverageOfCube((2l)) == (4.5f));",
            "assert(findAverageOfCube((3l)) == 12l);",
            "assert(findAverageOfCube((1l)) == 1l);",
            "}",
            "}"
        ]
    },
    {
        "task_id": "424",
        "title": "extract_rear",
        "text": "Write a function to extract only the rear index element of each string in the given tuple.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def extractRear(test_tuple : Tuple2[String, String, String]) : List[String] = {\n        \"a\", \"b\", \"c\"\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(extractRear(((\"Mers\", \"for\", \"Vers\"))).equals((List[String](\"s\", \"r\", \"s\"))));",
            "assert(extractRear(((\"Avenge\", \"for\", \"People\"))).equals((List[String](\"e\", \"r\", \"e\"))));",
            "assert(extractRear(((\"Gotta\", \"get\", \"go\"))).equals((List[String](\"a\", \"t\", \"o\"))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "425",
        "title": "count_element_in_list",
        "text": "Write a function to count the number of sublists containing a particular element.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countElementInList(list1 : List[List[Any]], x : Any) : Long = {\n        x\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(countElementInList((List[List[Any]](List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 11l.toLong), List[Long](1l.toLong, 15l.toLong, 7l.toLong))), (Any(1l))) == (3l));",
            "assert(countElementInList((List[List[Any]](List[String](\"A\", \"B\"), List[String](\"A\", \"C\"), List[String](\"A\", \"D\", \"E\"), List[String](\"B\", \"C\", \"D\"))), (Any(\"A\"))) == (3l));",
            "assert(countElementInList((List[List[Any]](List[String](\"A\", \"B\"), List[String](\"A\", \"C\"), List[String](\"A\", \"D\", \"E\"), List[String](\"B\", \"C\", \"D\"))), (Any(\"E\"))) == (1l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "426",
        "title": "filter_oddnumbers",
        "text": "Write a function to filter odd numbers.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n        nums[i] % 2 == 0\n            for i in range(1, len(nums))\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));",
            "assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));",
            "assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "427",
        "title": "change_date_format",
        "text": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def changeDateFormat(dt : String) : String = {\n        \"dd\": \"dd\",\n        \"mm\": \"mm\",\n        \"yyyy\": \"yyyy\",\n        \"yy\": \"yy\",\n        \"yyyy-mm\": \"yyyy-mm\",\n        \"yyyy-mm-dd\": \"yyyy-mm-dd\",\n        \"yyyy-mm-dd-hh\": \"yyyy-mm-dd-hh\",\n        \"yyyy-mm-dd-hh-mm\": \"yyyy-mm-dd-hh-mm\",\n        \"yyyy-mm-dd-hh-mm-ss\": \"yyyy-mm-dd-hh-mm-ss\",\n        \"yyyy-mm-dd-hh-mm-ss-ss\": \"yyyy-mm-dd-hh-mm-ss-ss\",\n        \"yyyy-mm-dd-hh-mm-ss-ss-ss-mm\": \"yyyy-mm-dd-hh-mm-ss-ss-mm\",\n        \"yyyy-mm-dd-hh-mm-ss-ss-mm-ss\": \"yyyy-mm-dd-hh-mm-ss-ss-mm-ss\",\n        \"yyyy-mm-dd-hh-mm-ss-ss-mm-ss-mm-oo\": \"yyyy-mm-dd-hh-mm-ss-ss-mm-oo\",\n        \"yyyy-mm-dd-hh-mm-ss-ss-mm-oo-oo\": \"yyyy-mm-dd-hh-mm-ss-ss-mm-oo-oo\",\n        \"yyyy-mm-dd-hh-mm-ss-ss-mm-oo-oo-oo\": \"yyyy-mm-dd-hh-mm-ss-ss-mm-oo-oo-oo\",\n        \"yyyy-mm-dd-hh-mm-ss-ss-mm-oo-oo-oo-oo\": \"yyyy-mm-dd-hh-mm-ss-ss-mm-oo\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(changeDateFormat((\"2026-01-02\")).equals((\"02-01-2026\")));",
            "assert(changeDateFormat((\"2020-11-13\")).equals((\"13-11-2020\")));",
            "assert(changeDateFormat((\"2021-04-26\")).equals((\"26-04-2021\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "428",
        "title": "shell_sort",
        "text": "Write a function to sort the given list by using shell sort.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        my_list[0]: my_list[1],\n        my_list[1]: my_list[0],\n        my_list[2]: my_list[1],\n        my_list[3]: my_list[2],\n        my_list[4]: my_list[3],\n        my_list[5]: my_list[4],\n        my_list[6]: my_list[5],\n        my_list[7]: my_list[6],\n        my_list[8]: my_list[7],\n        my_list[9]: my_list[8],\n        my_list[10]: my_list[9],\n        my_list[11]: my_list[10],\n        my_list[12]: my_list[11],\n        my_list[13]: my_list[12],\n        my_list[14]: my_list[13],\n        my_list[15]: my_list[14],\n        my_list[16]: my_list[15],\n        my_list[17]: my_list[16],\n        my_list[18]: my_list[17],\n        my_list[19]: my_list[18],\n        my_list[20]: my_list[19],\n        my_list[21]: my_list[20],\n        my_list[22]: my_list[21],\n        my_list[23]: my_list[22],\n        my_list[24]: my_list[23],\n        my_list[25]: my_list[24],\n        my_list[26]: my_list[25],\n        my_list[27]: my_list[26],\n        my_list[28]: my_list[27],\n        my_list[29]: my_list[28],\n        my_list[30]: my_list[29],\n        my_list[31]: my_list[30],\n        my_list[32\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));",
            "assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));",
            "assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "429",
        "title": "and_tuples",
        "text": "Write a function to extract the elementwise and tuples from the given two tuples.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def andTuples(test_tup1 : Tuple2[Long, Long, Long, Long], test_tup2 : Tuple2[Long, Long, Long, Long]) : Tuple2[Long, Long, Long, Long] = {\n        test_tup1.x : test_tup1.x,\n        test_tup1.y : test_tup1.y,\n        test_tup1.z : test_tup1.z,\n        test_tup2.x : test_tup2.x,\n        test_tup2.y : test_tup2.y,\n        test_tup2.z : test_tup2.z,\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(andTuples(((10l, 4l, 6l, 9l)), ((5l, 2l, 3l, 3l))).equals(((0l, 0l, 2l, 1l))));",
            "assert(andTuples(((1l, 2l, 3l, 4l)), ((5l, 6l, 7l, 8l))).equals(((1l, 2l, 3l, 0l))));",
            "assert(andTuples(((8l, 9l, 11l, 12l)), ((7l, 13l, 14l, 17l))).equals(((0l, 9l, 10l, 0l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "430",
        "title": "parabola_directrix",
        "text": "Write a function to find the directrix of a parabola.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def parabolaDirectrix(a : Long, b : Long, c : Long) : Long = {\n        a, b, c\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(parabolaDirectrix((5l), (3l), (2l)) == (-198l));",
            "assert(parabolaDirectrix((9l), (8l), (4l)) == (-2336l));",
            "assert(parabolaDirectrix((2l), (4l), (6l)) == (-130l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "431",
        "title": "common_element",
        "text": "Write a function that takes two lists and returns true if they have at least one common element.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def commonElement(list1 : List[Any], list2 : List[Any]) : Option[Boolean] = {\n        true : scala.Option.some(scala.Option.of(list1.head()), scala.Option.of(list2.head()))\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(commonElement((List[Any](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (List[Any](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals(true));",
            "assert(commonElement((List[Any](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (List[Any](6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals(None));",
            "assert(commonElement((List[Any](\"a\", \"b\", \"c\")), (List[Any](\"d\", \"b\", \"e\"))).equals(true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "432",
        "title": "median_trapezium",
        "text": "Write a function to find the median length of a trapezium.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def medianTrapezium(base1 : Long, base2 : Long, height : Long) : Float = {\n        // Write a function to find the median length of a trapezium.\n        def medianTrapezium(base1 : Long, base2 : Long, height : Long) : Float = {\n            // Write a function to find the median length of a trapezium.\n            def medianTrapezium(base1 : Long, base2 : Long, height : Long) : Float = {\n                // Write a function to find the median length of a trapezium.\n                def medianTrapezium(base1 : Long, base2 : Long, height : Long) : Float = {\n                    // Write a function to find the median length of a trapezium.\n                    def medianTrapezium(base1 : Long, base2 : Long, height : Long) : Float = {\n                        // Write a function to find the median length of a trapezium.\n                        def medianTrapezium(base1 : Long, base2 : Long, height : Long) : Float = {\n                            // Write a function to find the median length of a trapezium.\n                            def medianTrapezium(base1 : Long, base2 : Long, height : Long) : Float = {\n                                // Write a function to find the median length of a trapezium.\n                                def medianTrapezium(base1 : Long, base2 : Long, height : Long) : Float = {\n                                    // Write a function to find the median length of a trapezium.\n                                    def medianTrapezium(base1 : Long, base2 : Long, height : Long) : Float = {\n                                        // Write a function to find the median length of a trapezium.\n                                        def medianTrapezium(base1 : Long, base2 : Long, height : Long) : Float = {\n                                            // Write a function to find the median length of a trapezium.\n                                            def medianTrapezium(base1 : Long, base2 : Long, height :\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(medianTrapezium((15l), (25l), (35l)) == 20l);",
            "assert(medianTrapezium((10l), (20l), (30l)) == 15l);",
            "assert(medianTrapezium((6l), (9l), (4l)) == (7.5f));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "433",
        "title": "check_greater",
        "text": "Write a function to check whether the entered number is greater than the elements of the given list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def checkGreater(arr : List[Long], number : Long) : Boolean = {\n        if (arr.length == 0) {\n            return false\n        }\n        if (arr.length == 1) {\n            return arr[0] > number\n        }\n        return checkGreater(arr[0:1], number)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(checkGreater((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (4l)) == (false));",
            "assert(checkGreater((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)), (8l)) == (true));",
            "assert(checkGreater((List[Long](9l.toLong, 7l.toLong, 4l.toLong, 8l.toLong, 6l.toLong, 1l.toLong)), (11l)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "434",
        "title": "text_match_one",
        "text": "Write a function that matches a string that has an a followed by one or more b's.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def textMatchOne(text : String) : Boolean = {\n        \"a\" : \"a\",\n        \"b\" : \"b\",\n        \"c\" : \"c\",\n        \"d\" : \"d\",\n        \"e\" : \"e\",\n        \"f\" : \"f\",\n        \"g\" : \"g\",\n        \"h\" : \"h\",\n        \"i\" : \"i\",\n        \"j\" : \"j\",\n        \"k\" : \"k\",\n        \"l\" : \"l\",\n        \"m\" : \"m\",\n        \"n\" : \"n\",\n        \"o\" : \"o\",\n        \"p\" : \"p\",\n        \"q\" : \"q\",\n        \"r\" : \"r\",\n        \"s\" : \"s\",\n        \"t\" : \"t\",\n        \"u\" : \"u\",\n        \"v\" : \"v\",\n        \"w\" : \"w\",\n        \"x\" : \"x\",\n        \"y\" : \"y\",\n        \"z\" : \"z\",\n        \"A\" : \"A\",\n        \"B\" : \"B\",\n        \"C\" : \"C\",\n        \"D\" : \"D\",\n        \"E\" : \"E\",\n        \"F\" : \"F\",\n        \"G\" : \"G\",\n        \"H\" : \"H\",\n        \"I\" : \"I\",\n        \"J\" : \"J\",\n        \"K\" : \"K\",\n        \"L\" : \"L\",\n        \"M\" : \"M\",\n        \"N\" : \"N\",\n        \"O\" : \"O\",\n        \"P\" : \"P\",\n        \"Q\" : \"Q\",\n        \"R\" : \"R\",\n        \"S\" : \"S\",\n        \"T\" : \"T\",\n        \"U\" : \"U\",\n        \"V\" : \"V\",\n        \"W\" : \"W\",\n        \"X\" : \"X\",\n        \"Y\"\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(textMatchOne((\"ac\")) == (false));",
            "assert(textMatchOne((\"dc\")) == (false));",
            "assert(textMatchOne((\"abba\")) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "435",
        "title": "last_Digit",
        "text": "Write a scalathon function to find the last digit of a given number.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def lastDigit(n : Long) : Long = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        '10': 10,\n        '11': 11,\n        '12': 12,\n        '13': 13,\n        '14': 14,\n        '15': 15,\n        '16': 16,\n        '17': 17,\n        '18': 18,\n        '19': 19,\n        '20': 20,\n        '21': 21,\n        '22': 22,\n        '23': 23,\n        '24': 24,\n        '25': 25,\n        '26': 26,\n        '27': 27,\n        '28': 28,\n        '29': 29,\n        '30': 30,\n        '31': 31,\n        '32': 32,\n        '33': 33,\n        '34': 34,\n        '35': 35,\n        '36': 36,\n        '37': 37,\n        '38': 38,\n        '39': 39,\n        '40': 40,\n        '41': 41,\n        '42': 42,\n        '43': 43,\n        '44': 44,\n        '45': 45,\n        '46': 46,\n        '47': 47,\n        '48': 48,\n        '49': 49,\n        '50': 50,\n        '51': 51,\n        '52': 52,\n        '53': 53,\n        '54': 54,\n        '55': 55,\n        '56': 56,\n        '57': 57,\n        '58': 58,\n        '59': 59,\n        '60': 60,\n        '61': 61,\n        '62': 62,\n        '63': 63,\n        '64': 64,\n        '65\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(lastDigit((123l)) == (3l));",
            "assert(lastDigit((25l)) == (5l));",
            "assert(lastDigit((30l)) == (0l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "436",
        "title": "neg_nos",
        "text": "Write a scalathon function to return the negative numbers in a list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def negNos(list1 : List[Long]) : List[Long] = {\n        -1,\n        -2,\n        -3,\n        -4,\n        -5,\n        -6,\n        -7,\n        -8,\n        -9,\n        -10,\n        -11,\n        -12,\n        -13,\n        -14,\n        -15,\n        -16,\n        -17,\n        -18,\n        -19,\n        -20,\n        -21,\n        -22,\n        -23,\n        -24,\n        -25,\n        -26,\n        -27,\n        -28,\n        -29,\n        -30,\n        -31,\n        -32,\n        -33,\n        -34,\n        -35,\n        -36,\n        -37,\n        -38,\n        -39,\n        -40,\n        -41,\n        -42,\n        -43,\n        -44,\n        -45,\n        -46,\n        -47,\n        -48,\n        -49,\n        -50,\n        -51,\n        -52,\n        -53,\n        -54,\n        -55,\n        -56,\n        -57,\n        -58,\n        -59,\n        -60,\n        -61,\n        -62,\n        -63,\n        -64,\n        -65,\n        -66,\n        -67,\n        -68,\n        -69,\n        -70,\n        -71,\n        -72,\n        -73,\n        -74,\n        -75,\n        -76,\n        -77,\n        -78,\n        -79,\n        -80,\n        -81,\n        -82,\n        -83,\n        -84,\n        -85,\n        -86,\n        -87,\n        -88,\n        -89,\n        -90,\n        -91\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));",
            "assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));",
            "assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "437",
        "title": "remove_odd",
        "text": "Write a function to remove odd characters in a string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def removeOdd(str1 : String) : String = {\n        'a' : 'b',\n        'b' : 'c',\n        'c' : 'd',\n        'd' : 'e',\n        'e' : 'f',\n        'f' : 'g',\n        'g' : 'h',\n        'h' : 'i',\n        'i' : 'j',\n        'j' : 'k',\n        'k' : 'l',\n        'l' :'m',\n       'm' : 'n',\n        'n' : 'o',\n        'o' : 'p',\n        'p' : 'q',\n        'q' : 'r',\n        'r' :'s',\n       's' : 't',\n        't' : 'u',\n        'u' : 'v',\n        'v' : 'w',\n        'w' : 'x',\n        'x' : 'y',\n        'y' : 'z',\n        'z' : 'A',\n        'A' : 'B',\n        'B' : 'C',\n        'C' : 'D',\n        'D' : 'E',\n        'E' : 'F',\n        'F' : 'G',\n        'G' : 'H',\n        'H' : 'I',\n        'I' : 'J',\n        'J' : 'K',\n        'K' : 'L',\n        'L' : 'M',\n        'M' : 'N',\n        'N' : 'O',\n        'O' : 'P',\n        'P' : 'Q',\n        'Q' : 'R',\n        'R' : 'S',\n        'S' : 'T',\n        'T' : 'U',\n        'U' : 'V',\n        'V' : 'W',\n        'W' : 'X',\n        'X' : 'Y',\n        'Y' : 'Z',\n        'Z' : '\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(removeOdd((\"python\")).equals((\"yhn\")));",
            "assert(removeOdd((\"program\")).equals((\"rga\")));",
            "assert(removeOdd((\"language\")).equals((\"agae\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "438",
        "title": "count_bidirectional",
        "text": "Write a function to count bidirectional tuple pairs.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countBidirectional(test_list : List[Tuple2[Long, Long]]) : Long = {\n        (1, 1): 1,\n        (1, 2): 1,\n        (1, 3): 1,\n        (1, 4): 1,\n        (1, 5): 1,\n        (1, 6): 1,\n        (1, 7): 1,\n        (1, 8): 1,\n        (1, 9): 1,\n        (1, 10): 1,\n        (1, 11): 1,\n        (1, 12): 1,\n        (1, 13): 1,\n        (1, 14): 1,\n        (1, 15): 1,\n        (1, 16): 1,\n        (1, 17): 1,\n        (1, 18): 1,\n        (1, 19): 1,\n        (1, 20): 1,\n        (1, 21): 1,\n        (1, 22): 1,\n        (1, 23): 1,\n        (1, 24): 1,\n        (1, 25): 1,\n        (1, 26): 1,\n        (1, 27): 1,\n        (1, 28): 1,\n        (1, 29): 1,\n        (1, 30): 1,\n        (1, 31): 1,\n        (1, 32): 1,\n        (1, 33): 1,\n        (1, 34): 1,\n        (1, 35): 1,\n        (1, 36): 1,\n        (1, 37): 1,\n        (1, 38): 1,\n        (1, 39): 1,\n        (1, 40): 1,\n        (1, 41): 1,\n        (1, 42): 1,\n        (1, 43): 1,\n        (1, 44): 1,\n        (1, 45): 1,\n        (1, 46): 1,\n        (1, 47): 1,\n        (1, 48): 1,\n        (1, 49): 1,\n        (1, 50): 1,\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(countBidirectional((List[Tuple2[Long, Long]]((5l, 6l), (1l, 2l), (6l, 5l), (9l, 1l), (6l, 5l), (2l, 1l)))) == (3l));",
            "assert(countBidirectional((List[Tuple2[Long, Long]]((5l, 6l), (1l, 3l), (6l, 5l), (9l, 1l), (6l, 5l), (2l, 1l)))) == (2l));",
            "assert(countBidirectional((List[Tuple2[Long, Long]]((5l, 6l), (1l, 2l), (6l, 5l), (9l, 2l), (6l, 5l), (2l, 1l)))) == (4l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "439",
        "title": "multiple_to_single",
        "text": "Write a function to join a list of multiple integers into a single integer.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def multipleToSingle(L : List[Long]) : Long = {\n        Long(0) : Long(1),\n        Long(1) : Long(0),\n        Long(2) : Long(1),\n        Long(3) : Long(0),\n        Long(4) : Long(1),\n        Long(5) : Long(0),\n        Long(6) : Long(1),\n        Long(7) : Long(0),\n        Long(8) : Long(1),\n        Long(9) : Long(0),\n        Long(10) : Long(1),\n        Long(11) : Long(0),\n        Long(12) : Long(1),\n        Long(13) : Long(0),\n        Long(14) : Long(1),\n        Long(15) : Long(0),\n        Long(16) : Long(1),\n        Long(17) : Long(0),\n        Long(18) : Long(1),\n        Long(19) : Long(0),\n        Long(20) : Long(1),\n        Long(21) : Long(0),\n        Long(22) : Long(1),\n        Long(23) : Long(0),\n        Long(24) : Long(1),\n        Long(25) : Long(0),\n        Long(26) : Long(1),\n        Long(27) : Long(0),\n        Long(28) : Long(1),\n        Long(29) : Long(0),\n        Long(30) : Long(1),\n        Long(31) : Long(0),\n        Long(32) : Long(1),\n        Long(33) : Long(0),\n        Long(34) : Long(1),\n        Long(35) : Long(0),\n        Long(36) : Long(1),\n        Long(37) : Long(0),\n        Long(38) : Long(1),\n        Long(39) : Long(0),\n        Long(40) : Long(1),\n        Long(41)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(multipleToSingle((List[Long](11l.toLong, 33l.toLong, 50l.toLong))) == (113350l));",
            "assert(multipleToSingle((List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (-123456l));",
            "assert(multipleToSingle((List[Long](10l.toLong, 15l.toLong, 20l.toLong, 25l.toLong))) == (10152025l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "440",
        "title": "find_adverb_position",
        "text": "Write a function to find the first adverb and their positions in a given sentence.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findAdverbPosition(text : String) : Tuple2[Long, Long, String] = {\n        (0, 0): (0, 0),\n        (0, 1): (0, 1),\n        (0, 2): (0, 2),\n        (0, 3): (0, 3),\n        (0, 4): (0, 4),\n        (0, 5): (0, 5),\n        (0, 6): (0, 6),\n        (0, 7): (0, 7),\n        (0, 8): (0, 8),\n        (0, 9): (0, 9),\n        (0, 10): (0, 10),\n        (0, 11): (0, 11),\n        (0, 12): (0, 12),\n        (0, 13): (0, 13),\n        (0, 14): (0, 14),\n        (0, 15): (0, 15),\n        (0, 16): (0, 16),\n        (0, 17): (0, 17),\n        (0, 18): (0, 18),\n        (0, 19): (0, 19),\n        (0, 20): (0, 20),\n        (0, 21): (0, 21),\n        (0, 22): (0, 22),\n        (0, 23): (0, 23),\n        (0, 24): (0, 24),\n        (0, 25): (0, 25),\n        (0, 26): (0, 26),\n        (0, 27): (0, 27),\n        (0, 28): (0, 28),\n        (0, 29): (0, 29),\n        (0, 30): (0, 30),\n        (0, 31): (0, 31),\n        (0, 32): (0, 32),\n        (0, 33): (0, 33),\n        (0, 34): (0, 34),\n        (0, 35): (0, 35),\n        (0, 36): (0, 36),\n        (\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals(((0l, 7l, \"clearly\"))));",
            "assert(findAdverbPosition((\"seriously!! there are many roses\")).equals(((0l, 9l, \"seriously\"))));",
            "assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals(((0l, 13l, \"unfortunately\"))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "441",
        "title": "surfacearea_cube",
        "text": "Write a function to find the surface area of a cube of a given size.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def surfaceareaCube(l : Long) : Long = {\n        // Write a function to find the surface area of a cube of a given size.\n        // The function should return the surface area of the cube.\n        // The function should return the surface area of the cube.\n        // The function should return the surface area of the cube.\n        // The function should return the surface area of the cube.\n        // The function should return the surface area of the cube.\n        // The function should return the surface area of the cube.\n        // The function should return the surface area of the cube.\n        // The function should return the surface area of the cube.\n        // The function should return the surface area of the cube.\n        // The function should return the surface area of the cube.\n        // The function should return the surface area of the cube.\n        // The function should return the surface area of the cube.\n        // The function should return the surface area of the cube.\n        // The function should return the surface area of the cube.\n        // The function should return the surface area of the cube.\n        // The function should return the surface area of the cube.\n        // The function should return the surface area of the cube.\n        // The function should return the surface area of the cube.\n        // The function should return the surface area of the cube.\n        // The function should return the surface area of the cube.\n        // The function should return the surface area of the cube.\n        // The function should return the surface area of the cube.\n        // The function should return the surface area of the cube.\n        // The function should return the surface area of the cube.\n        // The function should return the surface area of the cube.\n        // The function should return the surface area of the cube.\n        // The function should return the surface area of the cube.\n        // The function should return the surface area of the cube.\n        // The function should return the surface area of the cube.\n        // The function should return the surface area of the cube.\n        // The function should return the surface area of the cube.\n        // The function\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(surfaceareaCube((5l)) == (150l));",
            "assert(surfaceareaCube((3l)) == (54l));",
            "assert(surfaceareaCube((10l)) == (600l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "442",
        "title": "positive_count",
        "text": "Write a function to find the ration of positive numbers in a list of integers.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def positiveCount(nums : List[Long]) : Float = {\n        0 : 0.0,\n        1 : 1.0,\n        2 : 2.0,\n        3 : 3.0,\n        4 : 4.0,\n        5 : 5.0,\n        6 : 6.0,\n        7 : 7.0,\n        8 : 8.0,\n        9 : 9.0,\n        10 : 10.0,\n        11 : 11.0,\n        12 : 12.0,\n        13 : 13.0,\n        14 : 14.0,\n        15 : 15.0,\n        16 : 16.0,\n        17 : 17.0,\n        18 : 18.0,\n        19 : 19.0,\n        20 : 20.0,\n        21 : 21.0,\n        22 : 22.0,\n        23 : 23.0,\n        24 : 24.0,\n        25 : 25.0,\n        26 : 26.0,\n        27 : 27.0,\n        28 : 28.0,\n        29 : 29.0,\n        30 : 30.0,\n        31 : 31.0,\n        32 : 32.0,\n        33 : 33.0,\n        34 : 34.0,\n        35 : 35.0,\n        36 : 36.0,\n        37 : 37.0,\n        38 : 38.0,\n        39 : 39.0,\n        40 : 40.0,\n        41 : 41.0,\n        42 : 42.0,\n        43 : 43.0,\n        44 : 44.0,\n        45 : 45.0,\n        46 : 46.0,\n        47 : 47.0,\n        48 : 48.0,\n        49 : 49.0,\n        50 : 50.0,\n        51 : 51.0,\n        52 : 52.0,\n        53 : 53.0,\n        54 : 54.0,\n        55 : 55.0,\n        56 : 56.0,\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));",
            "assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));",
            "assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "443",
        "title": "largest_neg",
        "text": "Write a scalathon function to find the largest negative number from the given list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def largestNeg(list1 : List[Long]) : Long = {\n        -1 : 0,\n        0 : 1,\n        1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1 : -1,\n        -1\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(largestNeg((List[Long](1l.toLong, 2l.toLong, 3l.toLong, -4l.toLong, -6l.toLong))) == (-6l));",
            "assert(largestNeg((List[Long](1l.toLong, 2l.toLong, 3l.toLong, -8l.toLong, -9l.toLong))) == (-9l));",
            "assert(largestNeg((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, -1l.toLong))) == (-1l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "444",
        "title": "trim_tuple",
        "text": "Write a function to trim each list by k in the given lists.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def trimTuple(test_list : List[List[Long]], K : Long) : List[List[Long]] = {\n        test_list[i] : test_list[i] for i in range(len(test_list))\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(trimTuple((List[List[Long]](List[Long](5l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 4l.toLong), List[Long](3l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 1l.toLong), List[Long](9l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong), List[Long](4l.toLong, 8l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))), (2l)).equals((List[List[Long]](List[Long](2l.toLong), List[Long](9l.toLong), List[Long](2l.toLong), List[Long](2l.toLong)))));",
            "assert(trimTuple((List[List[Long]](List[Long](5l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 4l.toLong), List[Long](3l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 1l.toLong), List[Long](9l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong), List[Long](4l.toLong, 8l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))), (1l)).equals((List[List[Long]](List[Long](3l.toLong, 2l.toLong, 1l.toLong), List[Long](4l.toLong, 9l.toLong, 2l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](8l.toLong, 2l.toLong, 1l.toLong)))));",
            "assert(trimTuple((List[List[Long]](List[Long](7l.toLong, 8l.toLong, 4l.toLong, 9l.toLong), List[Long](11l.toLong, 8l.toLong, 12l.toLong, 4l.toLong), List[Long](4l.toLong, 1l.toLong, 7l.toLong, 8l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 7l.toLong))), (1l)).equals((List[List[Long]](List[Long](8l.toLong, 4l.toLong), List[Long](8l.toLong, 12l.toLong), List[Long](1l.toLong, 7l.toLong), List[Long](6l.toLong, 9l.toLong)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "445",
        "title": "index_multiplication",
        "text": "Write a function to perform index wise multiplication of list elements in the given two lists.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def indexMultiplication(test_tup1 : List[List[Long]], test_tup2 : List[List[Long]]) : List[List[Long]] = {\n        test_tup1.head, test_tup2.head\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(indexMultiplication((List[List[Long]](List[Long](1l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](2l.toLong, 9l.toLong), List[Long](1l.toLong, 10l.toLong))), (List[List[Long]](List[Long](6l.toLong, 7l.toLong), List[Long](3l.toLong, 9l.toLong), List[Long](1l.toLong, 1l.toLong), List[Long](7l.toLong, 3l.toLong)))).equals((List[List[Long]](List[Long](6l.toLong, 21l.toLong), List[Long](12l.toLong, 45l.toLong), List[Long](2l.toLong, 9l.toLong), List[Long](7l.toLong, 30l.toLong)))));",
            "assert(indexMultiplication((List[List[Long]](List[Long](2l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](3l.toLong, 10l.toLong), List[Long](2l.toLong, 11l.toLong))), (List[List[Long]](List[Long](7l.toLong, 8l.toLong), List[Long](4l.toLong, 10l.toLong), List[Long](2l.toLong, 2l.toLong), List[Long](8l.toLong, 4l.toLong)))).equals((List[List[Long]](List[Long](14l.toLong, 32l.toLong), List[Long](20l.toLong, 60l.toLong), List[Long](6l.toLong, 20l.toLong), List[Long](16l.toLong, 44l.toLong)))));",
            "assert(indexMultiplication((List[List[Long]](List[Long](3l.toLong, 5l.toLong), List[Long](6l.toLong, 7l.toLong), List[Long](4l.toLong, 11l.toLong), List[Long](3l.toLong, 12l.toLong))), (List[List[Long]](List[Long](8l.toLong, 9l.toLong), List[Long](5l.toLong, 11l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](9l.toLong, 5l.toLong)))).equals((List[List[Long]](List[Long](24l.toLong, 45l.toLong), List[Long](30l.toLong, 77l.toLong), List[Long](12l.toLong, 33l.toLong), List[Long](27l.toLong, 60l.toLong)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "446",
        "title": "count_Occurrence",
        "text": "Write a scalathon function to count the occurence of all elements of list in a tuple.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countOccurrence(tup : Any, lst : List[Any]) : Long = {\n        tuple : {\n            tuple : {\n                tuple : {\n                    tuple : {\n                        tuple : {\n                            tuple : {\n                                tuple : {\n                                    tuple : {\n                                        tuple : {\n                                            tuple : {\n                                                tuple : {\n                                                    tuple : {\n                                                        tuple : {\n                                                            tuple : {\n                                                                tuple : {\n                                                                    tuple : {\n                                                                        tuple : {\n                                                                            tuple : {\n                                                                                tuple : {\n                                                                                    tuple : {\n                                                                                        tuple : {\n                                                                                            tuple : {\n                                                                                             tuple : {\n                                                                                               tup : {\n                                                                                                    tuple : {\n                                                                                                        tuple : {\n                                                                                                            tuple : {\n                                                                                                                  tuple : {\n                                                                                                                    tuple : {\n                                                                                                                        tuple : {\n                                                                                                                           tuple : {\n                                                                                                                             tuple : {\n                                                                                                                            tuple : {\n                                                                                                                            tuple : {\n                                                                                                                            tuple : {\n                                                                                                                            tuple : {\n                                                                                                                            tuple : {\n                                                                                                                            tuple : {\n                                                                                                                            tuple : {\n                                                                                                                            tuple : {\n                                                                                                                            tuple : {\n                                                                                                                            tuple : {\n                                                                                                                            tuple : {\n                                                                                                                            tuple : {\n                                                                                                                            tuple : {\n                                                                                                                            tuple : {\n                                                                                                                            tuple : {\n                                                                                                                            tuple : {\n                               \n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(countOccurrence((Any((\"a\", \"a\", \"c\", \"b\", \"d\"))), (List[Any](\"a\", \"b\"))) == (3l));",
            "assert(countOccurrence((Any((1l, 2l, 3l, 1l, 4l, 6l, 7l, 1l, 4l))), (List[Any](1l.toLong, 4l.toLong, 7l.toLong))) == (6l));",
            "assert(countOccurrence((Any((1l, 2l, 3l, 4l, 5l, 6l))), (List[Any](1l.toLong, 2l.toLong))) == (2l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "447",
        "title": "cube_nums",
        "text": "Write a function to find cubes of individual elements in a list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def cubeNums(nums : List[Long]) : List[Long] = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        72 : 72,\n        73 : 73,\n        74 : 74,\n        75 : 75\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(cubeNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 8l.toLong, 27l.toLong, 64l.toLong, 125l.toLong, 216l.toLong, 343l.toLong, 512l.toLong, 729l.toLong, 1000l.toLong))));",
            "assert(cubeNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));",
            "assert(cubeNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](1728l.toLong, 3375l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "448",
        "title": "cal_sum",
        "text": "Write a function to calculate the sum of perrin numbers.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def calSum(n : Long) : Long = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        72 : 72,\n        73 : 73,\n        74 : 74,\n        75 : 75,\n        76 : 76,\n\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(calSum((9l)) == (49l));",
            "assert(calSum((10l)) == (66l));",
            "assert(calSum((11l)) == (88l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "450",
        "title": "extract_string",
        "text": "Write a function to extract specified size of strings from a given list of string values.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def extractString(str : List[String], l : Long) : List[String] = {\n        str.substring(0, l)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));",
            "assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));",
            "assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "451",
        "title": "remove_whitespaces",
        "text": "Write a function to remove all whitespaces from the given string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def removeWhitespaces(text1 : String) : String = {\n       '' : '',\n        '\\t' : '',\n        '\\n' : '',\n        '\\r' : '',\n        '\\f' : '',\n        '\\v' : '',\n        '\\u0020' : '',\n        '\\u0085' : '',\n        '\\u00A0' : '',\n        '\\u1680' : '',\n        '\\u180E' : '',\n        '\\u2000' : '',\n        '\\u2001' : '',\n        '\\u2002' : '',\n        '\\u2003' : '',\n        '\\u2004' : '',\n        '\\u2005' : '',\n        '\\u2006' : '',\n        '\\u2007' : '',\n        '\\u2008' : '',\n        '\\u2009' : '',\n        '\\u200A' : '',\n        '\\u200B' : '',\n        '\\u202F' : '',\n        '\\u205F' : '',\n        '\\u3000' : '',\n        '\\u2028' : '',\n        '\\u2029' : '',\n        '\\u205E' : '',\n        '\\u3000' : '',\n        '\\u2060' : '',\n        '\\u2061' : '',\n        '\\u2062' : '',\n        '\\u2063' : '',\n        '\\u2064' : '',\n        '\\u2065' : '',\n        '\\u2066' : '',\n        '\\u2067' : '',\n        '\\u2068' : '',\n        '\\u2069' : '',\n        '\\u206A' : '',\n        '\\u206B' : '',\n        '\\u206C' : '',\n        '\\u206D' : '',\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(removeWhitespaces((\" Google    Flutter \")).equals((\"GoogleFlutter\")));",
            "assert(removeWhitespaces((\" Google    Dart \")).equals((\"GoogleDart\")));",
            "assert(removeWhitespaces((\" iOS    Swift \")).equals((\"iOSSwift\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "452",
        "title": "loss_amount",
        "text": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def lossAmount(actual_cost : Long, sale_amount : Long) : Long = {\n        // Return the loss amount on a sale if the given amount has loss else return 0.\n        \"loss_amount\" : 0,\n        // Return the loss amount on a sale if the given amount has loss else return 0.\n        \"sale_amount\" : 0,\n        // Return the loss amount on a sale if the given amount has loss else return 0.\n        \"actual_cost\" : actual_cost,\n        // Return the loss amount on a sale if the given amount has loss else return 0.\n        \"sale_amount\" : sale_amount,\n        // Return the loss amount on a sale if the given amount has loss else return 0.\n        \"actual_cost\" : actual_cost,\n        // Return the loss amount on a sale if the given amount has loss else return 0.\n        \"sale_amount\" : sale_amount,\n        // Return the loss amount on a sale if the given amount has loss else return 0.\n        \"actual_cost\" : actual_cost,\n        // Return the loss amount on a sale if the given amount has loss else return 0.\n        \"sale_amount\" : sale_amount,\n        // Return the loss amount on a sale if the given amount has loss else return 0.\n        \"actual_cost\" : actual_cost,\n        // Return the loss amount on a sale if the given amount has loss else return 0.\n        \"sale_amount\" : sale_amount,\n        // Return the loss amount on a sale if the given amount has loss else return 0.\n        \"actual_cost\" : actual_cost,\n        // Return the loss amount on a sale if the given amount has loss else return 0.\n        \"sale_amount\" : sale_amount,\n        // Return the loss amount on a sale if the given amount has loss else return 0.\n        \"actual_cost\" : actual_cost,\n        // Return the loss amount on a sale if the given amount has loss else return 0.\n        \"sale_amount\" : sale_amount,\n        //\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(lossAmount((1500l), (1200l)) == (0l));",
            "assert(lossAmount((100l), (200l)) == (100l));",
            "assert(lossAmount((2000l), (5000l)) == (3000l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "453",
        "title": "sumofFactors",
        "text": "Write a scalathon function to find the sum of even factors of a number.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumofFactors(n : Long) : Long = {\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        72 : 72,\n        73 : 73,\n        74 : 74,\n        75 : 75,\n        76 : 76,\n\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(sumofFactors((18l)) == (26l));",
            "assert(sumofFactors((30l)) == (48l));",
            "assert(sumofFactors((6l)) == (8l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "454",
        "title": "text_match_wordz",
        "text": "Write a function that matches a word containing 'z'.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def textMatchWordz(text : String) : Boolean = {\n        \"z\" : true\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(textMatchWordz((\"pythonz.\")) == (true));",
            "assert(textMatchWordz((\"xyz.\")) == (true));",
            "assert(textMatchWordz((\"  lang  .\")) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "455",
        "title": "check_monthnumb_number",
        "text": "Write a function to check whether the given month number contains 31 days or not.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def checkMonthnumbNumber(monthnum2 : Long) : Boolean = {\n        \"0\" : False,\n        \"1\" : False,\n        \"2\" : False,\n        \"3\" : False,\n        \"4\" : False,\n        \"5\" : False,\n        \"6\" : False,\n        \"7\" : False,\n        \"8\" : False,\n        \"9\" : False,\n        \"10\" : False,\n        \"11\" : False,\n        \"12\" : False,\n        \"13\" : False,\n        \"14\" : False,\n        \"15\" : False,\n        \"16\" : False,\n        \"17\" : False,\n        \"18\" : False,\n        \"19\" : False,\n        \"20\" : False,\n        \"21\" : False,\n        \"22\" : False,\n        \"23\" : False,\n        \"24\" : False,\n        \"25\" : False,\n        \"26\" : False,\n        \"27\" : False,\n        \"28\" : False,\n        \"29\" : False,\n        \"30\" : False,\n        \"31\" : False,\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(checkMonthnumbNumber((5l)) == (true));",
            "assert(checkMonthnumbNumber((2l)) == (false));",
            "assert(checkMonthnumbNumber((6l)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "456",
        "title": "reverse_string_list",
        "text": "Write a function to reverse each string in a given list of string values.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def reverseStringList(stringlist : List[String]) : List[String] = {\n        stringlist.reverse()\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(reverseStringList((List[String](\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"))).equals((List[String](\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"))));",
            "assert(reverseStringList((List[String](\"john\", \"amal\", \"joel\", \"george\"))).equals((List[String](\"nhoj\", \"lama\", \"leoj\", \"egroeg\"))));",
            "assert(reverseStringList((List[String](\"jack\", \"john\", \"mary\"))).equals((List[String](\"kcaj\", \"nhoj\", \"yram\"))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "457",
        "title": "Find_Min",
        "text": "Write a scalathon function to find the sublist having minimum length.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def FindMin(lst : List[List[Any]]) : List[Any] = {\n        lst[i] for i in range(len(lst)) if len(lst[i]) > 0\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(FindMin((List[List[Any]](List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong)))).equals((List[Any](1l.toLong))));",
            "assert(FindMin((List[List[Any]](List[Long](1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 2l.toLong, 7l.toLong, 8l.toLong)))).equals((List[Any](1l.toLong, 1l.toLong))));",
            "assert(FindMin((List[List[Any]](List[String](\"x\"), List[String](\"x\", \"y\"), List[String](\"x\", \"y\", \"z\")))).equals((List[Any](\"x\"))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "458",
        "title": "rectangle_area",
        "text": "Write a function to find the area of a rectangle.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def rectangleArea(l : Long, b : Long) : Long = {\n        // Write a function to find the area of a rectangle.\n        def rectangleArea(l : Long, b : Long) : Long = {\n            // Write a function to find the area of a rectangle.\n            def rectangleArea(l : Long, b : Long) : Long = {\n                // Write a function to find the area of a rectangle.\n                def rectangleArea(l : Long, b : Long) : Long = {\n                    // Write a function to find the area of a rectangle.\n                    def rectangleArea(l : Long, b : Long) : Long = {\n                        // Write a function to find the area of a rectangle.\n                        def rectangleArea(l : Long, b : Long) : Long = {\n                            // Write a function to find the area of a rectangle.\n                            def rectangleArea(l : Long, b : Long) : Long = {\n                                // Write a function to find the area of a rectangle.\n                                def rectangleArea(l : Long, b : Long) : Long = {\n                                    // Write a function to find the area of a rectangle.\n                                    def rectangleArea(l : Long, b : Long) : Long = {\n                                        // Write a function to find the area of a rectangle.\n                                        def rectangleArea(l : Long, b : Long) : Long = {\n                                            // Write a function to find the area of a rectangle.\n                                            def rectangleArea(l : Long, b : Long) : Long = {\n                                                // Write a function to find the area of a rectangle.\n                                                def rectangleArea(l : Long, b : Long) : Long = {\n                                                    // Write a function to find the area of a rectangle.\n                                                    def rectangleArea(l : Long, b : Long) : Long = {\n                                                        // Write a function to find the area of a rectangle.\n                                                        def rectangleArea(l : Long, b : Long) : Long = {\n                                 \n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(rectangleArea((10l), (20l)) == (200l));",
            "assert(rectangleArea((10l), (5l)) == (50l));",
            "assert(rectangleArea((4l), (2l)) == (8l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "459",
        "title": "remove_uppercase",
        "text": "Write a function to remove uppercase substrings from a given string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def removeUppercase(str1 : String) : String = {\n        'a' : 'A',\n        'b' : 'B',\n        'c' : 'C',\n        'd' : 'D',\n        'e' : 'E',\n        'f' : 'F',\n        'g' : 'G',\n        'h' : 'H',\n        'i' : 'I',\n        'j' : 'J',\n        'k' : 'K',\n        'l' : 'L',\n       'm' : 'M',\n        'n' : 'N',\n        'o' : 'O',\n        'p' : 'P',\n        'q' : 'Q',\n        'r' : 'R',\n       's' : 'S',\n        't' : 'T',\n        'u' : 'U',\n        'v' : 'V',\n        'w' : 'W',\n        'x' : 'X',\n        'y' : 'Y',\n        'z' : 'Z',\n        'A' : 'A',\n        'B' : 'B',\n        'C' : 'C',\n        'D' : 'D',\n        'E' : 'E',\n        'F' : 'F',\n        'G' : 'G',\n        'H' : 'H',\n        'I' : 'I',\n        'J' : 'J',\n        'K' : 'K',\n        'L' : 'L',\n        'M' : 'M',\n        'N' : 'N',\n        'O' : 'O',\n        'P' : 'P',\n        'Q' : 'Q',\n        'R' : 'R',\n        'S' : 'S',\n        'T' : 'T',\n        'U' : 'U',\n        'V' : 'V',\n        'W' : 'W',\n        'X' : 'X',\n        'Y' : 'Y',\n        \n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(removeUppercase((\"cAstyoUrFavoRitETVshoWs\")).equals((\"cstyoravoitshos\")));",
            "assert(removeUppercase((\"wAtchTheinTernEtrAdIo\")).equals((\"wtchheinerntrdo\")));",
            "assert(removeUppercase((\"VoicESeaRchAndreComMendaTionS\")).equals((\"oiceachndreomendaion\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "460",
        "title": "Extract",
        "text": "Write a scalathon function to get the first element of each sublist.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def Extract(lst : List[List[Long]]) : List[Long] = {\n        lst[0]\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(Extract((List[List[Long]](List[Long](1l.toLong, 2l.toLong), List[Long](3l.toLong, 4l.toLong, 5l.toLong), List[Long](6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 3l.toLong, 6l.toLong))));",
            "assert(Extract((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong)))).equals((List[Long](1l.toLong, 4l.toLong))));",
            "assert(Extract((List[List[Long]](List[Long](9l.toLong, 8l.toLong, 1l.toLong), List[Long](1l.toLong, 2l.toLong)))).equals((List[Long](9l.toLong, 1l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "461",
        "title": "upper_ctr",
        "text": "Write a scalathon function to count the upper case characters in a given string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def upperCtr(str : String) : Long = {\n        'a' : 1,\n        'b' : 2,\n        'c' : 3,\n        'd' : 4,\n        'e' : 5,\n        'f' : 6,\n        'g' : 7,\n        'h' : 8,\n        'i' : 9,\n        'j' : 10,\n        'k' : 11,\n        'l' : 12,\n       'm' : 13,\n        'n' : 14,\n        'o' : 15,\n        'p' : 16,\n        'q' : 17,\n        'r' : 18,\n       's' : 19,\n        't' : 20,\n        'u' : 21,\n        'v' : 22,\n        'w' : 23,\n        'x' : 24,\n        'y' : 25,\n        'z' : 26,\n        'A' : 27,\n        'B' : 28,\n        'C' : 29,\n        'D' : 30,\n        'E' : 31,\n        'F' : 32,\n        'G' : 33,\n        'H' : 34,\n        'I' : 35,\n        'J' : 36,\n        'K' : 37,\n        'L' : 38,\n        'M' : 39,\n        'N' : 40,\n        'O' : 41,\n        'P' : 42,\n        'Q' : 43,\n        'R' : 44,\n        'S' : 45,\n        'T' : 46,\n        'U' : 47,\n        'V' : 48,\n        'W' : 49,\n        'X' : 50,\n        'Y' : 51,\n        'Z' : 52,\n        '0' : 53,\n        '1' : 54,\n        '2' : 55,\n        '3' : 56,\n        '4' : 57,\n        '5' :\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(upperCtr((\"PYthon\")) == (1l));",
            "assert(upperCtr((\"BigData\")) == (1l));",
            "assert(upperCtr((\"program\")) == (0l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "462",
        "title": "combinations_list",
        "text": "Write a function to find all possible combinations of the elements of a given list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def combinationsList(list1 : List[String]) : List[Either[List[None], List[String]]] = {\n        None : [],\n        List[None] : [],\n        List[String] : []\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(combinationsList((List[String](\"orange\", \"red\", \"green\", \"blue\"))).equals((List[Either[List[None], List[String]]](List[Long](), List[String](\"orange\"), List[String](\"red\"), List[String](\"red\", \"orange\"), List[String](\"green\"), List[String](\"green\", \"orange\"), List[String](\"green\", \"red\"), List[String](\"green\", \"red\", \"orange\"), List[String](\"blue\"), List[String](\"blue\", \"orange\"), List[String](\"blue\", \"red\"), List[String](\"blue\", \"red\", \"orange\"), List[String](\"blue\", \"green\"), List[String](\"blue\", \"green\", \"orange\"), List[String](\"blue\", \"green\", \"red\"), List[String](\"blue\", \"green\", \"red\", \"orange\")))));",
            "assert(combinationsList((List[String](\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"))).equals((List[Either[List[None], List[String]]](List[Long](), List[String](\"red\"), List[String](\"green\"), List[String](\"green\", \"red\"), List[String](\"blue\"), List[String](\"blue\", \"red\"), List[String](\"blue\", \"green\"), List[String](\"blue\", \"green\", \"red\"), List[String](\"white\"), List[String](\"white\", \"red\"), List[String](\"white\", \"green\"), List[String](\"white\", \"green\", \"red\"), List[String](\"white\", \"blue\"), List[String](\"white\", \"blue\", \"red\"), List[String](\"white\", \"blue\", \"green\"), List[String](\"white\", \"blue\", \"green\", \"red\"), List[String](\"black\"), List[String](\"black\", \"red\"), List[String](\"black\", \"green\"), List[String](\"black\", \"green\", \"red\"), List[String](\"black\", \"blue\"), List[String](\"black\", \"blue\", \"red\"), List[String](\"black\", \"blue\", \"green\"), List[String](\"black\", \"blue\", \"green\", \"red\"), List[String](\"black\", \"white\"), List[String](\"black\", \"white\", \"red\"), List[String](\"black\", \"white\", \"green\"), List[String](\"black\", \"white\", \"green\", \"red\"), List[String](\"black\", \"white\", \"blue\"), List[String](\"black\", \"white\", \"blue\", \"red\"), List[String](\"black\", \"white\", \"blue\", \"green\"), List[String](\"black\", \"white\", \"blue\", \"green\", \"red\"), List[String](\"orange\"), List[String](\"orange\", \"red\"), List[String](\"orange\", \"green\"), List[String](\"orange\", \"green\", \"red\"), List[String](\"orange\", \"blue\"), List[String](\"orange\", \"blue\", \"red\"), List[String](\"orange\", \"blue\", \"green\"), List[String](\"orange\", \"blue\", \"green\", \"red\"), List[String](\"orange\", \"white\"), List[String](\"orange\", \"white\", \"red\"), List[String](\"orange\", \"white\", \"green\"), List[String](\"orange\", \"white\", \"green\", \"red\"), List[String](\"orange\", \"white\", \"blue\"), List[String](\"orange\", \"white\", \"blue\", \"red\"), List[String](\"orange\", \"white\", \"blue\", \"green\"), List[String](\"orange\", \"white\", \"blue\", \"green\", \"red\"), List[String](\"orange\", \"black\"), List[String](\"orange\", \"black\", \"red\"), List[String](\"orange\", \"black\", \"green\"), List[String](\"orange\", \"black\", \"green\", \"red\"), List[String](\"orange\", \"black\", \"blue\"), List[String](\"orange\", \"black\", \"blue\", \"red\"), List[String](\"orange\", \"black\", \"blue\", \"green\"), List[String](\"orange\", \"black\", \"blue\", \"green\", \"red\"), List[String](\"orange\", \"black\", \"white\"), List[String](\"orange\", \"black\", \"white\", \"red\"), List[String](\"orange\", \"black\", \"white\", \"green\"), List[String](\"orange\", \"black\", \"white\", \"green\", \"red\"), List[String](\"orange\", \"black\", \"white\", \"blue\"), List[String](\"orange\", \"black\", \"white\", \"blue\", \"red\"), List[String](\"orange\", \"black\", \"white\", \"blue\", \"green\"), List[String](\"orange\", \"black\", \"white\", \"blue\", \"green\", \"red\")))));",
            "assert(combinationsList((List[String](\"red\", \"green\", \"black\", \"orange\"))).equals((List[Either[List[None], List[String]]](List[Long](), List[String](\"red\"), List[String](\"green\"), List[String](\"green\", \"red\"), List[String](\"black\"), List[String](\"black\", \"red\"), List[String](\"black\", \"green\"), List[String](\"black\", \"green\", \"red\"), List[String](\"orange\"), List[String](\"orange\", \"red\"), List[String](\"orange\", \"green\"), List[String](\"orange\", \"green\", \"red\"), List[String](\"orange\", \"black\"), List[String](\"orange\", \"black\", \"red\"), List[String](\"orange\", \"black\", \"green\"), List[String](\"orange\", \"black\", \"green\", \"red\")))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "463",
        "title": "max_subarray_product",
        "text": "Write a function to find the maximum product sublist of the given list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n        Long.max(arr)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));",
            "assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));",
            "assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "464",
        "title": "check_value",
        "text": "Write a function to check if all values are same in a map.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def checkValue(dict : Map[String,Long], n : Long) : Boolean = {\n        dict.get(key) == n\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(checkValue((Map[String,Long](\"Cierra Vega\" -> 12l, \"Alden Cantrell\" -> 12l, \"Kierra Gentry\" -> 12l, \"Pierre Cox\" -> 12l)), (10l)) == (false));",
            "assert(checkValue((Map[String,Long](\"Cierra Vega\" -> 12l, \"Alden Cantrell\" -> 12l, \"Kierra Gentry\" -> 12l, \"Pierre Cox\" -> 12l)), (12l)) == (true));",
            "assert(checkValue((Map[String,Long](\"Cierra Vega\" -> 12l, \"Alden Cantrell\" -> 12l, \"Kierra Gentry\" -> 12l, \"Pierre Cox\" -> 12l)), (5l)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "465",
        "title": "drop_empty",
        "text": "Write a function to drop empty items from a given map.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n        \"\": \"\",\n        \"a\": \"\",\n        \"b\": \"\",\n        \"c\": \"\",\n        \"d\": \"\",\n        \"e\": \"\",\n        \"f\": \"\",\n        \"g\": \"\",\n        \"h\": \"\",\n        \"i\": \"\",\n        \"j\": \"\",\n        \"k\": \"\",\n        \"l\": \"\",\n        \"m\": \"\",\n        \"n\": \"\",\n        \"o\": \"\",\n        \"p\": \"\",\n        \"q\": \"\",\n        \"r\": \"\",\n        \"s\": \"\",\n        \"t\": \"\",\n        \"u\": \"\",\n        \"v\": \"\",\n        \"w\": \"\",\n        \"x\": \"\",\n        \"y\": \"\",\n        \"z\": \"\",\n        \"A\": \"\",\n        \"B\": \"\",\n        \"C\": \"\",\n        \"D\": \"\",\n        \"E\": \"\",\n        \"F\": \"\",\n        \"G\": \"\",\n        \"H\": \"\",\n        \"I\": \"\",\n        \"J\": \"\",\n        \"K\": \"\",\n        \"L\": \"\",\n        \"M\": \"\",\n        \"N\": \"\",\n        \"O\": \"\",\n        \"P\": \"\",\n        \"Q\": \"\",\n        \"R\": \"\",\n        \"S\": \"\",\n        \"T\": \"\",\n        \"U\": \"\",\n        \"V\": \"\",\n        \"W\": \"\",\n        \"X\": \"\",\n        \"Y\": \"\",\n        \"Z\": \"\",\n        \"a\": \"\",\n        \"b\": \"\",\n        \"c\": \"\",\n        \"d\": \"\",\n        \"e\": \"\",\n        \"f\": \"\",\n        \"g\": \"\",\n        \"h\": \"\",\n        \"i\": \"\",\n        \"j\": \"\",\n        \"k\": \"\",\n        \"\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));",
            "assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));",
            "assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "468",
        "title": "max_product",
        "text": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maxProduct(arr : List[Long]) : Long = {\n        Long: 0,\n        Long: 0\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(maxProduct((List[Long](3l.toLong, 100l.toLong, 4l.toLong, 5l.toLong, 150l.toLong, 6l.toLong))) == (3000l));",
            "assert(maxProduct((List[Long](4l.toLong, 42l.toLong, 55l.toLong, 68l.toLong, 80l.toLong))) == (50265600l));",
            "assert(maxProduct((List[Long](10l.toLong, 22l.toLong, 9l.toLong, 33l.toLong, 21l.toLong, 50l.toLong, 41l.toLong, 60l.toLong))) == (2460l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "470",
        "title": "add_pairwise",
        "text": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def addPairwise(test_tup : Tuple2[Long, Long, Long, Long, Long]) : Tuple2[Long, Long, Long, Long] = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(addPairwise(((1l, 5l, 7l, 8l, 10l))).equals(((6l, 12l, 15l, 18l))));",
            "assert(addPairwise(((2l, 6l, 8l, 9l, 11l))).equals(((8l, 14l, 17l, 20l))));",
            "assert(addPairwise(((3l, 7l, 9l, 10l, 12l))).equals(((10l, 16l, 19l, 22l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "471",
        "title": "find_remainder",
        "text": "Write a scalathon function to find the product of the list multiplication modulo n.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findRemainder(arr : List[Long], n : Long) : Long = {\n        if (n == 0) {\n            return 0\n        }\n        return arr[0] % n\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(findRemainder((List[Long](100l.toLong, 10l.toLong, 5l.toLong, 25l.toLong, 35l.toLong, 14l.toLong)), (11l)) == (9l));",
            "assert(findRemainder((List[Long](1l.toLong, 1l.toLong, 1l.toLong)), (1l)) == (0l));",
            "assert(findRemainder((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (2l)) == (0l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "472",
        "title": "check_Consecutive",
        "text": "Write a scalathon function to check whether the given list contains consecutive numbers or not.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def checkConsecutive(l : List[Long]) : Boolean = {\n        l.head() == l.tail()\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));",
            "assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));",
            "assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "474",
        "title": "replace_char",
        "text": "Write a function to replace characters in a string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def replaceChar(str1 : String, ch : String, newch : String) : String = {\n        '\\n' : '\\\\n',\n        '\\r' : '\\\\r',\n        '\\t' : '\\\\t',\n        '\\b' : '\\\\b',\n        '\\f' : '\\\\f',\n        '\\v' : '\\\\v',\n        '\\x0B' : '\\\\x0B',\n        '\\x0C' : '\\\\x0C',\n        '\\x0D' : '\\\\x0D',\n        '\\x85' : '\\\\x85',\n        '\\xA0' : '\\\\xA0',\n        '\\x20' : '\\\\x20',\n        '\\x21' : '\\\\x21',\n        '\\x22' : '\\\\x22',\n        '\\x23' : '\\\\x23',\n        '\\x24' : '\\\\x24',\n        '\\x25' : '\\\\x25',\n        '\\x26' : '\\\\x26',\n        '\\x27' : '\\\\x27',\n        '\\x28' : '\\\\x28',\n        '\\x29' : '\\\\x29',\n        '\\x2A' : '\\\\x2A',\n        '\\x2B' : '\\\\x2B',\n        '\\x2C' : '\\\\x2C',\n        '\\x2D' : '\\\\x2D',\n        '\\x2E' : '\\\\x2E',\n        '\\x2F' : '\\\\x2F',\n        '\\x30' : '\\\\x30',\n        '\\x31' : '\\\\x31',\n        '\\x32' : '\\\\x32',\n        '\\x33' : '\\\\x33',\n        '\\x34' : '\\\\x34',\n        '\\x35' : '\\\\x35',\n        '\\x36' : '\\\\x36',\n        '\\x\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(replaceChar((\"polygon\"), (\"y\"), (\"l\")).equals((\"pollgon\")));",
            "assert(replaceChar((\"character\"), (\"c\"), (\"a\")).equals((\"aharaater\")));",
            "assert(replaceChar((\"python\"), (\"l\"), (\"a\")).equals((\"python\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "475",
        "title": "sort_counter",
        "text": "Write a function to sort a map by value.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sortCounter(dict1 : Map[String,Long]) : List[Tuple2[String, Long]] = {\n        (key1, key2) : (key1, key2)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(sortCounter((Map[String,Long](\"Math\" -> 81l, \"Physics\" -> 83l, \"Chemistry\" -> 87l))).equals((List[Tuple2[String, Long]]((\"Chemistry\", 87l), (\"Physics\", 83l), (\"Math\", 81l)))));",
            "assert(sortCounter((Map[String,Long](\"Math\" -> 400l, \"Physics\" -> 300l, \"Chemistry\" -> 250l))).equals((List[Tuple2[String, Long]]((\"Math\", 400l), (\"Physics\", 300l), (\"Chemistry\", 250l)))));",
            "assert(sortCounter((Map[String,Long](\"Math\" -> 900l, \"Physics\" -> 1000l, \"Chemistry\" -> 1250l))).equals((List[Tuple2[String, Long]]((\"Chemistry\", 1250l), (\"Physics\", 1000l), (\"Math\", 900l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "476",
        "title": "big_sum",
        "text": "Write a scalathon function to find the sum of the largest and smallest value in a given list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def bigSum(nums : List[Long]) : Long = {\n        Long.MAX_VALUE,\n        Long.MIN_VALUE\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(bigSum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (4l));",
            "assert(bigSum((List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (3l));",
            "assert(bigSum((List[Long](2l.toLong, 3l.toLong, 6l.toLong))) == (8l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "477",
        "title": "is_lower",
        "text": "Write a scalathon function to convert the given string to lower case.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isLower(string : String) : String = {\n        'a' : 'A',\n        'b' : 'B',\n        'c' : 'C',\n        'd' : 'D',\n        'e' : 'E',\n        'f' : 'F',\n        'g' : 'G',\n        'h' : 'H',\n        'i' : 'I',\n        'j' : 'J',\n        'k' : 'K',\n        'l' : 'L',\n       'm' : 'M',\n        'n' : 'N',\n        'o' : 'O',\n        'p' : 'P',\n        'q' : 'Q',\n        'r' : 'R',\n       's' : 'S',\n        't' : 'T',\n        'u' : 'U',\n        'v' : 'V',\n        'w' : 'W',\n        'x' : 'X',\n        'y' : 'Y',\n        'z' : 'Z',\n        'A' : 'A',\n        'B' : 'B',\n        'C' : 'C',\n        'D' : 'D',\n        'E' : 'E',\n        'F' : 'F',\n        'G' : 'G',\n        'H' : 'H',\n        'I' : 'I',\n        'J' : 'J',\n        'K' : 'K',\n        'L' : 'L',\n        'M' : 'M',\n        'N' : 'N',\n        'O' : 'O',\n        'P' : 'P',\n        'Q' : 'Q',\n        'R' : 'R',\n        'S' : 'S',\n        'T' : 'T',\n        'U' : 'U',\n        'V' : 'V',\n        'W' : 'W',\n        'X' : 'X',\n        'Y' : 'Y',\n        'Z' :\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(isLower((\"InValid\")).equals((\"invalid\")));",
            "assert(isLower((\"TruE\")).equals((\"true\")));",
            "assert(isLower((\"SenTenCE\")).equals((\"sentence\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "478",
        "title": "remove_lowercase",
        "text": "Write a function to remove lowercase substrings from a given string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def removeLowercase(str1 : String) : String = {\n        'a' : 'A',\n        'b' : 'B',\n        'c' : 'C',\n        'd' : 'D',\n        'e' : 'E',\n        'f' : 'F',\n        'g' : 'G',\n        'h' : 'H',\n        'i' : 'I',\n        'j' : 'J',\n        'k' : 'K',\n        'l' : 'L',\n       'm' : 'M',\n        'n' : 'N',\n        'o' : 'O',\n        'p' : 'P',\n        'q' : 'Q',\n        'r' : 'R',\n       's' : 'S',\n        't' : 'T',\n        'u' : 'U',\n        'v' : 'V',\n        'w' : 'W',\n        'x' : 'X',\n        'y' : 'Y',\n        'z' : 'Z',\n        'A' : 'A',\n        'B' : 'B',\n        'C' : 'C',\n        'D' : 'D',\n        'E' : 'E',\n        'F' : 'F',\n        'G' : 'G',\n        'H' : 'H',\n        'I' : 'I',\n        'J' : 'J',\n        'K' : 'K',\n        'L' : 'L',\n        'M' : 'M',\n        'N' : 'N',\n        'O' : 'O',\n        'P' : 'P',\n        'Q' : 'Q',\n        'R' : 'R',\n        'S' : 'S',\n        'T' : 'T',\n        'U' : 'U',\n        'V' : 'V',\n        'W' : 'W',\n        'X' : 'X',\n        'Y' : 'Y',\n        'Z\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(removeLowercase((\"PYTHon\")).equals((\"PYTH\")));",
            "assert(removeLowercase((\"FInD\")).equals((\"FID\")));",
            "assert(removeLowercase((\"STRinG\")).equals((\"STRG\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "479",
        "title": "first_Digit",
        "text": "Write a scalathon function to find the first digit of a given number.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def firstDigit(n : Long) : Long = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        72 : 72,\n        73 : 73,\n        74 : 74,\n        75 : 75,\n        76\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(firstDigit((123l)) == (1l));",
            "assert(firstDigit((456l)) == (4l));",
            "assert(firstDigit((12l)) == (1l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "4",
        "title": "heap_queue_largest",
        "text": "Write a function to find the n largest integers from a given list of numbers, returned in descending order.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def heapQueueLargest(nums : List[Long], n : Long) : List[Long] = {\n        nums[0]\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(heapQueueLargest((List[Long](25l.toLong, 35l.toLong, 22l.toLong, 85l.toLong, 14l.toLong, 65l.toLong, 75l.toLong, 22l.toLong, 58l.toLong)), (3l)).equals((List[Long](85l.toLong, 75l.toLong, 65l.toLong))));",
            "assert(heapQueueLargest((List[Long](25l.toLong, 35l.toLong, 22l.toLong, 85l.toLong, 14l.toLong, 65l.toLong, 75l.toLong, 22l.toLong, 58l.toLong)), (2l)).equals((List[Long](85l.toLong, 75l.toLong))));",
            "assert(heapQueueLargest((List[Long](25l.toLong, 35l.toLong, 22l.toLong, 85l.toLong, 14l.toLong, 65l.toLong, 75l.toLong, 22l.toLong, 58l.toLong)), (5l)).equals((List[Long](85l.toLong, 75l.toLong, 65l.toLong, 58l.toLong, 35l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "554",
        "title": "Split",
        "text": "Write a scalathon function which takes a list of integers and only returns the odd ones.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def Split(list : List[Long]) : List[Long] = {\n        i % 2 == 0 for i in list\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(Split((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong))));",
            "assert(Split((List[Long](10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong))).equals((List[Long](11l.toLong, 13l.toLong))));",
            "assert(Split((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](7l.toLong, 9l.toLong, 1l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "555",
        "title": "difference",
        "text": "Write a scalathon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def difference(n : Long) : Long = {\n        Long.add(1, 1)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(difference((3l)) == (30l));",
            "assert(difference((5l)) == (210l));",
            "assert(difference((2l)) == (6l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "556",
        "title": "find_Odd_Pair",
        "text": "Write a scalathon function to count the number of pairs whose xor value is odd.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findOddPair(A : List[Long], N : Long) : Long = {\n        xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor(xor\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));",
            "assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));",
            "assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "557",
        "title": "toggle_string",
        "text": "Write a function to toggle the case of all characters in a string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def toggleString(string : String) : String = {\n        'a': 'A',\n        'b': 'B',\n        'c': 'C',\n        'd': 'D',\n        'e': 'E',\n        'f': 'F',\n        'g': 'G',\n        'h': 'H',\n        'i': 'I',\n        'j': 'J',\n        'k': 'K',\n        'l': 'L',\n       'm': 'M',\n        'n': 'N',\n        'o': 'O',\n        'p': 'P',\n        'q': 'Q',\n        'r': 'R',\n       's': 'S',\n        't': 'T',\n        'u': 'U',\n        'v': 'V',\n        'w': 'W',\n        'x': 'X',\n        'y': 'Y',\n        'z': 'Z',\n        'A': 'A',\n        'B': 'B',\n        'C': 'C',\n        'D': 'D',\n        'E': 'E',\n        'F': 'F',\n        'G': 'G',\n        'H': 'H',\n        'I': 'I',\n        'J': 'J',\n        'K': 'K',\n        'L': 'L',\n        'M': 'M',\n        'N': 'N',\n        'O': 'O',\n        'P': 'P',\n        'Q': 'Q',\n        'R': 'R',\n        'S': 'S',\n        'T': 'T',\n        'U': 'U',\n        'V': 'V',\n        'W': 'W',\n        'X': 'X',\n        'Y': 'Y',\n        'Z': 'Z',\n        '0': '0',\n        '1': '1',\n        '2': '2',\n        '3': '3',\n        '4': '4',\n        '5': '5',\n\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(toggleString((\"Python\")).equals((\"pYTHON\")));",
            "assert(toggleString((\"Pangram\")).equals((\"pANGRAM\")));",
            "assert(toggleString((\"LIttLE\")).equals((\"liTTle\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "558",
        "title": "digit_distance_nums",
        "text": "Write a scalathon function to find the sum of the per-digit difference between two integers.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def digitDistanceNums(n1 : Long, n2 : Long) : Long = {\n        n1 : n1 - n2,\n        n2 : n2 - n1\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(digitDistanceNums((1l), (2l)) == (1l));",
            "assert(digitDistanceNums((23l), (56l)) == (6l));",
            "assert(digitDistanceNums((123l), (256l)) == (7l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "559",
        "title": "max_sub_array_sum",
        "text": "Write a function to find the sum of the largest contiguous sublist in the given list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        Long.MAX_VALUE\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));",
            "assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));",
            "assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "560",
        "title": "union_elements",
        "text": "Write a function to find the union of the elements of two given lists and output them in sorted order.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def unionElements(test_tup1 : List[Long], test_tup2 : List[Long]) : List[Long] = {\n        test_tup1.head, test_tup2.head\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(unionElements((List[Long](3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)), (List[Long](5l.toLong, 7l.toLong, 4l.toLong, 10l.toLong))).equals((List[Long](3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 10l.toLong))));",
            "assert(unionElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))));",
            "assert(unionElements((List[Long](11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (List[Long](13l.toLong, 15l.toLong, 16l.toLong, 17l.toLong))).equals((List[Long](11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong, 15l.toLong, 16l.toLong, 17l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "562",
        "title": "Find_Max_Length",
        "text": "Write a scalathon function to find the length of the longest sublists.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def FindMaxLength(lst : List[List[Long]]) : Long = {\n        lst.max()\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(FindMaxLength((List[List[Long]](List[Long](1l.toLong), List[Long](1l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)))) == (4l));",
            "assert(FindMaxLength((List[List[Long]](List[Long](0l.toLong, 1l.toLong), List[Long](2l.toLong, 2l.toLong), List[Long](3l.toLong, 2l.toLong, 1l.toLong)))) == (3l));",
            "assert(FindMaxLength((List[List[Long]](List[Long](7l.toLong), List[Long](22l.toLong, 23l.toLong), List[Long](13l.toLong, 14l.toLong, 15l.toLong), List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong)))) == (5l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "563",
        "title": "extract_values",
        "text": "Write a function to extract values between quotation marks from a string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def extractValues(text : String) : List[String] = {\n        text.substring(1, text.length() - 1)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(extractValues((\"\"Python\", \"PHP\", \"Java\"\")).equals((List[String](\"Python\", \"PHP\", \"Java\"))));",
            "assert(extractValues((\"\"python\",\"program\",\"language\"\")).equals((List[String](\"python\", \"program\", \"language\"))));",
            "assert(extractValues((\"\"red\",\"blue\",\"green\",\"yellow\"\")).equals((List[String](\"red\", \"blue\", \"green\", \"yellow\"))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "564",
        "title": "count_Pairs",
        "text": "Write a scalathon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countPairs(arr : List[Long], n : Long) : Long = {\n        i : i + 1 for i in arr\n        if i!= n\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));",
            "assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));",
            "assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "565",
        "title": "split",
        "text": "Write a scalathon function to split a string into characters.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def split(word : String) : List[String] = {\n        \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));",
            "assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));",
            "assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "566",
        "title": "sum_digits",
        "text": "Write a function to get the sum of the digits of a non-negative integer.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumDigits(n : Long) : Long = {\n        Long.valueOf(0)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(sumDigits((345l)) == (12l));",
            "assert(sumDigits((12l)) == (3l));",
            "assert(sumDigits((97l)) == (16l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "567",
        "title": "issort_list",
        "text": "Write a function to check whether a specified list is sorted or not.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def issortList(list1 : List[Long]) : Boolean = {\n        scala.math.isSorted(list1)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(issortList((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 17l.toLong))) == (true));",
            "assert(issortList((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 20l.toLong, 17l.toLong))) == (false));",
            "assert(issortList((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong, 15l.toLong, 14l.toLong, 20l.toLong))) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "568",
        "title": "empty_list",
        "text": "Write a function to create a list of N empty dictionaries.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def emptyList(length : Long) : List[Map[None,None]] = {\n        None: scala.collection.mutable.List()\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(emptyList((5l)).equals((List[Map[None,None]](Map[Long,Long](), Map[Long,Long](), Map[Long,Long](), Map[Long,Long](), Map[Long,Long]()))));",
            "assert(emptyList((6l)).equals((List[Map[None,None]](Map[Long,Long](), Map[Long,Long](), Map[Long,Long](), Map[Long,Long](), Map[Long,Long](), Map[Long,Long]()))));",
            "assert(emptyList((7l)).equals((List[Map[None,None]](Map[Long,Long](), Map[Long,Long](), Map[Long,Long](), Map[Long,Long](), Map[Long,Long](), Map[Long,Long](), Map[Long,Long]()))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "569",
        "title": "sort_sublists",
        "text": "Write a function to sort each sublist of strings in a given list of lists.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.sort()\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));",
            "assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));",
            "assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "56",
        "title": "checks",
        "text": "Write a scalathon function to check if a given number is one less than twice its reverse.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def checks(n : Long) : Boolean = {\n        n % 2 == 0\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(checks((70l)) == (false));",
            "assert(checks((23l)) == (false));",
            "assert(checks((73l)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "572",
        "title": "two_unique_nums",
        "text": "Write a scalathon function to remove duplicate numbers from a given number of lists.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def twoUniqueNums(nums : List[Long]) : List[Long] = {\n        nums[0],\n        nums[1]\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(twoUniqueNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 5l.toLong))));",
            "assert(twoUniqueNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))));",
            "assert(twoUniqueNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "573",
        "title": "unique_product",
        "text": "Write a scalathon function to calculate the product of the unique numbers in a given list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def uniqueProduct(list_data : List[Long]) : Long = {\n        Long.valueOf(0) : Long.valueOf(1),\n        Long.valueOf(1) : Long.valueOf(2),\n        Long.valueOf(2) : Long.valueOf(3),\n        Long.valueOf(3) : Long.valueOf(4),\n        Long.valueOf(4) : Long.valueOf(5),\n        Long.valueOf(5) : Long.valueOf(6),\n        Long.valueOf(6) : Long.valueOf(7),\n        Long.valueOf(7) : Long.valueOf(8),\n        Long.valueOf(8) : Long.valueOf(9),\n        Long.valueOf(9) : Long.valueOf(10),\n        Long.valueOf(10) : Long.valueOf(11),\n        Long.valueOf(11) : Long.valueOf(12),\n        Long.valueOf(12) : Long.valueOf(13),\n        Long.valueOf(13) : Long.valueOf(14),\n        Long.valueOf(14) : Long.valueOf(15),\n        Long.valueOf(15) : Long.valueOf(16),\n        Long.valueOf(16) : Long.valueOf(17),\n        Long.valueOf(17) : Long.valueOf(18),\n        Long.valueOf(18) : Long.valueOf(19),\n        Long.valueOf(19) : Long.valueOf(20),\n        Long.valueOf(20) : Long.valueOf(21),\n        Long.valueOf(21) : Long.valueOf(22),\n        Long.valueOf(22) : Long.valueOf(23),\n        Long.valueOf(23) : Long.valueOf(24),\n        Long.valueOf(24) : Long.valueOf(25),\n        Long.valueOf(25) : Long.valueOf(26),\n        Long.valueOf(26) : Long\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));",
            "assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));",
            "assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "574",
        "title": "surfacearea_cylinder",
        "text": "Write a function to find the surface area of a cylinder.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def surfaceareaCylinder(r : Long, h : Long) : Float = {\n        // The surface area of a cylinder is the area of the cylinder\n        // divided by the radius.\n        \"area\" : r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(surfaceareaCylinder((10l), (5l)) == (942.45f));",
            "assert(surfaceareaCylinder((4l), (5l)) == (226.18800000000002f));",
            "assert(surfaceareaCylinder((4l), (10l)) == (351.848f));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "576",
        "title": "is_Sub_Array",
        "text": "Write a scalathon function to check whether a list is sublist of another or not.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isSubArray(A : List[Long], B : List[Long]) : Boolean = {\n        A.length == B.length\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(isSubArray((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)), (List[Long](1l.toLong, 2l.toLong))) == (false));",
            "assert(isSubArray((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (true));",
            "assert(isSubArray((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 2l.toLong)), (List[Long](2l.toLong, 2l.toLong, 0l.toLong))) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "577",
        "title": "last_Digit_Factorial",
        "text": "Write a scalathon function to find the last digit in factorial of a given number.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def lastDigitFactorial(n : Long) : Long = {\n        Long.valueOf(1) : Long.valueOf(1),\n        Long.valueOf(2) : Long.valueOf(2),\n        Long.valueOf(3) : Long.valueOf(3),\n        Long.valueOf(4) : Long.valueOf(4),\n        Long.valueOf(5) : Long.valueOf(5),\n        Long.valueOf(6) : Long.valueOf(6),\n        Long.valueOf(7) : Long.valueOf(7),\n        Long.valueOf(8) : Long.valueOf(8),\n        Long.valueOf(9) : Long.valueOf(9),\n        Long.valueOf(10) : Long.valueOf(10),\n        Long.valueOf(11) : Long.valueOf(11),\n        Long.valueOf(12) : Long.valueOf(12),\n        Long.valueOf(13) : Long.valueOf(13),\n        Long.valueOf(14) : Long.valueOf(14),\n        Long.valueOf(15) : Long.valueOf(15),\n        Long.valueOf(16) : Long.valueOf(16),\n        Long.valueOf(17) : Long.valueOf(17),\n        Long.valueOf(18) : Long.valueOf(18),\n        Long.valueOf(19) : Long.valueOf(19),\n        Long.valueOf(20) : Long.valueOf(20),\n        Long.valueOf(21) : Long.valueOf(21),\n        Long.valueOf(22) : Long.valueOf(22),\n        Long.valueOf(23) : Long.valueOf(23),\n        Long.valueOf(24) : Long.valueOf(24),\n        Long.valueOf(25) : Long.valueOf(25),\n        Long.valueOf(26) : Long.valueOf(26),\n        Long.valueOf(27) : Long.\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(lastDigitFactorial((4l)) == (4l));",
            "assert(lastDigitFactorial((21l)) == (0l));",
            "assert(lastDigitFactorial((30l)) == (0l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "578",
        "title": "interleave_lists",
        "text": "Write a function to interleave 3 lists of the same length into a single flat list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def interleaveLists(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : List[Long] = {\n        list1.head, list2.head, list3.head\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(interleaveLists((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong)), (List[Long](100l.toLong, 200l.toLong, 300l.toLong, 400l.toLong, 500l.toLong, 600l.toLong, 700l.toLong))).equals((List[Long](1l.toLong, 10l.toLong, 100l.toLong, 2l.toLong, 20l.toLong, 200l.toLong, 3l.toLong, 30l.toLong, 300l.toLong, 4l.toLong, 40l.toLong, 400l.toLong, 5l.toLong, 50l.toLong, 500l.toLong, 6l.toLong, 60l.toLong, 600l.toLong, 7l.toLong, 70l.toLong, 700l.toLong))));",
            "assert(interleaveLists((List[Long](10l.toLong, 20l.toLong)), (List[Long](15l.toLong, 2l.toLong)), (List[Long](5l.toLong, 10l.toLong))).equals((List[Long](10l.toLong, 15l.toLong, 5l.toLong, 20l.toLong, 2l.toLong, 10l.toLong))));",
            "assert(interleaveLists((List[Long](11l.toLong, 44l.toLong)), (List[Long](10l.toLong, 15l.toLong)), (List[Long](20l.toLong, 5l.toLong))).equals((List[Long](11l.toLong, 10l.toLong, 20l.toLong, 44l.toLong, 15l.toLong, 5l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "579",
        "title": "find_dissimilar",
        "text": "Write a function to find the dissimilar elements in the given two tuples.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findDissimilar(test_tup1 : Tuple2[Long, Long, Long, Long], test_tup2 : Tuple2[Long, Long, Long, Long]) : Tuple2[Long, Long, Long, Long] = {\n        test_tup1[0], test_tup1[1], test_tup1[2], test_tup1[3]\n    };\n    // Write a function to find the dissimilar elements in the given two tuples.\n    def findDissimilar(test_tup1 : Tuple2[Long, Long, Long, Long], test_tup2 : Tuple2[Long, Long, Long, Long]) : Tuple2[Long, Long, Long, Long] = {\n        test_tup2[0], test_tup2[1], test_tup2[2], test_tup2[3]\n    };\n    // Write a function to find the dissimilar elements in the given two tuples.\n    def findDissimilar(test_tup1 : Tuple2[Long, Long, Long, Long], test_tup2 : Tuple2[Long, Long, Long, Long]) : Tuple2[Long, Long, Long, Long] = {\n        test_tup1[0], test_tup1[1], test_tup1[2], test_tup1[3]\n    };\n    // Write a function to find the dissimilar elements in the given two tuples.\n    def findDissimilar(test_tup1 : Tuple2[Long, Long, Long, Long], test_tup2 : Tuple2[Long, Long, Long, Long]) : Tuple2[Long, Long, Long, Long] = {\n        test_tup2[0], test_tup2[1], test_tup2[2], test_tup2[3]\n    };\n    // Write a function to find the dissimilar elements in the given two tuples.\n    def findDissimilar(test_tup1\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(findDissimilar(((3l, 4l, 5l, 6l)), ((5l, 7l, 4l, 10l))).equals(((3l, 6l, 7l, 10l))));",
            "assert(findDissimilar(((1l, 2l, 3l, 4l)), ((7l, 2l, 3l, 9l))).equals(((1l, 4l, 7l, 9l))));",
            "assert(findDissimilar(((21l, 11l, 25l, 26l)), ((26l, 34l, 21l, 36l))).equals(((34l, 36l, 11l, 25l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "57",
        "title": "find_Max_Num",
        "text": "Write a scalathon function to find the largest number that can be formed with the given list of digits.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findMaxNum(arr : List[Long]) : Long = {\n        Long.MAX_VALUE\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(findMaxNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (321l));",
            "assert(findMaxNum((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (6541l));",
            "assert(findMaxNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 9l.toLong))) == (9321l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "580",
        "title": "extract_even",
        "text": "Write a function to remove uneven elements in the nested mixed tuple.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def extractEven(test_tuple : Tuple2[Long, Long, Tuple2[Long, Long, Tuple2[Long, Long]], Long, Long]) : Any = {\n        test_tuple.x : test_tuple.x,\n        test_tuple.y : test_tuple.y,\n        test_tuple.z : test_tuple.z,\n        test_tuple.w : test_tuple.w,\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(extractEven(((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l))).equals((Any(6l, (2l, 4l)), 6l, 8l))));",
            "assert(extractEven(((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l))).equals((Any(8l, (4l, 8l))))));",
            "assert(extractEven(((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l))).equals((Any(8l, (4l, 6l)), 8l, 10l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "581",
        "title": "surface_Area",
        "text": "Write a scalathon function to find the surface area of a square scalaramid with a given base edge and height.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def surfaceArea(b : Long, s : Long) : Long = {\n        // The base edge is the first edge of the square.\n        b : Long,\n        // The height is the second edge of the square.\n        s : Long,\n        // The base edge is the first edge of the square.\n        b : Long,\n        // The height is the second edge of the square.\n        s : Long,\n        // The base edge is the first edge of the square.\n        b : Long,\n        // The height is the second edge of the square.\n        s : Long,\n        // The base edge is the first edge of the square.\n        b : Long,\n        // The height is the second edge of the square.\n        s : Long,\n        // The base edge is the first edge of the square.\n        b : Long,\n        // The height is the second edge of the square.\n        s : Long,\n        // The base edge is the first edge of the square.\n        b : Long,\n        // The height is the second edge of the square.\n        s : Long,\n        // The base edge is the first edge of the square.\n        b : Long,\n        // The height is the second edge of the square.\n        s : Long,\n        // The base edge is the first edge of the square.\n        b : Long,\n        // The height is the second edge of the square.\n        s : Long,\n        // The base edge is the first edge of the square.\n        b : Long,\n        // The height is the second edge of the square.\n        s : Long,\n        // The base edge is the first edge of the square.\n        b : Long,\n        // The height is the second edge of the square.\n        s : Long,\n        // The base edge is the first edge of the square.\n        b : Long,\n        // The height is the second edge of the square.\n        s : Long,\n        // The base edge is the first edge of the square.\n        b :\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(surfaceArea((3l), (4l)) == (33l));",
            "assert(surfaceArea((4l), (5l)) == (56l));",
            "assert(surfaceArea((1l), (2l)) == (5l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "583",
        "title": "catalan_number",
        "text": "Write a function which returns nth catalan number.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def catalanNumber(num : Long) : Long = {\n        // Write a function which returns the nth catalan number.\n        def catalanNumber(num : Long) : Long = {\n            // Write a function which returns the nth catalan number.\n            def catalanNumber(num : Long) : Long = {\n                // Write a function which returns the nth catalan number.\n                def catalanNumber(num : Long) : Long = {\n                    // Write a function which returns the nth catalan number.\n                    def catalanNumber(num : Long) : Long = {\n                        // Write a function which returns the nth catalan number.\n                        def catalanNumber(num : Long) : Long = {\n                            // Write a function which returns the nth catalan number.\n                            def catalanNumber(num : Long) : Long = {\n                                // Write a function which returns the nth catalan number.\n                                def catalanNumber(num : Long) : Long = {\n                                    // Write a function which returns the nth catalan number.\n                                    def catalanNumber(num : Long) : Long = {\n                                        // Write a function which returns the nth catalan number.\n                                        def catalanNumber(num : Long) : Long = {\n                                            // Write a function which returns the nth catalan number.\n                                            def catalanNumber(num : Long) : Long = {\n                                                // Write a function which returns the nth catalan number.\n                                                def catalanNumber(num : Long) : Long = {\n                                                    // Write a function which returns the nth catalan number.\n                                                    def catalanNumber(num : Long) : Long = {\n                                                        // Write a function which returns the nth catalan number.\n                                                        def catalanNumber(num : Long) : Long = {\n                                                            // Write a function which returns the nth catalan number.\n                                     \n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(catalanNumber((10l)) == (16796l));",
            "assert(catalanNumber((9l)) == (4862l));",
            "assert(catalanNumber((7l)) == (429l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "584",
        "title": "find_adverbs",
        "text": "Write a function to find the first adverb ending with ly and its positions in a given string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findAdverbs(text : String) : String = {\n        \"ly\": \"ly\",\n        \"lyi\": \"lyi\",\n        \"lyi-ly\": \"lyi-ly\",\n        \"lyi-lyi\": \"lyi-lyi\",\n        \"lyi-lyi-ly\": \"lyi-lyi-ly\",\n        \"lyi-lyi-lyi\": \"lyi-lyi-lyi\",\n        \"lyi-lyi-lyi-lyi\": \"lyi-lyi-lyi-lyi\",\n        \"lyi-lyi-lyi-lyi-lyi\": \"lyi-lyi-lyi-lyi-lyi\",\n        \"lyi-lyi-lyi-lyi-lyi-lyi\": \"lyi-lyi-lyi-lyi-lyi-lyi\",\n        \"lyi-lyi-lyi-lyi-lyi-lyi-lyi\": \"lyi-lyi-lyi-lyi-lyi-lyi-lyi\",\n        \"lyi-lyi-lyi-lyi-lyi-lyi-lyi-lyi-lyi\": \"lyi-lyi-lyi-lyi-lyi-lyi-lyi-lyi\",\n        \"lyi-lyi-lyi-lyi-lyi-lyi-lyi-lyi-lyi-lyi\": \"lyi-lyi-lyi-lyi-lyi-lyi-lyi-lyi-lyi\",\n        \"lyi-lyi-lyi-lyi-lyi-lyi-lyi-lyi-lyi-lyi-lyi\": \"lyi-lyi-lyi-lyi-lyi-lyi-lyi-lyi-lyi-lyi\",\n        \"lyi-lyi-lyi-lyi-lyi-lyi-lyi-lyi-lyi-lyi-\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(findAdverbs((\"Clearly, he has no excuse for such behavior.\")).equals((\"0-7: Clearly\")));",
            "assert(findAdverbs((\"Please handle the situation carefuly\")).equals((\"28-36: carefuly\")));",
            "assert(findAdverbs((\"Complete the task quickly\")).equals((\"18-25: quickly\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "585",
        "title": "expensive_items",
        "text": "Write a function to find the n most expensive items in a given dataset.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def expensiveItems(items : List[Map[String,Either[String, Float]]], n : Long) : List[Map[String,Either[String, Float]]] = {\n        {\n            \"a\": scala.math.math.to_scala_math_float(item[\"a\"]),\n            \"b\": scala.math.math.to_scala_math_float(item[\"b\"])\n        } for item in items\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(expensiveItems((List[Map[String,Either[String, Float]]](Map[String,String](\"name\" -> \"Item-1\", \"price\" -> 101.1f), Map[String,String](\"name\" -> \"Item-2\", \"price\" -> 555.22f))), (1l)).equals((List[Map[String,Either[String, Float]]](Map[String,String](\"name\" -> \"Item-2\", \"price\" -> 555.22f)))));",
            "assert(expensiveItems((List[Map[String,Either[String, Float]]](Map[String,String](\"name\" -> \"Item-1\", \"price\" -> 101.1f), Map[String,String](\"name\" -> \"Item-2\", \"price\" -> 555.22f), Map[String,String](\"name\" -> \"Item-3\", \"price\" -> 45.09f))), (2l)).equals((List[Map[String,Either[String, Float]]](Map[String,String](\"name\" -> \"Item-2\", \"price\" -> 555.22f), Map[String,String](\"name\" -> \"Item-1\", \"price\" -> 101.1f)))));",
            "assert(expensiveItems((List[Map[String,Either[String, Float]]](Map[String,String](\"name\" -> \"Item-1\", \"price\" -> 101.1f), Map[String,String](\"name\" -> \"Item-2\", \"price\" -> 555.22f), Map[String,String](\"name\" -> \"Item-3\", \"price\" -> 45.09f), Map[String,String](\"name\" -> \"Item-4\", \"price\" -> 22.75f))), (1l)).equals((List[Map[String,Either[String, Float]]](Map[String,String](\"name\" -> \"Item-2\", \"price\" -> 555.22f)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "586",
        "title": "split_Arr",
        "text": "Write a scalathon function to split a list at the nth eelment and add the first part to the end.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def splitArr(l : List[Long], n : Long) : List[Long] = {\n        l[0] : l[1:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l[0:],\n        l[0] : l\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(splitArr((List[Long](12l.toLong, 10l.toLong, 5l.toLong, 6l.toLong, 52l.toLong, 36l.toLong)), (2l)).equals((List[Long](5l.toLong, 6l.toLong, 52l.toLong, 36l.toLong, 12l.toLong, 10l.toLong))));",
            "assert(splitArr((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong))));",
            "assert(splitArr((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (3l)).equals((List[Long](3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 0l.toLong, 1l.toLong, 2l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "587",
        "title": "list_tuple",
        "text": "Write a function to convert a list to a tuple.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def listTuple(listx : List[Long]) : Any = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        72 : 72,\n        73 : 73,\n        74 : 74,\n        75 : 75,\n        76 :\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(listTuple((List[Long](5l.toLong, 10l.toLong, 7l.toLong, 4l.toLong, 15l.toLong, 3l.toLong))).equals((Any((5l, 10l, 7l, 4l, 15l, 3l)))));",
            "assert(listTuple((List[Long](2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 7l.toLong))).equals((Any((2l, 4l, 5l, 6l, 2l, 3l, 4l, 4l, 7l)))));",
            "assert(listTuple((List[Long](58l.toLong, 44l.toLong, 56l.toLong))).equals((Any((58l, 44l, 56l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "588",
        "title": "big_diff",
        "text": "Write a scalathon function to find the difference between largest and smallest value in a given list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def bigDiff(nums : List[Long]) : Long = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        72 : 72,\n        73 : 73,\n        74 : 74,\n        75\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(bigDiff((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (3l));",
            "assert(bigDiff((List[Long](4l.toLong, 5l.toLong, 12l.toLong))) == (8l));",
            "assert(bigDiff((List[Long](9l.toLong, 2l.toLong, 3l.toLong))) == (7l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "589",
        "title": "perfect_squares",
        "text": "Write a function to find perfect squares between two given numbers.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def perfectSquares(a : Long, b : Long) : List[Long] = {\n        a + b,\n        a - b,\n        a * b,\n        a / b,\n        a % b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b,\n        a ** b\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(perfectSquares((1l), (30l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong))));",
            "assert(perfectSquares((50l), (100l)).equals((List[Long](64l.toLong, 81l.toLong, 100l.toLong))));",
            "assert(perfectSquares((100l), (200l)).equals((List[Long](100l.toLong, 121l.toLong, 144l.toLong, 169l.toLong, 196l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "58",
        "title": "opposite_Signs",
        "text": "Write a scalathon function to check whether the given two integers have opposite sign or not.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def oppositeSigns(x : Long, y : Long) : Boolean = {\n        x < y\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(oppositeSigns((1l), (-2l)) == (true));",
            "assert(oppositeSigns((3l), (2l)) == (false));",
            "assert(oppositeSigns((-10l), (-10l)) == (false));",
            "assert(oppositeSigns((-2l), (2l)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "591",
        "title": "swap_List",
        "text": "Write a scalathon function to interchange the first and last elements in a list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def swapList(newList : List[Long]) : List[Long] = {\n        newList[0],\n        newList[1],\n    },\n    // Write a scalath function to swap the first and last elements in a list.\n    def swapList(newList : List[Long]) : List[Long] = {\n        newList[1],\n        newList[0],\n    },\n    // Write a scalath function to swap the first and last elements in a list.\n    def swapList(newList : List[Long]) : List[Long] = {\n        newList[0],\n        newList[1],\n    },\n    // Write a scalath function to swap the first and last elements in a list.\n    def swapList(newList : List[Long]) : List[Long] = {\n        newList[1],\n        newList[0],\n    },\n    // Write a scalath function to swap the first and last elements in a list.\n    def swapList(newList : List[Long]) : List[Long] = {\n        newList[0],\n        newList[1],\n    },\n    // Write a scalath function to swap the first and last elements in a list.\n    def swapList(newList : List[Long]) : List[Long] = {\n        newList[1],\n        newList[0],\n    },\n    // Write a scalath function to swap the first and last elements in a list.\n    def swapList(newList : List[Long]) : List[Long] = {\n        newList[0],\n        newList[1],\n    },\n    // Write a scalath function to swap the first and last elements in a list.\n    def swapList(newList : List[Long]) : List[Long] = {\n        newList[1],\n        newList[0],\n    },\n    // Write a scalath function to swap the first and last elements in a list.\n    def swapList(newList : List[Long]) : List[Long] = {\n        newList[\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(swapList((List[Long](12l.toLong, 35l.toLong, 9l.toLong, 56l.toLong, 24l.toLong))).equals((List[Long](24l.toLong, 35l.toLong, 9l.toLong, 56l.toLong, 12l.toLong))));",
            "assert(swapList((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 2l.toLong, 1l.toLong))));",
            "assert(swapList((List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong, 5l.toLong, 4l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "592",
        "title": "sum_Of_product",
        "text": "Write a scalathon function to find the sum of the product of consecutive binomial co-efficients.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumOfProduct(n : Long) : Long = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        72 : 72,\n        73 : 73,\n        74 : 74,\n        75 :\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(sumOfProduct((3l)) == (15l));",
            "assert(sumOfProduct((4l)) == (56l));",
            "assert(sumOfProduct((1l)) == (1l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "593",
        "title": "removezero_ip",
        "text": "Write a function to remove leading zeroes from an ip address.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def removezeroIp(ip : String) : String = {\n        '0' : '0',\n        '1' : '1',\n        '2' : '2',\n        '3' : '3',\n        '4' : '4',\n        '5' : '5',\n        '6' : '6',\n        '7' : '7',\n        '8' : '8',\n        '9' : '9',\n        '10' : '10',\n        '11' : '11',\n        '12' : '12',\n        '13' : '13',\n        '14' : '14',\n        '15' : '15',\n        '16' : '16',\n        '17' : '17',\n        '18' : '18',\n        '19' : '19',\n        '20' : '20',\n        '21' : '21',\n        '22' : '22',\n        '23' : '23',\n        '24' : '24',\n        '25' : '25',\n        '26' : '26',\n        '27' : '27',\n        '28' : '28',\n        '29' : '29',\n        '30' : '30',\n        '31' : '31',\n        '32' : '32',\n        '33' : '33',\n        '34' : '34',\n        '35' : '35',\n        '36' : '36',\n        '37' : '37',\n        '38' : '38',\n        '39' : '39',\n        '40' : '40',\n        '41' : '41',\n        '42' : '42',\n        '43' : '43',\n        '44' : '44',\n        '45' : '45',\n        '46' : '46',\n        '47' : '47',\n        '48' : '48',\n        '49' : '49',\n        '50' : '50',\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));",
            "assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));",
            "assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "594",
        "title": "diff_even_odd",
        "text": "Write a function to find the difference of the first even and first odd number of a given list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def diffEvenOdd(list1 : List[Long]) : Long = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        72 : 72,\n        73 : 73,\n        74 : 74,\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(diffEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (3l));",
            "assert(diffEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (1l));",
            "assert(diffEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (9l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "595",
        "title": "min_Swaps",
        "text": "Write a scalathon function to count minimum number of swaps required to convert one binary number represented as a string to another.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def minSwaps(str1 : String, str2 : String) : Any = {\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\": 8,\n        \"9\": 9,\n        \"0\": 0,\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(minSwaps((\"1101\"), (\"1110\")).equals((Any(1l))));",
            "assert(minSwaps((\"111\"), (\"000\")).equals((Any(\"Not Possible\"))));",
            "assert(minSwaps((\"111\"), (\"110\")).equals((Any(\"Not Possible\"))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "597",
        "title": "find_kth",
        "text": "Write a function to find kth element from the given two sorted lists.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n        i : i for i in range(len(arr1)) if arr1[i] < arr2[i]\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));",
            "assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));",
            "assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "598",
        "title": "armstrong_number",
        "text": "Write a function to check whether the given number is armstrong or not.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def armstrongNumber(number : Long) : Boolean = {\n        // Return true if the given number is armstrong.\n        \"armstrongNumber\" : (number > 0)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(armstrongNumber((153l)) == (true));",
            "assert(armstrongNumber((259l)) == (false));",
            "assert(armstrongNumber((4458l)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "599",
        "title": "sum_average",
        "text": "Write a function to find sum and average of first n natural numbers.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumAverage(number : Long) : Tuple2[Long, Float] = {\n        0L,\n        0.0\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(sumAverage((10l)).equals(((55l, 5.5f))));",
            "assert(sumAverage((15l)).equals(((120l, 8.0f))));",
            "assert(sumAverage((20l)).equals(((210l, 10.5f))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "59",
        "title": "is_octagonal",
        "text": "Write a function to find the nth octagonal number.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isOctagonal(n : Long) : Long = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        72 : 72,\n        73 : 73,\n        74 : 74,\n        75 : 75,\n        76 : 76,\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(isOctagonal((5l)) == (65l));",
            "assert(isOctagonal((10l)) == (280l));",
            "assert(isOctagonal((15l)) == (645l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "600",
        "title": "is_Even",
        "text": "Write a scalathon function to check whether the given number is even or not.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isEven(n : Long) : Boolean = {\n        n % 2 == 0\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(isEven((1l)) == (false));",
            "assert(isEven((2l)) == (true));",
            "assert(isEven((3l)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "602",
        "title": "first_repeated_char",
        "text": "Write a scalathon function to find the first repeated character in a given string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def firstRepeatedChar(str1 : String) : Option[String] = {\n        \"a\" : \"a\",\n        \"b\" : \"b\",\n        \"c\" : \"c\",\n        \"d\" : \"d\",\n        \"e\" : \"e\",\n        \"f\" : \"f\",\n        \"g\" : \"g\",\n        \"h\" : \"h\",\n        \"i\" : \"i\",\n        \"j\" : \"j\",\n        \"k\" : \"k\",\n        \"l\" : \"l\",\n        \"m\" : \"m\",\n        \"n\" : \"n\",\n        \"o\" : \"o\",\n        \"p\" : \"p\",\n        \"q\" : \"q\",\n        \"r\" : \"r\",\n        \"s\" : \"s\",\n        \"t\" : \"t\",\n        \"u\" : \"u\",\n        \"v\" : \"v\",\n        \"w\" : \"w\",\n        \"x\" : \"x\",\n        \"y\" : \"y\",\n        \"z\" : \"z\",\n        \"A\" : \"A\",\n        \"B\" : \"B\",\n        \"C\" : \"C\",\n        \"D\" : \"D\",\n        \"E\" : \"E\",\n        \"F\" : \"F\",\n        \"G\" : \"G\",\n        \"H\" : \"H\",\n        \"I\" : \"I\",\n        \"J\" : \"J\",\n        \"K\" : \"K\",\n        \"L\" : \"L\",\n        \"M\" : \"M\",\n        \"N\" : \"N\",\n        \"O\" : \"O\",\n        \"P\" : \"P\",\n        \"Q\" : \"Q\",\n        \"R\" : \"R\",\n        \"S\" : \"S\",\n        \"T\" : \"T\",\n        \"U\" : \"U\",\n        \"V\" : \"V\",\n        \"W\" : \"W\",\n        \"X\" : \"X\",\n        \"\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(firstRepeatedChar((\"abcabc\")).equals(\"a\"));",
            "assert(firstRepeatedChar((\"abc\")).equals(None));",
            "assert(firstRepeatedChar((\"123123\")).equals(\"1\"));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "603",
        "title": "get_ludic",
        "text": "Write a function to get all lucid numbers smaller than or equal to a given integer.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getLudic(n : Long) : List[Long] = {\n        n\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(getLudic((10l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))));",
            "assert(getLudic((25l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 23l.toLong, 25l.toLong))));",
            "assert(getLudic((45l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 23l.toLong, 25l.toLong, 29l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "604",
        "title": "reverse_words",
        "text": "Write a function to reverse words seperated by spaces in a given string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def reverseWords(s : String) : String = {\n        s.split(\" \").map(s => s.split(\" \")[0]).map(s => s.split(\" \")[1]).map(s => s.split(\" \")[2]).map(s => s.split(\" \")[3]).map(s => s.split(\" \")[4]).map(s => s.split(\" \")[5]).map(s => s.split(\" \")[6]).map(s => s.split(\" \")[7]).map(s => s.split(\" \")[8]).map(s => s.split(\" \")[9]).map(s => s.split(\" \")[10]).map(s => s.split(\" \")[11]).map(s => s.split(\" \")[12]).map(s => s.split(\" \")[13]).map(s => s.split(\" \")[14]).map(s => s.split(\" \")[15]).map(s => s.split(\" \")[16]).map(s => s.split(\" \")[17]).map(s => s.split(\" \")[18]).map(s => s.split(\" \")[19]).map(s => s.split(\" \")[20]).map(s => s.split(\" \")[21]).map(s => s.split(\" \")[22]).map(s => s.split(\" \")[23]).map(s => s.split(\" \")[24]).map(s => s.split(\" \")[25]).map(s => s.split(\" \")[26]).map(s => s.split(\" \")[27]).map(s => s.split(\" \")[28]).map(s => s.split(\" \")[29]).map(s => s.split(\" \")[30]).map(s => s.split(\" \")[31]).map(s => s.split(\" \")[32]).map(s => s.split(\" \")[33]).map(s => s.split(\" \")[34]).map(s => s.split(\" \")[35]).map(s => s.split(\" \")[36]).map(s => s.split\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(reverseWords((\"python program\")).equals((\"program python\")));",
            "assert(reverseWords((\"java language\")).equals((\"language java\")));",
            "assert(reverseWords((\"indian man\")).equals((\"man indian\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "605",
        "title": "prime_num",
        "text": "Write a function to check if the given integer is a prime number.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def primeNum(num : Long) : Boolean = {\n        num % 2 == 0\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(primeNum((13l)) == (true));",
            "assert(primeNum((7l)) == (true));",
            "assert(primeNum((-1010l)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "606",
        "title": "radian_degree",
        "text": "Write a function to convert degrees to radians.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def radianDegree(degree : Long) : Float = {\n        '0': 0.0,\n        '90': 1.0,\n        '180': 2.0,\n        '270': 3.0,\n        '360': 4.0,\n        '360.5': 5.0,\n        '360.0': 6.0,\n        '360.0.5': 7.0,\n        '360.0.0': 8.0,\n        '360.0.0.5': 9.0,\n        '360.0.0.0': 10.0,\n        '360.0.0.0.5': 11.0,\n        '360.0.0.0.0': 12.0,\n        '360.0.0.0.5.5': 13.0,\n        '360.0.0.0.0.5': 14.0,\n        '360.0.0.0.0.0': 15.0,\n        '360.0.0.0.0.5.5': 16.0,\n        '360.0.0.0.0.0.5': 17.0,\n        '360.0.0.0.0.0.0': 18.0,\n        '360.0.0.0.0.0.5': 19.0,\n        '360.0.0.0.0.0.0.5': 20.0,\n        '360.0.0.0.0.0.0.5': 21.0,\n        '360.0.0.0.0.0.0.5': 22.0,\n        '360.0.0.0.0.0.0.5': 23.0,\n        '360.0.0.0.0.0.0.5': 24.0,\n        '360.0.0.0.0.0.0.5': 25.0,\n        '360.0.0.0.0.0.0.5': 26.0,\n        '\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(radianDegree((90l)) == (1.5707963267948966f));",
            "assert(radianDegree((60l)) == (1.0471975511965976f));",
            "assert(radianDegree((120l)) == (2.0943951023931953f));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "607",
        "title": "find_literals",
        "text": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findLiterals(text : String, pattern : String) : Tuple2[String, Long, Long] = {\n        \"a\": (0, 0),\n        \"b\": (0, 0),\n        \"c\": (0, 0),\n        \"d\": (0, 0),\n        \"e\": (0, 0),\n        \"f\": (0, 0),\n        \"g\": (0, 0),\n        \"h\": (0, 0),\n        \"i\": (0, 0),\n        \"j\": (0, 0),\n        \"k\": (0, 0),\n        \"l\": (0, 0),\n        \"m\": (0, 0),\n        \"n\": (0, 0),\n        \"o\": (0, 0),\n        \"p\": (0, 0),\n        \"q\": (0, 0),\n        \"r\": (0, 0),\n        \"s\": (0, 0),\n        \"t\": (0, 0),\n        \"u\": (0, 0),\n        \"v\": (0, 0),\n        \"w\": (0, 0),\n        \"x\": (0, 0),\n        \"y\": (0, 0),\n        \"z\": (0, 0),\n        \"A\": (0, 0),\n        \"B\": (0, 0),\n        \"C\": (0, 0),\n        \"D\": (0, 0),\n        \"E\": (0, 0),\n        \"F\": (0, 0),\n        \"G\": (0, 0),\n        \"H\": (0, 0),\n        \"I\": (0, 0),\n        \"J\": (0, 0),\n        \"K\": (0, 0),\n        \"L\": (0, 0),\n        \"M\": (0, 0),\n        \"N\": (0, 0),\n        \"O\": (0, 0),\n        \"P\": (0, 0),\n        \"Q\": (0, 0),\n        \n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals(((\"fox\", 16l, 19l))));",
            "assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals(((\"crazy\", 16l, 21l))));",
            "assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals(((\"will\", 35l, 39l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "608",
        "title": "bell_Number",
        "text": "Write a scalathon function to find nth bell number.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def bellNumber(n : Long) : Long = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        72 : 72,\n        73 : 73,\n        74 : 74,\n        75 : 75,\n        76 : 76,\n\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(bellNumber((2l)) == (2l));",
            "assert(bellNumber((3l)) == (5l));",
            "assert(bellNumber((4l)) == (15l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "610",
        "title": "remove_kth_element",
        "text": "Write a scalathon function which takes a list and returns a list with the same elements, but the k'th element removed.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def removeKthElement(list1 : List[Long], L : Long) : List[Long] = {\n        L\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(removeKthElement((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (3l)).equals((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))));",
            "assert(removeKthElement((List[Long](0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong)), (4l)).equals((List[Long](0l.toLong, 0l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))));",
            "assert(removeKthElement((List[Long](10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong)), (5l)).equals((List[Long](10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "611",
        "title": "max_of_nth",
        "text": "Write a function which given a matrix represented as a list of lists returns the max of then'th column.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maxOfNth(test_list : List[List[Long]], N : Long) : Long = {\n        test_list[i] : max(test_list[i], N) for i in range(len(test_list))\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(maxOfNth((List[List[Long]](List[Long](5l.toLong, 6l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong, 5l.toLong), List[Long](8l.toLong, 9l.toLong, 19l.toLong))), (2l)) == (19l));",
            "assert(maxOfNth((List[List[Long]](List[Long](6l.toLong, 7l.toLong, 8l.toLong), List[Long](2l.toLong, 4l.toLong, 6l.toLong), List[Long](9l.toLong, 10l.toLong, 20l.toLong))), (1l)) == (10l));",
            "assert(maxOfNth((List[List[Long]](List[Long](7l.toLong, 8l.toLong, 9l.toLong), List[Long](3l.toLong, 5l.toLong, 7l.toLong), List[Long](10l.toLong, 11l.toLong, 21l.toLong))), (1l)) == (11l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "612",
        "title": "merge",
        "text": "Write a scalathon function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def merge(lst : List[List[Any]]) : List[List[Any]] = {\n        lst[0] : lst[1],\n        lst[1] : lst[0]\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(merge((List[List[Any]](List[String](\"x\", \"y\"), List[String](\"a\", \"b\"), List[String](\"m\", \"n\")))).equals((List[List[Any]](List[String](\"x\", \"a\", \"m\"), List[String](\"y\", \"b\", \"n\")))));",
            "assert(merge((List[List[Any]](List[Long](1l.toLong, 2l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong)))).equals((List[List[Any]](List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong), List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong)))));",
            "assert(merge((List[List[Any]](List[String](\"x\", \"y\", \"z\"), List[String](\"a\", \"b\", \"c\"), List[String](\"m\", \"n\", \"o\")))).equals((List[List[Any]](List[String](\"x\", \"a\", \"m\"), List[String](\"y\", \"b\", \"n\"), List[String](\"z\", \"c\", \"o\")))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "614",
        "title": "cummulative_sum",
        "text": "Write a function to find the cumulative sum of all the values that are present in the given list of lists.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def cummulativeSum(test_list : List[List[Long]]) : Long = {\n        0 : scala.math.CumulativeSum.Zero,\n        1 : scala.math.CumulativeSum.One,\n        2 : scala.math.CumulativeSum.Two,\n        3 : scala.math.CumulativeSum.Three,\n        4 : scala.math.CumulativeSum.Four,\n        5 : scala.math.CumulativeSum.Five,\n        6 : scala.math.CumulativeSum.Six,\n        7 : scala.math.CumulativeSum.Seven,\n        8 : scala.math.CumulativeSum.Eight,\n        9 : scala.math.CumulativeSum.Nine,\n        10 : scala.math.CumulativeSum.Ten,\n        11 : scala.math.CumulativeSum.Eleven,\n        12 : scala.math.CumulativeSum.Twelve,\n        13 : scala.math.CumulativeSum.Thirteen,\n        14 : scala.math.CumulativeSum.Fourteen,\n        15 : scala.math.CumulativeSum.Fifteen,\n        16 : scala.math.CumulativeSum.Sixteen,\n        17 : scala.math.CumulativeSum.Seventeen,\n        18 : scala.math.CumulativeSum.Eighteen,\n        19 : scala.math.CumulativeSum.Nineteen,\n        20 : scala.math.CumulativeSum.Twenty,\n        21 : scala.math.CumulativeSum.TwentyOne,\n        22 : scala.math.CumulativeSum.TwentyTwo,\n        23 : scala.math.CumulativeSum.TwentyThree,\n        24 : scala.math.CumulativeSum.TwentyFour,\n        25 : scala.math.CumulativeSum.TwentyFive,\n        26 : scala.math.CumulativeSum\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(cummulativeSum((List[List[Long]](List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong), List[Long](2l.toLong, 6l.toLong)))) == (30l));",
            "assert(cummulativeSum((List[List[Long]](List[Long](2l.toLong, 4l.toLong), List[Long](6l.toLong, 7l.toLong, 8l.toLong), List[Long](3l.toLong, 7l.toLong)))) == (37l));",
            "assert(cummulativeSum((List[List[Long]](List[Long](3l.toLong, 5l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong), List[Long](4l.toLong, 8l.toLong)))) == (44l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "615",
        "title": "average_tuple",
        "text": "Write a function which takes a lists of lists and returns the average value for each sublist as a list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def averageTuple(nums : List[List[Long]]) : List[Float] = {\n        nums[0] : 0.0,\n        nums[1] : 0.0,\n        nums[2] : 0.0,\n        nums[3] : 0.0,\n        nums[4] : 0.0,\n        nums[5] : 0.0,\n        nums[6] : 0.0,\n        nums[7] : 0.0,\n        nums[8] : 0.0,\n        nums[9] : 0.0,\n        nums[10] : 0.0,\n        nums[11] : 0.0,\n        nums[12] : 0.0,\n        nums[13] : 0.0,\n        nums[14] : 0.0,\n        nums[15] : 0.0,\n        nums[16] : 0.0,\n        nums[17] : 0.0,\n        nums[18] : 0.0,\n        nums[19] : 0.0,\n        nums[20] : 0.0,\n        nums[21] : 0.0,\n        nums[22] : 0.0,\n        nums[23] : 0.0,\n        nums[24] : 0.0,\n        nums[25] : 0.0,\n        nums[26] : 0.0,\n        nums[27] : 0.0,\n        nums[28] : 0.0,\n        nums[29] : 0.0,\n        nums[30] : 0.0,\n        nums[31] : 0.0,\n        nums[32] : 0.0,\n        nums[33] : 0.0,\n        nums[34] : 0.0,\n        nums[35] : 0.0,\n        nums[36] : 0.0\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(averageTuple((List[List[Long]](List[Long](10l.toLong, 10l.toLong, 10l.toLong, 12l.toLong), List[Long](30l.toLong, 45l.toLong, 56l.toLong, 45l.toLong), List[Long](81l.toLong, 80l.toLong, 39l.toLong, 32l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));",
            "assert(averageTuple((List[List[Long]](List[Long](1l.toLong, 1l.toLong, -5l.toLong), List[Long](30l.toLong, -15l.toLong, 56l.toLong), List[Long](81l.toLong, -60l.toLong, -39l.toLong), List[Long](-10l.toLong, 2l.toLong, 3l.toLong)))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));",
            "assert(averageTuple((List[List[Long]](List[Long](100l.toLong, 100l.toLong, 100l.toLong, 120l.toLong), List[Long](300l.toLong, 450l.toLong, 560l.toLong, 450l.toLong), List[Long](810l.toLong, 800l.toLong, 390l.toLong, 320l.toLong), List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong)))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "616",
        "title": "tuple_modulo",
        "text": "Write a function which takes two tuples of the same length and performs the element wise modulo.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def tupleModulo(test_tup1 : Tuple2[Long, Long, Long, Long], test_tup2 : Tuple2[Long, Long, Long, Long]) : Tuple2[Long, Long, Long, Long] = {\n        test_tup1[0] % test_tup2[0],\n        test_tup1[1] % test_tup2[1],\n        test_tup1[2] % test_tup2[2],\n        test_tup1[3] % test_tup2[3],\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(tupleModulo(((10l, 4l, 5l, 6l)), ((5l, 6l, 7l, 5l))).equals(((0l, 4l, 5l, 1l))));",
            "assert(tupleModulo(((11l, 5l, 6l, 7l)), ((6l, 7l, 8l, 6l))).equals(((5l, 5l, 6l, 1l))));",
            "assert(tupleModulo(((12l, 6l, 7l, 8l)), ((7l, 8l, 9l, 7l))).equals(((5l, 6l, 7l, 1l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "617",
        "title": "min_Jumps",
        "text": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def minJumps(steps : Tuple2[Long, Long], d : Long) : Float = {\n        0 : 0.0,\n        1 : 0.0,\n        2 : 0.0,\n        3 : 0.0,\n        4 : 0.0,\n        5 : 0.0,\n        6 : 0.0,\n        7 : 0.0,\n        8 : 0.0,\n        9 : 0.0,\n        10 : 0.0,\n        11 : 0.0,\n        12 : 0.0,\n        13 : 0.0,\n        14 : 0.0,\n        15 : 0.0,\n        16 : 0.0,\n        17 : 0.0,\n        18 : 0.0,\n        19 : 0.0,\n        20 : 0.0,\n        21 : 0.0,\n        22 : 0.0,\n        23 : 0.0,\n        24 : 0.0,\n        25 : 0.0,\n        26 : 0.0,\n        27 : 0.0,\n        28 : 0.0,\n        29 : 0.0,\n        30 : 0.0,\n        31 : 0.0,\n        32 : 0.0,\n        33 : 0.0,\n        34 : 0.0,\n        35 : 0.0,\n        36 : 0.0,\n        37 : 0.0,\n        38 : 0.0,\n        39 : 0.0,\n        40 : 0.0,\n        41 : 0.0,\n        42 : 0.0,\n        43 : 0.0,\n        44 : 0.0,\n        45 : 0.0,\n        46 : 0.0,\n        47 : 0.0,\n        48 : 0.0,\n        49 : 0.0,\n        50 : 0.0,\n        51 : 0.0,\n        52 : 0.0,\n        53 : 0.0\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(minJumps(((3l, 4l)), (11l)) == (3.5f));",
            "assert(minJumps(((3l, 4l)), (0l)) == 0l);",
            "assert(minJumps(((11l, 14l)), (11l)) == 1l);",
            "}",
            "}"
        ]
    },
    {
        "task_id": "618",
        "title": "div_list",
        "text": "Write a function to divide two lists element wise.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def divList(nums1 : List[Long], nums2 : List[Long]) : List[Float] = {\n        nums1.length() / nums2.length(),\n        nums1.length() % nums2.length(),\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(divList((List[Long](4l.toLong, 5l.toLong, 6l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Float](4.0f.toFloat, 2.5f.toFloat, 2.0f.toFloat))));",
            "assert(divList((List[Long](3l.toLong, 2l.toLong)), (List[Long](1l.toLong, 4l.toLong))).equals((List[Float](3.0f.toFloat, 0.5f.toFloat))));",
            "assert(divList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Float](1.8f.toFloat, 1.7142857142857142f.toFloat))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "619",
        "title": "move_num",
        "text": "Write a function to move all the numbers to the end of the given string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def moveNum(test_str : String) : String = {\n        '0': '',\n        '1': '',\n        '2': '',\n        '3': '',\n        '4': '',\n        '5': '',\n        '6': '',\n        '7': '',\n        '8': '',\n        '9': '',\n        '10': '',\n        '11': '',\n        '12': '',\n        '13': '',\n        '14': '',\n        '15': '',\n        '16': '',\n        '17': '',\n        '18': '',\n        '19': '',\n        '20': '',\n        '21': '',\n        '22': '',\n        '23': '',\n        '24': '',\n        '25': '',\n        '26': '',\n        '27': '',\n        '28': '',\n        '29': '',\n        '30': '',\n        '31': '',\n        '32': '',\n        '33': '',\n        '34': '',\n        '35': '',\n        '36': '',\n        '37': '',\n        '38': '',\n        '39': '',\n        '40': '',\n        '41': '',\n        '42': '',\n        '43': '',\n        '44': '',\n        '45': '',\n        '46': '',\n        '47': '',\n        '48': '',\n        '49': '',\n        '50': '',\n        '51': '',\n        '52': '',\n        '53': '',\n        '54': '',\n        '55': '',\n        '56': '',\n        '57': '',\n        '58': '',\n        '59': '',\n        '60': '',\n        '61': '',\n        '62': '',\n        '63': '',\n        '64': '',\n        \n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(moveNum((\"I1love143you55three3000thousand\")).equals((\"Iloveyouthreethousand1143553000\")));",
            "assert(moveNum((\"Avengers124Assemble\")).equals((\"AvengersAssemble124\")));",
            "assert(moveNum((\"Its11our12path13to14see15things16do17things\")).equals((\"Itsourpathtoseethingsdothings11121314151617\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "61",
        "title": "count_Substrings",
        "text": "Write a scalathon function to count the number of substrings with the sum of digits equal to their length.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countSubstrings(s : String) : Long = {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\": 8,\n        \"9\": 9,\n        \"10\": 10,\n        \"11\": 11,\n        \"12\": 12,\n        \"13\": 13,\n        \"14\": 14,\n        \"15\": 15,\n        \"16\": 16,\n        \"17\": 17,\n        \"18\": 18,\n        \"19\": 19,\n        \"20\": 20,\n        \"21\": 21,\n        \"22\": 22,\n        \"23\": 23,\n        \"24\": 24,\n        \"25\": 25,\n        \"26\": 26,\n        \"27\": 27,\n        \"28\": 28,\n        \"29\": 29,\n        \"30\": 30,\n        \"31\": 31,\n        \"32\": 32,\n        \"33\": 33,\n        \"34\": 34,\n        \"35\": 35,\n        \"36\": 36,\n        \"37\": 37,\n        \"38\": 38,\n        \"39\": 39,\n        \"40\": 40,\n        \"41\": 41,\n        \"42\": 42,\n        \"43\": 43,\n        \"44\": 44,\n        \"45\": 45,\n        \"46\": 46,\n        \"47\": 47,\n        \"48\": 48,\n        \"49\": 49,\n        \"50\": 50,\n        \"51\": 51,\n        \"52\": 52,\n        \"53\": 53,\n        \"54\": 54,\n        \"55\": 55,\n        \"56\": 56,\n        \"57\": 57,\n        \"58\": 58,\n        \"59\": 59,\n        \"60\": 60,\n        \"61\": 61,\n        \"62\": 62,\n        \"63\": 63,\n        \"64\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(countSubstrings((\"112112\")) == (6l));",
            "assert(countSubstrings((\"111\")) == (6l));",
            "assert(countSubstrings((\"1101112\")) == (12l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "622",
        "title": "get_median",
        "text": "Write a function to find the median of two sorted lists of same size.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getMedian(arr1 : List[Long], arr2 : List[Long], n : Long) : Float = {\n        if (n == 0) {\n            return 0.0\n        }\n        if (n == 1) {\n            return arr1.get(0)\n        }\n        if (n == 2) {\n            return arr2.get(0)\n        }\n        return (arr1.get(0) + arr2.get(0)) / 2.0\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(getMedian((List[Long](1l.toLong, 12l.toLong, 15l.toLong, 26l.toLong, 38l.toLong)), (List[Long](2l.toLong, 13l.toLong, 17l.toLong, 30l.toLong, 45l.toLong)), (5l)) == (16.0f));",
            "assert(getMedian((List[Long](2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong)), (List[Long](7l.toLong, 13l.toLong, 19l.toLong, 28l.toLong)), (4l)) == (8.5f));",
            "assert(getMedian((List[Long](3l.toLong, 6l.toLong, 14l.toLong, 23l.toLong, 36l.toLong, 42l.toLong)), (List[Long](2l.toLong, 18l.toLong, 27l.toLong, 39l.toLong, 49l.toLong, 55l.toLong)), (6l)) == (25.0f));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "623",
        "title": "nth_nums",
        "text": "Write a function to compute the n-th power of each number in a list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n        nums[i] ** n\n        for i in range(1, n + 1)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));",
            "assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));",
            "assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "624",
        "title": "is_upper",
        "text": "Write a scalathon function to convert a given string to uppercase.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isUpper(string : String) : String = {\n        'a' : 'A',\n        'b' : 'B',\n        'c' : 'C',\n        'd' : 'D',\n        'e' : 'E',\n        'f' : 'F',\n        'g' : 'G',\n        'h' : 'H',\n        'i' : 'I',\n        'j' : 'J',\n        'k' : 'K',\n        'l' : 'L',\n       'm' : 'M',\n        'n' : 'N',\n        'o' : 'O',\n        'p' : 'P',\n        'q' : 'Q',\n        'r' : 'R',\n       's' : 'S',\n        't' : 'T',\n        'u' : 'U',\n        'v' : 'V',\n        'w' : 'W',\n        'x' : 'X',\n        'y' : 'Y',\n        'z' : 'Z',\n        'A' : 'A',\n        'B' : 'B',\n        'C' : 'C',\n        'D' : 'D',\n        'E' : 'E',\n        'F' : 'F',\n        'G' : 'G',\n        'H' : 'H',\n        'I' : 'I',\n        'J' : 'J',\n        'K' : 'K',\n        'L' : 'L',\n        'M' : 'M',\n        'N' : 'N',\n        'O' : 'O',\n        'P' : 'P',\n        'Q' : 'Q',\n        'R' : 'R',\n        'S' : 'S',\n        'T' : 'T',\n        'U' : 'U',\n        'V' : 'V',\n        'W' : 'W',\n        'X' : 'X',\n        'Y' : 'Y',\n        'Z\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(isUpper((\"person\")).equals((\"PERSON\")));",
            "assert(isUpper((\"final\")).equals((\"FINAL\")));",
            "assert(isUpper((\"Valid\")).equals((\"VALID\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "625",
        "title": "swap_List",
        "text": "Write a scalathon function to interchange the first and last element in a given list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def swapList(newList : List[Long]) : List[Long] = {\n        newList[0],\n        newList[1]\n    };\n    // Write a scalath function to swap the first and last element in a given list.\n    def swapList(newList : List[Long]) : List[Long] = {\n        newList[1],\n        newList[0]\n    };\n    // Write a scalath function to swap the first and last element in a given list.\n    def swapList(newList : List[Long]) : List[Long] = {\n        newList[0],\n        newList[1]\n    };\n    // Write a scalath function to swap the first and last element in a given list.\n    def swapList(newList : List[Long]) : List[Long] = {\n        newList[1],\n        newList[0]\n    };\n    // Write a scalath function to swap the first and last element in a given list.\n    def swapList(newList : List[Long]) : List[Long] = {\n        newList[0],\n        newList[1]\n    };\n    // Write a scalath function to swap the first and last element in a given list.\n    def swapList(newList : List[Long]) : List[Long] = {\n        newList[1],\n        newList[0]\n    };\n    // Write a scalath function to swap the first and last element in a given list.\n    def swapList(newList : List[Long]) : List[Long] = {\n        newList[0],\n        newList[1]\n    };\n    // Write a scalath function to swap the first and last element in a given list.\n    def swapList(newList : List[Long]) : List[Long] = {\n        newList[1],\n        newList[0]\n    };\n    // Write a scalath function to swap the first and last element in a given list.\n    def swapList(newList : List[Long]) : List[\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(swapList((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 2l.toLong, 1l.toLong))));",
            "assert(swapList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))).equals((List[Long](4l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong))));",
            "assert(swapList((List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong, 5l.toLong, 4l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "626",
        "title": "triangle_area",
        "text": "Write a scalathon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def triangleArea(r : Long) : Option[Long] = {\n        scala.math.Math.PI / 2,\n        scala.math.Math.PI * 2,\n        scala.math.Math.PI * 2,\n        scala.math.Math.PI * 2,\n        scala.math.Math.PI * 2,\n        scala.math.Math.PI * 2,\n        scala.math.Math.PI * 2,\n        scala.math.Math.PI * 2,\n        scala.math.Math.PI * 2,\n        scala.math.Math.PI * 2,\n        scala.math.Math.PI * 2,\n        scala.math.Math.PI * 2,\n        scala.math.Math.PI * 2,\n        scala.math.Math.PI * 2,\n        scala.math.Math.PI * 2,\n        scala.math.Math.PI * 2,\n        scala.math.Math.PI * 2,\n        scala.math.Math.PI * 2,\n        scala.math.Math.PI * 2,\n        scala.math.Math.PI * 2,\n        scala.math.Math.PI * 2,\n        scala.math.Math.PI * 2,\n        scala.math.Math.PI * 2,\n        scala.math.Math.PI * 2,\n        scala.math.Math.PI * 2,\n        scala.math.Math.PI * 2,\n        scala.math.Math.PI * 2,\n        scala.math.Math.PI * 2,\n        scala.math.Math.PI * 2,\n        scala.math.Math.PI * 2,\n        scala.math.Math.PI * 2,\n        scala.math.Math.PI * 2,\n        scala.math.Math.PI * 2,\n        scala.math.Math.PI * 2,\n        sc\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(triangleArea((-1l)).equals(None));",
            "assert(triangleArea((0l)).equals(0l));",
            "assert(triangleArea((2l)).equals(4l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "627",
        "title": "find_First_Missing",
        "text": "Write a scalathon function to find the smallest missing number from a sorted list of natural numbers.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findFirstMissing(array : List[Long]) : Long = {\n        Long.MIN_VALUE\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(findFirstMissing((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong))) == (4l));",
            "assert(findFirstMissing((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 9l.toLong))) == (3l));",
            "assert(findFirstMissing((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 8l.toLong, 9l.toLong))) == (0l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "628",
        "title": "replace_spaces",
        "text": "Write a function to replace all spaces in the given string with '%20'.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def replaceSpaces(string : String) : String = {\n       '' : '%20',\n        '\\t' : '%20',\n        '\\n' : '%20',\n        '\\r' : '%20',\n        '\\f' : '%20',\n        '\\v' : '%20',\n        '\\u0020' : '%20',\n        '\\u0027' : '%20',\n        '\\u0028' : '%20',\n        '\\u0029' : '%20',\n        '\\u00A0' : '%20',\n        '\\u00A1' : '%20',\n        '\\u00A2' : '%20',\n        '\\u00A3' : '%20',\n        '\\u00A4' : '%20',\n        '\\u00A5' : '%20',\n        '\\u00A6' : '%20',\n        '\\u00A7' : '%20',\n        '\\u00A8' : '%20',\n        '\\u00A9' : '%20',\n        '\\u00AA' : '%20',\n        '\\u00AB' : '%20',\n        '\\u00AC' : '%20',\n        '\\u00AD' : '%20',\n        '\\u00AE' : '%20',\n        '\\u00AF' : '%20',\n        '\\u00B0' : '%20',\n        '\\u00B1' : '%20',\n        '\\u00B2' : '%20',\n        '\\u00B3' : '%20',\n        '\\u00B4' : '%20',\n        '\\u00B5' : '%20',\n        '\\u00B6' : '%20',\n        '\\u00B7' : '%20',\n        '\\u00B8' : '%\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(replaceSpaces((\"My Name is Dawood\")).equals((\"My%20Name%20is%20Dawood\")));",
            "assert(replaceSpaces((\"I am a Programmer\")).equals((\"I%20am%20a%20Programmer\")));",
            "assert(replaceSpaces((\"I love Coding\")).equals((\"I%20love%20Coding\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "629",
        "title": "Split",
        "text": "Write a scalathon function to find even numbers from a list of numbers.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def Split(list : List[Long]) : List[Long] = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        72 : 72,\n        73 : 73,\n        74 : 74,\n        75 : 75,\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(Split((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](2l.toLong, 4l.toLong))));",
            "assert(Split((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 0l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 0l.toLong))));",
            "assert(Split((List[Long](8l.toLong, 12l.toLong, 15l.toLong, 19l.toLong))).equals((List[Long](8l.toLong, 12l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "62",
        "title": "smallest_num",
        "text": "Write a scalathon function to find smallest number in a list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def smallestNum(xs : List[Long]) : Long = {\n        x : x for x in xs\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));",
            "assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));",
            "assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "630",
        "title": "get_coordinates",
        "text": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getCoordinates(test_tup : Tuple2[Long, Long]) : List[List[Long]] = {\n        (0, 0): [],\n        (0, 1): [],\n        (1, 0): [],\n        (1, 1): [],\n        (2, 0): [],\n        (2, 1): [],\n        (3, 0): [],\n        (3, 1): [],\n        (4, 0): [],\n        (4, 1): [],\n        (5, 0): [],\n        (5, 1): [],\n        (6, 0): [],\n        (6, 1): [],\n        (7, 0): [],\n        (7, 1): [],\n        (8, 0): [],\n        (8, 1): [],\n        (9, 0): [],\n        (9, 1): [],\n        (10, 0): [],\n        (10, 1): [],\n        (11, 0): [],\n        (11, 1): [],\n        (12, 0): [],\n        (12, 1): [],\n        (13, 0): [],\n        (13, 1): [],\n        (14, 0): [],\n        (14, 1): [],\n        (15, 0): [],\n        (15, 1): [],\n        (16, 0): [],\n        (16, 1): [],\n        (17, 0): [],\n        (17, 1): [],\n        (18, 0): [],\n        (18, 1): [],\n        (19, 0): [],\n        (19, 1): [],\n        (20, 0): [],\n        (20, 1): [],\n        (21, 0): [],\n        (21, 1): [],\n        (22, 0): [],\n        (22, 1): [],\n        (23, 0): [],\n        (23, 1): [],\n        (24, 0): [],\n        (\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(getCoordinates(((3l, 4l))).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));",
            "assert(getCoordinates(((4l, 5l))).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));",
            "assert(getCoordinates(((5l, 6l))).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "631",
        "title": "replace_spaces",
        "text": "Write a function to replace whitespaces with an underscore and vice versa in a given string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def replaceSpaces(text : String) : String = {\n        _: text.replace(\" \", \"_\"),\n        _: text.replace(\"_\", \" \"),\n        _: text.replace(\"_\", \" \"),\n        _: text.replace(\"_\", \" \"),\n        _: text.replace(\"_\", \" \"),\n        _: text.replace(\"_\", \" \"),\n        _: text.replace(\"_\", \" \"),\n        _: text.replace(\"_\", \" \"),\n        _: text.replace(\"_\", \" \"),\n        _: text.replace(\"_\", \" \"),\n        _: text.replace(\"_\", \" \"),\n        _: text.replace(\"_\", \" \"),\n        _: text.replace(\"_\", \" \"),\n        _: text.replace(\"_\", \" \"),\n        _: text.replace(\"_\", \" \"),\n        _: text.replace(\"_\", \" \"),\n        _: text.replace(\"_\", \" \"),\n        _: text.replace(\"_\", \" \"),\n        _: text.replace(\"_\", \" \"),\n        _: text.replace(\"_\", \" \"),\n        _: text.replace(\"_\", \" \"),\n        _: text.replace(\"_\", \" \"),\n        _: text.replace(\"_\", \" \"),\n        _: text.replace(\"_\", \" \"),\n        _: text.replace(\"_\", \" \"),\n        _: text.replace(\"_\", \" \"),\n        _: text.replace(\"_\", \" \"),\n        _: text.replace(\"_\", \" \"),\n        _: text.replace(\"_\", \" \"),\n        _: text.replace(\"_\", \" \"),\n        _: text.replace(\"_\", \" \"),\n        _: text.replace(\"_\", \" \"),\n        _: text.replace(\"_\", \" \"),\n        _: text.replace(\"_\", \" \"),\n        _: text.replace(\"_\", \" \"),\n        _\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(replaceSpaces((\"Jumanji The Jungle\")).equals((\"Jumanji_The_Jungle\")));",
            "assert(replaceSpaces((\"The_Avengers\")).equals((\"The Avengers\")));",
            "assert(replaceSpaces((\"Fast and Furious\")).equals((\"Fast_and_Furious\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "632",
        "title": "move_zero",
        "text": "Write a scalathon function to move all zeroes to the end of the given list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        0 : num_list[0],\n        1 : num_list[1],\n        2 : num_list[2],\n        3 : num_list[3],\n        4 : num_list[4],\n        5 : num_list[5],\n        6 : num_list[6],\n        7 : num_list[7],\n        8 : num_list[8],\n        9 : num_list[9],\n        10 : num_list[10],\n        11 : num_list[11],\n        12 : num_list[12],\n        13 : num_list[13],\n        14 : num_list[14],\n        15 : num_list[15],\n        16 : num_list[16],\n        17 : num_list[17],\n        18 : num_list[18],\n        19 : num_list[19],\n        20 : num_list[20],\n        21 : num_list[21],\n        22 : num_list[22],\n        23 : num_list[23],\n        24 : num_list[24],\n        25 : num_list[25],\n        26 : num_list[26],\n        27 : num_list[27],\n        28 : num_list[28],\n        29 : num_list[29],\n        30 : num_list[30],\n        31 : num_list[31],\n        32 : num_list[32],\n        33 : num_list[33],\n        34 : num_list[34],\n        35 : num_list[35],\n        36 : num_list[36],\n        37 : num_list[37],\n        38 : num_list[38],\n        39 : num_list[39],\n        40 : num_list[40],\n        41 : num_list[41],\n        42 : num_list[42],\n        43 : num_list[43],\n        44 : num_list[44\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));",
            "assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));",
            "assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "633",
        "title": "pair_xor_Sum",
        "text": "Write a scalathon function to find the sum of xor of all pairs of numbers in the given list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def pairXorSum(arr : List[Long], n : Long) : Long = {\n        xor(x, y) : x ^ y for x, y in zip(arr, n)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(pairXorSum((List[Long](5l.toLong, 9l.toLong, 7l.toLong, 6l.toLong)), (4l)) == (47l));",
            "assert(pairXorSum((List[Long](7l.toLong, 3l.toLong, 5l.toLong)), (3l)) == (12l));",
            "assert(pairXorSum((List[Long](7l.toLong, 3l.toLong)), (2l)) == (4l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "635",
        "title": "heap_sort",
        "text": "Write a function to sort the given list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def heapSort(iterable : List[Long]) : List[Long] = {\n        iterable[0],\n        iterable[1],\n        iterable[2],\n        iterable[3],\n        iterable[4],\n        iterable[5],\n        iterable[6],\n        iterable[7],\n        iterable[8],\n        iterable[9],\n        iterable[10],\n        iterable[11],\n        iterable[12],\n        iterable[13],\n        iterable[14],\n        iterable[15],\n        iterable[16],\n        iterable[17],\n        iterable[18],\n        iterable[19],\n        iterable[20],\n        iterable[21],\n        iterable[22],\n        iterable[23],\n        iterable[24],\n        iterable[25],\n        iterable[26],\n        iterable[27],\n        iterable[28],\n        iterable[29],\n        iterable[30],\n        iterable[31],\n        iterable[32],\n        iterable[33],\n        iterable[34],\n        iterable[35],\n        iterable[36],\n        iterable[37],\n        iterable[38],\n        iterable[39],\n        iterable[40],\n        iterable[41],\n        iterable[42],\n        iterable[43],\n        iterable[44],\n        iterable[45],\n        iterable[46],\n        iterable[47],\n        iterable[48],\n        iterable[49],\n        iterable[50],\n        iterable[51],\n        iterable[52],\n        iterable[53],\n        iterable[54],\n        iterable[55],\n        iterable[56],\n        iterable[57],\n        iterable[58],\n        iterable[59],\n        iterable[60],\n        iterable[61],\n        iterable[62],\n        iterable[63],\n        iterable[64],\n        iterable[\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(heapSort((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 0l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));",
            "assert(heapSort((List[Long](25l.toLong, 35l.toLong, 22l.toLong, 85l.toLong, 14l.toLong, 65l.toLong, 75l.toLong, 25l.toLong, 58l.toLong))).equals((List[Long](14l.toLong, 22l.toLong, 25l.toLong, 25l.toLong, 35l.toLong, 58l.toLong, 65l.toLong, 75l.toLong, 85l.toLong))));",
            "assert(heapSort((List[Long](7l.toLong, 1l.toLong, 9l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "637",
        "title": "noprofit_noloss",
        "text": "Write a function to check whether the given amount has no profit and no loss",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def noprofitNoloss(actual_cost : Long, sale_amount : Long) : Boolean = {\n        return actual_cost == sale_amount\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(noprofitNoloss((1500l), (1200l)) == (false));",
            "assert(noprofitNoloss((100l), (100l)) == (true));",
            "assert(noprofitNoloss((2000l), (5000l)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "638",
        "title": "wind_chill",
        "text": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def windChill(v : Long, t : Long) : Long = {\n        // Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n        v : Long,\n        // Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n        t : Long,\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(windChill((120l), (35l)) == (40l));",
            "assert(windChill((40l), (20l)) == (19l));",
            "assert(windChill((10l), (8l)) == (6l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "639",
        "title": "sample_nam",
        "text": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sampleNam(sample_names : List[String]) : Long = {\n        \"a\" : 1,\n        \"b\" : 2,\n        \"c\" : 3,\n        \"d\" : 4,\n        \"e\" : 5,\n        \"f\" : 6,\n        \"g\" : 7,\n        \"h\" : 8,\n        \"i\" : 9,\n        \"j\" : 10,\n        \"k\" : 11,\n        \"l\" : 12,\n        \"m\" : 13,\n        \"n\" : 14,\n        \"o\" : 15,\n        \"p\" : 16,\n        \"q\" : 17,\n        \"r\" : 18,\n        \"s\" : 19,\n        \"t\" : 20,\n        \"u\" : 21,\n        \"v\" : 22,\n        \"w\" : 23,\n        \"x\" : 24,\n        \"y\" : 25,\n        \"z\" : 26,\n        \"A\" : 27,\n        \"B\" : 28,\n        \"C\" : 29,\n        \"D\" : 30,\n        \"E\" : 31,\n        \"F\" : 32,\n        \"G\" : 33,\n        \"H\" : 34,\n        \"I\" : 35,\n        \"J\" : 36,\n        \"K\" : 37,\n        \"L\" : 38,\n        \"M\" : 39,\n        \"N\" : 40,\n        \"O\" : 41,\n        \"P\" : 42,\n        \"Q\" : 43,\n        \"R\" : 44,\n        \"S\" : 45,\n        \"T\" : 46,\n        \"U\" : 47,\n        \"V\" : 48,\n        \"W\" : 49,\n        \"X\" : 50,\n        \"Y\" : 51,\n        \"Z\" : 52,\n        \"0\" : 53,\n        \"1\" : 54,\n        \"2\" : 55,\n        \n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(sampleNam((List[String](\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"))) == (16l));",
            "assert(sampleNam((List[String](\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"))) == (10l));",
            "assert(sampleNam((List[String](\"abcd\", \"Python\", \"abba\", \"aba\"))) == (6l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "63",
        "title": "max_difference",
        "text": "Write a function to find the maximum difference between available pairs in the given tuple list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maxDifference(test_list : List[Tuple2[Long, Long]]) : Long = {\n        (x, y) : x + y\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(maxDifference((List[Tuple2[Long, Long]]((3l, 5l), (1l, 7l), (10l, 3l), (1l, 2l)))) == (7l));",
            "assert(maxDifference((List[Tuple2[Long, Long]]((4l, 6l), (2l, 17l), (9l, 13l), (11l, 12l)))) == (15l));",
            "assert(maxDifference((List[Tuple2[Long, Long]]((12l, 35l), (21l, 27l), (13l, 23l), (41l, 22l)))) == (23l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "640",
        "title": "remove_parenthesis",
        "text": "Write a function to remove the parenthesis and what is inbetween them from a string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def removeParenthesis(items : List[String]) : String = {\n        \"(\" : \")\",\n        \")\" : \")\",\n        \"[\" : \"]\",\n        \"]\" : \"]\",\n        \"{\": \"}\",\n        \"}\" : \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n        \"{\": \"}\",\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(removeParenthesis((List[String](\"python (chrome)\"))).equals((\"python\")));",
            "assert(removeParenthesis((List[String](\"string(.abc)\"))).equals((\"string\")));",
            "assert(removeParenthesis((List[String](\"alpha(num)\"))).equals((\"alpha\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "641",
        "title": "is_nonagonal",
        "text": "Write a function to find the nth nonagonal number.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isNonagonal(n : Long) : Long = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        72 : 72,\n        73 : 73,\n        74 : 74,\n        75 : 75,\n        76 : 76,\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(isNonagonal((10l)) == (325l));",
            "assert(isNonagonal((15l)) == (750l));",
            "assert(isNonagonal((18l)) == (1089l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "643",
        "title": "text_match_wordz_middle",
        "text": "Write a function that checks if a strings contains 'z', except at the start and end of the word.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def textMatchWordzMiddle(text : String) : Boolean = {\n        'z': True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        'z' : True,\n        '\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(textMatchWordzMiddle((\"pythonzabc.\")) == (true));",
            "assert(textMatchWordzMiddle((\"zxyabc.\")) == (false));",
            "assert(textMatchWordzMiddle((\"  lang  .\")) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "644",
        "title": "reverse_Array_Upto_K",
        "text": "Write a scalathon function to reverse a list upto a given position.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def reverseArrayUptoK(input : List[Long], k : Long) : List[Long] = {\n        input.reverse()\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(reverseArrayUptoK((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)), (4l)).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))));",
            "assert(reverseArrayUptoK((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (2l)).equals((List[Long](5l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))));",
            "assert(reverseArrayUptoK((List[Long](9l.toLong, 8l.toLong, 7l.toLong, 6l.toLong, 5l.toLong)), (3l)).equals((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 6l.toLong, 5l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "64",
        "title": "subject_marks",
        "text": "Write a function to sort a list of tuples using the second value of each tuple.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def subjectMarks(subjectmarks : List[Tuple2[String, Long]]) : List[Tuple2[String, Long]] = {\n        (subject, subjectmarks) : subjectmarks\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(subjectMarks((List[Tuple2[String, Long]]((\"English\", 88l), (\"Science\", 90l), (\"Maths\", 97l), (\"Social sciences\", 82l)))).equals((List[Tuple2[String, Long]]((\"Social sciences\", 82l), (\"English\", 88l), (\"Science\", 90l), (\"Maths\", 97l)))));",
            "assert(subjectMarks((List[Tuple2[String, Long]]((\"Telugu\", 49l), (\"Hindhi\", 54l), (\"Social\", 33l)))).equals((List[Tuple2[String, Long]]((\"Social\", 33l), (\"Telugu\", 49l), (\"Hindhi\", 54l)))));",
            "assert(subjectMarks((List[Tuple2[String, Long]]((\"Physics\", 96l), (\"Chemistry\", 97l), (\"Biology\", 45l)))).equals((List[Tuple2[String, Long]]((\"Biology\", 45l), (\"Physics\", 96l), (\"Chemistry\", 97l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "65",
        "title": "recursive_list_sum",
        "text": "Write a function to flatten a list and sum all of its elements.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n        _.sum(data_list)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));",
            "assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));",
            "assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "66",
        "title": "pos_count",
        "text": "Write a scalathon function to count the number of positive numbers in a list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def posCount(list : List[Long]) : Long = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        72 : 72,\n        73 : 73,\n        74 : 74,\n        75 : 75,\n\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(posCount((List[Long](1l.toLong, -2l.toLong, 3l.toLong, -4l.toLong))) == (2l));",
            "assert(posCount((List[Long](3l.toLong, 4l.toLong, 5l.toLong, -1l.toLong))) == (3l));",
            "assert(posCount((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (4l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "67",
        "title": "bell_number",
        "text": "Write a function to find the number of ways to partition a set of Bell numbers.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def bellNumber(n : Long) : Long = {\n        0 : 1,\n        1 : 2,\n        2 : 3,\n        3 : 4,\n        4 : 5,\n        5 : 6,\n        6 : 7,\n        7 : 8,\n        8 : 9,\n        9 : 10,\n        10 : 11,\n        11 : 12,\n        12 : 13,\n        13 : 14,\n        14 : 15,\n        15 : 16,\n        16 : 17,\n        17 : 18,\n        18 : 19,\n        19 : 20,\n        20 : 21,\n        21 : 22,\n        22 : 23,\n        23 : 24,\n        24 : 25,\n        25 : 26,\n        26 : 27,\n        27 : 28,\n        28 : 29,\n        29 : 30,\n        30 : 31,\n        31 : 32,\n        32 : 33,\n        33 : 34,\n        34 : 35,\n        35 : 36,\n        36 : 37,\n        37 : 38,\n        38 : 39,\n        39 : 40,\n        40 : 41,\n        41 : 42,\n        42 : 43,\n        43 : 44,\n        44 : 45,\n        45 : 46,\n        46 : 47,\n        47 : 48,\n        48 : 49,\n        49 : 50,\n        50 : 51,\n        51 : 52,\n        52 : 53,\n        53 : 54,\n        54 : 55,\n        55 : 56,\n        56 : 57,\n        57 : 58,\n        58 : 59,\n        59 : 60,\n        60 : 61,\n        61 : 62,\n        62 : 63,\n        63 : 64,\n        64 : 65,\n        65 : 66,\n        66 : 67,\n        67 : 68,\n        68 : 69,\n        69 : 70,\n        70 : 71,\n        71 : 72,\n        72 : 73,\n        73 : 74,\n        74 : 75,\n        75 : 76,\n        \n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(bellNumber((2l)) == (2l));",
            "assert(bellNumber((10l)) == (115975l));",
            "assert(bellNumber((56l)) == (6775685320645824322581483068371419745979053216268760300l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "68",
        "title": "is_Monotonic",
        "text": "Write a scalathon function to check whether the given list is monotonic or not.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isMonotonic(A : List[Long]) : Boolean = {\n        scala.math.isMonotonic(A)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));",
            "assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));",
            "assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "69",
        "title": "is_sublist",
        "text": "Write a function to check whether a list contains the given sublist or not.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isSublist(l : List[Long], s : List[Long]) : Boolean = {\n        l.length == s.length\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(isSublist((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)), (List[Long](3l.toLong, 7l.toLong))) == (false));",
            "assert(isSublist((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)), (List[Long](4l.toLong, 3l.toLong))) == (true));",
            "assert(isSublist((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)), (List[Long](1l.toLong, 6l.toLong))) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "6",
        "title": "differ_At_One_Bit_Pos",
        "text": "Write a scalathon function to check whether the two numbers differ at one bit position only or not.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n        a > b\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(differAtOneBitPos((13l), (9l)) == (true));",
            "assert(differAtOneBitPos((15l), (8l)) == (false));",
            "assert(differAtOneBitPos((2l), (4l)) == (false));",
            "assert(differAtOneBitPos((2l), (3l)) == (true));",
            "assert(differAtOneBitPos((5l), (1l)) == (true));",
            "assert(differAtOneBitPos((1l), (5l)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "70",
        "title": "get_equal",
        "text": "Write a function to find whether all the given lists have equal length or not.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getEqual(Input : List[List[Long]]) : Boolean = {\n        scala.math.equal(Input.get(0), Input.get(1))\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(getEqual((List[List[Long]](List[Long](11l.toLong, 22l.toLong, 33l.toLong), List[Long](44l.toLong, 55l.toLong, 66l.toLong)))) == (true));",
            "assert(getEqual((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))) == (false));",
            "assert(getEqual((List[List[Long]](List[Long](1l.toLong, 2l.toLong), List[Long](3l.toLong, 4l.toLong)))) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "71",
        "title": "comb_sort",
        "text": "Write a function to sort a list of elements.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def combSort(nums : List[Long]) : List[Long] = {\n        nums[0],\n        nums[1],\n        nums[2],\n        nums[3],\n        nums[4],\n        nums[5],\n        nums[6],\n        nums[7],\n        nums[8],\n        nums[9],\n        nums[10],\n        nums[11],\n        nums[12],\n        nums[13],\n        nums[14],\n        nums[15],\n        nums[16],\n        nums[17],\n        nums[18],\n        nums[19],\n        nums[20],\n        nums[21],\n        nums[22],\n        nums[23],\n        nums[24],\n        nums[25],\n        nums[26],\n        nums[27],\n        nums[28],\n        nums[29],\n        nums[30],\n        nums[31],\n        nums[32],\n        nums[33],\n        nums[34],\n        nums[35],\n        nums[36],\n        nums[37],\n        nums[38],\n        nums[39],\n        nums[40],\n        nums[41],\n        nums[42],\n        nums[43],\n        nums[44],\n        nums[45],\n        nums[46],\n        nums[47],\n        nums[48],\n        nums[49],\n        nums[50],\n        nums[51],\n        nums[52],\n        nums[53],\n        nums[54],\n        nums[55],\n        nums[56],\n        nums[57],\n        nums[58],\n        nums[59],\n        nums[60],\n        nums[61],\n        nums[62],\n        nums[63],\n        nums[64],\n        nums\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));",
            "assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));",
            "assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "720",
        "title": "add_dict_to_tuple",
        "text": "Write a function to add a map to the tuple. The output should be a tuple.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def addDictToTuple(test_tup : Tuple2[Long, Long, Long], test_dict : Map[String,Long]) : Tuple2[Long, Long, Long, Map[String,Long]] = {\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(addDictToTuple(((4l, 5l, 6l)), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals(((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l)))));",
            "assert(addDictToTuple(((1l, 2l, 3l)), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals(((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l)))));",
            "assert(addDictToTuple(((8l, 9l, 10l)), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals(((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "721",
        "title": "maxAverageOfPath",
        "text": "Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maxAverageOfPath(cost : List[List[Long]]) : Float = {\n        0 : 0.0,\n        1 : 0.0,\n        2 : 0.0,\n        3 : 0.0,\n        4 : 0.0,\n        5 : 0.0,\n        6 : 0.0,\n        7 : 0.0,\n        8 : 0.0,\n        9 : 0.0,\n        10 : 0.0,\n        11 : 0.0,\n        12 : 0.0,\n        13 : 0.0,\n        14 : 0.0,\n        15 : 0.0,\n        16 : 0.0,\n        17 : 0.0,\n        18 : 0.0,\n        19 : 0.0,\n        20 : 0.0,\n        21 : 0.0,\n        22 : 0.0,\n        23 : 0.0,\n        24 : 0.0,\n        25 : 0.0,\n        26 : 0.0,\n        27 : 0.0,\n        28 : 0.0,\n        29 : 0.0,\n        30 : 0.0,\n        31 : 0.0,\n        32 : 0.0,\n        33 : 0.0,\n        34 : 0.0,\n        35 : 0.0,\n        36 : 0.0,\n        37 : 0.0,\n        38 : 0.0,\n        39 : 0.0,\n        40 : 0.0,\n        41 : 0.0,\n        42 : 0.0,\n        43 : 0.0,\n        44 : 0.0,\n        45 : 0.0,\n        46 : 0.0,\n        47 :\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(maxAverageOfPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](6l.toLong, 5l.toLong, 4l.toLong), List[Long](7l.toLong, 3l.toLong, 9l.toLong)))) == (5.2f));",
            "assert(maxAverageOfPath((List[List[Long]](List[Long](2l.toLong, 3l.toLong, 4l.toLong), List[Long](7l.toLong, 6l.toLong, 5l.toLong), List[Long](8l.toLong, 4l.toLong, 10l.toLong)))) == (6.2f));",
            "assert(maxAverageOfPath((List[List[Long]](List[Long](3l.toLong, 4l.toLong, 5l.toLong), List[Long](8l.toLong, 7l.toLong, 6l.toLong), List[Long](9l.toLong, 5l.toLong, 11l.toLong)))) == (7.2f));",
            "assert(maxAverageOfPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))) == (5.8f));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "722",
        "title": "filter_data",
        "text": "The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def filterData(students : Map[String,Tuple2[Float, Long]], h : Float, w : Long) : Map[String,Tuple2[Float, Long]] = {\n        k : v\n        for k, v in students.items()\n        if (v.height > h) and (v.weight > w)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(filterData((Map[String,Tuple2[Float, Long]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Tuple2[Float, Long]](\"Cierra Vega\" -> (6.2f, 70l)))));",
            "assert(filterData((Map[String,Tuple2[Float, Long]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Tuple2[Float, Long]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));",
            "assert(filterData((Map[String,Tuple2[Float, Long]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Tuple2[Float, Long]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "723",
        "title": "count_same_pair",
        "text": "The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countSamePair(nums1 : List[Long], nums2 : List[Long]) : Long = {\n        i : i for i in range(nums1.length) if nums1[i] == nums2[i]\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(countSamePair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (4l));",
            "assert(countSamePair((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (11l));",
            "assert(countSamePair((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong)), (List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (1l));",
            "assert(countSamePair((List[Long](0l.toLong, 1l.toLong, 1l.toLong, 2l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 2l.toLong))) == (3l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "724",
        "title": "power_base_sum",
        "text": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def powerBaseSum(base : Long, power : Long) : Long = {\n        // Write a function that takes base as an argument and returns the sum of all digits of the base to the specified power.\n        scala.math.Power(base, power) : Long = {\n            // Write a function that takes base as an argument and returns the sum of all digits of the base to the specified power.\n            scala.math.Power(base, power) : Long = {\n                // Write a function that takes base as an argument and returns the sum of all digits of the base to the specified power.\n                scala.math.Power(base, power) : Long = {\n                    // Write a function that takes base as an argument and returns the sum of all digits of the base to the specified power.\n                    scala.math.Power(base, power) : Long = {\n                        // Write a function that takes base as an argument and returns the sum of all digits of the base to the specified power.\n                        scala.math.Power(base, power) : Long = {\n                            // Write a function that takes base as an argument and returns the sum of all digits of the base to the specified power.\n                            scala.math.Power(base, power) : Long = {\n                                // Write a function that takes base as an argument and returns the sum of all digits of the base to the specified power.\n                                scala.math.Power(base, power) : Long = {\n                                    // Write a function that takes base as an argument and returns the sum of all digits of the base to the specified power.\n                                    scala.math.Power(base, power) : Long = {\n                                        // Write a function that takes base as an argument and returns the sum of all digits of the base to the specified power.\n                                        scala.math.Power(base, power) : Long = {\n                                            // Write a function that takes base as an argument and returns the sum of all digits of the base to the specified power.\n                                            scala.math.Power\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(powerBaseSum((2l), (100l)) == (115l));",
            "assert(powerBaseSum((8l), (10l)) == (37l));",
            "assert(powerBaseSum((8l), (15l)) == (62l));",
            "assert(powerBaseSum((3l), (3l)) == (9l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "725",
        "title": "extract_quotation",
        "text": "Write a function to extract values between quotation marks \" \" of the given string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def extractQuotation(text1 : String) : List[Any] = {\n        text1.substring(0, 1)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(extractQuotation((\"Cortex \"A53\" Based \"multi\" tasking \"Processor\"\")).equals((List[Any](\"A53\", \"multi\", \"Processor\"))));",
            "assert(extractQuotation((\"Cast your \"favorite\" entertainment \"apps\"\")).equals((List[Any](\"favorite\", \"apps\"))));",
            "assert(extractQuotation((\"Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support\")).equals((List[Any](\"4k Ultra HD\", \"HDR 10\"))));",
            "assert(extractQuotation((\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\")).equals((List[Any]())));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "726",
        "title": "multiply_elements",
        "text": "Write a function that takes as input a list of numbers (t_1,...,t_{N+1}) and returns a list of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def multiplyElements(test_tup : List[Long]) : List[Any] = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(multiplyElements((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 10l.toLong))).equals((List[Any](5l.toLong, 35l.toLong, 56l.toLong, 80l.toLong))));",
            "assert(multiplyElements((List[Long](2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Any](8l.toLong, 20l.toLong, 30l.toLong, 42l.toLong))));",
            "assert(multiplyElements((List[Long](12l.toLong, 13l.toLong, 14l.toLong, 9l.toLong, 15l.toLong))).equals((List[Any](156l.toLong, 182l.toLong, 126l.toLong, 135l.toLong))));",
            "assert(multiplyElements((List[Long](12l.toLong))).equals((List[Any]())));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "728",
        "title": "sum_list",
        "text": "Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n        lst1.sum(lst2)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));",
            "assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));",
            "assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "72",
        "title": "dif_Square",
        "text": "Write a scalathon function to check whether the given number can be represented as the difference of two squares or not.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def difSquare(n : Long) : Boolean = {\n        n : n.__class__.__name__ == \"Long\"\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(difSquare((5l)) == (true));",
            "assert(difSquare((10l)) == (false));",
            "assert(difSquare((15l)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "730",
        "title": "consecutive_duplicates",
        "text": "Write a function to remove consecutive duplicates of a given list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def consecutiveDuplicates(nums : List[Any]) : List[Any] = {\n        nums[i] for i in range(len(nums)) if nums[i]!= nums[i - 1]\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(consecutiveDuplicates((List[Any](0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((List[Any](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong))));",
            "assert(consecutiveDuplicates((List[Any](10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((List[Any](10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))));",
            "assert(consecutiveDuplicates((List[Any](\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((List[Any](\"a\", \"b\", \"c\", \"d\"))));",
            "assert(consecutiveDuplicates((List[Any](\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"))).equals((List[Any](\"a\", \"b\", \"c\", \"d\", \"a\"))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "731",
        "title": "lateralsurface_cone",
        "text": "Write a function to find the lateral surface area of a cone given radius r and the height h.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def lateralsurfaceCone(r : Long, h : Long) : Float = {\n        // Return the lateral surface area of a cone given radius r and the height h.\n        'r': r,\n        'h': h\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(lateralsurfaceCone((5l), (12l)) == (204.20352248333654f));",
            "assert(lateralsurfaceCone((10l), (15l)) == (566.3586699569488f));",
            "assert(lateralsurfaceCone((19l), (17l)) == (1521.8090132193388f));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "732",
        "title": "replace_specialchar",
        "text": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def replaceSpecialchar(text : String) : String = {\n       '' : '',\n        ',' : '',\n        '.' : '',\n        '[': '',\n        ']': '',\n        '{': '',\n        '}': '',\n        '|': '',\n        '^': '',\n        '~': '',\n        '!': '',\n        '?': '',\n        '*': '',\n        '+': '',\n        '-': '',\n        '=': '',\n        '<': '',\n        '>': '',\n        '?': '',\n        '|': '',\n        '^': '',\n        '~': '',\n        '!': '',\n        '?': '',\n        '*': '',\n        '+': '',\n        '-': '',\n        '=': '',\n        '<': '',\n        '>': '',\n        '?': '',\n        '|': '',\n        '^': '',\n        '~': '',\n        '!': '',\n        '?': '',\n        '*': '',\n        '+': '',\n        '-': '',\n        '=': '',\n        '<': '',\n        '>': '',\n        '?': '',\n        '|': '',\n        '^': '',\n        '~': '',\n        '!': '',\n        '?': '',\n        '*': '',\n        '+': '',\n        '-': '',\n        '=': '',\n        '<': '',\n        '>': '',\n        '?': '',\n        '|': '',\n        '^': '',\n        '~': '',\n        '!': '',\n        '?': '',\n        '*': '',\n        '+': '',\n        '-': '',\n        '=': '',\n        '<': '',\n        '>': '',\n        '?'\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(replaceSpecialchar((\"Python language, Programming language.\")).equals((\"Python:language::Programming:language:\")));",
            "assert(replaceSpecialchar((\"a b c,d e f\")).equals((\"a:b:c:d:e:f\")));",
            "assert(replaceSpecialchar((\"ram reshma,ram rahim\")).equals((\"ram:reshma:ram:rahim\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "733",
        "title": "find_first_occurrence",
        "text": "Write a function to find the index of the first occurrence of a given number in a sorted list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        x\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));",
            "assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));",
            "assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "734",
        "title": "sum_Of_Subarray_Prod",
        "text": "Write a scalathon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumOfSubarrayProd(arr : List[Long]) : Long = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        \n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(sumOfSubarrayProd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (20l));",
            "assert(sumOfSubarrayProd((List[Long](1l.toLong, 2l.toLong))) == (5l));",
            "assert(sumOfSubarrayProd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (84l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "735",
        "title": "toggle_middle_bits",
        "text": "Write a scalathon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def toggleMiddleBits(n : Long) : Long = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        \n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(toggleMiddleBits((9l)) == (15l));",
            "assert(toggleMiddleBits((10l)) == (12l));",
            "assert(toggleMiddleBits((11l)) == (13l));",
            "assert(toggleMiddleBits((65l)) == (127l));",
            "assert(toggleMiddleBits((77l)) == (115l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "736",
        "title": "left_insertion",
        "text": "Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/scalathon-exercises/data-structures-and-algorithms/scalathon-data-structure-exercise-24.php",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        x : x + 1\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));",
            "assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));",
            "assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "737",
        "title": "check_str",
        "text": "Write a function to check whether the given string is starting with a vowel or not using regex.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def checkStr(string : String) : Boolean = {\n        \"a\" : true,\n        \"e\" : true,\n        \"i\" : true,\n        \"o\" : true,\n        \"u\" : true,\n        \"y\" : true,\n        \"z\" : true,\n        \"A\" : true,\n        \"E\" : true,\n        \"I\" : true,\n        \"O\" : true,\n        \"U\" : true,\n        \"Y\" : true,\n        \"Z\" : true,\n        \"a\" : false,\n        \"e\" : false,\n        \"i\" : false,\n        \"o\" : false,\n        \"u\" : false,\n        \"y\" : false,\n        \"z\" : false,\n        \"A\" : false,\n        \"E\" : false,\n        \"I\" : false,\n        \"O\" : false,\n        \"U\" : false,\n        \"Y\" : false,\n        \"Z\" : false,\n        \"a\" : true,\n        \"e\" : true,\n        \"i\" : true,\n        \"o\" : true,\n        \"u\" : true,\n        \"y\" : true,\n        \"z\" : true,\n        \"A\" : true,\n        \"E\" : true,\n        \"I\" : true,\n        \"O\" : true,\n        \"U\" : true,\n        \"Y\" : true,\n        \"Z\" : true,\n        \"a\" : false,\n        \"e\" : false,\n        \"i\" : false,\n        \"o\" : false,\n        \"u\" : false,\n        \"y\" : false,\n        \"z\" : false,\n        \"A\" : false,\n        \"E\" : false,\n        \"I\" : false,\n        \"O\" : false,\n        \"U\" : false,\n        \"Y\" : false,\n        \"Z\" : false,\n        \"a\" : true,\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(checkStr((\"annie\")) == (true));",
            "assert(checkStr((\"dawood\")) == (false));",
            "assert(checkStr((\"Else\")) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "738",
        "title": "geometric_sum",
        "text": "Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/scalathon-exercises/data-structures-and-algorithms/scalathon-recursion-exercise-9.php",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def geometricSum(n : Long) : Float = {\n        // Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/scalathon-exercises/data-structures-and-algorithms/scalathon-recursion-exercise-9.php\n        \"Sum\" : {\n            \"Sum\" : {\n                \"Sum\" : {\n                    \"Sum\" : {\n                        \"Sum\" : {\n                            \"Sum\" : {\n                                \"Sum\" : {\n                                    \"Sum\" : {\n                                        \"Sum\" : {\n                                            \"Sum\" : {\n                                                \"Sum\" : {\n                                                    \"Sum\" : {\n                                                        \"Sum\" : {\n                                                            \"Sum\" : {\n                                                                \"Sum\" : {\n                                                                    \"Sum\" : {\n                                                                        \"Sum\" : {\n                                                                            \"Sum\" : {\n                                                                                \"Sum\" : {\n                                                                                    \"Sum\" : {\n                                                                                        \"Sum\" : {\n                                                                                            \"Sum\" : {\n                                                                                                    \"Sum\" : {\n                                                                                                        \"Sum\" : {\n                                                                                                            \"Sum\" : {\n                                                                                                                  \"Sum\" : {\n                                                                                                                     \"Sum\" : {\n                                                                                                                        \"Sum\" : {\n                                                                                                                           \"Sum\" : {\n                                                                                                                                                \"Sum\" : {\n                                                                                                                                                  \"Sum\" : {\n                                                                                                                                                      \"Sum\" : {\n                                                                                                                                                         \"Sum\" : {\n                                                                                             \n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(geometricSum((7l)) == (1.9921875f));",
            "assert(geometricSum((4l)) == (1.9375f));",
            "assert(geometricSum((8l)) == (1.99609375f));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "739",
        "title": "find_Index",
        "text": "Write a scalathon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findIndex(n : Long) : Long = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        \n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(findIndex((2l)) == (4l));",
            "assert(findIndex((3l)) == (14l));",
            "assert(findIndex((4l)) == (45l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "740",
        "title": "tuple_to_dict",
        "text": "Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/scalathon-convert-tuple-to-adjacent-pair-map/",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def tupleToDict(test_tup : Tuple2[Long, Long, Long, Long, Long, Long]) : Map[Long,Long] = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(tupleToDict(((1l, 5l, 7l, 10l, 13l, 5l))).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));",
            "assert(tupleToDict(((1l, 2l, 3l, 4l, 5l, 6l))).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));",
            "assert(tupleToDict(((7l, 8l, 9l, 10l, 11l, 12l))).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "741",
        "title": "all_Characters_Same",
        "text": "Write a scalathon function to check whether all the characters are same or not.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def allCharactersSame(s : String) : Boolean = {\n        'a' : True,\n        'b' : True,\n        'c' : True,\n        'd' : True,\n        'e' : True,\n        'f' : True,\n        'g' : True,\n        'h' : True,\n        'i' : True,\n        'j' : True,\n        'k' : True,\n        'l' : True,\n       'm' : True,\n        'n' : True,\n        'o' : True,\n        'p' : True,\n        'q' : True,\n        'r' : True,\n       's' : True,\n        't' : True,\n        'u' : True,\n        'v' : True,\n        'w' : True,\n        'x' : True,\n        'y' : True,\n        'z' : True,\n        'A' : True,\n        'B' : True,\n        'C' : True,\n        'D' : True,\n        'E' : True,\n        'F' : True,\n        'G' : True,\n        'H' : True,\n        'I' : True,\n        'J' : True,\n        'K' : True,\n        'L' : True,\n        'M' : True,\n        'N' : True,\n        'O' : True,\n        'P' : True,\n        'Q' : True,\n        'R' : True,\n        'S' : True,\n        'T' : True,\n        'U' : True,\n        'V' : True,\n        'W' : True,\n        'X' : True,\n        'Y' : True,\n        'Z' : True,\n        '0' : True,\n        '1' : True,\n        '2' : True,\n        '3' : True,\n        '4' : True,\n        '5' :\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(allCharactersSame((\"python\")) == (false));",
            "assert(allCharactersSame((\"aaa\")) == (true));",
            "assert(allCharactersSame((\"data\")) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "742",
        "title": "area_tetrahedron",
        "text": "Write a function to caluclate the area of a tetrahedron.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def areaTetrahedron(side : Long) : Float = {\n        // Write a function to calculate the area of a tetrahedron.\n        // The function should return the area of the tetrahedron.\n        // The function should return the area of the tetrahedron.\n        // The function should return the area of the tetrahedron.\n        // The function should return the area of the tetrahedron.\n        // The function should return the area of the tetrahedron.\n        // The function should return the area of the tetrahedron.\n        // The function should return the area of the tetrahedron.\n        // The function should return the area of the tetrahedron.\n        // The function should return the area of the tetrahedron.\n        // The function should return the area of the tetrahedron.\n        // The function should return the area of the tetrahedron.\n        // The function should return the area of the tetrahedron.\n        // The function should return the area of the tetrahedron.\n        // The function should return the area of the tetrahedron.\n        // The function should return the area of the tetrahedron.\n        // The function should return the area of the tetrahedron.\n        // The function should return the area of the tetrahedron.\n        // The function should return the area of the tetrahedron.\n        // The function should return the area of the tetrahedron.\n        // The function should return the area of the tetrahedron.\n        // The function should return the area of the tetrahedron.\n        // The function should return the area of the tetrahedron.\n        // The function should return the area of the tetrahedron.\n        // The function should return the area of the tetrahedron.\n        // The function should return the area of the tetrahedron.\n        // The function should return the area of the tetrahedron.\n        // The function should return the area of the tetrahedron.\n        // The function should\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(areaTetrahedron((3l)) == (15.588457268119894f));",
            "assert(areaTetrahedron((20l)) == (692.8203230275509f));",
            "assert(areaTetrahedron((10l)) == (173.20508075688772f));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "743",
        "title": "rotate_right",
        "text": "Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/scalathon-program-right-rotate-list-n/",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def rotateRight(list : List[Long], m : Long) : List[Long] = {\n        list[0] : list[1],\n        list[1] : list[0],\n        list[2] : list[3],\n        list[3] : list[2],\n        list[4] : list[5],\n        list[5] : list[4],\n        list[6] : list[7],\n        list[7] : list[6],\n        list[8] : list[9],\n        list[9] : list[8],\n        list[10] : list[11],\n        list[11] : list[10],\n        list[12] : list[13],\n        list[13] : list[12],\n        list[14] : list[15],\n        list[15] : list[14],\n        list[16] : list[17],\n        list[17] : list[16],\n        list[18] : list[19],\n        list[19] : list[18],\n        list[20] : list[21],\n        list[21] : list[20],\n        list[22] : list[23],\n        list[23] : list[22],\n        list[24] : list[25],\n        list[25] : list[24],\n        list[26] : list[27],\n        list[27] : list[26],\n        list[28] : list[29],\n        list[29] : list[28],\n        list[30] : list[31],\n        list[31] : list[30],\n        list[32] : list[33],\n        list[33] : list[32],\n        list[34] : list[35],\n        list[35] : list[34],\n        list[36] : list[37],\n        list[37] : list[36],\n        list[\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(rotateRight((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (3l)).equals((List[Long](8l.toLong, 9l.toLong, 10l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))));",
            "assert(rotateRight((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](9l.toLong, 10l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))));",
            "assert(rotateRight((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (5l)).equals((List[Long](6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "744",
        "title": "check_none",
        "text": "Write a function to check if the given tuple has any none value or not.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def checkNone(test_tup : Any) : Boolean = {\n        test_tup : {\n            None : True,\n            False : False,\n            True : True,\n            False : False,\n            }\n        }\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(checkNone((Any(10l), Some(4l), Some(5l), Some(6l), Some(None)))) == (true));",
            "assert(checkNone((Any((7l, 8l, 9l, 11l, 14l)))) == (false));",
            "assert(checkNone((Any(1l), Some(2l), Some(3l), Some(4l), Some(None)))) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "745",
        "title": "divisible_by_digits",
        "text": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/scalathon-exercises/lambda/scalathon-lambda-exercise-24.php",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        startnum : startnum,\n        endnum : endnum,\n        startnum : startnum,\n        endnum : endnum,\n        startnum : startnum,\n        endnum : endnum,\n        startnum : startnum,\n        endnum : endnum,\n        startnum : startnum,\n        endnum : endnum,\n        startnum : startnum,\n        endnum : endnum,\n        startnum : startnum,\n        endnum : endnum,\n        startnum : startnum,\n        endnum : endnum,\n        startnum : startnum,\n        endnum : endnum,\n        startnum : startnum,\n        endnum : endnum,\n        startnum : startnum,\n        endnum : endnum,\n        startnum : startnum,\n        endnum : endnum,\n        startnum : startnum,\n        endnum : endnum,\n        startnum : startnum,\n        endnum : endnum,\n        startnum : startnum,\n        endnum : endnum,\n        startnum : startnum,\n        endnum : endnum,\n        startnum : startnum,\n        endnum : endnum,\n        startnum : startnum,\n        endnum : endnum,\n        startnum : startnum,\n        endnum : endnum,\n        startnum : startnum,\n        endnum : endnum,\n        startnum : startnum,\n        endnum : endnum,\n        startnum : startnum,\n        endnum : endnum,\n        startnum : startnum,\n        endnum : endnum,\n        startnum : startnum,\n        endnum : endnum,\n        startnum : startnum,\n        endnum : endnum,\n        start\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));",
            "assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));",
            "assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "746",
        "title": "sector_area",
        "text": "Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sectorArea(r : Long, a : Long) : Option[Float] = {\n        None: scala.math.math.Sqrt(r * r + a * a),\n        0: scala.math.math.Sqrt(r * r + a * a),\n        1: scala.math.math.Sqrt(r * r + a * a),\n        2: scala.math.math.Sqrt(r * r + a * a),\n        3: scala.math.math.Sqrt(r * r + a * a),\n        4: scala.math.math.Sqrt(r * r + a * a),\n        5: scala.math.math.Sqrt(r * r + a * a),\n        6: scala.math.math.Sqrt(r * r + a * a),\n        7: scala.math.math.Sqrt(r * r + a * a),\n        8: scala.math.math.Sqrt(r * r + a * a),\n        9: scala.math.math.Sqrt(r * r + a * a),\n        10: scala.math.math.Sqrt(r * r + a * a),\n        11: scala.math.math.Sqrt(r * r + a * a),\n        12: scala.math.math.Sqrt(r * r + a * a),\n        13: scala.math.math.Sqrt(r * r + a * a),\n        14: scala.math.math.Sqrt(r * r + a * a),\n        15: scala.math.math.Sqrt(r * r + a * a),\n        16: scala.math.math.Sqrt(r * r + a * a),\n        17: scala.math.math.Sqrt(r * r + a *\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(sectorArea((4l), (45l)).equals(6.283185307179586f));",
            "assert(sectorArea((9l), (45l)).equals(31.808625617596654f));",
            "assert(sectorArea((9l), (361l)).equals(None));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "747",
        "title": "lcs_of_three",
        "text": "Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n        X.length(), Y.length(), Z.length()\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));",
            "assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));",
            "assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "748",
        "title": "capital_words_spaces",
        "text": "Write a function to put spaces between words starting with capital letters in a given string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def capitalWordsSpaces(str1 : String) : String = {\n        \"a\" : \"A\",\n        \"b\" : \"B\",\n        \"c\" : \"C\",\n        \"d\" : \"D\",\n        \"e\" : \"E\",\n        \"f\" : \"F\",\n        \"g\" : \"G\",\n        \"h\" : \"H\",\n        \"i\" : \"I\",\n        \"j\" : \"J\",\n        \"k\" : \"K\",\n        \"l\" : \"L\",\n        \"m\" : \"M\",\n        \"n\" : \"N\",\n        \"o\" : \"O\",\n        \"p\" : \"P\",\n        \"q\" : \"Q\",\n        \"r\" : \"R\",\n        \"s\" : \"S\",\n        \"t\" : \"T\",\n        \"u\" : \"U\",\n        \"v\" : \"V\",\n        \"w\" : \"W\",\n        \"x\" : \"X\",\n        \"y\" : \"Y\",\n        \"z\" : \"Z\",\n        \"A\" : \"A\",\n        \"B\" : \"B\",\n        \"C\" : \"C\",\n        \"D\" : \"D\",\n        \"E\" : \"E\",\n        \"F\" : \"F\",\n        \"G\" : \"G\",\n        \"H\" : \"H\",\n        \"I\" : \"I\",\n        \"J\" : \"J\",\n        \"K\" : \"K\",\n        \"L\" : \"L\",\n        \"M\" : \"M\",\n        \"N\" : \"N\",\n        \"O\" : \"O\",\n        \"P\" : \"P\",\n        \"Q\" : \"Q\",\n        \"R\" : \"R\",\n        \"S\" : \"S\",\n        \"T\" : \"T\",\n        \"U\" : \"U\",\n        \"V\" : \"V\",\n        \"W\" : \"W\",\n        \"X\" : \"X\",\n        \"Y\"\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(capitalWordsSpaces((\"Python\")).equals((\"Python\")));",
            "assert(capitalWordsSpaces((\"PythonProgrammingExamples\")).equals((\"Python Programming Examples\")));",
            "assert(capitalWordsSpaces((\"GetReadyToBeCodingFreak\")).equals((\"Get Ready To Be Coding Freak\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "749",
        "title": "sort_numeric_strings",
        "text": "Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.sort()\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));",
            "assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));",
            "assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "74",
        "title": "is_samepatterns",
        "text": "Write a function to check whether it follows the sequence given in the patterns list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isSamepatterns(colors : List[String], patterns : List[String]) : Boolean = {\n        colors.length == patterns.length and\n        colors.contains(patterns)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(isSamepatterns((List[String](\"red\", \"green\", \"green\")), (List[String](\"a\", \"b\", \"b\"))) == (true));",
            "assert(isSamepatterns((List[String](\"red\", \"green\", \"greenn\")), (List[String](\"a\", \"b\", \"b\"))) == (false));",
            "assert(isSamepatterns((List[String](\"red\", \"green\", \"greenn\")), (List[String](\"a\", \"b\"))) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "750",
        "title": "add_tuple",
        "text": "Write a function to add the given tuple to the given list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def addTuple(test_list : List[Long], test_tup : Tuple2[Long, Long]) : List[Long] = {\n        test_tup._1 : test_tup._2,\n        test_tup._2 : test_tup._1\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(addTuple((List[Long](5l.toLong, 6l.toLong, 7l.toLong)), ((9l, 10l))).equals((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));",
            "assert(addTuple((List[Long](6l.toLong, 7l.toLong, 8l.toLong)), ((10l, 11l))).equals((List[Long](6l.toLong, 7l.toLong, 8l.toLong, 10l.toLong, 11l.toLong))));",
            "assert(addTuple((List[Long](7l.toLong, 8l.toLong, 9l.toLong)), ((11l, 12l))).equals((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "751",
        "title": "check_min_heap",
        "text": "Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def checkMinHeap(arr : List[Long]) : Boolean = {\n        arr.isEmpty()\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(checkMinHeap((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));",
            "assert(checkMinHeap((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 10l.toLong, 15l.toLong))) == (true));",
            "assert(checkMinHeap((List[Long](2l.toLong, 10l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 15l.toLong))) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "752",
        "title": "jacobsthal_num",
        "text": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def jacobsthalNum(n : Long) : Long = {\n        0 : 0,\n        1 : 1,\n        2 : 1,\n        3 : 1,\n        4 : 1,\n        5 : 1,\n        6 : 1,\n        7 : 1,\n        8 : 1,\n        9 : 1,\n        10 : 1,\n        11 : 1,\n        12 : 1,\n        13 : 1,\n        14 : 1,\n        15 : 1,\n        16 : 1,\n        17 : 1,\n        18 : 1,\n        19 : 1,\n        20 : 1,\n        21 : 1,\n        22 : 1,\n        23 : 1,\n        24 : 1,\n        25 : 1,\n        26 : 1,\n        27 : 1,\n        28 : 1,\n        29 : 1,\n        30 : 1,\n        31 : 1,\n        32 : 1,\n        33 : 1,\n        34 : 1,\n        35 : 1,\n        36 : 1,\n        37 : 1,\n        38 : 1,\n        39 : 1,\n        40 : 1,\n        41 : 1,\n        42 : 1,\n        43 : 1,\n        44 : 1,\n        45 : 1,\n        46 : 1,\n        47 : 1,\n        48 : 1,\n        49 : 1,\n        50 : 1,\n        51 : 1,\n        52 : 1,\n        53 : 1,\n        54 : 1,\n        55 : 1,\n        56 : 1,\n        57 : 1,\n        58 : 1,\n        59 : 1,\n        60 : 1,\n        61 : 1,\n        62 : 1,\n        63 : 1,\n        64 : 1,\n        65 :\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(jacobsthalNum((5l)) == (11l));",
            "assert(jacobsthalNum((2l)) == (1l));",
            "assert(jacobsthalNum((4l)) == (5l));",
            "assert(jacobsthalNum((13l)) == (2731l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "753",
        "title": "min_k",
        "text": "Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def minK(test_list : List[Tuple2[String, Long]], K : Long) : List[Tuple2[String, Long]] = {\n        (x, y) : x + y,\n        (x, y) : x + y,\n        (x, y) : x + y,\n        (x, y) : x + y,\n        (x, y) : x + y,\n        (x, y) : x + y,\n        (x, y) : x + y,\n        (x, y) : x + y,\n        (x, y) : x + y,\n        (x, y) : x + y,\n        (x, y) : x + y,\n        (x, y) : x + y,\n        (x, y) : x + y,\n        (x, y) : x + y,\n        (x, y) : x + y,\n        (x, y) : x + y,\n        (x, y) : x + y,\n        (x, y) : x + y,\n        (x, y) : x + y,\n        (x, y) : x + y,\n        (x, y) : x + y,\n        (x, y) : x + y,\n        (x, y) : x + y,\n        (x, y) : x + y,\n        (x, y) : x + y,\n        (x, y) : x + y,\n        (x, y) : x + y,\n        (x, y) : x + y,\n        (x, y) : x + y,\n        (x, y) : x + y,\n        (x, y) : x + y,\n        (x, y) : x + y,\n        (x, y) : x +\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(minK((List[Tuple2[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Tuple2[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));",
            "assert(minK((List[Tuple2[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Tuple2[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));",
            "assert(minK((List[Tuple2[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Tuple2[String, Long]]((\"Ayesha\", 9l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "754",
        "title": "extract_index_list",
        "text": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : List[Any] = {\n        l1.head, l2.head, l3.head\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((List[Any](1l.toLong, 7l.toLong))));",
            "assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((List[Any](1l.toLong, 6l.toLong))));",
            "assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((List[Any](1l.toLong, 5l.toLong))));",
            "assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((List[Any]())));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "755",
        "title": "second_smallest",
        "text": "Write a function to find the second smallest number in a list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def secondSmallest(numbers : List[Either[Long, Float]]) : Option[Float] = {\n        -1.0,\n        0.0,\n        1.0,\n        2.0,\n        3.0,\n        4.0,\n        5.0,\n        6.0,\n        7.0,\n        8.0,\n        9.0,\n        10.0,\n        11.0,\n        12.0,\n        13.0,\n        14.0,\n        15.0,\n        16.0,\n        17.0,\n        18.0,\n        19.0,\n        20.0,\n        21.0,\n        22.0,\n        23.0,\n        24.0,\n        25.0,\n        26.0,\n        27.0,\n        28.0,\n        29.0,\n        30.0,\n        31.0,\n        32.0,\n        33.0,\n        34.0,\n        35.0,\n        36.0,\n        37.0,\n        38.0,\n        39.0,\n        40.0,\n        41.0,\n        42.0,\n        43.0,\n        44.0,\n        45.0,\n        46.0,\n        47.0,\n        48.0,\n        49.0,\n        50.0,\n        51.0,\n        52.0,\n        53.0,\n        54.0,\n        55.0,\n        56.0,\n        57.0,\n        58.0,\n        59.0,\n        60.0,\n        61.0,\n        62.0,\n        63.0,\n        64.0,\n        65.0,\n        66.0,\n        67.0,\n        68.0,\n        69.0,\n        70.0,\n        71.0,\n        72.0,\n        73.0\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(secondSmallest((List[Either[Long, Float]](1l.toLong, 2l.toLong, -8l.toLong, -2l.toLong, 0l.toLong, -2l.toLong))).equals(-2l));",
            "assert(secondSmallest((List[Either[Long, Float]](1l.toLong, 1l.toLong, -0.5f.toLong, 0l.toLong, 2l.toLong, -2l.toLong, -2l.toLong))).equals(-0.5f));",
            "assert(secondSmallest((List[Either[Long, Float]](2l.toLong, 2l.toLong))).equals(None));",
            "assert(secondSmallest((List[Either[Long, Float]](2l.toLong, 2l.toLong, 2l.toLong))).equals(None));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "756",
        "title": "text_match_zero_one",
        "text": "Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/scalathon-exercises/re/scalathon-re-exercise-3.php",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def textMatchZeroOne(text : String) : Boolean = {\n        \"a\": true,\n        \"b\": true,\n        \"c\": true,\n        \"d\": true,\n        \"e\": true,\n        \"f\": true,\n        \"g\": true,\n        \"h\": true,\n        \"i\": true,\n        \"j\": true,\n        \"k\": true,\n        \"l\": true,\n        \"m\": true,\n        \"n\": true,\n        \"o\": true,\n        \"p\": true,\n        \"q\": true,\n        \"r\": true,\n        \"s\": true,\n        \"t\": true,\n        \"u\": true,\n        \"v\": true,\n        \"w\": true,\n        \"x\": true,\n        \"y\": true,\n        \"z\": true,\n        \"A\": true,\n        \"B\": true,\n        \"C\": true,\n        \"D\": true,\n        \"E\": true,\n        \"F\": true,\n        \"G\": true,\n        \"H\": true,\n        \"I\": true,\n        \"J\": true,\n        \"K\": true,\n        \"L\": true,\n        \"M\": true,\n        \"N\": true,\n        \"O\": true,\n        \"P\": true,\n        \"Q\": true,\n        \"R\": true,\n        \"S\": true,\n        \"T\": true,\n        \"U\": true,\n        \"V\": true,\n        \"W\": true,\n        \"X\": true,\n        \"Y\": true,\n        \"Z\": true,\n        \"0\": true,\n        \"1\": true,\n        \"2\": true,\n        \"3\": true,\n        \"4\": true,\n        \"5\": true,\n        \"6\": true,\n        \"7\": true\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(textMatchZeroOne((\"ac\")) == (false));",
            "assert(textMatchZeroOne((\"dc\")) == (false));",
            "assert(textMatchZeroOne((\"abbbba\")) == (true));",
            "assert(textMatchZeroOne((\"dsabbbba\")) == (true));",
            "assert(textMatchZeroOne((\"asbbbba\")) == (false));",
            "assert(textMatchZeroOne((\"abaaa\")) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "757",
        "title": "count_reverse_pairs",
        "text": "Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/scalathon-program-to-count-the-pairs-of-reverse-strings/",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countReversePairs(test_list : List[String]) : Long = {\n        \"a\" : 1,\n        \"b\" : 2,\n        \"c\" : 3,\n        \"d\" : 4,\n        \"e\" : 5,\n        \"f\" : 6,\n        \"g\" : 7,\n        \"h\" : 8,\n        \"i\" : 9,\n        \"j\" : 10,\n        \"k\" : 11,\n        \"l\" : 12,\n        \"m\" : 13,\n        \"n\" : 14,\n        \"o\" : 15,\n        \"p\" : 16,\n        \"q\" : 17,\n        \"r\" : 18,\n        \"s\" : 19,\n        \"t\" : 20,\n        \"u\" : 21,\n        \"v\" : 22,\n        \"w\" : 23,\n        \"x\" : 24,\n        \"y\" : 25,\n        \"z\" : 26,\n        \"A\" : 27,\n        \"B\" : 28,\n        \"C\" : 29,\n        \"D\" : 30,\n        \"E\" : 31,\n        \"F\" : 32,\n        \"G\" : 33,\n        \"H\" : 34,\n        \"I\" : 35,\n        \"J\" : 36,\n        \"K\" : 37,\n        \"L\" : 38,\n        \"M\" : 39,\n        \"N\" : 40,\n        \"O\" : 41,\n        \"P\" : 42,\n        \"Q\" : 43,\n        \"R\" : 44,\n        \"S\" : 45,\n        \"T\" : 46,\n        \"U\" : 47,\n        \"V\" : 48,\n        \"W\" : 49,\n        \"X\" : 50,\n        \"Y\" : 51,\n        \"Z\" : 52,\n        \"\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(countReversePairs((List[String](\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"))) == (2l));",
            "assert(countReversePairs((List[String](\"geeks\", \"best\", \"for\", \"skeeg\"))) == (1l));",
            "assert(countReversePairs((List[String](\"makes\", \"best\", \"sekam\", \"for\", \"rof\"))) == (2l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "759",
        "title": "is_decimal",
        "text": "Write a function to check whether a given string is a decimal number with a precision of 2.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isDecimal(num : String) : Boolean = {\n        num : (num.length() == 1)? num.charAt(0) == '0' : num.charAt(0) == '1'\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(isDecimal((\"123.11\")) == (true));",
            "assert(isDecimal((\"e666.86\")) == (false));",
            "assert(isDecimal((\"3.124587\")) == (false));",
            "assert(isDecimal((\"1.11\")) == (true));",
            "assert(isDecimal((\"1.1.11\")) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "75",
        "title": "find_tuples",
        "text": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findTuples(test_list : List[Tuple2[Long, Long, Long]], K : Long) : List[Tuple2[Long, Long, Long]] = {\n        (1, 1, 1): (1, 1, 1),\n        (1, 1, 2): (1, 1, 1),\n        (1, 1, 3): (1, 1, 1),\n        (1, 1, 4): (1, 1, 1),\n        (1, 1, 5): (1, 1, 1),\n        (1, 1, 6): (1, 1, 1),\n        (1, 1, 7): (1, 1, 1),\n        (1, 1, 8): (1, 1, 1),\n        (1, 1, 9): (1, 1, 1),\n        (1, 1, 10): (1, 1, 1),\n        (1, 1, 11): (1, 1, 1),\n        (1, 1, 12): (1, 1, 1),\n        (1, 1, 13): (1, 1, 1),\n        (1, 1, 14): (1, 1, 1),\n        (1, 1, 15): (1, 1, 1),\n        (1, 1, 16): (1, 1, 1),\n        (1, 1, 17): (1, 1, 1),\n        (1, 1, 18): (1, 1, 1),\n        (1, 1, 19): (1, 1, 1),\n        (1, 1, 20): (1, 1, 1),\n        (1, 1, 21): (1, 1, 1),\n        (1, 1, 22): (1, 1, 1),\n        (1, 1, 23): (1, 1, 1),\n        (1, 1, 24): (1, 1, 1),\n        (1, 1, 25): (1, 1, 1),\n        (1, 1, 26): (1, 1, 1),\n        (1, 1,\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(findTuples((List[Tuple2[Long, Long, Long]]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Tuple2[Long, Long, Long]]((6l, 24l, 12l)))));",
            "assert(findTuples((List[Tuple2[Long, Long, Long]]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Tuple2[Long, Long, Long]]((5l, 25l, 30l)))));",
            "assert(findTuples((List[Tuple2[Long, Long, Long]]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Tuple2[Long, Long, Long]]((8l, 16l, 4l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "760",
        "title": "unique_Element",
        "text": "Write a scalathon function to check whether a list of numbers contains only one distinct element or not.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def uniqueElement(arr : List[Long]) : Boolean = {\n        if (arr.length == 1) {\n            return True\n        }\n        return False\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(uniqueElement((List[Long](1l.toLong, 1l.toLong, 1l.toLong))) == (true));",
            "assert(uniqueElement((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (false));",
            "assert(uniqueElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "762",
        "title": "check_monthnumber_number",
        "text": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def checkMonthnumberNumber(monthnum3 : Long) : Boolean = {\n        \"0\" : False,\n        \"1\" : False,\n        \"2\" : False,\n        \"3\" : False,\n        \"4\" : False,\n        \"5\" : False,\n        \"6\" : False,\n        \"7\" : False,\n        \"8\" : False,\n        \"9\" : False,\n        \"10\" : False,\n        \"11\" : False,\n        \"12\" : False\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(checkMonthnumberNumber((6l)) == (true));",
            "assert(checkMonthnumberNumber((2l)) == (false));",
            "assert(checkMonthnumberNumber((12l)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "763",
        "title": "find_min_diff",
        "text": "Write a scalathon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findMinDiff(arr : List[Long], n : Long) : Long = {\n        Long.MIN_VALUE, Long.MIN_VALUE\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(findMinDiff((List[Long](1l.toLong, 5l.toLong, 3l.toLong, 19l.toLong, 18l.toLong, 25l.toLong)), (6l)) == (1l));",
            "assert(findMinDiff((List[Long](4l.toLong, 3l.toLong, 2l.toLong, 6l.toLong)), (4l)) == (1l));",
            "assert(findMinDiff((List[Long](30l.toLong, 5l.toLong, 20l.toLong, 9l.toLong)), (4l)) == (4l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "764",
        "title": "number_ctr",
        "text": "Write a scalathon function to count number of digits in a given string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def numberCtr(str : String) : Long = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        '10': 10,\n        '11': 11,\n        '12': 12,\n        '13': 13,\n        '14': 14,\n        '15': 15,\n        '16': 16,\n        '17': 17,\n        '18': 18,\n        '19': 19,\n        '20': 20,\n        '21': 21,\n        '22': 22,\n        '23': 23,\n        '24': 24,\n        '25': 25,\n        '26': 26,\n        '27': 27,\n        '28': 28,\n        '29': 29,\n        '30': 30,\n        '31': 31,\n        '32': 32,\n        '33': 33,\n        '34': 34,\n        '35': 35,\n        '36': 36,\n        '37': 37,\n        '38': 38,\n        '39': 39,\n        '40': 40,\n        '41': 41,\n        '42': 42,\n        '43': 43,\n        '44': 44,\n        '45': 45,\n        '46': 46,\n        '47': 47,\n        '48': 48,\n        '49': 49,\n        '50': 50,\n        '51': 51,\n        '52': 52,\n        '53': 53,\n        '54': 54,\n        '55': 55,\n        '56': 56,\n        '57': 57,\n        '58': 58,\n        '59': 59,\n        '60': 60,\n        '61': 61,\n        '62': 62,\n        '63': 63,\n        '64': 64,\n        '65\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(numberCtr((\"program2bedone\")) == (1l));",
            "assert(numberCtr((\"3wonders\")) == (1l));",
            "assert(numberCtr((\"123\")) == (3l));",
            "assert(numberCtr((\"3wond-1ers2\")) == (3l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "765",
        "title": "is_polite",
        "text": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isPolite(n : Long) : Long = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        72 : 72,\n        73 : 73,\n        74 :\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(isPolite((7l)) == (11l));",
            "assert(isPolite((4l)) == (7l));",
            "assert(isPolite((9l)) == (13l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "766",
        "title": "pair_wise",
        "text": "Write a function to return a list of all pairs of consecutive items in a given list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def pairWise(l1 : List[Long]) : List[Tuple2[Long, Long]] = {\n        (l1[i], l1[i + 1]) : l1[i] + l1[i + 1]\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Tuple2[Long, Long]]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));",
            "assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Tuple2[Long, Long]]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));",
            "assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Tuple2[Long, Long]]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));",
            "assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Tuple2[Long, Long]]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "767",
        "title": "get_pairs_count",
        "text": "Write a scalathon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getPairsCount(arr : List[Long], sum : Long) : Long = {\n        sum\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(getPairsCount((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (2l)) == (6l));",
            "assert(getPairsCount((List[Long](1l.toLong, 5l.toLong, 7l.toLong, -1l.toLong, 5l.toLong)), (6l)) == (3l));",
            "assert(getPairsCount((List[Long](1l.toLong, -2l.toLong, 3l.toLong)), (1l)) == (1l));",
            "assert(getPairsCount((List[Long](-1l.toLong, -2l.toLong, 3l.toLong)), (-3l)) == (1l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "769",
        "title": "Diff",
        "text": "Write a scalathon function to get the difference between two lists.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def Diff(li1 : List[Long], li2 : List[Long]) : List[Long] = {\n        li1.diff(li2)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(Diff((List[Long](10l.toLong, 15l.toLong, 20l.toLong, 25l.toLong, 30l.toLong, 35l.toLong, 40l.toLong)), (List[Long](25l.toLong, 40l.toLong, 35l.toLong))).equals((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 15l.toLong))));",
            "assert(Diff((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (List[Long](6l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))));",
            "assert(Diff((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](6l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "770",
        "title": "odd_num_sum",
        "text": "Write a scalathon function to find the sum of fourth power of first n odd natural numbers.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def oddNumSum(n : Long) : Long = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        72 : 72,\n        73 : 73,\n        74 : 74,\n        75 : 75\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(oddNumSum((2l)) == (82l));",
            "assert(oddNumSum((3l)) == (707l));",
            "assert(oddNumSum((4l)) == (3108l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "771",
        "title": "check_expression",
        "text": "Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def checkExpression(exp : String) : Boolean = {\n        \"()\" : true,\n        \"( )\" : true,\n        \"( )( )\" : true,\n        \"( )( )( )\" : true,\n        \"( )( )( )\" : true,\n        \"( )( )( )\" : true,\n        \"( )( )( )\" : true,\n        \"( )( )( )\" : true,\n        \"( )( )( )\" : true,\n        \"( )( )( )\" : true,\n        \"( )( )( )\" : true,\n        \"( )( )( )\" : true,\n        \"( )( )( )\" : true,\n        \"( )( )( )\" : true,\n        \"( )( )( )\" : true,\n        \"( )( )( )\" : true,\n        \"( )( )( )\" : true,\n        \"( )( )( )\" : true,\n        \"( )( )( )\" : true,\n        \"( )( )( )\" : true,\n        \"( )( )( )\" : true,\n        \"( )( )( )\" : true,\n        \"( )( )( )\" : true,\n        \"( )( )( )\" : true,\n        \"( )( )( )\" : true,\n        \"( )( )( )\" : true,\n        \"( )( )( )\" : true,\n        \"( )( )( )\" : true,\n        \"( )( )( )\" : true,\n        \"( )( )( )\" : true,\n        \"( )( )( )\" : true,\n        \"( )( )( )\" : true,\n        \"( )( )( )\" : true,\n        \"( )( )( )\" : true,\n        \"( )( )( )\" : true,\n        \"( )( )( )\" : true,\n        \"( )( )( )\"\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(checkExpression((\"{()}[{}]\")) == (true));",
            "assert(checkExpression((\"{()}[{]\")) == (false));",
            "assert(checkExpression((\"{()}[{}][]({})\")) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "772",
        "title": "remove_length",
        "text": "Write a function to remove all the words with k length in the given string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def removeLength(test_str : String, K : Long) : String = {\n        \"a\" : \"a\",\n        \"b\" : \"b\",\n        \"c\" : \"c\",\n        \"d\" : \"d\",\n        \"e\" : \"e\",\n        \"f\" : \"f\",\n        \"g\" : \"g\",\n        \"h\" : \"h\",\n        \"i\" : \"i\",\n        \"j\" : \"j\",\n        \"k\" : \"k\",\n        \"l\" : \"l\",\n        \"m\" : \"m\",\n        \"n\" : \"n\",\n        \"o\" : \"o\",\n        \"p\" : \"p\",\n        \"q\" : \"q\",\n        \"r\" : \"r\",\n        \"s\" : \"s\",\n        \"t\" : \"t\",\n        \"u\" : \"u\",\n        \"v\" : \"v\",\n        \"w\" : \"w\",\n        \"x\" : \"x\",\n        \"y\" : \"y\",\n        \"z\" : \"z\",\n        \"A\" : \"A\",\n        \"B\" : \"B\",\n        \"C\" : \"C\",\n        \"D\" : \"D\",\n        \"E\" : \"E\",\n        \"F\" : \"F\",\n        \"G\" : \"G\",\n        \"H\" : \"H\",\n        \"I\" : \"I\",\n        \"J\" : \"J\",\n        \"K\" : \"K\",\n        \"L\" : \"L\",\n        \"M\" : \"M\",\n        \"N\" : \"N\",\n        \"O\" : \"O\",\n        \"P\" : \"P\",\n        \"Q\" : \"Q\",\n        \"R\" : \"R\",\n        \"S\" : \"S\",\n        \"T\" : \"T\",\n        \"U\" : \"U\",\n        \"V\" : \"V\",\n        \"W\" : \"W\",\n        \"X\" : \"X\",\n        \"\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));",
            "assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));",
            "assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "773",
        "title": "occurance_substring",
        "text": "Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def occuranceSubstring(text : String, pattern : String) : Option[Tuple2[String, Long, Long]] = {\n        \"a\" : (0, 0),\n        \"b\" : (0, 1),\n        \"c\" : (1, 0),\n        \"d\" : (1, 1),\n        \"e\" : (2, 0),\n        \"f\" : (2, 1),\n        \"g\" : (3, 0),\n        \"h\" : (3, 1),\n        \"i\" : (4, 0),\n        \"j\" : (4, 1),\n        \"k\" : (5, 0),\n        \"l\" : (5, 1),\n        \"m\" : (6, 0),\n        \"n\" : (6, 1),\n        \"o\" : (7, 0),\n        \"p\" : (7, 1),\n        \"q\" : (8, 0),\n        \"r\" : (8, 1),\n        \"s\" : (9, 0),\n        \"t\" : (9, 1),\n        \"u\" : (10, 0),\n        \"v\" : (10, 1),\n        \"w\" : (11, 0),\n        \"x\" : (11, 1),\n        \"y\" : (12, 0),\n        \"z\" : (12, 1),\n        \"A\" : (0, 0),\n        \"B\" : (0, 1),\n        \"C\" : (1, 0),\n        \"D\" : (1, 1),\n        \"E\" : (2, 0),\n        \"F\" : (2, 1),\n        \"G\" : (3, 0),\n        \"H\" : (3, 1),\n        \"I\" : (4, 0),\n        \"J\" : (4, 1),\n        \"K\" : (5, 0),\n        \"L\" : (5, 1),\n        \"M\" : (6, 0),\n        \"N\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));",
            "assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));",
            "assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));",
            "assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "775",
        "title": "odd_position",
        "text": "Write a scalathon function to check whether every odd index contains odd numbers of a given list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def oddPosition(nums : List[Long]) : Boolean = {\n        nums[i] % 2 == 0\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));",
            "assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));",
            "assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "776",
        "title": "count_vowels",
        "text": "Write a function to count those characters which have vowels as their neighbors in the given string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countVowels(test_str : String) : Long = {\n        'a' : 0,\n        'e' : 1,\n        'i' : 2,\n        'o' : 3,\n        'u' : 4,\n        'y' : 5,\n        'a' : 6,\n        'e' : 7,\n        'i' : 8,\n        'o' : 9,\n        'u' : 10,\n        'y' : 11,\n        'a' : 12,\n        'e' : 13,\n        'i' : 14,\n        'o' : 15,\n        'u' : 16,\n        'y' : 17,\n        'a' : 18,\n        'e' : 19,\n        'i' : 20,\n        'o' : 21,\n        'u' : 22,\n        'y' : 23,\n        'a' : 24,\n        'e' : 25,\n        'i' : 26,\n        'o' : 27,\n        'u' : 28,\n        'y' : 29,\n        'a' : 30,\n        'e' : 31,\n        'i' : 32,\n        'o' : 33,\n        'u' : 34,\n        'y' : 35,\n        'a' : 36,\n        'e' : 37,\n        'i' : 38,\n        'o' : 39,\n        'u' : 40,\n        'y' : 41,\n        'a' : 42,\n        'e' : 43,\n        'i' : 44,\n        'o' : 45,\n        'u' : 46,\n        'y' : 47,\n        'a' : 48,\n        'e' : 49,\n        'i' : 50,\n        'o' : 51,\n        'u' : 52,\n        'y' : 53,\n        'a' : 54,\n        'e' : 55,\n        'i\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(countVowels((\"bestinstareels\")) == (7l));",
            "assert(countVowels((\"partofthejourneyistheend\")) == (12l));",
            "assert(countVowels((\"amazonprime\")) == (5l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "777",
        "title": "find_sum",
        "text": "Write a scalathon function to find the sum of non-repeated elements in a given list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findSum(arr : List[Long]) : Long = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        72 : 72,\n        73 : 73,\n        74 : 74,\n        75\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(findSum((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (21l));",
            "assert(findSum((List[Long](1l.toLong, 10l.toLong, 9l.toLong, 4l.toLong, 2l.toLong, 10l.toLong, 10l.toLong, 45l.toLong, 4l.toLong))) == (71l));",
            "assert(findSum((List[Long](12l.toLong, 10l.toLong, 9l.toLong, 45l.toLong, 2l.toLong, 10l.toLong, 10l.toLong, 45l.toLong, 10l.toLong))) == (78l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "778",
        "title": "pack_consecutive_duplicates",
        "text": "Write a function to pack consecutive duplicates of a given list elements into sublists.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def packConsecutiveDuplicates(list1 : List[Any]) : List[List[Any]] = {\n        list1.map(x -> x + x)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(packConsecutiveDuplicates((List[Any](0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((List[List[Any]](List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));",
            "assert(packConsecutiveDuplicates((List[Any](10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((List[List[Any]](List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));",
            "assert(packConsecutiveDuplicates((List[Any](\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((List[List[Any]](List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "77",
        "title": "is_Diff",
        "text": "Write a scalathon function to find whether a number is divisible by 11.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isDiff(n : Long) : Boolean = {\n        n % 11 == 0\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(isDiff((12345l)) == (false));",
            "assert(isDiff((1212112l)) == (true));",
            "assert(isDiff((1212l)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "780",
        "title": "find_combinations",
        "text": "Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/scalathon-combinations-of-sum-with-tuples-in-tuple-list/",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findCombinations(test_list : List[Tuple2[Long, Long]]) : List[Tuple2[Long, Long]] = {\n        (0, 0) : [],\n        (0, 1) : [],\n        (1, 0) : [],\n        (1, 1) : [],\n        (2, 0) : [],\n        (2, 1) : [],\n        (3, 0) : [],\n        (3, 1) : [],\n        (4, 0) : [],\n        (4, 1) : [],\n        (5, 0) : [],\n        (5, 1) : [],\n        (6, 0) : [],\n        (6, 1) : [],\n        (7, 0) : [],\n        (7, 1) : [],\n        (8, 0) : [],\n        (8, 1) : [],\n        (9, 0) : [],\n        (9, 1) : [],\n        (10, 0) : [],\n        (10, 1) : [],\n        (11, 0) : [],\n        (11, 1) : [],\n        (12, 0) : [],\n        (12, 1) : [],\n        (13, 0) : [],\n        (13, 1) : [],\n        (14, 0) : [],\n        (14, 1) : [],\n        (15, 0) : [],\n        (15, 1) : [],\n        (16, 0) : [],\n        (16, 1) : [],\n        (17, 0) : [],\n        (17, 1) : [],\n        (18, 0) : [],\n        (18, 1) : [],\n        (19, 0) : [],\n        (19, 1) : [],\n        \n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(findCombinations((List[Tuple2[Long, Long]]((2l, 4l), (6l, 7l), (5l, 1l), (6l, 10l)))).equals((List[Tuple2[Long, Long]]((8l, 11l), (7l, 5l), (8l, 14l), (11l, 8l), (12l, 17l), (11l, 11l)))));",
            "assert(findCombinations((List[Tuple2[Long, Long]]((3l, 5l), (7l, 8l), (6l, 2l), (7l, 11l)))).equals((List[Tuple2[Long, Long]]((10l, 13l), (9l, 7l), (10l, 16l), (13l, 10l), (14l, 19l), (13l, 13l)))));",
            "assert(findCombinations((List[Tuple2[Long, Long]]((4l, 6l), (8l, 9l), (7l, 3l), (8l, 12l)))).equals((List[Tuple2[Long, Long]]((12l, 15l), (11l, 9l), (12l, 18l), (15l, 12l), (16l, 21l), (15l, 15l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "781",
        "title": "count_divisors",
        "text": "Write a scalathon function to check whether the count of divisors is even. https://www.w3resource.com/scalathon-exercises/basic/scalathon-basic-1-exercise-24.php",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countDivisors(n : Long) : Boolean = {\n        n == 1 : True,\n        n == 2 : True,\n        n == 3 : True,\n        n == 4 : True,\n        n == 5 : True,\n        n == 6 : True,\n        n == 7 : True,\n        n == 8 : True,\n        n == 9 : True,\n        n == 10 : True,\n        n == 11 : True,\n        n == 12 : True,\n        n == 13 : True,\n        n == 14 : True,\n        n == 15 : True,\n        n == 16 : True,\n        n == 17 : True,\n        n == 18 : True,\n        n == 19 : True,\n        n == 20 : True,\n        n == 21 : True,\n        n == 22 : True,\n        n == 23 : True,\n        n == 24 : True,\n        n == 25 : True,\n        n == 26 : True,\n        n == 27 : True,\n        n == 28 : True,\n        n == 29 : True,\n        n == 30 : True,\n        n == 31 : True,\n        n == 32 : True,\n        n == 33 : True,\n        n == 34 : True,\n        n == 35 : True,\n        n == 36 : True,\n        n == 37 : True,\n        n == 38 : True,\n        n == 39 : True,\n        n == 40 : True,\n        n == 41 : True,\n        n == 42 : True,\n        n == 43 : True,\n        n == 44 : True,\n        n == 45 : True,\n        n == 46 : True,\n        n == 47 : True,\n        n == 48 : True,\n        n == 49 : True,\n        n == 50 : True,\n        n == 51 : True,\n        n == 52 : True,\n        n == 53 :\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(countDivisors((10l)) == (true));",
            "assert(countDivisors((100l)) == (false));",
            "assert(countDivisors((125l)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "782",
        "title": "odd_length_sum",
        "text": "Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def oddLengthSum(arr : List[Long]) : Long = {\n        0\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));",
            "assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));",
            "assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "783",
        "title": "rgb_to_hsv",
        "text": "Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def rgbToHsv(r : Long, g : Long, b : Long) : List[Float] = {\n        r / 255.0, g / 255.0, b / 255.0\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(rgbToHsv((255l), (255l), (255l)).equals((List[Float](0.0f.toFloat, 0.0f.toFloat, 100.0f.toFloat))));",
            "assert(rgbToHsv((0l), (215l), (0l)).equals((List[Float](120.0f.toFloat, 100.0f.toFloat, 84.31372549019608f.toFloat))));",
            "assert(rgbToHsv((10l), (215l), (110l)).equals((List[Float](149.26829268292684f.toFloat, 95.34883720930233f.toFloat, 84.31372549019608f.toFloat))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "784",
        "title": "mul_even_odd",
        "text": "Write a function to find the product of first even and odd number of a given list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n        12,\n        13,\n        14,\n        15,\n        16,\n        17,\n        18,\n        19,\n        20,\n        21,\n        22,\n        23,\n        24,\n        25,\n        26,\n        27,\n        28,\n        29,\n        30,\n        31,\n        32,\n        33,\n        34,\n        35,\n        36,\n        37,\n        38,\n        39,\n        40,\n        41,\n        42,\n        43,\n        44,\n        45,\n        46,\n        47,\n        48,\n        49,\n        50,\n        51,\n        52,\n        53,\n        54,\n        55,\n        56,\n        57,\n        58,\n        59,\n        60,\n        61,\n        62,\n        63,\n        64,\n        65,\n        66,\n        67,\n        68,\n        69,\n        70,\n        71,\n        72,\n        73,\n        74,\n        75,\n        76,\n        77,\n        78,\n        79,\n        80,\n        81,\n        82,\n        83,\n        84,\n        85,\n        86,\n        87,\n        88,\n        89,\n        90,\n        91,\n        92,\n        93,\n        94,\n        95,\n        96,\n        97,\n        98,\n        99,\n        100,\n        101,\n        102,\n        103,\n        104,\n        105,\n        106,\n        107,\n        108,\n        109,\n        110,\n        111,\n        112,\n        113,\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));",
            "assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));",
            "assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "785",
        "title": "tuple_str_int",
        "text": "Write a function to convert tuple string to integer tuple.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def tupleStrInt(test_str : String) : Tuple2[Long, Long, Long] = {\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        (1, 1, 1),\n        \n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(tupleStrInt((\"(7, 8, 9)\")).equals(((7l, 8l, 9l))));",
            "assert(tupleStrInt((\"(1, 2, 3)\")).equals(((1l, 2l, 3l))));",
            "assert(tupleStrInt((\"(4, 5, 6)\")).equals(((4l, 5l, 6l))));",
            "assert(tupleStrInt((\"(7, 81, 19)\")).equals(((7l, 81l, 19l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "786",
        "title": "right_insertion",
        "text": "Write a function to locate the right insertion point for a specified value in sorted order.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def rightInsertion(a : List[Long], x : Long) : Long = {\n        // Return the insertion point for the specified value.\n        x : Long\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(rightInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));",
            "assert(rightInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));",
            "assert(rightInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "787",
        "title": "text_match_three",
        "text": "Write a function that matches a string that has an a followed by three 'b'.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def textMatchThree(text : String) : Boolean = {\n        'a': 'b',\n        'b': 'c',\n        'c': 'd'\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(textMatchThree((\"ac\")) == (false));",
            "assert(textMatchThree((\"dc\")) == (false));",
            "assert(textMatchThree((\"abbbba\")) == (true));",
            "assert(textMatchThree((\"caacabbbba\")) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "788",
        "title": "new_tuple",
        "text": "Write a function to create a new tuple from the given string and list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def newTuple(test_list : List[String], test_str : String) : Tuple2[String, String, String] = {\n        test_list : test_list,\n        test_str : test_str,\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(newTuple((List[String](\"WEB\", \"is\")), (\"best\")).equals(((\"WEB\", \"is\", \"best\"))));",
            "assert(newTuple((List[String](\"We\", \"are\")), (\"Developers\")).equals(((\"We\", \"are\", \"Developers\"))));",
            "assert(newTuple((List[String](\"Part\", \"is\")), (\"Wrong\")).equals(((\"Part\", \"is\", \"Wrong\"))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "790",
        "title": "even_position",
        "text": "Write a scalathon function to check whether every even index contains even numbers of a given list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums[i] % 2 == 0\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));",
            "assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));",
            "assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "791",
        "title": "remove_nested",
        "text": "Write a function to remove tuples from the given tuple.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def removeNested(test_tup : Any) : Tuple2[Long, Long, Long, Long] = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        72 : 72,\n        73 : 73,\n        74 :\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(removeNested((Any(4l, 6l), 10l))).equals(((1l, 5l, 7l, 10l))));",
            "assert(removeNested((Any(5l, 7l), 11l))).equals(((2l, 6l, 8l, 11l))));",
            "assert(removeNested((Any(6l, 8l), 12l))).equals(((3l, 7l, 9l, 12l))));",
            "assert(removeNested((Any(6l, 8l), (5l, 12l), 12l))).equals(((3l, 7l, 9l, 12l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "792",
        "title": "count_list",
        "text": "Write a scalathon function to count the number of lists in a given number of lists.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countList(input_list : List[List[Long]]) : Long = {\n        input_list.length : 0\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(countList((List[List[Long]](List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))) == (4l));",
            "assert(countList((List[List[Long]](List[Long](1l.toLong, 2l.toLong), List[Long](2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong)))) == (3l));",
            "assert(countList((List[List[Long]](List[Long](1l.toLong, 0l.toLong), List[Long](2l.toLong, 0l.toLong)))) == (2l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "793",
        "title": "last",
        "text": "Write a scalathon function to find the last position of an element in a sorted list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def last(arr : List[Long], x : Long) : Long = {\n        x\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));",
            "assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));",
            "assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "794",
        "title": "text_starta_endb",
        "text": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def textStartaEndb(text : String) : Boolean = {\n        'a' : True,\n        'b' : False\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(textStartaEndb((\"aabbbb\")) == (true));",
            "assert(textStartaEndb((\"aabAbbbc\")) == (false));",
            "assert(textStartaEndb((\"accddbbjjj\")) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "796",
        "title": "return_sum",
        "text": "Write function to find the sum of all items in the given map.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def returnSum(dict : Map[String,Long]) : Long = {\n        key : sum(dict.get(key))\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(returnSum((Map[String,Long](\"a\" -> 100l, \"b\" -> 200l, \"c\" -> 300l))) == (600l));",
            "assert(returnSum((Map[String,Long](\"a\" -> 25l, \"b\" -> 18l, \"c\" -> 45l))) == (88l));",
            "assert(returnSum((Map[String,Long](\"a\" -> 36l, \"b\" -> 39l, \"c\" -> 49l))) == (124l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "797",
        "title": "sum_in_range",
        "text": "Write a scalathon function to find the sum of all odd natural numbers within the range l and r.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sumInRange(l : Long, r : Long) : Long = {\n        Long.valueOf(0),\n        Long.valueOf(1),\n        Long.valueOf(2),\n        Long.valueOf(3),\n        Long.valueOf(4),\n        Long.valueOf(5),\n        Long.valueOf(6),\n        Long.valueOf(7),\n        Long.valueOf(8),\n        Long.valueOf(9),\n        Long.valueOf(10),\n        Long.valueOf(11),\n        Long.valueOf(12),\n        Long.valueOf(13),\n        Long.valueOf(14),\n        Long.valueOf(15),\n        Long.valueOf(16),\n        Long.valueOf(17),\n        Long.valueOf(18),\n        Long.valueOf(19),\n        Long.valueOf(20),\n        Long.valueOf(21),\n        Long.valueOf(22),\n        Long.valueOf(23),\n        Long.valueOf(24),\n        Long.valueOf(25),\n        Long.valueOf(26),\n        Long.valueOf(27),\n        Long.valueOf(28),\n        Long.valueOf(29),\n        Long.valueOf(30),\n        Long.valueOf(31),\n        Long.valueOf(32),\n        Long.valueOf(33),\n        Long.valueOf(34),\n        Long.valueOf(35),\n        Long.valueOf(36),\n        Long.valueOf(37),\n        Long.valueOf(38),\n        Long.valueOf(39),\n        Long.valueOf(40),\n        Long.valueOf(41),\n        Long.valueOf(42),\n        Long.valueOf(43),\n        Long.valueOf(44),\n        Long.valueOf(45),\n        Long.valueOf(46),\n        Long.valueOf(47),\n        Long.valueOf(48),\n        Long.valueOf(49\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(sumInRange((2l), (5l)) == (8l));",
            "assert(sumInRange((5l), (7l)) == (12l));",
            "assert(sumInRange((7l), (13l)) == (40l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "798",
        "title": "_sum",
        "text": "Write a scalathon function to find the sum of a list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def Sum(arr : List[Long]) : Long = {\n        sum : 0\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(Sum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));",
            "assert(Sum((List[Long](15l.toLong, 12l.toLong, 13l.toLong, 10l.toLong))) == (50l));",
            "assert(Sum((List[Long](0l.toLong, 1l.toLong, 2l.toLong))) == (3l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "799",
        "title": "left_rotate",
        "text": "Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def leftRotate(n : Long, d : Long) : Long = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(leftRotate((16l), (2l)) == (64l));",
            "assert(leftRotate((10l), (2l)) == (40l));",
            "assert(leftRotate((99l), (3l)) == (792l));",
            "assert(leftRotate((99l), (3l)) == (792l));",
            "assert(leftRotate((1l), (3l)) == (8l));",
            "assert(leftRotate((5l), (3l)) == (40l));",
            "assert(leftRotate((29l), (3l)) == (232l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "79",
        "title": "word_len",
        "text": "Write a scalathon function to check whether the length of the word is odd or not.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def wordLen(s : String) : Boolean = {\n        \"a\" : 1,\n        \"b\" : 2,\n        \"c\" : 3,\n        \"d\" : 4,\n        \"e\" : 5,\n        \"f\" : 6,\n        \"g\" : 7,\n        \"h\" : 8,\n        \"i\" : 9,\n        \"j\" : 10,\n        \"k\" : 11,\n        \"l\" : 12,\n        \"m\" : 13,\n        \"n\" : 14,\n        \"o\" : 15,\n        \"p\" : 16,\n        \"q\" : 17,\n        \"r\" : 18,\n        \"s\" : 19,\n        \"t\" : 20,\n        \"u\" : 21,\n        \"v\" : 22,\n        \"w\" : 23,\n        \"x\" : 24,\n        \"y\" : 25,\n        \"z\" : 26,\n        \"A\" : 27,\n        \"B\" : 28,\n        \"C\" : 29,\n        \"D\" : 30,\n        \"E\" : 31,\n        \"F\" : 32,\n        \"G\" : 33,\n        \"H\" : 34,\n        \"I\" : 35,\n        \"J\" : 36,\n        \"K\" : 37,\n        \"L\" : 38,\n        \"M\" : 39,\n        \"N\" : 40,\n        \"O\" : 41,\n        \"P\" : 42,\n        \"Q\" : 43,\n        \"R\" : 44,\n        \"S\" : 45,\n        \"T\" : 46,\n        \"U\" : 47,\n        \"V\" : 48,\n        \"W\" : 49,\n        \"X\" : 50,\n        \"Y\" : 51,\n        \"Z\" : 52,\n        \"0\" : 53,\n        \"1\" : 54,\n        \"2\" : 55,\n        \"3\" : 56,\n        \"4\" : 57,\n\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(wordLen((\"Hadoop\")) == (false));",
            "assert(wordLen((\"great\")) == (true));",
            "assert(wordLen((\"structure\")) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "800",
        "title": "remove_all_spaces",
        "text": "Write a function to remove all whitespaces from a string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def removeAllSpaces(text : String) : String = {\n       '' : '',\n        '\\t' : '',\n        '\\n' : '',\n        '\\r' : '',\n        '\\f' : '',\n        '\\v' : '',\n        '\\u00A0' : '',\n        '\\u2028' : '',\n        '\\u2029' : '',\n        '\\u00A0\\u00A0' : '',\n        '\\u00A0\\u00A0\\u00A0' : '',\n        '\\u00A0\\u00A0\\u00A0\\u00A0' : '',\n        '\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0' : '',\n        '\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0' : '',\n        '\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0' : '',\n        '\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0' : '',\n        '\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0' : '',\n        '\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0' : '',\n        '\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0' : '',\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(removeAllSpaces((\"python  program\")).equals((\"pythonprogram\")));",
            "assert(removeAllSpaces((\"python   programming    language\")).equals((\"pythonprogramminglanguage\")));",
            "assert(removeAllSpaces((\"python                     program\")).equals((\"pythonprogram\")));",
            "assert(removeAllSpaces((\"   python                     program\")).equals((\"pythonprogram\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "801",
        "title": "test_three_equal",
        "text": "Write a scalathon function to count the number of equal numbers from three given integers.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def testThreeEqual(x : Long, y : Long, z : Long) : Long = {\n        x, y, z\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(testThreeEqual((1l), (1l), (1l)) == (3l));",
            "assert(testThreeEqual((-1l), (-2l), (-3l)) == (0l));",
            "assert(testThreeEqual((1l), (2l), (2l)) == (2l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "802",
        "title": "count_rotation",
        "text": "Write a scalathon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def countRotation(arr : List[Long]) : Long = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(countRotation((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (1l));",
            "assert(countRotation((List[Long](4l.toLong, 5l.toLong, 1l.toLong, 2l.toLong, 3l.toLong))) == (2l));",
            "assert(countRotation((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong, 2l.toLong, 3l.toLong))) == (3l));",
            "assert(countRotation((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (0l));",
            "assert(countRotation((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (2l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "803",
        "title": "is_perfect_square",
        "text": "Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isPerfectSquare(n : Long) : Boolean = {\n        n == 1\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(isPerfectSquare((10l)) == (false));",
            "assert(isPerfectSquare((36l)) == (true));",
            "assert(isPerfectSquare((14l)) == (false));",
            "assert(isPerfectSquare((196l)) == (true));",
            "assert(isPerfectSquare((125l)) == (false));",
            "assert(isPerfectSquare((15625l)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "804",
        "title": "is_product_even",
        "text": "Write a function to check whether the product of numbers in a list is even or not.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isProductEven(arr : List[Long]) : Boolean = {\n        0 : True,\n        1 : True,\n        2 : True,\n        3 : True,\n        4 : True,\n        5 : True,\n        6 : True,\n        7 : True,\n        8 : True,\n        9 : True,\n        10 : True,\n        11 : True,\n        12 : True,\n        13 : True,\n        14 : True,\n        15 : True,\n        16 : True,\n        17 : True,\n        18 : True,\n        19 : True,\n        20 : True,\n        21 : True,\n        22 : True,\n        23 : True,\n        24 : True,\n        25 : True,\n        26 : True,\n        27 : True,\n        28 : True,\n        29 : True,\n        30 : True,\n        31 : True,\n        32 : True,\n        33 : True,\n        34 : True,\n        35 : True,\n        36 : True,\n        37 : True,\n        38 : True,\n        39 : True,\n        40 : True,\n        41 : True,\n        42 : True,\n        43 : True,\n        44 : True,\n        45 : True,\n        46 : True,\n        47 : True,\n        48 : True,\n        49 : True,\n        50 : True,\n        51 : True,\n        52 : True,\n        53 : True,\n        54 : True,\n        55 : True,\n        56 : True,\n        57 : True,\n        58 : True,\n        59 : True,\n        60 : True,\n        61 : True,\n        62 : True,\n        63 : True,\n        64 : True,\n        65 : True,\n        66 : True,\n        67 : True,\n        68 : True,\n        69 : True,\n        70 : True,\n        71 : True,\n        72 : True,\n        73 : True,\n        74 : True,\n        75 :\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));",
            "assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));",
            "assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "805",
        "title": "max_sum_list",
        "text": "Write a function that returns the list in a list of lists whose sum of elements is the highest.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maxSumList(lists : List[List[Long]]) : List[Long] = {\n        scala.math.max(scala.math.sum(lists))\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(maxSumList((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](10l.toLong, 11l.toLong, 12l.toLong))));",
            "assert(maxSumList((List[List[Long]](List[Long](3l.toLong, 2l.toLong, 1l.toLong), List[Long](6l.toLong, 5l.toLong, 4l.toLong), List[Long](12l.toLong, 11l.toLong, 10l.toLong)))).equals((List[Long](12l.toLong, 11l.toLong, 10l.toLong))));",
            "assert(maxSumList((List[List[Long]](List[Long](2l.toLong, 3l.toLong, 1l.toLong)))).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "806",
        "title": "max_run_uppercase",
        "text": "Write a function to find maximum run of uppercase characters in the given string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def maxRunUppercase(test_str : String) : Long = {\n        \"A\" : 1,\n        \"B\" : 2,\n        \"C\" : 3,\n        \"D\" : 4,\n        \"E\" : 5,\n        \"F\" : 6,\n        \"G\" : 7,\n        \"H\" : 8,\n        \"I\" : 9,\n        \"J\" : 10,\n        \"K\" : 11,\n        \"L\" : 12,\n        \"M\" : 13,\n        \"N\" : 14,\n        \"O\" : 15,\n        \"P\" : 16,\n        \"Q\" : 17,\n        \"R\" : 18,\n        \"S\" : 19,\n        \"T\" : 20,\n        \"U\" : 21,\n        \"V\" : 22,\n        \"W\" : 23,\n        \"X\" : 24,\n        \"Y\" : 25,\n        \"Z\" : 26,\n        \"a\" : 27,\n        \"b\" : 28,\n        \"c\" : 29,\n        \"d\" : 30,\n        \"e\" : 31,\n        \"f\" : 32,\n        \"g\" : 33,\n        \"h\" : 34,\n        \"i\" : 35,\n        \"j\" : 36,\n        \"k\" : 37,\n        \"l\" : 38,\n        \"m\" : 39,\n        \"n\" : 40,\n        \"o\" : 41,\n        \"p\" : 42,\n        \"q\" : 43,\n        \"r\" : 44,\n        \"s\" : 45,\n        \"t\" : 46,\n        \"u\" : 47,\n        \"v\" : 48,\n        \"w\" : 49,\n        \"x\" : 50,\n        \"y\" : 51,\n        \"z\" : 52,\n        \"0\" : 53,\n        \"1\" : 54,\n        \"2\" : 55,\n        \"3\" : 56,\n        \"4\"\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));",
            "assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));",
            "assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "807",
        "title": "first_odd",
        "text": "Write a scalathon function to find the first odd number in a given list of numbers.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def firstOdd(nums : List[Long]) : Long = {\n        nums[0] % 2 == 0\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));",
            "assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));",
            "assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "808",
        "title": "check_K",
        "text": "Write a function to check if the given tuples contain the k or not.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def checkK(test_tup : List[Long], K : Long) : Boolean = {\n        test_tup.length == K\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(checkK((List[Long](10l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 8l.toLong)), (6l)) == (true));",
            "assert(checkK((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)), (7l)) == (false));",
            "assert(checkK((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 44l.toLong, 11l.toLong, 12l.toLong)), (11l)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "809",
        "title": "check_smaller",
        "text": "Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def checkSmaller(test_tup1 : Tuple2[Long, Long, Long], test_tup2 : Tuple2[Long, Long, Long]) : Boolean = {\n        test_tup1.x < test_tup2.x,\n        test_tup1.y < test_tup2.y,\n        test_tup1.z < test_tup2.z\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(checkSmaller(((1l, 2l, 3l)), ((2l, 3l, 4l))) == (false));",
            "assert(checkSmaller(((4l, 5l, 6l)), ((3l, 4l, 5l))) == (true));",
            "assert(checkSmaller(((11l, 12l, 13l)), ((10l, 11l, 12l))) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "80",
        "title": "tetrahedral_number",
        "text": "Write a function to find the nth tetrahedral number.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def tetrahedralNumber(n : Long) : Long = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        72 : 72,\n        73 : 73,\n        74 : 74,\n        75 : 75,\n        76 :\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(tetrahedralNumber((5l)) == (35l));",
            "assert(tetrahedralNumber((6l)) == (56l));",
            "assert(tetrahedralNumber((7l)) == (84l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "83",
        "title": "get_Char",
        "text": "Write a scalathon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def getChar(strr : String) : String = {\n        'a' : 'A',\n        'b' : 'B',\n        'c' : 'C',\n        'd' : 'D',\n        'e' : 'E',\n        'f' : 'F',\n        'g' : 'G',\n        'h' : 'H',\n        'i' : 'I',\n        'j' : 'J',\n        'k' : 'K',\n        'l' : 'L',\n       'm' : 'M',\n        'n' : 'N',\n        'o' : 'O',\n        'p' : 'P',\n        'q' : 'Q',\n        'r' : 'R',\n       's' : 'S',\n        't' : 'T',\n        'u' : 'U',\n        'v' : 'V',\n        'w' : 'W',\n        'x' : 'X',\n        'y' : 'Y',\n        'z' : 'Z',\n        'A' : 'A',\n        'B' : 'B',\n        'C' : 'C',\n        'D' : 'D',\n        'E' : 'E',\n        'F' : 'F',\n        'G' : 'G',\n        'H' : 'H',\n        'I' : 'I',\n        'J' : 'J',\n        'K' : 'K',\n        'L' : 'L',\n        'M' : 'M',\n        'N' : 'N',\n        'O' : 'O',\n        'P' : 'P',\n        'Q' : 'Q',\n        'R' : 'R',\n        'S' : 'S',\n        'T' : 'T',\n        'U' : 'U',\n        'V' : 'V',\n        'W' : 'W',\n        'X' : 'X',\n\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(getChar((\"abc\")).equals((\"f\")));",
            "assert(getChar((\"gfg\")).equals((\"t\")));",
            "assert(getChar((\"ab\")).equals((\"c\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "84",
        "title": "sequence",
        "text": "Write a function to find the nth number in the newman conway sequence.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def sequence(n : Long) : Long = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        72 : 72,\n        73 : 73,\n        74 : 74,\n        75 : 75,\n        76\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(sequence((10l)) == (6l));",
            "assert(sequence((2l)) == (1l));",
            "assert(sequence((3l)) == (2l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "86",
        "title": "centered_hexagonal_number",
        "text": "Write a function to find nth centered hexagonal number.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def centeredHexagonalNumber(n : Long) : Long = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        72 : 72,\n        73 : 73,\n        74 : 74,\n        75 : 75,\n        76 :\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(centeredHexagonalNumber((10l)) == (271l));",
            "assert(centeredHexagonalNumber((2l)) == (7l));",
            "assert(centeredHexagonalNumber((9l)) == (217l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "87",
        "title": "merge_dictionaries_three",
        "text": "Write a function to merge three dictionaries into a single map.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def mergeDictionariesThree(dict1 : Map[String,String], dict2 : Map[String,String], dict3 : Map[String,String]) : Map[String,String] = {\n        dict1.keySet().merge(dict2.keySet()),\n        dict1.keySet().merge(dict3.keySet()),\n        dict2.keySet().merge(dict3.keySet()),\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(mergeDictionariesThree((Map[String,String](\"R\" -> \"Red\", \"B\" -> \"Black\", \"P\" -> \"Pink\")), (Map[String,String](\"G\" -> \"Green\", \"W\" -> \"White\")), (Map[String,String](\"O\" -> \"Orange\", \"W\" -> \"White\", \"B\" -> \"Black\"))).equals((Map[String,String](\"B\" -> \"Black\", \"R\" -> \"Red\", \"P\" -> \"Pink\", \"G\" -> \"Green\", \"W\" -> \"White\", \"O\" -> \"Orange\"))));",
            "assert(mergeDictionariesThree((Map[String,String](\"R\" -> \"Red\", \"B\" -> \"Black\", \"P\" -> \"Pink\")), (Map[String,String](\"G\" -> \"Green\", \"W\" -> \"White\")), (Map[String,String](\"L\" -> \"lavender\", \"B\" -> \"Blue\"))).equals((Map[String,String](\"W\" -> \"White\", \"P\" -> \"Pink\", \"B\" -> \"Black\", \"R\" -> \"Red\", \"G\" -> \"Green\", \"L\" -> \"lavender\"))));",
            "assert(mergeDictionariesThree((Map[String,String](\"R\" -> \"Red\", \"B\" -> \"Black\", \"P\" -> \"Pink\")), (Map[String,String](\"L\" -> \"lavender\", \"B\" -> \"Blue\")), (Map[String,String](\"G\" -> \"Green\", \"W\" -> \"White\"))).equals((Map[String,String](\"B\" -> \"Black\", \"P\" -> \"Pink\", \"R\" -> \"Red\", \"G\" -> \"Green\", \"L\" -> \"lavender\", \"W\" -> \"White\"))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "88",
        "title": "freq_count",
        "text": "Write a function to get the frequency of all the elements in a list, returned as a map.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def freqCount(list1 : List[Long]) : Map[Long,Long] = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        72 : 72,\n        73 : 73,\n        \n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(freqCount((List[Long](10l.toLong, 10l.toLong, 10l.toLong, 10l.toLong, 20l.toLong, 20l.toLong, 20l.toLong, 20l.toLong, 40l.toLong, 40l.toLong, 50l.toLong, 50l.toLong, 30l.toLong))).equals((Map[Long,Long](10l -> 4l, 20l -> 4l, 40l -> 2l, 50l -> 2l, 30l -> 1l))));",
            "assert(freqCount((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 4l.toLong))).equals((Map[Long,Long](1l -> 3l, 2l -> 2l, 3l -> 3l, 4l -> 3l))));",
            "assert(freqCount((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 4l.toLong, 9l.toLong, 10l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 9l.toLong, 5l.toLong))).equals((Map[Long,Long](10l -> 1l, 5l -> 3l, 6l -> 2l, 7l -> 2l, 4l -> 2l, 9l -> 2l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "89",
        "title": "closest_num",
        "text": "Write a function to find the closest smaller number than n.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def closestNum(N : Long) : Long = {\n        Long.MIN_VALUE : Long.MAX_VALUE\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(closestNum((11l)) == (10l));",
            "assert(closestNum((7l)) == (6l));",
            "assert(closestNum((12l)) == (11l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "8",
        "title": "square_nums",
        "text": "Write a function to find squares of individual elements in a list.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def squareNums(nums : List[Long]) : List[Long] = {\n        nums[i] * nums[i]\n        for i in range(len(nums))\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));",
            "assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));",
            "assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "90",
        "title": "len_log",
        "text": "Write a scalathon function to find the length of the longest word.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def lenLog(list1 : List[String]) : Long = {\n        \"a\" : 1,\n        \"b\" : 2,\n        \"c\" : 3,\n        \"d\" : 4,\n        \"e\" : 5,\n        \"f\" : 6,\n        \"g\" : 7,\n        \"h\" : 8,\n        \"i\" : 9,\n        \"j\" : 10,\n        \"k\" : 11,\n        \"l\" : 12,\n        \"m\" : 13,\n        \"n\" : 14,\n        \"o\" : 15,\n        \"p\" : 16,\n        \"q\" : 17,\n        \"r\" : 18,\n        \"s\" : 19,\n        \"t\" : 20,\n        \"u\" : 21,\n        \"v\" : 22,\n        \"w\" : 23,\n        \"x\" : 24,\n        \"y\" : 25,\n        \"z\" : 26,\n        \"A\" : 27,\n        \"B\" : 28,\n        \"C\" : 29,\n        \"D\" : 30,\n        \"E\" : 31,\n        \"F\" : 32,\n        \"G\" : 33,\n        \"H\" : 34,\n        \"I\" : 35,\n        \"J\" : 36,\n        \"K\" : 37,\n        \"L\" : 38,\n        \"M\" : 39,\n        \"N\" : 40,\n        \"O\" : 41,\n        \"P\" : 42,\n        \"Q\" : 43,\n        \"R\" : 44,\n        \"S\" : 45,\n        \"T\" : 46,\n        \"U\" : 47,\n        \"V\" : 48,\n        \"W\" : 49,\n        \"X\" : 50,\n        \"Y\" : 51,\n        \"Z\" : 52,\n        \"0\" : 53,\n        \"1\" : 54,\n        \"2\" : 55,\n        \"3\" : 56,\n        \"4\" : 57,\n        \n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(lenLog((List[String](\"python\", \"PHP\", \"bigdata\"))) == (7l));",
            "assert(lenLog((List[String](\"a\", \"ab\", \"abc\"))) == (3l));",
            "assert(lenLog((List[String](\"small\", \"big\", \"tall\"))) == (5l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "91",
        "title": "find_substring",
        "text": "Write a function to check if a string is present as a substring in a given list of string values.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findSubstring(str1 : List[String], sub_str : String) : Boolean = {\n        str1.find(sub_str)\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(findSubstring((List[String](\"red\", \"black\", \"white\", \"green\", \"orange\")), (\"ack\")) == (true));",
            "assert(findSubstring((List[String](\"red\", \"black\", \"white\", \"green\", \"orange\")), (\"abc\")) == (false));",
            "assert(findSubstring((List[String](\"red\", \"black\", \"white\", \"green\", \"orange\")), (\"ange\")) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "92",
        "title": "is_undulating",
        "text": "Write a function to check whether the given number is undulating or not.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def isUndulating(n : Long) : Boolean = {\n        n < 0 : n < 0,\n        n > 0 : n > 0,\n        n == 0 : n == 0,\n        n == 1 : n == 1,\n        n == 2 : n == 2,\n        n == 3 : n == 3,\n        n == 4 : n == 4,\n        n == 5 : n == 5,\n        n == 6 : n == 6,\n        n == 7 : n == 7,\n        n == 8 : n == 8,\n        n == 9 : n == 9,\n        n == 10 : n == 10,\n        n == 11 : n == 11,\n        n == 12 : n == 12,\n        n == 13 : n == 13,\n        n == 14 : n == 14,\n        n == 15 : n == 15,\n        n == 16 : n == 16,\n        n == 17 : n == 17,\n        n == 18 : n == 18,\n        n == 19 : n == 19,\n        n == 20 : n == 20,\n        n == 21 : n == 21,\n        n == 22 : n == 22,\n        n == 23 : n == 23,\n        n == 24 : n == 24,\n        n == 25 : n == 25,\n        n == 26 : n == 26,\n        n == 27 : n == 27,\n        n == 28 : n == 28,\n        n == 29 : n == 29,\n        n == 30 : n == 30,\n        n == 31 : n == 31,\n        n == 32 : n == 32,\n        n == 33 : n == 33,\n        n == 34 : n == 34,\n        n == 35 : n == 35,\n        n == 36 : n == 36,\n        n == 37 : n == 37,\n        n == 38 : n == 38,\n        n == 39 : n == 39,\n        n == 40 : n == 40,\n        n == 41 : n == 41,\n        n == 42 : n == 42,\n        n == 43 : n == 43\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(isUndulating((1212121l)) == (true));",
            "assert(isUndulating((1991l)) == (false));",
            "assert(isUndulating((121l)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "93",
        "title": "power",
        "text": "Write a function to calculate the value of 'a' to the power 'b'.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def power(a : Long, b : Long) : Long = {\n        a : a * b,\n        b : b * a\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(power((3l), (4l)) == (81l));",
            "assert(power((2l), (3l)) == (8l));",
            "assert(power((5l), (5l)) == (3125l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "94",
        "title": "index_minimum",
        "text": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def indexMinimum(test_list : List[Tuple2[String, Long]]) : String = {\n        \"a\": \"a\",\n        \"b\": \"b\",\n        \"c\": \"c\",\n        \"d\": \"d\",\n        \"e\": \"e\",\n        \"f\": \"f\",\n        \"g\": \"g\",\n        \"h\": \"h\",\n        \"i\": \"i\",\n        \"j\": \"j\",\n        \"k\": \"k\",\n        \"l\": \"l\",\n        \"m\": \"m\",\n        \"n\": \"n\",\n        \"o\": \"o\",\n        \"p\": \"p\",\n        \"q\": \"q\",\n        \"r\": \"r\",\n        \"s\": \"s\",\n        \"t\": \"t\",\n        \"u\": \"u\",\n        \"v\": \"v\",\n        \"w\": \"w\",\n        \"x\": \"x\",\n        \"y\": \"y\",\n        \"z\": \"z\",\n        \"A\": \"A\",\n        \"B\": \"B\",\n        \"C\": \"C\",\n        \"D\": \"D\",\n        \"E\": \"E\",\n        \"F\": \"F\",\n        \"G\": \"G\",\n        \"H\": \"H\",\n        \"I\": \"I\",\n        \"J\": \"J\",\n        \"K\": \"K\",\n        \"L\": \"L\",\n        \"M\": \"M\",\n        \"N\": \"N\",\n        \"O\": \"O\",\n        \"P\": \"P\",\n        \"Q\": \"Q\",\n        \"R\": \"R\",\n        \"S\": \"S\",\n        \"T\": \"T\",\n        \"U\": \"U\",\n        \"V\": \"V\",\n        \"W\": \"W\",\n        \"X\": \"X\",\n        \"Y\": \"Y\",\n        \"Z\": \"Z\",\n        \"A\": \"A\",\n        \"B\": \"B\",\n        \"C\": \"C\",\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(indexMinimum((List[Tuple2[String, Long]]((\"Rash\", 143l), (\"Manjeet\", 200l), (\"Varsha\", 100l)))).equals((\"Varsha\")));",
            "assert(indexMinimum((List[Tuple2[String, Long]]((\"Yash\", 185l), (\"Dawood\", 125l), (\"Sanya\", 175l)))).equals((\"Dawood\")));",
            "assert(indexMinimum((List[Tuple2[String, Long]]((\"Sai\", 345l), (\"Salman\", 145l), (\"Ayesha\", 96l)))).equals((\"Ayesha\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "95",
        "title": "Find_Min_Length",
        "text": "Write a scalathon function to find the length of the smallest list in a list of lists.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def FindMinLength(lst : List[List[Long]]) : Long = {\n        lst.head.length()\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(FindMinLength((List[List[Long]](List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong)))) == (1l));",
            "assert(FindMinLength((List[List[Long]](List[Long](1l.toLong, 2l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))) == (2l));",
            "assert(FindMinLength((List[List[Long]](List[Long](3l.toLong, 3l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong)))) == (3l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "96",
        "title": "divisor",
        "text": "Write a scalathon function to find the number of divisors of a given integer.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def divisor(n : Long) : Long = {\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        72 : 72,\n        73 : 73,\n        74 : 74,\n        75 : 75,\n        76 : 76,\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(divisor((15l)) == (4l));",
            "assert(divisor((12l)) == (6l));",
            "assert(divisor((9l)) == (3l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "97",
        "title": "frequency_lists",
        "text": "Write a function to find frequency of each element in a flattened list of lists, returned in a map.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def frequencyLists(list1 : List[List[Long]]) : Map[Long,Long] = {\n        0 : 0,\n        1 : 1,\n        2 : 2,\n        3 : 3,\n        4 : 4,\n        5 : 5,\n        6 : 6,\n        7 : 7,\n        8 : 8,\n        9 : 9,\n        10 : 10,\n        11 : 11,\n        12 : 12,\n        13 : 13,\n        14 : 14,\n        15 : 15,\n        16 : 16,\n        17 : 17,\n        18 : 18,\n        19 : 19,\n        20 : 20,\n        21 : 21,\n        22 : 22,\n        23 : 23,\n        24 : 24,\n        25 : 25,\n        26 : 26,\n        27 : 27,\n        28 : 28,\n        29 : 29,\n        30 : 30,\n        31 : 31,\n        32 : 32,\n        33 : 33,\n        34 : 34,\n        35 : 35,\n        36 : 36,\n        37 : 37,\n        38 : 38,\n        39 : 39,\n        40 : 40,\n        41 : 41,\n        42 : 42,\n        43 : 43,\n        44 : 44,\n        45 : 45,\n        46 : 46,\n        47 : 47,\n        48 : 48,\n        49 : 49,\n        50 : 50,\n        51 : 51,\n        52 : 52,\n        53 : 53,\n        54 : 54,\n        55 : 55,\n        56 : 56,\n        57 : 57,\n        58 : 58,\n        59 : 59,\n        60 : 60,\n        61 : 61,\n        62 : 62,\n        63 : 63,\n        64 : 64,\n        65 : 65,\n        66 : 66,\n        67 : 67,\n        68 : 68,\n        69 : 69,\n        70 : 70,\n        71 : 71,\n        72 : 72,\n        73 :\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(frequencyLists((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong, 5l.toLong)))).equals((Map[Long,Long](1l -> 1l, 2l -> 3l, 3l -> 1l, 4l -> 1l, 5l -> 2l, 6l -> 1l, 7l -> 1l, 8l -> 1l, 9l -> 1l))));",
            "assert(frequencyLists((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong)))).equals((Map[Long,Long](1l -> 1l, 2l -> 1l, 3l -> 1l, 4l -> 1l, 5l -> 1l, 6l -> 1l, 7l -> 1l, 8l -> 1l, 9l -> 1l, 10l -> 1l, 11l -> 1l, 12l -> 1l))));",
            "assert(frequencyLists((List[List[Long]](List[Long](20l.toLong, 30l.toLong, 40l.toLong, 17l.toLong), List[Long](18l.toLong, 16l.toLong, 14l.toLong, 13l.toLong), List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong)))).equals((Map[Long,Long](20l -> 2l, 30l -> 2l, 40l -> 2l, 17l -> 1l, 18l -> 1l, 16l -> 1l, 14l -> 1l, 13l -> 1l, 10l -> 1l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "99",
        "title": "decimal_to_binary",
        "text": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def decimalToBinary(n : Long) : String = {\n        '0': '0',\n        '1': '1',\n        '2': '2',\n        '3': '3',\n        '4': '4',\n        '5': '5',\n        '6': '6',\n        '7': '7',\n        '8': '8',\n        '9': '9',\n        '10': '10',\n        '11': '11',\n        '12': '12',\n        '13': '13',\n        '14': '14',\n        '15': '15',\n        '16': '16',\n        '17': '17',\n        '18': '18',\n        '19': '19',\n        '20': '20',\n        '21': '21',\n        '22': '22',\n        '23': '23',\n        '24': '24',\n        '25': '25',\n        '26': '26',\n        '27': '27',\n        '28': '28',\n        '29': '29',\n        '30': '30',\n        '31': '31',\n        '32': '32',\n        '33': '33',\n        '34': '34',\n        '35': '35',\n        '36': '36',\n        '37': '37',\n        '38': '38',\n        '39': '39',\n        '40': '40',\n        '41': '41',\n        '42': '42',\n        '43': '43',\n        '44': '44',\n        '45': '45',\n        '46': '46',\n        '47': '47',\n        '48': '48',\n        '49': '49',\n        '50': '50',\n        '51': '51',\n        '52': '52',\n        '53': '53',\n        '54': '54',\n        '55': '55',\n\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(decimalToBinary((8l)).equals((\"1000\")));",
            "assert(decimalToBinary((18l)).equals((\"10010\")));",
            "assert(decimalToBinary((7l)).equals((\"111\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "9",
        "title": "find_Rotations",
        "text": "Write a scalathon function to find the minimum number of rotations (greater than 0) required to get the same string.",
        "code": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    def findRotations(str : String) : Long = {\n        \"a\" : 0,\n        \"b\" : 1,\n        \"c\" : 2,\n        \"d\" : 3,\n        \"e\" : 4,\n        \"f\" : 5,\n        \"g\" : 6,\n        \"h\" : 7,\n        \"i\" : 8,\n        \"j\" : 9,\n        \"k\" : 10,\n        \"l\" : 11,\n        \"m\" : 12,\n        \"n\" : 13,\n        \"o\" : 14,\n        \"p\" : 15,\n        \"q\" : 16,\n        \"r\" : 17,\n        \"s\" : 18,\n        \"t\" : 19,\n        \"u\" : 20,\n        \"v\" : 21,\n        \"w\" : 22,\n        \"x\" : 23,\n        \"y\" : 24,\n        \"z\" : 25,\n        \"A\" : 26,\n        \"B\" : 27,\n        \"C\" : 28,\n        \"D\" : 29,\n        \"E\" : 30,\n        \"F\" : 31,\n        \"G\" : 32,\n        \"H\" : 33,\n        \"I\" : 34,\n        \"J\" : 35,\n        \"K\" : 36,\n        \"L\" : 37,\n        \"M\" : 38,\n        \"N\" : 39,\n        \"O\" : 40,\n        \"P\" : 41,\n        \"Q\" : 42,\n        \"R\" : 43,\n        \"S\" : 44,\n        \"T\" : 45,\n        \"U\" : 46,\n        \"V\" : 47,\n        \"W\" : 48,\n        \"X\" : 49,\n        \"Y\" : 50,\n        \"Z\" : 51,\n        \"0\" : 52,\n        \"1\" : 53,\n        \"2\" : 54,\n        \"3\" : 55,\n    }\n",
        "test_list": [
            "def main(args: Array[String]) = {",
            "assert(findRotations((\"aaaa\")) == (1l));",
            "assert(findRotations((\"ab\")) == (2l));",
            "assert(findRotations((\"abc\")) == (3l));",
            "}",
            "}"
        ]
    }
]